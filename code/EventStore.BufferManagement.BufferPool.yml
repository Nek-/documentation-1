### YamlMime:ManagedReference
items:
- uid: EventStore.BufferManagement.BufferPool
  commentId: T:EventStore.BufferManagement.BufferPool
  id: BufferPool
  parent: EventStore.BufferManagement
  children:
  - EventStore.BufferManagement.BufferPool.#ctor
  - EventStore.BufferManagement.BufferPool.#ctor(EventStore.BufferManagement.BufferManager)
  - EventStore.BufferManagement.BufferPool.#ctor(System.Int32,EventStore.BufferManagement.BufferManager)
  - EventStore.BufferManagement.BufferPool.Append(System.Byte[])
  - EventStore.BufferManagement.BufferPool.Append(System.Byte[],System.Int32,System.Int32)
  - EventStore.BufferManagement.BufferPool.Capacity
  - EventStore.BufferManagement.BufferPool.Dispose
  - EventStore.BufferManagement.BufferPool.DisposeInternal
  - EventStore.BufferManagement.BufferPool.EffectiveBuffers
  - EventStore.BufferManagement.BufferPool.Finalize
  - EventStore.BufferManagement.BufferPool.Item(System.Int32)
  - EventStore.BufferManagement.BufferPool.Length
  - EventStore.BufferManagement.BufferPool.ReadFrom(System.Int32,ArraySegment{System.Byte})
  - EventStore.BufferManagement.BufferPool.ReadFrom(System.Int32,System.Byte[],System.Int32,System.Int32)
  - EventStore.BufferManagement.BufferPool.SetLength(System.Int32)
  - EventStore.BufferManagement.BufferPool.SetLength(System.Int32,System.Boolean)
  - EventStore.BufferManagement.BufferPool.ToByteArray
  - EventStore.BufferManagement.BufferPool.Write(System.Int32,ArraySegment{System.Byte})
  - EventStore.BufferManagement.BufferPool.Write(System.Int32,System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: BufferPool
  nameWithType: BufferPool
  fullName: EventStore.BufferManagement.BufferPool
  type: Class
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: BufferPool
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 5
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  syntax:
    content: 'public class BufferPool : IDisposable'
    content.vb: >-
      Public Class BufferPool
          Inherits IDisposable
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.BufferManagement.BufferPool.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.BufferManagement.BufferPool.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.BufferManagement.BufferPool.Capacity
  commentId: P:EventStore.BufferManagement.BufferPool.Capacity
  id: Capacity
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: Capacity
  nameWithType: BufferPool.Capacity
  fullName: EventStore.BufferManagement.BufferPool.Capacity
  type: Property
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Capacity
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 32
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nGets the capacity of the <xref href=\"EventStore.BufferManagement.BufferPool\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public int Capacity { get; }
    parameters: []
    return:
      type: System.Int32
      description: The capacity.
    content.vb: Public ReadOnly Property Capacity As Integer
  overload: EventStore.BufferManagement.BufferPool.Capacity*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.BufferManagement.BufferPool.Length
  commentId: P:EventStore.BufferManagement.BufferPool.Length
  id: Length
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: BufferPool.Length
  fullName: EventStore.BufferManagement.BufferPool.Length
  type: Property
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Length
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 45
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nGets the current length of the <xref href=\"EventStore.BufferManagement.BufferPool\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
      description: The length.
    content.vb: Public ReadOnly Property Length As Integer
  overload: EventStore.BufferManagement.BufferPool.Length*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.BufferManagement.BufferPool.EffectiveBuffers
  commentId: P:EventStore.BufferManagement.BufferPool.EffectiveBuffers
  id: EffectiveBuffers
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: EffectiveBuffers
  nameWithType: BufferPool.EffectiveBuffers
  fullName: EventStore.BufferManagement.BufferPool.EffectiveBuffers
  type: Property
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: EffectiveBuffers
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 51
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nGets the effective buffers contained in this <xref href=\"EventStore.BufferManagement.BufferPool\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public IEnumerable<ArraySegment<byte>> EffectiveBuffers { get; }
    parameters: []
    return:
      type: IEnumerable{ArraySegment{System.Byte}}
      description: The effective buffers.
    content.vb: Public ReadOnly Property EffectiveBuffers As IEnumerable(Of ArraySegment(Of Byte))
  overload: EventStore.BufferManagement.BufferPool.EffectiveBuffers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.BufferManagement.BufferPool.Item(System.Int32)
  commentId: P:EventStore.BufferManagement.BufferPool.Item(System.Int32)
  id: Item(System.Int32)
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: BufferPool.Item[Int32]
  fullName: EventStore.BufferManagement.BufferPool.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: this[]
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 74
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nGets or sets the <see cref=\"!:System.Byte\"></see> with the specified index.\n"
  example: []
  syntax:
    content: public byte this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Byte
    content.vb: Public Property Item(index As Integer) As Byte
  overload: EventStore.BufferManagement.BufferPool.Item*
  nameWithType.vb: BufferPool.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: EventStore.BufferManagement.BufferPool.Item(System.Int32)
  name.vb: Item(Int32)
- uid: EventStore.BufferManagement.BufferPool.#ctor
  commentId: M:EventStore.BufferManagement.BufferPool.#ctor
  id: '#ctor'
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: BufferPool()
  nameWithType: BufferPool.BufferPool()
  fullName: EventStore.BufferManagement.BufferPool.BufferPool()
  type: Constructor
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 102
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nInitializes a new instance of the <xref href=\"EventStore.BufferManagement.BufferPool\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public BufferPool()
    content.vb: Public Sub New
  overload: EventStore.BufferManagement.BufferPool.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.BufferManagement.BufferPool.#ctor(EventStore.BufferManagement.BufferManager)
  commentId: M:EventStore.BufferManagement.BufferPool.#ctor(EventStore.BufferManagement.BufferManager)
  id: '#ctor(EventStore.BufferManagement.BufferManager)'
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: BufferPool(BufferManager)
  nameWithType: BufferPool.BufferPool(BufferManager)
  fullName: EventStore.BufferManagement.BufferPool.BufferPool(EventStore.BufferManagement.BufferManager)
  type: Constructor
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 108
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nInitializes a new instance of the <xref href=\"EventStore.BufferManagement.BufferPool\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public BufferPool(BufferManager bufferManager)
    parameters:
    - id: bufferManager
      type: EventStore.BufferManagement.BufferManager
      description: The buffer manager.
    content.vb: Public Sub New(bufferManager As BufferManager)
  overload: EventStore.BufferManagement.BufferPool.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.BufferManagement.BufferPool.#ctor(System.Int32,EventStore.BufferManagement.BufferManager)
  commentId: M:EventStore.BufferManagement.BufferPool.#ctor(System.Int32,EventStore.BufferManagement.BufferManager)
  id: '#ctor(System.Int32,EventStore.BufferManagement.BufferManager)'
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: BufferPool(Int32, BufferManager)
  nameWithType: BufferPool.BufferPool(Int32, BufferManager)
  fullName: EventStore.BufferManagement.BufferPool.BufferPool(System.Int32, EventStore.BufferManagement.BufferManager)
  type: Constructor
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 115
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nInitializes a new instance of the <xref href=\"EventStore.BufferManagement.BufferPool\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public BufferPool(int initialBufferCount, BufferManager bufferManager)
    parameters:
    - id: initialBufferCount
      type: System.Int32
      description: The number of initial buffers.
    - id: bufferManager
      type: EventStore.BufferManagement.BufferManager
      description: The buffer manager.
    content.vb: Public Sub New(initialBufferCount As Integer, bufferManager As BufferManager)
  overload: EventStore.BufferManagement.BufferPool.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.BufferManagement.BufferPool.Append(System.Byte[])
  commentId: M:EventStore.BufferManagement.BufferPool.Append(System.Byte[])
  id: Append(System.Byte[])
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: Append(Byte[])
  nameWithType: BufferPool.Append(Byte[])
  fullName: EventStore.BufferManagement.BufferPool.Append(System.Byte[])
  type: Method
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Append
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 133
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nAppends the specified data.\n"
  example: []
  syntax:
    content: public void Append(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
      description: The data to write.
    content.vb: Public Sub Append(data As Byte())
  overload: EventStore.BufferManagement.BufferPool.Append*
  nameWithType.vb: BufferPool.Append(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.BufferManagement.BufferPool.Append(System.Byte())
  name.vb: Append(Byte())
- uid: EventStore.BufferManagement.BufferPool.Append(System.Byte[],System.Int32,System.Int32)
  commentId: M:EventStore.BufferManagement.BufferPool.Append(System.Byte[],System.Int32,System.Int32)
  id: Append(System.Byte[],System.Int32,System.Int32)
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: Append(Byte[], Int32, Int32)
  nameWithType: BufferPool.Append(Byte[], Int32, Int32)
  fullName: EventStore.BufferManagement.BufferPool.Append(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Append
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 146
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nAppends the specified data.\n"
  example: []
  syntax:
    content: public void Append(byte[] data, int offset, int count)
    parameters:
    - id: data
      type: System.Byte[]
      description: The data.
    - id: offset
      type: System.Int32
      description: The offset.
    - id: count
      type: System.Int32
      description: The count.
    content.vb: Public Sub Append(data As Byte(), offset As Integer, count As Integer)
  overload: EventStore.BufferManagement.BufferPool.Append*
  nameWithType.vb: BufferPool.Append(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.BufferManagement.BufferPool.Append(System.Byte(), System.Int32, System.Int32)
  name.vb: Append(Byte(), Int32, Int32)
- uid: EventStore.BufferManagement.BufferPool.Write(System.Int32,System.Byte[],System.Int32,System.Int32)
  commentId: M:EventStore.BufferManagement.BufferPool.Write(System.Int32,System.Byte[],System.Int32,System.Int32)
  id: Write(System.Int32,System.Byte[],System.Int32,System.Int32)
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: Write(Int32, Byte[], Int32, Int32)
  nameWithType: BufferPool.Write(Int32, Byte[], Int32, Int32)
  fullName: EventStore.BufferManagement.BufferPool.Write(System.Int32, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Write
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 158
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nWrites data to the specified position.\n"
  example: []
  syntax:
    content: public void Write(int position, byte[] data, int offset, int count)
    parameters:
    - id: position
      type: System.Int32
      description: The position to write at.
    - id: data
      type: System.Byte[]
      description: The data.
    - id: offset
      type: System.Int32
      description: The offset.
    - id: count
      type: System.Int32
      description: The count.
    content.vb: Public Sub Write(position As Integer, data As Byte(), offset As Integer, count As Integer)
  overload: EventStore.BufferManagement.BufferPool.Write*
  nameWithType.vb: BufferPool.Write(Int32, Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.BufferManagement.BufferPool.Write(System.Int32, System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Int32, Byte(), Int32, Int32)
- uid: EventStore.BufferManagement.BufferPool.Write(System.Int32,ArraySegment{System.Byte})
  commentId: M:EventStore.BufferManagement.BufferPool.Write(System.Int32,ArraySegment{System.Byte})
  id: Write(System.Int32,ArraySegment{System.Byte})
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: Write(Int32, ArraySegment<Byte>)
  nameWithType: BufferPool.Write(Int32, ArraySegment<Byte>)
  fullName: EventStore.BufferManagement.BufferPool.Write(System.Int32, ArraySegment<System.Byte>)
  type: Method
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Write
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 174
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nWrites data to the specified position.\n"
  example: []
  syntax:
    content: public void Write(int position, ArraySegment<byte> data)
    parameters:
    - id: position
      type: System.Int32
      description: The position to write at.
    - id: data
      type: ArraySegment{System.Byte}
      description: The data.
    content.vb: Public Sub Write(position As Integer, data As ArraySegment(Of Byte))
  overload: EventStore.BufferManagement.BufferPool.Write*
  nameWithType.vb: BufferPool.Write(Int32, ArraySegment(Of Byte))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.BufferManagement.BufferPool.Write(System.Int32, ArraySegment(Of System.Byte))
  name.vb: Write(Int32, ArraySegment(Of Byte))
- uid: EventStore.BufferManagement.BufferPool.ReadFrom(System.Int32,System.Byte[],System.Int32,System.Int32)
  commentId: M:EventStore.BufferManagement.BufferPool.ReadFrom(System.Int32,System.Byte[],System.Int32,System.Int32)
  id: ReadFrom(System.Int32,System.Byte[],System.Int32,System.Int32)
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: ReadFrom(Int32, Byte[], Int32, Int32)
  nameWithType: BufferPool.ReadFrom(Int32, Byte[], Int32, Int32)
  fullName: EventStore.BufferManagement.BufferPool.ReadFrom(System.Int32, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ReadFrom
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 204
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nReads data from a given position\n"
  example: []
  syntax:
    content: public int ReadFrom(int position, byte[] data, int offset, int count)
    parameters:
    - id: position
      type: System.Int32
      description: The position to read from.
    - id: data
      type: System.Byte[]
      description: Where to read the data to.
    - id: offset
      type: System.Int32
      description: The offset to start reading into.
    - id: count
      type: System.Int32
      description: The number of bytes to read.
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function ReadFrom(position As Integer, data As Byte(), offset As Integer, count As Integer) As Integer
  overload: EventStore.BufferManagement.BufferPool.ReadFrom*
  nameWithType.vb: BufferPool.ReadFrom(Int32, Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.BufferManagement.BufferPool.ReadFrom(System.Int32, System.Byte(), System.Int32, System.Int32)
  name.vb: ReadFrom(Int32, Byte(), Int32, Int32)
- uid: EventStore.BufferManagement.BufferPool.ReadFrom(System.Int32,ArraySegment{System.Byte})
  commentId: M:EventStore.BufferManagement.BufferPool.ReadFrom(System.Int32,ArraySegment{System.Byte})
  id: ReadFrom(System.Int32,ArraySegment{System.Byte})
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: ReadFrom(Int32, ArraySegment<Byte>)
  nameWithType: BufferPool.ReadFrom(Int32, ArraySegment<Byte>)
  fullName: EventStore.BufferManagement.BufferPool.ReadFrom(System.Int32, ArraySegment<System.Byte>)
  type: Method
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ReadFrom
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 221
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nReads data from a given position.\n"
  example: []
  syntax:
    content: public int ReadFrom(int position, ArraySegment<byte> data)
    parameters:
    - id: position
      type: System.Int32
      description: The position to read from.
    - id: data
      type: ArraySegment{System.Byte}
      description: Where to read the data to.
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function ReadFrom(position As Integer, data As ArraySegment(Of Byte)) As Integer
  overload: EventStore.BufferManagement.BufferPool.ReadFrom*
  nameWithType.vb: BufferPool.ReadFrom(Int32, ArraySegment(Of Byte))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.BufferManagement.BufferPool.ReadFrom(System.Int32, ArraySegment(Of System.Byte))
  name.vb: ReadFrom(Int32, ArraySegment(Of Byte))
- uid: EventStore.BufferManagement.BufferPool.SetLength(System.Int32)
  commentId: M:EventStore.BufferManagement.BufferPool.SetLength(System.Int32)
  id: SetLength(System.Int32)
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: SetLength(Int32)
  nameWithType: BufferPool.SetLength(Int32)
  fullName: EventStore.BufferManagement.BufferPool.SetLength(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetLength
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 249
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nSets the length of the <xref href=\"EventStore.BufferManagement.BufferPool\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void SetLength(int newLength)
    parameters:
    - id: newLength
      type: System.Int32
      description: The new length.
    content.vb: Public Sub SetLength(newLength As Integer)
  overload: EventStore.BufferManagement.BufferPool.SetLength*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.BufferManagement.BufferPool.SetLength(System.Int32,System.Boolean)
  commentId: M:EventStore.BufferManagement.BufferPool.SetLength(System.Int32,System.Boolean)
  id: SetLength(System.Int32,System.Boolean)
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: SetLength(Int32, Boolean)
  nameWithType: BufferPool.SetLength(Int32, Boolean)
  fullName: EventStore.BufferManagement.BufferPool.SetLength(System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetLength
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 259
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nSets the length of the <xref href=\"EventStore.BufferManagement.BufferPool\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void SetLength(int newLength, bool releaseMemory)
    parameters:
    - id: newLength
      type: System.Int32
      description: The new length
    - id: releaseMemory
      type: System.Boolean
      description: if set to <code>true</code> any memory no longer used will be released.
    content.vb: Public Sub SetLength(newLength As Integer, releaseMemory As Boolean)
  overload: EventStore.BufferManagement.BufferPool.SetLength*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.BufferManagement.BufferPool.ToByteArray
  commentId: M:EventStore.BufferManagement.BufferPool.ToByteArray
  id: ToByteArray
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: ToByteArray()
  nameWithType: BufferPool.ToByteArray()
  fullName: EventStore.BufferManagement.BufferPool.ToByteArray()
  type: Method
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ToByteArray
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 298
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nConverts this <xref href=\"EventStore.BufferManagement.BufferPool\" data-throw-if-not-resolved=\"false\"></xref> to a byte array.\n"
  example: []
  syntax:
    content: public byte[] ToByteArray()
    return:
      type: System.Byte[]
      description: ''
    content.vb: Public Function ToByteArray As Byte()
  overload: EventStore.BufferManagement.BufferPool.ToByteArray*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.BufferManagement.BufferPool.Dispose
  commentId: M:EventStore.BufferManagement.BufferPool.Dispose
  id: Dispose
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: BufferPool.Dispose()
  fullName: EventStore.BufferManagement.BufferPool.Dispose()
  type: Method
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Dispose
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 328
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nReturns any memory used buy this <xref href=\"EventStore.BufferManagement.BufferPool\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"EventStore.BufferManagement.BufferManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: EventStore.BufferManagement.BufferPool.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.BufferManagement.BufferPool.Finalize
  commentId: M:EventStore.BufferManagement.BufferPool.Finalize
  id: Finalize
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: BufferPool.Finalize()
  fullName: EventStore.BufferManagement.BufferPool.Finalize()
  type: Method
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Finalize
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 334
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: EventStore.BufferManagement.BufferPool.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.BufferManagement.BufferPool.DisposeInternal
  commentId: M:EventStore.BufferManagement.BufferPool.DisposeInternal
  id: DisposeInternal
  parent: EventStore.BufferManagement.BufferPool
  langs:
  - csharp
  - vb
  name: DisposeInternal()
  nameWithType: BufferPool.DisposeInternal()
  fullName: EventStore.BufferManagement.BufferPool.DisposeInternal()
  type: Method
  source:
    remote:
      path: src/EventStore.BufferManagement/BufferPool.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: DisposeInternal
    path: ../EventStore/src/EventStore.BufferManagement/BufferPool.cs
    startLine: 339
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  syntax:
    content: protected virtual void DisposeInternal()
    content.vb: Protected Overridable Sub DisposeInternal
  overload: EventStore.BufferManagement.BufferPool.DisposeInternal*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: EventStore.BufferManagement
  commentId: N:EventStore.BufferManagement
  isExternal: false
  name: EventStore.BufferManagement
  nameWithType: EventStore.BufferManagement
  fullName: EventStore.BufferManagement
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.BufferManagement.BufferPool.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<BufferPool>()
  nameWithType: ProtobufExtensions.Serialize<BufferPool>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.BufferManagement.BufferPool>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of BufferPool)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.BufferManagement.BufferPool)()
  name.vb: Serialize(Of BufferPool)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<BufferPool>
    nameWithType: ProtobufExtensions.Serialize<BufferPool>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.BufferManagement.BufferPool>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of BufferPool)
    nameWithType: ProtobufExtensions.Serialize(Of BufferPool)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.BufferManagement.BufferPool)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.BufferManagement.BufferPool.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<BufferPool>()
  nameWithType: ProtobufExtensions.SerializeToArray<BufferPool>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.BufferManagement.BufferPool>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of BufferPool)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.BufferManagement.BufferPool)()
  name.vb: SerializeToArray(Of BufferPool)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<BufferPool>
    nameWithType: ProtobufExtensions.SerializeToArray<BufferPool>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.BufferManagement.BufferPool>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of BufferPool)
    nameWithType: ProtobufExtensions.SerializeToArray(Of BufferPool)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.BufferManagement.BufferPool)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.BufferManagement.BufferPool
  commentId: T:EventStore.BufferManagement.BufferPool
  parent: EventStore.BufferManagement
  isExternal: false
  name: BufferPool
  nameWithType: BufferPool
  fullName: EventStore.BufferManagement.BufferPool
- uid: EventStore.BufferManagement.BufferPool.Capacity*
  commentId: Overload:EventStore.BufferManagement.BufferPool.Capacity
  isExternal: false
  name: Capacity
  nameWithType: BufferPool.Capacity
  fullName: EventStore.BufferManagement.BufferPool.Capacity
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.BufferManagement.BufferPool.Length*
  commentId: Overload:EventStore.BufferManagement.BufferPool.Length
  isExternal: false
  name: Length
  nameWithType: BufferPool.Length
  fullName: EventStore.BufferManagement.BufferPool.Length
- uid: EventStore.BufferManagement.BufferPool.EffectiveBuffers*
  commentId: Overload:EventStore.BufferManagement.BufferPool.EffectiveBuffers
  isExternal: false
  name: EffectiveBuffers
  nameWithType: BufferPool.EffectiveBuffers
  fullName: EventStore.BufferManagement.BufferPool.EffectiveBuffers
- uid: IEnumerable{ArraySegment{System.Byte}}
  commentId: '!:IEnumerable{ArraySegment{System.Byte}}'
  definition: IEnumerable`1
  name: IEnumerable<ArraySegment<Byte>>
  nameWithType: IEnumerable<ArraySegment<Byte>>
  fullName: IEnumerable<ArraySegment<System.Byte>>
  nameWithType.vb: IEnumerable(Of ArraySegment(Of Byte))
  fullName.vb: IEnumerable(Of ArraySegment(Of System.Byte))
  name.vb: IEnumerable(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.BufferManagement.BufferPool.Item*
  commentId: Overload:EventStore.BufferManagement.BufferPool.Item
  isExternal: false
  name: Item
  nameWithType: BufferPool.Item
  fullName: EventStore.BufferManagement.BufferPool.Item
- uid: System.Byte
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: EventStore.BufferManagement.BufferPool.#ctor*
  commentId: Overload:EventStore.BufferManagement.BufferPool.#ctor
  isExternal: false
  name: BufferPool
  nameWithType: BufferPool.BufferPool
  fullName: EventStore.BufferManagement.BufferPool.BufferPool
- uid: EventStore.BufferManagement.BufferManager
  commentId: T:EventStore.BufferManagement.BufferManager
  parent: EventStore.BufferManagement
  isExternal: false
  name: BufferManager
  nameWithType: BufferManager
  fullName: EventStore.BufferManagement.BufferManager
- uid: EventStore.BufferManagement.BufferPool.Append*
  commentId: Overload:EventStore.BufferManagement.BufferPool.Append
  isExternal: false
  name: Append
  nameWithType: BufferPool.Append
  fullName: EventStore.BufferManagement.BufferPool.Append
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.BufferManagement.BufferPool.Write*
  commentId: Overload:EventStore.BufferManagement.BufferPool.Write
  isExternal: false
  name: Write
  nameWithType: BufferPool.Write
  fullName: EventStore.BufferManagement.BufferPool.Write
- uid: ArraySegment{System.Byte}
  commentId: '!:ArraySegment{System.Byte}'
  definition: ArraySegment`1
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: ArraySegment<System.Byte>
  nameWithType.vb: ArraySegment(Of Byte)
  fullName.vb: ArraySegment(Of System.Byte)
  name.vb: ArraySegment(Of Byte)
  spec.csharp:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ArraySegment`1
  isExternal: true
  name: ArraySegment<>
  nameWithType: ArraySegment<>
  fullName: ArraySegment<>
  nameWithType.vb: ArraySegment(Of )
  fullName.vb: ArraySegment(Of )
  name.vb: ArraySegment(Of )
  spec.csharp:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.BufferManagement.BufferPool.ReadFrom*
  commentId: Overload:EventStore.BufferManagement.BufferPool.ReadFrom
  isExternal: false
  name: ReadFrom
  nameWithType: BufferPool.ReadFrom
  fullName: EventStore.BufferManagement.BufferPool.ReadFrom
- uid: EventStore.BufferManagement.BufferPool.SetLength*
  commentId: Overload:EventStore.BufferManagement.BufferPool.SetLength
  isExternal: false
  name: SetLength
  nameWithType: BufferPool.SetLength
  fullName: EventStore.BufferManagement.BufferPool.SetLength
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.BufferManagement.BufferPool.ToByteArray*
  commentId: Overload:EventStore.BufferManagement.BufferPool.ToByteArray
  isExternal: false
  name: ToByteArray
  nameWithType: BufferPool.ToByteArray
  fullName: EventStore.BufferManagement.BufferPool.ToByteArray
- uid: EventStore.BufferManagement.BufferPool.Dispose*
  commentId: Overload:EventStore.BufferManagement.BufferPool.Dispose
  isExternal: false
  name: Dispose
  nameWithType: BufferPool.Dispose
  fullName: EventStore.BufferManagement.BufferPool.Dispose
- uid: EventStore.BufferManagement.BufferPool.Finalize*
  commentId: Overload:EventStore.BufferManagement.BufferPool.Finalize
  isExternal: false
  name: Finalize
  nameWithType: BufferPool.Finalize
  fullName: EventStore.BufferManagement.BufferPool.Finalize
- uid: EventStore.BufferManagement.BufferPool.DisposeInternal*
  commentId: Overload:EventStore.BufferManagement.BufferPool.DisposeInternal
  isExternal: false
  name: DisposeInternal
  nameWithType: BufferPool.DisposeInternal
  fullName: EventStore.BufferManagement.BufferPool.DisposeInternal

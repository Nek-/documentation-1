### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
  commentId: T:EventStore.ClientAPI.CatchUpSubscriptionSettings
  id: CatchUpSubscriptionSettings
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.Default
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.MaxLiveQueueSize
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.ReadBatchSize
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.ResolveLinkTos
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.SubscriptionName
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.VerboseLogging
  langs:
  - csharp
  - vb
  name: CatchUpSubscriptionSettings
  nameWithType: CatchUpSubscriptionSettings
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: CatchUpSubscriptionSettings
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 7
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSettings for <xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class CatchUpSubscriptionSettings : object'
    content.vb: >-
      Public Class CatchUpSubscriptionSettings
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.MaxLiveQueueSize
  commentId: F:EventStore.ClientAPI.CatchUpSubscriptionSettings.MaxLiveQueueSize
  id: MaxLiveQueueSize
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: MaxLiveQueueSize
  nameWithType: CatchUpSubscriptionSettings.MaxLiveQueueSize
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.MaxLiveQueueSize
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: MaxLiveQueueSize
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 12
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe maximum amount of events to cache when processing from a live subscription. Going above this value will drop the subscription.\n"
  example: []
  syntax:
    content: public readonly int MaxLiveQueueSize
    return:
      type: System.Int32
    content.vb: Public ReadOnly MaxLiveQueueSize As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.ReadBatchSize
  commentId: F:EventStore.ClientAPI.CatchUpSubscriptionSettings.ReadBatchSize
  id: ReadBatchSize
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: ReadBatchSize
  nameWithType: CatchUpSubscriptionSettings.ReadBatchSize
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.ReadBatchSize
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ReadBatchSize
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 17
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe number of events to read per batch when reading the history.\n"
  example: []
  syntax:
    content: public readonly int ReadBatchSize
    return:
      type: System.Int32
    content.vb: Public ReadOnly ReadBatchSize As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.VerboseLogging
  commentId: F:EventStore.ClientAPI.CatchUpSubscriptionSettings.VerboseLogging
  id: VerboseLogging
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: VerboseLogging
  nameWithType: CatchUpSubscriptionSettings.VerboseLogging
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.VerboseLogging
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: VerboseLogging
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 22
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nEnables verbose logging on the subscription.\n"
  example: []
  syntax:
    content: public readonly bool VerboseLogging
    return:
      type: System.Boolean
    content.vb: Public ReadOnly VerboseLogging As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.ResolveLinkTos
  commentId: F:EventStore.ClientAPI.CatchUpSubscriptionSettings.ResolveLinkTos
  id: ResolveLinkTos
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: ResolveLinkTos
  nameWithType: CatchUpSubscriptionSettings.ResolveLinkTos
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.ResolveLinkTos
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ResolveLinkTos
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 27
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWhether to resolve link events.\n"
  example: []
  syntax:
    content: public readonly bool ResolveLinkTos
    return:
      type: System.Boolean
    content.vb: Public ReadOnly ResolveLinkTos As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.SubscriptionName
  commentId: F:EventStore.ClientAPI.CatchUpSubscriptionSettings.SubscriptionName
  id: SubscriptionName
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: SubscriptionName
  nameWithType: CatchUpSubscriptionSettings.SubscriptionName
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.SubscriptionName
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: SubscriptionName
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 32
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe name of the subscription.\n"
  example: []
  syntax:
    content: public readonly string SubscriptionName
    return:
      type: System.String
    content.vb: Public ReadOnly SubscriptionName As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.Default
  commentId: F:EventStore.ClientAPI.CatchUpSubscriptionSettings.Default
  id: Default
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: CatchUpSubscriptionSettings.Default
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.Default
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Default
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 37
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nReturns default settings.\n"
  example: []
  syntax:
    content: public static readonly CatchUpSubscriptionSettings Default
    return:
      type: EventStore.ClientAPI.CatchUpSubscriptionSettings
    content.vb: Public Shared ReadOnly Default As CatchUpSubscriptionSettings
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)
  commentId: M:EventStore.ClientAPI.CatchUpSubscriptionSettings.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)
  id: '#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)'
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: CatchUpSubscriptionSettings(Int32, Int32, Boolean, Boolean, String)
  nameWithType: CatchUpSubscriptionSettings.CatchUpSubscriptionSettings(Int32, Int32, Boolean, Boolean, String)
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.CatchUpSubscriptionSettings(System.Int32, System.Int32, System.Boolean, System.Boolean, System.String)
  type: Constructor
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 52
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConstructs a <xref href=\"EventStore.ClientAPI.CatchUpSubscriptionSettings\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: public CatchUpSubscriptionSettings(int maxLiveQueueSize, int readBatchSize, bool verboseLogging, bool resolveLinkTos, string subscriptionName = "")
    parameters:
    - id: maxLiveQueueSize
      type: System.Int32
      description: The maximum amount of events to buffer when processing from a live subscription. Going above this amount will drop the subscription.
    - id: readBatchSize
      type: System.Int32
      description: The number of events to read per batch when reading through history.
    - id: verboseLogging
      type: System.Boolean
      description: Enables verbose logging on the subscription.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve link events.
    - id: subscriptionName
      type: System.String
      description: The name of the subscription.
    content.vb: Public Sub New(maxLiveQueueSize As Integer, readBatchSize As Integer, verboseLogging As Boolean, resolveLinkTos As Boolean, subscriptionName As String = "")
  overload: EventStore.ClientAPI.CatchUpSubscriptionSettings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreCatchUpSubscription
  parent: EventStore.ClientAPI
  name: EventStoreCatchUpSubscription
  nameWithType: EventStoreCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<CatchUpSubscriptionSettings>()
  nameWithType: ProtobufExtensions.Serialize<CatchUpSubscriptionSettings>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.CatchUpSubscriptionSettings>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of CatchUpSubscriptionSettings)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.CatchUpSubscriptionSettings)()
  name.vb: Serialize(Of CatchUpSubscriptionSettings)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<CatchUpSubscriptionSettings>
    nameWithType: ProtobufExtensions.Serialize<CatchUpSubscriptionSettings>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.CatchUpSubscriptionSettings>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of CatchUpSubscriptionSettings)
    nameWithType: ProtobufExtensions.Serialize(Of CatchUpSubscriptionSettings)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.CatchUpSubscriptionSettings)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<CatchUpSubscriptionSettings>()
  nameWithType: ProtobufExtensions.SerializeToArray<CatchUpSubscriptionSettings>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.CatchUpSubscriptionSettings>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of CatchUpSubscriptionSettings)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.CatchUpSubscriptionSettings)()
  name.vb: SerializeToArray(Of CatchUpSubscriptionSettings)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<CatchUpSubscriptionSettings>
    nameWithType: ProtobufExtensions.SerializeToArray<CatchUpSubscriptionSettings>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.CatchUpSubscriptionSettings>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of CatchUpSubscriptionSettings)
    nameWithType: ProtobufExtensions.SerializeToArray(Of CatchUpSubscriptionSettings)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.CatchUpSubscriptionSettings)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
  commentId: T:EventStore.ClientAPI.CatchUpSubscriptionSettings
  parent: EventStore.ClientAPI
  name: CatchUpSubscriptionSettings
  nameWithType: CatchUpSubscriptionSettings
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.#ctor*
  commentId: Overload:EventStore.ClientAPI.CatchUpSubscriptionSettings.#ctor
  name: CatchUpSubscriptionSettings
  nameWithType: CatchUpSubscriptionSettings.CatchUpSubscriptionSettings
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.CatchUpSubscriptionSettings

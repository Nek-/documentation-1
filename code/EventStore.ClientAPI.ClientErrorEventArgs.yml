### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.ClientErrorEventArgs
  commentId: T:EventStore.ClientAPI.ClientErrorEventArgs
  id: ClientErrorEventArgs
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.ClientErrorEventArgs.#ctor(EventStore.ClientAPI.IEventStoreConnection,Exception)
  - EventStore.ClientAPI.ClientErrorEventArgs.Connection
  - EventStore.ClientAPI.ClientErrorEventArgs.Exception
  langs:
  - csharp
  - vb
  name: ClientErrorEventArgs
  nameWithType: ClientErrorEventArgs
  fullName: EventStore.ClientAPI.ClientErrorEventArgs
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/ClientErrorEventArgs.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ClientErrorEventArgs
    path: ../EventStore/src/EventStore.ClientAPI/ClientErrorEventArgs.cs
    startLine: 7
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nEvent Arguments for the event raised when an error occurs on an <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class ClientErrorEventArgs : EventArgs'
    content.vb: >-
      Public Class ClientErrorEventArgs
          Inherits EventArgs
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.ClientAPI.ClientErrorEventArgs.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.ClientErrorEventArgs.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.ClientErrorEventArgs.Exception
  commentId: P:EventStore.ClientAPI.ClientErrorEventArgs.Exception
  id: Exception
  parent: EventStore.ClientAPI.ClientErrorEventArgs
  langs:
  - csharp
  - vb
  name: Exception
  nameWithType: ClientErrorEventArgs.Exception
  fullName: EventStore.ClientAPI.ClientErrorEventArgs.Exception
  type: Property
  source:
    remote:
      path: src/EventStore.ClientAPI/ClientErrorEventArgs.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Exception
    path: ../EventStore/src/EventStore.ClientAPI/ClientErrorEventArgs.cs
    startLine: 12
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe thrown exception, if one was raised.\n"
  example: []
  syntax:
    content: public Exception Exception { get; }
    parameters: []
    return:
      type: Exception
    content.vb: Public ReadOnly Property Exception As Exception
  overload: EventStore.ClientAPI.ClientErrorEventArgs.Exception*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ClientErrorEventArgs.Connection
  commentId: P:EventStore.ClientAPI.ClientErrorEventArgs.Connection
  id: Connection
  parent: EventStore.ClientAPI.ClientErrorEventArgs
  langs:
  - csharp
  - vb
  name: Connection
  nameWithType: ClientErrorEventArgs.Connection
  fullName: EventStore.ClientAPI.ClientErrorEventArgs.Connection
  type: Property
  source:
    remote:
      path: src/EventStore.ClientAPI/ClientErrorEventArgs.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Connection
    path: ../EventStore/src/EventStore.ClientAPI/ClientErrorEventArgs.cs
    startLine: 17
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> responsible for raising the event.\n"
  example: []
  syntax:
    content: public IEventStoreConnection Connection { get; }
    parameters: []
    return:
      type: EventStore.ClientAPI.IEventStoreConnection
    content.vb: Public ReadOnly Property Connection As IEventStoreConnection
  overload: EventStore.ClientAPI.ClientErrorEventArgs.Connection*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ClientErrorEventArgs.#ctor(EventStore.ClientAPI.IEventStoreConnection,Exception)
  commentId: M:EventStore.ClientAPI.ClientErrorEventArgs.#ctor(EventStore.ClientAPI.IEventStoreConnection,Exception)
  id: '#ctor(EventStore.ClientAPI.IEventStoreConnection,Exception)'
  parent: EventStore.ClientAPI.ClientErrorEventArgs
  langs:
  - csharp
  - vb
  name: ClientErrorEventArgs(IEventStoreConnection, Exception)
  nameWithType: ClientErrorEventArgs.ClientErrorEventArgs(IEventStoreConnection, Exception)
  fullName: EventStore.ClientAPI.ClientErrorEventArgs.ClientErrorEventArgs(EventStore.ClientAPI.IEventStoreConnection, Exception)
  type: Constructor
  source:
    remote:
      path: src/EventStore.ClientAPI/ClientErrorEventArgs.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.ClientAPI/ClientErrorEventArgs.cs
    startLine: 24
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConstructs a new instance of <xref href=\"EventStore.ClientAPI.ClientErrorEventArgs\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ClientErrorEventArgs(IEventStoreConnection connection, Exception exception)
    parameters:
    - id: connection
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The <xref href="EventStore.ClientAPI.IEventStoreConnection" data-throw-if-not-resolved="false"></xref> responsible for raising the event.
    - id: exception
      type: Exception
      description: The thrown exception, if one was raised.
    content.vb: Public Sub New(connection As IEventStoreConnection, exception As Exception)
  overload: EventStore.ClientAPI.ClientErrorEventArgs.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI.IEventStoreConnection
  commentId: T:EventStore.ClientAPI.IEventStoreConnection
  parent: EventStore.ClientAPI
  isExternal: false
  name: IEventStoreConnection
  nameWithType: IEventStoreConnection
  fullName: EventStore.ClientAPI.IEventStoreConnection
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ClientErrorEventArgs.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ClientErrorEventArgs>()
  nameWithType: ProtobufExtensions.Serialize<ClientErrorEventArgs>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.ClientErrorEventArgs>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ClientErrorEventArgs)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.ClientErrorEventArgs)()
  name.vb: Serialize(Of ClientErrorEventArgs)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ClientErrorEventArgs>
    nameWithType: ProtobufExtensions.Serialize<ClientErrorEventArgs>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.ClientErrorEventArgs>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ClientErrorEventArgs)
    nameWithType: ProtobufExtensions.Serialize(Of ClientErrorEventArgs)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.ClientErrorEventArgs)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ClientErrorEventArgs.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ClientErrorEventArgs>()
  nameWithType: ProtobufExtensions.SerializeToArray<ClientErrorEventArgs>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.ClientErrorEventArgs>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ClientErrorEventArgs)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.ClientErrorEventArgs)()
  name.vb: SerializeToArray(Of ClientErrorEventArgs)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ClientErrorEventArgs>
    nameWithType: ProtobufExtensions.SerializeToArray<ClientErrorEventArgs>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.ClientErrorEventArgs>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ClientErrorEventArgs)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ClientErrorEventArgs)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.ClientErrorEventArgs)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.ClientAPI.ClientErrorEventArgs.Exception*
  commentId: Overload:EventStore.ClientAPI.ClientErrorEventArgs.Exception
  isExternal: false
  name: Exception
  nameWithType: ClientErrorEventArgs.Exception
  fullName: EventStore.ClientAPI.ClientErrorEventArgs.Exception
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: EventStore.ClientAPI.ClientErrorEventArgs.Connection*
  commentId: Overload:EventStore.ClientAPI.ClientErrorEventArgs.Connection
  isExternal: false
  name: Connection
  nameWithType: ClientErrorEventArgs.Connection
  fullName: EventStore.ClientAPI.ClientErrorEventArgs.Connection
- uid: EventStore.ClientAPI.ClientErrorEventArgs
  commentId: T:EventStore.ClientAPI.ClientErrorEventArgs
  isExternal: false
  name: ClientErrorEventArgs
  nameWithType: ClientErrorEventArgs
  fullName: EventStore.ClientAPI.ClientErrorEventArgs
- uid: EventStore.ClientAPI.ClientErrorEventArgs.#ctor*
  commentId: Overload:EventStore.ClientAPI.ClientErrorEventArgs.#ctor
  isExternal: false
  name: ClientErrorEventArgs
  nameWithType: ClientErrorEventArgs.ClientErrorEventArgs
  fullName: EventStore.ClientAPI.ClientErrorEventArgs.ClientErrorEventArgs

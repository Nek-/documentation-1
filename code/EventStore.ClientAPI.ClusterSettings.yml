### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.ClusterSettings
  commentId: T:EventStore.ClientAPI.ClusterSettings
  id: ClusterSettings
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.ClusterSettings.ClusterDns
  - EventStore.ClientAPI.ClusterSettings.Create
  - EventStore.ClientAPI.ClusterSettings.ExternalGossipPort
  - EventStore.ClientAPI.ClusterSettings.GossipSeeds
  - EventStore.ClientAPI.ClusterSettings.GossipTimeout
  - EventStore.ClientAPI.ClusterSettings.MaxDiscoverAttempts
  - EventStore.ClientAPI.ClusterSettings.PreferRandomNode
  langs:
  - csharp
  - vb
  name: ClusterSettings
  nameWithType: ClusterSettings
  fullName: EventStore.ClientAPI.ClusterSettings
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/ClusterSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ClusterSettings
    path: ../EventStore/src/EventStore.ClientAPI/ClusterSettings.cs
    startLine: 8
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nContains settings relating to a connection to a cluster. \n"
  example: []
  syntax:
    content: 'public sealed class ClusterSettings : object'
    content.vb: >-
      Public NotInheritable Class ClusterSettings

          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.ClientAPI.ClusterSettings.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.ClusterSettings.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: EventStore.ClientAPI.ClusterSettings.Create
  commentId: M:EventStore.ClientAPI.ClusterSettings.Create
  id: Create
  parent: EventStore.ClientAPI.ClusterSettings
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: ClusterSettings.Create()
  fullName: EventStore.ClientAPI.ClusterSettings.Create()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ClusterSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Create
    path: ../EventStore/src/EventStore.ClientAPI/ClusterSettings.cs
    startLine: 14
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a new set of <xref href=\"EventStore.ClientAPI.ClusterSettings\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static ClusterSettingsBuilder Create()
    return:
      type: EventStore.ClientAPI.ClusterSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.ClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> that can be used to build up a <xref href="EventStore.ClientAPI.ClusterSettings" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Create As ClusterSettingsBuilder
  overload: EventStore.ClientAPI.ClusterSettings.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.ClientAPI.ClusterSettings.ClusterDns
  commentId: F:EventStore.ClientAPI.ClusterSettings.ClusterDns
  id: ClusterDns
  parent: EventStore.ClientAPI.ClusterSettings
  langs:
  - csharp
  - vb
  name: ClusterDns
  nameWithType: ClusterSettings.ClusterDns
  fullName: EventStore.ClientAPI.ClusterSettings.ClusterDns
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/ClusterSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ClusterDns
    path: ../EventStore/src/EventStore.ClientAPI/ClusterSettings.cs
    startLine: 22
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe DNS name to use for discovering endpoints.\n"
  example: []
  syntax:
    content: public readonly string ClusterDns
    return:
      type: System.String
    content.vb: Public ReadOnly ClusterDns As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ClusterSettings.MaxDiscoverAttempts
  commentId: F:EventStore.ClientAPI.ClusterSettings.MaxDiscoverAttempts
  id: MaxDiscoverAttempts
  parent: EventStore.ClientAPI.ClusterSettings
  langs:
  - csharp
  - vb
  name: MaxDiscoverAttempts
  nameWithType: ClusterSettings.MaxDiscoverAttempts
  fullName: EventStore.ClientAPI.ClusterSettings.MaxDiscoverAttempts
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/ClusterSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MaxDiscoverAttempts
    path: ../EventStore/src/EventStore.ClientAPI/ClusterSettings.cs
    startLine: 26
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe maximum number of attempts for discovering endpoints.\n"
  example: []
  syntax:
    content: public readonly int MaxDiscoverAttempts
    return:
      type: System.Int32
    content.vb: Public ReadOnly MaxDiscoverAttempts As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ClusterSettings.ExternalGossipPort
  commentId: F:EventStore.ClientAPI.ClusterSettings.ExternalGossipPort
  id: ExternalGossipPort
  parent: EventStore.ClientAPI.ClusterSettings
  langs:
  - csharp
  - vb
  name: ExternalGossipPort
  nameWithType: ClusterSettings.ExternalGossipPort
  fullName: EventStore.ClientAPI.ClusterSettings.ExternalGossipPort
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/ClusterSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ExternalGossipPort
    path: ../EventStore/src/EventStore.ClientAPI/ClusterSettings.cs
    startLine: 30
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe well-known endpoint on which cluster managers are running.\n"
  example: []
  syntax:
    content: public readonly int ExternalGossipPort
    return:
      type: System.Int32
    content.vb: Public ReadOnly ExternalGossipPort As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ClusterSettings.GossipSeeds
  commentId: F:EventStore.ClientAPI.ClusterSettings.GossipSeeds
  id: GossipSeeds
  parent: EventStore.ClientAPI.ClusterSettings
  langs:
  - csharp
  - vb
  name: GossipSeeds
  nameWithType: ClusterSettings.GossipSeeds
  fullName: EventStore.ClientAPI.ClusterSettings.GossipSeeds
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/ClusterSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GossipSeeds
    path: ../EventStore/src/EventStore.ClientAPI/ClusterSettings.cs
    startLine: 35
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nEndpoints for seeding gossip if not using DNS.\n"
  example: []
  syntax:
    content: public readonly GossipSeed[] GossipSeeds
    return:
      type: EventStore.ClientAPI.GossipSeed[]
    content.vb: Public ReadOnly GossipSeeds As GossipSeed()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ClusterSettings.GossipTimeout
  commentId: F:EventStore.ClientAPI.ClusterSettings.GossipTimeout
  id: GossipTimeout
  parent: EventStore.ClientAPI.ClusterSettings
  langs:
  - csharp
  - vb
  name: GossipTimeout
  nameWithType: ClusterSettings.GossipTimeout
  fullName: EventStore.ClientAPI.ClusterSettings.GossipTimeout
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/ClusterSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GossipTimeout
    path: ../EventStore/src/EventStore.ClientAPI/ClusterSettings.cs
    startLine: 40
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nTimeout for cluster gossip.\n"
  example: []
  syntax:
    content: public TimeSpan GossipTimeout
    return:
      type: TimeSpan
    content.vb: Public GossipTimeout As TimeSpan
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ClusterSettings.PreferRandomNode
  commentId: F:EventStore.ClientAPI.ClusterSettings.PreferRandomNode
  id: PreferRandomNode
  parent: EventStore.ClientAPI.ClusterSettings
  langs:
  - csharp
  - vb
  name: PreferRandomNode
  nameWithType: ClusterSettings.PreferRandomNode
  fullName: EventStore.ClientAPI.ClusterSettings.PreferRandomNode
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/ClusterSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: PreferRandomNode
    path: ../EventStore/src/EventStore.ClientAPI/ClusterSettings.cs
    startLine: 45
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nPrefer a randomly selected node. \n"
  example: []
  syntax:
    content: public bool PreferRandomNode
    return:
      type: System.Boolean
    content.vb: Public PreferRandomNode As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ClusterSettings.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ClusterSettings>()
  nameWithType: ProtobufExtensions.Serialize<ClusterSettings>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.ClusterSettings>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ClusterSettings)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.ClusterSettings)()
  name.vb: Serialize(Of ClusterSettings)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ClusterSettings>
    nameWithType: ProtobufExtensions.Serialize<ClusterSettings>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.ClusterSettings>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ClusterSettings)
    nameWithType: ProtobufExtensions.Serialize(Of ClusterSettings)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.ClusterSettings)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ClusterSettings.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ClusterSettings>()
  nameWithType: ProtobufExtensions.SerializeToArray<ClusterSettings>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.ClusterSettings>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ClusterSettings)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.ClusterSettings)()
  name.vb: SerializeToArray(Of ClusterSettings)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ClusterSettings>
    nameWithType: ProtobufExtensions.SerializeToArray<ClusterSettings>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.ClusterSettings>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ClusterSettings)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ClusterSettings)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.ClusterSettings)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.ClientAPI.ClusterSettings
  commentId: T:EventStore.ClientAPI.ClusterSettings
  parent: EventStore.ClientAPI
  isExternal: false
  name: ClusterSettings
  nameWithType: ClusterSettings
  fullName: EventStore.ClientAPI.ClusterSettings
- uid: EventStore.ClientAPI.ClusterSettingsBuilder
  commentId: T:EventStore.ClientAPI.ClusterSettingsBuilder
  parent: EventStore.ClientAPI
  isExternal: false
  name: ClusterSettingsBuilder
  nameWithType: ClusterSettingsBuilder
  fullName: EventStore.ClientAPI.ClusterSettingsBuilder
- uid: EventStore.ClientAPI.ClusterSettings.Create*
  commentId: Overload:EventStore.ClientAPI.ClusterSettings.Create
  isExternal: false
  name: Create
  nameWithType: ClusterSettings.Create
  fullName: EventStore.ClientAPI.ClusterSettings.Create
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.ClientAPI.GossipSeed[]
  name: GossipSeed[]
  nameWithType: GossipSeed[]
  fullName: EventStore.ClientAPI.GossipSeed[]
  nameWithType.vb: GossipSeed()
  fullName.vb: EventStore.ClientAPI.GossipSeed()
  name.vb: GossipSeed()
  spec.csharp:
  - uid: EventStore.ClientAPI.GossipSeed
    name: GossipSeed
    nameWithType: GossipSeed
    fullName: EventStore.ClientAPI.GossipSeed
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.ClientAPI.GossipSeed
    name: GossipSeed
    nameWithType: GossipSeed
    fullName: EventStore.ClientAPI.GossipSeed
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean

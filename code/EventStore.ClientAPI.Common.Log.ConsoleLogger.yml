### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.Common.Log.ConsoleLogger
  commentId: T:EventStore.ClientAPI.Common.Log.ConsoleLogger
  id: ConsoleLogger
  parent: EventStore.ClientAPI.Common.Log
  children:
  - EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(Exception,System.String,System.Object[])
  - EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(System.String,System.Object[])
  - EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(Exception,System.String,System.Object[])
  - EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(System.String,System.Object[])
  - EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(Exception,System.String,System.Object[])
  - EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(System.String,System.Object[])
  langs:
  - csharp
  - vb
  name: ConsoleLogger
  nameWithType: ConsoleLogger
  fullName: EventStore.ClientAPI.Common.Log.ConsoleLogger
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ConsoleLogger
    path: ../EventStore/src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
    startLine: 9
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Common.Log
  summary: "\nImplementation of <xref href=\"EventStore.ClientAPI.ILogger\" data-throw-if-not-resolved=\"false\"></xref> which outputs to <see cref=\"!:Console\"></see>.\n"
  example: []
  syntax:
    content: 'public class ConsoleLogger : object, ILogger'
    content.vb: >-
      Public Class ConsoleLogger
          Inherits Object
          Implements ILogger
  inheritance:
  - System.Object
  implements:
  - EventStore.ClientAPI.ILogger
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.ClientAPI.Common.Log.ConsoleLogger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.Common.Log.ConsoleLogger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(System.String,System.Object[])
  id: Error(System.String,System.Object[])
  parent: EventStore.ClientAPI.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Error(String, Object[])
  nameWithType: ConsoleLogger.Error(String, Object[])
  fullName: EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Error
    path: ../EventStore/src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
    startLine: 16
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Common.Log
  summary: "\nWrites an error to the logger\n"
  example: []
  syntax:
    content: public void Error(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
      description: Format string for the log message.
    - id: args
      type: System.Object[]
      description: Arguments to be inserted into the format string.
    content.vb: Public Sub Error(format As String, ParamArray args As Object())
  overload: EventStore.ClientAPI.Common.Log.ConsoleLogger.Error*
  implements:
  - EventStore.ClientAPI.ILogger.Error(System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.Error(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(System.String, System.Object())
  name.vb: Error(String, Object())
- uid: EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(Exception,System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(Exception,System.String,System.Object[])
  id: Error(Exception,System.String,System.Object[])
  parent: EventStore.ClientAPI.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Error(Exception, String, Object[])
  nameWithType: ConsoleLogger.Error(Exception, String, Object[])
  fullName: EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(Exception, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Error
    path: ../EventStore/src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
    startLine: 27
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Common.Log
  summary: "\nWrites an error to the logger\n"
  example: []
  syntax:
    content: public void Error(Exception ex, string format, params object[] args)
    parameters:
    - id: ex
      type: Exception
      description: A thrown exception.
    - id: format
      type: System.String
      description: Format string for the log message.
    - id: args
      type: System.Object[]
      description: Arguments to be inserted into the format string.
    content.vb: Public Sub Error(ex As Exception, format As String, ParamArray args As Object())
  overload: EventStore.ClientAPI.Common.Log.ConsoleLogger.Error*
  implements:
  - EventStore.ClientAPI.ILogger.Error(Exception,System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.Error(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(Exception, System.String, System.Object())
  name.vb: Error(Exception, String, Object())
- uid: EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(System.String,System.Object[])
  id: Debug(System.String,System.Object[])
  parent: EventStore.ClientAPI.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Debug(String, Object[])
  nameWithType: ConsoleLogger.Debug(String, Object[])
  fullName: EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Debug
    path: ../EventStore/src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
    startLine: 37
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Common.Log
  summary: "\nWrites a debug message to the logger\n"
  example: []
  syntax:
    content: public void Debug(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
      description: Format string for the log message.
    - id: args
      type: System.Object[]
      description: Arguments to be inserted into the format string.
    content.vb: Public Sub Debug(format As String, ParamArray args As Object())
  overload: EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug*
  implements:
  - EventStore.ClientAPI.ILogger.Debug(System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.Debug(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(System.String, System.Object())
  name.vb: Debug(String, Object())
- uid: EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(Exception,System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(Exception,System.String,System.Object[])
  id: Debug(Exception,System.String,System.Object[])
  parent: EventStore.ClientAPI.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Debug(Exception, String, Object[])
  nameWithType: ConsoleLogger.Debug(Exception, String, Object[])
  fullName: EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(Exception, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Debug
    path: ../EventStore/src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
    startLine: 48
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Common.Log
  summary: "\nWrites a debug message to the logger\n"
  example: []
  syntax:
    content: public void Debug(Exception ex, string format, params object[] args)
    parameters:
    - id: ex
      type: Exception
      description: A thrown exception.
    - id: format
      type: System.String
      description: Format string for the log message.
    - id: args
      type: System.Object[]
      description: Arguments to be inserted into the format string.
    content.vb: Public Sub Debug(ex As Exception, format As String, ParamArray args As Object())
  overload: EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug*
  implements:
  - EventStore.ClientAPI.ILogger.Debug(Exception,System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.Debug(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(Exception, System.String, System.Object())
  name.vb: Debug(Exception, String, Object())
- uid: EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(System.String,System.Object[])
  id: Info(System.String,System.Object[])
  parent: EventStore.ClientAPI.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Info(String, Object[])
  nameWithType: ConsoleLogger.Info(String, Object[])
  fullName: EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Info
    path: ../EventStore/src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
    startLine: 58
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Common.Log
  summary: "\nWrites an information message to the logger\n"
  example: []
  syntax:
    content: public void Info(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
      description: Format string for the log message.
    - id: args
      type: System.Object[]
      description: Arguments to be inserted into the format string.
    content.vb: Public Sub Info(format As String, ParamArray args As Object())
  overload: EventStore.ClientAPI.Common.Log.ConsoleLogger.Info*
  implements:
  - EventStore.ClientAPI.ILogger.Info(System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.Info(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(System.String, System.Object())
  name.vb: Info(String, Object())
- uid: EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(Exception,System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(Exception,System.String,System.Object[])
  id: Info(Exception,System.String,System.Object[])
  parent: EventStore.ClientAPI.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Info(Exception, String, Object[])
  nameWithType: ConsoleLogger.Info(Exception, String, Object[])
  fullName: EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(Exception, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Info
    path: ../EventStore/src/EventStore.ClientAPI/Common/Log/ConsoleLogger.cs
    startLine: 69
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Common.Log
  summary: "\nWrites an information message to the logger\n"
  example: []
  syntax:
    content: public void Info(Exception ex, string format, params object[] args)
    parameters:
    - id: ex
      type: Exception
      description: A thrown exception.
    - id: format
      type: System.String
      description: Format string for the log message.
    - id: args
      type: System.Object[]
      description: Arguments to be inserted into the format string.
    content.vb: Public Sub Info(ex As Exception, format As String, ParamArray args As Object())
  overload: EventStore.ClientAPI.Common.Log.ConsoleLogger.Info*
  implements:
  - EventStore.ClientAPI.ILogger.Info(Exception,System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.Info(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(Exception, System.String, System.Object())
  name.vb: Info(Exception, String, Object())
references:
- uid: EventStore.ClientAPI.ILogger
  commentId: T:EventStore.ClientAPI.ILogger
  parent: EventStore.ClientAPI
  isExternal: false
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.ClientAPI.ILogger
- uid: EventStore.ClientAPI.Common.Log
  commentId: N:EventStore.ClientAPI.Common.Log
  isExternal: false
  name: EventStore.ClientAPI.Common.Log
  nameWithType: EventStore.ClientAPI.Common.Log
  fullName: EventStore.ClientAPI.Common.Log
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Common.Log.ConsoleLogger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ConsoleLogger>()
  nameWithType: ProtobufExtensions.Serialize<ConsoleLogger>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.Common.Log.ConsoleLogger>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ConsoleLogger)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.Common.Log.ConsoleLogger)()
  name.vb: Serialize(Of ConsoleLogger)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ConsoleLogger>
    nameWithType: ProtobufExtensions.Serialize<ConsoleLogger>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.Common.Log.ConsoleLogger>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ConsoleLogger)
    nameWithType: ProtobufExtensions.Serialize(Of ConsoleLogger)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.Common.Log.ConsoleLogger)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Common.Log.ConsoleLogger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ConsoleLogger>()
  nameWithType: ProtobufExtensions.SerializeToArray<ConsoleLogger>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.Common.Log.ConsoleLogger>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ConsoleLogger)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.Common.Log.ConsoleLogger)()
  name.vb: SerializeToArray(Of ConsoleLogger)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ConsoleLogger>
    nameWithType: ProtobufExtensions.SerializeToArray<ConsoleLogger>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.Common.Log.ConsoleLogger>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ConsoleLogger)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ConsoleLogger)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.Common.Log.ConsoleLogger)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.ClientAPI.Common.Log.ConsoleLogger.Error*
  commentId: Overload:EventStore.ClientAPI.Common.Log.ConsoleLogger.Error
  isExternal: false
  name: Error
  nameWithType: ConsoleLogger.Error
  fullName: EventStore.ClientAPI.Common.Log.ConsoleLogger.Error
- uid: EventStore.ClientAPI.ILogger.Error(System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.ILogger.Error(System.String,System.Object[])
  parent: EventStore.ClientAPI.ILogger
  isExternal: true
  name: Error(String, Object[])
  nameWithType: ILogger.Error(String, Object[])
  fullName: EventStore.ClientAPI.ILogger.Error(System.String, System.Object[])
  nameWithType.vb: ILogger.Error(String, Object())
  fullName.vb: EventStore.ClientAPI.ILogger.Error(System.String, System.Object())
  name.vb: Error(String, Object())
  spec.csharp:
  - uid: EventStore.ClientAPI.ILogger.Error(System.String,System.Object[])
    name: Error
    nameWithType: ILogger.Error
    fullName: EventStore.ClientAPI.ILogger.Error
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.ILogger.Error(System.String,System.Object[])
    name: Error
    nameWithType: ILogger.Error
    fullName: EventStore.ClientAPI.ILogger.Error
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.ClientAPI.ILogger.Error(Exception,System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.ILogger.Error(Exception,System.String,System.Object[])
  parent: EventStore.ClientAPI.ILogger
  isExternal: true
  name: Error(Exception, String, Object[])
  nameWithType: ILogger.Error(Exception, String, Object[])
  fullName: EventStore.ClientAPI.ILogger.Error(Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.Error(Exception, String, Object())
  fullName.vb: EventStore.ClientAPI.ILogger.Error(Exception, System.String, System.Object())
  name.vb: Error(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.ClientAPI.ILogger.Error(Exception,System.String,System.Object[])
    name: Error
    nameWithType: ILogger.Error
    fullName: EventStore.ClientAPI.ILogger.Error
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.ILogger.Error(Exception,System.String,System.Object[])
    name: Error
    nameWithType: ILogger.Error
    fullName: EventStore.ClientAPI.ILogger.Error
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug*
  commentId: Overload:EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug
  isExternal: false
  name: Debug
  nameWithType: ConsoleLogger.Debug
  fullName: EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug
- uid: EventStore.ClientAPI.ILogger.Debug(System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.ILogger.Debug(System.String,System.Object[])
  parent: EventStore.ClientAPI.ILogger
  isExternal: true
  name: Debug(String, Object[])
  nameWithType: ILogger.Debug(String, Object[])
  fullName: EventStore.ClientAPI.ILogger.Debug(System.String, System.Object[])
  nameWithType.vb: ILogger.Debug(String, Object())
  fullName.vb: EventStore.ClientAPI.ILogger.Debug(System.String, System.Object())
  name.vb: Debug(String, Object())
  spec.csharp:
  - uid: EventStore.ClientAPI.ILogger.Debug(System.String,System.Object[])
    name: Debug
    nameWithType: ILogger.Debug
    fullName: EventStore.ClientAPI.ILogger.Debug
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.ILogger.Debug(System.String,System.Object[])
    name: Debug
    nameWithType: ILogger.Debug
    fullName: EventStore.ClientAPI.ILogger.Debug
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ILogger.Debug(Exception,System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.ILogger.Debug(Exception,System.String,System.Object[])
  parent: EventStore.ClientAPI.ILogger
  isExternal: true
  name: Debug(Exception, String, Object[])
  nameWithType: ILogger.Debug(Exception, String, Object[])
  fullName: EventStore.ClientAPI.ILogger.Debug(Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.Debug(Exception, String, Object())
  fullName.vb: EventStore.ClientAPI.ILogger.Debug(Exception, System.String, System.Object())
  name.vb: Debug(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.ClientAPI.ILogger.Debug(Exception,System.String,System.Object[])
    name: Debug
    nameWithType: ILogger.Debug
    fullName: EventStore.ClientAPI.ILogger.Debug
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.ILogger.Debug(Exception,System.String,System.Object[])
    name: Debug
    nameWithType: ILogger.Debug
    fullName: EventStore.ClientAPI.ILogger.Debug
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Common.Log.ConsoleLogger.Info*
  commentId: Overload:EventStore.ClientAPI.Common.Log.ConsoleLogger.Info
  isExternal: false
  name: Info
  nameWithType: ConsoleLogger.Info
  fullName: EventStore.ClientAPI.Common.Log.ConsoleLogger.Info
- uid: EventStore.ClientAPI.ILogger.Info(System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.ILogger.Info(System.String,System.Object[])
  parent: EventStore.ClientAPI.ILogger
  isExternal: true
  name: Info(String, Object[])
  nameWithType: ILogger.Info(String, Object[])
  fullName: EventStore.ClientAPI.ILogger.Info(System.String, System.Object[])
  nameWithType.vb: ILogger.Info(String, Object())
  fullName.vb: EventStore.ClientAPI.ILogger.Info(System.String, System.Object())
  name.vb: Info(String, Object())
  spec.csharp:
  - uid: EventStore.ClientAPI.ILogger.Info(System.String,System.Object[])
    name: Info
    nameWithType: ILogger.Info
    fullName: EventStore.ClientAPI.ILogger.Info
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.ILogger.Info(System.String,System.Object[])
    name: Info
    nameWithType: ILogger.Info
    fullName: EventStore.ClientAPI.ILogger.Info
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ILogger.Info(Exception,System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.ILogger.Info(Exception,System.String,System.Object[])
  parent: EventStore.ClientAPI.ILogger
  isExternal: true
  name: Info(Exception, String, Object[])
  nameWithType: ILogger.Info(Exception, String, Object[])
  fullName: EventStore.ClientAPI.ILogger.Info(Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.Info(Exception, String, Object())
  fullName.vb: EventStore.ClientAPI.ILogger.Info(Exception, System.String, System.Object())
  name.vb: Info(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.ClientAPI.ILogger.Info(Exception,System.String,System.Object[])
    name: Info
    nameWithType: ILogger.Info
    fullName: EventStore.ClientAPI.ILogger.Info
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.ILogger.Info(Exception,System.String,System.Object[])
    name: Info
    nameWithType: ILogger.Info
    fullName: EventStore.ClientAPI.ILogger.Info
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )

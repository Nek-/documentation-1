### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder
  commentId: T:EventStore.ClientAPI.ConnectionSettingsBuilder
  id: ConnectionSettingsBuilder
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.ConnectionSettingsBuilder.Build
  - EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging
  - EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse
  - EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting
  - EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying
  - EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit(EventStore.ClientAPI.ConnectionSettingsBuilder)~EventStore.ClientAPI.ConnectionSettings
  - EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode
  - EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly
  - EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode
  - EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns(System.String)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials(EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed[])
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(IPEndPoint[])
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout(TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval(TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout(TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo(TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo(TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo(TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo(TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger
  - EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger(EventStore.ClientAPI.ILogger)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger
  - EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger(System.String)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection(System.String,System.Boolean)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf(TimeSpan)
  langs:
  - csharp
  - vb
  name: ConnectionSettingsBuilder
  nameWithType: ConnectionSettingsBuilder
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ConnectionSettingsBuilder
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 12
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nUsed to build a connection settings (fluent API)\n"
  example: []
  syntax:
    content: 'public class ConnectionSettingsBuilder : object'
    content.vb: >-
      Public Class ConnectionSettingsBuilder
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.ClientAPI.ConnectionSettingsBuilder.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.ConnectionSettingsBuilder.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger(EventStore.ClientAPI.ILogger)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger(EventStore.ClientAPI.ILogger)
  id: UseCustomLogger(EventStore.ClientAPI.ILogger)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: UseCustomLogger(ILogger)
  nameWithType: ConnectionSettingsBuilder.UseCustomLogger(ILogger)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger(EventStore.ClientAPI.ILogger)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: UseCustomLogger
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 55
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConfigures the connection to output log messages to the given <xref href=\"EventStore.ClientAPI.ILogger\" data-throw-if-not-resolved=\"false\"></xref>. You should implement this interface using another library such as NLog or log4net.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder UseCustomLogger(ILogger logger)
    parameters:
    - id: logger
      type: EventStore.ClientAPI.ILogger
      description: The <xref href="EventStore.ClientAPI.ILogger" data-throw-if-not-resolved="false"></xref> to use.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function UseCustomLogger(logger As ILogger) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger
  id: UseConsoleLogger
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: UseConsoleLogger()
  nameWithType: ConnectionSettingsBuilder.UseConsoleLogger()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: UseConsoleLogger
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 65
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConfigures the connection to output log messages to the console.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder UseConsoleLogger()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
    content.vb: Public Function UseConsoleLogger As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger
  id: UseDebugLogger
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: UseDebugLogger()
  nameWithType: ConnectionSettingsBuilder.UseDebugLogger()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: UseDebugLogger
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 75
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConfigures the connection to output log messages to the listeners\nconfigured on <see cref=\"!:System.Diagnostics.Debug\"></see>.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder UseDebugLogger()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
    content.vb: Public Function UseDebugLogger As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger(System.String)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger(System.String)
  id: UseFileLogger(System.String)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: UseFileLogger(String)
  nameWithType: ConnectionSettingsBuilder.UseFileLogger(String)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: UseFileLogger
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 85
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConfigures the connection to output log messages to a file.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder UseFileLogger(string filename)
    parameters:
    - id: filename
      type: System.String
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
    content.vb: Public Function UseFileLogger(filename As String) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging
  id: EnableVerboseLogging
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: EnableVerboseLogging()
  nameWithType: ConnectionSettingsBuilder.EnableVerboseLogging()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: EnableVerboseLogging
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 95
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nTurns on verbose <xref href=\"EventStore.ClientAPI.EventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> internal logic logging. By contains default information about connection, disconnection and errors, but you can customize output.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder EnableVerboseLogging()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function EnableVerboseLogging As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo(System.Int32)
  id: LimitOperationsQueueTo(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: LimitOperationsQueueTo(Int32)
  nameWithType: ConnectionSettingsBuilder.LimitOperationsQueueTo(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: LimitOperationsQueueTo
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 106
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the limit for number of outstanding operations.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder LimitOperationsQueueTo(int limit)
    parameters:
    - id: limit
      type: System.Int32
      description: The new limit of outstanding operations
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function LimitOperationsQueueTo(limit As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo(System.Int32)
  id: LimitConcurrentOperationsTo(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: LimitConcurrentOperationsTo(Int32)
  nameWithType: ConnectionSettingsBuilder.LimitConcurrentOperationsTo(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: LimitConcurrentOperationsTo
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 119
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nLimits the number of concurrent operations that this connection can have.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder LimitConcurrentOperationsTo(int limit)
    parameters:
    - id: limit
      type: System.Int32
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function LimitConcurrentOperationsTo(limit As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo(System.Int32)
  id: LimitAttemptsForOperationTo(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: LimitAttemptsForOperationTo(Int32)
  nameWithType: ConnectionSettingsBuilder.LimitAttemptsForOperationTo(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: LimitAttemptsForOperationTo
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 132
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nLimits the number of operation attempts.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder LimitAttemptsForOperationTo(int limit)
    parameters:
    - id: limit
      type: System.Int32
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function LimitAttemptsForOperationTo(limit As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo(System.Int32)
  id: LimitRetriesForOperationTo(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: LimitRetriesForOperationTo(Int32)
  nameWithType: ConnectionSettingsBuilder.LimitRetriesForOperationTo(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: LimitRetriesForOperationTo
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 145
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nLimits the number of operation retries.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder LimitRetriesForOperationTo(int limit)
    parameters:
    - id: limit
      type: System.Int32
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function LimitRetriesForOperationTo(limit As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying
  id: KeepRetrying
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: KeepRetrying()
  nameWithType: ConnectionSettingsBuilder.KeepRetrying()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: KeepRetrying
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 157
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAllows infinite operation retry attempts.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder KeepRetrying()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function KeepRetrying As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo(System.Int32)
  id: LimitReconnectionsTo(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: LimitReconnectionsTo(Int32)
  nameWithType: ConnectionSettingsBuilder.LimitReconnectionsTo(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: LimitReconnectionsTo
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 168
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nLimits the number of reconnections this connection can try to make.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder LimitReconnectionsTo(int limit)
    parameters:
    - id: limit
      type: System.Int32
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function LimitReconnectionsTo(limit As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting
  id: KeepReconnecting
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: KeepReconnecting()
  nameWithType: ConnectionSettingsBuilder.KeepReconnecting()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: KeepReconnecting
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 180
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAllows infinite reconnection attempts.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder KeepReconnecting()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function KeepReconnecting As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly
  id: PerformOnMasterOnly
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: PerformOnMasterOnly()
  nameWithType: ConnectionSettingsBuilder.PerformOnMasterOnly()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: PerformOnMasterOnly
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 190
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRequires all write and read requests to be served only by master (cluster version only).\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder PerformOnMasterOnly()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function PerformOnMasterOnly As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode
  id: PerformOnAnyNode
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: PerformOnAnyNode()
  nameWithType: ConnectionSettingsBuilder.PerformOnAnyNode()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: PerformOnAnyNode
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 200
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAllow for writes to be forwarded and read requests served locally if node is not master (cluster version only).\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder PerformOnAnyNode()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function PerformOnAnyNode As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo(TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo(TimeSpan)
  id: SetReconnectionDelayTo(TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetReconnectionDelayTo(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetReconnectionDelayTo(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo(TimeSpan)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetReconnectionDelayTo
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 211
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the delay between reconnection attempts.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetReconnectionDelayTo(TimeSpan reconnectionDelay)
    parameters:
    - id: reconnectionDelay
      type: TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetReconnectionDelayTo(reconnectionDelay As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo(TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo(TimeSpan)
  id: SetQueueTimeoutTo(TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetQueueTimeoutTo(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetQueueTimeoutTo(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo(TimeSpan)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetQueueTimeoutTo
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 222
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the maximum permitted time a request may be queued awaiting transmission; if exceeded an <xref href=\"EventStore.ClientAPI.Exceptions.OperationExpiredException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetQueueTimeoutTo(TimeSpan queueTimeout)
    parameters:
    - id: queueTimeout
      type: TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetQueueTimeoutTo(queueTimeout As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo(TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo(TimeSpan)
  id: SetOperationTimeoutTo(TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetOperationTimeoutTo(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetOperationTimeoutTo(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo(TimeSpan)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetOperationTimeoutTo
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 233
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the operation timeout duration.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetOperationTimeoutTo(TimeSpan operationTimeout)
    parameters:
    - id: operationTimeout
      type: TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetOperationTimeoutTo(operationTimeout As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo(TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo(TimeSpan)
  id: SetTimeoutCheckPeriodTo(TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetTimeoutCheckPeriodTo(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo(TimeSpan)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetTimeoutCheckPeriodTo
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 244
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets how often timeouts should be checked for.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetTimeoutCheckPeriodTo(TimeSpan timeoutCheckPeriod)
    parameters:
    - id: timeoutCheckPeriod
      type: TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetTimeoutCheckPeriodTo(timeoutCheckPeriod As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials(EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials(EventStore.ClientAPI.SystemData.UserCredentials)
  id: SetDefaultUserCredentials(EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetDefaultUserCredentials(UserCredentials)
  nameWithType: ConnectionSettingsBuilder.SetDefaultUserCredentials(UserCredentials)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials(EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetDefaultUserCredentials
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 256
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the default <xref href=\"EventStore.ClientAPI.SystemData.UserCredentials\" data-throw-if-not-resolved=\"false\"></xref> used for this connection.\nIf user credentials are not given for an operation, these credentials will be used.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetDefaultUserCredentials(UserCredentials userCredentials)
    parameters:
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetDefaultUserCredentials(userCredentials As UserCredentials) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection(System.String,System.Boolean)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection(System.String,System.Boolean)
  id: UseSslConnection(System.String,System.Boolean)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: UseSslConnection(String, Boolean)
  nameWithType: ConnectionSettingsBuilder.UseSslConnection(String, Boolean)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: UseSslConnection
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 268
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nUses a SSL connection over TCP. This should generally be used with authentication.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder UseSslConnection(string targetHost, bool validateServer)
    parameters:
    - id: targetHost
      type: System.String
      description: HostName of server certificate.
    - id: validateServer
      type: System.Boolean
      description: Whether to accept connection from server with not trusted certificate.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function UseSslConnection(targetHost As String, validateServer As Boolean) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse
  id: FailOnNoServerResponse
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: FailOnNoServerResponse()
  nameWithType: ConnectionSettingsBuilder.FailOnNoServerResponse()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: FailOnNoServerResponse
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 281
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nMarks that no response from server should cause an error on the request.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder FailOnNoServerResponse()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function FailOnNoServerResponse As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval(TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval(TimeSpan)
  id: SetHeartbeatInterval(TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetHeartbeatInterval(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetHeartbeatInterval(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval(TimeSpan)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetHeartbeatInterval
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 292
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets how often heartbeats should be expected on the connection (lower values detect broken sockets faster).\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetHeartbeatInterval(TimeSpan interval)
    parameters:
    - id: interval
      type: TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetHeartbeatInterval(interval As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout(TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout(TimeSpan)
  id: SetHeartbeatTimeout(TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetHeartbeatTimeout(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetHeartbeatTimeout(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout(TimeSpan)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetHeartbeatTimeout
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 303
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets how long to wait without heartbeats before determining a connection to be dead (must be longer than heartbeat interval).\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetHeartbeatTimeout(TimeSpan timeout)
    parameters:
    - id: timeout
      type: TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetHeartbeatTimeout(timeout As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf(TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf(TimeSpan)
  id: WithConnectionTimeoutOf(TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: WithConnectionTimeoutOf(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.WithConnectionTimeoutOf(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf(TimeSpan)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: WithConnectionTimeoutOf
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 314
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the timeout for attempting to connect to a server before aborting and attempting a reconnect.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder WithConnectionTimeoutOf(TimeSpan timeout)
    parameters:
    - id: timeout
      type: TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function WithConnectionTimeoutOf(timeout As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns(System.String)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns(System.String)
  id: SetClusterDns(System.String)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetClusterDns(String)
  nameWithType: ConnectionSettingsBuilder.SetClusterDns(String)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetClusterDns
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 326
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the DNS name under which cluster nodes are listed.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetClusterDns(string clusterDns)
    parameters:
    - id: clusterDns
      type: System.String
      description: The DNS name under which cluster nodes are listed.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.DnsClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function SetClusterDns(clusterDns As String) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts(System.Int32)
  id: SetMaxDiscoverAttempts(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetMaxDiscoverAttempts(Int32)
  nameWithType: ConnectionSettingsBuilder.SetMaxDiscoverAttempts(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetMaxDiscoverAttempts
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 339
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the maximum number of attempts for discovery.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetMaxDiscoverAttempts(int maxDiscoverAttempts)
    parameters:
    - id: maxDiscoverAttempts
      type: System.Int32
      description: The maximum number of attempts for DNS discovery.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.DnsClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function SetMaxDiscoverAttempts(maxDiscoverAttempts As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout(TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout(TimeSpan)
  id: SetGossipTimeout(TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetGossipTimeout(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetGossipTimeout(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout(TimeSpan)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetGossipTimeout
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 352
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the period after which gossip times out if none is received.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetGossipTimeout(TimeSpan timeout)
    parameters:
    - id: timeout
      type: TimeSpan
      description: The period after which gossip times out if none is received.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.DnsClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function SetGossipTimeout(timeout As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode
  id: PreferRandomNode
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: PreferRandomNode()
  nameWithType: ConnectionSettingsBuilder.PreferRandomNode()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: PreferRandomNode
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 362
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWhether to randomly choose a node that&apos;s alive from the known nodes. \n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder PreferRandomNode()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.DnsClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function PreferRandomNode As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode
  id: PreferSlaveNode
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: PreferSlaveNode()
  nameWithType: ConnectionSettingsBuilder.PreferSlaveNode()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: PreferSlaveNode
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 372
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWhether to prioritize choosing a slave node that&apos;s alive from the known nodes. \n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder PreferSlaveNode()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.DnsClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function PreferSlaveNode As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort(System.Int32)
  id: SetClusterGossipPort(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetClusterGossipPort(Int32)
  nameWithType: ConnectionSettingsBuilder.SetClusterGossipPort(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetClusterGossipPort
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 392
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the well-known port on which the cluster gossip is taking place.\n\nIf you are using the commercial edition of Event Store HA, with Manager nodes in\nplace, this should be the port number of the External HTTP port on which the\nmanagers are running.\n\nIf you are using the open source edition of Event Store HA, this should be the\nExternal HTTP port that the nodes are running on. If you cannot use a well-known\nport for this across all nodes, you can instead use gossip seed discovery and set\nthe <see cref=\"!:IPEndPoint\"></see> of some seed nodes instead.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetClusterGossipPort(int clusterGossipPort)
    parameters:
    - id: clusterGossipPort
      type: System.Int32
      description: The cluster gossip port.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.DnsClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function SetClusterGossipPort(clusterGossipPort As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(IPEndPoint[])
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(IPEndPoint[])
  id: SetGossipSeedEndPoints(IPEndPoint[])
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetGossipSeedEndPoints(IPEndPoint[])
  nameWithType: ConnectionSettingsBuilder.SetGossipSeedEndPoints(IPEndPoint[])
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(IPEndPoint[])
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetGossipSeedEndPoints
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 413
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets gossip seed endpoints for the client.\n\n<div class=\"NOTE\"><h5>note</h5><p>\nThis should be the external HTTP endpoint of the server, as it is required\nfor the client to exchange gossip with the server. The standard port is 2113.\n</p></div>\n\nIf the server requires a specific Host header to be sent as part of the gossip\nrequest, use the overload of this method taking <xref href=\"EventStore.ClientAPI.GossipSeed\" data-throw-if-not-resolved=\"false\"></xref> instead.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetGossipSeedEndPoints(params IPEndPoint[] gossipSeeds)
    parameters:
    - id: gossipSeeds
      type: IPEndPoint[]
      description: <see cref="!:IPEndPoint"></see>s representing the endpoints of nodes from which to seed gossip.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.ClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function SetGossipSeedEndPoints(ParamArray gossipSeeds As IPEndPoint()) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints*
  nameWithType.vb: ConnectionSettingsBuilder.SetGossipSeedEndPoints(IPEndPoint())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(IPEndPoint())
  name.vb: SetGossipSeedEndPoints(IPEndPoint())
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed[])
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed[])
  id: SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed[])
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetGossipSeedEndPoints(GossipSeed[])
  nameWithType: ConnectionSettingsBuilder.SetGossipSeedEndPoints(GossipSeed[])
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed[])
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetGossipSeedEndPoints
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 429
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets gossip seed endpoints for the client.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetGossipSeedEndPoints(params GossipSeed[] gossipSeeds)
    parameters:
    - id: gossipSeeds
      type: EventStore.ClientAPI.GossipSeed[]
      description: <xref href="EventStore.ClientAPI.GossipSeed" data-throw-if-not-resolved="false"></xref>s representing the endpoints of nodes from which to seed gossip.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.ClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function SetGossipSeedEndPoints(ParamArray gossipSeeds As GossipSeed()) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints*
  nameWithType.vb: ConnectionSettingsBuilder.SetGossipSeedEndPoints(GossipSeed())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed())
  name.vb: SetGossipSeedEndPoints(GossipSeed())
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit(EventStore.ClientAPI.ConnectionSettingsBuilder)~EventStore.ClientAPI.ConnectionSettings
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit(EventStore.ClientAPI.ConnectionSettingsBuilder)~EventStore.ClientAPI.ConnectionSettings
  id: op_Implicit(EventStore.ClientAPI.ConnectionSettingsBuilder)~EventStore.ClientAPI.ConnectionSettings
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: Implicit(ConnectionSettingsBuilder to ConnectionSettings)
  nameWithType: ConnectionSettingsBuilder.Implicit(ConnectionSettingsBuilder to ConnectionSettings)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.Implicit(EventStore.ClientAPI.ConnectionSettingsBuilder to EventStore.ClientAPI.ConnectionSettings)
  type: Operator
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: op_Implicit
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 444
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConvert the mutable <xref href=\"EventStore.ClientAPI.ConnectionSettingsBuilder\" data-throw-if-not-resolved=\"false\"></xref> object to an immutable\n<xref href=\"EventStore.ClientAPI.ConnectionSettings\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: public static implicit operator ConnectionSettings(ConnectionSettingsBuilder builder)
    parameters:
    - id: builder
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: The <xref href="EventStore.ClientAPI.ConnectionSettingsBuilder" data-throw-if-not-resolved="false"></xref> to convert.
    return:
      type: EventStore.ClientAPI.ConnectionSettings
      description: An immutable <xref href="EventStore.ClientAPI.ConnectionSettings" data-throw-if-not-resolved="false"></xref> object with the values specified by the builder.
    content.vb: Public Shared Widening Operator CType(builder As ConnectionSettingsBuilder) As ConnectionSettings
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit*
  nameWithType.vb: ConnectionSettingsBuilder.Widening(ConnectionSettingsBuilder to ConnectionSettings)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.ClientAPI.ConnectionSettingsBuilder.Widening(EventStore.ClientAPI.ConnectionSettingsBuilder to EventStore.ClientAPI.ConnectionSettings)
  name.vb: Widening(ConnectionSettingsBuilder to ConnectionSettings)
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.Build
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.Build
  id: Build
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: Build()
  nameWithType: ConnectionSettingsBuilder.Build()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.Build()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Build
    path: ../EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 453
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConvert the mutable <xref href=\"EventStore.ClientAPI.ConnectionSettingsBuilder\" data-throw-if-not-resolved=\"false\"></xref> object to an immutable\n<xref href=\"EventStore.ClientAPI.ConnectionSettings\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: public ConnectionSettings Build()
    return:
      type: EventStore.ClientAPI.ConnectionSettings
    content.vb: Public Function Build As ConnectionSettings
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.Build*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ConnectionSettingsBuilder>()
  nameWithType: ProtobufExtensions.Serialize<ConnectionSettingsBuilder>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.ConnectionSettingsBuilder>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ConnectionSettingsBuilder)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.ConnectionSettingsBuilder)()
  name.vb: Serialize(Of ConnectionSettingsBuilder)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ConnectionSettingsBuilder>
    nameWithType: ProtobufExtensions.Serialize<ConnectionSettingsBuilder>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.ConnectionSettingsBuilder>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ConnectionSettingsBuilder)
    nameWithType: ProtobufExtensions.Serialize(Of ConnectionSettingsBuilder)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.ConnectionSettingsBuilder)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ConnectionSettingsBuilder>()
  nameWithType: ProtobufExtensions.SerializeToArray<ConnectionSettingsBuilder>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.ConnectionSettingsBuilder>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ConnectionSettingsBuilder)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.ConnectionSettingsBuilder)()
  name.vb: SerializeToArray(Of ConnectionSettingsBuilder)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ConnectionSettingsBuilder>
    nameWithType: ProtobufExtensions.SerializeToArray<ConnectionSettingsBuilder>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.ConnectionSettingsBuilder>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ConnectionSettingsBuilder)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ConnectionSettingsBuilder)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.ConnectionSettingsBuilder)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.ClientAPI.ILogger
  commentId: T:EventStore.ClientAPI.ILogger
  parent: EventStore.ClientAPI
  isExternal: false
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.ClientAPI.ILogger
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger
  isExternal: false
  name: UseCustomLogger
  nameWithType: ConnectionSettingsBuilder.UseCustomLogger
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder
  commentId: T:EventStore.ClientAPI.ConnectionSettingsBuilder
  parent: EventStore.ClientAPI
  isExternal: false
  name: ConnectionSettingsBuilder
  nameWithType: ConnectionSettingsBuilder
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger
  isExternal: false
  name: UseConsoleLogger
  nameWithType: ConnectionSettingsBuilder.UseConsoleLogger
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger
  isExternal: false
  name: UseDebugLogger
  nameWithType: ConnectionSettingsBuilder.UseDebugLogger
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger
  isExternal: false
  name: UseFileLogger
  nameWithType: ConnectionSettingsBuilder.UseFileLogger
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.ClientAPI.EventStoreConnection
  commentId: T:EventStore.ClientAPI.EventStoreConnection
  isExternal: false
  name: EventStoreConnection
  nameWithType: EventStoreConnection
  fullName: EventStore.ClientAPI.EventStoreConnection
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging
  isExternal: false
  name: EnableVerboseLogging
  nameWithType: ConnectionSettingsBuilder.EnableVerboseLogging
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo
  isExternal: false
  name: LimitOperationsQueueTo
  nameWithType: ConnectionSettingsBuilder.LimitOperationsQueueTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo
  isExternal: false
  name: LimitConcurrentOperationsTo
  nameWithType: ConnectionSettingsBuilder.LimitConcurrentOperationsTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo
  isExternal: false
  name: LimitAttemptsForOperationTo
  nameWithType: ConnectionSettingsBuilder.LimitAttemptsForOperationTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo
  isExternal: false
  name: LimitRetriesForOperationTo
  nameWithType: ConnectionSettingsBuilder.LimitRetriesForOperationTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying
  isExternal: false
  name: KeepRetrying
  nameWithType: ConnectionSettingsBuilder.KeepRetrying
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo
  isExternal: false
  name: LimitReconnectionsTo
  nameWithType: ConnectionSettingsBuilder.LimitReconnectionsTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting
  isExternal: false
  name: KeepReconnecting
  nameWithType: ConnectionSettingsBuilder.KeepReconnecting
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly
  isExternal: false
  name: PerformOnMasterOnly
  nameWithType: ConnectionSettingsBuilder.PerformOnMasterOnly
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode
  isExternal: false
  name: PerformOnAnyNode
  nameWithType: ConnectionSettingsBuilder.PerformOnAnyNode
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo
  isExternal: false
  name: SetReconnectionDelayTo
  nameWithType: ConnectionSettingsBuilder.SetReconnectionDelayTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: EventStore.ClientAPI.Exceptions.OperationExpiredException
  commentId: T:EventStore.ClientAPI.Exceptions.OperationExpiredException
  isExternal: false
  name: OperationExpiredException
  nameWithType: OperationExpiredException
  fullName: EventStore.ClientAPI.Exceptions.OperationExpiredException
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo
  isExternal: false
  name: SetQueueTimeoutTo
  nameWithType: ConnectionSettingsBuilder.SetQueueTimeoutTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo
  isExternal: false
  name: SetOperationTimeoutTo
  nameWithType: ConnectionSettingsBuilder.SetOperationTimeoutTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo
  isExternal: false
  name: SetTimeoutCheckPeriodTo
  nameWithType: ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo
- uid: EventStore.ClientAPI.SystemData.UserCredentials
  commentId: T:EventStore.ClientAPI.SystemData.UserCredentials
  parent: EventStore.ClientAPI.SystemData
  isExternal: false
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.ClientAPI.SystemData.UserCredentials
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials
  isExternal: false
  name: SetDefaultUserCredentials
  nameWithType: ConnectionSettingsBuilder.SetDefaultUserCredentials
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials
- uid: EventStore.ClientAPI.SystemData
  commentId: N:EventStore.ClientAPI.SystemData
  isExternal: false
  name: EventStore.ClientAPI.SystemData
  nameWithType: EventStore.ClientAPI.SystemData
  fullName: EventStore.ClientAPI.SystemData
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection
  isExternal: false
  name: UseSslConnection
  nameWithType: ConnectionSettingsBuilder.UseSslConnection
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse
  isExternal: false
  name: FailOnNoServerResponse
  nameWithType: ConnectionSettingsBuilder.FailOnNoServerResponse
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval
  isExternal: false
  name: SetHeartbeatInterval
  nameWithType: ConnectionSettingsBuilder.SetHeartbeatInterval
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout
  isExternal: false
  name: SetHeartbeatTimeout
  nameWithType: ConnectionSettingsBuilder.SetHeartbeatTimeout
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf
  isExternal: false
  name: WithConnectionTimeoutOf
  nameWithType: ConnectionSettingsBuilder.WithConnectionTimeoutOf
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf
- uid: EventStore.ClientAPI.DnsClusterSettingsBuilder
  commentId: T:EventStore.ClientAPI.DnsClusterSettingsBuilder
  parent: EventStore.ClientAPI
  isExternal: false
  name: DnsClusterSettingsBuilder
  nameWithType: DnsClusterSettingsBuilder
  fullName: EventStore.ClientAPI.DnsClusterSettingsBuilder
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns
  isExternal: false
  name: SetClusterDns
  nameWithType: ConnectionSettingsBuilder.SetClusterDns
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts
  isExternal: false
  name: SetMaxDiscoverAttempts
  nameWithType: ConnectionSettingsBuilder.SetMaxDiscoverAttempts
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout
  isExternal: false
  name: SetGossipTimeout
  nameWithType: ConnectionSettingsBuilder.SetGossipTimeout
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode
  isExternal: false
  name: PreferRandomNode
  nameWithType: ConnectionSettingsBuilder.PreferRandomNode
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode
  isExternal: false
  name: PreferSlaveNode
  nameWithType: ConnectionSettingsBuilder.PreferSlaveNode
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort
  isExternal: false
  name: SetClusterGossipPort
  nameWithType: ConnectionSettingsBuilder.SetClusterGossipPort
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort
- uid: EventStore.ClientAPI.GossipSeed
  commentId: T:EventStore.ClientAPI.GossipSeed
  isExternal: false
  name: GossipSeed
  nameWithType: GossipSeed
  fullName: EventStore.ClientAPI.GossipSeed
- uid: EventStore.ClientAPI.ClusterSettingsBuilder
  commentId: T:EventStore.ClientAPI.ClusterSettingsBuilder
  parent: EventStore.ClientAPI
  isExternal: false
  name: ClusterSettingsBuilder
  nameWithType: ClusterSettingsBuilder
  fullName: EventStore.ClientAPI.ClusterSettingsBuilder
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints
  isExternal: false
  name: SetGossipSeedEndPoints
  nameWithType: ConnectionSettingsBuilder.SetGossipSeedEndPoints
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints
- uid: IPEndPoint[]
  name: IPEndPoint[]
  nameWithType: IPEndPoint[]
  fullName: IPEndPoint[]
  nameWithType.vb: IPEndPoint()
  fullName.vb: IPEndPoint()
  name.vb: IPEndPoint()
  spec.csharp:
  - uid: IPEndPoint
    name: IPEndPoint
    nameWithType: IPEndPoint
    fullName: IPEndPoint
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: IPEndPoint
    name: IPEndPoint
    nameWithType: IPEndPoint
    fullName: IPEndPoint
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.ClientAPI.GossipSeed[]
  name: GossipSeed[]
  nameWithType: GossipSeed[]
  fullName: EventStore.ClientAPI.GossipSeed[]
  nameWithType.vb: GossipSeed()
  fullName.vb: EventStore.ClientAPI.GossipSeed()
  name.vb: GossipSeed()
  spec.csharp:
  - uid: EventStore.ClientAPI.GossipSeed
    name: GossipSeed
    nameWithType: GossipSeed
    fullName: EventStore.ClientAPI.GossipSeed
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.ClientAPI.GossipSeed
    name: GossipSeed
    nameWithType: GossipSeed
    fullName: EventStore.ClientAPI.GossipSeed
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.ClientAPI.ConnectionSettings
  commentId: T:EventStore.ClientAPI.ConnectionSettings
  parent: EventStore.ClientAPI
  isExternal: false
  name: ConnectionSettings
  nameWithType: ConnectionSettings
  fullName: EventStore.ClientAPI.ConnectionSettings
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit
  isExternal: false
  name: Implicit
  nameWithType: ConnectionSettingsBuilder.Implicit
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.Implicit
  nameWithType.vb: ConnectionSettingsBuilder.Widening
  fullName.vb: EventStore.ClientAPI.ConnectionSettingsBuilder.Widening
  name.vb: Widening
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.Build*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.Build
  isExternal: false
  name: Build
  nameWithType: ConnectionSettingsBuilder.Build
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.Build

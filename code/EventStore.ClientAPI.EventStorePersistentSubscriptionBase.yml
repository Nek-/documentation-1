### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  commentId: T:EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  id: EventStorePersistentSubscriptionBase
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(EventStore.ClientAPI.ResolvedEvent)
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(Guid)
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable{EventStore.ClientAPI.ResolvedEvent})
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable{Guid})
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.DefaultBufferSize
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(EventStore.ClientAPI.ResolvedEvent,EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(IEnumerable{EventStore.ClientAPI.ResolvedEvent},EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop(TimeSpan)
  langs:
  - csharp
  - vb
  name: EventStorePersistentSubscriptionBase
  nameWithType: EventStorePersistentSubscriptionBase
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventStorePersistentSubscriptionBase
    path: ../EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 13
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRepresents a persistent subscription connection.\n"
  example: []
  syntax:
    content: 'public abstract class EventStorePersistentSubscriptionBase : object'
    content.vb: >-
      Public MustInherit Class EventStorePersistentSubscriptionBase
          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.ClientAPI.EventStorePersistentSubscription
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.DefaultBufferSize
  commentId: F:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.DefaultBufferSize
  id: DefaultBufferSize
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: DefaultBufferSize
  nameWithType: EventStorePersistentSubscriptionBase.DefaultBufferSize
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.DefaultBufferSize
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: DefaultBufferSize
    path: ../EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 19
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe default buffer size for the persistent subscription\n"
  example: []
  syntax:
    content: public const int DefaultBufferSize = null
    return:
      type: System.Int32
    content.vb: Public Const DefaultBufferSize As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(EventStore.ClientAPI.ResolvedEvent)
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(EventStore.ClientAPI.ResolvedEvent)
  id: Acknowledge(EventStore.ClientAPI.ResolvedEvent)
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Acknowledge(ResolvedEvent)
  nameWithType: EventStorePersistentSubscriptionBase.Acknowledge(ResolvedEvent)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(EventStore.ClientAPI.ResolvedEvent)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Acknowledge
    path: ../EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 88
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAcknowledge that a message have completed processing (this will tell the server it has been processed)\n"
  remarks: There is no need to ack a message if you have Auto Ack enabled
  example: []
  syntax:
    content: public void Acknowledge(ResolvedEvent event)
    parameters:
    - id: event
      type: EventStore.ClientAPI.ResolvedEvent
      description: The <xref href="EventStore.ClientAPI.ResolvedEvent" data-throw-if-not-resolved="false"></xref> to acknowledge
    content.vb: Public Sub Acknowledge(event As ResolvedEvent)
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable{EventStore.ClientAPI.ResolvedEvent})
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable{EventStore.ClientAPI.ResolvedEvent})
  id: Acknowledge(IEnumerable{EventStore.ClientAPI.ResolvedEvent})
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Acknowledge(IEnumerable<ResolvedEvent>)
  nameWithType: EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable<ResolvedEvent>)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable<EventStore.ClientAPI.ResolvedEvent>)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Acknowledge
    path: ../EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 98
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAcknowledge that a message have completed processing (this will tell the server it has been processed)\n"
  remarks: There is no need to ack a message if you have Auto Ack enabled
  example: []
  syntax:
    content: public void Acknowledge(IEnumerable<ResolvedEvent> events)
    parameters:
    - id: events
      type: IEnumerable{EventStore.ClientAPI.ResolvedEvent}
      description: The <xref href="EventStore.ClientAPI.ResolvedEvent" data-throw-if-not-resolved="false"></xref>s to acknowledge there should be less than 2000 to ack at a time.
    content.vb: Public Sub Acknowledge(events As IEnumerable(Of ResolvedEvent))
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge*
  nameWithType.vb: EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable(Of ResolvedEvent))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable(Of EventStore.ClientAPI.ResolvedEvent))
  name.vb: Acknowledge(IEnumerable(Of ResolvedEvent))
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(Guid)
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(Guid)
  id: Acknowledge(Guid)
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Acknowledge(Guid)
  nameWithType: EventStorePersistentSubscriptionBase.Acknowledge(Guid)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(Guid)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Acknowledge
    path: ../EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 110
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAcknowledge a message by event id (this will tell the server it has been processed)\n"
  remarks: There is no need to ack a message if you have Auto Ack enabled
  example: []
  syntax:
    content: public void Acknowledge(Guid eventId)
    parameters:
    - id: eventId
      type: Guid
      description: The <xref href="EventStore.ClientAPI.ResolvedEvent" data-throw-if-not-resolved="false"></xref> OriginalEvent.EventId to acknowledge
    content.vb: Public Sub Acknowledge(eventId As Guid)
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable{Guid})
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable{Guid})
  id: Acknowledge(IEnumerable{Guid})
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Acknowledge(IEnumerable<Guid>)
  nameWithType: EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable<Guid>)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable<Guid>)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Acknowledge
    path: ../EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 120
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAcknowledge a group of messages by event id (this will tell the server it has been processed)\n"
  remarks: There is no need to ack a message if you have Auto Ack enabled
  example: []
  syntax:
    content: public void Acknowledge(IEnumerable<Guid> events)
    parameters:
    - id: events
      type: IEnumerable{Guid}
      description: The <xref href="EventStore.ClientAPI.ResolvedEvent" data-throw-if-not-resolved="false"></xref> OriginalEvent.EventIds to acknowledge there should be less than 2000 to ack at a time.
    content.vb: Public Sub Acknowledge(events As IEnumerable(Of Guid))
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge*
  nameWithType.vb: EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable(Of Guid))
  name.vb: Acknowledge(IEnumerable(Of Guid))
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(EventStore.ClientAPI.ResolvedEvent,EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(EventStore.ClientAPI.ResolvedEvent,EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  id: Fail(EventStore.ClientAPI.ResolvedEvent,EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Fail(ResolvedEvent, PersistentSubscriptionNakEventAction, String)
  nameWithType: EventStorePersistentSubscriptionBase.Fail(ResolvedEvent, PersistentSubscriptionNakEventAction, String)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(EventStore.ClientAPI.ResolvedEvent, EventStore.ClientAPI.PersistentSubscriptionNakEventAction, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Fail
    path: ../EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 132
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nMark a message failed processing. The server will be take action based upon the action paramter\n"
  example: []
  syntax:
    content: public void Fail(ResolvedEvent event, PersistentSubscriptionNakEventAction action, string reason)
    parameters:
    - id: event
      type: EventStore.ClientAPI.ResolvedEvent
      description: The event to mark as failed
    - id: action
      type: EventStore.ClientAPI.PersistentSubscriptionNakEventAction
      description: The <xref href="EventStore.ClientAPI.PersistentSubscriptionNakEventAction" data-throw-if-not-resolved="false"></xref> action to take
    - id: reason
      type: System.String
      description: A string with a message as to why the failure is occurring
    content.vb: Public Sub Fail(event As ResolvedEvent, action As PersistentSubscriptionNakEventAction, reason As String)
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(IEnumerable{EventStore.ClientAPI.ResolvedEvent},EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(IEnumerable{EventStore.ClientAPI.ResolvedEvent},EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  id: Fail(IEnumerable{EventStore.ClientAPI.ResolvedEvent},EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Fail(IEnumerable<ResolvedEvent>, PersistentSubscriptionNakEventAction, String)
  nameWithType: EventStorePersistentSubscriptionBase.Fail(IEnumerable<ResolvedEvent>, PersistentSubscriptionNakEventAction, String)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(IEnumerable<EventStore.ClientAPI.ResolvedEvent>, EventStore.ClientAPI.PersistentSubscriptionNakEventAction, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Fail
    path: ../EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 143
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nMark nmessages that have failed processing. The server will take action based upon the action parameter\n"
  example: []
  syntax:
    content: public void Fail(IEnumerable<ResolvedEvent> events, PersistentSubscriptionNakEventAction action, string reason)
    parameters:
    - id: events
      type: IEnumerable{EventStore.ClientAPI.ResolvedEvent}
      description: The events to mark as failed
    - id: action
      type: EventStore.ClientAPI.PersistentSubscriptionNakEventAction
      description: The <xref href="EventStore.ClientAPI.PersistentSubscriptionNakEventAction" data-throw-if-not-resolved="false"></xref> action to take
    - id: reason
      type: System.String
      description: A string with a message as to why the failure is occurring
    content.vb: Public Sub Fail(events As IEnumerable(Of ResolvedEvent), action As PersistentSubscriptionNakEventAction, reason As String)
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail*
  nameWithType.vb: EventStorePersistentSubscriptionBase.Fail(IEnumerable(Of ResolvedEvent), PersistentSubscriptionNakEventAction, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(IEnumerable(Of EventStore.ClientAPI.ResolvedEvent), EventStore.ClientAPI.PersistentSubscriptionNakEventAction, System.String)
  name.vb: Fail(IEnumerable(Of ResolvedEvent), PersistentSubscriptionNakEventAction, String)
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop(TimeSpan)
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop(TimeSpan)
  id: Stop(TimeSpan)
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Stop(TimeSpan)
  nameWithType: EventStorePersistentSubscriptionBase.Stop(TimeSpan)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop(TimeSpan)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Stop
    path: ../EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 156
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nDisconnects this client from the persistent subscriptions.\n"
  example: []
  syntax:
    content: public void Stop(TimeSpan timeout)
    parameters:
    - id: timeout
      type: TimeSpan
      description: ''
    content.vb: Public Sub Stop(timeout As TimeSpan)
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<EventStorePersistentSubscriptionBase>()
  nameWithType: ProtobufExtensions.Serialize<EventStorePersistentSubscriptionBase>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.EventStorePersistentSubscriptionBase>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of EventStorePersistentSubscriptionBase)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase)()
  name.vb: Serialize(Of EventStorePersistentSubscriptionBase)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<EventStorePersistentSubscriptionBase>
    nameWithType: ProtobufExtensions.Serialize<EventStorePersistentSubscriptionBase>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.EventStorePersistentSubscriptionBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of EventStorePersistentSubscriptionBase)
    nameWithType: ProtobufExtensions.Serialize(Of EventStorePersistentSubscriptionBase)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<EventStorePersistentSubscriptionBase>()
  nameWithType: ProtobufExtensions.SerializeToArray<EventStorePersistentSubscriptionBase>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.EventStorePersistentSubscriptionBase>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of EventStorePersistentSubscriptionBase)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase)()
  name.vb: SerializeToArray(Of EventStorePersistentSubscriptionBase)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<EventStorePersistentSubscriptionBase>
    nameWithType: ProtobufExtensions.SerializeToArray<EventStorePersistentSubscriptionBase>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.EventStorePersistentSubscriptionBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of EventStorePersistentSubscriptionBase)
    nameWithType: ProtobufExtensions.SerializeToArray(Of EventStorePersistentSubscriptionBase)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.ClientAPI.ResolvedEvent
  commentId: T:EventStore.ClientAPI.ResolvedEvent
  parent: EventStore.ClientAPI
  isExternal: false
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.ClientAPI.ResolvedEvent
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge*
  commentId: Overload:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge
  isExternal: false
  name: Acknowledge
  nameWithType: EventStorePersistentSubscriptionBase.Acknowledge
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge
- uid: IEnumerable{EventStore.ClientAPI.ResolvedEvent}
  commentId: '!:IEnumerable{EventStore.ClientAPI.ResolvedEvent}'
  definition: IEnumerable`1
  name: IEnumerable<ResolvedEvent>
  nameWithType: IEnumerable<ResolvedEvent>
  fullName: IEnumerable<EventStore.ClientAPI.ResolvedEvent>
  nameWithType.vb: IEnumerable(Of ResolvedEvent)
  fullName.vb: IEnumerable(Of EventStore.ClientAPI.ResolvedEvent)
  name.vb: IEnumerable(Of ResolvedEvent)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: IEnumerable{Guid}
  commentId: '!:IEnumerable{Guid}'
  definition: IEnumerable`1
  name: IEnumerable<Guid>
  nameWithType: IEnumerable<Guid>
  fullName: IEnumerable<Guid>
  nameWithType.vb: IEnumerable(Of Guid)
  fullName.vb: IEnumerable(Of Guid)
  name.vb: IEnumerable(Of Guid)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.PersistentSubscriptionNakEventAction
  commentId: T:EventStore.ClientAPI.PersistentSubscriptionNakEventAction
  parent: EventStore.ClientAPI
  isExternal: false
  name: PersistentSubscriptionNakEventAction
  nameWithType: PersistentSubscriptionNakEventAction
  fullName: EventStore.ClientAPI.PersistentSubscriptionNakEventAction
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail*
  commentId: Overload:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail
  isExternal: false
  name: Fail
  nameWithType: EventStorePersistentSubscriptionBase.Fail
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop*
  commentId: Overload:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop
  isExternal: false
  name: Stop
  nameWithType: EventStorePersistentSubscriptionBase.Stop
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan

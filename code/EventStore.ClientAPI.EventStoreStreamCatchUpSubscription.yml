### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
  id: EventStoreStreamCatchUpSubscription
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.LastProcessedEventNumber
  - EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  - EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  langs:
  - csharp
  - vb
  name: EventStoreStreamCatchUpSubscription
  nameWithType: EventStoreStreamCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: EventStoreStreamCatchUpSubscription
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 496
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nA catch-up subscription to a single stream in the Event Store.\n"
  example: []
  syntax:
    content: 'public class EventStoreStreamCatchUpSubscription : EventStoreCatchUpSubscription'
    content.vb: >-
      Public Class EventStoreStreamCatchUpSubscription
          Inherits EventStoreCatchUpSubscription
  inheritance:
  - System.Object
  - EventStore.ClientAPI.EventStoreCatchUpSubscription
  inheritedMembers:
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.LastProcessedEventNumber
  commentId: P:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.LastProcessedEventNumber
  id: LastProcessedEventNumber
  parent: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
  langs:
  - csharp
  - vb
  name: LastProcessedEventNumber
  nameWithType: EventStoreStreamCatchUpSubscription.LastProcessedEventNumber
  fullName: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.LastProcessedEventNumber
  type: Property
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: LastProcessedEventNumber
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 501
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe last event number processed on the subscription.\n"
  example: []
  syntax:
    content: public long LastProcessedEventNumber { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property LastProcessedEventNumber As Long
  overload: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.LastProcessedEventNumber*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  commentId: M:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  id: ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  parent: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
  langs:
  - csharp
  - vb
  name: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  nameWithType: EventStoreStreamCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  fullName: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable<System.Int64>, System.Nullable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ReadEventsTillAsync
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 533
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRead events until the given event number async.\n"
  example: []
  syntax:
    content: protected override Task ReadEventsTillAsync(IEventStoreConnection connection, bool resolveLinkTos, UserCredentials userCredentials, long? lastCommitPosition, long? lastEventNumber)
    parameters:
    - id: connection
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The connection.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve Link events.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials for the operation.
    - id: lastCommitPosition
      type: System.Nullable{System.Int64}
      description: The commit position to read until.
    - id: lastEventNumber
      type: System.Nullable{System.Int64}
      description: The event number to read until.
    return:
      type: Task
      description: ''
    content.vb: Protected Overrides Function ReadEventsTillAsync(connection As IEventStoreConnection, resolveLinkTos As Boolean, userCredentials As UserCredentials, lastCommitPosition As Long?, lastEventNumber As Long?) As Task
  overridden: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  overload: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.ReadEventsTillAsync*
  nameWithType.vb: EventStoreStreamCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable(Of System.Int64), System.Nullable(Of System.Int64))
  name.vb: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
- uid: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  commentId: M:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  id: TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  parent: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
  langs:
  - csharp
  - vb
  name: TryProcessAsync(ResolvedEvent)
  nameWithType: EventStoreStreamCatchUpSubscription.TryProcessAsync(ResolvedEvent)
  fullName: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: TryProcessAsync
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 605
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nTry to process a single <xref href=\"EventStore.ClientAPI.ResolvedEvent\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected override Task TryProcessAsync(ResolvedEvent e)
    parameters:
    - id: e
      type: EventStore.ClientAPI.ResolvedEvent
      description: The <xref href="EventStore.ClientAPI.ResolvedEvent" data-throw-if-not-resolved="false"></xref> to process.
    return:
      type: Task
    content.vb: Protected Overrides Function TryProcessAsync(e As ResolvedEvent) As Task
  overridden: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  overload: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.TryProcessAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreCatchUpSubscription
  parent: EventStore.ClientAPI
  name: EventStoreCatchUpSubscription
  nameWithType: EventStoreCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  commentId: P:EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: IsSubscribedToAll
  nameWithType: EventStoreCatchUpSubscription.IsSubscribedToAll
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  commentId: P:EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: StreamId
  nameWithType: EventStoreCatchUpSubscription.StreamId
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  commentId: P:EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: SubscriptionName
  nameWithType: EventStoreCatchUpSubscription.SubscriptionName
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: Log
  nameWithType: EventStoreCatchUpSubscription.Log
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: ReadBatchSize
  nameWithType: EventStoreCatchUpSubscription.ReadBatchSize
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: MaxPushQueueSize
  nameWithType: EventStoreCatchUpSubscription.MaxPushQueueSize
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: EventAppeared
  nameWithType: EventStoreCatchUpSubscription.EventAppeared
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: Verbose
  nameWithType: EventStoreCatchUpSubscription.Verbose
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: ShouldStop
  nameWithType: EventStoreCatchUpSubscription.ShouldStop
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  isExternal: true
  name: Stop(TimeSpan)
  nameWithType: EventStoreCatchUpSubscription.Stop(TimeSpan)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
    name: Stop
    nameWithType: EventStoreCatchUpSubscription.Stop
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
    name: Stop
    nameWithType: EventStoreCatchUpSubscription.Stop
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: Stop()
  nameWithType: EventStoreCatchUpSubscription.Stop()
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop()
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
    name: Stop
    nameWithType: EventStoreCatchUpSubscription.Stop
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
    name: Stop
    nameWithType: EventStoreCatchUpSubscription.Stop
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<EventStoreStreamCatchUpSubscription>()
  nameWithType: ProtobufExtensions.Serialize<EventStoreStreamCatchUpSubscription>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.EventStoreStreamCatchUpSubscription>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of EventStoreStreamCatchUpSubscription)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.EventStoreStreamCatchUpSubscription)()
  name.vb: Serialize(Of EventStoreStreamCatchUpSubscription)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<EventStoreStreamCatchUpSubscription>
    nameWithType: ProtobufExtensions.Serialize<EventStoreStreamCatchUpSubscription>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.EventStoreStreamCatchUpSubscription>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of EventStoreStreamCatchUpSubscription)
    nameWithType: ProtobufExtensions.Serialize(Of EventStoreStreamCatchUpSubscription)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.EventStoreStreamCatchUpSubscription)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<EventStoreStreamCatchUpSubscription>()
  nameWithType: ProtobufExtensions.SerializeToArray<EventStoreStreamCatchUpSubscription>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.EventStoreStreamCatchUpSubscription>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of EventStoreStreamCatchUpSubscription)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.EventStoreStreamCatchUpSubscription)()
  name.vb: SerializeToArray(Of EventStoreStreamCatchUpSubscription)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<EventStoreStreamCatchUpSubscription>
    nameWithType: ProtobufExtensions.SerializeToArray<EventStoreStreamCatchUpSubscription>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.EventStoreStreamCatchUpSubscription>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of EventStoreStreamCatchUpSubscription)
    nameWithType: ProtobufExtensions.SerializeToArray(Of EventStoreStreamCatchUpSubscription)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.EventStoreStreamCatchUpSubscription)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.LastProcessedEventNumber*
  commentId: Overload:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.LastProcessedEventNumber
  name: LastProcessedEventNumber
  nameWithType: EventStoreStreamCatchUpSubscription.LastProcessedEventNumber
  fullName: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.LastProcessedEventNumber
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  isExternal: true
  name: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  nameWithType: EventStoreCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable<System.Int64>, System.Nullable<System.Int64>)
  nameWithType.vb: EventStoreCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
  fullName.vb: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable(Of System.Int64), System.Nullable(Of System.Int64))
  name.vb: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
    name: ReadEventsTillAsync
    nameWithType: EventStoreCatchUpSubscription.ReadEventsTillAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
    name: ReadEventsTillAsync
    nameWithType: EventStoreCatchUpSubscription.ReadEventsTillAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.ReadEventsTillAsync*
  commentId: Overload:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.ReadEventsTillAsync
  name: ReadEventsTillAsync
  nameWithType: EventStoreStreamCatchUpSubscription.ReadEventsTillAsync
  fullName: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.ReadEventsTillAsync
- uid: EventStore.ClientAPI.IEventStoreConnection
  commentId: T:EventStore.ClientAPI.IEventStoreConnection
  parent: EventStore.ClientAPI
  name: IEventStoreConnection
  nameWithType: IEventStoreConnection
  fullName: EventStore.ClientAPI.IEventStoreConnection
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.ClientAPI.SystemData.UserCredentials
  commentId: T:EventStore.ClientAPI.SystemData.UserCredentials
  parent: EventStore.ClientAPI.SystemData
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.ClientAPI.SystemData.UserCredentials
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: EventStore.ClientAPI.SystemData
  commentId: N:EventStore.ClientAPI.SystemData
  name: EventStore.ClientAPI.SystemData
  nameWithType: EventStore.ClientAPI.SystemData
  fullName: EventStore.ClientAPI.SystemData
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ResolvedEvent
  commentId: T:EventStore.ClientAPI.ResolvedEvent
  parent: EventStore.ClientAPI
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.ClientAPI.ResolvedEvent
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: TryProcessAsync(ResolvedEvent)
  nameWithType: EventStoreCatchUpSubscription.TryProcessAsync(ResolvedEvent)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
    name: TryProcessAsync
    nameWithType: EventStoreCatchUpSubscription.TryProcessAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
    name: TryProcessAsync
    nameWithType: EventStoreCatchUpSubscription.TryProcessAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.TryProcessAsync*
  commentId: Overload:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.TryProcessAsync
  name: TryProcessAsync
  nameWithType: EventStoreStreamCatchUpSubscription.TryProcessAsync
  fullName: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.TryProcessAsync

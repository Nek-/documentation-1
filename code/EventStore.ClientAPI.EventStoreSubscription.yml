### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.EventStoreSubscription
  commentId: T:EventStore.ClientAPI.EventStoreSubscription
  id: EventStoreSubscription
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.EventStoreSubscription.Close
  - EventStore.ClientAPI.EventStoreSubscription.Dispose
  - EventStore.ClientAPI.EventStoreSubscription.IsSubscribedToAll
  - EventStore.ClientAPI.EventStoreSubscription.LastCommitPosition
  - EventStore.ClientAPI.EventStoreSubscription.LastEventNumber
  - EventStore.ClientAPI.EventStoreSubscription.StreamId
  - EventStore.ClientAPI.EventStoreSubscription.Unsubscribe
  langs:
  - csharp
  - vb
  name: EventStoreSubscription
  nameWithType: EventStoreSubscription
  fullName: EventStore.ClientAPI.EventStoreSubscription
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreSubscription.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: EventStoreSubscription
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreSubscription.cs
    startLine: 8
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRepresents a subscription to a single stream or to the stream\nof all events in the Event Store.\n"
  example: []
  syntax:
    content: 'public abstract class EventStoreSubscription : IDisposable'
    content.vb: >-
      Public MustInherit Class EventStoreSubscription
          Inherits IDisposable
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.ClientAPI.EventStoreSubscription.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.EventStoreSubscription.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EventStore.ClientAPI.EventStoreSubscription.IsSubscribedToAll
  commentId: P:EventStore.ClientAPI.EventStoreSubscription.IsSubscribedToAll
  id: IsSubscribedToAll
  parent: EventStore.ClientAPI.EventStoreSubscription
  langs:
  - csharp
  - vb
  name: IsSubscribedToAll
  nameWithType: EventStoreSubscription.IsSubscribedToAll
  fullName: EventStore.ClientAPI.EventStoreSubscription.IsSubscribedToAll
  type: Property
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreSubscription.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: IsSubscribedToAll
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreSubscription.cs
    startLine: 13
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nTrue if this subscription is to all streams.\n"
  example: []
  syntax:
    content: public bool IsSubscribedToAll { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSubscribedToAll As Boolean
  overload: EventStore.ClientAPI.EventStoreSubscription.IsSubscribedToAll*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreSubscription.StreamId
  commentId: P:EventStore.ClientAPI.EventStoreSubscription.StreamId
  id: StreamId
  parent: EventStore.ClientAPI.EventStoreSubscription
  langs:
  - csharp
  - vb
  name: StreamId
  nameWithType: EventStoreSubscription.StreamId
  fullName: EventStore.ClientAPI.EventStoreSubscription.StreamId
  type: Property
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreSubscription.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: StreamId
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreSubscription.cs
    startLine: 17
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe name of the stream to which the subscription is subscribed.\n"
  example: []
  syntax:
    content: public string StreamId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property StreamId As String
  overload: EventStore.ClientAPI.EventStoreSubscription.StreamId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreSubscription.LastCommitPosition
  commentId: F:EventStore.ClientAPI.EventStoreSubscription.LastCommitPosition
  id: LastCommitPosition
  parent: EventStore.ClientAPI.EventStoreSubscription
  langs:
  - csharp
  - vb
  name: LastCommitPosition
  nameWithType: EventStoreSubscription.LastCommitPosition
  fullName: EventStore.ClientAPI.EventStoreSubscription.LastCommitPosition
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreSubscription.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: LastCommitPosition
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreSubscription.cs
    startLine: 22
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe last commit position seen on the subscription (if this is\na subscription to all events).\n"
  example: []
  syntax:
    content: public readonly long LastCommitPosition
    return:
      type: System.Int64
    content.vb: Public ReadOnly LastCommitPosition As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreSubscription.LastEventNumber
  commentId: F:EventStore.ClientAPI.EventStoreSubscription.LastEventNumber
  id: LastEventNumber
  parent: EventStore.ClientAPI.EventStoreSubscription
  langs:
  - csharp
  - vb
  name: LastEventNumber
  nameWithType: EventStoreSubscription.LastEventNumber
  fullName: EventStore.ClientAPI.EventStoreSubscription.LastEventNumber
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreSubscription.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: LastEventNumber
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreSubscription.cs
    startLine: 27
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe last event number seen on the subscription (if this is a\nsubscription to a single stream).\n"
  example: []
  syntax:
    content: public readonly long? LastEventNumber
    return:
      type: System.Nullable{System.Int64}
    content.vb: Public ReadOnly LastEventNumber As Long?
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreSubscription.Dispose
  commentId: M:EventStore.ClientAPI.EventStoreSubscription.Dispose
  id: Dispose
  parent: EventStore.ClientAPI.EventStoreSubscription
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: EventStoreSubscription.Dispose()
  fullName: EventStore.ClientAPI.EventStoreSubscription.Dispose()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreSubscription.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Dispose
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreSubscription.cs
    startLine: 39
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nUnsubscribes from the stream.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: EventStore.ClientAPI.EventStoreSubscription.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.EventStoreSubscription.Close
  commentId: M:EventStore.ClientAPI.EventStoreSubscription.Close
  id: Close
  parent: EventStore.ClientAPI.EventStoreSubscription
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: EventStoreSubscription.Close()
  fullName: EventStore.ClientAPI.EventStoreSubscription.Close()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreSubscription.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Close
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreSubscription.cs
    startLine: 47
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nUnsubscribes from the stream.\n"
  example: []
  syntax:
    content: public void Close()
    content.vb: Public Sub Close
  overload: EventStore.ClientAPI.EventStoreSubscription.Close*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.EventStoreSubscription.Unsubscribe
  commentId: M:EventStore.ClientAPI.EventStoreSubscription.Unsubscribe
  id: Unsubscribe
  parent: EventStore.ClientAPI.EventStoreSubscription
  langs:
  - csharp
  - vb
  name: Unsubscribe()
  nameWithType: EventStoreSubscription.Unsubscribe()
  fullName: EventStore.ClientAPI.EventStoreSubscription.Unsubscribe()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreSubscription.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Unsubscribe
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreSubscription.cs
    startLine: 55
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nUnsubscribes from the stream\n"
  example: []
  syntax:
    content: public abstract void Unsubscribe()
    content.vb: Public MustOverride Sub Unsubscribe
  overload: EventStore.ClientAPI.EventStoreSubscription.Unsubscribe*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreSubscription.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<EventStoreSubscription>()
  nameWithType: ProtobufExtensions.Serialize<EventStoreSubscription>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.EventStoreSubscription>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of EventStoreSubscription)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.EventStoreSubscription)()
  name.vb: Serialize(Of EventStoreSubscription)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<EventStoreSubscription>
    nameWithType: ProtobufExtensions.Serialize<EventStoreSubscription>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.EventStoreSubscription>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of EventStoreSubscription)
    nameWithType: ProtobufExtensions.Serialize(Of EventStoreSubscription)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.EventStoreSubscription)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreSubscription.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<EventStoreSubscription>()
  nameWithType: ProtobufExtensions.SerializeToArray<EventStoreSubscription>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.EventStoreSubscription>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of EventStoreSubscription)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.EventStoreSubscription)()
  name.vb: SerializeToArray(Of EventStoreSubscription)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<EventStoreSubscription>
    nameWithType: ProtobufExtensions.SerializeToArray<EventStoreSubscription>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.EventStoreSubscription>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of EventStoreSubscription)
    nameWithType: ProtobufExtensions.SerializeToArray(Of EventStoreSubscription)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.EventStoreSubscription)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.ClientAPI.EventStoreSubscription.IsSubscribedToAll*
  commentId: Overload:EventStore.ClientAPI.EventStoreSubscription.IsSubscribedToAll
  isExternal: false
  name: IsSubscribedToAll
  nameWithType: EventStoreSubscription.IsSubscribedToAll
  fullName: EventStore.ClientAPI.EventStoreSubscription.IsSubscribedToAll
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.ClientAPI.EventStoreSubscription.StreamId*
  commentId: Overload:EventStore.ClientAPI.EventStoreSubscription.StreamId
  isExternal: false
  name: StreamId
  nameWithType: EventStoreSubscription.StreamId
  fullName: EventStore.ClientAPI.EventStoreSubscription.StreamId
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreSubscription.Dispose*
  commentId: Overload:EventStore.ClientAPI.EventStoreSubscription.Dispose
  isExternal: false
  name: Dispose
  nameWithType: EventStoreSubscription.Dispose
  fullName: EventStore.ClientAPI.EventStoreSubscription.Dispose
- uid: EventStore.ClientAPI.EventStoreSubscription.Close*
  commentId: Overload:EventStore.ClientAPI.EventStoreSubscription.Close
  isExternal: false
  name: Close
  nameWithType: EventStoreSubscription.Close
  fullName: EventStore.ClientAPI.EventStoreSubscription.Close
- uid: EventStore.ClientAPI.EventStoreSubscription.Unsubscribe*
  commentId: Overload:EventStore.ClientAPI.EventStoreSubscription.Unsubscribe
  isExternal: false
  name: Unsubscribe
  nameWithType: EventStoreSubscription.Unsubscribe
  fullName: EventStore.ClientAPI.EventStoreSubscription.Unsubscribe

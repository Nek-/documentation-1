### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.Exceptions.UserCommandFailedException
  commentId: T:EventStore.ClientAPI.Exceptions.UserCommandFailedException
  id: UserCommandFailedException
  parent: EventStore.ClientAPI.Exceptions
  children:
  - EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor
  - EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor(SerializationInfo,StreamingContext)
  - EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor(System.Int32,System.String)
  - EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor(System.String,Exception)
  - EventStore.ClientAPI.Exceptions.UserCommandFailedException.HttpStatusCode
  langs:
  - csharp
  - vb
  name: UserCommandFailedException
  nameWithType: UserCommandFailedException
  fullName: EventStore.ClientAPI.Exceptions.UserCommandFailedException
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/Exceptions/UserCommandFailedException.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: UserCommandFailedException
    path: ../EventStore/src/EventStore.ClientAPI/Exceptions/UserCommandFailedException.cs
    startLine: 8
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Exceptions
  summary: "\nException thrown if a projection command fails.\n"
  example: []
  syntax:
    content: 'public class UserCommandFailedException : EventStoreConnectionException'
    content.vb: >-
      Public Class UserCommandFailedException
          Inherits EventStoreConnectionException
  inheritance:
  - System.Object
  - EventStore.ClientAPI.Exceptions.EventStoreConnectionException
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.ClientAPI.Exceptions.UserCommandFailedException.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.Exceptions.UserCommandFailedException.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.Exceptions.UserCommandFailedException.HttpStatusCode
  commentId: P:EventStore.ClientAPI.Exceptions.UserCommandFailedException.HttpStatusCode
  id: HttpStatusCode
  parent: EventStore.ClientAPI.Exceptions.UserCommandFailedException
  langs:
  - csharp
  - vb
  name: HttpStatusCode
  nameWithType: UserCommandFailedException.HttpStatusCode
  fullName: EventStore.ClientAPI.Exceptions.UserCommandFailedException.HttpStatusCode
  type: Property
  source:
    remote:
      path: src/EventStore.ClientAPI/Exceptions/UserCommandFailedException.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: HttpStatusCode
    path: ../EventStore/src/EventStore.ClientAPI/Exceptions/UserCommandFailedException.cs
    startLine: 13
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Exceptions
  summary: "\nThe Http status code returned for the operation\n"
  example: []
  syntax:
    content: public int HttpStatusCode { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property HttpStatusCode As Integer
  overload: EventStore.ClientAPI.Exceptions.UserCommandFailedException.HttpStatusCode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor
  commentId: M:EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor
  id: '#ctor'
  parent: EventStore.ClientAPI.Exceptions.UserCommandFailedException
  langs:
  - csharp
  - vb
  name: UserCommandFailedException()
  nameWithType: UserCommandFailedException.UserCommandFailedException()
  fullName: EventStore.ClientAPI.Exceptions.UserCommandFailedException.UserCommandFailedException()
  type: Constructor
  source:
    remote:
      path: src/EventStore.ClientAPI/Exceptions/UserCommandFailedException.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.ClientAPI/Exceptions/UserCommandFailedException.cs
    startLine: 18
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Exceptions
  summary: "\nConstructs a new <xref href=\"EventStore.ClientAPI.Exceptions.UserCommandFailedException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public UserCommandFailedException()
    content.vb: Public Sub New
  overload: EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor(System.Int32,System.String)
  commentId: M:EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor(System.Int32,System.String)
  id: '#ctor(System.Int32,System.String)'
  parent: EventStore.ClientAPI.Exceptions.UserCommandFailedException
  langs:
  - csharp
  - vb
  name: UserCommandFailedException(Int32, String)
  nameWithType: UserCommandFailedException.UserCommandFailedException(Int32, String)
  fullName: EventStore.ClientAPI.Exceptions.UserCommandFailedException.UserCommandFailedException(System.Int32, System.String)
  type: Constructor
  source:
    remote:
      path: src/EventStore.ClientAPI/Exceptions/UserCommandFailedException.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.ClientAPI/Exceptions/UserCommandFailedException.cs
    startLine: 25
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Exceptions
  summary: "\nConstructs a new <xref href=\"EventStore.ClientAPI.Exceptions.UserCommandFailedException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public UserCommandFailedException(int httpStatusCode, string message)
    parameters:
    - id: httpStatusCode
      type: System.Int32
    - id: message
      type: System.String
    content.vb: Public Sub New(httpStatusCode As Integer, message As String)
  overload: EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor(System.String,Exception)
  commentId: M:EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor(System.String,Exception)
  id: '#ctor(System.String,Exception)'
  parent: EventStore.ClientAPI.Exceptions.UserCommandFailedException
  langs:
  - csharp
  - vb
  name: UserCommandFailedException(String, Exception)
  nameWithType: UserCommandFailedException.UserCommandFailedException(String, Exception)
  fullName: EventStore.ClientAPI.Exceptions.UserCommandFailedException.UserCommandFailedException(System.String, Exception)
  type: Constructor
  source:
    remote:
      path: src/EventStore.ClientAPI/Exceptions/UserCommandFailedException.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.ClientAPI/Exceptions/UserCommandFailedException.cs
    startLine: 33
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Exceptions
  summary: "\nConstructs a new <xref href=\"EventStore.ClientAPI.Exceptions.UserCommandFailedException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public UserCommandFailedException(string message, Exception innerException)
    parameters:
    - id: message
      type: System.String
    - id: innerException
      type: Exception
    content.vb: Public Sub New(message As String, innerException As Exception)
  overload: EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor(SerializationInfo,StreamingContext)
  commentId: M:EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor(SerializationInfo,StreamingContext)
  id: '#ctor(SerializationInfo,StreamingContext)'
  parent: EventStore.ClientAPI.Exceptions.UserCommandFailedException
  langs:
  - csharp
  - vb
  name: UserCommandFailedException(SerializationInfo, StreamingContext)
  nameWithType: UserCommandFailedException.UserCommandFailedException(SerializationInfo, StreamingContext)
  fullName: EventStore.ClientAPI.Exceptions.UserCommandFailedException.UserCommandFailedException(SerializationInfo, StreamingContext)
  type: Constructor
  source:
    remote:
      path: src/EventStore.ClientAPI/Exceptions/UserCommandFailedException.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.ClientAPI/Exceptions/UserCommandFailedException.cs
    startLine: 41
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Exceptions
  summary: "\nConstructs a new <xref href=\"EventStore.ClientAPI.Exceptions.UserCommandFailedException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected UserCommandFailedException(SerializationInfo info, StreamingContext context)
    parameters:
    - id: info
      type: SerializationInfo
    - id: context
      type: StreamingContext
    content.vb: Protected Sub New(info As SerializationInfo, context As StreamingContext)
  overload: EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: EventStore.ClientAPI.Exceptions
  commentId: N:EventStore.ClientAPI.Exceptions
  isExternal: false
  name: EventStore.ClientAPI.Exceptions
  nameWithType: EventStore.ClientAPI.Exceptions
  fullName: EventStore.ClientAPI.Exceptions
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.ClientAPI.Exceptions.EventStoreConnectionException
  commentId: T:EventStore.ClientAPI.Exceptions.EventStoreConnectionException
  parent: EventStore.ClientAPI.Exceptions
  isExternal: false
  name: EventStoreConnectionException
  nameWithType: EventStoreConnectionException
  fullName: EventStore.ClientAPI.Exceptions.EventStoreConnectionException
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Exceptions.UserCommandFailedException.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<UserCommandFailedException>()
  nameWithType: ProtobufExtensions.Serialize<UserCommandFailedException>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.Exceptions.UserCommandFailedException>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of UserCommandFailedException)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.Exceptions.UserCommandFailedException)()
  name.vb: Serialize(Of UserCommandFailedException)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<UserCommandFailedException>
    nameWithType: ProtobufExtensions.Serialize<UserCommandFailedException>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.Exceptions.UserCommandFailedException>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of UserCommandFailedException)
    nameWithType: ProtobufExtensions.Serialize(Of UserCommandFailedException)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.Exceptions.UserCommandFailedException)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Exceptions.UserCommandFailedException.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<UserCommandFailedException>()
  nameWithType: ProtobufExtensions.SerializeToArray<UserCommandFailedException>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.Exceptions.UserCommandFailedException>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of UserCommandFailedException)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.Exceptions.UserCommandFailedException)()
  name.vb: SerializeToArray(Of UserCommandFailedException)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<UserCommandFailedException>
    nameWithType: ProtobufExtensions.SerializeToArray<UserCommandFailedException>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.Exceptions.UserCommandFailedException>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of UserCommandFailedException)
    nameWithType: ProtobufExtensions.SerializeToArray(Of UserCommandFailedException)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.Exceptions.UserCommandFailedException)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.ClientAPI.Exceptions.UserCommandFailedException.HttpStatusCode*
  commentId: Overload:EventStore.ClientAPI.Exceptions.UserCommandFailedException.HttpStatusCode
  isExternal: false
  name: HttpStatusCode
  nameWithType: UserCommandFailedException.HttpStatusCode
  fullName: EventStore.ClientAPI.Exceptions.UserCommandFailedException.HttpStatusCode
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.ClientAPI.Exceptions.UserCommandFailedException
  commentId: T:EventStore.ClientAPI.Exceptions.UserCommandFailedException
  isExternal: false
  name: UserCommandFailedException
  nameWithType: UserCommandFailedException
  fullName: EventStore.ClientAPI.Exceptions.UserCommandFailedException
- uid: EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor*
  commentId: Overload:EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor
  isExternal: false
  name: UserCommandFailedException
  nameWithType: UserCommandFailedException.UserCommandFailedException
  fullName: EventStore.ClientAPI.Exceptions.UserCommandFailedException.UserCommandFailedException
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: SerializationInfo
  isExternal: true
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: SerializationInfo
- uid: StreamingContext
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: StreamingContext

### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings
  commentId: T:EventStore.ClientAPI.PersistentSubscriptionSettings
  id: PersistentSubscriptionSettings
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.PersistentSubscriptionSettings.CheckPointAfter
  - EventStore.ClientAPI.PersistentSubscriptionSettings.Create
  - EventStore.ClientAPI.PersistentSubscriptionSettings.ExtraStatistics
  - EventStore.ClientAPI.PersistentSubscriptionSettings.HistoryBufferSize
  - EventStore.ClientAPI.PersistentSubscriptionSettings.LiveBufferSize
  - EventStore.ClientAPI.PersistentSubscriptionSettings.MaxCheckPointCount
  - EventStore.ClientAPI.PersistentSubscriptionSettings.MaxRetryCount
  - EventStore.ClientAPI.PersistentSubscriptionSettings.MaxSubscriberCount
  - EventStore.ClientAPI.PersistentSubscriptionSettings.MessageTimeout
  - EventStore.ClientAPI.PersistentSubscriptionSettings.MinCheckPointCount
  - EventStore.ClientAPI.PersistentSubscriptionSettings.NamedConsumerStrategy
  - EventStore.ClientAPI.PersistentSubscriptionSettings.ReadBatchSize
  - EventStore.ClientAPI.PersistentSubscriptionSettings.ResolveLinkTos
  - EventStore.ClientAPI.PersistentSubscriptionSettings.StartFrom
  langs:
  - csharp
  - vb
  name: PersistentSubscriptionSettings
  nameWithType: PersistentSubscriptionSettings
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: PersistentSubscriptionSettings
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 9
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRepresents the settings for a <xref href=\"EventStore.ClientAPI.PersistentEventStoreSubscription\" data-throw-if-not-resolved=\"false\"></xref>. You should not use\nthis directly, but instead created via a <xref href=\"EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class PersistentSubscriptionSettings : object'
    content.vb: >-
      Public Class PersistentSubscriptionSettings
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.ClientAPI.PersistentSubscriptionSettings.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.PersistentSubscriptionSettings.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.Create
  commentId: M:EventStore.ClientAPI.PersistentSubscriptionSettings.Create
  id: Create
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: PersistentSubscriptionSettings.Create()
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.Create()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Create
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 15
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a new <xref href=\"EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder\" data-throw-if-not-resolved=\"false\"></xref> object\n"
  example: []
  syntax:
    content: public static PersistentSubscriptionSettingsBuilder Create()
    return:
      type: EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder
      description: a new <xref href="EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder" data-throw-if-not-resolved="false"></xref> object
    content.vb: Public Shared Function Create As PersistentSubscriptionSettingsBuilder
  overload: EventStore.ClientAPI.PersistentSubscriptionSettings.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.ResolveLinkTos
  commentId: F:EventStore.ClientAPI.PersistentSubscriptionSettings.ResolveLinkTos
  id: ResolveLinkTos
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: ResolveLinkTos
  nameWithType: PersistentSubscriptionSettings.ResolveLinkTos
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.ResolveLinkTos
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ResolveLinkTos
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 36
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWhether the <xref href=\"EventStore.ClientAPI.PersistentEventStoreSubscription\" data-throw-if-not-resolved=\"false\"></xref> should resolve linkTo events to their linked events.\n"
  example: []
  syntax:
    content: public readonly bool ResolveLinkTos
    return:
      type: System.Boolean
    content.vb: Public ReadOnly ResolveLinkTos As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.StartFrom
  commentId: F:EventStore.ClientAPI.PersistentSubscriptionSettings.StartFrom
  id: StartFrom
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: StartFrom
  nameWithType: PersistentSubscriptionSettings.StartFrom
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.StartFrom
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: StartFrom
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 41
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWhich event position in the stream the subscription should start from.\n"
  example: []
  syntax:
    content: public readonly long StartFrom
    return:
      type: System.Int64
    content.vb: Public ReadOnly StartFrom As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.ExtraStatistics
  commentId: F:EventStore.ClientAPI.PersistentSubscriptionSettings.ExtraStatistics
  id: ExtraStatistics
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: ExtraStatistics
  nameWithType: PersistentSubscriptionSettings.ExtraStatistics
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.ExtraStatistics
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ExtraStatistics
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 46
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWhether to track latency statistics on this subscription.\n"
  example: []
  syntax:
    content: public readonly bool ExtraStatistics
    return:
      type: System.Boolean
    content.vb: Public ReadOnly ExtraStatistics As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.MessageTimeout
  commentId: F:EventStore.ClientAPI.PersistentSubscriptionSettings.MessageTimeout
  id: MessageTimeout
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: MessageTimeout
  nameWithType: PersistentSubscriptionSettings.MessageTimeout
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.MessageTimeout
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MessageTimeout
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 51
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe amount of time after which to consider a message as timedout and retried.\n"
  example: []
  syntax:
    content: public readonly TimeSpan MessageTimeout
    return:
      type: TimeSpan
    content.vb: Public ReadOnly MessageTimeout As TimeSpan
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.MaxRetryCount
  commentId: F:EventStore.ClientAPI.PersistentSubscriptionSettings.MaxRetryCount
  id: MaxRetryCount
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: MaxRetryCount
  nameWithType: PersistentSubscriptionSettings.MaxRetryCount
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.MaxRetryCount
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MaxRetryCount
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 56
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe maximum number of retries (due to timeout) before a message is considered to be parked.\n"
  example: []
  syntax:
    content: public int MaxRetryCount
    return:
      type: System.Int32
    content.vb: Public MaxRetryCount As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.LiveBufferSize
  commentId: F:EventStore.ClientAPI.PersistentSubscriptionSettings.LiveBufferSize
  id: LiveBufferSize
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: LiveBufferSize
  nameWithType: PersistentSubscriptionSettings.LiveBufferSize
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.LiveBufferSize
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: LiveBufferSize
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 61
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe size of the buffer (in-memory) listening to live messages as they happen before paging occurs.\n"
  example: []
  syntax:
    content: public int LiveBufferSize
    return:
      type: System.Int32
    content.vb: Public LiveBufferSize As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.ReadBatchSize
  commentId: F:EventStore.ClientAPI.PersistentSubscriptionSettings.ReadBatchSize
  id: ReadBatchSize
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: ReadBatchSize
  nameWithType: PersistentSubscriptionSettings.ReadBatchSize
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.ReadBatchSize
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ReadBatchSize
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 66
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe number of events read at a time when paging through history.\n"
  example: []
  syntax:
    content: public int ReadBatchSize
    return:
      type: System.Int32
    content.vb: Public ReadBatchSize As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.HistoryBufferSize
  commentId: F:EventStore.ClientAPI.PersistentSubscriptionSettings.HistoryBufferSize
  id: HistoryBufferSize
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: HistoryBufferSize
  nameWithType: PersistentSubscriptionSettings.HistoryBufferSize
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.HistoryBufferSize
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: HistoryBufferSize
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 71
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe number of events to cache when paging through history.\n"
  example: []
  syntax:
    content: public int HistoryBufferSize
    return:
      type: System.Int32
    content.vb: Public HistoryBufferSize As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.CheckPointAfter
  commentId: F:EventStore.ClientAPI.PersistentSubscriptionSettings.CheckPointAfter
  id: CheckPointAfter
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: CheckPointAfter
  nameWithType: PersistentSubscriptionSettings.CheckPointAfter
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.CheckPointAfter
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CheckPointAfter
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 76
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe amount of time to try to checkpoint after.\n"
  example: []
  syntax:
    content: public readonly TimeSpan CheckPointAfter
    return:
      type: TimeSpan
    content.vb: Public ReadOnly CheckPointAfter As TimeSpan
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.MinCheckPointCount
  commentId: F:EventStore.ClientAPI.PersistentSubscriptionSettings.MinCheckPointCount
  id: MinCheckPointCount
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: MinCheckPointCount
  nameWithType: PersistentSubscriptionSettings.MinCheckPointCount
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.MinCheckPointCount
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MinCheckPointCount
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 81
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe minimum number of messages to write to a checkpoint.\n"
  example: []
  syntax:
    content: public readonly int MinCheckPointCount
    return:
      type: System.Int32
    content.vb: Public ReadOnly MinCheckPointCount As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.MaxCheckPointCount
  commentId: F:EventStore.ClientAPI.PersistentSubscriptionSettings.MaxCheckPointCount
  id: MaxCheckPointCount
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: MaxCheckPointCount
  nameWithType: PersistentSubscriptionSettings.MaxCheckPointCount
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.MaxCheckPointCount
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MaxCheckPointCount
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 86
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe maximum number of messages not checkpointed before forcing a checkpoint.\n"
  example: []
  syntax:
    content: public readonly int MaxCheckPointCount
    return:
      type: System.Int32
    content.vb: Public ReadOnly MaxCheckPointCount As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.MaxSubscriberCount
  commentId: F:EventStore.ClientAPI.PersistentSubscriptionSettings.MaxSubscriberCount
  id: MaxSubscriberCount
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: MaxSubscriberCount
  nameWithType: PersistentSubscriptionSettings.MaxSubscriberCount
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.MaxSubscriberCount
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MaxSubscriberCount
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 91
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe maximum number of subscribers allowed.\n"
  example: []
  syntax:
    content: public readonly int MaxSubscriberCount
    return:
      type: System.Int32
    content.vb: Public ReadOnly MaxSubscriberCount As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.NamedConsumerStrategy
  commentId: F:EventStore.ClientAPI.PersistentSubscriptionSettings.NamedConsumerStrategy
  id: NamedConsumerStrategy
  parent: EventStore.ClientAPI.PersistentSubscriptionSettings
  langs:
  - csharp
  - vb
  name: NamedConsumerStrategy
  nameWithType: PersistentSubscriptionSettings.NamedConsumerStrategy
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.NamedConsumerStrategy
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: NamedConsumerStrategy
    path: ../EventStore/src/EventStore.ClientAPI/PersistentSubscriptionSettings.cs
    startLine: 96
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe strategy to use for distributing events to client consumers. See <xref href=\"EventStore.ClientAPI.Common.SystemConsumerStrategies\" data-throw-if-not-resolved=\"false\"></xref> for system supported strategies.\n"
  example: []
  syntax:
    content: public string NamedConsumerStrategy
    return:
      type: System.String
    content.vb: Public NamedConsumerStrategy As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI.PersistentEventStoreSubscription
  commentId: T:EventStore.ClientAPI.PersistentEventStoreSubscription
- uid: EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder
  commentId: T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder
  parent: EventStore.ClientAPI
  isExternal: false
  name: PersistentSubscriptionSettingsBuilder
  nameWithType: PersistentSubscriptionSettingsBuilder
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<PersistentSubscriptionSettings>()
  nameWithType: ProtobufExtensions.Serialize<PersistentSubscriptionSettings>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.PersistentSubscriptionSettings>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of PersistentSubscriptionSettings)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.PersistentSubscriptionSettings)()
  name.vb: Serialize(Of PersistentSubscriptionSettings)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<PersistentSubscriptionSettings>
    nameWithType: ProtobufExtensions.Serialize<PersistentSubscriptionSettings>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.PersistentSubscriptionSettings>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of PersistentSubscriptionSettings)
    nameWithType: ProtobufExtensions.Serialize(Of PersistentSubscriptionSettings)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.PersistentSubscriptionSettings)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<PersistentSubscriptionSettings>()
  nameWithType: ProtobufExtensions.SerializeToArray<PersistentSubscriptionSettings>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.PersistentSubscriptionSettings>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of PersistentSubscriptionSettings)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.PersistentSubscriptionSettings)()
  name.vb: SerializeToArray(Of PersistentSubscriptionSettings)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<PersistentSubscriptionSettings>
    nameWithType: ProtobufExtensions.SerializeToArray<PersistentSubscriptionSettings>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.PersistentSubscriptionSettings>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of PersistentSubscriptionSettings)
    nameWithType: ProtobufExtensions.SerializeToArray(Of PersistentSubscriptionSettings)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.PersistentSubscriptionSettings)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings.Create*
  commentId: Overload:EventStore.ClientAPI.PersistentSubscriptionSettings.Create
  isExternal: false
  name: Create
  nameWithType: PersistentSubscriptionSettings.Create
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings.Create
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.ClientAPI.Common.SystemConsumerStrategies
  commentId: T:EventStore.ClientAPI.Common.SystemConsumerStrategies
  isExternal: false
  name: SystemConsumerStrategies
  nameWithType: SystemConsumerStrategies
  fullName: EventStore.ClientAPI.Common.SystemConsumerStrategies
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String

### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.RecordedEvent
  commentId: T:EventStore.ClientAPI.RecordedEvent
  id: RecordedEvent
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.RecordedEvent.Created
  - EventStore.ClientAPI.RecordedEvent.CreatedEpoch
  - EventStore.ClientAPI.RecordedEvent.Data
  - EventStore.ClientAPI.RecordedEvent.EventId
  - EventStore.ClientAPI.RecordedEvent.EventNumber
  - EventStore.ClientAPI.RecordedEvent.EventStreamId
  - EventStore.ClientAPI.RecordedEvent.EventType
  - EventStore.ClientAPI.RecordedEvent.IsJson
  - EventStore.ClientAPI.RecordedEvent.Metadata
  langs:
  - csharp
  - vb
  name: RecordedEvent
  nameWithType: RecordedEvent
  fullName: EventStore.ClientAPI.RecordedEvent
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/RecordedEvent.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: RecordedEvent
    path: ../EventStore/src/EventStore.ClientAPI/RecordedEvent.cs
    startLine: 10
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRepresents a previously written event\n"
  example: []
  syntax:
    content: 'public class RecordedEvent : object'
    content.vb: >-
      Public Class RecordedEvent
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.ClientAPI.RecordedEvent.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.RecordedEvent.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.RecordedEvent.EventStreamId
  commentId: F:EventStore.ClientAPI.RecordedEvent.EventStreamId
  id: EventStreamId
  parent: EventStore.ClientAPI.RecordedEvent
  langs:
  - csharp
  - vb
  name: EventStreamId
  nameWithType: RecordedEvent.EventStreamId
  fullName: EventStore.ClientAPI.RecordedEvent.EventStreamId
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/RecordedEvent.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: EventStreamId
    path: ../EventStore/src/EventStore.ClientAPI/RecordedEvent.cs
    startLine: 15
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe Event Stream that this event belongs to\n"
  example: []
  syntax:
    content: public readonly string EventStreamId
    return:
      type: System.String
    content.vb: Public ReadOnly EventStreamId As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.RecordedEvent.EventId
  commentId: F:EventStore.ClientAPI.RecordedEvent.EventId
  id: EventId
  parent: EventStore.ClientAPI.RecordedEvent
  langs:
  - csharp
  - vb
  name: EventId
  nameWithType: RecordedEvent.EventId
  fullName: EventStore.ClientAPI.RecordedEvent.EventId
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/RecordedEvent.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: EventId
    path: ../EventStore/src/EventStore.ClientAPI/RecordedEvent.cs
    startLine: 20
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe Unique Identifier representing this event\n"
  example: []
  syntax:
    content: public readonly Guid EventId
    return:
      type: Guid
    content.vb: Public ReadOnly EventId As Guid
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.RecordedEvent.EventNumber
  commentId: F:EventStore.ClientAPI.RecordedEvent.EventNumber
  id: EventNumber
  parent: EventStore.ClientAPI.RecordedEvent
  langs:
  - csharp
  - vb
  name: EventNumber
  nameWithType: RecordedEvent.EventNumber
  fullName: EventStore.ClientAPI.RecordedEvent.EventNumber
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/RecordedEvent.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: EventNumber
    path: ../EventStore/src/EventStore.ClientAPI/RecordedEvent.cs
    startLine: 25
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe number of this event in the stream\n"
  example: []
  syntax:
    content: public readonly long EventNumber
    return:
      type: System.Int64
    content.vb: Public ReadOnly EventNumber As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.RecordedEvent.EventType
  commentId: F:EventStore.ClientAPI.RecordedEvent.EventType
  id: EventType
  parent: EventStore.ClientAPI.RecordedEvent
  langs:
  - csharp
  - vb
  name: EventType
  nameWithType: RecordedEvent.EventType
  fullName: EventStore.ClientAPI.RecordedEvent.EventType
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/RecordedEvent.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: EventType
    path: ../EventStore/src/EventStore.ClientAPI/RecordedEvent.cs
    startLine: 30
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe type of event this is\n"
  example: []
  syntax:
    content: public readonly string EventType
    return:
      type: System.String
    content.vb: Public ReadOnly EventType As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.RecordedEvent.Data
  commentId: F:EventStore.ClientAPI.RecordedEvent.Data
  id: Data
  parent: EventStore.ClientAPI.RecordedEvent
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: RecordedEvent.Data
  fullName: EventStore.ClientAPI.RecordedEvent.Data
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/RecordedEvent.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Data
    path: ../EventStore/src/EventStore.ClientAPI/RecordedEvent.cs
    startLine: 35
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nA byte array representing the data of this event\n"
  example: []
  syntax:
    content: public readonly byte[] Data
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Data As Byte()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.RecordedEvent.Metadata
  commentId: F:EventStore.ClientAPI.RecordedEvent.Metadata
  id: Metadata
  parent: EventStore.ClientAPI.RecordedEvent
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: RecordedEvent.Metadata
  fullName: EventStore.ClientAPI.RecordedEvent.Metadata
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/RecordedEvent.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Metadata
    path: ../EventStore/src/EventStore.ClientAPI/RecordedEvent.cs
    startLine: 40
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nA byte array representing the metadata associated with this event\n"
  example: []
  syntax:
    content: public readonly byte[] Metadata
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Metadata As Byte()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.RecordedEvent.IsJson
  commentId: F:EventStore.ClientAPI.RecordedEvent.IsJson
  id: IsJson
  parent: EventStore.ClientAPI.RecordedEvent
  langs:
  - csharp
  - vb
  name: IsJson
  nameWithType: RecordedEvent.IsJson
  fullName: EventStore.ClientAPI.RecordedEvent.IsJson
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/RecordedEvent.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: IsJson
    path: ../EventStore/src/EventStore.ClientAPI/RecordedEvent.cs
    startLine: 45
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nIndicates whether the content is internally marked as json\n"
  example: []
  syntax:
    content: public readonly bool IsJson
    return:
      type: System.Boolean
    content.vb: Public ReadOnly IsJson As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.RecordedEvent.Created
  commentId: F:EventStore.ClientAPI.RecordedEvent.Created
  id: Created
  parent: EventStore.ClientAPI.RecordedEvent
  langs:
  - csharp
  - vb
  name: Created
  nameWithType: RecordedEvent.Created
  fullName: EventStore.ClientAPI.RecordedEvent.Created
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/RecordedEvent.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Created
    path: ../EventStore/src/EventStore.ClientAPI/RecordedEvent.cs
    startLine: 50
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nA datetime representing when this event was created in the system\n"
  example: []
  syntax:
    content: public DateTime Created
    return:
      type: DateTime
    content.vb: Public Created As DateTime
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.RecordedEvent.CreatedEpoch
  commentId: F:EventStore.ClientAPI.RecordedEvent.CreatedEpoch
  id: CreatedEpoch
  parent: EventStore.ClientAPI.RecordedEvent
  langs:
  - csharp
  - vb
  name: CreatedEpoch
  nameWithType: RecordedEvent.CreatedEpoch
  fullName: EventStore.ClientAPI.RecordedEvent.CreatedEpoch
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/RecordedEvent.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: CreatedEpoch
    path: ../EventStore/src/EventStore.ClientAPI/RecordedEvent.cs
    startLine: 55
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nA long representing the milliseconds since the epoch when the was created in the system\n"
  example: []
  syntax:
    content: public long CreatedEpoch
    return:
      type: System.Int64
    content.vb: Public CreatedEpoch As Long
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.RecordedEvent.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<RecordedEvent>()
  nameWithType: ProtobufExtensions.Serialize<RecordedEvent>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.RecordedEvent>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of RecordedEvent)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.RecordedEvent)()
  name.vb: Serialize(Of RecordedEvent)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<RecordedEvent>
    nameWithType: ProtobufExtensions.Serialize<RecordedEvent>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.RecordedEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of RecordedEvent)
    nameWithType: ProtobufExtensions.Serialize(Of RecordedEvent)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.RecordedEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.RecordedEvent.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<RecordedEvent>()
  nameWithType: ProtobufExtensions.SerializeToArray<RecordedEvent>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.RecordedEvent>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of RecordedEvent)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.RecordedEvent)()
  name.vb: SerializeToArray(Of RecordedEvent)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<RecordedEvent>
    nameWithType: ProtobufExtensions.SerializeToArray<RecordedEvent>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.RecordedEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of RecordedEvent)
    nameWithType: ProtobufExtensions.SerializeToArray(Of RecordedEvent)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.RecordedEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime

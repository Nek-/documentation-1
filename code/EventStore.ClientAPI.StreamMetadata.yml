### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.StreamMetadata
  commentId: T:EventStore.ClientAPI.StreamMetadata
  id: StreamMetadata
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.StreamMetadata.Acl
  - EventStore.ClientAPI.StreamMetadata.AsJsonBytes
  - EventStore.ClientAPI.StreamMetadata.AsJsonString
  - EventStore.ClientAPI.StreamMetadata.Build
  - EventStore.ClientAPI.StreamMetadata.CacheControl
  - EventStore.ClientAPI.StreamMetadata.Copy
  - EventStore.ClientAPI.StreamMetadata.Create(System.Nullable{System.Int64},System.Nullable{TimeSpan},System.Nullable{System.Int64},System.Nullable{TimeSpan},EventStore.ClientAPI.StreamAcl)
  - EventStore.ClientAPI.StreamMetadata.CustomKeys
  - EventStore.ClientAPI.StreamMetadata.CustomMetadataAsRawJsons
  - EventStore.ClientAPI.StreamMetadata.FromJsonBytes(System.Byte[])
  - EventStore.ClientAPI.StreamMetadata.GetValue``1(System.String)
  - EventStore.ClientAPI.StreamMetadata.GetValueAsRawJsonString(System.String)
  - EventStore.ClientAPI.StreamMetadata.MaxAge
  - EventStore.ClientAPI.StreamMetadata.MaxCount
  - EventStore.ClientAPI.StreamMetadata.TruncateBefore
  - EventStore.ClientAPI.StreamMetadata.TryGetValue``1(System.String,``0@)
  - EventStore.ClientAPI.StreamMetadata.TryGetValueAsRawJsonString(System.String,System.String@)
  langs:
  - csharp
  - vb
  name: StreamMetadata
  nameWithType: StreamMetadata
  fullName: EventStore.ClientAPI.StreamMetadata
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: StreamMetadata
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 16
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nA class representing stream metadata with strongly typed properties\nfor system values and a dictionary-like interface for custom values.\n"
  example: []
  syntax:
    content: 'public class StreamMetadata : object'
    content.vb: >-
      Public Class StreamMetadata

          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.ClientAPI.StreamMetadata.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.StreamMetadata.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.StreamMetadata.MaxCount
  commentId: F:EventStore.ClientAPI.StreamMetadata.MaxCount
  id: MaxCount
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: MaxCount
  nameWithType: StreamMetadata.MaxCount
  fullName: EventStore.ClientAPI.StreamMetadata.MaxCount
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MaxCount
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 21
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe maximum number of events allowed in the stream.\n"
  example: []
  syntax:
    content: public readonly long ? MaxCount
    return:
      type: System.Nullable{System.Int64}
    content.vb: Public ReadOnly MaxCount As Long?
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.StreamMetadata.MaxAge
  commentId: F:EventStore.ClientAPI.StreamMetadata.MaxAge
  id: MaxAge
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: MaxAge
  nameWithType: StreamMetadata.MaxAge
  fullName: EventStore.ClientAPI.StreamMetadata.MaxAge
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MaxAge
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 25
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe maximum age of events allowed in the stream.\n"
  example: []
  syntax:
    content: public readonly TimeSpan? MaxAge
    return:
      type: System.Nullable{TimeSpan}
    content.vb: Public ReadOnly MaxAge As TimeSpan?
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.StreamMetadata.TruncateBefore
  commentId: F:EventStore.ClientAPI.StreamMetadata.TruncateBefore
  id: TruncateBefore
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: TruncateBefore
  nameWithType: StreamMetadata.TruncateBefore
  fullName: EventStore.ClientAPI.StreamMetadata.TruncateBefore
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TruncateBefore
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 30
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe event number from which previous events can be scavenged.\nThis is used to implement soft-deletion of streams.\n"
  example: []
  syntax:
    content: public readonly long ? TruncateBefore
    return:
      type: System.Nullable{System.Int64}
    content.vb: Public ReadOnly TruncateBefore As Long?
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.StreamMetadata.CacheControl
  commentId: F:EventStore.ClientAPI.StreamMetadata.CacheControl
  id: CacheControl
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: CacheControl
  nameWithType: StreamMetadata.CacheControl
  fullName: EventStore.ClientAPI.StreamMetadata.CacheControl
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CacheControl
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 34
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe amount of time for which the stream head is cachable.\n"
  example: []
  syntax:
    content: public readonly TimeSpan? CacheControl
    return:
      type: System.Nullable{TimeSpan}
    content.vb: Public ReadOnly CacheControl As TimeSpan?
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.StreamMetadata.Acl
  commentId: F:EventStore.ClientAPI.StreamMetadata.Acl
  id: Acl
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: Acl
  nameWithType: StreamMetadata.Acl
  fullName: EventStore.ClientAPI.StreamMetadata.Acl
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Acl
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 38
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe access control list for the stream.\n"
  example: []
  syntax:
    content: public readonly StreamAcl Acl
    return:
      type: EventStore.ClientAPI.StreamAcl
    content.vb: Public ReadOnly Acl As StreamAcl
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.StreamMetadata.CustomKeys
  commentId: P:EventStore.ClientAPI.StreamMetadata.CustomKeys
  id: CustomKeys
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: CustomKeys
  nameWithType: StreamMetadata.CustomKeys
  fullName: EventStore.ClientAPI.StreamMetadata.CustomKeys
  type: Property
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CustomKeys
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 43
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAn enumerable of the keys in the user-provided metadata.\n"
  example: []
  syntax:
    content: public IEnumerable<string> CustomKeys { get; }
    parameters: []
    return:
      type: IEnumerable{System.String}
    content.vb: Public ReadOnly Property CustomKeys As IEnumerable(Of String)
  overload: EventStore.ClientAPI.StreamMetadata.CustomKeys*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.StreamMetadata.CustomMetadataAsRawJsons
  commentId: P:EventStore.ClientAPI.StreamMetadata.CustomMetadataAsRawJsons
  id: CustomMetadataAsRawJsons
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: CustomMetadataAsRawJsons
  nameWithType: StreamMetadata.CustomMetadataAsRawJsons
  fullName: EventStore.ClientAPI.StreamMetadata.CustomMetadataAsRawJsons
  type: Property
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CustomMetadataAsRawJsons
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 47
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAn enumerable of key-value pairs of keys to JSON text for user-provider metadata.\n"
  example: []
  syntax:
    content: public IEnumerable<KeyValuePair<string, string>> CustomMetadataAsRawJsons { get; }
    parameters: []
    return:
      type: IEnumerable{KeyValuePair{System.String,System.String}}
    content.vb: Public ReadOnly Property CustomMetadataAsRawJsons As IEnumerable(Of KeyValuePair(Of String, String))
  overload: EventStore.ClientAPI.StreamMetadata.CustomMetadataAsRawJsons*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.StreamMetadata.Create(System.Nullable{System.Int64},System.Nullable{TimeSpan},System.Nullable{System.Int64},System.Nullable{TimeSpan},EventStore.ClientAPI.StreamAcl)
  commentId: M:EventStore.ClientAPI.StreamMetadata.Create(System.Nullable{System.Int64},System.Nullable{TimeSpan},System.Nullable{System.Int64},System.Nullable{TimeSpan},EventStore.ClientAPI.StreamAcl)
  id: Create(System.Nullable{System.Int64},System.Nullable{TimeSpan},System.Nullable{System.Int64},System.Nullable{TimeSpan},EventStore.ClientAPI.StreamAcl)
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: Create(Nullable<Int64>, Nullable<TimeSpan>, Nullable<Int64>, Nullable<TimeSpan>, StreamAcl)
  nameWithType: StreamMetadata.Create(Nullable<Int64>, Nullable<TimeSpan>, Nullable<Int64>, Nullable<TimeSpan>, StreamAcl)
  fullName: EventStore.ClientAPI.StreamMetadata.Create(System.Nullable<System.Int64>, System.Nullable<TimeSpan>, System.Nullable<System.Int64>, System.Nullable<TimeSpan>, EventStore.ClientAPI.StreamAcl)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Create
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 84
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a <xref href=\"EventStore.ClientAPI.StreamMetadata\" data-throw-if-not-resolved=\"false\"></xref> with the specified parameters.\n"
  example: []
  syntax:
    content: public static StreamMetadata Create(long ? maxCount = null, TimeSpan? maxAge = null, long ? truncateBefore = null, TimeSpan? cacheControl = null, StreamAcl acl = null)
    parameters:
    - id: maxCount
      type: System.Nullable{System.Int64}
      description: The maximum number of events allowed in the stream.
    - id: maxAge
      type: System.Nullable{TimeSpan}
      description: The maximum age of events allowed in the stream.
    - id: truncateBefore
      type: System.Nullable{System.Int64}
      description: The event number from which previous events can be scavenged.
    - id: cacheControl
      type: System.Nullable{TimeSpan}
      description: The amount of time for which the stream head is cachable.
    - id: acl
      type: EventStore.ClientAPI.StreamAcl
      description: The access control list for the stream.
    return:
      type: EventStore.ClientAPI.StreamMetadata
      description: ''
    content.vb: Public Shared Function Create(maxCount As Long? = Nothing, maxAge As TimeSpan? = Nothing, truncateBefore As Long? = Nothing, cacheControl As TimeSpan? = Nothing, acl As StreamAcl = Nothing) As StreamMetadata
  overload: EventStore.ClientAPI.StreamMetadata.Create*
  nameWithType.vb: StreamMetadata.Create(Nullable(Of Int64), Nullable(Of TimeSpan), Nullable(Of Int64), Nullable(Of TimeSpan), StreamAcl)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.ClientAPI.StreamMetadata.Create(System.Nullable(Of System.Int64), System.Nullable(Of TimeSpan), System.Nullable(Of System.Int64), System.Nullable(Of TimeSpan), EventStore.ClientAPI.StreamAcl)
  name.vb: Create(Nullable(Of Int64), Nullable(Of TimeSpan), Nullable(Of Int64), Nullable(Of TimeSpan), StreamAcl)
- uid: EventStore.ClientAPI.StreamMetadata.Build
  commentId: M:EventStore.ClientAPI.StreamMetadata.Build
  id: Build
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: Build()
  nameWithType: StreamMetadata.Build()
  fullName: EventStore.ClientAPI.StreamMetadata.Build()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Build
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 93
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a <xref href=\"EventStore.ClientAPI.StreamMetadataBuilder\" data-throw-if-not-resolved=\"false\"></xref> for building a new <xref href=\"EventStore.ClientAPI.StreamMetadata\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static StreamMetadataBuilder Build()
    return:
      type: EventStore.ClientAPI.StreamMetadataBuilder
      description: An instance of <xref href="EventStore.ClientAPI.StreamMetadataBuilder" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function Build As StreamMetadataBuilder
  overload: EventStore.ClientAPI.StreamMetadata.Build*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.ClientAPI.StreamMetadata.Copy
  commentId: M:EventStore.ClientAPI.StreamMetadata.Copy
  id: Copy
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: Copy()
  nameWithType: StreamMetadata.Copy()
  fullName: EventStore.ClientAPI.StreamMetadata.Copy()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Copy
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 102
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a <xref href=\"EventStore.ClientAPI.StreamMetadataBuilder\" data-throw-if-not-resolved=\"false\"></xref> initialized with the values of this <xref href=\"EventStore.ClientAPI.StreamMetadata\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public StreamMetadataBuilder Copy()
    return:
      type: EventStore.ClientAPI.StreamMetadataBuilder
      description: An instance of <xref href="EventStore.ClientAPI.StreamMetadataBuilder" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Copy As StreamMetadataBuilder
  overload: EventStore.ClientAPI.StreamMetadata.Copy*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.StreamMetadata.GetValue``1(System.String)
  commentId: M:EventStore.ClientAPI.StreamMetadata.GetValue``1(System.String)
  id: GetValue``1(System.String)
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: GetValue<T>(String)
  nameWithType: StreamMetadata.GetValue<T>(String)
  fullName: EventStore.ClientAPI.StreamMetadata.GetValue<T>(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetValue
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 132
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nGet a value of type T for the given key from the custom metadata.\nThis method will throw an <see cref=\"!:ArgumentException\"></see> if the\nkey is not found.\n"
  example: []
  syntax:
    content: public T GetValue<T>(string key)
    parameters:
    - id: key
      type: System.String
      description: A key.
    typeParameters:
    - id: T
      description: The type of the value.
    return:
      type: '{T}'
      description: Value of type T for the key.
    content.vb: Public Function GetValue(Of T)(key As String) As T
  overload: EventStore.ClientAPI.StreamMetadata.GetValue*
  nameWithType.vb: StreamMetadata.GetValue(Of T)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.StreamMetadata.GetValue(Of T)(System.String)
  name.vb: GetValue(Of T)(String)
- uid: EventStore.ClientAPI.StreamMetadata.TryGetValue``1(System.String,``0@)
  commentId: M:EventStore.ClientAPI.StreamMetadata.TryGetValue``1(System.String,``0@)
  id: TryGetValue``1(System.String,``0@)
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: TryGetValue<T>(String, out T)
  nameWithType: StreamMetadata.TryGetValue<T>(String, out T)
  fullName: EventStore.ClientAPI.StreamMetadata.TryGetValue<T>(System.String, out T)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TryGetValue
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 149
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nTries to get a value of type T for the given key from the custom\nmetadata, and if it exists returns true from the method and gives\nthe value as an out parameter.\n"
  example: []
  syntax:
    content: public bool TryGetValue<T>(string key, out T value)
    parameters:
    - id: key
      type: System.String
      description: A key.
    - id: value
      type: '{T}'
      description: Output variable for the value of type T for the key.
    typeParameters:
    - id: T
      description: The type of the value.
    return:
      type: System.Boolean
      description: True if the key exists, false otherwise.
    content.vb: Public Function TryGetValue(Of T)(key As String, ByRef value As T) As Boolean
  overload: EventStore.ClientAPI.StreamMetadata.TryGetValue*
  nameWithType.vb: StreamMetadata.TryGetValue(Of T)(String, ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.StreamMetadata.TryGetValue(Of T)(System.String, ByRef T)
  name.vb: TryGetValue(Of T)(String, ByRef T)
- uid: EventStore.ClientAPI.StreamMetadata.GetValueAsRawJsonString(System.String)
  commentId: M:EventStore.ClientAPI.StreamMetadata.GetValueAsRawJsonString(System.String)
  id: GetValueAsRawJsonString(System.String)
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: GetValueAsRawJsonString(String)
  nameWithType: StreamMetadata.GetValueAsRawJsonString(String)
  fullName: EventStore.ClientAPI.StreamMetadata.GetValueAsRawJsonString(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetValueAsRawJsonString
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 170
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nGets a string containing raw JSON value for the given key.\n"
  example: []
  syntax:
    content: public string GetValueAsRawJsonString(string key)
    parameters:
    - id: key
      type: System.String
      description: A key.
    return:
      type: System.String
      description: String containing raw JSON value for the key.
    content.vb: Public Function GetValueAsRawJsonString(key As String) As String
  overload: EventStore.ClientAPI.StreamMetadata.GetValueAsRawJsonString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.StreamMetadata.TryGetValueAsRawJsonString(System.String,System.String@)
  commentId: M:EventStore.ClientAPI.StreamMetadata.TryGetValueAsRawJsonString(System.String,System.String@)
  id: TryGetValueAsRawJsonString(System.String,System.String@)
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: TryGetValueAsRawJsonString(String, out String)
  nameWithType: StreamMetadata.TryGetValueAsRawJsonString(String, out String)
  fullName: EventStore.ClientAPI.StreamMetadata.TryGetValueAsRawJsonString(System.String, out System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TryGetValueAsRawJsonString
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 184
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nTries to get a string containing raw JSON value for the given key.\n"
  example: []
  syntax:
    content: public bool TryGetValueAsRawJsonString(string key, out string value)
    parameters:
    - id: key
      type: System.String
      description: A key.
    - id: value
      type: System.String
      description: Output variable for the value for the key.
    return:
      type: System.Boolean
      description: True if the key exists, false otherwise.
    content.vb: Public Function TryGetValueAsRawJsonString(key As String, ByRef value As String) As Boolean
  overload: EventStore.ClientAPI.StreamMetadata.TryGetValueAsRawJsonString*
  nameWithType.vb: StreamMetadata.TryGetValueAsRawJsonString(String, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.StreamMetadata.TryGetValueAsRawJsonString(System.String, ByRef System.String)
  name.vb: TryGetValueAsRawJsonString(String, ByRef String)
- uid: EventStore.ClientAPI.StreamMetadata.AsJsonBytes
  commentId: M:EventStore.ClientAPI.StreamMetadata.AsJsonBytes
  id: AsJsonBytes
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: AsJsonBytes()
  nameWithType: StreamMetadata.AsJsonBytes()
  fullName: EventStore.ClientAPI.StreamMetadata.AsJsonBytes()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AsJsonBytes
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 204
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nReturns a byte array representing the stream metadata\nas JSON encoded as UTF8 with no byte order mark.\n"
  example: []
  syntax:
    content: public byte[] AsJsonBytes()
    return:
      type: System.Byte[]
      description: Byte array representing the stream metadata.
    content.vb: Public Function AsJsonBytes As Byte()
  overload: EventStore.ClientAPI.StreamMetadata.AsJsonBytes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.StreamMetadata.AsJsonString
  commentId: M:EventStore.ClientAPI.StreamMetadata.AsJsonString
  id: AsJsonString
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: AsJsonString()
  nameWithType: StreamMetadata.AsJsonString()
  fullName: EventStore.ClientAPI.StreamMetadata.AsJsonString()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AsJsonString
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 220
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nReturns a JSON string representing the stream metadata.\n"
  example: []
  syntax:
    content: public string AsJsonString()
    return:
      type: System.String
      description: A string representing the stream metadata.
    content.vb: Public Function AsJsonString As String
  overload: EventStore.ClientAPI.StreamMetadata.AsJsonString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.StreamMetadata.FromJsonBytes(System.Byte[])
  commentId: M:EventStore.ClientAPI.StreamMetadata.FromJsonBytes(System.Byte[])
  id: FromJsonBytes(System.Byte[])
  parent: EventStore.ClientAPI.StreamMetadata
  langs:
  - csharp
  - vb
  name: FromJsonBytes(Byte[])
  nameWithType: StreamMetadata.FromJsonBytes(Byte[])
  fullName: EventStore.ClientAPI.StreamMetadata.FromJsonBytes(System.Byte[])
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadata.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: FromJsonBytes
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadata.cs
    startLine: 302
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nBuilds a <xref href=\"EventStore.ClientAPI.StreamMetadata\" data-throw-if-not-resolved=\"false\"></xref> object from a byte array\ncontaining stream metadata.\n"
  example: []
  syntax:
    content: public static StreamMetadata FromJsonBytes(byte[] json)
    parameters:
    - id: json
      type: System.Byte[]
      description: ''
    return:
      type: EventStore.ClientAPI.StreamMetadata
      description: ''
    content.vb: Public Shared Function FromJsonBytes(json As Byte()) As StreamMetadata
  overload: EventStore.ClientAPI.StreamMetadata.FromJsonBytes*
  nameWithType.vb: StreamMetadata.FromJsonBytes(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.ClientAPI.StreamMetadata.FromJsonBytes(System.Byte())
  name.vb: FromJsonBytes(Byte())
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.StreamMetadata.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<StreamMetadata>()
  nameWithType: ProtobufExtensions.Serialize<StreamMetadata>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.StreamMetadata>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of StreamMetadata)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.StreamMetadata)()
  name.vb: Serialize(Of StreamMetadata)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<StreamMetadata>
    nameWithType: ProtobufExtensions.Serialize<StreamMetadata>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.StreamMetadata>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of StreamMetadata)
    nameWithType: ProtobufExtensions.Serialize(Of StreamMetadata)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.StreamMetadata)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.StreamMetadata.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<StreamMetadata>()
  nameWithType: ProtobufExtensions.SerializeToArray<StreamMetadata>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.StreamMetadata>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of StreamMetadata)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.StreamMetadata)()
  name.vb: SerializeToArray(Of StreamMetadata)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<StreamMetadata>
    nameWithType: ProtobufExtensions.SerializeToArray<StreamMetadata>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.StreamMetadata>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of StreamMetadata)
    nameWithType: ProtobufExtensions.SerializeToArray(Of StreamMetadata)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.StreamMetadata)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{TimeSpan}
  commentId: '!:System.Nullable{TimeSpan}'
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.StreamAcl
  commentId: T:EventStore.ClientAPI.StreamAcl
  parent: EventStore.ClientAPI
  isExternal: false
  name: StreamAcl
  nameWithType: StreamAcl
  fullName: EventStore.ClientAPI.StreamAcl
- uid: EventStore.ClientAPI.StreamMetadata.CustomKeys*
  commentId: Overload:EventStore.ClientAPI.StreamMetadata.CustomKeys
  isExternal: false
  name: CustomKeys
  nameWithType: StreamMetadata.CustomKeys
  fullName: EventStore.ClientAPI.StreamMetadata.CustomKeys
- uid: IEnumerable{System.String}
  commentId: '!:IEnumerable{System.String}'
  definition: IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.StreamMetadata.CustomMetadataAsRawJsons*
  commentId: Overload:EventStore.ClientAPI.StreamMetadata.CustomMetadataAsRawJsons
  isExternal: false
  name: CustomMetadataAsRawJsons
  nameWithType: StreamMetadata.CustomMetadataAsRawJsons
  fullName: EventStore.ClientAPI.StreamMetadata.CustomMetadataAsRawJsons
- uid: IEnumerable{KeyValuePair{System.String,System.String}}
  commentId: '!:IEnumerable{KeyValuePair{System.String,System.String}}'
  definition: IEnumerable`1
  name: IEnumerable<KeyValuePair<String, String>>
  nameWithType: IEnumerable<KeyValuePair<String, String>>
  fullName: IEnumerable<KeyValuePair<System.String, System.String>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, String))
  fullName.vb: IEnumerable(Of KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerable(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.StreamMetadata
  commentId: T:EventStore.ClientAPI.StreamMetadata
  parent: EventStore.ClientAPI
  isExternal: false
  name: StreamMetadata
  nameWithType: StreamMetadata
  fullName: EventStore.ClientAPI.StreamMetadata
- uid: EventStore.ClientAPI.StreamMetadata.Create*
  commentId: Overload:EventStore.ClientAPI.StreamMetadata.Create
  isExternal: false
  name: Create
  nameWithType: StreamMetadata.Create
  fullName: EventStore.ClientAPI.StreamMetadata.Create
- uid: EventStore.ClientAPI.StreamMetadataBuilder
  commentId: T:EventStore.ClientAPI.StreamMetadataBuilder
  parent: EventStore.ClientAPI
  isExternal: false
  name: StreamMetadataBuilder
  nameWithType: StreamMetadataBuilder
  fullName: EventStore.ClientAPI.StreamMetadataBuilder
- uid: EventStore.ClientAPI.StreamMetadata.Build*
  commentId: Overload:EventStore.ClientAPI.StreamMetadata.Build
  isExternal: false
  name: Build
  nameWithType: StreamMetadata.Build
  fullName: EventStore.ClientAPI.StreamMetadata.Build
- uid: EventStore.ClientAPI.StreamMetadata.Copy*
  commentId: Overload:EventStore.ClientAPI.StreamMetadata.Copy
  isExternal: false
  name: Copy
  nameWithType: StreamMetadata.Copy
  fullName: EventStore.ClientAPI.StreamMetadata.Copy
- uid: EventStore.ClientAPI.StreamMetadata.GetValue*
  commentId: Overload:EventStore.ClientAPI.StreamMetadata.GetValue
  isExternal: false
  name: GetValue
  nameWithType: StreamMetadata.GetValue
  fullName: EventStore.ClientAPI.StreamMetadata.GetValue
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.ClientAPI.StreamMetadata.TryGetValue*
  commentId: Overload:EventStore.ClientAPI.StreamMetadata.TryGetValue
  isExternal: false
  name: TryGetValue
  nameWithType: StreamMetadata.TryGetValue
  fullName: EventStore.ClientAPI.StreamMetadata.TryGetValue
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.ClientAPI.StreamMetadata.GetValueAsRawJsonString*
  commentId: Overload:EventStore.ClientAPI.StreamMetadata.GetValueAsRawJsonString
  isExternal: false
  name: GetValueAsRawJsonString
  nameWithType: StreamMetadata.GetValueAsRawJsonString
  fullName: EventStore.ClientAPI.StreamMetadata.GetValueAsRawJsonString
- uid: EventStore.ClientAPI.StreamMetadata.TryGetValueAsRawJsonString*
  commentId: Overload:EventStore.ClientAPI.StreamMetadata.TryGetValueAsRawJsonString
  isExternal: false
  name: TryGetValueAsRawJsonString
  nameWithType: StreamMetadata.TryGetValueAsRawJsonString
  fullName: EventStore.ClientAPI.StreamMetadata.TryGetValueAsRawJsonString
- uid: EventStore.ClientAPI.StreamMetadata.AsJsonBytes*
  commentId: Overload:EventStore.ClientAPI.StreamMetadata.AsJsonBytes
  isExternal: false
  name: AsJsonBytes
  nameWithType: StreamMetadata.AsJsonBytes
  fullName: EventStore.ClientAPI.StreamMetadata.AsJsonBytes
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.ClientAPI.StreamMetadata.AsJsonString*
  commentId: Overload:EventStore.ClientAPI.StreamMetadata.AsJsonString
  isExternal: false
  name: AsJsonString
  nameWithType: StreamMetadata.AsJsonString
  fullName: EventStore.ClientAPI.StreamMetadata.AsJsonString
- uid: EventStore.ClientAPI.StreamMetadata.FromJsonBytes*
  commentId: Overload:EventStore.ClientAPI.StreamMetadata.FromJsonBytes
  isExternal: false
  name: FromJsonBytes
  nameWithType: StreamMetadata.FromJsonBytes
  fullName: EventStore.ClientAPI.StreamMetadata.FromJsonBytes

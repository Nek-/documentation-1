### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.StreamMetadataResult
  commentId: T:EventStore.ClientAPI.StreamMetadataResult
  id: StreamMetadataResult
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.StreamMetadataResult.#ctor(System.String,System.Boolean,System.Int64,EventStore.ClientAPI.StreamMetadata)
  - EventStore.ClientAPI.StreamMetadataResult.IsStreamDeleted
  - EventStore.ClientAPI.StreamMetadataResult.MetastreamVersion
  - EventStore.ClientAPI.StreamMetadataResult.Stream
  - EventStore.ClientAPI.StreamMetadataResult.StreamMetadata
  langs:
  - csharp
  - vb
  name: StreamMetadataResult
  nameWithType: StreamMetadataResult
  fullName: EventStore.ClientAPI.StreamMetadataResult
  type: Struct
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadataResult.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: StreamMetadataResult
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadataResult.cs
    startLine: 8
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRepresents stream metadata as a series of properties for system\ndata and a <xref href=\"EventStore.ClientAPI.StreamMetadataResult.StreamMetadata\" data-throw-if-not-resolved=\"false\"></xref> object for user metadata.\n"
  example: []
  syntax:
    content: public struct StreamMetadataResult
    content.vb: Public Structure StreamMetadataResult
  extensionMethods:
  - EventStore.ClientAPI.StreamMetadataResult.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  - EventStore.ClientAPI.StreamMetadataResult.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.StreamMetadataResult.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: EventStore.ClientAPI.StreamMetadataResult.Stream
  commentId: F:EventStore.ClientAPI.StreamMetadataResult.Stream
  id: Stream
  parent: EventStore.ClientAPI.StreamMetadataResult
  langs:
  - csharp
  - vb
  name: Stream
  nameWithType: StreamMetadataResult.Stream
  fullName: EventStore.ClientAPI.StreamMetadataResult.Stream
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadataResult.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Stream
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadataResult.cs
    startLine: 13
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe name of the stream.\n"
  example: []
  syntax:
    content: public readonly string Stream
    return:
      type: System.String
    content.vb: Public ReadOnly Stream As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.StreamMetadataResult.IsStreamDeleted
  commentId: F:EventStore.ClientAPI.StreamMetadataResult.IsStreamDeleted
  id: IsStreamDeleted
  parent: EventStore.ClientAPI.StreamMetadataResult
  langs:
  - csharp
  - vb
  name: IsStreamDeleted
  nameWithType: StreamMetadataResult.IsStreamDeleted
  fullName: EventStore.ClientAPI.StreamMetadataResult.IsStreamDeleted
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadataResult.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IsStreamDeleted
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadataResult.cs
    startLine: 17
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nTrue if the stream is soft-deleted.\n"
  example: []
  syntax:
    content: public readonly bool IsStreamDeleted
    return:
      type: System.Boolean
    content.vb: Public ReadOnly IsStreamDeleted As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.StreamMetadataResult.MetastreamVersion
  commentId: F:EventStore.ClientAPI.StreamMetadataResult.MetastreamVersion
  id: MetastreamVersion
  parent: EventStore.ClientAPI.StreamMetadataResult
  langs:
  - csharp
  - vb
  name: MetastreamVersion
  nameWithType: StreamMetadataResult.MetastreamVersion
  fullName: EventStore.ClientAPI.StreamMetadataResult.MetastreamVersion
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadataResult.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MetastreamVersion
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadataResult.cs
    startLine: 21
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe version of the metadata format.\n"
  example: []
  syntax:
    content: public readonly long MetastreamVersion
    return:
      type: System.Int64
    content.vb: Public ReadOnly MetastreamVersion As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.StreamMetadataResult.StreamMetadata
  commentId: F:EventStore.ClientAPI.StreamMetadataResult.StreamMetadata
  id: StreamMetadata
  parent: EventStore.ClientAPI.StreamMetadataResult
  langs:
  - csharp
  - vb
  name: StreamMetadata
  nameWithType: StreamMetadataResult.StreamMetadata
  fullName: EventStore.ClientAPI.StreamMetadataResult.StreamMetadata
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadataResult.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: StreamMetadata
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadataResult.cs
    startLine: 25
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nA <xref href=\"EventStore.ClientAPI.StreamMetadataResult.StreamMetadata\" data-throw-if-not-resolved=\"false\"></xref> containing user-specified metadata.\n"
  example: []
  syntax:
    content: public readonly StreamMetadata StreamMetadata
    return:
      type: EventStore.ClientAPI.StreamMetadata
    content.vb: Public ReadOnly StreamMetadata As StreamMetadata
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.StreamMetadataResult.#ctor(System.String,System.Boolean,System.Int64,EventStore.ClientAPI.StreamMetadata)
  commentId: M:EventStore.ClientAPI.StreamMetadataResult.#ctor(System.String,System.Boolean,System.Int64,EventStore.ClientAPI.StreamMetadata)
  id: '#ctor(System.String,System.Boolean,System.Int64,EventStore.ClientAPI.StreamMetadata)'
  parent: EventStore.ClientAPI.StreamMetadataResult
  langs:
  - csharp
  - vb
  name: StreamMetadataResult(String, Boolean, Int64, StreamMetadata)
  nameWithType: StreamMetadataResult.StreamMetadataResult(String, Boolean, Int64, StreamMetadata)
  fullName: EventStore.ClientAPI.StreamMetadataResult.StreamMetadataResult(System.String, System.Boolean, System.Int64, EventStore.ClientAPI.StreamMetadata)
  type: Constructor
  source:
    remote:
      path: src/EventStore.ClientAPI/StreamMetadataResult.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.ClientAPI/StreamMetadataResult.cs
    startLine: 34
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConstructs a new instance of <xref href=\"EventStore.ClientAPI.StreamMetadataResult\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public StreamMetadataResult(string stream, bool isStreamDeleted, long metastreamVersion, StreamMetadata streamMetadata)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream.
    - id: isStreamDeleted
      type: System.Boolean
      description: True if the stream is soft-deleted.
    - id: metastreamVersion
      type: System.Int64
      description: The version of the metadata format.
    - id: streamMetadata
      type: EventStore.ClientAPI.StreamMetadata
      description: A <xref href="EventStore.ClientAPI.StreamMetadataResult" data-throw-if-not-resolved="false"></xref> containing user-specified metadata.
    content.vb: Public Sub New(stream As String, isStreamDeleted As Boolean, metastreamVersion As Long, streamMetadata As StreamMetadata)
  overload: EventStore.ClientAPI.StreamMetadataResult.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI.StreamMetadataResult.StreamMetadata
  commentId: F:EventStore.ClientAPI.StreamMetadataResult.StreamMetadata
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  isExternal: false
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: EventStore.ClientAPI.StreamMetadataResult.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  parent: EventStore.Projections.Core.Utils.EnumExtensions
  definition: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<StreamMetadataResult>()
  nameWithType: EnumExtensions.EnumValueName<StreamMetadataResult>()
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.ClientAPI.StreamMetadataResult>()
  nameWithType.vb: EnumExtensions.EnumValueName(Of StreamMetadataResult)()
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.ClientAPI.StreamMetadataResult)()
  name.vb: EnumValueName(Of StreamMetadataResult)()
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName<StreamMetadataResult>
    nameWithType: EnumExtensions.EnumValueName<StreamMetadataResult>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.ClientAPI.StreamMetadataResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName(Of StreamMetadataResult)
    nameWithType: EnumExtensions.EnumValueName(Of StreamMetadataResult)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.ClientAPI.StreamMetadataResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.StreamMetadataResult.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<StreamMetadataResult>()
  nameWithType: ProtobufExtensions.Serialize<StreamMetadataResult>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.StreamMetadataResult>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of StreamMetadataResult)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.StreamMetadataResult)()
  name.vb: Serialize(Of StreamMetadataResult)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<StreamMetadataResult>
    nameWithType: ProtobufExtensions.Serialize<StreamMetadataResult>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.StreamMetadataResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of StreamMetadataResult)
    nameWithType: ProtobufExtensions.Serialize(Of StreamMetadataResult)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.StreamMetadataResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.StreamMetadataResult.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<StreamMetadataResult>()
  nameWithType: ProtobufExtensions.SerializeToArray<StreamMetadataResult>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.StreamMetadataResult>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of StreamMetadataResult)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.StreamMetadataResult)()
  name.vb: SerializeToArray(Of StreamMetadataResult)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<StreamMetadataResult>
    nameWithType: ProtobufExtensions.SerializeToArray<StreamMetadataResult>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.StreamMetadataResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of StreamMetadataResult)
    nameWithType: ProtobufExtensions.SerializeToArray(Of StreamMetadataResult)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.StreamMetadataResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  isExternal: false
  name: EnumValueName<T>(T)
  nameWithType: EnumExtensions.EnumValueName<T>(T)
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>(T)
  nameWithType.vb: EnumExtensions.EnumValueName(Of T)(T)
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)(T)
  name.vb: EnumValueName(Of T)(T)
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName<T>
    nameWithType: EnumExtensions.EnumValueName<T>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName(Of T)
    nameWithType: EnumExtensions.EnumValueName(Of T)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions
  commentId: T:EventStore.Projections.Core.Utils.EnumExtensions
  parent: EventStore.Projections.Core.Utils
  isExternal: false
  name: EnumExtensions
  nameWithType: EnumExtensions
  fullName: EventStore.Projections.Core.Utils.EnumExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils
  commentId: N:EventStore.Projections.Core.Utils
  isExternal: false
  name: EventStore.Projections.Core.Utils
  nameWithType: EventStore.Projections.Core.Utils
  fullName: EventStore.Projections.Core.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.ClientAPI.StreamMetadata
  commentId: T:EventStore.ClientAPI.StreamMetadata
  parent: EventStore.ClientAPI
  isExternal: false
  name: StreamMetadata
  nameWithType: StreamMetadata
  fullName: EventStore.ClientAPI.StreamMetadata
- uid: EventStore.ClientAPI.StreamMetadataResult
  commentId: T:EventStore.ClientAPI.StreamMetadataResult
  isExternal: false
  name: StreamMetadataResult
  nameWithType: StreamMetadataResult
  fullName: EventStore.ClientAPI.StreamMetadataResult
- uid: EventStore.ClientAPI.StreamMetadataResult.#ctor*
  commentId: Overload:EventStore.ClientAPI.StreamMetadataResult.#ctor
  isExternal: false
  name: StreamMetadataResult
  nameWithType: StreamMetadataResult.StreamMetadataResult
  fullName: EventStore.ClientAPI.StreamMetadataResult.StreamMetadataResult

### YamlMime:ManagedReference
items:
- uid: EventStore.ClusterNode.Program
  commentId: T:EventStore.ClusterNode.Program
  id: Program
  parent: EventStore.ClusterNode
  children:
  - EventStore.ClusterNode.Program.Create(EventStore.ClusterNode.ClusterNodeOptions)
  - EventStore.ClusterNode.Program.GetComponentName(EventStore.ClusterNode.ClusterNodeOptions)
  - EventStore.ClusterNode.Program.GetLogsDirectory(EventStore.ClusterNode.ClusterNodeOptions)
  - EventStore.ClusterNode.Program.Main(System.String[])
  - EventStore.ClusterNode.Program.OnProgramExit
  - EventStore.ClusterNode.Program.PreInit(EventStore.ClusterNode.ClusterNodeOptions)
  - EventStore.ClusterNode.Program.Start
  - EventStore.ClusterNode.Program.Stop
  langs:
  - csharp
  - vb
  name: Program
  nameWithType: Program
  fullName: EventStore.ClusterNode.Program
  type: Class
  source:
    remote:
      path: src/EventStore.ClusterNode/Program.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Program
    path: ../EventStore/src/EventStore.ClusterNode/Program.cs
    startLine: 24
  assemblies:
  - EventStore.ClusterNode
  namespace: EventStore.ClusterNode
  syntax:
    content: 'public class Program : ProgramBase<ClusterNodeOptions>'
    content.vb: >-
      Public Class Program
          Inherits ProgramBase(Of ClusterNodeOptions)
  inheritance:
  - System.Object
  - EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  inheritedMembers:
  - EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Log
  - EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Run(System.String[])
  - EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.GetCertificateStoreLocation(System.String)
  - EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.GetCertificateStoreName(System.String)
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.ClusterNode.Program.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClusterNode.Program.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClusterNode.Program.Main(System.String[])
  commentId: M:EventStore.ClusterNode.Program.Main(System.String[])
  id: Main(System.String[])
  parent: EventStore.ClusterNode.Program
  langs:
  - csharp
  - vb
  name: Main(String[])
  nameWithType: Program.Main(String[])
  fullName: EventStore.ClusterNode.Program.Main(System.String[])
  type: Method
  source:
    remote:
      path: src/EventStore.ClusterNode/Program.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Main
    path: ../EventStore/src/EventStore.ClusterNode/Program.cs
    startLine: 30
  assemblies:
  - EventStore.ClusterNode
  namespace: EventStore.ClusterNode
  syntax:
    content: public static void Main(string[] args)
    parameters:
    - id: args
      type: System.String[]
    content.vb: Public Shared Sub Main(args As String())
  overload: EventStore.ClusterNode.Program.Main*
  nameWithType.vb: Program.Main(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.ClusterNode.Program.Main(System.String())
  name.vb: Main(String())
- uid: EventStore.ClusterNode.Program.GetLogsDirectory(EventStore.ClusterNode.ClusterNodeOptions)
  commentId: M:EventStore.ClusterNode.Program.GetLogsDirectory(EventStore.ClusterNode.ClusterNodeOptions)
  id: GetLogsDirectory(EventStore.ClusterNode.ClusterNodeOptions)
  parent: EventStore.ClusterNode.Program
  langs:
  - csharp
  - vb
  name: GetLogsDirectory(ClusterNodeOptions)
  nameWithType: Program.GetLogsDirectory(ClusterNodeOptions)
  fullName: EventStore.ClusterNode.Program.GetLogsDirectory(EventStore.ClusterNode.ClusterNodeOptions)
  type: Method
  source:
    remote:
      path: src/EventStore.ClusterNode/Program.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: GetLogsDirectory
    path: ../EventStore/src/EventStore.ClusterNode/Program.cs
    startLine: 39
  assemblies:
  - EventStore.ClusterNode
  namespace: EventStore.ClusterNode
  syntax:
    content: protected override string GetLogsDirectory(ClusterNodeOptions options)
    parameters:
    - id: options
      type: EventStore.ClusterNode.ClusterNodeOptions
    return:
      type: System.String
    content.vb: Protected Overrides Function GetLogsDirectory(options As ClusterNodeOptions) As String
  overridden: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.GetLogsDirectory(EventStore.ClusterNode.ClusterNodeOptions)
  overload: EventStore.ClusterNode.Program.GetLogsDirectory*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: EventStore.ClusterNode.Program.GetComponentName(EventStore.ClusterNode.ClusterNodeOptions)
  commentId: M:EventStore.ClusterNode.Program.GetComponentName(EventStore.ClusterNode.ClusterNodeOptions)
  id: GetComponentName(EventStore.ClusterNode.ClusterNodeOptions)
  parent: EventStore.ClusterNode.Program
  langs:
  - csharp
  - vb
  name: GetComponentName(ClusterNodeOptions)
  nameWithType: Program.GetComponentName(ClusterNodeOptions)
  fullName: EventStore.ClusterNode.Program.GetComponentName(EventStore.ClusterNode.ClusterNodeOptions)
  type: Method
  source:
    remote:
      path: src/EventStore.ClusterNode/Program.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: GetComponentName
    path: ../EventStore/src/EventStore.ClusterNode/Program.cs
    startLine: 44
  assemblies:
  - EventStore.ClusterNode
  namespace: EventStore.ClusterNode
  syntax:
    content: protected override string GetComponentName(ClusterNodeOptions options)
    parameters:
    - id: options
      type: EventStore.ClusterNode.ClusterNodeOptions
    return:
      type: System.String
    content.vb: Protected Overrides Function GetComponentName(options As ClusterNodeOptions) As String
  overridden: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.GetComponentName(EventStore.ClusterNode.ClusterNodeOptions)
  overload: EventStore.ClusterNode.Program.GetComponentName*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: EventStore.ClusterNode.Program.PreInit(EventStore.ClusterNode.ClusterNodeOptions)
  commentId: M:EventStore.ClusterNode.Program.PreInit(EventStore.ClusterNode.ClusterNodeOptions)
  id: PreInit(EventStore.ClusterNode.ClusterNodeOptions)
  parent: EventStore.ClusterNode.Program
  langs:
  - csharp
  - vb
  name: PreInit(ClusterNodeOptions)
  nameWithType: Program.PreInit(ClusterNodeOptions)
  fullName: EventStore.ClusterNode.Program.PreInit(EventStore.ClusterNode.ClusterNodeOptions)
  type: Method
  source:
    remote:
      path: src/EventStore.ClusterNode/Program.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: PreInit
    path: ../EventStore/src/EventStore.ClusterNode/Program.cs
    startLine: 49
  assemblies:
  - EventStore.ClusterNode
  namespace: EventStore.ClusterNode
  syntax:
    content: protected override void PreInit(ClusterNodeOptions options)
    parameters:
    - id: options
      type: EventStore.ClusterNode.ClusterNodeOptions
    content.vb: Protected Overrides Sub PreInit(options As ClusterNodeOptions)
  overridden: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.PreInit(EventStore.ClusterNode.ClusterNodeOptions)
  overload: EventStore.ClusterNode.Program.PreInit*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: EventStore.ClusterNode.Program.Create(EventStore.ClusterNode.ClusterNodeOptions)
  commentId: M:EventStore.ClusterNode.Program.Create(EventStore.ClusterNode.ClusterNodeOptions)
  id: Create(EventStore.ClusterNode.ClusterNodeOptions)
  parent: EventStore.ClusterNode.Program
  langs:
  - csharp
  - vb
  name: Create(ClusterNodeOptions)
  nameWithType: Program.Create(ClusterNodeOptions)
  fullName: EventStore.ClusterNode.Program.Create(EventStore.ClusterNode.ClusterNodeOptions)
  type: Method
  source:
    remote:
      path: src/EventStore.ClusterNode/Program.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Create
    path: ../EventStore/src/EventStore.ClusterNode/Program.cs
    startLine: 83
  assemblies:
  - EventStore.ClusterNode
  namespace: EventStore.ClusterNode
  syntax:
    content: protected override void Create(ClusterNodeOptions opts)
    parameters:
    - id: opts
      type: EventStore.ClusterNode.ClusterNodeOptions
    content.vb: Protected Overrides Sub Create(opts As ClusterNodeOptions)
  overridden: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Create(EventStore.ClusterNode.ClusterNodeOptions)
  overload: EventStore.ClusterNode.Program.Create*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: EventStore.ClusterNode.Program.Start
  commentId: M:EventStore.ClusterNode.Program.Start
  id: Start
  parent: EventStore.ClusterNode.Program
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: Program.Start()
  fullName: EventStore.ClusterNode.Program.Start()
  type: Method
  source:
    remote:
      path: src/EventStore.ClusterNode/Program.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Start
    path: ../EventStore/src/EventStore.ClusterNode/Program.cs
    startLine: 392
  assemblies:
  - EventStore.ClusterNode
  namespace: EventStore.ClusterNode
  syntax:
    content: protected override void Start()
    content.vb: Protected Overrides Sub Start
  overridden: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Start
  overload: EventStore.ClusterNode.Program.Start*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: EventStore.ClusterNode.Program.Stop
  commentId: M:EventStore.ClusterNode.Program.Stop
  id: Stop
  parent: EventStore.ClusterNode.Program
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: Program.Stop()
  fullName: EventStore.ClusterNode.Program.Stop()
  type: Method
  source:
    remote:
      path: src/EventStore.ClusterNode/Program.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Stop
    path: ../EventStore/src/EventStore.ClusterNode/Program.cs
    startLine: 397
  assemblies:
  - EventStore.ClusterNode
  namespace: EventStore.ClusterNode
  syntax:
    content: public override void Stop()
    content.vb: Public Overrides Sub Stop
  overridden: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Stop
  overload: EventStore.ClusterNode.Program.Stop*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.ClusterNode.Program.OnProgramExit
  commentId: M:EventStore.ClusterNode.Program.OnProgramExit
  id: OnProgramExit
  parent: EventStore.ClusterNode.Program
  langs:
  - csharp
  - vb
  name: OnProgramExit()
  nameWithType: Program.OnProgramExit()
  fullName: EventStore.ClusterNode.Program.OnProgramExit()
  type: Method
  source:
    remote:
      path: src/EventStore.ClusterNode/Program.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: OnProgramExit
    path: ../EventStore/src/EventStore.ClusterNode/Program.cs
    startLine: 402
  assemblies:
  - EventStore.ClusterNode
  namespace: EventStore.ClusterNode
  syntax:
    content: protected override void OnProgramExit()
    content.vb: Protected Overrides Sub OnProgramExit
  overridden: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.OnProgramExit
  overload: EventStore.ClusterNode.Program.OnProgramExit*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: EventStore.ClusterNode
  commentId: N:EventStore.ClusterNode
  name: EventStore.ClusterNode
  nameWithType: EventStore.ClusterNode
  fullName: EventStore.ClusterNode
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  commentId: T:EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  parent: EventStore.Core
  definition: EventStore.Core.ProgramBase`1
  name: ProgramBase<ClusterNodeOptions>
  nameWithType: ProgramBase<ClusterNodeOptions>
  fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>
  nameWithType.vb: ProgramBase(Of ClusterNodeOptions)
  fullName.vb: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions)
  name.vb: ProgramBase(Of ClusterNodeOptions)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1
    name: ProgramBase
    nameWithType: ProgramBase
    fullName: EventStore.Core.ProgramBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClusterNode.ClusterNodeOptions
    name: ClusterNodeOptions
    nameWithType: ClusterNodeOptions
    fullName: EventStore.ClusterNode.ClusterNodeOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1
    name: ProgramBase
    nameWithType: ProgramBase
    fullName: EventStore.Core.ProgramBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClusterNode.ClusterNodeOptions
    name: ClusterNodeOptions
    nameWithType: ClusterNodeOptions
    fullName: EventStore.ClusterNode.ClusterNodeOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Log
  commentId: F:EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Log
  parent: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  definition: EventStore.Core.ProgramBase`1.Log
  name: Log
  nameWithType: ProgramBase<ClusterNodeOptions>.Log
  fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.Log
  nameWithType.vb: ProgramBase(Of ClusterNodeOptions).Log
  fullName.vb: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).Log
- uid: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Run(System.String[])
  commentId: M:EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Run(System.String[])
  parent: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  definition: EventStore.Core.ProgramBase`1.Run(System.String[])
  name: Run(String[])
  nameWithType: ProgramBase<ClusterNodeOptions>.Run(String[])
  fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.Run(System.String[])
  nameWithType.vb: ProgramBase(Of ClusterNodeOptions).Run(String())
  fullName.vb: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).Run(System.String())
  name.vb: Run(String())
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.Run(System.String[])
    name: Run
    nameWithType: ProgramBase<ClusterNodeOptions>.Run
    fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.Run
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.Run(System.String[])
    name: Run
    nameWithType: ProgramBase(Of ClusterNodeOptions).Run
    fullName: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).Run
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.GetCertificateStoreLocation(System.String)
  commentId: M:EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.GetCertificateStoreLocation(System.String)
  parent: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  definition: EventStore.Core.ProgramBase`1.GetCertificateStoreLocation(System.String)
  name: GetCertificateStoreLocation(String)
  nameWithType: ProgramBase<ClusterNodeOptions>.GetCertificateStoreLocation(String)
  fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.GetCertificateStoreLocation(System.String)
  nameWithType.vb: ProgramBase(Of ClusterNodeOptions).GetCertificateStoreLocation(String)
  fullName.vb: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).GetCertificateStoreLocation(System.String)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.GetCertificateStoreLocation(System.String)
    name: GetCertificateStoreLocation
    nameWithType: ProgramBase<ClusterNodeOptions>.GetCertificateStoreLocation
    fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.GetCertificateStoreLocation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.GetCertificateStoreLocation(System.String)
    name: GetCertificateStoreLocation
    nameWithType: ProgramBase(Of ClusterNodeOptions).GetCertificateStoreLocation
    fullName: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).GetCertificateStoreLocation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.GetCertificateStoreName(System.String)
  commentId: M:EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.GetCertificateStoreName(System.String)
  parent: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  definition: EventStore.Core.ProgramBase`1.GetCertificateStoreName(System.String)
  name: GetCertificateStoreName(String)
  nameWithType: ProgramBase<ClusterNodeOptions>.GetCertificateStoreName(String)
  fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.GetCertificateStoreName(System.String)
  nameWithType.vb: ProgramBase(Of ClusterNodeOptions).GetCertificateStoreName(String)
  fullName.vb: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).GetCertificateStoreName(System.String)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.GetCertificateStoreName(System.String)
    name: GetCertificateStoreName
    nameWithType: ProgramBase<ClusterNodeOptions>.GetCertificateStoreName
    fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.GetCertificateStoreName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.GetCertificateStoreName(System.String)
    name: GetCertificateStoreName
    nameWithType: ProgramBase(Of ClusterNodeOptions).GetCertificateStoreName
    fullName: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).GetCertificateStoreName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClusterNode.Program.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<Program>()
  nameWithType: ProtobufExtensions.Serialize<Program>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClusterNode.Program>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of Program)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClusterNode.Program)()
  name.vb: Serialize(Of Program)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<Program>
    nameWithType: ProtobufExtensions.Serialize<Program>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClusterNode.Program>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of Program)
    nameWithType: ProtobufExtensions.Serialize(Of Program)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClusterNode.Program)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClusterNode.Program.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<Program>()
  nameWithType: ProtobufExtensions.SerializeToArray<Program>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClusterNode.Program>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of Program)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClusterNode.Program)()
  name.vb: SerializeToArray(Of Program)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<Program>
    nameWithType: ProtobufExtensions.SerializeToArray<Program>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClusterNode.Program>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of Program)
    nameWithType: ProtobufExtensions.SerializeToArray(Of Program)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClusterNode.Program)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase`1
  commentId: T:EventStore.Core.ProgramBase`1
  name: ProgramBase<TOptions>
  nameWithType: ProgramBase<TOptions>
  fullName: EventStore.Core.ProgramBase<TOptions>
  nameWithType.vb: ProgramBase(Of TOptions)
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions)
  name.vb: ProgramBase(Of TOptions)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1
    name: ProgramBase
    nameWithType: ProgramBase
    fullName: EventStore.Core.ProgramBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1
    name: ProgramBase
    nameWithType: ProgramBase
    fullName: EventStore.Core.ProgramBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core
  commentId: N:EventStore.Core
  name: EventStore.Core
  nameWithType: EventStore.Core
  fullName: EventStore.Core
- uid: EventStore.Core.ProgramBase`1.Log
  commentId: F:EventStore.Core.ProgramBase`1.Log
  name: Log
  nameWithType: ProgramBase<TOptions>.Log
  fullName: EventStore.Core.ProgramBase<TOptions>.Log
  nameWithType.vb: ProgramBase(Of TOptions).Log
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Log
- uid: EventStore.Core.ProgramBase`1.Run(System.String[])
  commentId: M:EventStore.Core.ProgramBase`1.Run(System.String[])
  isExternal: true
  name: Run(String[])
  nameWithType: ProgramBase<TOptions>.Run(String[])
  fullName: EventStore.Core.ProgramBase<TOptions>.Run(System.String[])
  nameWithType.vb: ProgramBase(Of TOptions).Run(String())
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Run(System.String())
  name.vb: Run(String())
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.Run(System.String[])
    name: Run
    nameWithType: ProgramBase<TOptions>.Run
    fullName: EventStore.Core.ProgramBase<TOptions>.Run
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.Run(System.String[])
    name: Run
    nameWithType: ProgramBase(Of TOptions).Run
    fullName: EventStore.Core.ProgramBase(Of TOptions).Run
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase`1.GetCertificateStoreLocation(System.String)
  commentId: M:EventStore.Core.ProgramBase`1.GetCertificateStoreLocation(System.String)
  isExternal: true
  name: GetCertificateStoreLocation(String)
  nameWithType: ProgramBase<TOptions>.GetCertificateStoreLocation(String)
  fullName: EventStore.Core.ProgramBase<TOptions>.GetCertificateStoreLocation(System.String)
  nameWithType.vb: ProgramBase(Of TOptions).GetCertificateStoreLocation(String)
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).GetCertificateStoreLocation(System.String)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.GetCertificateStoreLocation(System.String)
    name: GetCertificateStoreLocation
    nameWithType: ProgramBase<TOptions>.GetCertificateStoreLocation
    fullName: EventStore.Core.ProgramBase<TOptions>.GetCertificateStoreLocation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.GetCertificateStoreLocation(System.String)
    name: GetCertificateStoreLocation
    nameWithType: ProgramBase(Of TOptions).GetCertificateStoreLocation
    fullName: EventStore.Core.ProgramBase(Of TOptions).GetCertificateStoreLocation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase`1.GetCertificateStoreName(System.String)
  commentId: M:EventStore.Core.ProgramBase`1.GetCertificateStoreName(System.String)
  isExternal: true
  name: GetCertificateStoreName(String)
  nameWithType: ProgramBase<TOptions>.GetCertificateStoreName(String)
  fullName: EventStore.Core.ProgramBase<TOptions>.GetCertificateStoreName(System.String)
  nameWithType.vb: ProgramBase(Of TOptions).GetCertificateStoreName(String)
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).GetCertificateStoreName(System.String)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.GetCertificateStoreName(System.String)
    name: GetCertificateStoreName
    nameWithType: ProgramBase<TOptions>.GetCertificateStoreName
    fullName: EventStore.Core.ProgramBase<TOptions>.GetCertificateStoreName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.GetCertificateStoreName(System.String)
    name: GetCertificateStoreName
    nameWithType: ProgramBase(Of TOptions).GetCertificateStoreName
    fullName: EventStore.Core.ProgramBase(Of TOptions).GetCertificateStoreName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.ClusterNode.Program.Main*
  commentId: Overload:EventStore.ClusterNode.Program.Main
  name: Main
  nameWithType: Program.Main
  fullName: EventStore.ClusterNode.Program.Main
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.GetLogsDirectory(EventStore.ClusterNode.ClusterNodeOptions)
  commentId: M:EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.GetLogsDirectory(EventStore.ClusterNode.ClusterNodeOptions)
  parent: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  definition: EventStore.Core.ProgramBase`1.GetLogsDirectory(`0)
  name: GetLogsDirectory(ClusterNodeOptions)
  nameWithType: ProgramBase<ClusterNodeOptions>.GetLogsDirectory(ClusterNodeOptions)
  fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.GetLogsDirectory(EventStore.ClusterNode.ClusterNodeOptions)
  nameWithType.vb: ProgramBase(Of ClusterNodeOptions).GetLogsDirectory(ClusterNodeOptions)
  fullName.vb: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).GetLogsDirectory(EventStore.ClusterNode.ClusterNodeOptions)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.GetLogsDirectory(`0)
    name: GetLogsDirectory
    nameWithType: ProgramBase<ClusterNodeOptions>.GetLogsDirectory
    fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.GetLogsDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClusterNode.ClusterNodeOptions
    name: ClusterNodeOptions
    nameWithType: ClusterNodeOptions
    fullName: EventStore.ClusterNode.ClusterNodeOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.GetLogsDirectory(`0)
    name: GetLogsDirectory
    nameWithType: ProgramBase(Of ClusterNodeOptions).GetLogsDirectory
    fullName: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).GetLogsDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClusterNode.ClusterNodeOptions
    name: ClusterNodeOptions
    nameWithType: ClusterNodeOptions
    fullName: EventStore.ClusterNode.ClusterNodeOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClusterNode.Program.GetLogsDirectory*
  commentId: Overload:EventStore.ClusterNode.Program.GetLogsDirectory
  name: GetLogsDirectory
  nameWithType: Program.GetLogsDirectory
  fullName: EventStore.ClusterNode.Program.GetLogsDirectory
- uid: EventStore.ClusterNode.ClusterNodeOptions
  commentId: T:EventStore.ClusterNode.ClusterNodeOptions
  parent: EventStore.ClusterNode
  name: ClusterNodeOptions
  nameWithType: ClusterNodeOptions
  fullName: EventStore.ClusterNode.ClusterNodeOptions
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.ProgramBase`1.GetLogsDirectory(`0)
  commentId: M:EventStore.Core.ProgramBase`1.GetLogsDirectory(`0)
  name: GetLogsDirectory(TOptions)
  nameWithType: ProgramBase<TOptions>.GetLogsDirectory(TOptions)
  fullName: EventStore.Core.ProgramBase<TOptions>.GetLogsDirectory(TOptions)
  nameWithType.vb: ProgramBase(Of TOptions).GetLogsDirectory(TOptions)
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).GetLogsDirectory(TOptions)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.GetLogsDirectory(`0)
    name: GetLogsDirectory
    nameWithType: ProgramBase<TOptions>.GetLogsDirectory
    fullName: EventStore.Core.ProgramBase<TOptions>.GetLogsDirectory
  - name: (
    nameWithType: (
    fullName: (
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.GetLogsDirectory(`0)
    name: GetLogsDirectory
    nameWithType: ProgramBase(Of TOptions).GetLogsDirectory
    fullName: EventStore.Core.ProgramBase(Of TOptions).GetLogsDirectory
  - name: (
    nameWithType: (
    fullName: (
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.GetComponentName(EventStore.ClusterNode.ClusterNodeOptions)
  commentId: M:EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.GetComponentName(EventStore.ClusterNode.ClusterNodeOptions)
  parent: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  definition: EventStore.Core.ProgramBase`1.GetComponentName(`0)
  name: GetComponentName(ClusterNodeOptions)
  nameWithType: ProgramBase<ClusterNodeOptions>.GetComponentName(ClusterNodeOptions)
  fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.GetComponentName(EventStore.ClusterNode.ClusterNodeOptions)
  nameWithType.vb: ProgramBase(Of ClusterNodeOptions).GetComponentName(ClusterNodeOptions)
  fullName.vb: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).GetComponentName(EventStore.ClusterNode.ClusterNodeOptions)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.GetComponentName(`0)
    name: GetComponentName
    nameWithType: ProgramBase<ClusterNodeOptions>.GetComponentName
    fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.GetComponentName
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClusterNode.ClusterNodeOptions
    name: ClusterNodeOptions
    nameWithType: ClusterNodeOptions
    fullName: EventStore.ClusterNode.ClusterNodeOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.GetComponentName(`0)
    name: GetComponentName
    nameWithType: ProgramBase(Of ClusterNodeOptions).GetComponentName
    fullName: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).GetComponentName
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClusterNode.ClusterNodeOptions
    name: ClusterNodeOptions
    nameWithType: ClusterNodeOptions
    fullName: EventStore.ClusterNode.ClusterNodeOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClusterNode.Program.GetComponentName*
  commentId: Overload:EventStore.ClusterNode.Program.GetComponentName
  name: GetComponentName
  nameWithType: Program.GetComponentName
  fullName: EventStore.ClusterNode.Program.GetComponentName
- uid: EventStore.Core.ProgramBase`1.GetComponentName(`0)
  commentId: M:EventStore.Core.ProgramBase`1.GetComponentName(`0)
  name: GetComponentName(TOptions)
  nameWithType: ProgramBase<TOptions>.GetComponentName(TOptions)
  fullName: EventStore.Core.ProgramBase<TOptions>.GetComponentName(TOptions)
  nameWithType.vb: ProgramBase(Of TOptions).GetComponentName(TOptions)
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).GetComponentName(TOptions)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.GetComponentName(`0)
    name: GetComponentName
    nameWithType: ProgramBase<TOptions>.GetComponentName
    fullName: EventStore.Core.ProgramBase<TOptions>.GetComponentName
  - name: (
    nameWithType: (
    fullName: (
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.GetComponentName(`0)
    name: GetComponentName
    nameWithType: ProgramBase(Of TOptions).GetComponentName
    fullName: EventStore.Core.ProgramBase(Of TOptions).GetComponentName
  - name: (
    nameWithType: (
    fullName: (
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.PreInit(EventStore.ClusterNode.ClusterNodeOptions)
  commentId: M:EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.PreInit(EventStore.ClusterNode.ClusterNodeOptions)
  parent: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  definition: EventStore.Core.ProgramBase`1.PreInit(`0)
  name: PreInit(ClusterNodeOptions)
  nameWithType: ProgramBase<ClusterNodeOptions>.PreInit(ClusterNodeOptions)
  fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.PreInit(EventStore.ClusterNode.ClusterNodeOptions)
  nameWithType.vb: ProgramBase(Of ClusterNodeOptions).PreInit(ClusterNodeOptions)
  fullName.vb: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).PreInit(EventStore.ClusterNode.ClusterNodeOptions)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.PreInit(`0)
    name: PreInit
    nameWithType: ProgramBase<ClusterNodeOptions>.PreInit
    fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.PreInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClusterNode.ClusterNodeOptions
    name: ClusterNodeOptions
    nameWithType: ClusterNodeOptions
    fullName: EventStore.ClusterNode.ClusterNodeOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.PreInit(`0)
    name: PreInit
    nameWithType: ProgramBase(Of ClusterNodeOptions).PreInit
    fullName: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).PreInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClusterNode.ClusterNodeOptions
    name: ClusterNodeOptions
    nameWithType: ClusterNodeOptions
    fullName: EventStore.ClusterNode.ClusterNodeOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClusterNode.Program.PreInit*
  commentId: Overload:EventStore.ClusterNode.Program.PreInit
  name: PreInit
  nameWithType: Program.PreInit
  fullName: EventStore.ClusterNode.Program.PreInit
- uid: EventStore.Core.ProgramBase`1.PreInit(`0)
  commentId: M:EventStore.Core.ProgramBase`1.PreInit(`0)
  name: PreInit(TOptions)
  nameWithType: ProgramBase<TOptions>.PreInit(TOptions)
  fullName: EventStore.Core.ProgramBase<TOptions>.PreInit(TOptions)
  nameWithType.vb: ProgramBase(Of TOptions).PreInit(TOptions)
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).PreInit(TOptions)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.PreInit(`0)
    name: PreInit
    nameWithType: ProgramBase<TOptions>.PreInit
    fullName: EventStore.Core.ProgramBase<TOptions>.PreInit
  - name: (
    nameWithType: (
    fullName: (
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.PreInit(`0)
    name: PreInit
    nameWithType: ProgramBase(Of TOptions).PreInit
    fullName: EventStore.Core.ProgramBase(Of TOptions).PreInit
  - name: (
    nameWithType: (
    fullName: (
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Create(EventStore.ClusterNode.ClusterNodeOptions)
  commentId: M:EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Create(EventStore.ClusterNode.ClusterNodeOptions)
  parent: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  definition: EventStore.Core.ProgramBase`1.Create(`0)
  name: Create(ClusterNodeOptions)
  nameWithType: ProgramBase<ClusterNodeOptions>.Create(ClusterNodeOptions)
  fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.Create(EventStore.ClusterNode.ClusterNodeOptions)
  nameWithType.vb: ProgramBase(Of ClusterNodeOptions).Create(ClusterNodeOptions)
  fullName.vb: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).Create(EventStore.ClusterNode.ClusterNodeOptions)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.Create(`0)
    name: Create
    nameWithType: ProgramBase<ClusterNodeOptions>.Create
    fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClusterNode.ClusterNodeOptions
    name: ClusterNodeOptions
    nameWithType: ClusterNodeOptions
    fullName: EventStore.ClusterNode.ClusterNodeOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.Create(`0)
    name: Create
    nameWithType: ProgramBase(Of ClusterNodeOptions).Create
    fullName: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClusterNode.ClusterNodeOptions
    name: ClusterNodeOptions
    nameWithType: ClusterNodeOptions
    fullName: EventStore.ClusterNode.ClusterNodeOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClusterNode.Program.Create*
  commentId: Overload:EventStore.ClusterNode.Program.Create
  name: Create
  nameWithType: Program.Create
  fullName: EventStore.ClusterNode.Program.Create
- uid: EventStore.Core.ProgramBase`1.Create(`0)
  commentId: M:EventStore.Core.ProgramBase`1.Create(`0)
  name: Create(TOptions)
  nameWithType: ProgramBase<TOptions>.Create(TOptions)
  fullName: EventStore.Core.ProgramBase<TOptions>.Create(TOptions)
  nameWithType.vb: ProgramBase(Of TOptions).Create(TOptions)
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Create(TOptions)
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.Create(`0)
    name: Create
    nameWithType: ProgramBase<TOptions>.Create
    fullName: EventStore.Core.ProgramBase<TOptions>.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.Create(`0)
    name: Create
    nameWithType: ProgramBase(Of TOptions).Create
    fullName: EventStore.Core.ProgramBase(Of TOptions).Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Start
  commentId: M:EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Start
  parent: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  definition: EventStore.Core.ProgramBase`1.Start
  name: Start()
  nameWithType: ProgramBase<ClusterNodeOptions>.Start()
  fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.Start()
  nameWithType.vb: ProgramBase(Of ClusterNodeOptions).Start()
  fullName.vb: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).Start()
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.Start
    name: Start
    nameWithType: ProgramBase<ClusterNodeOptions>.Start
    fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.Start
    name: Start
    nameWithType: ProgramBase(Of ClusterNodeOptions).Start
    fullName: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClusterNode.Program.Start*
  commentId: Overload:EventStore.ClusterNode.Program.Start
  name: Start
  nameWithType: Program.Start
  fullName: EventStore.ClusterNode.Program.Start
- uid: EventStore.Core.ProgramBase`1.Start
  commentId: M:EventStore.Core.ProgramBase`1.Start
  name: Start()
  nameWithType: ProgramBase<TOptions>.Start()
  fullName: EventStore.Core.ProgramBase<TOptions>.Start()
  nameWithType.vb: ProgramBase(Of TOptions).Start()
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Start()
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.Start
    name: Start
    nameWithType: ProgramBase<TOptions>.Start
    fullName: EventStore.Core.ProgramBase<TOptions>.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.Start
    name: Start
    nameWithType: ProgramBase(Of TOptions).Start
    fullName: EventStore.Core.ProgramBase(Of TOptions).Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Stop
  commentId: M:EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.Stop
  parent: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  definition: EventStore.Core.ProgramBase`1.Stop
  name: Stop()
  nameWithType: ProgramBase<ClusterNodeOptions>.Stop()
  fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.Stop()
  nameWithType.vb: ProgramBase(Of ClusterNodeOptions).Stop()
  fullName.vb: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).Stop()
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.Stop
    name: Stop
    nameWithType: ProgramBase<ClusterNodeOptions>.Stop
    fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.Stop
    name: Stop
    nameWithType: ProgramBase(Of ClusterNodeOptions).Stop
    fullName: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClusterNode.Program.Stop*
  commentId: Overload:EventStore.ClusterNode.Program.Stop
  name: Stop
  nameWithType: Program.Stop
  fullName: EventStore.ClusterNode.Program.Stop
- uid: EventStore.Core.ProgramBase`1.Stop
  commentId: M:EventStore.Core.ProgramBase`1.Stop
  name: Stop()
  nameWithType: ProgramBase<TOptions>.Stop()
  fullName: EventStore.Core.ProgramBase<TOptions>.Stop()
  nameWithType.vb: ProgramBase(Of TOptions).Stop()
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Stop()
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.Stop
    name: Stop
    nameWithType: ProgramBase<TOptions>.Stop
    fullName: EventStore.Core.ProgramBase<TOptions>.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.Stop
    name: Stop
    nameWithType: ProgramBase(Of TOptions).Stop
    fullName: EventStore.Core.ProgramBase(Of TOptions).Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.OnProgramExit
  commentId: M:EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}.OnProgramExit
  parent: EventStore.Core.ProgramBase{EventStore.ClusterNode.ClusterNodeOptions}
  definition: EventStore.Core.ProgramBase`1.OnProgramExit
  name: OnProgramExit()
  nameWithType: ProgramBase<ClusterNodeOptions>.OnProgramExit()
  fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.OnProgramExit()
  nameWithType.vb: ProgramBase(Of ClusterNodeOptions).OnProgramExit()
  fullName.vb: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).OnProgramExit()
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.OnProgramExit
    name: OnProgramExit
    nameWithType: ProgramBase<ClusterNodeOptions>.OnProgramExit
    fullName: EventStore.Core.ProgramBase<EventStore.ClusterNode.ClusterNodeOptions>.OnProgramExit
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.OnProgramExit
    name: OnProgramExit
    nameWithType: ProgramBase(Of ClusterNodeOptions).OnProgramExit
    fullName: EventStore.Core.ProgramBase(Of EventStore.ClusterNode.ClusterNodeOptions).OnProgramExit
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClusterNode.Program.OnProgramExit*
  commentId: Overload:EventStore.ClusterNode.Program.OnProgramExit
  name: OnProgramExit
  nameWithType: Program.OnProgramExit
  fullName: EventStore.ClusterNode.Program.OnProgramExit
- uid: EventStore.Core.ProgramBase`1.OnProgramExit
  commentId: M:EventStore.Core.ProgramBase`1.OnProgramExit
  name: OnProgramExit()
  nameWithType: ProgramBase<TOptions>.OnProgramExit()
  fullName: EventStore.Core.ProgramBase<TOptions>.OnProgramExit()
  nameWithType.vb: ProgramBase(Of TOptions).OnProgramExit()
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).OnProgramExit()
  spec.csharp:
  - uid: EventStore.Core.ProgramBase`1.OnProgramExit
    name: OnProgramExit
    nameWithType: ProgramBase<TOptions>.OnProgramExit
    fullName: EventStore.Core.ProgramBase<TOptions>.OnProgramExit
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.ProgramBase`1.OnProgramExit
    name: OnProgramExit
    nameWithType: ProgramBase(Of TOptions).OnProgramExit
    fullName: EventStore.Core.ProgramBase(Of TOptions).OnProgramExit
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )

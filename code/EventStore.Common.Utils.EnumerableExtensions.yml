### YamlMime:ManagedReference
items:
- uid: EventStore.Common.Utils.EnumerableExtensions
  commentId: T:EventStore.Common.Utils.EnumerableExtensions
  id: EnumerableExtensions
  parent: EventStore.Common.Utils
  children:
  - EventStore.Common.Utils.EnumerableExtensions.Contains``1(IEnumerable{``0},Predicate{``0})
  - EventStore.Common.Utils.EnumerableExtensions.IsEmpty``1(IEnumerable{``0})
  - EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty``1(IEnumerable{``0})
  - EventStore.Common.Utils.EnumerableExtensions.Safe``1(IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: EventStore.Common.Utils.EnumerableExtensions
  type: Class
  source:
    remote:
      path: src/EventStore.Common/Utils/EnumerableExtensions.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: EnumerableExtensions
    path: ../EventStore/src/EventStore.Common/Utils/EnumerableExtensions.cs
    startLine: 7
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: 'public static class EnumerableExtensions : object'
    content.vb: >-
      Public Module EnumerableExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Common.Utils.EnumerableExtensions.Safe``1(IEnumerable{``0})
  commentId: M:EventStore.Common.Utils.EnumerableExtensions.Safe``1(IEnumerable{``0})
  id: Safe``1(IEnumerable{``0})
  isExtensionMethod: true
  parent: EventStore.Common.Utils.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Safe<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.Safe<T>(IEnumerable<T>)
  fullName: EventStore.Common.Utils.EnumerableExtensions.Safe<T>(IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/EnumerableExtensions.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Safe
    path: ../EventStore/src/EventStore.Common/Utils/EnumerableExtensions.cs
    startLine: 9
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static IEnumerable<T> Safe<T>(this IEnumerable<T> collection)
    parameters:
    - id: collection
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: IEnumerable{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Safe(Of T)(collection As IEnumerable(Of T)) As IEnumerable(Of T)
  overload: EventStore.Common.Utils.EnumerableExtensions.Safe*
  nameWithType.vb: EnumerableExtensions.Safe(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.EnumerableExtensions.Safe(Of T)(IEnumerable(Of T))
  name.vb: Safe(Of T)(IEnumerable(Of T))
- uid: EventStore.Common.Utils.EnumerableExtensions.Contains``1(IEnumerable{``0},Predicate{``0})
  commentId: M:EventStore.Common.Utils.EnumerableExtensions.Contains``1(IEnumerable{``0},Predicate{``0})
  id: Contains``1(IEnumerable{``0},Predicate{``0})
  isExtensionMethod: true
  parent: EventStore.Common.Utils.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Contains<T>(IEnumerable<T>, Predicate<T>)
  nameWithType: EnumerableExtensions.Contains<T>(IEnumerable<T>, Predicate<T>)
  fullName: EventStore.Common.Utils.EnumerableExtensions.Contains<T>(IEnumerable<T>, Predicate<T>)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/EnumerableExtensions.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Contains
    path: ../EventStore/src/EventStore.Common/Utils/EnumerableExtensions.cs
    startLine: 14
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static bool Contains<T>(this IEnumerable<T> collection, Predicate<T> condition)
    parameters:
    - id: collection
      type: IEnumerable{{T}}
    - id: condition
      type: Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T)(collection As IEnumerable(Of T), condition As Predicate(Of T)) As Boolean
  overload: EventStore.Common.Utils.EnumerableExtensions.Contains*
  nameWithType.vb: EnumerableExtensions.Contains(Of T)(IEnumerable(Of T), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.EnumerableExtensions.Contains(Of T)(IEnumerable(Of T), Predicate(Of T))
  name.vb: Contains(Of T)(IEnumerable(Of T), Predicate(Of T))
- uid: EventStore.Common.Utils.EnumerableExtensions.IsEmpty``1(IEnumerable{``0})
  commentId: M:EventStore.Common.Utils.EnumerableExtensions.IsEmpty``1(IEnumerable{``0})
  id: IsEmpty``1(IEnumerable{``0})
  isExtensionMethod: true
  parent: EventStore.Common.Utils.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: IsEmpty<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.IsEmpty<T>(IEnumerable<T>)
  fullName: EventStore.Common.Utils.EnumerableExtensions.IsEmpty<T>(IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/EnumerableExtensions.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: IsEmpty
    path: ../EventStore/src/EventStore.Common/Utils/EnumerableExtensions.cs
    startLine: 19
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static bool IsEmpty<T>(this IEnumerable<T> collection)
    parameters:
    - id: collection
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsEmpty(Of T)(collection As IEnumerable(Of T)) As Boolean
  overload: EventStore.Common.Utils.EnumerableExtensions.IsEmpty*
  nameWithType.vb: EnumerableExtensions.IsEmpty(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.EnumerableExtensions.IsEmpty(Of T)(IEnumerable(Of T))
  name.vb: IsEmpty(Of T)(IEnumerable(Of T))
- uid: EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty``1(IEnumerable{``0})
  commentId: M:EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty``1(IEnumerable{``0})
  id: IsNotEmpty``1(IEnumerable{``0})
  isExtensionMethod: true
  parent: EventStore.Common.Utils.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: IsNotEmpty<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.IsNotEmpty<T>(IEnumerable<T>)
  fullName: EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty<T>(IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/EnumerableExtensions.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: IsNotEmpty
    path: ../EventStore/src/EventStore.Common/Utils/EnumerableExtensions.cs
    startLine: 29
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static bool IsNotEmpty<T>(this IEnumerable<T> collection)
    parameters:
    - id: collection
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNotEmpty(Of T)(collection As IEnumerable(Of T)) As Boolean
  overload: EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty*
  nameWithType.vb: EnumerableExtensions.IsNotEmpty(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty(Of T)(IEnumerable(Of T))
  name.vb: IsNotEmpty(Of T)(IEnumerable(Of T))
references:
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Common.Utils.EnumerableExtensions.Safe*
  commentId: Overload:EventStore.Common.Utils.EnumerableExtensions.Safe
  isExternal: false
  name: Safe
  nameWithType: EnumerableExtensions.Safe
  fullName: EventStore.Common.Utils.EnumerableExtensions.Safe
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.EnumerableExtensions.Contains*
  commentId: Overload:EventStore.Common.Utils.EnumerableExtensions.Contains
  isExternal: false
  name: Contains
  nameWithType: EnumerableExtensions.Contains
  fullName: EventStore.Common.Utils.EnumerableExtensions.Contains
- uid: Predicate{{T}}
  commentId: '!:Predicate{``0}'
  definition: Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Predicate`1
  commentId: '!:Predicate`1'
  isExternal: true
  name: Predicate<>
  nameWithType: Predicate<>
  fullName: Predicate<>
  nameWithType.vb: Predicate(Of )
  fullName.vb: Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.EnumerableExtensions.IsEmpty*
  commentId: Overload:EventStore.Common.Utils.EnumerableExtensions.IsEmpty
  isExternal: false
  name: IsEmpty
  nameWithType: EnumerableExtensions.IsEmpty
  fullName: EventStore.Common.Utils.EnumerableExtensions.IsEmpty
- uid: EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty*
  commentId: Overload:EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty
  isExternal: false
  name: IsNotEmpty
  nameWithType: EnumerableExtensions.IsNotEmpty
  fullName: EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty

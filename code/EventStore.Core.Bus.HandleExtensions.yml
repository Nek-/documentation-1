### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Bus.HandleExtensions
  commentId: T:EventStore.Core.Bus.HandleExtensions
  id: HandleExtensions
  parent: EventStore.Core.Bus
  children:
  - EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
  - EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
  langs:
  - csharp
  - vb
  name: HandleExtensions
  nameWithType: HandleExtensions
  fullName: EventStore.Core.Bus.HandleExtensions
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Bus/HandleExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: HandleExtensions
    path: ../EventStore/src/EventStore.Core/Bus/HandleExtensions.cs
    startLine: 4
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: 'public static class HandleExtensions : object'
    content.vb: >-
      Public Module HandleExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
  commentId: M:EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
  id: WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
  isExtensionMethod: true
  parent: EventStore.Core.Bus.HandleExtensions
  langs:
  - csharp
  - vb
  name: WidenFrom<TInput, TOutput>(IHandle<TOutput>)
  nameWithType: HandleExtensions.WidenFrom<TInput, TOutput>(IHandle<TOutput>)
  fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom<TInput, TOutput>(EventStore.Core.Bus.IHandle<TOutput>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Bus/HandleExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: WidenFrom
    path: ../EventStore/src/EventStore.Core/Bus/HandleExtensions.cs
    startLine: 6
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: 'public static IHandle<TInput> WidenFrom<TInput, TOutput>(this IHandle<TOutput> handler)where TInput : TOutput where TOutput : Message'
    parameters:
    - id: handler
      type: EventStore.Core.Bus.IHandle{{TOutput}}
    typeParameters:
    - id: TInput
    - id: TOutput
    return:
      type: EventStore.Core.Bus.IHandle{{TInput}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WidenFrom(Of TInput As TOutput, TOutput As Message)(handler As IHandle(Of TOutput)) As IHandle(Of TInput)
  overload: EventStore.Core.Bus.HandleExtensions.WidenFrom*
  nameWithType.vb: HandleExtensions.WidenFrom(Of TInput, TOutput)(IHandle(Of TOutput))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Bus.HandleExtensions.WidenFrom(Of TInput, TOutput)(EventStore.Core.Bus.IHandle(Of TOutput))
  name.vb: WidenFrom(Of TInput, TOutput)(IHandle(Of TOutput))
- uid: EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
  commentId: M:EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
  id: NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
  isExtensionMethod: true
  parent: EventStore.Core.Bus.HandleExtensions
  langs:
  - csharp
  - vb
  name: NarrowTo<TInput, TOutput>(IHandle<TOutput>)
  nameWithType: HandleExtensions.NarrowTo<TInput, TOutput>(IHandle<TOutput>)
  fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo<TInput, TOutput>(EventStore.Core.Bus.IHandle<TOutput>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Bus/HandleExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: NarrowTo
    path: ../EventStore/src/EventStore.Core/Bus/HandleExtensions.cs
    startLine: 13
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: 'public static IHandle<TInput> NarrowTo<TInput, TOutput>(this IHandle<TOutput> handler)where TInput : Message where TOutput : TInput'
    parameters:
    - id: handler
      type: EventStore.Core.Bus.IHandle{{TOutput}}
    typeParameters:
    - id: TInput
    - id: TOutput
    return:
      type: EventStore.Core.Bus.IHandle{{TInput}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NarrowTo(Of TInput As Message, TOutput As TInput)(handler As IHandle(Of TOutput)) As IHandle(Of TInput)
  overload: EventStore.Core.Bus.HandleExtensions.NarrowTo*
  nameWithType.vb: HandleExtensions.NarrowTo(Of TInput, TOutput)(IHandle(Of TOutput))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Bus.HandleExtensions.NarrowTo(Of TInput, TOutput)(EventStore.Core.Bus.IHandle(Of TOutput))
  name.vb: NarrowTo(Of TInput, TOutput)(IHandle(Of TOutput))
references:
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  isExternal: false
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.HandleExtensions.WidenFrom*
  commentId: Overload:EventStore.Core.Bus.HandleExtensions.WidenFrom
  isExternal: false
  name: WidenFrom
  nameWithType: HandleExtensions.WidenFrom
  fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom
- uid: EventStore.Core.Bus.IHandle{{TOutput}}
  commentId: T:EventStore.Core.Bus.IHandle{`1}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<TOutput>
  nameWithType: IHandle<TOutput>
  fullName: EventStore.Core.Bus.IHandle<TOutput>
  nameWithType.vb: IHandle(Of TOutput)
  fullName.vb: EventStore.Core.Bus.IHandle(Of TOutput)
  name.vb: IHandle(Of TOutput)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{{TInput}}
  commentId: T:EventStore.Core.Bus.IHandle{`0}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<TInput>
  nameWithType: IHandle<TInput>
  fullName: EventStore.Core.Bus.IHandle<TInput>
  nameWithType.vb: IHandle(Of TInput)
  fullName.vb: EventStore.Core.Bus.IHandle(Of TInput)
  name.vb: IHandle(Of TInput)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  isExternal: false
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.HandleExtensions.NarrowTo*
  commentId: Overload:EventStore.Core.Bus.HandleExtensions.NarrowTo
  isExternal: false
  name: NarrowTo
  nameWithType: HandleExtensions.NarrowTo
  fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Data.UserData
  commentId: T:EventStore.Core.Data.UserData
  id: UserData
  parent: EventStore.Core.Data
  children:
  - EventStore.Core.Data.UserData.#ctor(System.String,System.String,System.String[],System.String,System.String,System.Boolean)
  - EventStore.Core.Data.UserData.Disabled
  - EventStore.Core.Data.UserData.FullName
  - EventStore.Core.Data.UserData.Groups
  - EventStore.Core.Data.UserData.Hash
  - EventStore.Core.Data.UserData.LoginName
  - EventStore.Core.Data.UserData.Salt
  - EventStore.Core.Data.UserData.SetDisabled
  - EventStore.Core.Data.UserData.SetEnabled
  - EventStore.Core.Data.UserData.SetFullName(System.String)
  - EventStore.Core.Data.UserData.SetGroups(System.String[])
  - EventStore.Core.Data.UserData.SetPassword(System.String,System.String)
  langs:
  - csharp
  - vb
  name: UserData
  nameWithType: UserData
  fullName: EventStore.Core.Data.UserData
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Data/UserData.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: UserData
    path: ../EventStore/src/EventStore.Core/Data/UserData.cs
    startLine: 2
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: 'public class UserData : object'
    content.vb: >-
      Public Class UserData

          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Data.UserData.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Data.UserData.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Data.UserData.LoginName
  commentId: F:EventStore.Core.Data.UserData.LoginName
  id: LoginName
  parent: EventStore.Core.Data.UserData
  langs:
  - csharp
  - vb
  name: LoginName
  nameWithType: UserData.LoginName
  fullName: EventStore.Core.Data.UserData.LoginName
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Data/UserData.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: LoginName
    path: ../EventStore/src/EventStore.Core/Data/UserData.cs
    startLine: 4
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public readonly string LoginName
    return:
      type: System.String
    content.vb: Public ReadOnly LoginName As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Data.UserData.FullName
  commentId: F:EventStore.Core.Data.UserData.FullName
  id: FullName
  parent: EventStore.Core.Data.UserData
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: UserData.FullName
  fullName: EventStore.Core.Data.UserData.FullName
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Data/UserData.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: FullName
    path: ../EventStore/src/EventStore.Core/Data/UserData.cs
    startLine: 5
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public readonly string FullName
    return:
      type: System.String
    content.vb: Public ReadOnly FullName As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Data.UserData.Salt
  commentId: F:EventStore.Core.Data.UserData.Salt
  id: Salt
  parent: EventStore.Core.Data.UserData
  langs:
  - csharp
  - vb
  name: Salt
  nameWithType: UserData.Salt
  fullName: EventStore.Core.Data.UserData.Salt
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Data/UserData.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Salt
    path: ../EventStore/src/EventStore.Core/Data/UserData.cs
    startLine: 6
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public readonly string Salt
    return:
      type: System.String
    content.vb: Public ReadOnly Salt As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Data.UserData.Hash
  commentId: F:EventStore.Core.Data.UserData.Hash
  id: Hash
  parent: EventStore.Core.Data.UserData
  langs:
  - csharp
  - vb
  name: Hash
  nameWithType: UserData.Hash
  fullName: EventStore.Core.Data.UserData.Hash
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Data/UserData.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Hash
    path: ../EventStore/src/EventStore.Core/Data/UserData.cs
    startLine: 7
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public readonly string Hash
    return:
      type: System.String
    content.vb: Public ReadOnly Hash As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Data.UserData.Disabled
  commentId: F:EventStore.Core.Data.UserData.Disabled
  id: Disabled
  parent: EventStore.Core.Data.UserData
  langs:
  - csharp
  - vb
  name: Disabled
  nameWithType: UserData.Disabled
  fullName: EventStore.Core.Data.UserData.Disabled
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Data/UserData.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Disabled
    path: ../EventStore/src/EventStore.Core/Data/UserData.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public readonly bool Disabled
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Disabled As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Data.UserData.Groups
  commentId: F:EventStore.Core.Data.UserData.Groups
  id: Groups
  parent: EventStore.Core.Data.UserData
  langs:
  - csharp
  - vb
  name: Groups
  nameWithType: UserData.Groups
  fullName: EventStore.Core.Data.UserData.Groups
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Data/UserData.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Groups
    path: ../EventStore/src/EventStore.Core/Data/UserData.cs
    startLine: 9
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public readonly string[] Groups
    return:
      type: System.String[]
    content.vb: Public ReadOnly Groups As String()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Data.UserData.#ctor(System.String,System.String,System.String[],System.String,System.String,System.Boolean)
  commentId: M:EventStore.Core.Data.UserData.#ctor(System.String,System.String,System.String[],System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.String[],System.String,System.String,System.Boolean)'
  parent: EventStore.Core.Data.UserData
  langs:
  - csharp
  - vb
  name: UserData(String, String, String[], String, String, Boolean)
  nameWithType: UserData.UserData(String, String, String[], String, String, Boolean)
  fullName: EventStore.Core.Data.UserData.UserData(System.String, System.String, System.String[], System.String, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Data/UserData.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Data/UserData.cs
    startLine: 11
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public UserData(string loginName, string fullName, string[] groups, string hash, string salt, bool disabled)
    parameters:
    - id: loginName
      type: System.String
    - id: fullName
      type: System.String
    - id: groups
      type: System.String[]
    - id: hash
      type: System.String
    - id: salt
      type: System.String
    - id: disabled
      type: System.Boolean
    content.vb: Public Sub New(loginName As String, fullName As String, groups As String(), hash As String, salt As String, disabled As Boolean)
  overload: EventStore.Core.Data.UserData.#ctor*
  nameWithType.vb: UserData.UserData(String, String, String(), String, String, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Data.UserData.UserData(System.String, System.String, System.String(), System.String, System.String, System.Boolean)
  name.vb: UserData(String, String, String(), String, String, Boolean)
- uid: EventStore.Core.Data.UserData.SetFullName(System.String)
  commentId: M:EventStore.Core.Data.UserData.SetFullName(System.String)
  id: SetFullName(System.String)
  parent: EventStore.Core.Data.UserData
  langs:
  - csharp
  - vb
  name: SetFullName(String)
  nameWithType: UserData.SetFullName(String)
  fullName: EventStore.Core.Data.UserData.SetFullName(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Data/UserData.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: SetFullName
    path: ../EventStore/src/EventStore.Core/Data/UserData.cs
    startLine: 21
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public UserData SetFullName(string fullName)
    parameters:
    - id: fullName
      type: System.String
    return:
      type: EventStore.Core.Data.UserData
    content.vb: Public Function SetFullName(fullName As String) As UserData
  overload: EventStore.Core.Data.UserData.SetFullName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Data.UserData.SetGroups(System.String[])
  commentId: M:EventStore.Core.Data.UserData.SetGroups(System.String[])
  id: SetGroups(System.String[])
  parent: EventStore.Core.Data.UserData
  langs:
  - csharp
  - vb
  name: SetGroups(String[])
  nameWithType: UserData.SetGroups(String[])
  fullName: EventStore.Core.Data.UserData.SetGroups(System.String[])
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Data/UserData.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: SetGroups
    path: ../EventStore/src/EventStore.Core/Data/UserData.cs
    startLine: 26
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public UserData SetGroups(string[] groups)
    parameters:
    - id: groups
      type: System.String[]
    return:
      type: EventStore.Core.Data.UserData
    content.vb: Public Function SetGroups(groups As String()) As UserData
  overload: EventStore.Core.Data.UserData.SetGroups*
  nameWithType.vb: UserData.SetGroups(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Data.UserData.SetGroups(System.String())
  name.vb: SetGroups(String())
- uid: EventStore.Core.Data.UserData.SetPassword(System.String,System.String)
  commentId: M:EventStore.Core.Data.UserData.SetPassword(System.String,System.String)
  id: SetPassword(System.String,System.String)
  parent: EventStore.Core.Data.UserData
  langs:
  - csharp
  - vb
  name: SetPassword(String, String)
  nameWithType: UserData.SetPassword(String, String)
  fullName: EventStore.Core.Data.UserData.SetPassword(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Data/UserData.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: SetPassword
    path: ../EventStore/src/EventStore.Core/Data/UserData.cs
    startLine: 31
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public UserData SetPassword(string hash, string salt)
    parameters:
    - id: hash
      type: System.String
    - id: salt
      type: System.String
    return:
      type: EventStore.Core.Data.UserData
    content.vb: Public Function SetPassword(hash As String, salt As String) As UserData
  overload: EventStore.Core.Data.UserData.SetPassword*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Data.UserData.SetEnabled
  commentId: M:EventStore.Core.Data.UserData.SetEnabled
  id: SetEnabled
  parent: EventStore.Core.Data.UserData
  langs:
  - csharp
  - vb
  name: SetEnabled()
  nameWithType: UserData.SetEnabled()
  fullName: EventStore.Core.Data.UserData.SetEnabled()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Data/UserData.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: SetEnabled
    path: ../EventStore/src/EventStore.Core/Data/UserData.cs
    startLine: 36
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public UserData SetEnabled()
    return:
      type: EventStore.Core.Data.UserData
    content.vb: Public Function SetEnabled As UserData
  overload: EventStore.Core.Data.UserData.SetEnabled*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Data.UserData.SetDisabled
  commentId: M:EventStore.Core.Data.UserData.SetDisabled
  id: SetDisabled
  parent: EventStore.Core.Data.UserData
  langs:
  - csharp
  - vb
  name: SetDisabled()
  nameWithType: UserData.SetDisabled()
  fullName: EventStore.Core.Data.UserData.SetDisabled()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Data/UserData.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: SetDisabled
    path: ../EventStore/src/EventStore.Core/Data/UserData.cs
    startLine: 41
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public UserData SetDisabled()
    return:
      type: EventStore.Core.Data.UserData
    content.vb: Public Function SetDisabled As UserData
  overload: EventStore.Core.Data.UserData.SetDisabled*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  isExternal: false
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Data.UserData.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<UserData>()
  nameWithType: ProtobufExtensions.Serialize<UserData>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Data.UserData>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of UserData)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Data.UserData)()
  name.vb: Serialize(Of UserData)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<UserData>
    nameWithType: ProtobufExtensions.Serialize<UserData>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Data.UserData>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of UserData)
    nameWithType: ProtobufExtensions.Serialize(Of UserData)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Data.UserData)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Data.UserData.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<UserData>()
  nameWithType: ProtobufExtensions.SerializeToArray<UserData>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Data.UserData>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of UserData)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Data.UserData)()
  name.vb: SerializeToArray(Of UserData)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<UserData>
    nameWithType: ProtobufExtensions.SerializeToArray<UserData>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Data.UserData>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of UserData)
    nameWithType: ProtobufExtensions.SerializeToArray(Of UserData)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Data.UserData)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Data.UserData.#ctor*
  commentId: Overload:EventStore.Core.Data.UserData.#ctor
  isExternal: false
  name: UserData
  nameWithType: UserData.UserData
  fullName: EventStore.Core.Data.UserData.UserData
- uid: EventStore.Core.Data.UserData.SetFullName*
  commentId: Overload:EventStore.Core.Data.UserData.SetFullName
  isExternal: false
  name: SetFullName
  nameWithType: UserData.SetFullName
  fullName: EventStore.Core.Data.UserData.SetFullName
- uid: EventStore.Core.Data.UserData
  commentId: T:EventStore.Core.Data.UserData
  parent: EventStore.Core.Data
  isExternal: false
  name: UserData
  nameWithType: UserData
  fullName: EventStore.Core.Data.UserData
- uid: EventStore.Core.Data.UserData.SetGroups*
  commentId: Overload:EventStore.Core.Data.UserData.SetGroups
  isExternal: false
  name: SetGroups
  nameWithType: UserData.SetGroups
  fullName: EventStore.Core.Data.UserData.SetGroups
- uid: EventStore.Core.Data.UserData.SetPassword*
  commentId: Overload:EventStore.Core.Data.UserData.SetPassword
  isExternal: false
  name: SetPassword
  nameWithType: UserData.SetPassword
  fullName: EventStore.Core.Data.UserData.SetPassword
- uid: EventStore.Core.Data.UserData.SetEnabled*
  commentId: Overload:EventStore.Core.Data.UserData.SetEnabled
  isExternal: false
  name: SetEnabled
  nameWithType: UserData.SetEnabled
  fullName: EventStore.Core.Data.UserData.SetEnabled
- uid: EventStore.Core.Data.UserData.SetDisabled*
  commentId: Overload:EventStore.Core.Data.UserData.SetDisabled
  isExternal: false
  name: SetDisabled
  nameWithType: UserData.SetDisabled
  fullName: EventStore.Core.Data.UserData.SetDisabled

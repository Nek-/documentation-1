### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Index.HashListMemTable
  commentId: T:EventStore.Core.Index.HashListMemTable
  id: HashListMemTable
  parent: EventStore.Core.Index
  children:
  - EventStore.Core.Index.HashListMemTable.#ctor(System.Byte,System.Int32)
  - EventStore.Core.Index.HashListMemTable.Add(System.UInt64,System.Int64,System.Int64)
  - EventStore.Core.Index.HashListMemTable.AddEntries(IList{EventStore.Core.Index.IndexEntry})
  - EventStore.Core.Index.HashListMemTable.Clear
  - EventStore.Core.Index.HashListMemTable.Count
  - EventStore.Core.Index.HashListMemTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  - EventStore.Core.Index.HashListMemTable.Id
  - EventStore.Core.Index.HashListMemTable.IterateAllInOrder
  - EventStore.Core.Index.HashListMemTable.MarkForConversion
  - EventStore.Core.Index.HashListMemTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  - EventStore.Core.Index.HashListMemTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  - EventStore.Core.Index.HashListMemTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  - EventStore.Core.Index.HashListMemTable.Version
  langs:
  - csharp
  - vb
  name: HashListMemTable
  nameWithType: HashListMemTable
  fullName: EventStore.Core.Index.HashListMemTable
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: HashListMemTable
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 10
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: 'public class HashListMemTable : object, IMemTable, ISearchTable'
    content.vb: >-
      Public Class HashListMemTable

          Inherits Object

          Implements IMemTable, ISearchTable
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Index.IMemTable
  - EventStore.Core.Index.ISearchTable
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Index.HashListMemTable.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Index.HashListMemTable.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Index.HashListMemTable.Count
  commentId: P:EventStore.Core.Index.HashListMemTable.Count
  id: Count
  parent: EventStore.Core.Index.HashListMemTable
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: HashListMemTable.Count
  fullName: EventStore.Core.Index.HashListMemTable.Count
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Count
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 14
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public long Count { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property Count As Long
  overload: EventStore.Core.Index.HashListMemTable.Count*
  implements:
  - EventStore.Core.Index.ISearchTable.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Index.HashListMemTable.Id
  commentId: P:EventStore.Core.Index.HashListMemTable.Id
  id: Id
  parent: EventStore.Core.Index.HashListMemTable
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: HashListMemTable.Id
  fullName: EventStore.Core.Index.HashListMemTable.Id
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Id
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 15
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public Guid Id { get; }
    parameters: []
    return:
      type: Guid
    content.vb: Public ReadOnly Property Id As Guid
  overload: EventStore.Core.Index.HashListMemTable.Id*
  implements:
  - EventStore.Core.Index.ISearchTable.Id
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Index.HashListMemTable.Version
  commentId: P:EventStore.Core.Index.HashListMemTable.Version
  id: Version
  parent: EventStore.Core.Index.HashListMemTable
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: HashListMemTable.Version
  fullName: EventStore.Core.Index.HashListMemTable.Version
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Version
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 16
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public byte Version { get; }
    parameters: []
    return:
      type: System.Byte
    content.vb: Public ReadOnly Property Version As Byte
  overload: EventStore.Core.Index.HashListMemTable.Version*
  implements:
  - EventStore.Core.Index.ISearchTable.Version
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Index.HashListMemTable.#ctor(System.Byte,System.Int32)
  commentId: M:EventStore.Core.Index.HashListMemTable.#ctor(System.Byte,System.Int32)
  id: '#ctor(System.Byte,System.Int32)'
  parent: EventStore.Core.Index.HashListMemTable
  langs:
  - csharp
  - vb
  name: HashListMemTable(Byte, Int32)
  nameWithType: HashListMemTable.HashListMemTable(Byte, Int32)
  fullName: EventStore.Core.Index.HashListMemTable.HashListMemTable(System.Byte, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 25
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public HashListMemTable(byte version, int maxSize)
    parameters:
    - id: version
      type: System.Byte
    - id: maxSize
      type: System.Int32
    content.vb: Public Sub New(version As Byte, maxSize As Integer)
  overload: EventStore.Core.Index.HashListMemTable.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.HashListMemTable.MarkForConversion
  commentId: M:EventStore.Core.Index.HashListMemTable.MarkForConversion
  id: MarkForConversion
  parent: EventStore.Core.Index.HashListMemTable
  langs:
  - csharp
  - vb
  name: MarkForConversion()
  nameWithType: HashListMemTable.MarkForConversion()
  fullName: EventStore.Core.Index.HashListMemTable.MarkForConversion()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MarkForConversion
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 31
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public bool MarkForConversion()
    return:
      type: System.Boolean
    content.vb: Public Function MarkForConversion As Boolean
  overload: EventStore.Core.Index.HashListMemTable.MarkForConversion*
  implements:
  - EventStore.Core.Index.IMemTable.MarkForConversion
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.HashListMemTable.Add(System.UInt64,System.Int64,System.Int64)
  commentId: M:EventStore.Core.Index.HashListMemTable.Add(System.UInt64,System.Int64,System.Int64)
  id: Add(System.UInt64,System.Int64,System.Int64)
  parent: EventStore.Core.Index.HashListMemTable
  langs:
  - csharp
  - vb
  name: Add(UInt64, Int64, Int64)
  nameWithType: HashListMemTable.Add(UInt64, Int64, Int64)
  fullName: EventStore.Core.Index.HashListMemTable.Add(System.UInt64, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Add
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 36
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public void Add(ulong stream, long version, long position)
    parameters:
    - id: stream
      type: System.UInt64
    - id: version
      type: System.Int64
    - id: position
      type: System.Int64
    content.vb: Public Sub Add(stream As ULong, version As Long, position As Long)
  overload: EventStore.Core.Index.HashListMemTable.Add*
  implements:
  - EventStore.Core.Index.IMemTable.Add(System.UInt64,System.Int64,System.Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.HashListMemTable.AddEntries(IList{EventStore.Core.Index.IndexEntry})
  commentId: M:EventStore.Core.Index.HashListMemTable.AddEntries(IList{EventStore.Core.Index.IndexEntry})
  id: AddEntries(IList{EventStore.Core.Index.IndexEntry})
  parent: EventStore.Core.Index.HashListMemTable
  langs:
  - csharp
  - vb
  name: AddEntries(IList<IndexEntry>)
  nameWithType: HashListMemTable.AddEntries(IList<IndexEntry>)
  fullName: EventStore.Core.Index.HashListMemTable.AddEntries(IList<EventStore.Core.Index.IndexEntry>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AddEntries
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 41
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public void AddEntries(IList<IndexEntry> entries)
    parameters:
    - id: entries
      type: IList{EventStore.Core.Index.IndexEntry}
    content.vb: Public Sub AddEntries(entries As IList(Of IndexEntry))
  overload: EventStore.Core.Index.HashListMemTable.AddEntries*
  implements:
  - EventStore.Core.Index.IMemTable.AddEntries(IList{EventStore.Core.Index.IndexEntry})
  nameWithType.vb: HashListMemTable.AddEntries(IList(Of IndexEntry))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.HashListMemTable.AddEntries(IList(Of EventStore.Core.Index.IndexEntry))
  name.vb: AddEntries(IList(Of IndexEntry))
- uid: EventStore.Core.Index.HashListMemTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  commentId: M:EventStore.Core.Index.HashListMemTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  id: TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  parent: EventStore.Core.Index.HashListMemTable
  langs:
  - csharp
  - vb
  name: TryGetOneValue(UInt64, Int64, out Int64)
  nameWithType: HashListMemTable.TryGetOneValue(UInt64, Int64, out Int64)
  fullName: EventStore.Core.Index.HashListMemTable.TryGetOneValue(System.UInt64, System.Int64, out System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TryGetOneValue
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 79
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public bool TryGetOneValue(ulong stream, long number, out long position)
    parameters:
    - id: stream
      type: System.UInt64
    - id: number
      type: System.Int64
    - id: position
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: Public Function TryGetOneValue(stream As ULong, number As Long, ByRef position As Long) As Boolean
  overload: EventStore.Core.Index.HashListMemTable.TryGetOneValue*
  implements:
  - EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  nameWithType.vb: HashListMemTable.TryGetOneValue(UInt64, Int64, ByRef Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.HashListMemTable.TryGetOneValue(System.UInt64, System.Int64, ByRef System.Int64)
  name.vb: TryGetOneValue(UInt64, Int64, ByRef Int64)
- uid: EventStore.Core.Index.HashListMemTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.HashListMemTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  id: TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.HashListMemTable
  langs:
  - csharp
  - vb
  name: TryGetLatestEntry(UInt64, out IndexEntry)
  nameWithType: HashListMemTable.TryGetLatestEntry(UInt64, out IndexEntry)
  fullName: EventStore.Core.Index.HashListMemTable.TryGetLatestEntry(System.UInt64, out EventStore.Core.Index.IndexEntry)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TryGetLatestEntry
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 112
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public bool TryGetLatestEntry(ulong stream, out IndexEntry entry)
    parameters:
    - id: stream
      type: System.UInt64
    - id: entry
      type: EventStore.Core.Index.IndexEntry
    return:
      type: System.Boolean
    content.vb: Public Function TryGetLatestEntry(stream As ULong, ByRef entry As IndexEntry) As Boolean
  overload: EventStore.Core.Index.HashListMemTable.TryGetLatestEntry*
  implements:
  - EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  nameWithType.vb: HashListMemTable.TryGetLatestEntry(UInt64, ByRef IndexEntry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.HashListMemTable.TryGetLatestEntry(System.UInt64, ByRef EventStore.Core.Index.IndexEntry)
  name.vb: TryGetLatestEntry(UInt64, ByRef IndexEntry)
- uid: EventStore.Core.Index.HashListMemTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.HashListMemTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  id: TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.HashListMemTable
  langs:
  - csharp
  - vb
  name: TryGetOldestEntry(UInt64, out IndexEntry)
  nameWithType: HashListMemTable.TryGetOldestEntry(UInt64, out IndexEntry)
  fullName: EventStore.Core.Index.HashListMemTable.TryGetOldestEntry(System.UInt64, out EventStore.Core.Index.IndexEntry)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TryGetOldestEntry
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 136
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public bool TryGetOldestEntry(ulong stream, out IndexEntry entry)
    parameters:
    - id: stream
      type: System.UInt64
    - id: entry
      type: EventStore.Core.Index.IndexEntry
    return:
      type: System.Boolean
    content.vb: Public Function TryGetOldestEntry(stream As ULong, ByRef entry As IndexEntry) As Boolean
  overload: EventStore.Core.Index.HashListMemTable.TryGetOldestEntry*
  implements:
  - EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  nameWithType.vb: HashListMemTable.TryGetOldestEntry(UInt64, ByRef IndexEntry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.HashListMemTable.TryGetOldestEntry(System.UInt64, ByRef EventStore.Core.Index.IndexEntry)
  name.vb: TryGetOldestEntry(UInt64, ByRef IndexEntry)
- uid: EventStore.Core.Index.HashListMemTable.IterateAllInOrder
  commentId: M:EventStore.Core.Index.HashListMemTable.IterateAllInOrder
  id: IterateAllInOrder
  parent: EventStore.Core.Index.HashListMemTable
  langs:
  - csharp
  - vb
  name: IterateAllInOrder()
  nameWithType: HashListMemTable.IterateAllInOrder()
  fullName: EventStore.Core.Index.HashListMemTable.IterateAllInOrder()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IterateAllInOrder
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 160
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public IEnumerable<IndexEntry> IterateAllInOrder()
    return:
      type: IEnumerable{EventStore.Core.Index.IndexEntry}
    content.vb: Public Function IterateAllInOrder As IEnumerable(Of IndexEntry)
  overload: EventStore.Core.Index.HashListMemTable.IterateAllInOrder*
  implements:
  - EventStore.Core.Index.ISearchTable.IterateAllInOrder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.HashListMemTable.Clear
  commentId: M:EventStore.Core.Index.HashListMemTable.Clear
  id: Clear
  parent: EventStore.Core.Index.HashListMemTable
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: HashListMemTable.Clear()
  fullName: EventStore.Core.Index.HashListMemTable.Clear()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Clear
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 179
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: EventStore.Core.Index.HashListMemTable.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.HashListMemTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  commentId: M:EventStore.Core.Index.HashListMemTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  id: GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  parent: EventStore.Core.Index.HashListMemTable
  langs:
  - csharp
  - vb
  name: GetRange(UInt64, Int64, Int64, Nullable<Int32>)
  nameWithType: HashListMemTable.GetRange(UInt64, Int64, Int64, Nullable<Int32>)
  fullName: EventStore.Core.Index.HashListMemTable.GetRange(System.UInt64, System.Int64, System.Int64, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/HashListMemTable.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetRange
    path: ../EventStore/src/EventStore.Core/Index/HashListMemTable.cs
    startLine: 184
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public IEnumerable<IndexEntry> GetRange(ulong stream, long startNumber, long endNumber, int ? limit = null)
    parameters:
    - id: stream
      type: System.UInt64
    - id: startNumber
      type: System.Int64
    - id: endNumber
      type: System.Int64
    - id: limit
      type: System.Nullable{System.Int32}
    return:
      type: IEnumerable{EventStore.Core.Index.IndexEntry}
    content.vb: Public Function GetRange(stream As ULong, startNumber As Long, endNumber As Long, limit As Integer? = Nothing) As IEnumerable(Of IndexEntry)
  overload: EventStore.Core.Index.HashListMemTable.GetRange*
  implements:
  - EventStore.Core.Index.ISearchTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  nameWithType.vb: HashListMemTable.GetRange(UInt64, Int64, Int64, Nullable(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.HashListMemTable.GetRange(System.UInt64, System.Int64, System.Int64, System.Nullable(Of System.Int32))
  name.vb: GetRange(UInt64, Int64, Int64, Nullable(Of Int32))
references:
- uid: EventStore.Core.Index
  commentId: N:EventStore.Core.Index
  isExternal: false
  name: EventStore.Core.Index
  nameWithType: EventStore.Core.Index
  fullName: EventStore.Core.Index
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Index.IMemTable
  commentId: T:EventStore.Core.Index.IMemTable
  parent: EventStore.Core.Index
  isExternal: false
  name: IMemTable
  nameWithType: IMemTable
  fullName: EventStore.Core.Index.IMemTable
- uid: EventStore.Core.Index.ISearchTable
  commentId: T:EventStore.Core.Index.ISearchTable
  parent: EventStore.Core.Index
  isExternal: false
  name: ISearchTable
  nameWithType: ISearchTable
  fullName: EventStore.Core.Index.ISearchTable
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.HashListMemTable.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<HashListMemTable>()
  nameWithType: ProtobufExtensions.Serialize<HashListMemTable>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Index.HashListMemTable>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of HashListMemTable)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Index.HashListMemTable)()
  name.vb: Serialize(Of HashListMemTable)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<HashListMemTable>
    nameWithType: ProtobufExtensions.Serialize<HashListMemTable>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Index.HashListMemTable>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of HashListMemTable)
    nameWithType: ProtobufExtensions.Serialize(Of HashListMemTable)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Index.HashListMemTable)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.HashListMemTable.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<HashListMemTable>()
  nameWithType: ProtobufExtensions.SerializeToArray<HashListMemTable>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Index.HashListMemTable>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of HashListMemTable)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Index.HashListMemTable)()
  name.vb: SerializeToArray(Of HashListMemTable)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<HashListMemTable>
    nameWithType: ProtobufExtensions.SerializeToArray<HashListMemTable>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Index.HashListMemTable>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of HashListMemTable)
    nameWithType: ProtobufExtensions.SerializeToArray(Of HashListMemTable)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Index.HashListMemTable)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Index.HashListMemTable.Count*
  commentId: Overload:EventStore.Core.Index.HashListMemTable.Count
  isExternal: false
  name: Count
  nameWithType: HashListMemTable.Count
  fullName: EventStore.Core.Index.HashListMemTable.Count
- uid: EventStore.Core.Index.ISearchTable.Count
  commentId: P:EventStore.Core.Index.ISearchTable.Count
  parent: EventStore.Core.Index.ISearchTable
  isExternal: false
  name: Count
  nameWithType: ISearchTable.Count
  fullName: EventStore.Core.Index.ISearchTable.Count
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Index.HashListMemTable.Id*
  commentId: Overload:EventStore.Core.Index.HashListMemTable.Id
  isExternal: false
  name: Id
  nameWithType: HashListMemTable.Id
  fullName: EventStore.Core.Index.HashListMemTable.Id
- uid: EventStore.Core.Index.ISearchTable.Id
  commentId: P:EventStore.Core.Index.ISearchTable.Id
  parent: EventStore.Core.Index.ISearchTable
  isExternal: false
  name: Id
  nameWithType: ISearchTable.Id
  fullName: EventStore.Core.Index.ISearchTable.Id
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: EventStore.Core.Index.HashListMemTable.Version*
  commentId: Overload:EventStore.Core.Index.HashListMemTable.Version
  isExternal: false
  name: Version
  nameWithType: HashListMemTable.Version
  fullName: EventStore.Core.Index.HashListMemTable.Version
- uid: EventStore.Core.Index.ISearchTable.Version
  commentId: P:EventStore.Core.Index.ISearchTable.Version
  parent: EventStore.Core.Index.ISearchTable
  isExternal: false
  name: Version
  nameWithType: ISearchTable.Version
  fullName: EventStore.Core.Index.ISearchTable.Version
- uid: System.Byte
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: EventStore.Core.Index.HashListMemTable.#ctor*
  commentId: Overload:EventStore.Core.Index.HashListMemTable.#ctor
  isExternal: false
  name: HashListMemTable
  nameWithType: HashListMemTable.HashListMemTable
  fullName: EventStore.Core.Index.HashListMemTable.HashListMemTable
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Index.HashListMemTable.MarkForConversion*
  commentId: Overload:EventStore.Core.Index.HashListMemTable.MarkForConversion
  isExternal: false
  name: MarkForConversion
  nameWithType: HashListMemTable.MarkForConversion
  fullName: EventStore.Core.Index.HashListMemTable.MarkForConversion
- uid: EventStore.Core.Index.IMemTable.MarkForConversion
  commentId: M:EventStore.Core.Index.IMemTable.MarkForConversion
  parent: EventStore.Core.Index.IMemTable
  isExternal: false
  name: MarkForConversion()
  nameWithType: IMemTable.MarkForConversion()
  fullName: EventStore.Core.Index.IMemTable.MarkForConversion()
  spec.csharp:
  - uid: EventStore.Core.Index.IMemTable.MarkForConversion
    name: MarkForConversion
    nameWithType: IMemTable.MarkForConversion
    fullName: EventStore.Core.Index.IMemTable.MarkForConversion
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.IMemTable.MarkForConversion
    name: MarkForConversion
    nameWithType: IMemTable.MarkForConversion
    fullName: EventStore.Core.Index.IMemTable.MarkForConversion
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Index.HashListMemTable.Add*
  commentId: Overload:EventStore.Core.Index.HashListMemTable.Add
  isExternal: false
  name: Add
  nameWithType: HashListMemTable.Add
  fullName: EventStore.Core.Index.HashListMemTable.Add
- uid: EventStore.Core.Index.IMemTable.Add(System.UInt64,System.Int64,System.Int64)
  commentId: M:EventStore.Core.Index.IMemTable.Add(System.UInt64,System.Int64,System.Int64)
  parent: EventStore.Core.Index.IMemTable
  isExternal: true
  name: Add(UInt64, Int64, Int64)
  nameWithType: IMemTable.Add(UInt64, Int64, Int64)
  fullName: EventStore.Core.Index.IMemTable.Add(System.UInt64, System.Int64, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Index.IMemTable.Add(System.UInt64,System.Int64,System.Int64)
    name: Add
    nameWithType: IMemTable.Add
    fullName: EventStore.Core.Index.IMemTable.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.IMemTable.Add(System.UInt64,System.Int64,System.Int64)
    name: Add
    nameWithType: IMemTable.Add
    fullName: EventStore.Core.Index.IMemTable.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: EventStore.Core.Index.HashListMemTable.AddEntries*
  commentId: Overload:EventStore.Core.Index.HashListMemTable.AddEntries
  isExternal: false
  name: AddEntries
  nameWithType: HashListMemTable.AddEntries
  fullName: EventStore.Core.Index.HashListMemTable.AddEntries
- uid: EventStore.Core.Index.IMemTable.AddEntries(IList{EventStore.Core.Index.IndexEntry})
  commentId: M:EventStore.Core.Index.IMemTable.AddEntries(IList{EventStore.Core.Index.IndexEntry})
  parent: EventStore.Core.Index.IMemTable
  isExternal: true
  name: AddEntries(IList<IndexEntry>)
  nameWithType: IMemTable.AddEntries(IList<IndexEntry>)
  fullName: EventStore.Core.Index.IMemTable.AddEntries(IList<EventStore.Core.Index.IndexEntry>)
  nameWithType.vb: IMemTable.AddEntries(IList(Of IndexEntry))
  fullName.vb: EventStore.Core.Index.IMemTable.AddEntries(IList(Of EventStore.Core.Index.IndexEntry))
  name.vb: AddEntries(IList(Of IndexEntry))
  spec.csharp:
  - uid: EventStore.Core.Index.IMemTable.AddEntries(IList{EventStore.Core.Index.IndexEntry})
    name: AddEntries
    nameWithType: IMemTable.AddEntries
    fullName: EventStore.Core.Index.IMemTable.AddEntries
  - name: (
    nameWithType: (
    fullName: (
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.IMemTable.AddEntries(IList{EventStore.Core.Index.IndexEntry})
    name: AddEntries
    nameWithType: IMemTable.AddEntries
    fullName: EventStore.Core.Index.IMemTable.AddEntries
  - name: (
    nameWithType: (
    fullName: (
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IList{EventStore.Core.Index.IndexEntry}
  commentId: '!:IList{EventStore.Core.Index.IndexEntry}'
  definition: IList`1
  name: IList<IndexEntry>
  nameWithType: IList<IndexEntry>
  fullName: IList<EventStore.Core.Index.IndexEntry>
  nameWithType.vb: IList(Of IndexEntry)
  fullName.vb: IList(Of EventStore.Core.Index.IndexEntry)
  name.vb: IList(Of IndexEntry)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.HashListMemTable.TryGetOneValue*
  commentId: Overload:EventStore.Core.Index.HashListMemTable.TryGetOneValue
  isExternal: false
  name: TryGetOneValue
  nameWithType: HashListMemTable.TryGetOneValue
  fullName: EventStore.Core.Index.HashListMemTable.TryGetOneValue
- uid: EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  commentId: M:EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  parent: EventStore.Core.Index.ISearchTable
  isExternal: true
  name: TryGetOneValue(UInt64, Int64, Int64)
  nameWithType: ISearchTable.TryGetOneValue(UInt64, Int64, Int64)
  fullName: EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64, System.Int64, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
    name: TryGetOneValue
    nameWithType: ISearchTable.TryGetOneValue
    fullName: EventStore.Core.Index.ISearchTable.TryGetOneValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
    name: TryGetOneValue
    nameWithType: ISearchTable.TryGetOneValue
    fullName: EventStore.Core.Index.ISearchTable.TryGetOneValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.HashListMemTable.TryGetLatestEntry*
  commentId: Overload:EventStore.Core.Index.HashListMemTable.TryGetLatestEntry
  isExternal: false
  name: TryGetLatestEntry
  nameWithType: HashListMemTable.TryGetLatestEntry
  fullName: EventStore.Core.Index.HashListMemTable.TryGetLatestEntry
- uid: EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.ISearchTable
  isExternal: true
  name: TryGetLatestEntry(UInt64, IndexEntry)
  nameWithType: ISearchTable.TryGetLatestEntry(UInt64, IndexEntry)
  fullName: EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64, EventStore.Core.Index.IndexEntry)
  spec.csharp:
  - uid: EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
    name: TryGetLatestEntry
    nameWithType: ISearchTable.TryGetLatestEntry
    fullName: EventStore.Core.Index.ISearchTable.TryGetLatestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
    name: TryGetLatestEntry
    nameWithType: ISearchTable.TryGetLatestEntry
    fullName: EventStore.Core.Index.ISearchTable.TryGetLatestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IndexEntry
  commentId: T:EventStore.Core.Index.IndexEntry
  parent: EventStore.Core.Index
  isExternal: false
  name: IndexEntry
  nameWithType: IndexEntry
  fullName: EventStore.Core.Index.IndexEntry
- uid: EventStore.Core.Index.HashListMemTable.TryGetOldestEntry*
  commentId: Overload:EventStore.Core.Index.HashListMemTable.TryGetOldestEntry
  isExternal: false
  name: TryGetOldestEntry
  nameWithType: HashListMemTable.TryGetOldestEntry
  fullName: EventStore.Core.Index.HashListMemTable.TryGetOldestEntry
- uid: EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.ISearchTable
  isExternal: true
  name: TryGetOldestEntry(UInt64, IndexEntry)
  nameWithType: ISearchTable.TryGetOldestEntry(UInt64, IndexEntry)
  fullName: EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64, EventStore.Core.Index.IndexEntry)
  spec.csharp:
  - uid: EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
    name: TryGetOldestEntry
    nameWithType: ISearchTable.TryGetOldestEntry
    fullName: EventStore.Core.Index.ISearchTable.TryGetOldestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
    name: TryGetOldestEntry
    nameWithType: ISearchTable.TryGetOldestEntry
    fullName: EventStore.Core.Index.ISearchTable.TryGetOldestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.HashListMemTable.IterateAllInOrder*
  commentId: Overload:EventStore.Core.Index.HashListMemTable.IterateAllInOrder
  isExternal: false
  name: IterateAllInOrder
  nameWithType: HashListMemTable.IterateAllInOrder
  fullName: EventStore.Core.Index.HashListMemTable.IterateAllInOrder
- uid: EventStore.Core.Index.ISearchTable.IterateAllInOrder
  commentId: M:EventStore.Core.Index.ISearchTable.IterateAllInOrder
  parent: EventStore.Core.Index.ISearchTable
  isExternal: false
  name: IterateAllInOrder()
  nameWithType: ISearchTable.IterateAllInOrder()
  fullName: EventStore.Core.Index.ISearchTable.IterateAllInOrder()
  spec.csharp:
  - uid: EventStore.Core.Index.ISearchTable.IterateAllInOrder
    name: IterateAllInOrder
    nameWithType: ISearchTable.IterateAllInOrder
    fullName: EventStore.Core.Index.ISearchTable.IterateAllInOrder
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ISearchTable.IterateAllInOrder
    name: IterateAllInOrder
    nameWithType: ISearchTable.IterateAllInOrder
    fullName: EventStore.Core.Index.ISearchTable.IterateAllInOrder
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{EventStore.Core.Index.IndexEntry}
  commentId: '!:IEnumerable{EventStore.Core.Index.IndexEntry}'
  definition: IEnumerable`1
  name: IEnumerable<IndexEntry>
  nameWithType: IEnumerable<IndexEntry>
  fullName: IEnumerable<EventStore.Core.Index.IndexEntry>
  nameWithType.vb: IEnumerable(Of IndexEntry)
  fullName.vb: IEnumerable(Of EventStore.Core.Index.IndexEntry)
  name.vb: IEnumerable(Of IndexEntry)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.HashListMemTable.Clear*
  commentId: Overload:EventStore.Core.Index.HashListMemTable.Clear
  isExternal: false
  name: Clear
  nameWithType: HashListMemTable.Clear
  fullName: EventStore.Core.Index.HashListMemTable.Clear
- uid: EventStore.Core.Index.HashListMemTable.GetRange*
  commentId: Overload:EventStore.Core.Index.HashListMemTable.GetRange
  isExternal: false
  name: GetRange
  nameWithType: HashListMemTable.GetRange
  fullName: EventStore.Core.Index.HashListMemTable.GetRange
- uid: EventStore.Core.Index.ISearchTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  commentId: M:EventStore.Core.Index.ISearchTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  parent: EventStore.Core.Index.ISearchTable
  isExternal: true
  name: GetRange(UInt64, Int64, Int64, Nullable<Int32>)
  nameWithType: ISearchTable.GetRange(UInt64, Int64, Int64, Nullable<Int32>)
  fullName: EventStore.Core.Index.ISearchTable.GetRange(System.UInt64, System.Int64, System.Int64, System.Nullable<System.Int32>)
  nameWithType.vb: ISearchTable.GetRange(UInt64, Int64, Int64, Nullable(Of Int32))
  fullName.vb: EventStore.Core.Index.ISearchTable.GetRange(System.UInt64, System.Int64, System.Int64, System.Nullable(Of System.Int32))
  name.vb: GetRange(UInt64, Int64, Int64, Nullable(Of Int32))
  spec.csharp:
  - uid: EventStore.Core.Index.ISearchTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
    name: GetRange
    nameWithType: ISearchTable.GetRange
    fullName: EventStore.Core.Index.ISearchTable.GetRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ISearchTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
    name: GetRange
    nameWithType: ISearchTable.GetRange
    fullName: EventStore.Core.Index.ISearchTable.GetRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

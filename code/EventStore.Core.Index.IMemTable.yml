### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Index.IMemTable
  commentId: T:EventStore.Core.Index.IMemTable
  id: IMemTable
  parent: EventStore.Core.Index
  children:
  - EventStore.Core.Index.IMemTable.Add(System.UInt64,System.Int64,System.Int64)
  - EventStore.Core.Index.IMemTable.AddEntries(IList{EventStore.Core.Index.IndexEntry})
  - EventStore.Core.Index.IMemTable.MarkForConversion
  langs:
  - csharp
  - vb
  name: IMemTable
  nameWithType: IMemTable
  fullName: EventStore.Core.Index.IMemTable
  type: Interface
  source:
    remote:
      path: src/EventStore.Core/Index/IMemTable.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: IMemTable
    path: ../EventStore/src/EventStore.Core/Index/IMemTable.cs
    startLine: 4
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: 'public interface IMemTable : ISearchTable'
    content.vb: >-
      Public Interface IMemTable
          Inherits ISearchTable
  inheritedMembers:
  - EventStore.Core.Index.ISearchTable.Id
  - EventStore.Core.Index.ISearchTable.Count
  - EventStore.Core.Index.ISearchTable.Version
  - EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  - EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  - EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  - EventStore.Core.Index.ISearchTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  - EventStore.Core.Index.ISearchTable.IterateAllInOrder
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Index.IMemTable.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Index.IMemTable.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EventStore.Core.Index.IMemTable.MarkForConversion
  commentId: M:EventStore.Core.Index.IMemTable.MarkForConversion
  id: MarkForConversion
  parent: EventStore.Core.Index.IMemTable
  langs:
  - csharp
  - vb
  name: MarkForConversion()
  nameWithType: IMemTable.MarkForConversion()
  fullName: EventStore.Core.Index.IMemTable.MarkForConversion()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/IMemTable.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: MarkForConversion
    path: ../EventStore/src/EventStore.Core/Index/IMemTable.cs
    startLine: 6
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: bool MarkForConversion()
    return:
      type: System.Boolean
    content.vb: Function MarkForConversion As Boolean
  overload: EventStore.Core.Index.IMemTable.MarkForConversion*
- uid: EventStore.Core.Index.IMemTable.Add(System.UInt64,System.Int64,System.Int64)
  commentId: M:EventStore.Core.Index.IMemTable.Add(System.UInt64,System.Int64,System.Int64)
  id: Add(System.UInt64,System.Int64,System.Int64)
  parent: EventStore.Core.Index.IMemTable
  langs:
  - csharp
  - vb
  name: Add(UInt64, Int64, Int64)
  nameWithType: IMemTable.Add(UInt64, Int64, Int64)
  fullName: EventStore.Core.Index.IMemTable.Add(System.UInt64, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/IMemTable.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Add
    path: ../EventStore/src/EventStore.Core/Index/IMemTable.cs
    startLine: 7
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: void Add(ulong stream, long version, long position)
    parameters:
    - id: stream
      type: System.UInt64
    - id: version
      type: System.Int64
    - id: position
      type: System.Int64
    content.vb: Sub Add(stream As ULong, version As Long, position As Long)
  overload: EventStore.Core.Index.IMemTable.Add*
- uid: EventStore.Core.Index.IMemTable.AddEntries(IList{EventStore.Core.Index.IndexEntry})
  commentId: M:EventStore.Core.Index.IMemTable.AddEntries(IList{EventStore.Core.Index.IndexEntry})
  id: AddEntries(IList{EventStore.Core.Index.IndexEntry})
  parent: EventStore.Core.Index.IMemTable
  langs:
  - csharp
  - vb
  name: AddEntries(IList<IndexEntry>)
  nameWithType: IMemTable.AddEntries(IList<IndexEntry>)
  fullName: EventStore.Core.Index.IMemTable.AddEntries(IList<EventStore.Core.Index.IndexEntry>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/IMemTable.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: AddEntries
    path: ../EventStore/src/EventStore.Core/Index/IMemTable.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: void AddEntries(IList<IndexEntry> entries)
    parameters:
    - id: entries
      type: IList{EventStore.Core.Index.IndexEntry}
    content.vb: Sub AddEntries(entries As IList(Of IndexEntry))
  overload: EventStore.Core.Index.IMemTable.AddEntries*
  nameWithType.vb: IMemTable.AddEntries(IList(Of IndexEntry))
  fullName.vb: EventStore.Core.Index.IMemTable.AddEntries(IList(Of EventStore.Core.Index.IndexEntry))
  name.vb: AddEntries(IList(Of IndexEntry))
references:
- uid: EventStore.Core.Index
  commentId: N:EventStore.Core.Index
  name: EventStore.Core.Index
  nameWithType: EventStore.Core.Index
  fullName: EventStore.Core.Index
- uid: EventStore.Core.Index.ISearchTable.Id
  commentId: P:EventStore.Core.Index.ISearchTable.Id
  parent: EventStore.Core.Index.ISearchTable
  name: Id
  nameWithType: ISearchTable.Id
  fullName: EventStore.Core.Index.ISearchTable.Id
- uid: EventStore.Core.Index.ISearchTable.Count
  commentId: P:EventStore.Core.Index.ISearchTable.Count
  parent: EventStore.Core.Index.ISearchTable
  name: Count
  nameWithType: ISearchTable.Count
  fullName: EventStore.Core.Index.ISearchTable.Count
- uid: EventStore.Core.Index.ISearchTable.Version
  commentId: P:EventStore.Core.Index.ISearchTable.Version
  parent: EventStore.Core.Index.ISearchTable
  name: Version
  nameWithType: ISearchTable.Version
  fullName: EventStore.Core.Index.ISearchTable.Version
- uid: EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  commentId: M:EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  parent: EventStore.Core.Index.ISearchTable
  isExternal: true
  name: TryGetOneValue(UInt64, Int64, Int64)
  nameWithType: ISearchTable.TryGetOneValue(UInt64, Int64, Int64)
  fullName: EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64, System.Int64, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
    name: TryGetOneValue
    nameWithType: ISearchTable.TryGetOneValue
    fullName: EventStore.Core.Index.ISearchTable.TryGetOneValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
    name: TryGetOneValue
    nameWithType: ISearchTable.TryGetOneValue
    fullName: EventStore.Core.Index.ISearchTable.TryGetOneValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.ISearchTable
  isExternal: true
  name: TryGetLatestEntry(UInt64, IndexEntry)
  nameWithType: ISearchTable.TryGetLatestEntry(UInt64, IndexEntry)
  fullName: EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64, EventStore.Core.Index.IndexEntry)
  spec.csharp:
  - uid: EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
    name: TryGetLatestEntry
    nameWithType: ISearchTable.TryGetLatestEntry
    fullName: EventStore.Core.Index.ISearchTable.TryGetLatestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
    name: TryGetLatestEntry
    nameWithType: ISearchTable.TryGetLatestEntry
    fullName: EventStore.Core.Index.ISearchTable.TryGetLatestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.ISearchTable
  isExternal: true
  name: TryGetOldestEntry(UInt64, IndexEntry)
  nameWithType: ISearchTable.TryGetOldestEntry(UInt64, IndexEntry)
  fullName: EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64, EventStore.Core.Index.IndexEntry)
  spec.csharp:
  - uid: EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
    name: TryGetOldestEntry
    nameWithType: ISearchTable.TryGetOldestEntry
    fullName: EventStore.Core.Index.ISearchTable.TryGetOldestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
    name: TryGetOldestEntry
    nameWithType: ISearchTable.TryGetOldestEntry
    fullName: EventStore.Core.Index.ISearchTable.TryGetOldestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.ISearchTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  commentId: M:EventStore.Core.Index.ISearchTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  parent: EventStore.Core.Index.ISearchTable
  isExternal: true
  name: GetRange(UInt64, Int64, Int64, Nullable<Int32>)
  nameWithType: ISearchTable.GetRange(UInt64, Int64, Int64, Nullable<Int32>)
  fullName: EventStore.Core.Index.ISearchTable.GetRange(System.UInt64, System.Int64, System.Int64, System.Nullable<System.Int32>)
  nameWithType.vb: ISearchTable.GetRange(UInt64, Int64, Int64, Nullable(Of Int32))
  fullName.vb: EventStore.Core.Index.ISearchTable.GetRange(System.UInt64, System.Int64, System.Int64, System.Nullable(Of System.Int32))
  name.vb: GetRange(UInt64, Int64, Int64, Nullable(Of Int32))
  spec.csharp:
  - uid: EventStore.Core.Index.ISearchTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
    name: GetRange
    nameWithType: ISearchTable.GetRange
    fullName: EventStore.Core.Index.ISearchTable.GetRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ISearchTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
    name: GetRange
    nameWithType: ISearchTable.GetRange
    fullName: EventStore.Core.Index.ISearchTable.GetRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.ISearchTable.IterateAllInOrder
  commentId: M:EventStore.Core.Index.ISearchTable.IterateAllInOrder
  parent: EventStore.Core.Index.ISearchTable
  name: IterateAllInOrder()
  nameWithType: ISearchTable.IterateAllInOrder()
  fullName: EventStore.Core.Index.ISearchTable.IterateAllInOrder()
  spec.csharp:
  - uid: EventStore.Core.Index.ISearchTable.IterateAllInOrder
    name: IterateAllInOrder
    nameWithType: ISearchTable.IterateAllInOrder
    fullName: EventStore.Core.Index.ISearchTable.IterateAllInOrder
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ISearchTable.IterateAllInOrder
    name: IterateAllInOrder
    nameWithType: ISearchTable.IterateAllInOrder
    fullName: EventStore.Core.Index.ISearchTable.IterateAllInOrder
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IMemTable.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<IMemTable>()
  nameWithType: ProtobufExtensions.Serialize<IMemTable>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Index.IMemTable>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of IMemTable)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Index.IMemTable)()
  name.vb: Serialize(Of IMemTable)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<IMemTable>
    nameWithType: ProtobufExtensions.Serialize<IMemTable>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Index.IMemTable>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of IMemTable)
    nameWithType: ProtobufExtensions.Serialize(Of IMemTable)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Index.IMemTable)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IMemTable.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<IMemTable>()
  nameWithType: ProtobufExtensions.SerializeToArray<IMemTable>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Index.IMemTable>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of IMemTable)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Index.IMemTable)()
  name.vb: SerializeToArray(Of IMemTable)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<IMemTable>
    nameWithType: ProtobufExtensions.SerializeToArray<IMemTable>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Index.IMemTable>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of IMemTable)
    nameWithType: ProtobufExtensions.SerializeToArray(Of IMemTable)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Index.IMemTable)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.ISearchTable
  commentId: T:EventStore.Core.Index.ISearchTable
  parent: EventStore.Core.Index
  name: ISearchTable
  nameWithType: ISearchTable
  fullName: EventStore.Core.Index.ISearchTable
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Index.IMemTable.MarkForConversion*
  commentId: Overload:EventStore.Core.Index.IMemTable.MarkForConversion
  name: MarkForConversion
  nameWithType: IMemTable.MarkForConversion
  fullName: EventStore.Core.Index.IMemTable.MarkForConversion
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Index.IMemTable.Add*
  commentId: Overload:EventStore.Core.Index.IMemTable.Add
  name: Add
  nameWithType: IMemTable.Add
  fullName: EventStore.Core.Index.IMemTable.Add
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Index.IMemTable.AddEntries*
  commentId: Overload:EventStore.Core.Index.IMemTable.AddEntries
  name: AddEntries
  nameWithType: IMemTable.AddEntries
  fullName: EventStore.Core.Index.IMemTable.AddEntries
- uid: IList{EventStore.Core.Index.IndexEntry}
  commentId: '!:IList{EventStore.Core.Index.IndexEntry}'
  definition: IList`1
  name: IList<IndexEntry>
  nameWithType: IList<IndexEntry>
  fullName: IList<EventStore.Core.Index.IndexEntry>
  nameWithType.vb: IList(Of IndexEntry)
  fullName.vb: IList(Of EventStore.Core.Index.IndexEntry)
  name.vb: IList(Of IndexEntry)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

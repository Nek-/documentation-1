### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Index.IndexEntry
  commentId: T:EventStore.Core.Index.IndexEntry
  id: IndexEntry
  parent: EventStore.Core.Index
  children:
  - EventStore.Core.Index.IndexEntry.#ctor(System.UInt64,System.Int64,System.Int64)
  - EventStore.Core.Index.IndexEntry.Bytes
  - EventStore.Core.Index.IndexEntry.CompareTo(EventStore.Core.Index.IndexEntry)
  - EventStore.Core.Index.IndexEntry.Equals(EventStore.Core.Index.IndexEntry)
  - EventStore.Core.Index.IndexEntry.Position
  - EventStore.Core.Index.IndexEntry.Stream
  - EventStore.Core.Index.IndexEntry.ToString
  - EventStore.Core.Index.IndexEntry.Version
  langs:
  - csharp
  - vb
  name: IndexEntry
  nameWithType: IndexEntry
  fullName: EventStore.Core.Index.IndexEntry
  type: Struct
  source:
    remote:
      path: src/EventStore.Core/Index/IndexEntry.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IndexEntry
    path: ../EventStore/src/EventStore.Core/Index/IndexEntry.cs
    startLine: 5
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: 'public struct IndexEntry : IComparable<IndexEntry>, IEquatable<IndexEntry>'
    content.vb: >-
      Public Structure IndexEntry

          Implements IComparable(Of IndexEntry), IEquatable(Of IndexEntry)
  implements:
  - IComparable{EventStore.Core.Index.IndexEntry}
  - IEquatable{EventStore.Core.Index.IndexEntry}
  extensionMethods:
  - EventStore.Core.Index.IndexEntry.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  - EventStore.Core.Index.IndexEntry.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Index.IndexEntry.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: EventStore.Core.Index.IndexEntry.Bytes
  commentId: F:EventStore.Core.Index.IndexEntry.Bytes
  id: Bytes
  parent: EventStore.Core.Index.IndexEntry
  langs:
  - csharp
  - vb
  name: Bytes
  nameWithType: IndexEntry.Bytes
  fullName: EventStore.Core.Index.IndexEntry.Bytes
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Index/IndexEntry.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Bytes
    path: ../EventStore/src/EventStore.Core/Index/IndexEntry.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public byte *Bytes
    return:
      type: System.Byte*
    content.vb: Public Bytes As Byte
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.IndexEntry.Version
  commentId: F:EventStore.Core.Index.IndexEntry.Version
  id: Version
  parent: EventStore.Core.Index.IndexEntry
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: IndexEntry.Version
  fullName: EventStore.Core.Index.IndexEntry.Version
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Index/IndexEntry.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Version
    path: ../EventStore/src/EventStore.Core/Index/IndexEntry.cs
    startLine: 9
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public Int64 Version
    return:
      type: Int64
    content.vb: Public Version As Int64
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.IndexEntry.Stream
  commentId: F:EventStore.Core.Index.IndexEntry.Stream
  id: Stream
  parent: EventStore.Core.Index.IndexEntry
  langs:
  - csharp
  - vb
  name: Stream
  nameWithType: IndexEntry.Stream
  fullName: EventStore.Core.Index.IndexEntry.Stream
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Index/IndexEntry.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Stream
    path: ../EventStore/src/EventStore.Core/Index/IndexEntry.cs
    startLine: 10
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public UInt64 Stream
    return:
      type: UInt64
    content.vb: Public Stream As UInt64
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.IndexEntry.Position
  commentId: F:EventStore.Core.Index.IndexEntry.Position
  id: Position
  parent: EventStore.Core.Index.IndexEntry
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: IndexEntry.Position
  fullName: EventStore.Core.Index.IndexEntry.Position
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Index/IndexEntry.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Position
    path: ../EventStore/src/EventStore.Core/Index/IndexEntry.cs
    startLine: 11
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public Int64 Position
    return:
      type: Int64
    content.vb: Public Position As Int64
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.IndexEntry.#ctor(System.UInt64,System.Int64,System.Int64)
  commentId: M:EventStore.Core.Index.IndexEntry.#ctor(System.UInt64,System.Int64,System.Int64)
  id: '#ctor(System.UInt64,System.Int64,System.Int64)'
  parent: EventStore.Core.Index.IndexEntry
  langs:
  - csharp
  - vb
  name: IndexEntry(UInt64, Int64, Int64)
  nameWithType: IndexEntry.IndexEntry(UInt64, Int64, Int64)
  fullName: EventStore.Core.Index.IndexEntry.IndexEntry(System.UInt64, System.Int64, System.Int64)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Index/IndexEntry.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Index/IndexEntry.cs
    startLine: 13
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public IndexEntry(ulong stream, long version, long position)
    parameters:
    - id: stream
      type: System.UInt64
    - id: version
      type: System.Int64
    - id: position
      type: System.Int64
    content.vb: Public Sub New(stream As ULong, version As Long, position As Long)
  overload: EventStore.Core.Index.IndexEntry.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.IndexEntry.CompareTo(EventStore.Core.Index.IndexEntry)
  commentId: M:EventStore.Core.Index.IndexEntry.CompareTo(EventStore.Core.Index.IndexEntry)
  id: CompareTo(EventStore.Core.Index.IndexEntry)
  parent: EventStore.Core.Index.IndexEntry
  langs:
  - csharp
  - vb
  name: CompareTo(IndexEntry)
  nameWithType: IndexEntry.CompareTo(IndexEntry)
  fullName: EventStore.Core.Index.IndexEntry.CompareTo(EventStore.Core.Index.IndexEntry)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/IndexEntry.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CompareTo
    path: ../EventStore/src/EventStore.Core/Index/IndexEntry.cs
    startLine: 20
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public int CompareTo(IndexEntry other)
    parameters:
    - id: other
      type: EventStore.Core.Index.IndexEntry
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(other As IndexEntry) As Integer
  overload: EventStore.Core.Index.IndexEntry.CompareTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.IndexEntry.Equals(EventStore.Core.Index.IndexEntry)
  commentId: M:EventStore.Core.Index.IndexEntry.Equals(EventStore.Core.Index.IndexEntry)
  id: Equals(EventStore.Core.Index.IndexEntry)
  parent: EventStore.Core.Index.IndexEntry
  langs:
  - csharp
  - vb
  name: Equals(IndexEntry)
  nameWithType: IndexEntry.Equals(IndexEntry)
  fullName: EventStore.Core.Index.IndexEntry.Equals(EventStore.Core.Index.IndexEntry)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/IndexEntry.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Equals
    path: ../EventStore/src/EventStore.Core/Index/IndexEntry.cs
    startLine: 34
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public bool Equals(IndexEntry other)
    parameters:
    - id: other
      type: EventStore.Core.Index.IndexEntry
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As IndexEntry) As Boolean
  overload: EventStore.Core.Index.IndexEntry.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.IndexEntry.ToString
  commentId: M:EventStore.Core.Index.IndexEntry.ToString
  id: ToString
  parent: EventStore.Core.Index.IndexEntry
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: IndexEntry.ToString()
  fullName: EventStore.Core.Index.IndexEntry.ToString()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/IndexEntry.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ToString
    path: ../EventStore/src/EventStore.Core/Index/IndexEntry.cs
    startLine: 39
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: EventStore.Core.Index.IndexEntry.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: EventStore.Core.Index
  commentId: N:EventStore.Core.Index
  isExternal: false
  name: EventStore.Core.Index
  nameWithType: EventStore.Core.Index
  fullName: EventStore.Core.Index
- uid: IComparable{EventStore.Core.Index.IndexEntry}
  commentId: '!:IComparable{EventStore.Core.Index.IndexEntry}'
  definition: IComparable`1
  name: IComparable<IndexEntry>
  nameWithType: IComparable<IndexEntry>
  fullName: IComparable<EventStore.Core.Index.IndexEntry>
  nameWithType.vb: IComparable(Of IndexEntry)
  fullName.vb: IComparable(Of EventStore.Core.Index.IndexEntry)
  name.vb: IComparable(Of IndexEntry)
  spec.csharp:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: IEquatable{EventStore.Core.Index.IndexEntry}
  commentId: '!:IEquatable{EventStore.Core.Index.IndexEntry}'
  definition: IEquatable`1
  name: IEquatable<IndexEntry>
  nameWithType: IEquatable<IndexEntry>
  fullName: IEquatable<EventStore.Core.Index.IndexEntry>
  nameWithType.vb: IEquatable(Of IndexEntry)
  fullName.vb: IEquatable(Of EventStore.Core.Index.IndexEntry)
  name.vb: IEquatable(Of IndexEntry)
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IndexEntry.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  parent: EventStore.Projections.Core.Utils.EnumExtensions
  definition: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<IndexEntry>()
  nameWithType: EnumExtensions.EnumValueName<IndexEntry>()
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.Core.Index.IndexEntry>()
  nameWithType.vb: EnumExtensions.EnumValueName(Of IndexEntry)()
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.Core.Index.IndexEntry)()
  name.vb: EnumValueName(Of IndexEntry)()
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName<IndexEntry>
    nameWithType: EnumExtensions.EnumValueName<IndexEntry>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.Core.Index.IndexEntry>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName(Of IndexEntry)
    nameWithType: EnumExtensions.EnumValueName(Of IndexEntry)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.Core.Index.IndexEntry)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IndexEntry.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<IndexEntry>()
  nameWithType: ProtobufExtensions.Serialize<IndexEntry>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Index.IndexEntry>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of IndexEntry)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Index.IndexEntry)()
  name.vb: Serialize(Of IndexEntry)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<IndexEntry>
    nameWithType: ProtobufExtensions.Serialize<IndexEntry>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Index.IndexEntry>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of IndexEntry)
    nameWithType: ProtobufExtensions.Serialize(Of IndexEntry)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Index.IndexEntry)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IndexEntry.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<IndexEntry>()
  nameWithType: ProtobufExtensions.SerializeToArray<IndexEntry>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Index.IndexEntry>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of IndexEntry)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Index.IndexEntry)()
  name.vb: SerializeToArray(Of IndexEntry)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<IndexEntry>
    nameWithType: ProtobufExtensions.SerializeToArray<IndexEntry>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Index.IndexEntry>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of IndexEntry)
    nameWithType: ProtobufExtensions.SerializeToArray(Of IndexEntry)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Index.IndexEntry)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: IComparable`1
  isExternal: true
  name: IComparable<>
  nameWithType: IComparable<>
  fullName: IComparable<>
  nameWithType.vb: IComparable(Of )
  fullName.vb: IComparable(Of )
  name.vb: IComparable(Of )
  spec.csharp:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEquatable`1
  isExternal: true
  name: IEquatable<>
  nameWithType: IEquatable<>
  fullName: IEquatable<>
  nameWithType.vb: IEquatable(Of )
  fullName.vb: IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  isExternal: false
  name: EnumValueName<T>(T)
  nameWithType: EnumExtensions.EnumValueName<T>(T)
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>(T)
  nameWithType.vb: EnumExtensions.EnumValueName(Of T)(T)
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)(T)
  name.vb: EnumValueName(Of T)(T)
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName<T>
    nameWithType: EnumExtensions.EnumValueName<T>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName(Of T)
    nameWithType: EnumExtensions.EnumValueName(Of T)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions
  commentId: T:EventStore.Projections.Core.Utils.EnumExtensions
  parent: EventStore.Projections.Core.Utils
  isExternal: false
  name: EnumExtensions
  nameWithType: EnumExtensions
  fullName: EventStore.Projections.Core.Utils.EnumExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils
  commentId: N:EventStore.Projections.Core.Utils
  isExternal: false
  name: EventStore.Projections.Core.Utils
  nameWithType: EventStore.Projections.Core.Utils
  fullName: EventStore.Projections.Core.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Byte*
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: Int64
- uid: UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: UInt64
- uid: EventStore.Core.Index.IndexEntry.#ctor*
  commentId: Overload:EventStore.Core.Index.IndexEntry.#ctor
  isExternal: false
  name: IndexEntry
  nameWithType: IndexEntry.IndexEntry
  fullName: EventStore.Core.Index.IndexEntry.IndexEntry
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Index.IndexEntry.CompareTo*
  commentId: Overload:EventStore.Core.Index.IndexEntry.CompareTo
  isExternal: false
  name: CompareTo
  nameWithType: IndexEntry.CompareTo
  fullName: EventStore.Core.Index.IndexEntry.CompareTo
- uid: EventStore.Core.Index.IndexEntry
  commentId: T:EventStore.Core.Index.IndexEntry
  parent: EventStore.Core.Index
  isExternal: false
  name: IndexEntry
  nameWithType: IndexEntry
  fullName: EventStore.Core.Index.IndexEntry
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Index.IndexEntry.Equals*
  commentId: Overload:EventStore.Core.Index.IndexEntry.Equals
  isExternal: false
  name: Equals
  nameWithType: IndexEntry.Equals
  fullName: EventStore.Core.Index.IndexEntry.Equals
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Index.IndexEntry.ToString*
  commentId: Overload:EventStore.Core.Index.IndexEntry.ToString
  isExternal: false
  name: ToString
  nameWithType: IndexEntry.ToString
  fullName: EventStore.Core.Index.IndexEntry.ToString
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String

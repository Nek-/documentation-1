### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  id: ClientMessage.ReadAllEventsForwardCompleted
  parent: EventStore.Core.Messages
  children:
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.#ctor(Guid,EventStore.Core.Data.ReadAllResult,System.String,EventStore.Core.Data.ResolvedEvent[],EventStore.Core.Data.StreamMetadata,System.Boolean,System.Int32,EventStore.Core.Data.TFPos,EventStore.Core.Data.TFPos,EventStore.Core.Data.TFPos,System.Int64)
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.CorrelationId
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.CurrentPos
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.Error
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.Events
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.IsCachePublic
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.IsEndOfStream
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.MaxCount
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.MsgTypeId
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.NextPos
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.PrevPos
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.Result
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.StreamMetadata
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.TfLastCommitPosition
  langs:
  - csharp
  - vb
  name: ClientMessage.ReadAllEventsForwardCompleted
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ReadAllEventsForwardCompleted
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 738
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: 'public class ReadAllEventsForwardCompleted : ClientMessage.ReadResponseMessage'
    content.vb: >-
      Public Class ReadAllEventsForwardCompleted

          Inherits ClientMessage.ReadResponseMessage
  inheritance:
  - System.Object
  - EventStore.Core.Messaging.Message
  - EventStore.Core.Messages.ClientMessage.ReadResponseMessage
  inheritedMembers:
  - EventStore.Core.Messaging.Message.NextMsgId
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.MsgTypeId
  commentId: P:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.MsgTypeId
  id: MsgTypeId
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: MsgTypeId
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.MsgTypeId
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.MsgTypeId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MsgTypeId
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 741
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public override int MsgTypeId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overrides ReadOnly Property MsgTypeId As Integer
  overridden: EventStore.Core.Messages.ClientMessage.ReadResponseMessage.MsgTypeId
  overload: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.MsgTypeId*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.CorrelationId
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.CorrelationId
  id: CorrelationId
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: CorrelationId
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.CorrelationId
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.CorrelationId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CorrelationId
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 743
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly Guid CorrelationId
    return:
      type: Guid
    content.vb: Public ReadOnly CorrelationId As Guid
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.Result
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.Result
  id: Result
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: Result
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.Result
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.Result
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Result
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 745
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly ReadAllResult Result
    return:
      type: EventStore.Core.Data.ReadAllResult
    content.vb: Public ReadOnly Result As ReadAllResult
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.Error
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.Error
  id: Error
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.Error
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.Error
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Error
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 746
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly string Error
    return:
      type: System.String
    content.vb: Public ReadOnly Error As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.Events
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.Events
  id: Events
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: Events
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.Events
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.Events
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Events
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 748
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly ResolvedEvent[] Events
    return:
      type: EventStore.Core.Data.ResolvedEvent[]
    content.vb: Public ReadOnly Events As ResolvedEvent()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.StreamMetadata
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.StreamMetadata
  id: StreamMetadata
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: StreamMetadata
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.StreamMetadata
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.StreamMetadata
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: StreamMetadata
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 749
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly StreamMetadata StreamMetadata
    return:
      type: EventStore.Core.Data.StreamMetadata
    content.vb: Public ReadOnly StreamMetadata As StreamMetadata
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.IsCachePublic
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.IsCachePublic
  id: IsCachePublic
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: IsCachePublic
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.IsCachePublic
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.IsCachePublic
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IsCachePublic
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 750
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly bool IsCachePublic
    return:
      type: System.Boolean
    content.vb: Public ReadOnly IsCachePublic As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.MaxCount
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.MaxCount
  id: MaxCount
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: MaxCount
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.MaxCount
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.MaxCount
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MaxCount
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 751
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly int MaxCount
    return:
      type: System.Int32
    content.vb: Public ReadOnly MaxCount As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.CurrentPos
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.CurrentPos
  id: CurrentPos
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: CurrentPos
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.CurrentPos
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.CurrentPos
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CurrentPos
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 752
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly TFPos CurrentPos
    return:
      type: EventStore.Core.Data.TFPos
    content.vb: Public ReadOnly CurrentPos As TFPos
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.NextPos
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.NextPos
  id: NextPos
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: NextPos
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.NextPos
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.NextPos
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: NextPos
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 753
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly TFPos NextPos
    return:
      type: EventStore.Core.Data.TFPos
    content.vb: Public ReadOnly NextPos As TFPos
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.PrevPos
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.PrevPos
  id: PrevPos
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: PrevPos
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.PrevPos
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.PrevPos
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: PrevPos
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 754
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly TFPos PrevPos
    return:
      type: EventStore.Core.Data.TFPos
    content.vb: Public ReadOnly PrevPos As TFPos
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.TfLastCommitPosition
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.TfLastCommitPosition
  id: TfLastCommitPosition
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: TfLastCommitPosition
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.TfLastCommitPosition
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.TfLastCommitPosition
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TfLastCommitPosition
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 755
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly long TfLastCommitPosition
    return:
      type: System.Int64
    content.vb: Public ReadOnly TfLastCommitPosition As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.IsEndOfStream
  commentId: P:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.IsEndOfStream
  id: IsEndOfStream
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: IsEndOfStream
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.IsEndOfStream
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.IsEndOfStream
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IsEndOfStream
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 757
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public bool IsEndOfStream { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEndOfStream As Boolean
  overload: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.IsEndOfStream*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.#ctor(Guid,EventStore.Core.Data.ReadAllResult,System.String,EventStore.Core.Data.ResolvedEvent[],EventStore.Core.Data.StreamMetadata,System.Boolean,System.Int32,EventStore.Core.Data.TFPos,EventStore.Core.Data.TFPos,EventStore.Core.Data.TFPos,System.Int64)
  commentId: M:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.#ctor(Guid,EventStore.Core.Data.ReadAllResult,System.String,EventStore.Core.Data.ResolvedEvent[],EventStore.Core.Data.StreamMetadata,System.Boolean,System.Int32,EventStore.Core.Data.TFPos,EventStore.Core.Data.TFPos,EventStore.Core.Data.TFPos,System.Int64)
  id: '#ctor(Guid,EventStore.Core.Data.ReadAllResult,System.String,EventStore.Core.Data.ResolvedEvent[],EventStore.Core.Data.StreamMetadata,System.Boolean,System.Int32,EventStore.Core.Data.TFPos,EventStore.Core.Data.TFPos,EventStore.Core.Data.TFPos,System.Int64)'
  parent: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted
  langs:
  - csharp
  - vb
  name: ReadAllEventsForwardCompleted(Guid, ReadAllResult, String, ResolvedEvent[], StreamMetadata, Boolean, Int32, TFPos, TFPos, TFPos, Int64)
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.ReadAllEventsForwardCompleted(Guid, ReadAllResult, String, ResolvedEvent[], StreamMetadata, Boolean, Int32, TFPos, TFPos, TFPos, Int64)
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.ReadAllEventsForwardCompleted(Guid, EventStore.Core.Data.ReadAllResult, System.String, EventStore.Core.Data.ResolvedEvent[], EventStore.Core.Data.StreamMetadata, System.Boolean, System.Int32, EventStore.Core.Data.TFPos, EventStore.Core.Data.TFPos, EventStore.Core.Data.TFPos, System.Int64)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 759
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public ReadAllEventsForwardCompleted(Guid correlationId, ReadAllResult result, string error, ResolvedEvent[] events, StreamMetadata streamMetadata, bool isCachePublic, int maxCount, TFPos currentPos, TFPos nextPos, TFPos prevPos, long tfLastCommitPosition)
    parameters:
    - id: correlationId
      type: Guid
    - id: result
      type: EventStore.Core.Data.ReadAllResult
    - id: error
      type: System.String
    - id: events
      type: EventStore.Core.Data.ResolvedEvent[]
    - id: streamMetadata
      type: EventStore.Core.Data.StreamMetadata
    - id: isCachePublic
      type: System.Boolean
    - id: maxCount
      type: System.Int32
    - id: currentPos
      type: EventStore.Core.Data.TFPos
    - id: nextPos
      type: EventStore.Core.Data.TFPos
    - id: prevPos
      type: EventStore.Core.Data.TFPos
    - id: tfLastCommitPosition
      type: System.Int64
    content.vb: Public Sub New(correlationId As Guid, result As ReadAllResult, error As String, events As ResolvedEvent(), streamMetadata As StreamMetadata, isCachePublic As Boolean, maxCount As Integer, currentPos As TFPos, nextPos As TFPos, prevPos As TFPos, tfLastCommitPosition As Long)
  overload: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.#ctor*
  nameWithType.vb: ClientMessage.ReadAllEventsForwardCompleted.ReadAllEventsForwardCompleted(Guid, ReadAllResult, String, ResolvedEvent(), StreamMetadata, Boolean, Int32, TFPos, TFPos, TFPos, Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.ReadAllEventsForwardCompleted(Guid, EventStore.Core.Data.ReadAllResult, System.String, EventStore.Core.Data.ResolvedEvent(), EventStore.Core.Data.StreamMetadata, System.Boolean, System.Int32, EventStore.Core.Data.TFPos, EventStore.Core.Data.TFPos, EventStore.Core.Data.TFPos, System.Int64)
  name.vb: ReadAllEventsForwardCompleted(Guid, ReadAllResult, String, ResolvedEvent(), StreamMetadata, Boolean, Int32, TFPos, TFPos, TFPos, Int64)
references:
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  isExternal: false
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messages.ClientMessage.ReadResponseMessage
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadResponseMessage
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.ReadResponseMessage
  nameWithType: ClientMessage.ReadResponseMessage
  fullName: EventStore.Core.Messages.ClientMessage.ReadResponseMessage
- uid: EventStore.Core.Messaging.Message.NextMsgId
  commentId: F:EventStore.Core.Messaging.Message.NextMsgId
  parent: EventStore.Core.Messaging.Message
  isExternal: false
  name: NextMsgId
  nameWithType: Message.NextMsgId
  fullName: EventStore.Core.Messaging.Message.NextMsgId
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ClientMessage.ReadAllEventsForwardCompleted>()
  nameWithType: ProtobufExtensions.Serialize<ClientMessage.ReadAllEventsForwardCompleted>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ClientMessage.ReadAllEventsForwardCompleted)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted)()
  name.vb: Serialize(Of ClientMessage.ReadAllEventsForwardCompleted)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ClientMessage.ReadAllEventsForwardCompleted>
    nameWithType: ProtobufExtensions.Serialize<ClientMessage.ReadAllEventsForwardCompleted>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ClientMessage.ReadAllEventsForwardCompleted)
    nameWithType: ProtobufExtensions.Serialize(Of ClientMessage.ReadAllEventsForwardCompleted)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ClientMessage.ReadAllEventsForwardCompleted>()
  nameWithType: ProtobufExtensions.SerializeToArray<ClientMessage.ReadAllEventsForwardCompleted>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ClientMessage.ReadAllEventsForwardCompleted)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted)()
  name.vb: SerializeToArray(Of ClientMessage.ReadAllEventsForwardCompleted)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ClientMessage.ReadAllEventsForwardCompleted>
    nameWithType: ProtobufExtensions.SerializeToArray<ClientMessage.ReadAllEventsForwardCompleted>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ClientMessage.ReadAllEventsForwardCompleted)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ClientMessage.ReadAllEventsForwardCompleted)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  isExternal: false
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Messages.ClientMessage.ReadResponseMessage.MsgTypeId
  commentId: P:EventStore.Core.Messages.ClientMessage.ReadResponseMessage.MsgTypeId
  parent: EventStore.Core.Messages.ClientMessage.ReadResponseMessage
  isExternal: false
  name: MsgTypeId
  nameWithType: ClientMessage.ReadResponseMessage.MsgTypeId
  fullName: EventStore.Core.Messages.ClientMessage.ReadResponseMessage.MsgTypeId
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.MsgTypeId*
  commentId: Overload:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.MsgTypeId
  isExternal: false
  name: MsgTypeId
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.MsgTypeId
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.MsgTypeId
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: EventStore.Core.Data.ReadAllResult
  commentId: T:EventStore.Core.Data.ReadAllResult
  parent: EventStore.Core.Data
  isExternal: false
  name: ReadAllResult
  nameWithType: ReadAllResult
  fullName: EventStore.Core.Data.ReadAllResult
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  isExternal: false
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Data.ResolvedEvent[]
  name: ResolvedEvent[]
  nameWithType: ResolvedEvent[]
  fullName: EventStore.Core.Data.ResolvedEvent[]
  nameWithType.vb: ResolvedEvent()
  fullName.vb: EventStore.Core.Data.ResolvedEvent()
  name.vb: ResolvedEvent()
  spec.csharp:
  - uid: EventStore.Core.Data.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.Core.Data.ResolvedEvent
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Data.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.Core.Data.ResolvedEvent
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Data.StreamMetadata
  commentId: T:EventStore.Core.Data.StreamMetadata
  parent: EventStore.Core.Data
  isExternal: false
  name: StreamMetadata
  nameWithType: StreamMetadata
  fullName: EventStore.Core.Data.StreamMetadata
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Data.TFPos
  commentId: T:EventStore.Core.Data.TFPos
  parent: EventStore.Core.Data
  isExternal: false
  name: TFPos
  nameWithType: TFPos
  fullName: EventStore.Core.Data.TFPos
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.IsEndOfStream*
  commentId: Overload:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.IsEndOfStream
  isExternal: false
  name: IsEndOfStream
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.IsEndOfStream
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.IsEndOfStream
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.#ctor*
  commentId: Overload:EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.#ctor
  isExternal: false
  name: ReadAllEventsForwardCompleted
  nameWithType: ClientMessage.ReadAllEventsForwardCompleted.ReadAllEventsForwardCompleted
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForwardCompleted.ReadAllEventsForwardCompleted

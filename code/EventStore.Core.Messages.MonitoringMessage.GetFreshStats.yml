### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Messages.MonitoringMessage.GetFreshStats
  commentId: T:EventStore.Core.Messages.MonitoringMessage.GetFreshStats
  id: MonitoringMessage.GetFreshStats
  parent: EventStore.Core.Messages
  children:
  - EventStore.Core.Messages.MonitoringMessage.GetFreshStats.#ctor(EventStore.Core.Messaging.IEnvelope,Func{Dictionary{System.String,System.Object},Dictionary{System.String,System.Object}},System.Boolean,System.Boolean)
  - EventStore.Core.Messages.MonitoringMessage.GetFreshStats.Envelope
  - EventStore.Core.Messages.MonitoringMessage.GetFreshStats.MsgTypeId
  - EventStore.Core.Messages.MonitoringMessage.GetFreshStats.StatsSelector
  - EventStore.Core.Messages.MonitoringMessage.GetFreshStats.UseGrouping
  - EventStore.Core.Messages.MonitoringMessage.GetFreshStats.UseMetadata
  langs:
  - csharp
  - vb
  name: MonitoringMessage.GetFreshStats
  nameWithType: MonitoringMessage.GetFreshStats
  fullName: EventStore.Core.Messages.MonitoringMessage.GetFreshStats
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Messages/MonitoringMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetFreshStats
    path: ../EventStore/src/EventStore.Core/Messages/MonitoringMessage.cs
    startLine: 130
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: 'public class GetFreshStats : Message'
    content.vb: >-
      Public Class GetFreshStats
          Inherits Message
  inheritance:
  - System.Object
  - EventStore.Core.Messaging.Message
  inheritedMembers:
  - EventStore.Core.Messaging.Message.NextMsgId
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Messages.MonitoringMessage.GetFreshStats.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Messages.MonitoringMessage.GetFreshStats.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.MsgTypeId
  commentId: P:EventStore.Core.Messages.MonitoringMessage.GetFreshStats.MsgTypeId
  id: MsgTypeId
  parent: EventStore.Core.Messages.MonitoringMessage.GetFreshStats
  langs:
  - csharp
  - vb
  name: MsgTypeId
  nameWithType: MonitoringMessage.GetFreshStats.MsgTypeId
  fullName: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.MsgTypeId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/MonitoringMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MsgTypeId
    path: ../EventStore/src/EventStore.Core/Messages/MonitoringMessage.cs
    startLine: 133
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public override int MsgTypeId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overrides ReadOnly Property MsgTypeId As Integer
  overridden: EventStore.Core.Messaging.Message.MsgTypeId
  overload: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.MsgTypeId*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.Envelope
  commentId: F:EventStore.Core.Messages.MonitoringMessage.GetFreshStats.Envelope
  id: Envelope
  parent: EventStore.Core.Messages.MonitoringMessage.GetFreshStats
  langs:
  - csharp
  - vb
  name: Envelope
  nameWithType: MonitoringMessage.GetFreshStats.Envelope
  fullName: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.Envelope
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/MonitoringMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Envelope
    path: ../EventStore/src/EventStore.Core/Messages/MonitoringMessage.cs
    startLine: 135
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly IEnvelope Envelope
    return:
      type: EventStore.Core.Messaging.IEnvelope
    content.vb: Public ReadOnly Envelope As IEnvelope
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.StatsSelector
  commentId: F:EventStore.Core.Messages.MonitoringMessage.GetFreshStats.StatsSelector
  id: StatsSelector
  parent: EventStore.Core.Messages.MonitoringMessage.GetFreshStats
  langs:
  - csharp
  - vb
  name: StatsSelector
  nameWithType: MonitoringMessage.GetFreshStats.StatsSelector
  fullName: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.StatsSelector
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/MonitoringMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: StatsSelector
    path: ../EventStore/src/EventStore.Core/Messages/MonitoringMessage.cs
    startLine: 136
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly Func<Dictionary<string, object>, Dictionary<string, object>> StatsSelector
    return:
      type: Func{Dictionary{System.String,System.Object},Dictionary{System.String,System.Object}}
    content.vb: Public ReadOnly StatsSelector As Func(Of Dictionary(Of String, Object), Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.UseMetadata
  commentId: F:EventStore.Core.Messages.MonitoringMessage.GetFreshStats.UseMetadata
  id: UseMetadata
  parent: EventStore.Core.Messages.MonitoringMessage.GetFreshStats
  langs:
  - csharp
  - vb
  name: UseMetadata
  nameWithType: MonitoringMessage.GetFreshStats.UseMetadata
  fullName: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.UseMetadata
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/MonitoringMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: UseMetadata
    path: ../EventStore/src/EventStore.Core/Messages/MonitoringMessage.cs
    startLine: 137
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly bool UseMetadata
    return:
      type: System.Boolean
    content.vb: Public ReadOnly UseMetadata As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.UseGrouping
  commentId: F:EventStore.Core.Messages.MonitoringMessage.GetFreshStats.UseGrouping
  id: UseGrouping
  parent: EventStore.Core.Messages.MonitoringMessage.GetFreshStats
  langs:
  - csharp
  - vb
  name: UseGrouping
  nameWithType: MonitoringMessage.GetFreshStats.UseGrouping
  fullName: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.UseGrouping
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/MonitoringMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: UseGrouping
    path: ../EventStore/src/EventStore.Core/Messages/MonitoringMessage.cs
    startLine: 138
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly bool UseGrouping
    return:
      type: System.Boolean
    content.vb: Public ReadOnly UseGrouping As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.#ctor(EventStore.Core.Messaging.IEnvelope,Func{Dictionary{System.String,System.Object},Dictionary{System.String,System.Object}},System.Boolean,System.Boolean)
  commentId: M:EventStore.Core.Messages.MonitoringMessage.GetFreshStats.#ctor(EventStore.Core.Messaging.IEnvelope,Func{Dictionary{System.String,System.Object},Dictionary{System.String,System.Object}},System.Boolean,System.Boolean)
  id: '#ctor(EventStore.Core.Messaging.IEnvelope,Func{Dictionary{System.String,System.Object},Dictionary{System.String,System.Object}},System.Boolean,System.Boolean)'
  parent: EventStore.Core.Messages.MonitoringMessage.GetFreshStats
  langs:
  - csharp
  - vb
  name: GetFreshStats(IEnvelope, Func<Dictionary<String, Object>, Dictionary<String, Object>>, Boolean, Boolean)
  nameWithType: MonitoringMessage.GetFreshStats.GetFreshStats(IEnvelope, Func<Dictionary<String, Object>, Dictionary<String, Object>>, Boolean, Boolean)
  fullName: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.GetFreshStats(EventStore.Core.Messaging.IEnvelope, Func<Dictionary<System.String, System.Object>, Dictionary<System.String, System.Object>>, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/MonitoringMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/MonitoringMessage.cs
    startLine: 140
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public GetFreshStats(IEnvelope envelope, Func<Dictionary<string, object>, Dictionary<string, object>> statsSelector, bool useMetadata, bool useGrouping)
    parameters:
    - id: envelope
      type: EventStore.Core.Messaging.IEnvelope
    - id: statsSelector
      type: Func{Dictionary{System.String,System.Object},Dictionary{System.String,System.Object}}
    - id: useMetadata
      type: System.Boolean
    - id: useGrouping
      type: System.Boolean
    content.vb: Public Sub New(envelope As IEnvelope, statsSelector As Func(Of Dictionary(Of String, Object), Dictionary(Of String, Object)), useMetadata As Boolean, useGrouping As Boolean)
  overload: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.#ctor*
  nameWithType.vb: MonitoringMessage.GetFreshStats.GetFreshStats(IEnvelope, Func(Of Dictionary(Of String, Object), Dictionary(Of String, Object)), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.GetFreshStats(EventStore.Core.Messaging.IEnvelope, Func(Of Dictionary(Of System.String, System.Object), Dictionary(Of System.String, System.Object)), System.Boolean, System.Boolean)
  name.vb: GetFreshStats(IEnvelope, Func(Of Dictionary(Of String, Object), Dictionary(Of String, Object)), Boolean, Boolean)
references:
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  isExternal: false
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messaging.Message.NextMsgId
  commentId: F:EventStore.Core.Messaging.Message.NextMsgId
  parent: EventStore.Core.Messaging.Message
  isExternal: false
  name: NextMsgId
  nameWithType: Message.NextMsgId
  fullName: EventStore.Core.Messaging.Message.NextMsgId
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<MonitoringMessage.GetFreshStats>()
  nameWithType: ProtobufExtensions.Serialize<MonitoringMessage.GetFreshStats>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.MonitoringMessage.GetFreshStats>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of MonitoringMessage.GetFreshStats)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.MonitoringMessage.GetFreshStats)()
  name.vb: Serialize(Of MonitoringMessage.GetFreshStats)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<MonitoringMessage.GetFreshStats>
    nameWithType: ProtobufExtensions.Serialize<MonitoringMessage.GetFreshStats>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.MonitoringMessage.GetFreshStats>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of MonitoringMessage.GetFreshStats)
    nameWithType: ProtobufExtensions.Serialize(Of MonitoringMessage.GetFreshStats)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.MonitoringMessage.GetFreshStats)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<MonitoringMessage.GetFreshStats>()
  nameWithType: ProtobufExtensions.SerializeToArray<MonitoringMessage.GetFreshStats>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.MonitoringMessage.GetFreshStats>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of MonitoringMessage.GetFreshStats)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.MonitoringMessage.GetFreshStats)()
  name.vb: SerializeToArray(Of MonitoringMessage.GetFreshStats)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<MonitoringMessage.GetFreshStats>
    nameWithType: ProtobufExtensions.SerializeToArray<MonitoringMessage.GetFreshStats>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.MonitoringMessage.GetFreshStats>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of MonitoringMessage.GetFreshStats)
    nameWithType: ProtobufExtensions.SerializeToArray(Of MonitoringMessage.GetFreshStats)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.MonitoringMessage.GetFreshStats)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  isExternal: false
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Messaging.Message.MsgTypeId
  commentId: P:EventStore.Core.Messaging.Message.MsgTypeId
  parent: EventStore.Core.Messaging.Message
  isExternal: false
  name: MsgTypeId
  nameWithType: Message.MsgTypeId
  fullName: EventStore.Core.Messaging.Message.MsgTypeId
- uid: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.MsgTypeId*
  commentId: Overload:EventStore.Core.Messages.MonitoringMessage.GetFreshStats.MsgTypeId
  isExternal: false
  name: MsgTypeId
  nameWithType: MonitoringMessage.GetFreshStats.MsgTypeId
  fullName: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.MsgTypeId
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Messaging.IEnvelope
  commentId: T:EventStore.Core.Messaging.IEnvelope
  parent: EventStore.Core.Messaging
  isExternal: false
  name: IEnvelope
  nameWithType: IEnvelope
  fullName: EventStore.Core.Messaging.IEnvelope
- uid: Func{Dictionary{System.String,System.Object},Dictionary{System.String,System.Object}}
  commentId: '!:Func{Dictionary{System.String,System.Object},Dictionary{System.String,System.Object}}'
  definition: Func`2
  name: Func<Dictionary<String, Object>, Dictionary<String, Object>>
  nameWithType: Func<Dictionary<String, Object>, Dictionary<String, Object>>
  fullName: Func<Dictionary<System.String, System.Object>, Dictionary<System.String, System.Object>>
  nameWithType.vb: Func(Of Dictionary(Of String, Object), Dictionary(Of String, Object))
  fullName.vb: Func(Of Dictionary(Of System.String, System.Object), Dictionary(Of System.String, System.Object))
  name.vb: Func(Of Dictionary(Of String, Object), Dictionary(Of String, Object))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.#ctor*
  commentId: Overload:EventStore.Core.Messages.MonitoringMessage.GetFreshStats.#ctor
  isExternal: false
  name: GetFreshStats
  nameWithType: MonitoringMessage.GetFreshStats.GetFreshStats
  fullName: EventStore.Core.Messages.MonitoringMessage.GetFreshStats.GetFreshStats

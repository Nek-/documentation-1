### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted
  commentId: T:EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted
  id: MonitoringMessage.GetPersistentSubscriptionStatsCompleted
  parent: EventStore.Core.Messages
  children:
  - EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.#ctor(EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus,List{EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo},System.String)
  - EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.ErrorString
  - EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.MsgTypeId
  - EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.Result
  - EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.SubscriptionStats
  langs:
  - csharp
  - vb
  name: MonitoringMessage.GetPersistentSubscriptionStatsCompleted
  nameWithType: MonitoringMessage.GetPersistentSubscriptionStatsCompleted
  fullName: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Messages/MonitoringMessage.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: GetPersistentSubscriptionStatsCompleted
    path: ../EventStore/src/EventStore.Core/Messages/MonitoringMessage.cs
    startLine: 63
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: 'public class GetPersistentSubscriptionStatsCompleted : Message'
    content.vb: >-
      Public Class GetPersistentSubscriptionStatsCompleted
          Inherits Message
  inheritance:
  - System.Object
  - EventStore.Core.Messaging.Message
  inheritedMembers:
  - EventStore.Core.Messaging.Message.NextMsgId
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.MsgTypeId
  commentId: P:EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.MsgTypeId
  id: MsgTypeId
  parent: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted
  langs:
  - csharp
  - vb
  name: MsgTypeId
  nameWithType: MonitoringMessage.GetPersistentSubscriptionStatsCompleted.MsgTypeId
  fullName: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.MsgTypeId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/MonitoringMessage.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: MsgTypeId
    path: ../EventStore/src/EventStore.Core/Messages/MonitoringMessage.cs
    startLine: 66
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public override int MsgTypeId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overrides ReadOnly Property MsgTypeId As Integer
  overridden: EventStore.Core.Messaging.Message.MsgTypeId
  overload: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.MsgTypeId*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.Result
  commentId: F:EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.Result
  id: Result
  parent: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted
  langs:
  - csharp
  - vb
  name: Result
  nameWithType: MonitoringMessage.GetPersistentSubscriptionStatsCompleted.Result
  fullName: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.Result
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/MonitoringMessage.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Result
    path: ../EventStore/src/EventStore.Core/Messages/MonitoringMessage.cs
    startLine: 68
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus Result
    return:
      type: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus
    content.vb: Public ReadOnly Result As MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.SubscriptionStats
  commentId: F:EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.SubscriptionStats
  id: SubscriptionStats
  parent: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted
  langs:
  - csharp
  - vb
  name: SubscriptionStats
  nameWithType: MonitoringMessage.GetPersistentSubscriptionStatsCompleted.SubscriptionStats
  fullName: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.SubscriptionStats
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/MonitoringMessage.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: SubscriptionStats
    path: ../EventStore/src/EventStore.Core/Messages/MonitoringMessage.cs
    startLine: 69
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly List<MonitoringMessage.SubscriptionInfo> SubscriptionStats
    return:
      type: List{EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo}
    content.vb: Public ReadOnly SubscriptionStats As List(Of MonitoringMessage.SubscriptionInfo)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.ErrorString
  commentId: F:EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.ErrorString
  id: ErrorString
  parent: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted
  langs:
  - csharp
  - vb
  name: ErrorString
  nameWithType: MonitoringMessage.GetPersistentSubscriptionStatsCompleted.ErrorString
  fullName: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.ErrorString
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/MonitoringMessage.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ErrorString
    path: ../EventStore/src/EventStore.Core/Messages/MonitoringMessage.cs
    startLine: 70
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public string ErrorString
    return:
      type: System.String
    content.vb: Public ErrorString As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.#ctor(EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus,List{EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo},System.String)
  commentId: M:EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.#ctor(EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus,List{EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo},System.String)
  id: '#ctor(EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus,List{EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo},System.String)'
  parent: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted
  langs:
  - csharp
  - vb
  name: GetPersistentSubscriptionStatsCompleted(MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus, List<MonitoringMessage.SubscriptionInfo>, String)
  nameWithType: MonitoringMessage.GetPersistentSubscriptionStatsCompleted.GetPersistentSubscriptionStatsCompleted(MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus, List<MonitoringMessage.SubscriptionInfo>, String)
  fullName: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.GetPersistentSubscriptionStatsCompleted(EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus, List<EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo>, System.String)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/MonitoringMessage.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/MonitoringMessage.cs
    startLine: 72
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public GetPersistentSubscriptionStatsCompleted(MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus result, List<MonitoringMessage.SubscriptionInfo> subscriptionStats, string errorString = "")
    parameters:
    - id: result
      type: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus
    - id: subscriptionStats
      type: List{EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo}
    - id: errorString
      type: System.String
    content.vb: Public Sub New(result As MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus, subscriptionStats As List(Of MonitoringMessage.SubscriptionInfo), errorString As String = "")
  overload: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.#ctor*
  nameWithType.vb: MonitoringMessage.GetPersistentSubscriptionStatsCompleted.GetPersistentSubscriptionStatsCompleted(MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus, List(Of MonitoringMessage.SubscriptionInfo), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.GetPersistentSubscriptionStatsCompleted(EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus, List(Of EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo), System.String)
  name.vb: GetPersistentSubscriptionStatsCompleted(MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus, List(Of MonitoringMessage.SubscriptionInfo), String)
references:
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messaging.Message.NextMsgId
  commentId: F:EventStore.Core.Messaging.Message.NextMsgId
  parent: EventStore.Core.Messaging.Message
  name: NextMsgId
  nameWithType: Message.NextMsgId
  fullName: EventStore.Core.Messaging.Message.NextMsgId
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<MonitoringMessage.GetPersistentSubscriptionStatsCompleted>()
  nameWithType: ProtobufExtensions.Serialize<MonitoringMessage.GetPersistentSubscriptionStatsCompleted>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of MonitoringMessage.GetPersistentSubscriptionStatsCompleted)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted)()
  name.vb: Serialize(Of MonitoringMessage.GetPersistentSubscriptionStatsCompleted)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<MonitoringMessage.GetPersistentSubscriptionStatsCompleted>
    nameWithType: ProtobufExtensions.Serialize<MonitoringMessage.GetPersistentSubscriptionStatsCompleted>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of MonitoringMessage.GetPersistentSubscriptionStatsCompleted)
    nameWithType: ProtobufExtensions.Serialize(Of MonitoringMessage.GetPersistentSubscriptionStatsCompleted)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<MonitoringMessage.GetPersistentSubscriptionStatsCompleted>()
  nameWithType: ProtobufExtensions.SerializeToArray<MonitoringMessage.GetPersistentSubscriptionStatsCompleted>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of MonitoringMessage.GetPersistentSubscriptionStatsCompleted)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted)()
  name.vb: SerializeToArray(Of MonitoringMessage.GetPersistentSubscriptionStatsCompleted)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<MonitoringMessage.GetPersistentSubscriptionStatsCompleted>
    nameWithType: ProtobufExtensions.SerializeToArray<MonitoringMessage.GetPersistentSubscriptionStatsCompleted>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of MonitoringMessage.GetPersistentSubscriptionStatsCompleted)
    nameWithType: ProtobufExtensions.SerializeToArray(Of MonitoringMessage.GetPersistentSubscriptionStatsCompleted)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Messaging.Message.MsgTypeId
  commentId: P:EventStore.Core.Messaging.Message.MsgTypeId
  parent: EventStore.Core.Messaging.Message
  name: MsgTypeId
  nameWithType: Message.MsgTypeId
  fullName: EventStore.Core.Messaging.Message.MsgTypeId
- uid: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.MsgTypeId*
  commentId: Overload:EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.MsgTypeId
  name: MsgTypeId
  nameWithType: MonitoringMessage.GetPersistentSubscriptionStatsCompleted.MsgTypeId
  fullName: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.MsgTypeId
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus
  commentId: T:EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus
  parent: EventStore.Core.Messages
  name: MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus
  nameWithType: MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus
  fullName: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus
- uid: List{EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo}
  commentId: '!:List{EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo}'
  definition: List`1
  name: List<MonitoringMessage.SubscriptionInfo>
  nameWithType: List<MonitoringMessage.SubscriptionInfo>
  fullName: List<EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo>
  nameWithType.vb: List(Of MonitoringMessage.SubscriptionInfo)
  fullName.vb: List(Of EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo)
  name.vb: List(Of MonitoringMessage.SubscriptionInfo)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo
    name: MonitoringMessage.SubscriptionInfo
    nameWithType: MonitoringMessage.SubscriptionInfo
    fullName: EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo
    name: MonitoringMessage.SubscriptionInfo
    nameWithType: MonitoringMessage.SubscriptionInfo
    fullName: EventStore.Core.Messages.MonitoringMessage.SubscriptionInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.#ctor*
  commentId: Overload:EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.#ctor
  name: GetPersistentSubscriptionStatsCompleted
  nameWithType: MonitoringMessage.GetPersistentSubscriptionStatsCompleted.GetPersistentSubscriptionStatsCompleted
  fullName: EventStore.Core.Messages.MonitoringMessage.GetPersistentSubscriptionStatsCompleted.GetPersistentSubscriptionStatsCompleted

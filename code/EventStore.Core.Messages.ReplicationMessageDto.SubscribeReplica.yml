### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica
  commentId: T:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica
  id: ReplicationMessageDto.SubscribeReplica
  parent: EventStore.Core.Messages
  children:
  - EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.#ctor
  - EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.#ctor(System.Int64,System.Byte[],EventStore.Core.Messages.ReplicationMessageDto.Epoch[],System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Boolean)
  - EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.ChunkId
  - EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Ip
  - EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.IsPromotable
  - EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LastEpochs
  - EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LogPosition
  - EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.MasterId
  - EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Port
  - EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.SubscriptionId
  langs:
  - csharp
  - vb
  name: ReplicationMessageDto.SubscribeReplica
  nameWithType: ReplicationMessageDto.SubscribeReplica
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Messages/ReplicationMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: SubscribeReplica
    path: ../EventStore/src/EventStore.Core/Messages/ReplicationMessageDto.cs
    startLine: 79
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: 'public class SubscribeReplica : object'
    content.vb: >-
      Public Class SubscribeReplica
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LogPosition
  commentId: P:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LogPosition
  id: LogPosition
  parent: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica
  langs:
  - csharp
  - vb
  name: LogPosition
  nameWithType: ReplicationMessageDto.SubscribeReplica.LogPosition
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LogPosition
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/ReplicationMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: LogPosition
    path: ../EventStore/src/EventStore.Core/Messages/ReplicationMessageDto.cs
    startLine: 82
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public long LogPosition { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Property LogPosition As Long
  overload: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LogPosition*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.ChunkId
  commentId: P:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.ChunkId
  id: ChunkId
  parent: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica
  langs:
  - csharp
  - vb
  name: ChunkId
  nameWithType: ReplicationMessageDto.SubscribeReplica.ChunkId
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.ChunkId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/ReplicationMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ChunkId
    path: ../EventStore/src/EventStore.Core/Messages/ReplicationMessageDto.cs
    startLine: 85
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public byte[] ChunkId { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public Property ChunkId As Byte()
  overload: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.ChunkId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LastEpochs
  commentId: P:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LastEpochs
  id: LastEpochs
  parent: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica
  langs:
  - csharp
  - vb
  name: LastEpochs
  nameWithType: ReplicationMessageDto.SubscribeReplica.LastEpochs
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LastEpochs
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/ReplicationMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: LastEpochs
    path: ../EventStore/src/EventStore.Core/Messages/ReplicationMessageDto.cs
    startLine: 88
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public ReplicationMessageDto.Epoch[] LastEpochs { get; set; }
    parameters: []
    return:
      type: EventStore.Core.Messages.ReplicationMessageDto.Epoch[]
    content.vb: Public Property LastEpochs As ReplicationMessageDto.Epoch()
  overload: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LastEpochs*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Ip
  commentId: P:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Ip
  id: Ip
  parent: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica
  langs:
  - csharp
  - vb
  name: Ip
  nameWithType: ReplicationMessageDto.SubscribeReplica.Ip
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Ip
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/ReplicationMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Ip
    path: ../EventStore/src/EventStore.Core/Messages/ReplicationMessageDto.cs
    startLine: 91
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public byte[] Ip { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public Property Ip As Byte()
  overload: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Ip*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Port
  commentId: P:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Port
  id: Port
  parent: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica
  langs:
  - csharp
  - vb
  name: Port
  nameWithType: ReplicationMessageDto.SubscribeReplica.Port
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Port
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/ReplicationMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Port
    path: ../EventStore/src/EventStore.Core/Messages/ReplicationMessageDto.cs
    startLine: 94
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public int Port { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Port As Integer
  overload: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Port*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.MasterId
  commentId: P:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.MasterId
  id: MasterId
  parent: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica
  langs:
  - csharp
  - vb
  name: MasterId
  nameWithType: ReplicationMessageDto.SubscribeReplica.MasterId
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.MasterId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/ReplicationMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MasterId
    path: ../EventStore/src/EventStore.Core/Messages/ReplicationMessageDto.cs
    startLine: 97
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public byte[] MasterId { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public Property MasterId As Byte()
  overload: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.MasterId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.SubscriptionId
  commentId: P:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.SubscriptionId
  id: SubscriptionId
  parent: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica
  langs:
  - csharp
  - vb
  name: SubscriptionId
  nameWithType: ReplicationMessageDto.SubscribeReplica.SubscriptionId
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.SubscriptionId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/ReplicationMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: SubscriptionId
    path: ../EventStore/src/EventStore.Core/Messages/ReplicationMessageDto.cs
    startLine: 100
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public byte[] SubscriptionId { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public Property SubscriptionId As Byte()
  overload: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.SubscriptionId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.IsPromotable
  commentId: P:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.IsPromotable
  id: IsPromotable
  parent: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica
  langs:
  - csharp
  - vb
  name: IsPromotable
  nameWithType: ReplicationMessageDto.SubscribeReplica.IsPromotable
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.IsPromotable
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/ReplicationMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IsPromotable
    path: ../EventStore/src/EventStore.Core/Messages/ReplicationMessageDto.cs
    startLine: 103
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public bool IsPromotable { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsPromotable As Boolean
  overload: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.IsPromotable*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.#ctor
  commentId: M:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.#ctor
  id: '#ctor'
  parent: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica
  langs:
  - csharp
  - vb
  name: SubscribeReplica()
  nameWithType: ReplicationMessageDto.SubscribeReplica.SubscribeReplica()
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.SubscribeReplica()
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/ReplicationMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/ReplicationMessageDto.cs
    startLine: 106
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public SubscribeReplica()
    content.vb: Public Sub New
  overload: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.#ctor(System.Int64,System.Byte[],EventStore.Core.Messages.ReplicationMessageDto.Epoch[],System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Boolean)
  commentId: M:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.#ctor(System.Int64,System.Byte[],EventStore.Core.Messages.ReplicationMessageDto.Epoch[],System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Boolean)
  id: '#ctor(System.Int64,System.Byte[],EventStore.Core.Messages.ReplicationMessageDto.Epoch[],System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Boolean)'
  parent: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica
  langs:
  - csharp
  - vb
  name: SubscribeReplica(Int64, Byte[], ReplicationMessageDto.Epoch[], Byte[], Int32, Byte[], Byte[], Boolean)
  nameWithType: ReplicationMessageDto.SubscribeReplica.SubscribeReplica(Int64, Byte[], ReplicationMessageDto.Epoch[], Byte[], Int32, Byte[], Byte[], Boolean)
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.SubscribeReplica(System.Int64, System.Byte[], EventStore.Core.Messages.ReplicationMessageDto.Epoch[], System.Byte[], System.Int32, System.Byte[], System.Byte[], System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/ReplicationMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/ReplicationMessageDto.cs
    startLine: 110
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public SubscribeReplica(long logPosition, byte[] chunkId, ReplicationMessageDto.Epoch[] lastEpochs, byte[] ip, int port, byte[] masterId, byte[] subscriptionId, bool isPromotable)
    parameters:
    - id: logPosition
      type: System.Int64
    - id: chunkId
      type: System.Byte[]
    - id: lastEpochs
      type: EventStore.Core.Messages.ReplicationMessageDto.Epoch[]
    - id: ip
      type: System.Byte[]
    - id: port
      type: System.Int32
    - id: masterId
      type: System.Byte[]
    - id: subscriptionId
      type: System.Byte[]
    - id: isPromotable
      type: System.Boolean
    content.vb: Public Sub New(logPosition As Long, chunkId As Byte(), lastEpochs As ReplicationMessageDto.Epoch(), ip As Byte(), port As Integer, masterId As Byte(), subscriptionId As Byte(), isPromotable As Boolean)
  overload: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.#ctor*
  nameWithType.vb: ReplicationMessageDto.SubscribeReplica.SubscribeReplica(Int64, Byte(), ReplicationMessageDto.Epoch(), Byte(), Int32, Byte(), Byte(), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.SubscribeReplica(System.Int64, System.Byte(), EventStore.Core.Messages.ReplicationMessageDto.Epoch(), System.Byte(), System.Int32, System.Byte(), System.Byte(), System.Boolean)
  name.vb: SubscribeReplica(Int64, Byte(), ReplicationMessageDto.Epoch(), Byte(), Int32, Byte(), Byte(), Boolean)
references:
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  isExternal: false
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ReplicationMessageDto.SubscribeReplica>()
  nameWithType: ProtobufExtensions.Serialize<ReplicationMessageDto.SubscribeReplica>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ReplicationMessageDto.SubscribeReplica)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica)()
  name.vb: Serialize(Of ReplicationMessageDto.SubscribeReplica)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ReplicationMessageDto.SubscribeReplica>
    nameWithType: ProtobufExtensions.Serialize<ReplicationMessageDto.SubscribeReplica>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ReplicationMessageDto.SubscribeReplica)
    nameWithType: ProtobufExtensions.Serialize(Of ReplicationMessageDto.SubscribeReplica)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ReplicationMessageDto.SubscribeReplica>()
  nameWithType: ProtobufExtensions.SerializeToArray<ReplicationMessageDto.SubscribeReplica>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ReplicationMessageDto.SubscribeReplica)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica)()
  name.vb: SerializeToArray(Of ReplicationMessageDto.SubscribeReplica)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ReplicationMessageDto.SubscribeReplica>
    nameWithType: ProtobufExtensions.SerializeToArray<ReplicationMessageDto.SubscribeReplica>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ReplicationMessageDto.SubscribeReplica)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ReplicationMessageDto.SubscribeReplica)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LogPosition*
  commentId: Overload:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LogPosition
  isExternal: false
  name: LogPosition
  nameWithType: ReplicationMessageDto.SubscribeReplica.LogPosition
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LogPosition
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.ChunkId*
  commentId: Overload:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.ChunkId
  isExternal: false
  name: ChunkId
  nameWithType: ReplicationMessageDto.SubscribeReplica.ChunkId
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.ChunkId
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LastEpochs*
  commentId: Overload:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LastEpochs
  isExternal: false
  name: LastEpochs
  nameWithType: ReplicationMessageDto.SubscribeReplica.LastEpochs
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.LastEpochs
- uid: EventStore.Core.Messages.ReplicationMessageDto.Epoch[]
  name: ReplicationMessageDto.Epoch[]
  nameWithType: ReplicationMessageDto.Epoch[]
  fullName: EventStore.Core.Messages.ReplicationMessageDto.Epoch[]
  nameWithType.vb: ReplicationMessageDto.Epoch()
  fullName.vb: EventStore.Core.Messages.ReplicationMessageDto.Epoch()
  name.vb: ReplicationMessageDto.Epoch()
  spec.csharp:
  - uid: EventStore.Core.Messages.ReplicationMessageDto.Epoch
    name: ReplicationMessageDto.Epoch
    nameWithType: ReplicationMessageDto.Epoch
    fullName: EventStore.Core.Messages.ReplicationMessageDto.Epoch
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Messages.ReplicationMessageDto.Epoch
    name: ReplicationMessageDto.Epoch
    nameWithType: ReplicationMessageDto.Epoch
    fullName: EventStore.Core.Messages.ReplicationMessageDto.Epoch
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Ip*
  commentId: Overload:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Ip
  isExternal: false
  name: Ip
  nameWithType: ReplicationMessageDto.SubscribeReplica.Ip
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Ip
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Port*
  commentId: Overload:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Port
  isExternal: false
  name: Port
  nameWithType: ReplicationMessageDto.SubscribeReplica.Port
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.Port
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.MasterId*
  commentId: Overload:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.MasterId
  isExternal: false
  name: MasterId
  nameWithType: ReplicationMessageDto.SubscribeReplica.MasterId
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.MasterId
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.SubscriptionId*
  commentId: Overload:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.SubscriptionId
  isExternal: false
  name: SubscriptionId
  nameWithType: ReplicationMessageDto.SubscribeReplica.SubscriptionId
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.SubscriptionId
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.IsPromotable*
  commentId: Overload:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.IsPromotable
  isExternal: false
  name: IsPromotable
  nameWithType: ReplicationMessageDto.SubscribeReplica.IsPromotable
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.IsPromotable
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.#ctor*
  commentId: Overload:EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.#ctor
  isExternal: false
  name: SubscribeReplica
  nameWithType: ReplicationMessageDto.SubscribeReplica.SubscribeReplica
  fullName: EventStore.Core.Messages.ReplicationMessageDto.SubscribeReplica.SubscribeReplica

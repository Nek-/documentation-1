### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete
  commentId: T:EventStore.Core.Messages.StorageMessage.WriteDelete
  id: StorageMessage.WriteDelete
  parent: EventStore.Core.Messages
  children:
  - EventStore.Core.Messages.StorageMessage.WriteDelete.#ctor(Guid,EventStore.Core.Messaging.IEnvelope,System.String,System.Int64,System.Boolean,DateTime)
  - EventStore.Core.Messages.StorageMessage.WriteDelete.CorrelationId
  - EventStore.Core.Messages.StorageMessage.WriteDelete.Envelope
  - EventStore.Core.Messages.StorageMessage.WriteDelete.EventStreamId
  - EventStore.Core.Messages.StorageMessage.WriteDelete.ExpectedVersion
  - EventStore.Core.Messages.StorageMessage.WriteDelete.HardDelete
  - EventStore.Core.Messages.StorageMessage.WriteDelete.LiveUntil
  - EventStore.Core.Messages.StorageMessage.WriteDelete.MsgTypeId
  langs:
  - csharp
  - vb
  name: StorageMessage.WriteDelete
  nameWithType: StorageMessage.WriteDelete
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: WriteDelete
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 61
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: 'public class WriteDelete : Message, StorageMessage.IPreconditionedWriteMessage, StorageMessage.IFlushableMessage, StorageMessage.IMasterWriteMessage'
    content.vb: >-
      Public Class WriteDelete

          Inherits Message

          Implements StorageMessage.IPreconditionedWriteMessage, StorageMessage.IFlushableMessage, StorageMessage.IMasterWriteMessage
  inheritance:
  - System.Object
  - EventStore.Core.Messaging.Message
  implements:
  - EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage
  - EventStore.Core.Messages.StorageMessage.IFlushableMessage
  - EventStore.Core.Messages.StorageMessage.IMasterWriteMessage
  inheritedMembers:
  - EventStore.Core.Messaging.Message.NextMsgId
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Messages.StorageMessage.WriteDelete.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Messages.StorageMessage.WriteDelete.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.MsgTypeId
  commentId: P:EventStore.Core.Messages.StorageMessage.WriteDelete.MsgTypeId
  id: MsgTypeId
  parent: EventStore.Core.Messages.StorageMessage.WriteDelete
  langs:
  - csharp
  - vb
  name: MsgTypeId
  nameWithType: StorageMessage.WriteDelete.MsgTypeId
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.MsgTypeId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MsgTypeId
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 64
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public override int MsgTypeId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overrides ReadOnly Property MsgTypeId As Integer
  overridden: EventStore.Core.Messaging.Message.MsgTypeId
  overload: EventStore.Core.Messages.StorageMessage.WriteDelete.MsgTypeId*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.CorrelationId
  commentId: P:EventStore.Core.Messages.StorageMessage.WriteDelete.CorrelationId
  id: CorrelationId
  parent: EventStore.Core.Messages.StorageMessage.WriteDelete
  langs:
  - csharp
  - vb
  name: CorrelationId
  nameWithType: StorageMessage.WriteDelete.CorrelationId
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.CorrelationId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CorrelationId
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 66
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public Guid CorrelationId { get; }
    parameters: []
    return:
      type: Guid
    content.vb: Public ReadOnly Property CorrelationId As Guid
  overload: EventStore.Core.Messages.StorageMessage.WriteDelete.CorrelationId*
  implements:
  - EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.CorrelationId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.Envelope
  commentId: P:EventStore.Core.Messages.StorageMessage.WriteDelete.Envelope
  id: Envelope
  parent: EventStore.Core.Messages.StorageMessage.WriteDelete
  langs:
  - csharp
  - vb
  name: Envelope
  nameWithType: StorageMessage.WriteDelete.Envelope
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.Envelope
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Envelope
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 67
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public IEnvelope Envelope { get; }
    parameters: []
    return:
      type: EventStore.Core.Messaging.IEnvelope
    content.vb: Public ReadOnly Property Envelope As IEnvelope
  overload: EventStore.Core.Messages.StorageMessage.WriteDelete.Envelope*
  implements:
  - EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.Envelope
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.EventStreamId
  commentId: P:EventStore.Core.Messages.StorageMessage.WriteDelete.EventStreamId
  id: EventStreamId
  parent: EventStore.Core.Messages.StorageMessage.WriteDelete
  langs:
  - csharp
  - vb
  name: EventStreamId
  nameWithType: StorageMessage.WriteDelete.EventStreamId
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.EventStreamId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventStreamId
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 68
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public string EventStreamId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property EventStreamId As String
  overload: EventStore.Core.Messages.StorageMessage.WriteDelete.EventStreamId*
  implements:
  - EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.EventStreamId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.ExpectedVersion
  commentId: P:EventStore.Core.Messages.StorageMessage.WriteDelete.ExpectedVersion
  id: ExpectedVersion
  parent: EventStore.Core.Messages.StorageMessage.WriteDelete
  langs:
  - csharp
  - vb
  name: ExpectedVersion
  nameWithType: StorageMessage.WriteDelete.ExpectedVersion
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.ExpectedVersion
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ExpectedVersion
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 69
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public long ExpectedVersion { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property ExpectedVersion As Long
  overload: EventStore.Core.Messages.StorageMessage.WriteDelete.ExpectedVersion*
  implements:
  - EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.ExpectedVersion
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.HardDelete
  commentId: F:EventStore.Core.Messages.StorageMessage.WriteDelete.HardDelete
  id: HardDelete
  parent: EventStore.Core.Messages.StorageMessage.WriteDelete
  langs:
  - csharp
  - vb
  name: HardDelete
  nameWithType: StorageMessage.WriteDelete.HardDelete
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.HardDelete
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: HardDelete
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 70
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly bool HardDelete
    return:
      type: System.Boolean
    content.vb: Public ReadOnly HardDelete As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.LiveUntil
  commentId: F:EventStore.Core.Messages.StorageMessage.WriteDelete.LiveUntil
  id: LiveUntil
  parent: EventStore.Core.Messages.StorageMessage.WriteDelete
  langs:
  - csharp
  - vb
  name: LiveUntil
  nameWithType: StorageMessage.WriteDelete.LiveUntil
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.LiveUntil
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: LiveUntil
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 72
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly DateTime LiveUntil
    return:
      type: DateTime
    content.vb: Public ReadOnly LiveUntil As DateTime
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.#ctor(Guid,EventStore.Core.Messaging.IEnvelope,System.String,System.Int64,System.Boolean,DateTime)
  commentId: M:EventStore.Core.Messages.StorageMessage.WriteDelete.#ctor(Guid,EventStore.Core.Messaging.IEnvelope,System.String,System.Int64,System.Boolean,DateTime)
  id: '#ctor(Guid,EventStore.Core.Messaging.IEnvelope,System.String,System.Int64,System.Boolean,DateTime)'
  parent: EventStore.Core.Messages.StorageMessage.WriteDelete
  langs:
  - csharp
  - vb
  name: WriteDelete(Guid, IEnvelope, String, Int64, Boolean, DateTime)
  nameWithType: StorageMessage.WriteDelete.WriteDelete(Guid, IEnvelope, String, Int64, Boolean, DateTime)
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.WriteDelete(Guid, EventStore.Core.Messaging.IEnvelope, System.String, System.Int64, System.Boolean, DateTime)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 74
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public WriteDelete(Guid correlationId, IEnvelope envelope, string eventStreamId, long expectedVersion, bool hardDelete, DateTime liveUntil)
    parameters:
    - id: correlationId
      type: Guid
    - id: envelope
      type: EventStore.Core.Messaging.IEnvelope
    - id: eventStreamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: hardDelete
      type: System.Boolean
    - id: liveUntil
      type: DateTime
    content.vb: Public Sub New(correlationId As Guid, envelope As IEnvelope, eventStreamId As String, expectedVersion As Long, hardDelete As Boolean, liveUntil As DateTime)
  overload: EventStore.Core.Messages.StorageMessage.WriteDelete.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  isExternal: false
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage
  commentId: T:EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage
  parent: EventStore.Core.Messages
  isExternal: false
  name: StorageMessage.IPreconditionedWriteMessage
  nameWithType: StorageMessage.IPreconditionedWriteMessage
  fullName: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage
- uid: EventStore.Core.Messages.StorageMessage.IFlushableMessage
  commentId: T:EventStore.Core.Messages.StorageMessage.IFlushableMessage
  parent: EventStore.Core.Messages
  isExternal: false
  name: StorageMessage.IFlushableMessage
  nameWithType: StorageMessage.IFlushableMessage
  fullName: EventStore.Core.Messages.StorageMessage.IFlushableMessage
- uid: EventStore.Core.Messages.StorageMessage.IMasterWriteMessage
  commentId: T:EventStore.Core.Messages.StorageMessage.IMasterWriteMessage
  parent: EventStore.Core.Messages
  isExternal: false
  name: StorageMessage.IMasterWriteMessage
  nameWithType: StorageMessage.IMasterWriteMessage
  fullName: EventStore.Core.Messages.StorageMessage.IMasterWriteMessage
- uid: EventStore.Core.Messaging.Message.NextMsgId
  commentId: F:EventStore.Core.Messaging.Message.NextMsgId
  parent: EventStore.Core.Messaging.Message
  isExternal: false
  name: NextMsgId
  nameWithType: Message.NextMsgId
  fullName: EventStore.Core.Messaging.Message.NextMsgId
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<StorageMessage.WriteDelete>()
  nameWithType: ProtobufExtensions.Serialize<StorageMessage.WriteDelete>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.StorageMessage.WriteDelete>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of StorageMessage.WriteDelete)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.StorageMessage.WriteDelete)()
  name.vb: Serialize(Of StorageMessage.WriteDelete)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<StorageMessage.WriteDelete>
    nameWithType: ProtobufExtensions.Serialize<StorageMessage.WriteDelete>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.StorageMessage.WriteDelete>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of StorageMessage.WriteDelete)
    nameWithType: ProtobufExtensions.Serialize(Of StorageMessage.WriteDelete)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.StorageMessage.WriteDelete)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<StorageMessage.WriteDelete>()
  nameWithType: ProtobufExtensions.SerializeToArray<StorageMessage.WriteDelete>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.StorageMessage.WriteDelete>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of StorageMessage.WriteDelete)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.StorageMessage.WriteDelete)()
  name.vb: SerializeToArray(Of StorageMessage.WriteDelete)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<StorageMessage.WriteDelete>
    nameWithType: ProtobufExtensions.SerializeToArray<StorageMessage.WriteDelete>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.StorageMessage.WriteDelete>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of StorageMessage.WriteDelete)
    nameWithType: ProtobufExtensions.SerializeToArray(Of StorageMessage.WriteDelete)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.StorageMessage.WriteDelete)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  isExternal: false
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Messaging.Message.MsgTypeId
  commentId: P:EventStore.Core.Messaging.Message.MsgTypeId
  parent: EventStore.Core.Messaging.Message
  isExternal: false
  name: MsgTypeId
  nameWithType: Message.MsgTypeId
  fullName: EventStore.Core.Messaging.Message.MsgTypeId
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.MsgTypeId*
  commentId: Overload:EventStore.Core.Messages.StorageMessage.WriteDelete.MsgTypeId
  isExternal: false
  name: MsgTypeId
  nameWithType: StorageMessage.WriteDelete.MsgTypeId
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.MsgTypeId
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.CorrelationId*
  commentId: Overload:EventStore.Core.Messages.StorageMessage.WriteDelete.CorrelationId
  isExternal: false
  name: CorrelationId
  nameWithType: StorageMessage.WriteDelete.CorrelationId
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.CorrelationId
- uid: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.CorrelationId
  commentId: P:EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.CorrelationId
  parent: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage
  isExternal: false
  name: CorrelationId
  nameWithType: StorageMessage.IPreconditionedWriteMessage.CorrelationId
  fullName: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.CorrelationId
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.Envelope*
  commentId: Overload:EventStore.Core.Messages.StorageMessage.WriteDelete.Envelope
  isExternal: false
  name: Envelope
  nameWithType: StorageMessage.WriteDelete.Envelope
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.Envelope
- uid: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.Envelope
  commentId: P:EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.Envelope
  parent: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage
  isExternal: false
  name: Envelope
  nameWithType: StorageMessage.IPreconditionedWriteMessage.Envelope
  fullName: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.Envelope
- uid: EventStore.Core.Messaging.IEnvelope
  commentId: T:EventStore.Core.Messaging.IEnvelope
  parent: EventStore.Core.Messaging
  isExternal: false
  name: IEnvelope
  nameWithType: IEnvelope
  fullName: EventStore.Core.Messaging.IEnvelope
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.EventStreamId*
  commentId: Overload:EventStore.Core.Messages.StorageMessage.WriteDelete.EventStreamId
  isExternal: false
  name: EventStreamId
  nameWithType: StorageMessage.WriteDelete.EventStreamId
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.EventStreamId
- uid: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.EventStreamId
  commentId: P:EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.EventStreamId
  parent: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage
  isExternal: false
  name: EventStreamId
  nameWithType: StorageMessage.IPreconditionedWriteMessage.EventStreamId
  fullName: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.EventStreamId
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.ExpectedVersion*
  commentId: Overload:EventStore.Core.Messages.StorageMessage.WriteDelete.ExpectedVersion
  isExternal: false
  name: ExpectedVersion
  nameWithType: StorageMessage.WriteDelete.ExpectedVersion
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.ExpectedVersion
- uid: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.ExpectedVersion
  commentId: P:EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.ExpectedVersion
  parent: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage
  isExternal: false
  name: ExpectedVersion
  nameWithType: StorageMessage.IPreconditionedWriteMessage.ExpectedVersion
  fullName: EventStore.Core.Messages.StorageMessage.IPreconditionedWriteMessage.ExpectedVersion
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: EventStore.Core.Messages.StorageMessage.WriteDelete.#ctor*
  commentId: Overload:EventStore.Core.Messages.StorageMessage.WriteDelete.#ctor
  isExternal: false
  name: WriteDelete
  nameWithType: StorageMessage.WriteDelete.WriteDelete
  fullName: EventStore.Core.Messages.StorageMessage.WriteDelete.WriteDelete

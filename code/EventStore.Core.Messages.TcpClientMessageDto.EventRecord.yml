### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  commentId: T:EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  id: TcpClientMessageDto.EventRecord
  parent: EventStore.Core.Messages
  children:
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor(EventStore.Core.Data.EventRecord)
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor(EventStore.Core.Data.EventRecord,System.Int64)
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor(System.String,System.Int64,System.Byte[],System.String,System.Int32,System.Int32,System.Byte[],System.Byte[],System.Nullable{System.Int64},System.Nullable{System.Int64})
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.Created
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.CreatedEpoch
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.Data
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.DataContentType
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventId
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventNumber
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventStreamId
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventType
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.Metadata
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.MetadataContentType
  langs:
  - csharp
  - vb
  name: TcpClientMessageDto.EventRecord
  nameWithType: TcpClientMessageDto.EventRecord
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventRecord
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDto.cs
    startLine: 53
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: 'public class EventRecord : object'
    content.vb: >-
      Public Class EventRecord

          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor(EventStore.Core.Data.EventRecord)
  commentId: M:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor(EventStore.Core.Data.EventRecord)
  id: '#ctor(EventStore.Core.Data.EventRecord)'
  parent: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  langs:
  - csharp
  - vb
  name: EventRecord(EventRecord)
  nameWithType: TcpClientMessageDto.EventRecord.EventRecord(EventRecord)
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventRecord(EventStore.Core.Data.EventRecord)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDtoExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDtoExtensions.cs
    startLine: 29
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public EventRecord(EventRecord eventRecord)
    parameters:
    - id: eventRecord
      type: EventStore.Core.Data.EventRecord
    content.vb: Public Sub New(eventRecord As EventRecord)
  overload: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor(EventStore.Core.Data.EventRecord,System.Int64)
  commentId: M:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor(EventStore.Core.Data.EventRecord,System.Int64)
  id: '#ctor(EventStore.Core.Data.EventRecord,System.Int64)'
  parent: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  langs:
  - csharp
  - vb
  name: EventRecord(EventRecord, Int64)
  nameWithType: TcpClientMessageDto.EventRecord.EventRecord(EventRecord, Int64)
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventRecord(EventStore.Core.Data.EventRecord, System.Int64)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDtoExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDtoExtensions.cs
    startLine: 44
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public EventRecord(EventRecord eventRecord, long eventNumber)
    parameters:
    - id: eventRecord
      type: EventStore.Core.Data.EventRecord
    - id: eventNumber
      type: System.Int64
    content.vb: Public Sub New(eventRecord As EventRecord, eventNumber As Long)
  overload: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventStreamId
  commentId: F:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventStreamId
  id: EventStreamId
  parent: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  langs:
  - csharp
  - vb
  name: EventStreamId
  nameWithType: TcpClientMessageDto.EventRecord.EventStreamId
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventStreamId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventStreamId
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDto.cs
    startLine: 57
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly string EventStreamId
    return:
      type: System.String
    content.vb: Public ReadOnly EventStreamId As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventNumber
  commentId: F:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventNumber
  id: EventNumber
  parent: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  langs:
  - csharp
  - vb
  name: EventNumber
  nameWithType: TcpClientMessageDto.EventRecord.EventNumber
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventNumber
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventNumber
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDto.cs
    startLine: 60
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly long EventNumber
    return:
      type: System.Int64
    content.vb: Public ReadOnly EventNumber As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventId
  commentId: F:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventId
  id: EventId
  parent: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  langs:
  - csharp
  - vb
  name: EventId
  nameWithType: TcpClientMessageDto.EventRecord.EventId
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventId
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDto.cs
    startLine: 63
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly byte[] EventId
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly EventId As Byte()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventType
  commentId: F:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventType
  id: EventType
  parent: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  langs:
  - csharp
  - vb
  name: EventType
  nameWithType: TcpClientMessageDto.EventRecord.EventType
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventType
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventType
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDto.cs
    startLine: 66
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly string EventType
    return:
      type: System.String
    content.vb: Public ReadOnly EventType As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.DataContentType
  commentId: F:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.DataContentType
  id: DataContentType
  parent: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  langs:
  - csharp
  - vb
  name: DataContentType
  nameWithType: TcpClientMessageDto.EventRecord.DataContentType
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.DataContentType
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: DataContentType
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDto.cs
    startLine: 69
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly int DataContentType
    return:
      type: System.Int32
    content.vb: Public ReadOnly DataContentType As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.MetadataContentType
  commentId: F:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.MetadataContentType
  id: MetadataContentType
  parent: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  langs:
  - csharp
  - vb
  name: MetadataContentType
  nameWithType: TcpClientMessageDto.EventRecord.MetadataContentType
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.MetadataContentType
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MetadataContentType
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDto.cs
    startLine: 72
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly int MetadataContentType
    return:
      type: System.Int32
    content.vb: Public ReadOnly MetadataContentType As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.Data
  commentId: F:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.Data
  id: Data
  parent: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: TcpClientMessageDto.EventRecord.Data
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.Data
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Data
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDto.cs
    startLine: 75
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly byte[] Data
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Data As Byte()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.Metadata
  commentId: F:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.Metadata
  id: Metadata
  parent: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: TcpClientMessageDto.EventRecord.Metadata
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.Metadata
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Metadata
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDto.cs
    startLine: 78
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly byte[] Metadata
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Metadata As Byte()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.Created
  commentId: F:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.Created
  id: Created
  parent: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  langs:
  - csharp
  - vb
  name: Created
  nameWithType: TcpClientMessageDto.EventRecord.Created
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.Created
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Created
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDto.cs
    startLine: 81
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly long ? Created
    return:
      type: System.Nullable{System.Int64}
    content.vb: Public ReadOnly Created As Long?
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.CreatedEpoch
  commentId: F:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.CreatedEpoch
  id: CreatedEpoch
  parent: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  langs:
  - csharp
  - vb
  name: CreatedEpoch
  nameWithType: TcpClientMessageDto.EventRecord.CreatedEpoch
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.CreatedEpoch
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CreatedEpoch
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDto.cs
    startLine: 84
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly long ? CreatedEpoch
    return:
      type: System.Nullable{System.Int64}
    content.vb: Public ReadOnly CreatedEpoch As Long?
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor(System.String,System.Int64,System.Byte[],System.String,System.Int32,System.Int32,System.Byte[],System.Byte[],System.Nullable{System.Int64},System.Nullable{System.Int64})
  commentId: M:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor(System.String,System.Int64,System.Byte[],System.String,System.Int32,System.Int32,System.Byte[],System.Byte[],System.Nullable{System.Int64},System.Nullable{System.Int64})
  id: '#ctor(System.String,System.Int64,System.Byte[],System.String,System.Int32,System.Int32,System.Byte[],System.Byte[],System.Nullable{System.Int64},System.Nullable{System.Int64})'
  parent: EventStore.Core.Messages.TcpClientMessageDto.EventRecord
  langs:
  - csharp
  - vb
  name: EventRecord(String, Int64, Byte[], String, Int32, Int32, Byte[], Byte[], Nullable<Int64>, Nullable<Int64>)
  nameWithType: TcpClientMessageDto.EventRecord.EventRecord(String, Int64, Byte[], String, Int32, Int32, Byte[], Byte[], Nullable<Int64>, Nullable<Int64>)
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventRecord(System.String, System.Int64, System.Byte[], System.String, System.Int32, System.Int32, System.Byte[], System.Byte[], System.Nullable<System.Int64>, System.Nullable<System.Int64>)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/TcpClientMessageDto.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/TcpClientMessageDto.cs
    startLine: 88
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public EventRecord(string eventStreamId, long eventNumber, byte[] eventId, string eventType, int dataContentType, int metadataContentType, byte[] data, byte[] metadata, long ? created, long ? createdEpoch)
    parameters:
    - id: eventStreamId
      type: System.String
    - id: eventNumber
      type: System.Int64
    - id: eventId
      type: System.Byte[]
    - id: eventType
      type: System.String
    - id: dataContentType
      type: System.Int32
    - id: metadataContentType
      type: System.Int32
    - id: data
      type: System.Byte[]
    - id: metadata
      type: System.Byte[]
    - id: created
      type: System.Nullable{System.Int64}
    - id: createdEpoch
      type: System.Nullable{System.Int64}
    content.vb: Public Sub New(eventStreamId As String, eventNumber As Long, eventId As Byte(), eventType As String, dataContentType As Integer, metadataContentType As Integer, data As Byte(), metadata As Byte(), created As Long?, createdEpoch As Long?)
  overload: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor*
  nameWithType.vb: TcpClientMessageDto.EventRecord.EventRecord(String, Int64, Byte(), String, Int32, Int32, Byte(), Byte(), Nullable(Of Int64), Nullable(Of Int64))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventRecord(System.String, System.Int64, System.Byte(), System.String, System.Int32, System.Int32, System.Byte(), System.Byte(), System.Nullable(Of System.Int64), System.Nullable(Of System.Int64))
  name.vb: EventRecord(String, Int64, Byte(), String, Int32, Int32, Byte(), Byte(), Nullable(Of Int64), Nullable(Of Int64))
references:
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  isExternal: false
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TcpClientMessageDto.EventRecord>()
  nameWithType: ProtobufExtensions.Serialize<TcpClientMessageDto.EventRecord>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.TcpClientMessageDto.EventRecord>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TcpClientMessageDto.EventRecord)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.TcpClientMessageDto.EventRecord)()
  name.vb: Serialize(Of TcpClientMessageDto.EventRecord)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TcpClientMessageDto.EventRecord>
    nameWithType: ProtobufExtensions.Serialize<TcpClientMessageDto.EventRecord>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.TcpClientMessageDto.EventRecord>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TcpClientMessageDto.EventRecord)
    nameWithType: ProtobufExtensions.Serialize(Of TcpClientMessageDto.EventRecord)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.TcpClientMessageDto.EventRecord)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TcpClientMessageDto.EventRecord>()
  nameWithType: ProtobufExtensions.SerializeToArray<TcpClientMessageDto.EventRecord>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.TcpClientMessageDto.EventRecord>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TcpClientMessageDto.EventRecord)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.TcpClientMessageDto.EventRecord)()
  name.vb: SerializeToArray(Of TcpClientMessageDto.EventRecord)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TcpClientMessageDto.EventRecord>
    nameWithType: ProtobufExtensions.SerializeToArray<TcpClientMessageDto.EventRecord>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.TcpClientMessageDto.EventRecord>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TcpClientMessageDto.EventRecord)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TcpClientMessageDto.EventRecord)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.TcpClientMessageDto.EventRecord)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor*
  commentId: Overload:EventStore.Core.Messages.TcpClientMessageDto.EventRecord.#ctor
  isExternal: false
  name: EventRecord
  nameWithType: TcpClientMessageDto.EventRecord.EventRecord
  fullName: EventStore.Core.Messages.TcpClientMessageDto.EventRecord.EventRecord
- uid: EventStore.Core.Data.EventRecord
  commentId: T:EventStore.Core.Data.EventRecord
  parent: EventStore.Core.Data
  isExternal: false
  name: EventRecord
  nameWithType: EventRecord
  fullName: EventStore.Core.Data.EventRecord
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  isExternal: false
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

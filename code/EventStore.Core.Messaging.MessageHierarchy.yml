### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Messaging.MessageHierarchy
  commentId: T:EventStore.Core.Messaging.MessageHierarchy
  id: MessageHierarchy
  parent: EventStore.Core.Messaging
  children:
  - EventStore.Core.Messaging.MessageHierarchy.Descendants
  - EventStore.Core.Messaging.MessageHierarchy.DescendantsByType
  - EventStore.Core.Messaging.MessageHierarchy.DescendantsByTypeId
  - EventStore.Core.Messaging.MessageHierarchy.MaxMsgTypeId
  - EventStore.Core.Messaging.MessageHierarchy.MsgTypeIdByType
  - EventStore.Core.Messaging.MessageHierarchy.ParentsByTypeId
  langs:
  - csharp
  - vb
  name: MessageHierarchy
  nameWithType: MessageHierarchy
  fullName: EventStore.Core.Messaging.MessageHierarchy
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Messaging/Message.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MessageHierarchy
    path: ../EventStore/src/EventStore.Core/Messaging/Message.cs
    startLine: 17
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messaging
  syntax:
    content: 'public static class MessageHierarchy : object'
    content.vb: >-
      Public Module MessageHierarchy

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Core.Messaging.MessageHierarchy.Descendants
  commentId: F:EventStore.Core.Messaging.MessageHierarchy.Descendants
  id: Descendants
  parent: EventStore.Core.Messaging.MessageHierarchy
  langs:
  - csharp
  - vb
  name: Descendants
  nameWithType: MessageHierarchy.Descendants
  fullName: EventStore.Core.Messaging.MessageHierarchy.Descendants
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messaging/Message.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Descendants
    path: ../EventStore/src/EventStore.Core/Messaging/Message.cs
    startLine: 21
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messaging
  syntax:
    content: public static readonly Dictionary<Type, List<Type>> Descendants
    return:
      type: Dictionary{Type,List{Type}}
    content.vb: Public Shared ReadOnly Descendants As Dictionary(Of Type, List(Of Type))
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Core.Messaging.MessageHierarchy.ParentsByTypeId
  commentId: F:EventStore.Core.Messaging.MessageHierarchy.ParentsByTypeId
  id: ParentsByTypeId
  parent: EventStore.Core.Messaging.MessageHierarchy
  langs:
  - csharp
  - vb
  name: ParentsByTypeId
  nameWithType: MessageHierarchy.ParentsByTypeId
  fullName: EventStore.Core.Messaging.MessageHierarchy.ParentsByTypeId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messaging/Message.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ParentsByTypeId
    path: ../EventStore/src/EventStore.Core/Messaging/Message.cs
    startLine: 22
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messaging
  syntax:
    content: public static readonly int[][] ParentsByTypeId
    return:
      type: System.Int32[][]
    content.vb: Public Shared ReadOnly ParentsByTypeId As Integer()()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Core.Messaging.MessageHierarchy.DescendantsByTypeId
  commentId: F:EventStore.Core.Messaging.MessageHierarchy.DescendantsByTypeId
  id: DescendantsByTypeId
  parent: EventStore.Core.Messaging.MessageHierarchy
  langs:
  - csharp
  - vb
  name: DescendantsByTypeId
  nameWithType: MessageHierarchy.DescendantsByTypeId
  fullName: EventStore.Core.Messaging.MessageHierarchy.DescendantsByTypeId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messaging/Message.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: DescendantsByTypeId
    path: ../EventStore/src/EventStore.Core/Messaging/Message.cs
    startLine: 23
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messaging
  syntax:
    content: public static readonly int[][] DescendantsByTypeId
    return:
      type: System.Int32[][]
    content.vb: Public Shared ReadOnly DescendantsByTypeId As Integer()()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Core.Messaging.MessageHierarchy.DescendantsByType
  commentId: F:EventStore.Core.Messaging.MessageHierarchy.DescendantsByType
  id: DescendantsByType
  parent: EventStore.Core.Messaging.MessageHierarchy
  langs:
  - csharp
  - vb
  name: DescendantsByType
  nameWithType: MessageHierarchy.DescendantsByType
  fullName: EventStore.Core.Messaging.MessageHierarchy.DescendantsByType
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messaging/Message.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: DescendantsByType
    path: ../EventStore/src/EventStore.Core/Messaging/Message.cs
    startLine: 24
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messaging
  syntax:
    content: public static readonly Dictionary<Type, int[]> DescendantsByType
    return:
      type: Dictionary{Type,System.Int32[]}
    content.vb: Public Shared ReadOnly DescendantsByType As Dictionary(Of Type, Integer())
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Core.Messaging.MessageHierarchy.MsgTypeIdByType
  commentId: F:EventStore.Core.Messaging.MessageHierarchy.MsgTypeIdByType
  id: MsgTypeIdByType
  parent: EventStore.Core.Messaging.MessageHierarchy
  langs:
  - csharp
  - vb
  name: MsgTypeIdByType
  nameWithType: MessageHierarchy.MsgTypeIdByType
  fullName: EventStore.Core.Messaging.MessageHierarchy.MsgTypeIdByType
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messaging/Message.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MsgTypeIdByType
    path: ../EventStore/src/EventStore.Core/Messaging/Message.cs
    startLine: 25
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messaging
  syntax:
    content: public static readonly Dictionary<Type, int> MsgTypeIdByType
    return:
      type: Dictionary{Type,System.Int32}
    content.vb: Public Shared ReadOnly MsgTypeIdByType As Dictionary(Of Type, Integer)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Core.Messaging.MessageHierarchy.MaxMsgTypeId
  commentId: F:EventStore.Core.Messaging.MessageHierarchy.MaxMsgTypeId
  id: MaxMsgTypeId
  parent: EventStore.Core.Messaging.MessageHierarchy
  langs:
  - csharp
  - vb
  name: MaxMsgTypeId
  nameWithType: MessageHierarchy.MaxMsgTypeId
  fullName: EventStore.Core.Messaging.MessageHierarchy.MaxMsgTypeId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messaging/Message.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MaxMsgTypeId
    path: ../EventStore/src/EventStore.Core/Messaging/Message.cs
    startLine: 26
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messaging
  syntax:
    content: public static readonly int MaxMsgTypeId
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly MaxMsgTypeId As Integer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  isExternal: false
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Dictionary{Type,List{Type}}
  commentId: '!:Dictionary{Type,List{Type}}'
  definition: Dictionary`2
  name: Dictionary<Type, List<Type>>
  nameWithType: Dictionary<Type, List<Type>>
  fullName: Dictionary<Type, List<Type>>
  nameWithType.vb: Dictionary(Of Type, List(Of Type))
  fullName.vb: Dictionary(Of Type, List(Of Type))
  name.vb: Dictionary(Of Type, List(Of Type))
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32[][]
  name: Int32[][]
  nameWithType: Int32[][]
  fullName: System.Int32[][]
  nameWithType.vb: Int32()()
  fullName.vb: System.Int32()()
  name.vb: Int32()()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Dictionary{Type,System.Int32[]}
  commentId: '!:Dictionary{Type,System.Int32[]}'
  definition: Dictionary`2
  name: Dictionary<Type, Int32[]>
  nameWithType: Dictionary<Type, Int32[]>
  fullName: Dictionary<Type, System.Int32[]>
  nameWithType.vb: Dictionary(Of Type, Int32())
  fullName.vb: Dictionary(Of Type, System.Int32())
  name.vb: Dictionary(Of Type, Int32())
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary{Type,System.Int32}
  commentId: '!:Dictionary{Type,System.Int32}'
  definition: Dictionary`2
  name: Dictionary<Type, Int32>
  nameWithType: Dictionary<Type, Int32>
  fullName: Dictionary<Type, System.Int32>
  nameWithType.vb: Dictionary(Of Type, Int32)
  fullName.vb: Dictionary(Of Type, System.Int32)
  name.vb: Dictionary(Of Type, Int32)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.ProgramBase`1
  commentId: T:EventStore.Core.ProgramBase`1
  id: ProgramBase`1
  parent: EventStore.Core
  children:
  - EventStore.Core.ProgramBase`1.Create(`0)
  - EventStore.Core.ProgramBase`1.GetCertificateStoreLocation(System.String)
  - EventStore.Core.ProgramBase`1.GetCertificateStoreName(System.String)
  - EventStore.Core.ProgramBase`1.GetComponentName(`0)
  - EventStore.Core.ProgramBase`1.GetLogsDirectory(`0)
  - EventStore.Core.ProgramBase`1.Log
  - EventStore.Core.ProgramBase`1.OnProgramExit
  - EventStore.Core.ProgramBase`1.PreInit(`0)
  - EventStore.Core.ProgramBase`1.Run(System.String[])
  - EventStore.Core.ProgramBase`1.Start
  - EventStore.Core.ProgramBase`1.Stop
  langs:
  - csharp
  - vb
  name: ProgramBase<TOptions>
  nameWithType: ProgramBase<TOptions>
  fullName: EventStore.Core.ProgramBase<TOptions>
  type: Class
  source:
    remote:
      path: src/EventStore.Core/ProgramBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ProgramBase
    path: ../EventStore/src/EventStore.Core/ProgramBase.cs
    startLine: 15
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: 'public abstract class ProgramBase<TOptions> : object where TOptions : class, IOptions, new ()'
    typeParameters:
    - id: TOptions
    content.vb: >-
      Public MustInherit Class ProgramBase(Of TOptions As {Class, IOptions, New})

          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.ClusterNode.Program
  - EventStore.TestClient.Program
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.ProgramBase`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.ProgramBase`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  nameWithType.vb: ProgramBase(Of TOptions)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions)
  name.vb: ProgramBase(Of TOptions)
- uid: EventStore.Core.ProgramBase`1.Log
  commentId: F:EventStore.Core.ProgramBase`1.Log
  id: Log
  parent: EventStore.Core.ProgramBase`1
  langs:
  - csharp
  - vb
  name: Log
  nameWithType: ProgramBase<TOptions>.Log
  fullName: EventStore.Core.ProgramBase<TOptions>.Log
  type: Field
  source:
    remote:
      path: src/EventStore.Core/ProgramBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Log
    path: ../EventStore/src/EventStore.Core/ProgramBase.cs
    startLine: 18
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: protected static readonly ILogger Log
    return:
      type: EventStore.Common.Log.ILogger
    content.vb: Protected Shared ReadOnly Log As ILogger
  nameWithType.vb: ProgramBase(Of TOptions).Log
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Log
- uid: EventStore.Core.ProgramBase`1.GetLogsDirectory(`0)
  commentId: M:EventStore.Core.ProgramBase`1.GetLogsDirectory(`0)
  id: GetLogsDirectory(`0)
  parent: EventStore.Core.ProgramBase`1
  langs:
  - csharp
  - vb
  name: GetLogsDirectory(TOptions)
  nameWithType: ProgramBase<TOptions>.GetLogsDirectory(TOptions)
  fullName: EventStore.Core.ProgramBase<TOptions>.GetLogsDirectory(TOptions)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/ProgramBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetLogsDirectory
    path: ../EventStore/src/EventStore.Core/ProgramBase.cs
    startLine: 24
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: protected abstract string GetLogsDirectory(TOptions options)
    parameters:
    - id: options
      type: '{TOptions}'
    return:
      type: System.String
    content.vb: Protected MustOverride Function GetLogsDirectory(options As TOptions) As String
  overload: EventStore.Core.ProgramBase`1.GetLogsDirectory*
  nameWithType.vb: ProgramBase(Of TOptions).GetLogsDirectory(TOptions)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).GetLogsDirectory(TOptions)
- uid: EventStore.Core.ProgramBase`1.GetComponentName(`0)
  commentId: M:EventStore.Core.ProgramBase`1.GetComponentName(`0)
  id: GetComponentName(`0)
  parent: EventStore.Core.ProgramBase`1
  langs:
  - csharp
  - vb
  name: GetComponentName(TOptions)
  nameWithType: ProgramBase<TOptions>.GetComponentName(TOptions)
  fullName: EventStore.Core.ProgramBase<TOptions>.GetComponentName(TOptions)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/ProgramBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetComponentName
    path: ../EventStore/src/EventStore.Core/ProgramBase.cs
    startLine: 25
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: protected abstract string GetComponentName(TOptions options)
    parameters:
    - id: options
      type: '{TOptions}'
    return:
      type: System.String
    content.vb: Protected MustOverride Function GetComponentName(options As TOptions) As String
  overload: EventStore.Core.ProgramBase`1.GetComponentName*
  nameWithType.vb: ProgramBase(Of TOptions).GetComponentName(TOptions)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).GetComponentName(TOptions)
- uid: EventStore.Core.ProgramBase`1.Create(`0)
  commentId: M:EventStore.Core.ProgramBase`1.Create(`0)
  id: Create(`0)
  parent: EventStore.Core.ProgramBase`1
  langs:
  - csharp
  - vb
  name: Create(TOptions)
  nameWithType: ProgramBase<TOptions>.Create(TOptions)
  fullName: EventStore.Core.ProgramBase<TOptions>.Create(TOptions)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/ProgramBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Create
    path: ../EventStore/src/EventStore.Core/ProgramBase.cs
    startLine: 27
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: protected abstract void Create(TOptions options)
    parameters:
    - id: options
      type: '{TOptions}'
    content.vb: Protected MustOverride Sub Create(options As TOptions)
  overload: EventStore.Core.ProgramBase`1.Create*
  nameWithType.vb: ProgramBase(Of TOptions).Create(TOptions)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Create(TOptions)
- uid: EventStore.Core.ProgramBase`1.Start
  commentId: M:EventStore.Core.ProgramBase`1.Start
  id: Start
  parent: EventStore.Core.ProgramBase`1
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: ProgramBase<TOptions>.Start()
  fullName: EventStore.Core.ProgramBase<TOptions>.Start()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/ProgramBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Start
    path: ../EventStore/src/EventStore.Core/ProgramBase.cs
    startLine: 28
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: protected abstract void Start()
    content.vb: Protected MustOverride Sub Start
  overload: EventStore.Core.ProgramBase`1.Start*
  nameWithType.vb: ProgramBase(Of TOptions).Start()
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Start()
- uid: EventStore.Core.ProgramBase`1.Stop
  commentId: M:EventStore.Core.ProgramBase`1.Stop
  id: Stop
  parent: EventStore.Core.ProgramBase`1
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: ProgramBase<TOptions>.Stop()
  fullName: EventStore.Core.ProgramBase<TOptions>.Stop()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/ProgramBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Stop
    path: ../EventStore/src/EventStore.Core/ProgramBase.cs
    startLine: 29
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public abstract void Stop()
    content.vb: Public MustOverride Sub Stop
  overload: EventStore.Core.ProgramBase`1.Stop*
  nameWithType.vb: ProgramBase(Of TOptions).Stop()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Stop()
- uid: EventStore.Core.ProgramBase`1.Run(System.String[])
  commentId: M:EventStore.Core.ProgramBase`1.Run(System.String[])
  id: Run(System.String[])
  parent: EventStore.Core.ProgramBase`1
  langs:
  - csharp
  - vb
  name: Run(String[])
  nameWithType: ProgramBase<TOptions>.Run(String[])
  fullName: EventStore.Core.ProgramBase<TOptions>.Run(System.String[])
  type: Method
  source:
    remote:
      path: src/EventStore.Core/ProgramBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Run
    path: ../EventStore/src/EventStore.Core/ProgramBase.cs
    startLine: 31
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public void Run(string[] args)
    parameters:
    - id: args
      type: System.String[]
    content.vb: Public Sub Run(args As String())
  overload: EventStore.Core.ProgramBase`1.Run*
  nameWithType.vb: ProgramBase(Of TOptions).Run(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Run(System.String())
  name.vb: Run(String())
- uid: EventStore.Core.ProgramBase`1.PreInit(`0)
  commentId: M:EventStore.Core.ProgramBase`1.PreInit(`0)
  id: PreInit(`0)
  parent: EventStore.Core.ProgramBase`1
  langs:
  - csharp
  - vb
  name: PreInit(TOptions)
  nameWithType: ProgramBase<TOptions>.PreInit(TOptions)
  fullName: EventStore.Core.ProgramBase<TOptions>.PreInit(TOptions)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/ProgramBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: PreInit
    path: ../EventStore/src/EventStore.Core/ProgramBase.cs
    startLine: 101
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: protected virtual void PreInit(TOptions options)
    parameters:
    - id: options
      type: '{TOptions}'
    content.vb: Protected Overridable Sub PreInit(options As TOptions)
  overload: EventStore.Core.ProgramBase`1.PreInit*
  nameWithType.vb: ProgramBase(Of TOptions).PreInit(TOptions)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).PreInit(TOptions)
- uid: EventStore.Core.ProgramBase`1.OnProgramExit
  commentId: M:EventStore.Core.ProgramBase`1.OnProgramExit
  id: OnProgramExit
  parent: EventStore.Core.ProgramBase`1
  langs:
  - csharp
  - vb
  name: OnProgramExit()
  nameWithType: ProgramBase<TOptions>.OnProgramExit()
  fullName: EventStore.Core.ProgramBase<TOptions>.OnProgramExit()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/ProgramBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: OnProgramExit
    path: ../EventStore/src/EventStore.Core/ProgramBase.cs
    startLine: 129
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: protected virtual void OnProgramExit()
    content.vb: Protected Overridable Sub OnProgramExit
  overload: EventStore.Core.ProgramBase`1.OnProgramExit*
  nameWithType.vb: ProgramBase(Of TOptions).OnProgramExit()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).OnProgramExit()
- uid: EventStore.Core.ProgramBase`1.GetCertificateStoreLocation(System.String)
  commentId: M:EventStore.Core.ProgramBase`1.GetCertificateStoreLocation(System.String)
  id: GetCertificateStoreLocation(System.String)
  parent: EventStore.Core.ProgramBase`1
  langs:
  - csharp
  - vb
  name: GetCertificateStoreLocation(String)
  nameWithType: ProgramBase<TOptions>.GetCertificateStoreLocation(String)
  fullName: EventStore.Core.ProgramBase<TOptions>.GetCertificateStoreLocation(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/ProgramBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetCertificateStoreLocation
    path: ../EventStore/src/EventStore.Core/ProgramBase.cs
    startLine: 170
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: protected static StoreLocation GetCertificateStoreLocation(string certificateStoreLocation)
    parameters:
    - id: certificateStoreLocation
      type: System.String
    return:
      type: StoreLocation
    content.vb: Protected Shared Function GetCertificateStoreLocation(certificateStoreLocation As String) As StoreLocation
  overload: EventStore.Core.ProgramBase`1.GetCertificateStoreLocation*
  nameWithType.vb: ProgramBase(Of TOptions).GetCertificateStoreLocation(String)
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).GetCertificateStoreLocation(System.String)
- uid: EventStore.Core.ProgramBase`1.GetCertificateStoreName(System.String)
  commentId: M:EventStore.Core.ProgramBase`1.GetCertificateStoreName(System.String)
  id: GetCertificateStoreName(System.String)
  parent: EventStore.Core.ProgramBase`1
  langs:
  - csharp
  - vb
  name: GetCertificateStoreName(String)
  nameWithType: ProgramBase<TOptions>.GetCertificateStoreName(String)
  fullName: EventStore.Core.ProgramBase<TOptions>.GetCertificateStoreName(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/ProgramBase.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetCertificateStoreName
    path: ../EventStore/src/EventStore.Core/ProgramBase.cs
    startLine: 178
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: protected static StoreName GetCertificateStoreName(string certificateStoreName)
    parameters:
    - id: certificateStoreName
      type: System.String
    return:
      type: StoreName
    content.vb: Protected Shared Function GetCertificateStoreName(certificateStoreName As String) As StoreName
  overload: EventStore.Core.ProgramBase`1.GetCertificateStoreName*
  nameWithType.vb: ProgramBase(Of TOptions).GetCertificateStoreName(String)
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).GetCertificateStoreName(System.String)
references:
- uid: EventStore.Core
  commentId: N:EventStore.Core
  isExternal: false
  name: EventStore.Core
  nameWithType: EventStore.Core
  fullName: EventStore.Core
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ProgramBase<TOptions>>()
  nameWithType: ProtobufExtensions.Serialize<ProgramBase<TOptions>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.ProgramBase<TOptions>>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ProgramBase(Of TOptions))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.ProgramBase(Of TOptions))()
  name.vb: Serialize(Of ProgramBase(Of TOptions))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ProgramBase<TOptions>>
    nameWithType: ProtobufExtensions.Serialize<ProgramBase<TOptions>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.ProgramBase<TOptions>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ProgramBase(Of TOptions))
    nameWithType: ProtobufExtensions.Serialize(Of ProgramBase(Of TOptions))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.ProgramBase(Of TOptions))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ProgramBase`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ProgramBase<TOptions>>()
  nameWithType: ProtobufExtensions.SerializeToArray<ProgramBase<TOptions>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.ProgramBase<TOptions>>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ProgramBase(Of TOptions))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.ProgramBase(Of TOptions))()
  name.vb: SerializeToArray(Of ProgramBase(Of TOptions))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ProgramBase<TOptions>>
    nameWithType: ProtobufExtensions.SerializeToArray<ProgramBase<TOptions>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.ProgramBase<TOptions>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ProgramBase(Of TOptions))
    nameWithType: ProtobufExtensions.SerializeToArray(Of ProgramBase(Of TOptions))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.ProgramBase(Of TOptions))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Common.Log.ILogger
  commentId: T:EventStore.Common.Log.ILogger
  parent: EventStore.Common.Log
  isExternal: false
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.Common.Log.ILogger
- uid: EventStore.Common.Log
  commentId: N:EventStore.Common.Log
  isExternal: false
  name: EventStore.Common.Log
  nameWithType: EventStore.Common.Log
  fullName: EventStore.Common.Log
- uid: EventStore.Core.ProgramBase`1.GetLogsDirectory*
  commentId: Overload:EventStore.Core.ProgramBase`1.GetLogsDirectory
  isExternal: false
  name: GetLogsDirectory
  nameWithType: ProgramBase<TOptions>.GetLogsDirectory
  fullName: EventStore.Core.ProgramBase<TOptions>.GetLogsDirectory
  nameWithType.vb: ProgramBase(Of TOptions).GetLogsDirectory
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).GetLogsDirectory
- uid: '{TOptions}'
  commentId: '!:TOptions'
  definition: TOptions
  name: TOptions
  nameWithType: TOptions
  fullName: TOptions
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TOptions
  isExternal: false
  name: TOptions
  nameWithType: TOptions
  fullName: TOptions
- uid: EventStore.Core.ProgramBase`1.GetComponentName*
  commentId: Overload:EventStore.Core.ProgramBase`1.GetComponentName
  isExternal: false
  name: GetComponentName
  nameWithType: ProgramBase<TOptions>.GetComponentName
  fullName: EventStore.Core.ProgramBase<TOptions>.GetComponentName
  nameWithType.vb: ProgramBase(Of TOptions).GetComponentName
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).GetComponentName
- uid: EventStore.Core.ProgramBase`1.Create*
  commentId: Overload:EventStore.Core.ProgramBase`1.Create
  isExternal: false
  name: Create
  nameWithType: ProgramBase<TOptions>.Create
  fullName: EventStore.Core.ProgramBase<TOptions>.Create
  nameWithType.vb: ProgramBase(Of TOptions).Create
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Create
- uid: EventStore.Core.ProgramBase`1.Start*
  commentId: Overload:EventStore.Core.ProgramBase`1.Start
  isExternal: false
  name: Start
  nameWithType: ProgramBase<TOptions>.Start
  fullName: EventStore.Core.ProgramBase<TOptions>.Start
  nameWithType.vb: ProgramBase(Of TOptions).Start
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Start
- uid: EventStore.Core.ProgramBase`1.Stop*
  commentId: Overload:EventStore.Core.ProgramBase`1.Stop
  isExternal: false
  name: Stop
  nameWithType: ProgramBase<TOptions>.Stop
  fullName: EventStore.Core.ProgramBase<TOptions>.Stop
  nameWithType.vb: ProgramBase(Of TOptions).Stop
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Stop
- uid: EventStore.Core.ProgramBase`1.Run*
  commentId: Overload:EventStore.Core.ProgramBase`1.Run
  isExternal: false
  name: Run
  nameWithType: ProgramBase<TOptions>.Run
  fullName: EventStore.Core.ProgramBase<TOptions>.Run
  nameWithType.vb: ProgramBase(Of TOptions).Run
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).Run
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.ProgramBase`1.PreInit*
  commentId: Overload:EventStore.Core.ProgramBase`1.PreInit
  isExternal: false
  name: PreInit
  nameWithType: ProgramBase<TOptions>.PreInit
  fullName: EventStore.Core.ProgramBase<TOptions>.PreInit
  nameWithType.vb: ProgramBase(Of TOptions).PreInit
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).PreInit
- uid: EventStore.Core.ProgramBase`1.OnProgramExit*
  commentId: Overload:EventStore.Core.ProgramBase`1.OnProgramExit
  isExternal: false
  name: OnProgramExit
  nameWithType: ProgramBase<TOptions>.OnProgramExit
  fullName: EventStore.Core.ProgramBase<TOptions>.OnProgramExit
  nameWithType.vb: ProgramBase(Of TOptions).OnProgramExit
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).OnProgramExit
- uid: EventStore.Core.ProgramBase`1.GetCertificateStoreLocation*
  commentId: Overload:EventStore.Core.ProgramBase`1.GetCertificateStoreLocation
  isExternal: false
  name: GetCertificateStoreLocation
  nameWithType: ProgramBase<TOptions>.GetCertificateStoreLocation
  fullName: EventStore.Core.ProgramBase<TOptions>.GetCertificateStoreLocation
  nameWithType.vb: ProgramBase(Of TOptions).GetCertificateStoreLocation
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).GetCertificateStoreLocation
- uid: StoreLocation
  isExternal: true
  name: StoreLocation
  nameWithType: StoreLocation
  fullName: StoreLocation
- uid: EventStore.Core.ProgramBase`1.GetCertificateStoreName*
  commentId: Overload:EventStore.Core.ProgramBase`1.GetCertificateStoreName
  isExternal: false
  name: GetCertificateStoreName
  nameWithType: ProgramBase<TOptions>.GetCertificateStoreName
  fullName: EventStore.Core.ProgramBase<TOptions>.GetCertificateStoreName
  nameWithType.vb: ProgramBase(Of TOptions).GetCertificateStoreName
  fullName.vb: EventStore.Core.ProgramBase(Of TOptions).GetCertificateStoreName
- uid: StoreName
  isExternal: true
  name: StoreName
  nameWithType: StoreName
  fullName: StoreName

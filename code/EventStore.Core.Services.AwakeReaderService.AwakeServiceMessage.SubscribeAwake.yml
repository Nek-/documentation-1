### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  commentId: T:EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  id: AwakeServiceMessage.SubscribeAwake
  parent: EventStore.Core.Services.AwakeReaderService
  children:
  - EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.#ctor(EventStore.Core.Messaging.IEnvelope,Guid,System.String,EventStore.Core.Data.TFPos,EventStore.Core.Messaging.Message)
  - EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.CorrelationId
  - EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.Envelope
  - EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.From
  - EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.MsgTypeId
  - EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.ReplyWithMessage
  - EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.StreamId
  langs:
  - csharp
  - vb
  name: AwakeServiceMessage.SubscribeAwake
  nameWithType: AwakeServiceMessage.SubscribeAwake
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SubscribeAwake
    path: ../EventStore/src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.AwakeReaderService
  syntax:
    content: 'public sealed class SubscribeAwake : Message'
    content.vb: >-
      Public NotInheritable Class SubscribeAwake
          Inherits Message
  inheritance:
  - System.Object
  - EventStore.Core.Messaging.Message
  inheritedMembers:
  - EventStore.Core.Messaging.Message.NextMsgId
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.MsgTypeId
  commentId: P:EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.MsgTypeId
  id: MsgTypeId
  parent: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  langs:
  - csharp
  - vb
  name: MsgTypeId
  nameWithType: AwakeServiceMessage.SubscribeAwake.MsgTypeId
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.MsgTypeId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: MsgTypeId
    path: ../EventStore/src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
    startLine: 12
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.AwakeReaderService
  syntax:
    content: public override int MsgTypeId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overrides ReadOnly Property MsgTypeId As Integer
  overridden: EventStore.Core.Messaging.Message.MsgTypeId
  overload: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.MsgTypeId*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.Envelope
  commentId: F:EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.Envelope
  id: Envelope
  parent: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  langs:
  - csharp
  - vb
  name: Envelope
  nameWithType: AwakeServiceMessage.SubscribeAwake.Envelope
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.Envelope
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Envelope
    path: ../EventStore/src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
    startLine: 17
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.AwakeReaderService
  syntax:
    content: public readonly IEnvelope Envelope
    return:
      type: EventStore.Core.Messaging.IEnvelope
    content.vb: Public ReadOnly Envelope As IEnvelope
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.CorrelationId
  commentId: F:EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.CorrelationId
  id: CorrelationId
  parent: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  langs:
  - csharp
  - vb
  name: CorrelationId
  nameWithType: AwakeServiceMessage.SubscribeAwake.CorrelationId
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.CorrelationId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: CorrelationId
    path: ../EventStore/src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
    startLine: 18
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.AwakeReaderService
  syntax:
    content: public readonly Guid CorrelationId
    return:
      type: Guid
    content.vb: Public ReadOnly CorrelationId As Guid
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.StreamId
  commentId: F:EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.StreamId
  id: StreamId
  parent: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  langs:
  - csharp
  - vb
  name: StreamId
  nameWithType: AwakeServiceMessage.SubscribeAwake.StreamId
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.StreamId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: StreamId
    path: ../EventStore/src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
    startLine: 19
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.AwakeReaderService
  syntax:
    content: public readonly string StreamId
    return:
      type: System.String
    content.vb: Public ReadOnly StreamId As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.From
  commentId: F:EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.From
  id: From
  parent: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  langs:
  - csharp
  - vb
  name: From
  nameWithType: AwakeServiceMessage.SubscribeAwake.From
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.From
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: From
    path: ../EventStore/src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
    startLine: 20
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.AwakeReaderService
  syntax:
    content: public readonly TFPos From
    return:
      type: EventStore.Core.Data.TFPos
    content.vb: Public ReadOnly From As TFPos
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.ReplyWithMessage
  commentId: F:EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.ReplyWithMessage
  id: ReplyWithMessage
  parent: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  langs:
  - csharp
  - vb
  name: ReplyWithMessage
  nameWithType: AwakeServiceMessage.SubscribeAwake.ReplyWithMessage
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.ReplyWithMessage
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ReplyWithMessage
    path: ../EventStore/src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
    startLine: 21
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.AwakeReaderService
  syntax:
    content: public readonly Message ReplyWithMessage
    return:
      type: EventStore.Core.Messaging.Message
    content.vb: Public ReadOnly ReplyWithMessage As Message
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.#ctor(EventStore.Core.Messaging.IEnvelope,Guid,System.String,EventStore.Core.Data.TFPos,EventStore.Core.Messaging.Message)
  commentId: M:EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.#ctor(EventStore.Core.Messaging.IEnvelope,Guid,System.String,EventStore.Core.Data.TFPos,EventStore.Core.Messaging.Message)
  id: '#ctor(EventStore.Core.Messaging.IEnvelope,Guid,System.String,EventStore.Core.Data.TFPos,EventStore.Core.Messaging.Message)'
  parent: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  langs:
  - csharp
  - vb
  name: SubscribeAwake(IEnvelope, Guid, String, TFPos, Message)
  nameWithType: AwakeServiceMessage.SubscribeAwake.SubscribeAwake(IEnvelope, Guid, String, TFPos, Message)
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.SubscribeAwake(EventStore.Core.Messaging.IEnvelope, Guid, System.String, EventStore.Core.Data.TFPos, EventStore.Core.Messaging.Message)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/AwakeReaderService/AwakeServiceMessage.cs
    startLine: 23
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.AwakeReaderService
  syntax:
    content: public SubscribeAwake(IEnvelope envelope, Guid correlationId, string streamId, TFPos from, Message replyWithMessage)
    parameters:
    - id: envelope
      type: EventStore.Core.Messaging.IEnvelope
    - id: correlationId
      type: Guid
    - id: streamId
      type: System.String
    - id: from
      type: EventStore.Core.Data.TFPos
    - id: replyWithMessage
      type: EventStore.Core.Messaging.Message
    content.vb: Public Sub New(envelope As IEnvelope, correlationId As Guid, streamId As String, from As TFPos, replyWithMessage As Message)
  overload: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.AwakeReaderService
  commentId: N:EventStore.Core.Services.AwakeReaderService
  isExternal: false
  name: EventStore.Core.Services.AwakeReaderService
  nameWithType: EventStore.Core.Services.AwakeReaderService
  fullName: EventStore.Core.Services.AwakeReaderService
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messaging.Message.NextMsgId
  commentId: F:EventStore.Core.Messaging.Message.NextMsgId
  parent: EventStore.Core.Messaging.Message
  isExternal: false
  name: NextMsgId
  nameWithType: Message.NextMsgId
  fullName: EventStore.Core.Messaging.Message.NextMsgId
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<AwakeServiceMessage.SubscribeAwake>()
  nameWithType: ProtobufExtensions.Serialize<AwakeServiceMessage.SubscribeAwake>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of AwakeServiceMessage.SubscribeAwake)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)()
  name.vb: Serialize(Of AwakeServiceMessage.SubscribeAwake)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<AwakeServiceMessage.SubscribeAwake>
    nameWithType: ProtobufExtensions.Serialize<AwakeServiceMessage.SubscribeAwake>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of AwakeServiceMessage.SubscribeAwake)
    nameWithType: ProtobufExtensions.Serialize(Of AwakeServiceMessage.SubscribeAwake)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<AwakeServiceMessage.SubscribeAwake>()
  nameWithType: ProtobufExtensions.SerializeToArray<AwakeServiceMessage.SubscribeAwake>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of AwakeServiceMessage.SubscribeAwake)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)()
  name.vb: SerializeToArray(Of AwakeServiceMessage.SubscribeAwake)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<AwakeServiceMessage.SubscribeAwake>
    nameWithType: ProtobufExtensions.SerializeToArray<AwakeServiceMessage.SubscribeAwake>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of AwakeServiceMessage.SubscribeAwake)
    nameWithType: ProtobufExtensions.SerializeToArray(Of AwakeServiceMessage.SubscribeAwake)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  isExternal: false
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Messaging.Message.MsgTypeId
  commentId: P:EventStore.Core.Messaging.Message.MsgTypeId
  parent: EventStore.Core.Messaging.Message
  isExternal: false
  name: MsgTypeId
  nameWithType: Message.MsgTypeId
  fullName: EventStore.Core.Messaging.Message.MsgTypeId
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.MsgTypeId*
  commentId: Overload:EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.MsgTypeId
  isExternal: false
  name: MsgTypeId
  nameWithType: AwakeServiceMessage.SubscribeAwake.MsgTypeId
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.MsgTypeId
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Messaging.IEnvelope
  commentId: T:EventStore.Core.Messaging.IEnvelope
  parent: EventStore.Core.Messaging
  isExternal: false
  name: IEnvelope
  nameWithType: IEnvelope
  fullName: EventStore.Core.Messaging.IEnvelope
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Data.TFPos
  commentId: T:EventStore.Core.Data.TFPos
  parent: EventStore.Core.Data
  isExternal: false
  name: TFPos
  nameWithType: TFPos
  fullName: EventStore.Core.Data.TFPos
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  isExternal: false
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.#ctor*
  commentId: Overload:EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.#ctor
  isExternal: false
  name: SubscribeAwake
  nameWithType: AwakeServiceMessage.SubscribeAwake.SubscribeAwake
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake.SubscribeAwake

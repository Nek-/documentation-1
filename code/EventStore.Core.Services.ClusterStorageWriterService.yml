### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.ClusterStorageWriterService
  commentId: T:EventStore.Core.Services.ClusterStorageWriterService
  id: ClusterStorageWriterService
  parent: EventStore.Core.Services
  children:
  - EventStore.Core.Services.ClusterStorageWriterService.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Bus.ISubscriber,TimeSpan,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.TransactionLog.Chunks.TFChunkWriter,EventStore.Core.Services.Storage.ReaderIndex.IIndexWriter,EventStore.Core.Services.Storage.EpochManager.IEpochManager,Func{System.Int64})
  - EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.CreateChunk)
  - EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.DataChunkBulk)
  - EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.RawChunkBulk)
  - EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed)
  - EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  langs:
  - csharp
  - vb
  name: ClusterStorageWriterService
  nameWithType: ClusterStorageWriterService
  fullName: EventStore.Core.Services.ClusterStorageWriterService
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/ClusterStorageWriterService.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ClusterStorageWriterService
    path: ../EventStore/src/EventStore.Core/Services/ClusterStorageWriterService.cs
    startLine: 19
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services
  syntax:
    content: 'public class ClusterStorageWriterService : StorageWriterService, IHandle<SystemMessage.SystemInit>, IHandle<SystemMessage.StateChangeMessage>, IHandle<SystemMessage.WriteEpoch>, IHandle<SystemMessage.WaitForChaserToCatchUp>, IHandle<StorageMessage.WritePrepares>, IHandle<StorageMessage.WriteDelete>, IHandle<StorageMessage.WriteTransactionStart>, IHandle<StorageMessage.WriteTransactionData>, IHandle<StorageMessage.WriteTransactionPrepare>, IHandle<StorageMessage.WriteCommit>, IHandle<MonitoringMessage.InternalStatsRequest>, IHandle<ReplicationMessage.ReplicaSubscribed>, IHandle<ReplicationMessage.CreateChunk>, IHandle<ReplicationMessage.RawChunkBulk>, IHandle<ReplicationMessage.DataChunkBulk>'
    content.vb: >-
      Public Class ClusterStorageWriterService

          Inherits StorageWriterService

          Implements IHandle(Of SystemMessage.SystemInit), IHandle(Of SystemMessage.StateChangeMessage), IHandle(Of SystemMessage.WriteEpoch), IHandle(Of SystemMessage.WaitForChaserToCatchUp), IHandle(Of StorageMessage.WritePrepares), IHandle(Of StorageMessage.WriteDelete), IHandle(Of StorageMessage.WriteTransactionStart), IHandle(Of StorageMessage.WriteTransactionData), IHandle(Of StorageMessage.WriteTransactionPrepare), IHandle(Of StorageMessage.WriteCommit), IHandle(Of MonitoringMessage.InternalStatsRequest), IHandle(Of ReplicationMessage.ReplicaSubscribed), IHandle(Of ReplicationMessage.CreateChunk), IHandle(Of ReplicationMessage.RawChunkBulk), IHandle(Of ReplicationMessage.DataChunkBulk)
  inheritance:
  - System.Object
  - EventStore.Core.Services.Storage.StorageWriterService
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.WriteEpoch}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WritePrepares}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteDelete}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteTransactionStart}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteTransactionData}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteCommit}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.CreateChunk}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.RawChunkBulk}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.DataChunkBulk}
  inheritedMembers:
  - EventStore.Core.Services.Storage.StorageWriterService.TicksPerMs
  - EventStore.Core.Services.Storage.StorageWriterService.Db
  - EventStore.Core.Services.Storage.StorageWriterService.Writer
  - EventStore.Core.Services.Storage.StorageWriterService.EpochManager
  - EventStore.Core.Services.Storage.StorageWriterService.Bus
  - EventStore.Core.Services.Storage.StorageWriterService.StorageWriterQueue
  - EventStore.Core.Services.Storage.StorageWriterService.FlushMessagesInQueue
  - EventStore.Core.Services.Storage.StorageWriterService.BlockWriter
  - EventStore.Core.Services.Storage.StorageWriterService.SubscribeToMessage``1
  - EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#SystemInit}#Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  - EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#WriteEpoch}#Handle(EventStore.Core.Messages.SystemMessage.WriteEpoch)
  - EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#WaitForChaserToCatchUp}#Handle(EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp)
  - EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WritePrepares}#Handle(EventStore.Core.Messages.StorageMessage.WritePrepares)
  - EventStore.Core.Services.Storage.StorageWriterService.SoftUndeleteRawMeta(System.Byte[],System.Int64,System.Byte[]@)
  - EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteDelete}#Handle(EventStore.Core.Messages.StorageMessage.WriteDelete)
  - EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionStart}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionStart)
  - EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionData}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionData)
  - EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionPrepare}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare)
  - EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteCommit}#Handle(EventStore.Core.Messages.StorageMessage.WriteCommit)
  - EventStore.Core.Services.Storage.StorageWriterService.Flush(System.Boolean)
  - EventStore.Core.Services.Storage.StorageWriterService.Handle(EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest)
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Services.ClusterStorageWriterService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.ClusterStorageWriterService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.ClusterStorageWriterService.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Bus.ISubscriber,TimeSpan,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.TransactionLog.Chunks.TFChunkWriter,EventStore.Core.Services.Storage.ReaderIndex.IIndexWriter,EventStore.Core.Services.Storage.EpochManager.IEpochManager,Func{System.Int64})
  commentId: M:EventStore.Core.Services.ClusterStorageWriterService.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Bus.ISubscriber,TimeSpan,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.TransactionLog.Chunks.TFChunkWriter,EventStore.Core.Services.Storage.ReaderIndex.IIndexWriter,EventStore.Core.Services.Storage.EpochManager.IEpochManager,Func{System.Int64})
  id: '#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Bus.ISubscriber,TimeSpan,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.TransactionLog.Chunks.TFChunkWriter,EventStore.Core.Services.Storage.ReaderIndex.IIndexWriter,EventStore.Core.Services.Storage.EpochManager.IEpochManager,Func{System.Int64})'
  parent: EventStore.Core.Services.ClusterStorageWriterService
  langs:
  - csharp
  - vb
  name: ClusterStorageWriterService(IPublisher, ISubscriber, TimeSpan, TFChunkDb, TFChunkWriter, IIndexWriter, IEpochManager, Func<Int64>)
  nameWithType: ClusterStorageWriterService.ClusterStorageWriterService(IPublisher, ISubscriber, TimeSpan, TFChunkDb, TFChunkWriter, IIndexWriter, IEpochManager, Func<Int64>)
  fullName: EventStore.Core.Services.ClusterStorageWriterService.ClusterStorageWriterService(EventStore.Core.Bus.IPublisher, EventStore.Core.Bus.ISubscriber, TimeSpan, EventStore.Core.TransactionLog.Chunks.TFChunkDb, EventStore.Core.TransactionLog.Chunks.TFChunkWriter, EventStore.Core.Services.Storage.ReaderIndex.IIndexWriter, EventStore.Core.Services.Storage.EpochManager.IEpochManager, Func<System.Int64>)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/ClusterStorageWriterService.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/ClusterStorageWriterService.cs
    startLine: 35
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services
  syntax:
    content: public ClusterStorageWriterService(IPublisher bus, ISubscriber subscribeToBus, TimeSpan minFlushDelay, TFChunkDb db, TFChunkWriter writer, IIndexWriter indexWriter, IEpochManager epochManager, Func<long> getLastCommitPosition)
    parameters:
    - id: bus
      type: EventStore.Core.Bus.IPublisher
    - id: subscribeToBus
      type: EventStore.Core.Bus.ISubscriber
    - id: minFlushDelay
      type: TimeSpan
    - id: db
      type: EventStore.Core.TransactionLog.Chunks.TFChunkDb
    - id: writer
      type: EventStore.Core.TransactionLog.Chunks.TFChunkWriter
    - id: indexWriter
      type: EventStore.Core.Services.Storage.ReaderIndex.IIndexWriter
    - id: epochManager
      type: EventStore.Core.Services.Storage.EpochManager.IEpochManager
    - id: getLastCommitPosition
      type: Func{System.Int64}
    content.vb: Public Sub New(bus As IPublisher, subscribeToBus As ISubscriber, minFlushDelay As TimeSpan, db As TFChunkDb, writer As TFChunkWriter, indexWriter As IIndexWriter, epochManager As IEpochManager, getLastCommitPosition As Func(Of Long))
  overload: EventStore.Core.Services.ClusterStorageWriterService.#ctor*
  nameWithType.vb: ClusterStorageWriterService.ClusterStorageWriterService(IPublisher, ISubscriber, TimeSpan, TFChunkDb, TFChunkWriter, IIndexWriter, IEpochManager, Func(Of Int64))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.ClusterStorageWriterService.ClusterStorageWriterService(EventStore.Core.Bus.IPublisher, EventStore.Core.Bus.ISubscriber, TimeSpan, EventStore.Core.TransactionLog.Chunks.TFChunkDb, EventStore.Core.TransactionLog.Chunks.TFChunkWriter, EventStore.Core.Services.Storage.ReaderIndex.IIndexWriter, EventStore.Core.Services.Storage.EpochManager.IEpochManager, Func(Of System.Int64))
  name.vb: ClusterStorageWriterService(IPublisher, ISubscriber, TimeSpan, TFChunkDb, TFChunkWriter, IIndexWriter, IEpochManager, Func(Of Int64))
- uid: EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  id: Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Services.ClusterStorageWriterService
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: ClusterStorageWriterService.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/ClusterStorageWriterService.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/ClusterStorageWriterService.cs
    startLine: 56
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services
  syntax:
    content: public override void Handle(SystemMessage.StateChangeMessage message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    content.vb: Public Overrides Sub Handle(message As SystemMessage.StateChangeMessage)
  overridden: EventStore.Core.Services.Storage.StorageWriterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  overload: EventStore.Core.Services.ClusterStorageWriterService.Handle*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed)
  commentId: M:EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed)
  id: Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed)
  parent: EventStore.Core.Services.ClusterStorageWriterService
  langs:
  - csharp
  - vb
  name: Handle(ReplicationMessage.ReplicaSubscribed)
  nameWithType: ClusterStorageWriterService.Handle(ReplicationMessage.ReplicaSubscribed)
  fullName: EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/ClusterStorageWriterService.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/ClusterStorageWriterService.cs
    startLine: 73
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services
  syntax:
    content: public void Handle(ReplicationMessage.ReplicaSubscribed message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed
    content.vb: Public Sub Handle(message As ReplicationMessage.ReplicaSubscribed)
  overload: EventStore.Core.Services.ClusterStorageWriterService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed}.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.CreateChunk)
  commentId: M:EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.CreateChunk)
  id: Handle(EventStore.Core.Messages.ReplicationMessage.CreateChunk)
  parent: EventStore.Core.Services.ClusterStorageWriterService
  langs:
  - csharp
  - vb
  name: Handle(ReplicationMessage.CreateChunk)
  nameWithType: ClusterStorageWriterService.Handle(ReplicationMessage.CreateChunk)
  fullName: EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.CreateChunk)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/ClusterStorageWriterService.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/ClusterStorageWriterService.cs
    startLine: 131
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services
  syntax:
    content: public void Handle(ReplicationMessage.CreateChunk message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ReplicationMessage.CreateChunk
    content.vb: Public Sub Handle(message As ReplicationMessage.CreateChunk)
  overload: EventStore.Core.Services.ClusterStorageWriterService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.CreateChunk}.Handle(EventStore.Core.Messages.ReplicationMessage.CreateChunk)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.RawChunkBulk)
  commentId: M:EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.RawChunkBulk)
  id: Handle(EventStore.Core.Messages.ReplicationMessage.RawChunkBulk)
  parent: EventStore.Core.Services.ClusterStorageWriterService
  langs:
  - csharp
  - vb
  name: Handle(ReplicationMessage.RawChunkBulk)
  nameWithType: ClusterStorageWriterService.Handle(ReplicationMessage.RawChunkBulk)
  fullName: EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.RawChunkBulk)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/ClusterStorageWriterService.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/ClusterStorageWriterService.cs
    startLine: 161
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services
  syntax:
    content: public void Handle(ReplicationMessage.RawChunkBulk message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ReplicationMessage.RawChunkBulk
    content.vb: Public Sub Handle(message As ReplicationMessage.RawChunkBulk)
  overload: EventStore.Core.Services.ClusterStorageWriterService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.RawChunkBulk}.Handle(EventStore.Core.Messages.ReplicationMessage.RawChunkBulk)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.DataChunkBulk)
  commentId: M:EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.DataChunkBulk)
  id: Handle(EventStore.Core.Messages.ReplicationMessage.DataChunkBulk)
  parent: EventStore.Core.Services.ClusterStorageWriterService
  langs:
  - csharp
  - vb
  name: Handle(ReplicationMessage.DataChunkBulk)
  nameWithType: ClusterStorageWriterService.Handle(ReplicationMessage.DataChunkBulk)
  fullName: EventStore.Core.Services.ClusterStorageWriterService.Handle(EventStore.Core.Messages.ReplicationMessage.DataChunkBulk)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/ClusterStorageWriterService.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/ClusterStorageWriterService.cs
    startLine: 204
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services
  syntax:
    content: public void Handle(ReplicationMessage.DataChunkBulk message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ReplicationMessage.DataChunkBulk
    content.vb: Public Sub Handle(message As ReplicationMessage.DataChunkBulk)
  overload: EventStore.Core.Services.ClusterStorageWriterService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.DataChunkBulk}.Handle(EventStore.Core.Messages.ReplicationMessage.DataChunkBulk)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services
  commentId: N:EventStore.Core.Services
  isExternal: false
  name: EventStore.Core.Services
  nameWithType: EventStore.Core.Services
  fullName: EventStore.Core.Services
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Services.Storage.StorageWriterService
  commentId: T:EventStore.Core.Services.Storage.StorageWriterService
  parent: EventStore.Core.Services.Storage
  isExternal: false
  name: StorageWriterService
  nameWithType: StorageWriterService
  fullName: EventStore.Core.Services.Storage.StorageWriterService
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.SystemInit>
  nameWithType: IHandle<SystemMessage.SystemInit>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>
  nameWithType.vb: IHandle(Of SystemMessage.SystemInit)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SystemInit)
  name.vb: IHandle(Of SystemMessage.SystemInit)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.StateChangeMessage>
  nameWithType: IHandle<SystemMessage.StateChangeMessage>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  name.vb: IHandle(Of SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.WriteEpoch}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.WriteEpoch}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.WriteEpoch>
  nameWithType: IHandle<SystemMessage.WriteEpoch>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WriteEpoch>
  nameWithType.vb: IHandle(Of SystemMessage.WriteEpoch)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.WriteEpoch)
  name.vb: IHandle(Of SystemMessage.WriteEpoch)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.WriteEpoch
    name: SystemMessage.WriteEpoch
    nameWithType: SystemMessage.WriteEpoch
    fullName: EventStore.Core.Messages.SystemMessage.WriteEpoch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.WriteEpoch
    name: SystemMessage.WriteEpoch
    nameWithType: SystemMessage.WriteEpoch
    fullName: EventStore.Core.Messages.SystemMessage.WriteEpoch
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.WaitForChaserToCatchUp>
  nameWithType: IHandle<SystemMessage.WaitForChaserToCatchUp>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp>
  nameWithType.vb: IHandle(Of SystemMessage.WaitForChaserToCatchUp)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp)
  name.vb: IHandle(Of SystemMessage.WaitForChaserToCatchUp)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp
    name: SystemMessage.WaitForChaserToCatchUp
    nameWithType: SystemMessage.WaitForChaserToCatchUp
    fullName: EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp
    name: SystemMessage.WaitForChaserToCatchUp
    nameWithType: SystemMessage.WaitForChaserToCatchUp
    fullName: EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WritePrepares}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WritePrepares}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.WritePrepares>
  nameWithType: IHandle<StorageMessage.WritePrepares>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WritePrepares>
  nameWithType.vb: IHandle(Of StorageMessage.WritePrepares)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.WritePrepares)
  name.vb: IHandle(Of StorageMessage.WritePrepares)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.WritePrepares
    name: StorageMessage.WritePrepares
    nameWithType: StorageMessage.WritePrepares
    fullName: EventStore.Core.Messages.StorageMessage.WritePrepares
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.WritePrepares
    name: StorageMessage.WritePrepares
    nameWithType: StorageMessage.WritePrepares
    fullName: EventStore.Core.Messages.StorageMessage.WritePrepares
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteDelete}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteDelete}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.WriteDelete>
  nameWithType: IHandle<StorageMessage.WriteDelete>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteDelete>
  nameWithType.vb: IHandle(Of StorageMessage.WriteDelete)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.WriteDelete)
  name.vb: IHandle(Of StorageMessage.WriteDelete)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.WriteDelete
    name: StorageMessage.WriteDelete
    nameWithType: StorageMessage.WriteDelete
    fullName: EventStore.Core.Messages.StorageMessage.WriteDelete
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.WriteDelete
    name: StorageMessage.WriteDelete
    nameWithType: StorageMessage.WriteDelete
    fullName: EventStore.Core.Messages.StorageMessage.WriteDelete
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteTransactionStart}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteTransactionStart}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.WriteTransactionStart>
  nameWithType: IHandle<StorageMessage.WriteTransactionStart>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionStart>
  nameWithType.vb: IHandle(Of StorageMessage.WriteTransactionStart)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.WriteTransactionStart)
  name.vb: IHandle(Of StorageMessage.WriteTransactionStart)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.WriteTransactionStart
    name: StorageMessage.WriteTransactionStart
    nameWithType: StorageMessage.WriteTransactionStart
    fullName: EventStore.Core.Messages.StorageMessage.WriteTransactionStart
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.WriteTransactionStart
    name: StorageMessage.WriteTransactionStart
    nameWithType: StorageMessage.WriteTransactionStart
    fullName: EventStore.Core.Messages.StorageMessage.WriteTransactionStart
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteTransactionData}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteTransactionData}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.WriteTransactionData>
  nameWithType: IHandle<StorageMessage.WriteTransactionData>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionData>
  nameWithType.vb: IHandle(Of StorageMessage.WriteTransactionData)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.WriteTransactionData)
  name.vb: IHandle(Of StorageMessage.WriteTransactionData)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.WriteTransactionData
    name: StorageMessage.WriteTransactionData
    nameWithType: StorageMessage.WriteTransactionData
    fullName: EventStore.Core.Messages.StorageMessage.WriteTransactionData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.WriteTransactionData
    name: StorageMessage.WriteTransactionData
    nameWithType: StorageMessage.WriteTransactionData
    fullName: EventStore.Core.Messages.StorageMessage.WriteTransactionData
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.WriteTransactionPrepare>
  nameWithType: IHandle<StorageMessage.WriteTransactionPrepare>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare>
  nameWithType.vb: IHandle(Of StorageMessage.WriteTransactionPrepare)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare)
  name.vb: IHandle(Of StorageMessage.WriteTransactionPrepare)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare
    name: StorageMessage.WriteTransactionPrepare
    nameWithType: StorageMessage.WriteTransactionPrepare
    fullName: EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare
    name: StorageMessage.WriteTransactionPrepare
    nameWithType: StorageMessage.WriteTransactionPrepare
    fullName: EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteCommit}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WriteCommit}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.WriteCommit>
  nameWithType: IHandle<StorageMessage.WriteCommit>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteCommit>
  nameWithType.vb: IHandle(Of StorageMessage.WriteCommit)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.WriteCommit)
  name.vb: IHandle(Of StorageMessage.WriteCommit)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.WriteCommit
    name: StorageMessage.WriteCommit
    nameWithType: StorageMessage.WriteCommit
    fullName: EventStore.Core.Messages.StorageMessage.WriteCommit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.WriteCommit
    name: StorageMessage.WriteCommit
    nameWithType: StorageMessage.WriteCommit
    fullName: EventStore.Core.Messages.StorageMessage.WriteCommit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<MonitoringMessage.InternalStatsRequest>
  nameWithType: IHandle<MonitoringMessage.InternalStatsRequest>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest>
  nameWithType.vb: IHandle(Of MonitoringMessage.InternalStatsRequest)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest)
  name.vb: IHandle(Of MonitoringMessage.InternalStatsRequest)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest
    name: MonitoringMessage.InternalStatsRequest
    nameWithType: MonitoringMessage.InternalStatsRequest
    fullName: EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest
    name: MonitoringMessage.InternalStatsRequest
    nameWithType: MonitoringMessage.InternalStatsRequest
    fullName: EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ReplicationMessage.ReplicaSubscribed>
  nameWithType: IHandle<ReplicationMessage.ReplicaSubscribed>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed>
  nameWithType.vb: IHandle(Of ReplicationMessage.ReplicaSubscribed)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed)
  name.vb: IHandle(Of ReplicationMessage.ReplicaSubscribed)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed
    name: ReplicationMessage.ReplicaSubscribed
    nameWithType: ReplicationMessage.ReplicaSubscribed
    fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed
    name: ReplicationMessage.ReplicaSubscribed
    nameWithType: ReplicationMessage.ReplicaSubscribed
    fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.CreateChunk}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.CreateChunk}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ReplicationMessage.CreateChunk>
  nameWithType: IHandle<ReplicationMessage.CreateChunk>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.CreateChunk>
  nameWithType.vb: IHandle(Of ReplicationMessage.CreateChunk)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.CreateChunk)
  name.vb: IHandle(Of ReplicationMessage.CreateChunk)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ReplicationMessage.CreateChunk
    name: ReplicationMessage.CreateChunk
    nameWithType: ReplicationMessage.CreateChunk
    fullName: EventStore.Core.Messages.ReplicationMessage.CreateChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ReplicationMessage.CreateChunk
    name: ReplicationMessage.CreateChunk
    nameWithType: ReplicationMessage.CreateChunk
    fullName: EventStore.Core.Messages.ReplicationMessage.CreateChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.RawChunkBulk}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.RawChunkBulk}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ReplicationMessage.RawChunkBulk>
  nameWithType: IHandle<ReplicationMessage.RawChunkBulk>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.RawChunkBulk>
  nameWithType.vb: IHandle(Of ReplicationMessage.RawChunkBulk)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.RawChunkBulk)
  name.vb: IHandle(Of ReplicationMessage.RawChunkBulk)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ReplicationMessage.RawChunkBulk
    name: ReplicationMessage.RawChunkBulk
    nameWithType: ReplicationMessage.RawChunkBulk
    fullName: EventStore.Core.Messages.ReplicationMessage.RawChunkBulk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ReplicationMessage.RawChunkBulk
    name: ReplicationMessage.RawChunkBulk
    nameWithType: ReplicationMessage.RawChunkBulk
    fullName: EventStore.Core.Messages.ReplicationMessage.RawChunkBulk
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.DataChunkBulk}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.DataChunkBulk}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ReplicationMessage.DataChunkBulk>
  nameWithType: IHandle<ReplicationMessage.DataChunkBulk>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.DataChunkBulk>
  nameWithType.vb: IHandle(Of ReplicationMessage.DataChunkBulk)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.DataChunkBulk)
  name.vb: IHandle(Of ReplicationMessage.DataChunkBulk)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ReplicationMessage.DataChunkBulk
    name: ReplicationMessage.DataChunkBulk
    nameWithType: ReplicationMessage.DataChunkBulk
    fullName: EventStore.Core.Messages.ReplicationMessage.DataChunkBulk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ReplicationMessage.DataChunkBulk
    name: ReplicationMessage.DataChunkBulk
    nameWithType: ReplicationMessage.DataChunkBulk
    fullName: EventStore.Core.Messages.ReplicationMessage.DataChunkBulk
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.TicksPerMs
  commentId: F:EventStore.Core.Services.Storage.StorageWriterService.TicksPerMs
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: TicksPerMs
  nameWithType: StorageWriterService.TicksPerMs
  fullName: EventStore.Core.Services.Storage.StorageWriterService.TicksPerMs
- uid: EventStore.Core.Services.Storage.StorageWriterService.Db
  commentId: F:EventStore.Core.Services.Storage.StorageWriterService.Db
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: Db
  nameWithType: StorageWriterService.Db
  fullName: EventStore.Core.Services.Storage.StorageWriterService.Db
- uid: EventStore.Core.Services.Storage.StorageWriterService.Writer
  commentId: F:EventStore.Core.Services.Storage.StorageWriterService.Writer
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: Writer
  nameWithType: StorageWriterService.Writer
  fullName: EventStore.Core.Services.Storage.StorageWriterService.Writer
- uid: EventStore.Core.Services.Storage.StorageWriterService.EpochManager
  commentId: F:EventStore.Core.Services.Storage.StorageWriterService.EpochManager
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: EpochManager
  nameWithType: StorageWriterService.EpochManager
  fullName: EventStore.Core.Services.Storage.StorageWriterService.EpochManager
- uid: EventStore.Core.Services.Storage.StorageWriterService.Bus
  commentId: F:EventStore.Core.Services.Storage.StorageWriterService.Bus
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: Bus
  nameWithType: StorageWriterService.Bus
  fullName: EventStore.Core.Services.Storage.StorageWriterService.Bus
- uid: EventStore.Core.Services.Storage.StorageWriterService.StorageWriterQueue
  commentId: F:EventStore.Core.Services.Storage.StorageWriterService.StorageWriterQueue
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: StorageWriterQueue
  nameWithType: StorageWriterService.StorageWriterQueue
  fullName: EventStore.Core.Services.Storage.StorageWriterService.StorageWriterQueue
- uid: EventStore.Core.Services.Storage.StorageWriterService.FlushMessagesInQueue
  commentId: F:EventStore.Core.Services.Storage.StorageWriterService.FlushMessagesInQueue
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: FlushMessagesInQueue
  nameWithType: StorageWriterService.FlushMessagesInQueue
  fullName: EventStore.Core.Services.Storage.StorageWriterService.FlushMessagesInQueue
- uid: EventStore.Core.Services.Storage.StorageWriterService.BlockWriter
  commentId: F:EventStore.Core.Services.Storage.StorageWriterService.BlockWriter
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: BlockWriter
  nameWithType: StorageWriterService.BlockWriter
  fullName: EventStore.Core.Services.Storage.StorageWriterService.BlockWriter
- uid: EventStore.Core.Services.Storage.StorageWriterService.SubscribeToMessage``1
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.SubscribeToMessage``1
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: SubscribeToMessage<T>()
  nameWithType: StorageWriterService.SubscribeToMessage<T>()
  fullName: EventStore.Core.Services.Storage.StorageWriterService.SubscribeToMessage<T>()
  nameWithType.vb: StorageWriterService.SubscribeToMessage(Of T)()
  fullName.vb: EventStore.Core.Services.Storage.StorageWriterService.SubscribeToMessage(Of T)()
  name.vb: SubscribeToMessage(Of T)()
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.SubscribeToMessage``1
    name: SubscribeToMessage<T>
    nameWithType: StorageWriterService.SubscribeToMessage<T>
    fullName: EventStore.Core.Services.Storage.StorageWriterService.SubscribeToMessage<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.SubscribeToMessage``1
    name: SubscribeToMessage(Of T)
    nameWithType: StorageWriterService.SubscribeToMessage(Of T)
    fullName: EventStore.Core.Services.Storage.StorageWriterService.SubscribeToMessage(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#SystemInit}#Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#SystemInit}#Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: IHandle<SystemMessage.SystemInit>.Handle(SystemMessage.SystemInit)
  nameWithType: StorageWriterService.IHandle<SystemMessage.SystemInit>.Handle(SystemMessage.SystemInit)
  fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  nameWithType.vb: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>.Handle(SystemMessage.SystemInit)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>.Handle(SystemMessage.SystemInit)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#SystemInit}#Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
    name: IHandle<SystemMessage.SystemInit>.Handle
    nameWithType: StorageWriterService.IHandle<SystemMessage.SystemInit>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#SystemInit}#Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
    name: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>.Handle
    nameWithType: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#WriteEpoch}#Handle(EventStore.Core.Messages.SystemMessage.WriteEpoch)
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#WriteEpoch}#Handle(EventStore.Core.Messages.SystemMessage.WriteEpoch)
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: IHandle<SystemMessage.WriteEpoch>.Handle(SystemMessage.WriteEpoch)
  nameWithType: StorageWriterService.IHandle<SystemMessage.WriteEpoch>.Handle(SystemMessage.WriteEpoch)
  fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WriteEpoch>.Handle(EventStore.Core.Messages.SystemMessage.WriteEpoch)
  nameWithType.vb: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WriteEpoch>.Handle(SystemMessage.WriteEpoch)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WriteEpoch>.Handle(SystemMessage.WriteEpoch)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#WriteEpoch}#Handle(EventStore.Core.Messages.SystemMessage.WriteEpoch)
    name: IHandle<SystemMessage.WriteEpoch>.Handle
    nameWithType: StorageWriterService.IHandle<SystemMessage.WriteEpoch>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WriteEpoch>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.WriteEpoch
    name: SystemMessage.WriteEpoch
    nameWithType: SystemMessage.WriteEpoch
    fullName: EventStore.Core.Messages.SystemMessage.WriteEpoch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#WriteEpoch}#Handle(EventStore.Core.Messages.SystemMessage.WriteEpoch)
    name: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WriteEpoch>.Handle
    nameWithType: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WriteEpoch>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WriteEpoch>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.WriteEpoch
    name: SystemMessage.WriteEpoch
    nameWithType: SystemMessage.WriteEpoch
    fullName: EventStore.Core.Messages.SystemMessage.WriteEpoch
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#WaitForChaserToCatchUp}#Handle(EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp)
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#WaitForChaserToCatchUp}#Handle(EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp)
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: IHandle<SystemMessage.WaitForChaserToCatchUp>.Handle(SystemMessage.WaitForChaserToCatchUp)
  nameWithType: StorageWriterService.IHandle<SystemMessage.WaitForChaserToCatchUp>.Handle(SystemMessage.WaitForChaserToCatchUp)
  fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp>.Handle(EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp)
  nameWithType.vb: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp>.Handle(SystemMessage.WaitForChaserToCatchUp)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp>.Handle(SystemMessage.WaitForChaserToCatchUp)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#WaitForChaserToCatchUp}#Handle(EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp)
    name: IHandle<SystemMessage.WaitForChaserToCatchUp>.Handle
    nameWithType: StorageWriterService.IHandle<SystemMessage.WaitForChaserToCatchUp>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp
    name: SystemMessage.WaitForChaserToCatchUp
    nameWithType: SystemMessage.WaitForChaserToCatchUp
    fullName: EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#SystemMessage#WaitForChaserToCatchUp}#Handle(EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp)
    name: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp>.Handle
    nameWithType: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp
    name: SystemMessage.WaitForChaserToCatchUp
    nameWithType: SystemMessage.WaitForChaserToCatchUp
    fullName: EventStore.Core.Messages.SystemMessage.WaitForChaserToCatchUp
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WritePrepares}#Handle(EventStore.Core.Messages.StorageMessage.WritePrepares)
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WritePrepares}#Handle(EventStore.Core.Messages.StorageMessage.WritePrepares)
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: IHandle<StorageMessage.WritePrepares>.Handle(StorageMessage.WritePrepares)
  nameWithType: StorageWriterService.IHandle<StorageMessage.WritePrepares>.Handle(StorageMessage.WritePrepares)
  fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WritePrepares>.Handle(EventStore.Core.Messages.StorageMessage.WritePrepares)
  nameWithType.vb: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WritePrepares>.Handle(StorageMessage.WritePrepares)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WritePrepares>.Handle(StorageMessage.WritePrepares)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WritePrepares}#Handle(EventStore.Core.Messages.StorageMessage.WritePrepares)
    name: IHandle<StorageMessage.WritePrepares>.Handle
    nameWithType: StorageWriterService.IHandle<StorageMessage.WritePrepares>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WritePrepares>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WritePrepares
    name: StorageMessage.WritePrepares
    nameWithType: StorageMessage.WritePrepares
    fullName: EventStore.Core.Messages.StorageMessage.WritePrepares
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WritePrepares}#Handle(EventStore.Core.Messages.StorageMessage.WritePrepares)
    name: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WritePrepares>.Handle
    nameWithType: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WritePrepares>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WritePrepares>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WritePrepares
    name: StorageMessage.WritePrepares
    nameWithType: StorageMessage.WritePrepares
    fullName: EventStore.Core.Messages.StorageMessage.WritePrepares
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.SoftUndeleteRawMeta(System.Byte[],System.Int64,System.Byte[]@)
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.SoftUndeleteRawMeta(System.Byte[],System.Int64,System.Byte[]@)
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: true
  name: SoftUndeleteRawMeta(Byte[], Int64, Byte[])
  nameWithType: StorageWriterService.SoftUndeleteRawMeta(Byte[], Int64, Byte[])
  fullName: EventStore.Core.Services.Storage.StorageWriterService.SoftUndeleteRawMeta(System.Byte[], System.Int64, System.Byte[])
  nameWithType.vb: StorageWriterService.SoftUndeleteRawMeta(Byte(), Int64, Byte())
  fullName.vb: EventStore.Core.Services.Storage.StorageWriterService.SoftUndeleteRawMeta(System.Byte(), System.Int64, System.Byte())
  name.vb: SoftUndeleteRawMeta(Byte(), Int64, Byte())
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.SoftUndeleteRawMeta(System.Byte[],System.Int64,System.Byte[]@)
    name: SoftUndeleteRawMeta
    nameWithType: StorageWriterService.SoftUndeleteRawMeta
    fullName: EventStore.Core.Services.Storage.StorageWriterService.SoftUndeleteRawMeta
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.SoftUndeleteRawMeta(System.Byte[],System.Int64,System.Byte[]@)
    name: SoftUndeleteRawMeta
    nameWithType: StorageWriterService.SoftUndeleteRawMeta
    fullName: EventStore.Core.Services.Storage.StorageWriterService.SoftUndeleteRawMeta
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteDelete}#Handle(EventStore.Core.Messages.StorageMessage.WriteDelete)
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteDelete}#Handle(EventStore.Core.Messages.StorageMessage.WriteDelete)
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: IHandle<StorageMessage.WriteDelete>.Handle(StorageMessage.WriteDelete)
  nameWithType: StorageWriterService.IHandle<StorageMessage.WriteDelete>.Handle(StorageMessage.WriteDelete)
  fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteDelete>.Handle(EventStore.Core.Messages.StorageMessage.WriteDelete)
  nameWithType.vb: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteDelete>.Handle(StorageMessage.WriteDelete)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteDelete>.Handle(StorageMessage.WriteDelete)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteDelete}#Handle(EventStore.Core.Messages.StorageMessage.WriteDelete)
    name: IHandle<StorageMessage.WriteDelete>.Handle
    nameWithType: StorageWriterService.IHandle<StorageMessage.WriteDelete>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteDelete>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WriteDelete
    name: StorageMessage.WriteDelete
    nameWithType: StorageMessage.WriteDelete
    fullName: EventStore.Core.Messages.StorageMessage.WriteDelete
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteDelete}#Handle(EventStore.Core.Messages.StorageMessage.WriteDelete)
    name: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteDelete>.Handle
    nameWithType: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteDelete>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteDelete>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WriteDelete
    name: StorageMessage.WriteDelete
    nameWithType: StorageMessage.WriteDelete
    fullName: EventStore.Core.Messages.StorageMessage.WriteDelete
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionStart}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionStart)
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionStart}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionStart)
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: IHandle<StorageMessage.WriteTransactionStart>.Handle(StorageMessage.WriteTransactionStart)
  nameWithType: StorageWriterService.IHandle<StorageMessage.WriteTransactionStart>.Handle(StorageMessage.WriteTransactionStart)
  fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionStart>.Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionStart)
  nameWithType.vb: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionStart>.Handle(StorageMessage.WriteTransactionStart)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionStart>.Handle(StorageMessage.WriteTransactionStart)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionStart}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionStart)
    name: IHandle<StorageMessage.WriteTransactionStart>.Handle
    nameWithType: StorageWriterService.IHandle<StorageMessage.WriteTransactionStart>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionStart>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WriteTransactionStart
    name: StorageMessage.WriteTransactionStart
    nameWithType: StorageMessage.WriteTransactionStart
    fullName: EventStore.Core.Messages.StorageMessage.WriteTransactionStart
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionStart}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionStart)
    name: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionStart>.Handle
    nameWithType: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionStart>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionStart>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WriteTransactionStart
    name: StorageMessage.WriteTransactionStart
    nameWithType: StorageMessage.WriteTransactionStart
    fullName: EventStore.Core.Messages.StorageMessage.WriteTransactionStart
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionData}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionData)
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionData}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionData)
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: IHandle<StorageMessage.WriteTransactionData>.Handle(StorageMessage.WriteTransactionData)
  nameWithType: StorageWriterService.IHandle<StorageMessage.WriteTransactionData>.Handle(StorageMessage.WriteTransactionData)
  fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionData>.Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionData)
  nameWithType.vb: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionData>.Handle(StorageMessage.WriteTransactionData)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionData>.Handle(StorageMessage.WriteTransactionData)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionData}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionData)
    name: IHandle<StorageMessage.WriteTransactionData>.Handle
    nameWithType: StorageWriterService.IHandle<StorageMessage.WriteTransactionData>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionData>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WriteTransactionData
    name: StorageMessage.WriteTransactionData
    nameWithType: StorageMessage.WriteTransactionData
    fullName: EventStore.Core.Messages.StorageMessage.WriteTransactionData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionData}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionData)
    name: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionData>.Handle
    nameWithType: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionData>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionData>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WriteTransactionData
    name: StorageMessage.WriteTransactionData
    nameWithType: StorageMessage.WriteTransactionData
    fullName: EventStore.Core.Messages.StorageMessage.WriteTransactionData
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionPrepare}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare)
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionPrepare}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare)
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: IHandle<StorageMessage.WriteTransactionPrepare>.Handle(StorageMessage.WriteTransactionPrepare)
  nameWithType: StorageWriterService.IHandle<StorageMessage.WriteTransactionPrepare>.Handle(StorageMessage.WriteTransactionPrepare)
  fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare>.Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare)
  nameWithType.vb: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare>.Handle(StorageMessage.WriteTransactionPrepare)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare>.Handle(StorageMessage.WriteTransactionPrepare)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionPrepare}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare)
    name: IHandle<StorageMessage.WriteTransactionPrepare>.Handle
    nameWithType: StorageWriterService.IHandle<StorageMessage.WriteTransactionPrepare>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare
    name: StorageMessage.WriteTransactionPrepare
    nameWithType: StorageMessage.WriteTransactionPrepare
    fullName: EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteTransactionPrepare}#Handle(EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare)
    name: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare>.Handle
    nameWithType: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare
    name: StorageMessage.WriteTransactionPrepare
    nameWithType: StorageMessage.WriteTransactionPrepare
    fullName: EventStore.Core.Messages.StorageMessage.WriteTransactionPrepare
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteCommit}#Handle(EventStore.Core.Messages.StorageMessage.WriteCommit)
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteCommit}#Handle(EventStore.Core.Messages.StorageMessage.WriteCommit)
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: IHandle<StorageMessage.WriteCommit>.Handle(StorageMessage.WriteCommit)
  nameWithType: StorageWriterService.IHandle<StorageMessage.WriteCommit>.Handle(StorageMessage.WriteCommit)
  fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteCommit>.Handle(EventStore.Core.Messages.StorageMessage.WriteCommit)
  nameWithType.vb: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteCommit>.Handle(StorageMessage.WriteCommit)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteCommit>.Handle(StorageMessage.WriteCommit)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteCommit}#Handle(EventStore.Core.Messages.StorageMessage.WriteCommit)
    name: IHandle<StorageMessage.WriteCommit>.Handle
    nameWithType: StorageWriterService.IHandle<StorageMessage.WriteCommit>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteCommit>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WriteCommit
    name: StorageMessage.WriteCommit
    nameWithType: StorageMessage.WriteCommit
    fullName: EventStore.Core.Messages.StorageMessage.WriteCommit
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#WriteCommit}#Handle(EventStore.Core.Messages.StorageMessage.WriteCommit)
    name: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteCommit>.Handle
    nameWithType: StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteCommit>.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WriteCommit>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WriteCommit
    name: StorageMessage.WriteCommit
    nameWithType: StorageMessage.WriteCommit
    fullName: EventStore.Core.Messages.StorageMessage.WriteCommit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.Flush(System.Boolean)
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.Flush(System.Boolean)
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: true
  name: Flush(Boolean)
  nameWithType: StorageWriterService.Flush(Boolean)
  fullName: EventStore.Core.Services.Storage.StorageWriterService.Flush(System.Boolean)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.Flush(System.Boolean)
    name: Flush
    nameWithType: StorageWriterService.Flush
    fullName: EventStore.Core.Services.Storage.StorageWriterService.Flush
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.Flush(System.Boolean)
    name: Flush
    nameWithType: StorageWriterService.Flush
    fullName: EventStore.Core.Services.Storage.StorageWriterService.Flush
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.Handle(EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest)
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.Handle(EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest)
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: Handle(MonitoringMessage.InternalStatsRequest)
  nameWithType: StorageWriterService.Handle(MonitoringMessage.InternalStatsRequest)
  fullName: EventStore.Core.Services.Storage.StorageWriterService.Handle(EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.Handle(EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest)
    name: Handle
    nameWithType: StorageWriterService.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest
    name: MonitoringMessage.InternalStatsRequest
    nameWithType: MonitoringMessage.InternalStatsRequest
    fullName: EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.Handle(EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest)
    name: Handle
    nameWithType: StorageWriterService.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest
    name: MonitoringMessage.InternalStatsRequest
    nameWithType: MonitoringMessage.InternalStatsRequest
    fullName: EventStore.Core.Messages.MonitoringMessage.InternalStatsRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.ClusterStorageWriterService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ClusterStorageWriterService>()
  nameWithType: ProtobufExtensions.Serialize<ClusterStorageWriterService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.ClusterStorageWriterService>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ClusterStorageWriterService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.ClusterStorageWriterService)()
  name.vb: Serialize(Of ClusterStorageWriterService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ClusterStorageWriterService>
    nameWithType: ProtobufExtensions.Serialize<ClusterStorageWriterService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.ClusterStorageWriterService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ClusterStorageWriterService)
    nameWithType: ProtobufExtensions.Serialize(Of ClusterStorageWriterService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.ClusterStorageWriterService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.ClusterStorageWriterService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ClusterStorageWriterService>()
  nameWithType: ProtobufExtensions.SerializeToArray<ClusterStorageWriterService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.ClusterStorageWriterService>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ClusterStorageWriterService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.ClusterStorageWriterService)()
  name.vb: SerializeToArray(Of ClusterStorageWriterService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ClusterStorageWriterService>
    nameWithType: ProtobufExtensions.SerializeToArray<ClusterStorageWriterService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.ClusterStorageWriterService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ClusterStorageWriterService)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ClusterStorageWriterService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.ClusterStorageWriterService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage
  commentId: N:EventStore.Core.Services.Storage
  isExternal: false
  name: EventStore.Core.Services.Storage
  nameWithType: EventStore.Core.Services.Storage
  fullName: EventStore.Core.Services.Storage
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  isExternal: false
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  isExternal: false
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.ClusterStorageWriterService.#ctor*
  commentId: Overload:EventStore.Core.Services.ClusterStorageWriterService.#ctor
  isExternal: false
  name: ClusterStorageWriterService
  nameWithType: ClusterStorageWriterService.ClusterStorageWriterService
  fullName: EventStore.Core.Services.ClusterStorageWriterService.ClusterStorageWriterService
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  isExternal: false
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.Bus.ISubscriber
  commentId: T:EventStore.Core.Bus.ISubscriber
  parent: EventStore.Core.Bus
  isExternal: false
  name: ISubscriber
  nameWithType: ISubscriber
  fullName: EventStore.Core.Bus.ISubscriber
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkDb
  commentId: T:EventStore.Core.TransactionLog.Chunks.TFChunkDb
  parent: EventStore.Core.TransactionLog.Chunks
  isExternal: false
  name: TFChunkDb
  nameWithType: TFChunkDb
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkDb
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkWriter
  commentId: T:EventStore.Core.TransactionLog.Chunks.TFChunkWriter
  parent: EventStore.Core.TransactionLog.Chunks
  isExternal: false
  name: TFChunkWriter
  nameWithType: TFChunkWriter
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkWriter
- uid: EventStore.Core.Services.Storage.ReaderIndex.IIndexWriter
  commentId: T:EventStore.Core.Services.Storage.ReaderIndex.IIndexWriter
  parent: EventStore.Core.Services.Storage.ReaderIndex
  isExternal: false
  name: IIndexWriter
  nameWithType: IIndexWriter
  fullName: EventStore.Core.Services.Storage.ReaderIndex.IIndexWriter
- uid: EventStore.Core.Services.Storage.EpochManager.IEpochManager
  commentId: T:EventStore.Core.Services.Storage.EpochManager.IEpochManager
  parent: EventStore.Core.Services.Storage.EpochManager
  isExternal: false
  name: IEpochManager
  nameWithType: IEpochManager
  fullName: EventStore.Core.Services.Storage.EpochManager.IEpochManager
- uid: Func{System.Int64}
  commentId: '!:Func{System.Int64}'
  definition: Func`1
  name: Func<Int64>
  nameWithType: Func<Int64>
  fullName: Func<System.Int64>
  nameWithType.vb: Func(Of Int64)
  fullName.vb: Func(Of System.Int64)
  name.vb: Func(Of Int64)
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.Chunks
  commentId: N:EventStore.Core.TransactionLog.Chunks
  isExternal: false
  name: EventStore.Core.TransactionLog.Chunks
  nameWithType: EventStore.Core.TransactionLog.Chunks
  fullName: EventStore.Core.TransactionLog.Chunks
- uid: EventStore.Core.Services.Storage.ReaderIndex
  commentId: N:EventStore.Core.Services.Storage.ReaderIndex
  isExternal: false
  name: EventStore.Core.Services.Storage.ReaderIndex
  nameWithType: EventStore.Core.Services.Storage.ReaderIndex
  fullName: EventStore.Core.Services.Storage.ReaderIndex
- uid: EventStore.Core.Services.Storage.EpochManager
  commentId: N:EventStore.Core.Services.Storage.EpochManager
  isExternal: false
  name: EventStore.Core.Services.Storage.EpochManager
  nameWithType: EventStore.Core.Services.Storage.EpochManager
  fullName: EventStore.Core.Services.Storage.EpochManager
- uid: Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageWriterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Services.Storage.StorageWriterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Services.Storage.StorageWriterService
  isExternal: false
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: StorageWriterService.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Services.Storage.StorageWriterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
    name: Handle
    nameWithType: StorageWriterService.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.StorageWriterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
    name: Handle
    nameWithType: StorageWriterService.Handle
    fullName: EventStore.Core.Services.Storage.StorageWriterService.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.ClusterStorageWriterService.Handle*
  commentId: Overload:EventStore.Core.Services.ClusterStorageWriterService.Handle
  isExternal: false
  name: Handle
  nameWithType: ClusterStorageWriterService.Handle
  fullName: EventStore.Core.Services.ClusterStorageWriterService.Handle
- uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  commentId: T:EventStore.Core.Messages.SystemMessage.StateChangeMessage
  parent: EventStore.Core.Messages
  isExternal: false
  name: SystemMessage.StateChangeMessage
  nameWithType: SystemMessage.StateChangeMessage
  fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  isExternal: false
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed}.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed}.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ReplicationMessage.ReplicaSubscribed)
  nameWithType: IHandle<ReplicationMessage.ReplicaSubscribed>.Handle(ReplicationMessage.ReplicaSubscribed)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed>.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed)
  nameWithType.vb: IHandle(Of ReplicationMessage.ReplicaSubscribed).Handle(ReplicationMessage.ReplicaSubscribed)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed).Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ReplicationMessage.ReplicaSubscribed>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed
    name: ReplicationMessage.ReplicaSubscribed
    nameWithType: ReplicationMessage.ReplicaSubscribed
    fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ReplicationMessage.ReplicaSubscribed).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed
    name: ReplicationMessage.ReplicaSubscribed
    nameWithType: ReplicationMessage.ReplicaSubscribed
    fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed
  commentId: T:EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed
  parent: EventStore.Core.Messages
  isExternal: false
  name: ReplicationMessage.ReplicaSubscribed
  nameWithType: ReplicationMessage.ReplicaSubscribed
  fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscribed
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  isExternal: false
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.CreateChunk}.Handle(EventStore.Core.Messages.ReplicationMessage.CreateChunk)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.CreateChunk}.Handle(EventStore.Core.Messages.ReplicationMessage.CreateChunk)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.CreateChunk}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ReplicationMessage.CreateChunk)
  nameWithType: IHandle<ReplicationMessage.CreateChunk>.Handle(ReplicationMessage.CreateChunk)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.CreateChunk>.Handle(EventStore.Core.Messages.ReplicationMessage.CreateChunk)
  nameWithType.vb: IHandle(Of ReplicationMessage.CreateChunk).Handle(ReplicationMessage.CreateChunk)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.CreateChunk).Handle(EventStore.Core.Messages.ReplicationMessage.CreateChunk)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ReplicationMessage.CreateChunk>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.CreateChunk>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.CreateChunk
    name: ReplicationMessage.CreateChunk
    nameWithType: ReplicationMessage.CreateChunk
    fullName: EventStore.Core.Messages.ReplicationMessage.CreateChunk
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ReplicationMessage.CreateChunk).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.CreateChunk).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.CreateChunk
    name: ReplicationMessage.CreateChunk
    nameWithType: ReplicationMessage.CreateChunk
    fullName: EventStore.Core.Messages.ReplicationMessage.CreateChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ReplicationMessage.CreateChunk
  commentId: T:EventStore.Core.Messages.ReplicationMessage.CreateChunk
  parent: EventStore.Core.Messages
  isExternal: false
  name: ReplicationMessage.CreateChunk
  nameWithType: ReplicationMessage.CreateChunk
  fullName: EventStore.Core.Messages.ReplicationMessage.CreateChunk
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.RawChunkBulk}.Handle(EventStore.Core.Messages.ReplicationMessage.RawChunkBulk)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.RawChunkBulk}.Handle(EventStore.Core.Messages.ReplicationMessage.RawChunkBulk)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.RawChunkBulk}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ReplicationMessage.RawChunkBulk)
  nameWithType: IHandle<ReplicationMessage.RawChunkBulk>.Handle(ReplicationMessage.RawChunkBulk)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.RawChunkBulk>.Handle(EventStore.Core.Messages.ReplicationMessage.RawChunkBulk)
  nameWithType.vb: IHandle(Of ReplicationMessage.RawChunkBulk).Handle(ReplicationMessage.RawChunkBulk)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.RawChunkBulk).Handle(EventStore.Core.Messages.ReplicationMessage.RawChunkBulk)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ReplicationMessage.RawChunkBulk>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.RawChunkBulk>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.RawChunkBulk
    name: ReplicationMessage.RawChunkBulk
    nameWithType: ReplicationMessage.RawChunkBulk
    fullName: EventStore.Core.Messages.ReplicationMessage.RawChunkBulk
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ReplicationMessage.RawChunkBulk).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.RawChunkBulk).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.RawChunkBulk
    name: ReplicationMessage.RawChunkBulk
    nameWithType: ReplicationMessage.RawChunkBulk
    fullName: EventStore.Core.Messages.ReplicationMessage.RawChunkBulk
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ReplicationMessage.RawChunkBulk
  commentId: T:EventStore.Core.Messages.ReplicationMessage.RawChunkBulk
  parent: EventStore.Core.Messages
  isExternal: false
  name: ReplicationMessage.RawChunkBulk
  nameWithType: ReplicationMessage.RawChunkBulk
  fullName: EventStore.Core.Messages.ReplicationMessage.RawChunkBulk
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.DataChunkBulk}.Handle(EventStore.Core.Messages.ReplicationMessage.DataChunkBulk)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.DataChunkBulk}.Handle(EventStore.Core.Messages.ReplicationMessage.DataChunkBulk)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.DataChunkBulk}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ReplicationMessage.DataChunkBulk)
  nameWithType: IHandle<ReplicationMessage.DataChunkBulk>.Handle(ReplicationMessage.DataChunkBulk)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.DataChunkBulk>.Handle(EventStore.Core.Messages.ReplicationMessage.DataChunkBulk)
  nameWithType.vb: IHandle(Of ReplicationMessage.DataChunkBulk).Handle(ReplicationMessage.DataChunkBulk)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.DataChunkBulk).Handle(EventStore.Core.Messages.ReplicationMessage.DataChunkBulk)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ReplicationMessage.DataChunkBulk>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.DataChunkBulk>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.DataChunkBulk
    name: ReplicationMessage.DataChunkBulk
    nameWithType: ReplicationMessage.DataChunkBulk
    fullName: EventStore.Core.Messages.ReplicationMessage.DataChunkBulk
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ReplicationMessage.DataChunkBulk).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.DataChunkBulk).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.DataChunkBulk
    name: ReplicationMessage.DataChunkBulk
    nameWithType: ReplicationMessage.DataChunkBulk
    fullName: EventStore.Core.Messages.ReplicationMessage.DataChunkBulk
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ReplicationMessage.DataChunkBulk
  commentId: T:EventStore.Core.Messages.ReplicationMessage.DataChunkBulk
  parent: EventStore.Core.Messages
  isExternal: false
  name: ReplicationMessage.DataChunkBulk
  nameWithType: ReplicationMessage.DataChunkBulk
  fullName: EventStore.Core.Messages.ReplicationMessage.DataChunkBulk

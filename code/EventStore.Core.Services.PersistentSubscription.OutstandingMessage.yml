### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
  commentId: T:EventStore.Core.Services.PersistentSubscription.OutstandingMessage
  id: OutstandingMessage
  parent: EventStore.Core.Services.PersistentSubscription
  children:
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessage.#ctor(Guid,EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionClient,EventStore.Core.Data.ResolvedEvent,System.Int32)
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessage.EventId
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessage.HandlingClient
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessage.ResolvedEvent
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessage.RetryCount
  langs:
  - csharp
  - vb
  name: OutstandingMessage
  nameWithType: OutstandingMessage
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
  type: Struct
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: OutstandingMessage
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessage.cs
    startLine: 5
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public struct OutstandingMessage
    content.vb: Public Structure OutstandingMessage
  extensionMethods:
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessage.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessage.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessage.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.ResolvedEvent
  commentId: F:EventStore.Core.Services.PersistentSubscription.OutstandingMessage.ResolvedEvent
  id: ResolvedEvent
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
  langs:
  - csharp
  - vb
  name: ResolvedEvent
  nameWithType: OutstandingMessage.ResolvedEvent
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.ResolvedEvent
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ResolvedEvent
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessage.cs
    startLine: 7
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public readonly ResolvedEvent ResolvedEvent
    return:
      type: EventStore.Core.Data.ResolvedEvent
    content.vb: Public ReadOnly ResolvedEvent As ResolvedEvent
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.HandlingClient
  commentId: F:EventStore.Core.Services.PersistentSubscription.OutstandingMessage.HandlingClient
  id: HandlingClient
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
  langs:
  - csharp
  - vb
  name: HandlingClient
  nameWithType: OutstandingMessage.HandlingClient
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.HandlingClient
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: HandlingClient
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessage.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public readonly PersistentSubscriptionClient HandlingClient
    return:
      type: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionClient
    content.vb: Public ReadOnly HandlingClient As PersistentSubscriptionClient
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.RetryCount
  commentId: F:EventStore.Core.Services.PersistentSubscription.OutstandingMessage.RetryCount
  id: RetryCount
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
  langs:
  - csharp
  - vb
  name: RetryCount
  nameWithType: OutstandingMessage.RetryCount
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.RetryCount
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: RetryCount
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessage.cs
    startLine: 9
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public readonly int RetryCount
    return:
      type: System.Int32
    content.vb: Public ReadOnly RetryCount As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.EventId
  commentId: F:EventStore.Core.Services.PersistentSubscription.OutstandingMessage.EventId
  id: EventId
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
  langs:
  - csharp
  - vb
  name: EventId
  nameWithType: OutstandingMessage.EventId
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.EventId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: EventId
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessage.cs
    startLine: 10
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public readonly Guid EventId
    return:
      type: Guid
    content.vb: Public ReadOnly EventId As Guid
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.#ctor(Guid,EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionClient,EventStore.Core.Data.ResolvedEvent,System.Int32)
  commentId: M:EventStore.Core.Services.PersistentSubscription.OutstandingMessage.#ctor(Guid,EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionClient,EventStore.Core.Data.ResolvedEvent,System.Int32)
  id: '#ctor(Guid,EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionClient,EventStore.Core.Data.ResolvedEvent,System.Int32)'
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
  langs:
  - csharp
  - vb
  name: OutstandingMessage(Guid, PersistentSubscriptionClient, ResolvedEvent, Int32)
  nameWithType: OutstandingMessage.OutstandingMessage(Guid, PersistentSubscriptionClient, ResolvedEvent, Int32)
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.OutstandingMessage(Guid, EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionClient, EventStore.Core.Data.ResolvedEvent, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessage.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessage.cs
    startLine: 12
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public OutstandingMessage(Guid eventId, PersistentSubscriptionClient handlingClient, ResolvedEvent resolvedEvent, int retryCount)
    parameters:
    - id: eventId
      type: Guid
    - id: handlingClient
      type: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionClient
    - id: resolvedEvent
      type: EventStore.Core.Data.ResolvedEvent
    - id: retryCount
      type: System.Int32
    content.vb: Public Sub New(eventId As Guid, handlingClient As PersistentSubscriptionClient, resolvedEvent As ResolvedEvent, retryCount As Integer)
  overload: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.PersistentSubscription
  commentId: N:EventStore.Core.Services.PersistentSubscription
  isExternal: false
  name: EventStore.Core.Services.PersistentSubscription
  nameWithType: EventStore.Core.Services.PersistentSubscription
  fullName: EventStore.Core.Services.PersistentSubscription
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  parent: EventStore.Projections.Core.Utils.EnumExtensions
  definition: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<OutstandingMessage>()
  nameWithType: EnumExtensions.EnumValueName<OutstandingMessage>()
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.Core.Services.PersistentSubscription.OutstandingMessage>()
  nameWithType.vb: EnumExtensions.EnumValueName(Of OutstandingMessage)()
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.Core.Services.PersistentSubscription.OutstandingMessage)()
  name.vb: EnumValueName(Of OutstandingMessage)()
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName<OutstandingMessage>
    nameWithType: EnumExtensions.EnumValueName<OutstandingMessage>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.Core.Services.PersistentSubscription.OutstandingMessage>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName(Of OutstandingMessage)
    nameWithType: EnumExtensions.EnumValueName(Of OutstandingMessage)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.Core.Services.PersistentSubscription.OutstandingMessage)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<OutstandingMessage>()
  nameWithType: ProtobufExtensions.Serialize<OutstandingMessage>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.PersistentSubscription.OutstandingMessage>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of OutstandingMessage)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.PersistentSubscription.OutstandingMessage)()
  name.vb: Serialize(Of OutstandingMessage)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<OutstandingMessage>
    nameWithType: ProtobufExtensions.Serialize<OutstandingMessage>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.PersistentSubscription.OutstandingMessage>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of OutstandingMessage)
    nameWithType: ProtobufExtensions.Serialize(Of OutstandingMessage)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.PersistentSubscription.OutstandingMessage)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<OutstandingMessage>()
  nameWithType: ProtobufExtensions.SerializeToArray<OutstandingMessage>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.PersistentSubscription.OutstandingMessage>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of OutstandingMessage)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.PersistentSubscription.OutstandingMessage)()
  name.vb: SerializeToArray(Of OutstandingMessage)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<OutstandingMessage>
    nameWithType: ProtobufExtensions.SerializeToArray<OutstandingMessage>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.PersistentSubscription.OutstandingMessage>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of OutstandingMessage)
    nameWithType: ProtobufExtensions.SerializeToArray(Of OutstandingMessage)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.PersistentSubscription.OutstandingMessage)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  isExternal: false
  name: EnumValueName<T>(T)
  nameWithType: EnumExtensions.EnumValueName<T>(T)
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>(T)
  nameWithType.vb: EnumExtensions.EnumValueName(Of T)(T)
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)(T)
  name.vb: EnumValueName(Of T)(T)
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName<T>
    nameWithType: EnumExtensions.EnumValueName<T>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName(Of T)
    nameWithType: EnumExtensions.EnumValueName(Of T)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions
  commentId: T:EventStore.Projections.Core.Utils.EnumExtensions
  parent: EventStore.Projections.Core.Utils
  isExternal: false
  name: EnumExtensions
  nameWithType: EnumExtensions
  fullName: EventStore.Projections.Core.Utils.EnumExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils
  commentId: N:EventStore.Projections.Core.Utils
  isExternal: false
  name: EventStore.Projections.Core.Utils
  nameWithType: EventStore.Projections.Core.Utils
  fullName: EventStore.Projections.Core.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Data.ResolvedEvent
  commentId: T:EventStore.Core.Data.ResolvedEvent
  parent: EventStore.Core.Data
  isExternal: false
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.Core.Data.ResolvedEvent
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  isExternal: false
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionClient
  commentId: T:EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionClient
  parent: EventStore.Core.Services.PersistentSubscription
  isExternal: false
  name: PersistentSubscriptionClient
  nameWithType: PersistentSubscriptionClient
  fullName: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionClient
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.#ctor*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.OutstandingMessage.#ctor
  isExternal: false
  name: OutstandingMessage
  nameWithType: OutstandingMessage.OutstandingMessage
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessage.OutstandingMessage

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache
  commentId: T:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache
  id: OutstandingMessageCache
  parent: EventStore.Core.Services.PersistentSubscription
  children:
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.#ctor
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Count
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetLowestPosition
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessageById(Guid,EventStore.Core.Services.PersistentSubscription.OutstandingMessage@)
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessagesExpiringBefore(DateTime)
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove(Guid)
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove(IEnumerable{Guid})
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.StartMessage(EventStore.Core.Services.PersistentSubscription.OutstandingMessage,DateTime)
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.WaitingTimeMessages
  langs:
  - csharp
  - vb
  name: OutstandingMessageCache
  nameWithType: OutstandingMessageCache
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: OutstandingMessageCache
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
    startLine: 13
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: 'public class OutstandingMessageCache : object'
    content.vb: >-
      Public Class OutstandingMessageCache

          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.#ctor
  commentId: M:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.#ctor
  id: '#ctor'
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache
  langs:
  - csharp
  - vb
  name: OutstandingMessageCache()
  nameWithType: OutstandingMessageCache.OutstandingMessageCache()
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.OutstandingMessageCache()
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
    startLine: 31
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public OutstandingMessageCache()
    content.vb: Public Sub New
  overload: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Count
  commentId: P:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Count
  id: Count
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: OutstandingMessageCache.Count
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Count
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Count
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
    startLine: 38
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove(Guid)
  commentId: M:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove(Guid)
  id: Remove(Guid)
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache
  langs:
  - csharp
  - vb
  name: Remove(Guid)
  nameWithType: OutstandingMessageCache.Remove(Guid)
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove(Guid)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Remove
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
    startLine: 40
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public void Remove(Guid messageId)
    parameters:
    - id: messageId
      type: Guid
    content.vb: Public Sub Remove(messageId As Guid)
  overload: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove(IEnumerable{Guid})
  commentId: M:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove(IEnumerable{Guid})
  id: Remove(IEnumerable{Guid})
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache
  langs:
  - csharp
  - vb
  name: Remove(IEnumerable<Guid>)
  nameWithType: OutstandingMessageCache.Remove(IEnumerable<Guid>)
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove(IEnumerable<Guid>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Remove
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
    startLine: 51
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public void Remove(IEnumerable<Guid> messageIds)
    parameters:
    - id: messageIds
      type: IEnumerable{Guid}
    content.vb: Public Sub Remove(messageIds As IEnumerable(Of Guid))
  overload: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove*
  nameWithType.vb: OutstandingMessageCache.Remove(IEnumerable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove(IEnumerable(Of Guid))
  name.vb: Remove(IEnumerable(Of Guid))
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.StartMessage(EventStore.Core.Services.PersistentSubscription.OutstandingMessage,DateTime)
  commentId: M:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.StartMessage(EventStore.Core.Services.PersistentSubscription.OutstandingMessage,DateTime)
  id: StartMessage(EventStore.Core.Services.PersistentSubscription.OutstandingMessage,DateTime)
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache
  langs:
  - csharp
  - vb
  name: StartMessage(OutstandingMessage, DateTime)
  nameWithType: OutstandingMessageCache.StartMessage(OutstandingMessage, DateTime)
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.StartMessage(EventStore.Core.Services.PersistentSubscription.OutstandingMessage, DateTime)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: StartMessage
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
    startLine: 56
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public StartMessageResult StartMessage(OutstandingMessage message, DateTime expires)
    parameters:
    - id: message
      type: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
    - id: expires
      type: DateTime
    return:
      type: EventStore.Core.Services.PersistentSubscription.StartMessageResult
    content.vb: Public Function StartMessage(message As OutstandingMessage, expires As DateTime) As StartMessageResult
  overload: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.StartMessage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessagesExpiringBefore(DateTime)
  commentId: M:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessagesExpiringBefore(DateTime)
  id: GetMessagesExpiringBefore(DateTime)
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache
  langs:
  - csharp
  - vb
  name: GetMessagesExpiringBefore(DateTime)
  nameWithType: OutstandingMessageCache.GetMessagesExpiringBefore(DateTime)
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessagesExpiringBefore(DateTime)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetMessagesExpiringBefore
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
    startLine: 67
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public IEnumerable<OutstandingMessage> GetMessagesExpiringBefore(DateTime time)
    parameters:
    - id: time
      type: DateTime
    return:
      type: IEnumerable{EventStore.Core.Services.PersistentSubscription.OutstandingMessage}
    content.vb: Public Function GetMessagesExpiringBefore(time As DateTime) As IEnumerable(Of OutstandingMessage)
  overload: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessagesExpiringBefore*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.WaitingTimeMessages
  commentId: M:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.WaitingTimeMessages
  id: WaitingTimeMessages
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache
  langs:
  - csharp
  - vb
  name: WaitingTimeMessages()
  nameWithType: OutstandingMessageCache.WaitingTimeMessages()
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.WaitingTimeMessages()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: WaitingTimeMessages
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
    startLine: 86
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public IEnumerable<Tuple<DateTime, RetryableMessage>> WaitingTimeMessages()
    return:
      type: IEnumerable{Tuple{DateTime,EventStore.Core.Services.PersistentSubscription.RetryableMessage}}
    content.vb: Public Function WaitingTimeMessages As IEnumerable(Of Tuple(Of DateTime, RetryableMessage))
  overload: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.WaitingTimeMessages*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetLowestPosition
  commentId: M:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetLowestPosition
  id: GetLowestPosition
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache
  langs:
  - csharp
  - vb
  name: GetLowestPosition()
  nameWithType: OutstandingMessageCache.GetLowestPosition()
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetLowestPosition()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetLowestPosition
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
    startLine: 90
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public long GetLowestPosition()
    return:
      type: System.Int64
    content.vb: Public Function GetLowestPosition As Long
  overload: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetLowestPosition*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessageById(Guid,EventStore.Core.Services.PersistentSubscription.OutstandingMessage@)
  commentId: M:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessageById(Guid,EventStore.Core.Services.PersistentSubscription.OutstandingMessage@)
  id: GetMessageById(Guid,EventStore.Core.Services.PersistentSubscription.OutstandingMessage@)
  parent: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache
  langs:
  - csharp
  - vb
  name: GetMessageById(Guid, out OutstandingMessage)
  nameWithType: OutstandingMessageCache.GetMessageById(Guid, out OutstandingMessage)
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessageById(Guid, out EventStore.Core.Services.PersistentSubscription.OutstandingMessage)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetMessageById
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/OutstandingMessageCache.cs
    startLine: 97
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public bool GetMessageById(Guid id, out OutstandingMessage outstandingMessage)
    parameters:
    - id: id
      type: Guid
    - id: outstandingMessage
      type: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
    return:
      type: System.Boolean
    content.vb: Public Function GetMessageById(id As Guid, ByRef outstandingMessage As OutstandingMessage) As Boolean
  overload: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessageById*
  nameWithType.vb: OutstandingMessageCache.GetMessageById(Guid, ByRef OutstandingMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessageById(Guid, ByRef EventStore.Core.Services.PersistentSubscription.OutstandingMessage)
  name.vb: GetMessageById(Guid, ByRef OutstandingMessage)
references:
- uid: EventStore.Core.Services.PersistentSubscription
  commentId: N:EventStore.Core.Services.PersistentSubscription
  isExternal: false
  name: EventStore.Core.Services.PersistentSubscription
  nameWithType: EventStore.Core.Services.PersistentSubscription
  fullName: EventStore.Core.Services.PersistentSubscription
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<OutstandingMessageCache>()
  nameWithType: ProtobufExtensions.Serialize<OutstandingMessageCache>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of OutstandingMessageCache)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache)()
  name.vb: Serialize(Of OutstandingMessageCache)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<OutstandingMessageCache>
    nameWithType: ProtobufExtensions.Serialize<OutstandingMessageCache>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of OutstandingMessageCache)
    nameWithType: ProtobufExtensions.Serialize(Of OutstandingMessageCache)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<OutstandingMessageCache>()
  nameWithType: ProtobufExtensions.SerializeToArray<OutstandingMessageCache>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of OutstandingMessageCache)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache)()
  name.vb: SerializeToArray(Of OutstandingMessageCache)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<OutstandingMessageCache>
    nameWithType: ProtobufExtensions.SerializeToArray<OutstandingMessageCache>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of OutstandingMessageCache)
    nameWithType: ProtobufExtensions.SerializeToArray(Of OutstandingMessageCache)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.#ctor*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.#ctor
  isExternal: false
  name: OutstandingMessageCache
  nameWithType: OutstandingMessageCache.OutstandingMessageCache
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.OutstandingMessageCache
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Count*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Count
  isExternal: false
  name: Count
  nameWithType: OutstandingMessageCache.Count
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Count
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove
  isExternal: false
  name: Remove
  nameWithType: OutstandingMessageCache.Remove
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.Remove
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: IEnumerable{Guid}
  commentId: '!:IEnumerable{Guid}'
  definition: IEnumerable`1
  name: IEnumerable<Guid>
  nameWithType: IEnumerable<Guid>
  fullName: IEnumerable<Guid>
  nameWithType.vb: IEnumerable(Of Guid)
  fullName.vb: IEnumerable(Of Guid)
  name.vb: IEnumerable(Of Guid)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.StartMessage*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.StartMessage
  isExternal: false
  name: StartMessage
  nameWithType: OutstandingMessageCache.StartMessage
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.StartMessage
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
  commentId: T:EventStore.Core.Services.PersistentSubscription.OutstandingMessage
  parent: EventStore.Core.Services.PersistentSubscription
  isExternal: false
  name: OutstandingMessage
  nameWithType: OutstandingMessage
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: EventStore.Core.Services.PersistentSubscription.StartMessageResult
  commentId: T:EventStore.Core.Services.PersistentSubscription.StartMessageResult
  parent: EventStore.Core.Services.PersistentSubscription
  isExternal: false
  name: StartMessageResult
  nameWithType: StartMessageResult
  fullName: EventStore.Core.Services.PersistentSubscription.StartMessageResult
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessagesExpiringBefore*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessagesExpiringBefore
  isExternal: false
  name: GetMessagesExpiringBefore
  nameWithType: OutstandingMessageCache.GetMessagesExpiringBefore
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessagesExpiringBefore
- uid: IEnumerable{EventStore.Core.Services.PersistentSubscription.OutstandingMessage}
  commentId: '!:IEnumerable{EventStore.Core.Services.PersistentSubscription.OutstandingMessage}'
  definition: IEnumerable`1
  name: IEnumerable<OutstandingMessage>
  nameWithType: IEnumerable<OutstandingMessage>
  fullName: IEnumerable<EventStore.Core.Services.PersistentSubscription.OutstandingMessage>
  nameWithType.vb: IEnumerable(Of OutstandingMessage)
  fullName.vb: IEnumerable(Of EventStore.Core.Services.PersistentSubscription.OutstandingMessage)
  name.vb: IEnumerable(Of OutstandingMessage)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
    name: OutstandingMessage
    nameWithType: OutstandingMessage
    fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
    name: OutstandingMessage
    nameWithType: OutstandingMessage
    fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.WaitingTimeMessages*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.WaitingTimeMessages
  isExternal: false
  name: WaitingTimeMessages
  nameWithType: OutstandingMessageCache.WaitingTimeMessages
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.WaitingTimeMessages
- uid: IEnumerable{Tuple{DateTime,EventStore.Core.Services.PersistentSubscription.RetryableMessage}}
  commentId: '!:IEnumerable{Tuple{DateTime,EventStore.Core.Services.PersistentSubscription.RetryableMessage}}'
  definition: IEnumerable`1
  name: IEnumerable<Tuple<DateTime, RetryableMessage>>
  nameWithType: IEnumerable<Tuple<DateTime, RetryableMessage>>
  fullName: IEnumerable<Tuple<DateTime, EventStore.Core.Services.PersistentSubscription.RetryableMessage>>
  nameWithType.vb: IEnumerable(Of Tuple(Of DateTime, RetryableMessage))
  fullName.vb: IEnumerable(Of Tuple(Of DateTime, EventStore.Core.Services.PersistentSubscription.RetryableMessage))
  name.vb: IEnumerable(Of Tuple(Of DateTime, RetryableMessage))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.PersistentSubscription.RetryableMessage
    name: RetryableMessage
    nameWithType: RetryableMessage
    fullName: EventStore.Core.Services.PersistentSubscription.RetryableMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.PersistentSubscription.RetryableMessage
    name: RetryableMessage
    nameWithType: RetryableMessage
    fullName: EventStore.Core.Services.PersistentSubscription.RetryableMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetLowestPosition*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetLowestPosition
  isExternal: false
  name: GetLowestPosition
  nameWithType: OutstandingMessageCache.GetLowestPosition
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetLowestPosition
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessageById*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessageById
  isExternal: false
  name: GetMessageById
  nameWithType: OutstandingMessageCache.GetMessageById
  fullName: EventStore.Core.Services.PersistentSubscription.OutstandingMessageCache.GetMessageById
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean

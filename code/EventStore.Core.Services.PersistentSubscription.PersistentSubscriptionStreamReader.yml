### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader
  commentId: T:EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader
  id: PersistentSubscriptionStreamReader
  parent: EventStore.Core.Services.PersistentSubscription
  children:
  - EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.#ctor(EventStore.Core.Helpers.IODispatcher,System.Int32)
  - EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.BeginReadEvents(System.String,System.Int64,System.Int32,System.Int32,System.Boolean,Action{EventStore.Core.Data.ResolvedEvent[],System.Int64,System.Boolean})
  - EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.MaxPullBatchSize
  langs:
  - csharp
  - vb
  name: PersistentSubscriptionStreamReader
  nameWithType: PersistentSubscriptionStreamReader
  fullName: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionStreamReader.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: PersistentSubscriptionStreamReader
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionStreamReader.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: 'public class PersistentSubscriptionStreamReader : object, IPersistentSubscriptionStreamReader'
    content.vb: >-
      Public Class PersistentSubscriptionStreamReader

          Inherits Object

          Implements IPersistentSubscriptionStreamReader
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.MaxPullBatchSize
  commentId: F:EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.MaxPullBatchSize
  id: MaxPullBatchSize
  parent: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader
  langs:
  - csharp
  - vb
  name: MaxPullBatchSize
  nameWithType: PersistentSubscriptionStreamReader.MaxPullBatchSize
  fullName: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.MaxPullBatchSize
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionStreamReader.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MaxPullBatchSize
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionStreamReader.cs
    startLine: 10
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public const int MaxPullBatchSize = null
    return:
      type: System.Int32
    content.vb: Public Const MaxPullBatchSize As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.#ctor(EventStore.Core.Helpers.IODispatcher,System.Int32)
  commentId: M:EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.#ctor(EventStore.Core.Helpers.IODispatcher,System.Int32)
  id: '#ctor(EventStore.Core.Helpers.IODispatcher,System.Int32)'
  parent: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader
  langs:
  - csharp
  - vb
  name: PersistentSubscriptionStreamReader(IODispatcher, Int32)
  nameWithType: PersistentSubscriptionStreamReader.PersistentSubscriptionStreamReader(IODispatcher, Int32)
  fullName: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.PersistentSubscriptionStreamReader(EventStore.Core.Helpers.IODispatcher, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionStreamReader.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionStreamReader.cs
    startLine: 15
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public PersistentSubscriptionStreamReader(IODispatcher ioDispatcher, int maxPullBatchSize)
    parameters:
    - id: ioDispatcher
      type: EventStore.Core.Helpers.IODispatcher
    - id: maxPullBatchSize
      type: System.Int32
    content.vb: Public Sub New(ioDispatcher As IODispatcher, maxPullBatchSize As Integer)
  overload: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.BeginReadEvents(System.String,System.Int64,System.Int32,System.Int32,System.Boolean,Action{EventStore.Core.Data.ResolvedEvent[],System.Int64,System.Boolean})
  commentId: M:EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.BeginReadEvents(System.String,System.Int64,System.Int32,System.Int32,System.Boolean,Action{EventStore.Core.Data.ResolvedEvent[],System.Int64,System.Boolean})
  id: BeginReadEvents(System.String,System.Int64,System.Int32,System.Int32,System.Boolean,Action{EventStore.Core.Data.ResolvedEvent[],System.Int64,System.Boolean})
  parent: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader
  langs:
  - csharp
  - vb
  name: BeginReadEvents(String, Int64, Int32, Int32, Boolean, Action<ResolvedEvent[], Int64, Boolean>)
  nameWithType: PersistentSubscriptionStreamReader.BeginReadEvents(String, Int64, Int32, Int32, Boolean, Action<ResolvedEvent[], Int64, Boolean>)
  fullName: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.BeginReadEvents(System.String, System.Int64, System.Int32, System.Int32, System.Boolean, Action<EventStore.Core.Data.ResolvedEvent[], System.Int64, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionStreamReader.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: BeginReadEvents
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionStreamReader.cs
    startLine: 21
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public void BeginReadEvents(string stream, long startEventNumber, int countToLoad, int batchSize, bool resolveLinkTos, Action<ResolvedEvent[], long, bool> onEventsFound)
    parameters:
    - id: stream
      type: System.String
    - id: startEventNumber
      type: System.Int64
    - id: countToLoad
      type: System.Int32
    - id: batchSize
      type: System.Int32
    - id: resolveLinkTos
      type: System.Boolean
    - id: onEventsFound
      type: Action{EventStore.Core.Data.ResolvedEvent[],System.Int64,System.Boolean}
    content.vb: Public Sub BeginReadEvents(stream As String, startEventNumber As Long, countToLoad As Integer, batchSize As Integer, resolveLinkTos As Boolean, onEventsFound As Action(Of ResolvedEvent(), Long, Boolean))
  overload: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.BeginReadEvents*
  implements:
  - EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader.BeginReadEvents(System.String,System.Int64,System.Int32,System.Int32,System.Boolean,Action{EventStore.Core.Data.ResolvedEvent[],System.Int64,System.Boolean})
  nameWithType.vb: PersistentSubscriptionStreamReader.BeginReadEvents(String, Int64, Int32, Int32, Boolean, Action(Of ResolvedEvent(), Int64, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.BeginReadEvents(System.String, System.Int64, System.Int32, System.Int32, System.Boolean, Action(Of EventStore.Core.Data.ResolvedEvent(), System.Int64, System.Boolean))
  name.vb: BeginReadEvents(String, Int64, Int32, Int32, Boolean, Action(Of ResolvedEvent(), Int64, Boolean))
references:
- uid: EventStore.Core.Services.PersistentSubscription
  commentId: N:EventStore.Core.Services.PersistentSubscription
  isExternal: false
  name: EventStore.Core.Services.PersistentSubscription
  nameWithType: EventStore.Core.Services.PersistentSubscription
  fullName: EventStore.Core.Services.PersistentSubscription
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader
  commentId: T:EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader
  parent: EventStore.Core.Services.PersistentSubscription
  isExternal: false
  name: IPersistentSubscriptionStreamReader
  nameWithType: IPersistentSubscriptionStreamReader
  fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<PersistentSubscriptionStreamReader>()
  nameWithType: ProtobufExtensions.Serialize<PersistentSubscriptionStreamReader>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of PersistentSubscriptionStreamReader)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader)()
  name.vb: Serialize(Of PersistentSubscriptionStreamReader)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<PersistentSubscriptionStreamReader>
    nameWithType: ProtobufExtensions.Serialize<PersistentSubscriptionStreamReader>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of PersistentSubscriptionStreamReader)
    nameWithType: ProtobufExtensions.Serialize(Of PersistentSubscriptionStreamReader)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<PersistentSubscriptionStreamReader>()
  nameWithType: ProtobufExtensions.SerializeToArray<PersistentSubscriptionStreamReader>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of PersistentSubscriptionStreamReader)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader)()
  name.vb: SerializeToArray(Of PersistentSubscriptionStreamReader)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<PersistentSubscriptionStreamReader>
    nameWithType: ProtobufExtensions.SerializeToArray<PersistentSubscriptionStreamReader>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of PersistentSubscriptionStreamReader)
    nameWithType: ProtobufExtensions.SerializeToArray(Of PersistentSubscriptionStreamReader)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.#ctor*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.#ctor
  isExternal: false
  name: PersistentSubscriptionStreamReader
  nameWithType: PersistentSubscriptionStreamReader.PersistentSubscriptionStreamReader
  fullName: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.PersistentSubscriptionStreamReader
- uid: EventStore.Core.Helpers.IODispatcher
  commentId: T:EventStore.Core.Helpers.IODispatcher
  parent: EventStore.Core.Helpers
  isExternal: false
  name: IODispatcher
  nameWithType: IODispatcher
  fullName: EventStore.Core.Helpers.IODispatcher
- uid: EventStore.Core.Helpers
  commentId: N:EventStore.Core.Helpers
  isExternal: false
  name: EventStore.Core.Helpers
  nameWithType: EventStore.Core.Helpers
  fullName: EventStore.Core.Helpers
- uid: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.BeginReadEvents*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.BeginReadEvents
  isExternal: false
  name: BeginReadEvents
  nameWithType: PersistentSubscriptionStreamReader.BeginReadEvents
  fullName: EventStore.Core.Services.PersistentSubscription.PersistentSubscriptionStreamReader.BeginReadEvents
- uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader.BeginReadEvents(System.String,System.Int64,System.Int32,System.Int32,System.Boolean,Action{EventStore.Core.Data.ResolvedEvent[],System.Int64,System.Boolean})
  commentId: M:EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader.BeginReadEvents(System.String,System.Int64,System.Int32,System.Int32,System.Boolean,Action{EventStore.Core.Data.ResolvedEvent[],System.Int64,System.Boolean})
  parent: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader
  isExternal: true
  name: BeginReadEvents(String, Int64, Int32, Int32, Boolean, Action<ResolvedEvent[], Int64, Boolean>)
  nameWithType: IPersistentSubscriptionStreamReader.BeginReadEvents(String, Int64, Int32, Int32, Boolean, Action<ResolvedEvent[], Int64, Boolean>)
  fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader.BeginReadEvents(System.String, System.Int64, System.Int32, System.Int32, System.Boolean, Action<EventStore.Core.Data.ResolvedEvent[], System.Int64, System.Boolean>)
  nameWithType.vb: IPersistentSubscriptionStreamReader.BeginReadEvents(String, Int64, Int32, Int32, Boolean, Action(Of ResolvedEvent(), Int64, Boolean))
  fullName.vb: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader.BeginReadEvents(System.String, System.Int64, System.Int32, System.Int32, System.Boolean, Action(Of EventStore.Core.Data.ResolvedEvent(), System.Int64, System.Boolean))
  name.vb: BeginReadEvents(String, Int64, Int32, Int32, Boolean, Action(Of ResolvedEvent(), Int64, Boolean))
  spec.csharp:
  - uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader.BeginReadEvents(System.String,System.Int64,System.Int32,System.Int32,System.Boolean,Action{EventStore.Core.Data.ResolvedEvent[],System.Int64,System.Boolean})
    name: BeginReadEvents
    nameWithType: IPersistentSubscriptionStreamReader.BeginReadEvents
    fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader.BeginReadEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Data.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.Core.Data.ResolvedEvent
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader.BeginReadEvents(System.String,System.Int64,System.Int32,System.Int32,System.Boolean,Action{EventStore.Core.Data.ResolvedEvent[],System.Int64,System.Boolean})
    name: BeginReadEvents
    nameWithType: IPersistentSubscriptionStreamReader.BeginReadEvents
    fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionStreamReader.BeginReadEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Data.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.Core.Data.ResolvedEvent
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Action{EventStore.Core.Data.ResolvedEvent[],System.Int64,System.Boolean}
  commentId: '!:Action{EventStore.Core.Data.ResolvedEvent[],System.Int64,System.Boolean}'
  definition: Action`3
  name: Action<ResolvedEvent[], Int64, Boolean>
  nameWithType: Action<ResolvedEvent[], Int64, Boolean>
  fullName: Action<EventStore.Core.Data.ResolvedEvent[], System.Int64, System.Boolean>
  nameWithType.vb: Action(Of ResolvedEvent(), Int64, Boolean)
  fullName.vb: Action(Of EventStore.Core.Data.ResolvedEvent(), System.Int64, System.Boolean)
  name.vb: Action(Of ResolvedEvent(), Int64, Boolean)
  spec.csharp:
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Data.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.Core.Data.ResolvedEvent
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Data.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.Core.Data.ResolvedEvent
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`3
  isExternal: true
  name: Action<, , >
  nameWithType: Action<, , >
  fullName: Action<, , >
  nameWithType.vb: Action(Of , , )
  fullName.vb: Action(Of , , )
  name.vb: Action(Of , , )
  spec.csharp:
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.PersistentSubscription.SequencedEvent
  commentId: T:EventStore.Core.Services.PersistentSubscription.SequencedEvent
  id: SequencedEvent
  parent: EventStore.Core.Services.PersistentSubscription
  children:
  - EventStore.Core.Services.PersistentSubscription.SequencedEvent.#ctor(System.Int64,EventStore.Core.Data.ResolvedEvent)
  - EventStore.Core.Services.PersistentSubscription.SequencedEvent.Event
  - EventStore.Core.Services.PersistentSubscription.SequencedEvent.Sequence
  langs:
  - csharp
  - vb
  name: SequencedEvent
  nameWithType: SequencedEvent
  fullName: EventStore.Core.Services.PersistentSubscription.SequencedEvent
  type: Struct
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/SequencedEvent.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: SequencedEvent
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/SequencedEvent.cs
    startLine: 4
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public struct SequencedEvent
    content.vb: Public Structure SequencedEvent
  extensionMethods:
  - EventStore.Core.Services.PersistentSubscription.SequencedEvent.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  - EventStore.Core.Services.PersistentSubscription.SequencedEvent.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.PersistentSubscription.SequencedEvent.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: EventStore.Core.Services.PersistentSubscription.SequencedEvent.Sequence
  commentId: F:EventStore.Core.Services.PersistentSubscription.SequencedEvent.Sequence
  id: Sequence
  parent: EventStore.Core.Services.PersistentSubscription.SequencedEvent
  langs:
  - csharp
  - vb
  name: Sequence
  nameWithType: SequencedEvent.Sequence
  fullName: EventStore.Core.Services.PersistentSubscription.SequencedEvent.Sequence
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/SequencedEvent.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Sequence
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/SequencedEvent.cs
    startLine: 6
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public readonly long Sequence
    return:
      type: System.Int64
    content.vb: Public ReadOnly Sequence As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.PersistentSubscription.SequencedEvent.Event
  commentId: F:EventStore.Core.Services.PersistentSubscription.SequencedEvent.Event
  id: Event
  parent: EventStore.Core.Services.PersistentSubscription.SequencedEvent
  langs:
  - csharp
  - vb
  name: Event
  nameWithType: SequencedEvent.Event
  fullName: EventStore.Core.Services.PersistentSubscription.SequencedEvent.Event
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/SequencedEvent.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Event
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/SequencedEvent.cs
    startLine: 7
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public readonly ResolvedEvent Event
    return:
      type: EventStore.Core.Data.ResolvedEvent
    content.vb: Public ReadOnly Event As ResolvedEvent
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.PersistentSubscription.SequencedEvent.#ctor(System.Int64,EventStore.Core.Data.ResolvedEvent)
  commentId: M:EventStore.Core.Services.PersistentSubscription.SequencedEvent.#ctor(System.Int64,EventStore.Core.Data.ResolvedEvent)
  id: '#ctor(System.Int64,EventStore.Core.Data.ResolvedEvent)'
  parent: EventStore.Core.Services.PersistentSubscription.SequencedEvent
  langs:
  - csharp
  - vb
  name: SequencedEvent(Int64, ResolvedEvent)
  nameWithType: SequencedEvent.SequencedEvent(Int64, ResolvedEvent)
  fullName: EventStore.Core.Services.PersistentSubscription.SequencedEvent.SequencedEvent(System.Int64, EventStore.Core.Data.ResolvedEvent)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/PersistentSubscription/SequencedEvent.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/PersistentSubscription/SequencedEvent.cs
    startLine: 9
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public SequencedEvent(long sequence, ResolvedEvent event)
    parameters:
    - id: sequence
      type: System.Int64
    - id: event
      type: EventStore.Core.Data.ResolvedEvent
    content.vb: Public Sub New(sequence As Long, event As ResolvedEvent)
  overload: EventStore.Core.Services.PersistentSubscription.SequencedEvent.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.PersistentSubscription
  commentId: N:EventStore.Core.Services.PersistentSubscription
  isExternal: false
  name: EventStore.Core.Services.PersistentSubscription
  nameWithType: EventStore.Core.Services.PersistentSubscription
  fullName: EventStore.Core.Services.PersistentSubscription
- uid: EventStore.Core.Services.PersistentSubscription.SequencedEvent.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  parent: EventStore.Projections.Core.Utils.EnumExtensions
  definition: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<SequencedEvent>()
  nameWithType: EnumExtensions.EnumValueName<SequencedEvent>()
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.Core.Services.PersistentSubscription.SequencedEvent>()
  nameWithType.vb: EnumExtensions.EnumValueName(Of SequencedEvent)()
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.Core.Services.PersistentSubscription.SequencedEvent)()
  name.vb: EnumValueName(Of SequencedEvent)()
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName<SequencedEvent>
    nameWithType: EnumExtensions.EnumValueName<SequencedEvent>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.Core.Services.PersistentSubscription.SequencedEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName(Of SequencedEvent)
    nameWithType: EnumExtensions.EnumValueName(Of SequencedEvent)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.Core.Services.PersistentSubscription.SequencedEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.SequencedEvent.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<SequencedEvent>()
  nameWithType: ProtobufExtensions.Serialize<SequencedEvent>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.PersistentSubscription.SequencedEvent>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of SequencedEvent)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.PersistentSubscription.SequencedEvent)()
  name.vb: Serialize(Of SequencedEvent)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<SequencedEvent>
    nameWithType: ProtobufExtensions.Serialize<SequencedEvent>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.PersistentSubscription.SequencedEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of SequencedEvent)
    nameWithType: ProtobufExtensions.Serialize(Of SequencedEvent)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.PersistentSubscription.SequencedEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.SequencedEvent.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<SequencedEvent>()
  nameWithType: ProtobufExtensions.SerializeToArray<SequencedEvent>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.PersistentSubscription.SequencedEvent>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of SequencedEvent)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.PersistentSubscription.SequencedEvent)()
  name.vb: SerializeToArray(Of SequencedEvent)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<SequencedEvent>
    nameWithType: ProtobufExtensions.SerializeToArray<SequencedEvent>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.PersistentSubscription.SequencedEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of SequencedEvent)
    nameWithType: ProtobufExtensions.SerializeToArray(Of SequencedEvent)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.PersistentSubscription.SequencedEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  isExternal: false
  name: EnumValueName<T>(T)
  nameWithType: EnumExtensions.EnumValueName<T>(T)
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>(T)
  nameWithType.vb: EnumExtensions.EnumValueName(Of T)(T)
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)(T)
  name.vb: EnumValueName(Of T)(T)
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName<T>
    nameWithType: EnumExtensions.EnumValueName<T>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName(Of T)
    nameWithType: EnumExtensions.EnumValueName(Of T)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions
  commentId: T:EventStore.Projections.Core.Utils.EnumExtensions
  parent: EventStore.Projections.Core.Utils
  isExternal: false
  name: EnumExtensions
  nameWithType: EnumExtensions
  fullName: EventStore.Projections.Core.Utils.EnumExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils
  commentId: N:EventStore.Projections.Core.Utils
  isExternal: false
  name: EventStore.Projections.Core.Utils
  nameWithType: EventStore.Projections.Core.Utils
  fullName: EventStore.Projections.Core.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Data.ResolvedEvent
  commentId: T:EventStore.Core.Data.ResolvedEvent
  parent: EventStore.Core.Data
  isExternal: false
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.Core.Data.ResolvedEvent
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  isExternal: false
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: EventStore.Core.Services.PersistentSubscription.SequencedEvent.#ctor*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.SequencedEvent.#ctor
  isExternal: false
  name: SequencedEvent
  nameWithType: SequencedEvent.SequencedEvent
  fullName: EventStore.Core.Services.PersistentSubscription.SequencedEvent.SequencedEvent

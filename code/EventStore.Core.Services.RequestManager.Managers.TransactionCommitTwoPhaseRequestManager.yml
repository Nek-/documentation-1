### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager
  commentId: T:EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager
  id: TransactionCommitTwoPhaseRequestManager
  parent: EventStore.Core.Services.RequestManager.Managers
  children:
  - EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.#ctor(EventStore.Core.Bus.IPublisher,System.Int32,TimeSpan,TimeSpan,System.Boolean)
  - EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteFailedRequest(EventStore.Core.Messages.OperationResult,System.String,System.Int64)
  - EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteSuccessRequest(System.Int64,System.Int64,System.Int64,System.Int64)
  - EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  - EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.OnSecurityAccessGranted(Guid)
  langs:
  - csharp
  - vb
  name: TransactionCommitTwoPhaseRequestManager
  nameWithType: TransactionCommitTwoPhaseRequestManager
  fullName: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/TransactionCommitTwoPhaseRequestManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TransactionCommitTwoPhaseRequestManager
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/TransactionCommitTwoPhaseRequestManager.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: 'public class TransactionCommitTwoPhaseRequestManager : TwoPhaseRequestManagerBase, IRequestManager, IHandle<StorageMessage.CheckStreamAccessCompleted>, IHandle<StorageMessage.AlreadyCommitted>, IHandle<StorageMessage.PrepareAck>, IHandle<StorageMessage.CommitReplicated>, IHandle<StorageMessage.WrongExpectedVersion>, IHandle<StorageMessage.StreamDeleted>, IHandle<StorageMessage.RequestManagerTimerTick>, IHandle<ClientMessage.TransactionCommit>'
    content.vb: >-
      Public Class TransactionCommitTwoPhaseRequestManager

          Inherits TwoPhaseRequestManagerBase

          Implements IRequestManager, IHandle(Of StorageMessage.CheckStreamAccessCompleted), IHandle(Of StorageMessage.AlreadyCommitted), IHandle(Of StorageMessage.PrepareAck), IHandle(Of StorageMessage.CommitReplicated), IHandle(Of StorageMessage.WrongExpectedVersion), IHandle(Of StorageMessage.StreamDeleted), IHandle(Of StorageMessage.RequestManagerTimerTick), IHandle(Of ClientMessage.TransactionCommit)
  inheritance:
  - System.Object
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  implements:
  - EventStore.Core.Services.RequestManager.IRequestManager
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.AlreadyCommitted}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitReplicated}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}
  inheritedMembers:
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Publisher
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PublishEnvelope
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ResponseEnvelope
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ClientCorrId
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.NextTimeoutTime
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PrepareTimeout
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CommitTimeout
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase(EventStore.Core.Messaging.IEnvelope,Guid,Guid,System.String,IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase(EventStore.Core.Messaging.IEnvelope,Guid,Guid,System.Int64,IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.#ctor(EventStore.Core.Bus.IPublisher,System.Int32,TimeSpan,TimeSpan,System.Boolean)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.#ctor(EventStore.Core.Bus.IPublisher,System.Int32,TimeSpan,TimeSpan,System.Boolean)
  id: '#ctor(EventStore.Core.Bus.IPublisher,System.Int32,TimeSpan,TimeSpan,System.Boolean)'
  parent: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager
  langs:
  - csharp
  - vb
  name: TransactionCommitTwoPhaseRequestManager(IPublisher, Int32, TimeSpan, TimeSpan, Boolean)
  nameWithType: TransactionCommitTwoPhaseRequestManager.TransactionCommitTwoPhaseRequestManager(IPublisher, Int32, TimeSpan, TimeSpan, Boolean)
  fullName: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.TransactionCommitTwoPhaseRequestManager(EventStore.Core.Bus.IPublisher, System.Int32, TimeSpan, TimeSpan, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/TransactionCommitTwoPhaseRequestManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/TransactionCommitTwoPhaseRequestManager.cs
    startLine: 13
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public TransactionCommitTwoPhaseRequestManager(IPublisher publisher, int prepareCount, TimeSpan prepareTimeout, TimeSpan commitTimeout, bool betterOrdering)
    parameters:
    - id: publisher
      type: EventStore.Core.Bus.IPublisher
    - id: prepareCount
      type: System.Int32
    - id: prepareTimeout
      type: TimeSpan
    - id: commitTimeout
      type: TimeSpan
    - id: betterOrdering
      type: System.Boolean
    content.vb: Public Sub New(publisher As IPublisher, prepareCount As Integer, prepareTimeout As TimeSpan, commitTimeout As TimeSpan, betterOrdering As Boolean)
  overload: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  id: Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  parent: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.TransactionCommit)
  nameWithType: TransactionCommitTwoPhaseRequestManager.Handle(ClientMessage.TransactionCommit)
  fullName: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/TransactionCommitTwoPhaseRequestManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/TransactionCommitTwoPhaseRequestManager.cs
    startLine: 22
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(ClientMessage.TransactionCommit request)
    parameters:
    - id: request
      type: EventStore.Core.Messages.ClientMessage.TransactionCommit
    content.vb: Public Sub Handle(request As ClientMessage.TransactionCommit)
  overload: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.OnSecurityAccessGranted(Guid)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.OnSecurityAccessGranted(Guid)
  id: OnSecurityAccessGranted(Guid)
  parent: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager
  langs:
  - csharp
  - vb
  name: OnSecurityAccessGranted(Guid)
  nameWithType: TransactionCommitTwoPhaseRequestManager.OnSecurityAccessGranted(Guid)
  fullName: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.OnSecurityAccessGranted(Guid)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/TransactionCommitTwoPhaseRequestManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: OnSecurityAccessGranted
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/TransactionCommitTwoPhaseRequestManager.cs
    startLine: 29
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected override void OnSecurityAccessGranted(Guid internalCorrId)
    parameters:
    - id: internalCorrId
      type: Guid
    content.vb: Protected Overrides Sub OnSecurityAccessGranted(internalCorrId As Guid)
  overridden: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted(Guid)
  overload: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.OnSecurityAccessGranted*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteSuccessRequest(System.Int64,System.Int64,System.Int64,System.Int64)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteSuccessRequest(System.Int64,System.Int64,System.Int64,System.Int64)
  id: CompleteSuccessRequest(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager
  langs:
  - csharp
  - vb
  name: CompleteSuccessRequest(Int64, Int64, Int64, Int64)
  nameWithType: TransactionCommitTwoPhaseRequestManager.CompleteSuccessRequest(Int64, Int64, Int64, Int64)
  fullName: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteSuccessRequest(System.Int64, System.Int64, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/TransactionCommitTwoPhaseRequestManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CompleteSuccessRequest
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/TransactionCommitTwoPhaseRequestManager.cs
    startLine: 36
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected override void CompleteSuccessRequest(long firstEventNumber, long lastEventNumber, long preparePosition, long commitPosition)
    parameters:
    - id: firstEventNumber
      type: System.Int64
    - id: lastEventNumber
      type: System.Int64
    - id: preparePosition
      type: System.Int64
    - id: commitPosition
      type: System.Int64
    content.vb: Protected Overrides Sub CompleteSuccessRequest(firstEventNumber As Long, lastEventNumber As Long, preparePosition As Long, commitPosition As Long)
  overridden: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest(System.Int64,System.Int64,System.Int64,System.Int64)
  overload: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteSuccessRequest*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteFailedRequest(EventStore.Core.Messages.OperationResult,System.String,System.Int64)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteFailedRequest(EventStore.Core.Messages.OperationResult,System.String,System.Int64)
  id: CompleteFailedRequest(EventStore.Core.Messages.OperationResult,System.String,System.Int64)
  parent: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager
  langs:
  - csharp
  - vb
  name: CompleteFailedRequest(OperationResult, String, Int64)
  nameWithType: TransactionCommitTwoPhaseRequestManager.CompleteFailedRequest(OperationResult, String, Int64)
  fullName: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteFailedRequest(EventStore.Core.Messages.OperationResult, System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/TransactionCommitTwoPhaseRequestManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CompleteFailedRequest
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/TransactionCommitTwoPhaseRequestManager.cs
    startLine: 43
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected override void CompleteFailedRequest(OperationResult result, string error, long currentVersion)
    parameters:
    - id: result
      type: EventStore.Core.Messages.OperationResult
    - id: error
      type: System.String
    - id: currentVersion
      type: System.Int64
    content.vb: Protected Overrides Sub CompleteFailedRequest(result As OperationResult, error As String, currentVersion As Long)
  overridden: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest(EventStore.Core.Messages.OperationResult,System.String,System.Int64)
  overload: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteFailedRequest*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: EventStore.Core.Services.RequestManager.Managers
  commentId: N:EventStore.Core.Services.RequestManager.Managers
  isExternal: false
  name: EventStore.Core.Services.RequestManager.Managers
  nameWithType: EventStore.Core.Services.RequestManager.Managers
  fullName: EventStore.Core.Services.RequestManager.Managers
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  commentId: T:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  parent: EventStore.Core.Services.RequestManager.Managers
  isExternal: false
  name: TwoPhaseRequestManagerBase
  nameWithType: TwoPhaseRequestManagerBase
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
- uid: EventStore.Core.Services.RequestManager.IRequestManager
  commentId: T:EventStore.Core.Services.RequestManager.IRequestManager
  parent: EventStore.Core.Services.RequestManager
  isExternal: false
  name: IRequestManager
  nameWithType: IRequestManager
  fullName: EventStore.Core.Services.RequestManager.IRequestManager
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.CheckStreamAccessCompleted>
  nameWithType: IHandle<StorageMessage.CheckStreamAccessCompleted>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted>
  nameWithType.vb: IHandle(Of StorageMessage.CheckStreamAccessCompleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  name.vb: IHandle(Of StorageMessage.CheckStreamAccessCompleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    name: StorageMessage.CheckStreamAccessCompleted
    nameWithType: StorageMessage.CheckStreamAccessCompleted
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    name: StorageMessage.CheckStreamAccessCompleted
    nameWithType: StorageMessage.CheckStreamAccessCompleted
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.AlreadyCommitted}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.AlreadyCommitted}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.AlreadyCommitted>
  nameWithType: IHandle<StorageMessage.AlreadyCommitted>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.AlreadyCommitted>
  nameWithType.vb: IHandle(Of StorageMessage.AlreadyCommitted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  name.vb: IHandle(Of StorageMessage.AlreadyCommitted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
    name: StorageMessage.AlreadyCommitted
    nameWithType: StorageMessage.AlreadyCommitted
    fullName: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
    name: StorageMessage.AlreadyCommitted
    nameWithType: StorageMessage.AlreadyCommitted
    fullName: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.PrepareAck>
  nameWithType: IHandle<StorageMessage.PrepareAck>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.PrepareAck>
  nameWithType.vb: IHandle(Of StorageMessage.PrepareAck)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.PrepareAck)
  name.vb: IHandle(Of StorageMessage.PrepareAck)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitReplicated}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitReplicated}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.CommitReplicated>
  nameWithType: IHandle<StorageMessage.CommitReplicated>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CommitReplicated>
  nameWithType.vb: IHandle(Of StorageMessage.CommitReplicated)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CommitReplicated)
  name.vb: IHandle(Of StorageMessage.CommitReplicated)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.CommitReplicated
    name: StorageMessage.CommitReplicated
    nameWithType: StorageMessage.CommitReplicated
    fullName: EventStore.Core.Messages.StorageMessage.CommitReplicated
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.CommitReplicated
    name: StorageMessage.CommitReplicated
    nameWithType: StorageMessage.CommitReplicated
    fullName: EventStore.Core.Messages.StorageMessage.CommitReplicated
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.WrongExpectedVersion>
  nameWithType: IHandle<StorageMessage.WrongExpectedVersion>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WrongExpectedVersion>
  nameWithType.vb: IHandle(Of StorageMessage.WrongExpectedVersion)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  name.vb: IHandle(Of StorageMessage.WrongExpectedVersion)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    name: StorageMessage.WrongExpectedVersion
    nameWithType: StorageMessage.WrongExpectedVersion
    fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    name: StorageMessage.WrongExpectedVersion
    nameWithType: StorageMessage.WrongExpectedVersion
    fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.StreamDeleted>
  nameWithType: IHandle<StorageMessage.StreamDeleted>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.StreamDeleted>
  nameWithType.vb: IHandle(Of StorageMessage.StreamDeleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.StreamDeleted)
  name.vb: IHandle(Of StorageMessage.StreamDeleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
    name: StorageMessage.StreamDeleted
    nameWithType: StorageMessage.StreamDeleted
    fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
    name: StorageMessage.StreamDeleted
    nameWithType: StorageMessage.StreamDeleted
    fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.RequestManagerTimerTick>
  nameWithType: IHandle<StorageMessage.RequestManagerTimerTick>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick>
  nameWithType.vb: IHandle(Of StorageMessage.RequestManagerTimerTick)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  name.vb: IHandle(Of StorageMessage.RequestManagerTimerTick)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    name: StorageMessage.RequestManagerTimerTick
    nameWithType: StorageMessage.RequestManagerTimerTick
    fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    name: StorageMessage.RequestManagerTimerTick
    nameWithType: StorageMessage.RequestManagerTimerTick
    fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.TransactionCommit>
  nameWithType: IHandle<ClientMessage.TransactionCommit>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionCommit>
  nameWithType.vb: IHandle(Of ClientMessage.TransactionCommit)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionCommit)
  name.vb: IHandle(Of ClientMessage.TransactionCommit)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.TransactionCommit
    name: ClientMessage.TransactionCommit
    nameWithType: ClientMessage.TransactionCommit
    fullName: EventStore.Core.Messages.ClientMessage.TransactionCommit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.TransactionCommit
    name: ClientMessage.TransactionCommit
    nameWithType: ClientMessage.TransactionCommit
    fullName: EventStore.Core.Messages.ClientMessage.TransactionCommit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Publisher
  commentId: F:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Publisher
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: Publisher
  nameWithType: TwoPhaseRequestManagerBase.Publisher
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Publisher
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PublishEnvelope
  commentId: F:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PublishEnvelope
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: PublishEnvelope
  nameWithType: TwoPhaseRequestManagerBase.PublishEnvelope
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PublishEnvelope
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ResponseEnvelope
  commentId: P:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ResponseEnvelope
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: ResponseEnvelope
  nameWithType: TwoPhaseRequestManagerBase.ResponseEnvelope
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ResponseEnvelope
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ClientCorrId
  commentId: P:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ClientCorrId
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: ClientCorrId
  nameWithType: TwoPhaseRequestManagerBase.ClientCorrId
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ClientCorrId
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.NextTimeoutTime
  commentId: P:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.NextTimeoutTime
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: NextTimeoutTime
  nameWithType: TwoPhaseRequestManagerBase.NextTimeoutTime
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.NextTimeoutTime
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PrepareTimeout
  commentId: F:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PrepareTimeout
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: PrepareTimeout
  nameWithType: TwoPhaseRequestManagerBase.PrepareTimeout
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PrepareTimeout
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CommitTimeout
  commentId: F:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CommitTimeout
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: CommitTimeout
  nameWithType: TwoPhaseRequestManagerBase.CommitTimeout
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CommitTimeout
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase(EventStore.Core.Messaging.IEnvelope,Guid,Guid,System.String,IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase(EventStore.Core.Messaging.IEnvelope,Guid,Guid,System.String,IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: true
  name: InitNoPreparePhase(IEnvelope, Guid, Guid, String, IPrincipal, StreamAccessType)
  nameWithType: TwoPhaseRequestManagerBase.InitNoPreparePhase(IEnvelope, Guid, Guid, String, IPrincipal, StreamAccessType)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase(EventStore.Core.Messaging.IEnvelope, Guid, Guid, System.String, IPrincipal, EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  spec.csharp:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase(EventStore.Core.Messaging.IEnvelope,Guid,Guid,System.String,IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
    name: InitNoPreparePhase
    nameWithType: TwoPhaseRequestManagerBase.InitNoPreparePhase
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
    name: StreamAccessType
    nameWithType: StreamAccessType
    fullName: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase(EventStore.Core.Messaging.IEnvelope,Guid,Guid,System.String,IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
    name: InitNoPreparePhase
    nameWithType: TwoPhaseRequestManagerBase.InitNoPreparePhase
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
    name: StreamAccessType
    nameWithType: StreamAccessType
    fullName: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase(EventStore.Core.Messaging.IEnvelope,Guid,Guid,System.Int64,IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase(EventStore.Core.Messaging.IEnvelope,Guid,Guid,System.Int64,IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: true
  name: InitTwoPhase(IEnvelope, Guid, Guid, Int64, IPrincipal, StreamAccessType)
  nameWithType: TwoPhaseRequestManagerBase.InitTwoPhase(IEnvelope, Guid, Guid, Int64, IPrincipal, StreamAccessType)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase(EventStore.Core.Messaging.IEnvelope, Guid, Guid, System.Int64, IPrincipal, EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  spec.csharp:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase(EventStore.Core.Messaging.IEnvelope,Guid,Guid,System.Int64,IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
    name: InitTwoPhase
    nameWithType: TwoPhaseRequestManagerBase.InitTwoPhase
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
    name: StreamAccessType
    nameWithType: StreamAccessType
    fullName: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase(EventStore.Core.Messaging.IEnvelope,Guid,Guid,System.Int64,IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
    name: InitTwoPhase
    nameWithType: TwoPhaseRequestManagerBase.InitTwoPhase
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
    name: StreamAccessType
    nameWithType: StreamAccessType
    fullName: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: Handle(StorageMessage.CheckStreamAccessCompleted)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.CheckStreamAccessCompleted)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  spec.csharp:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    name: StorageMessage.CheckStreamAccessCompleted
    nameWithType: StorageMessage.CheckStreamAccessCompleted
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    name: StorageMessage.CheckStreamAccessCompleted
    nameWithType: StorageMessage.CheckStreamAccessCompleted
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: Handle(StorageMessage.WrongExpectedVersion)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.WrongExpectedVersion)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  spec.csharp:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    name: StorageMessage.WrongExpectedVersion
    nameWithType: StorageMessage.WrongExpectedVersion
    fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    name: StorageMessage.WrongExpectedVersion
    nameWithType: StorageMessage.WrongExpectedVersion
    fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: Handle(StorageMessage.StreamDeleted)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.StreamDeleted)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  spec.csharp:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
    name: StorageMessage.StreamDeleted
    nameWithType: StorageMessage.StreamDeleted
    fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
    name: StorageMessage.StreamDeleted
    nameWithType: StorageMessage.StreamDeleted
    fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: Handle(StorageMessage.RequestManagerTimerTick)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.RequestManagerTimerTick)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  spec.csharp:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    name: StorageMessage.RequestManagerTimerTick
    nameWithType: StorageMessage.RequestManagerTimerTick
    fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    name: StorageMessage.RequestManagerTimerTick
    nameWithType: StorageMessage.RequestManagerTimerTick
    fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: Handle(StorageMessage.AlreadyCommitted)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.AlreadyCommitted)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  spec.csharp:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
    name: StorageMessage.AlreadyCommitted
    nameWithType: StorageMessage.AlreadyCommitted
    fullName: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
    name: StorageMessage.AlreadyCommitted
    nameWithType: StorageMessage.AlreadyCommitted
    fullName: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: Handle(StorageMessage.PrepareAck)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.PrepareAck)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  spec.csharp:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: false
  name: Handle(StorageMessage.CommitReplicated)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.CommitReplicated)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  spec.csharp:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CommitReplicated
    name: StorageMessage.CommitReplicated
    nameWithType: StorageMessage.CommitReplicated
    fullName: EventStore.Core.Messages.StorageMessage.CommitReplicated
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
    name: Handle
    nameWithType: TwoPhaseRequestManagerBase.Handle
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CommitReplicated
    name: StorageMessage.CommitReplicated
    nameWithType: StorageMessage.CommitReplicated
    fullName: EventStore.Core.Messages.StorageMessage.CommitReplicated
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TransactionCommitTwoPhaseRequestManager>()
  nameWithType: ProtobufExtensions.Serialize<TransactionCommitTwoPhaseRequestManager>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TransactionCommitTwoPhaseRequestManager)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager)()
  name.vb: Serialize(Of TransactionCommitTwoPhaseRequestManager)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TransactionCommitTwoPhaseRequestManager>
    nameWithType: ProtobufExtensions.Serialize<TransactionCommitTwoPhaseRequestManager>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TransactionCommitTwoPhaseRequestManager)
    nameWithType: ProtobufExtensions.Serialize(Of TransactionCommitTwoPhaseRequestManager)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TransactionCommitTwoPhaseRequestManager>()
  nameWithType: ProtobufExtensions.SerializeToArray<TransactionCommitTwoPhaseRequestManager>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TransactionCommitTwoPhaseRequestManager)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager)()
  name.vb: SerializeToArray(Of TransactionCommitTwoPhaseRequestManager)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TransactionCommitTwoPhaseRequestManager>
    nameWithType: ProtobufExtensions.SerializeToArray<TransactionCommitTwoPhaseRequestManager>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TransactionCommitTwoPhaseRequestManager)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TransactionCommitTwoPhaseRequestManager)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager
  commentId: N:EventStore.Core.Services.RequestManager
  isExternal: false
  name: EventStore.Core.Services.RequestManager
  nameWithType: EventStore.Core.Services.RequestManager
  fullName: EventStore.Core.Services.RequestManager
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  isExternal: false
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  isExternal: false
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.#ctor*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.#ctor
  isExternal: false
  name: TransactionCommitTwoPhaseRequestManager
  nameWithType: TransactionCommitTwoPhaseRequestManager.TransactionCommitTwoPhaseRequestManager
  fullName: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.TransactionCommitTwoPhaseRequestManager
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  isExternal: false
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.Handle*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.Handle
  isExternal: false
  name: Handle
  nameWithType: TransactionCommitTwoPhaseRequestManager.Handle
  fullName: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.TransactionCommit)
  nameWithType: IHandle<ClientMessage.TransactionCommit>.Handle(ClientMessage.TransactionCommit)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionCommit>.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  nameWithType.vb: IHandle(Of ClientMessage.TransactionCommit).Handle(ClientMessage.TransactionCommit)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionCommit).Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.TransactionCommit>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionCommit>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TransactionCommit
    name: ClientMessage.TransactionCommit
    nameWithType: ClientMessage.TransactionCommit
    fullName: EventStore.Core.Messages.ClientMessage.TransactionCommit
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.TransactionCommit).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionCommit).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TransactionCommit
    name: ClientMessage.TransactionCommit
    nameWithType: ClientMessage.TransactionCommit
    fullName: EventStore.Core.Messages.ClientMessage.TransactionCommit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.TransactionCommit
  commentId: T:EventStore.Core.Messages.ClientMessage.TransactionCommit
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.TransactionCommit
  nameWithType: ClientMessage.TransactionCommit
  fullName: EventStore.Core.Messages.ClientMessage.TransactionCommit
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  isExternal: false
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  isExternal: false
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted(Guid)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted(Guid)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: true
  name: OnSecurityAccessGranted(Guid)
  nameWithType: TwoPhaseRequestManagerBase.OnSecurityAccessGranted(Guid)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted(Guid)
  spec.csharp:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted(Guid)
    name: OnSecurityAccessGranted
    nameWithType: TwoPhaseRequestManagerBase.OnSecurityAccessGranted
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted
  - name: (
    nameWithType: (
    fullName: (
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted(Guid)
    name: OnSecurityAccessGranted
    nameWithType: TwoPhaseRequestManagerBase.OnSecurityAccessGranted
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted
  - name: (
    nameWithType: (
    fullName: (
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.OnSecurityAccessGranted*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.OnSecurityAccessGranted
  isExternal: false
  name: OnSecurityAccessGranted
  nameWithType: TransactionCommitTwoPhaseRequestManager.OnSecurityAccessGranted
  fullName: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.OnSecurityAccessGranted
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest(System.Int64,System.Int64,System.Int64,System.Int64)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: true
  name: CompleteSuccessRequest(Int64, Int64, Int64, Int64)
  nameWithType: TwoPhaseRequestManagerBase.CompleteSuccessRequest(Int64, Int64, Int64, Int64)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest(System.Int64, System.Int64, System.Int64, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest(System.Int64,System.Int64,System.Int64,System.Int64)
    name: CompleteSuccessRequest
    nameWithType: TwoPhaseRequestManagerBase.CompleteSuccessRequest
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest(System.Int64,System.Int64,System.Int64,System.Int64)
    name: CompleteSuccessRequest
    nameWithType: TwoPhaseRequestManagerBase.CompleteSuccessRequest
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteSuccessRequest*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteSuccessRequest
  isExternal: false
  name: CompleteSuccessRequest
  nameWithType: TransactionCommitTwoPhaseRequestManager.CompleteSuccessRequest
  fullName: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteSuccessRequest
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest(EventStore.Core.Messages.OperationResult,System.String,System.Int64)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest(EventStore.Core.Messages.OperationResult,System.String,System.Int64)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  isExternal: true
  name: CompleteFailedRequest(OperationResult, String, Int64)
  nameWithType: TwoPhaseRequestManagerBase.CompleteFailedRequest(OperationResult, String, Int64)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest(EventStore.Core.Messages.OperationResult, System.String, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest(EventStore.Core.Messages.OperationResult,System.String,System.Int64)
    name: CompleteFailedRequest
    nameWithType: TwoPhaseRequestManagerBase.CompleteFailedRequest
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.OperationResult
    name: OperationResult
    nameWithType: OperationResult
    fullName: EventStore.Core.Messages.OperationResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest(EventStore.Core.Messages.OperationResult,System.String,System.Int64)
    name: CompleteFailedRequest
    nameWithType: TwoPhaseRequestManagerBase.CompleteFailedRequest
    fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.OperationResult
    name: OperationResult
    nameWithType: OperationResult
    fullName: EventStore.Core.Messages.OperationResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteFailedRequest*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteFailedRequest
  isExternal: false
  name: CompleteFailedRequest
  nameWithType: TransactionCommitTwoPhaseRequestManager.CompleteFailedRequest
  fullName: EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager.CompleteFailedRequest
- uid: EventStore.Core.Messages.OperationResult
  commentId: T:EventStore.Core.Messages.OperationResult
  parent: EventStore.Core.Messages
  isExternal: false
  name: OperationResult
  nameWithType: OperationResult
  fullName: EventStore.Core.Messages.OperationResult
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Storage.StorageReaderWorker
  commentId: T:EventStore.Core.Services.Storage.StorageReaderWorker
  id: StorageReaderWorker
  parent: EventStore.Core.Services.Storage
  children:
  - EventStore.Core.Services.Storage.StorageReaderWorker.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Storage.ReaderIndex.IReadIndex,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint)
  - EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsBackward}#Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward)
  - EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsForward}#Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  - EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadEvent}#Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  - EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsBackward}#Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  - EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsForward}#Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  - EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#CheckStreamAccess}#Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccess)
  langs:
  - csharp
  - vb
  name: StorageReaderWorker
  nameWithType: StorageReaderWorker
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: StorageReaderWorker
    path: ../EventStore/src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
    startLine: 16
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: 'public class StorageReaderWorker : object, IHandle<ClientMessage.ReadEvent>, IHandle<ClientMessage.ReadStreamEventsBackward>, IHandle<ClientMessage.ReadStreamEventsForward>, IHandle<ClientMessage.ReadAllEventsForward>, IHandle<ClientMessage.ReadAllEventsBackward>, IHandle<StorageMessage.CheckStreamAccess>'
    content.vb: >-
      Public Class StorageReaderWorker

          Inherits Object

          Implements IHandle(Of ClientMessage.ReadEvent), IHandle(Of ClientMessage.ReadStreamEventsBackward), IHandle(Of ClientMessage.ReadStreamEventsForward), IHandle(Of ClientMessage.ReadAllEventsForward), IHandle(Of ClientMessage.ReadAllEventsBackward), IHandle(Of StorageMessage.CheckStreamAccess)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccess}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Storage.ReaderIndex.IReadIndex,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint)
  commentId: M:EventStore.Core.Services.Storage.StorageReaderWorker.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Storage.ReaderIndex.IReadIndex,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint)
  id: '#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Storage.ReaderIndex.IReadIndex,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint)'
  parent: EventStore.Core.Services.Storage.StorageReaderWorker
  langs:
  - csharp
  - vb
  name: StorageReaderWorker(IPublisher, IReadIndex, ICheckpoint)
  nameWithType: StorageReaderWorker.StorageReaderWorker(IPublisher, IReadIndex, ICheckpoint)
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.StorageReaderWorker(EventStore.Core.Bus.IPublisher, EventStore.Core.Services.Storage.ReaderIndex.IReadIndex, EventStore.Core.TransactionLog.Checkpoint.ICheckpoint)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
    startLine: 35
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public StorageReaderWorker(IPublisher publisher, IReadIndex readIndex, ICheckpoint writerCheckpoint)
    parameters:
    - id: publisher
      type: EventStore.Core.Bus.IPublisher
    - id: readIndex
      type: EventStore.Core.Services.Storage.ReaderIndex.IReadIndex
    - id: writerCheckpoint
      type: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
    content.vb: Public Sub New(publisher As IPublisher, readIndex As IReadIndex, writerCheckpoint As ICheckpoint)
  overload: EventStore.Core.Services.Storage.StorageReaderWorker.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadEvent}#Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  commentId: M:EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadEvent}#Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  id: EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadEvent}#Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  isEii: true
  parent: EventStore.Core.Services.Storage.StorageReaderWorker
  langs:
  - csharp
  - vb
  name: IHandle<ClientMessage.ReadEvent>.Handle(ClientMessage.ReadEvent)
  nameWithType: StorageReaderWorker.IHandle<ClientMessage.ReadEvent>.Handle(ClientMessage.ReadEvent)
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>.Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>.Handle
    path: ../EventStore/src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
    startLine: 46
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: void IHandle<ClientMessage.ReadEvent>.Handle(ClientMessage.ReadEvent msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.ClientMessage.ReadEvent
    content.vb: Sub EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>.Handle(msg As ClientMessage.ReadEvent) Implements IHandle(Of ClientMessage.ReadEvent).Handle
  overload: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadEvent}#Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}.Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  nameWithType.vb: StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>.Handle(ClientMessage.ReadEvent)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>.Handle(ClientMessage.ReadEvent)
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsForward}#Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  commentId: M:EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsForward}#Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  id: EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsForward}#Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  isEii: true
  parent: EventStore.Core.Services.Storage.StorageReaderWorker
  langs:
  - csharp
  - vb
  name: IHandle<ClientMessage.ReadStreamEventsForward>.Handle(ClientMessage.ReadStreamEventsForward)
  nameWithType: StorageReaderWorker.IHandle<ClientMessage.ReadStreamEventsForward>.Handle(ClientMessage.ReadStreamEventsForward)
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle
    path: ../EventStore/src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
    startLine: 55
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: void IHandle<ClientMessage.ReadStreamEventsForward>.Handle(ClientMessage.ReadStreamEventsForward msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    content.vb: Sub EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle(msg As ClientMessage.ReadStreamEventsForward) Implements IHandle(Of ClientMessage.ReadStreamEventsForward).Handle
  overload: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsForward}#Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  nameWithType.vb: StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle(ClientMessage.ReadStreamEventsForward)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle(ClientMessage.ReadStreamEventsForward)
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsBackward}#Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  commentId: M:EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsBackward}#Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  id: EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsBackward}#Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  isEii: true
  parent: EventStore.Core.Services.Storage.StorageReaderWorker
  langs:
  - csharp
  - vb
  name: IHandle<ClientMessage.ReadStreamEventsBackward>.Handle(ClientMessage.ReadStreamEventsBackward)
  nameWithType: StorageReaderWorker.IHandle<ClientMessage.ReadStreamEventsBackward>.Handle(ClientMessage.ReadStreamEventsBackward)
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle
    path: ../EventStore/src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
    startLine: 91
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: void IHandle<ClientMessage.ReadStreamEventsBackward>.Handle(ClientMessage.ReadStreamEventsBackward msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    content.vb: Sub EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle(msg As ClientMessage.ReadStreamEventsBackward) Implements IHandle(Of ClientMessage.ReadStreamEventsBackward).Handle
  overload: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsBackward}#Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  nameWithType.vb: StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle(ClientMessage.ReadStreamEventsBackward)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle(ClientMessage.ReadStreamEventsBackward)
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsForward}#Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  commentId: M:EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsForward}#Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  id: EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsForward}#Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  isEii: true
  parent: EventStore.Core.Services.Storage.StorageReaderWorker
  langs:
  - csharp
  - vb
  name: IHandle<ClientMessage.ReadAllEventsForward>.Handle(ClientMessage.ReadAllEventsForward)
  nameWithType: StorageReaderWorker.IHandle<ClientMessage.ReadAllEventsForward>.Handle(ClientMessage.ReadAllEventsForward)
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle
    path: ../EventStore/src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
    startLine: 100
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: void IHandle<ClientMessage.ReadAllEventsForward>.Handle(ClientMessage.ReadAllEventsForward msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    content.vb: Sub EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle(msg As ClientMessage.ReadAllEventsForward) Implements IHandle(Of ClientMessage.ReadAllEventsForward).Handle
  overload: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsForward}#Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  nameWithType.vb: StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle(ClientMessage.ReadAllEventsForward)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle(ClientMessage.ReadAllEventsForward)
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsBackward}#Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward)
  commentId: M:EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsBackward}#Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward)
  id: EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsBackward}#Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward)
  isEii: true
  parent: EventStore.Core.Services.Storage.StorageReaderWorker
  langs:
  - csharp
  - vb
  name: IHandle<ClientMessage.ReadAllEventsBackward>.Handle(ClientMessage.ReadAllEventsBackward)
  nameWithType: StorageReaderWorker.IHandle<ClientMessage.ReadAllEventsBackward>.Handle(ClientMessage.ReadAllEventsBackward)
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward>.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward>.Handle
    path: ../EventStore/src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
    startLine: 141
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: void IHandle<ClientMessage.ReadAllEventsBackward>.Handle(ClientMessage.ReadAllEventsBackward msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward
    content.vb: Sub EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward>.Handle(msg As ClientMessage.ReadAllEventsBackward) Implements IHandle(Of ClientMessage.ReadAllEventsBackward).Handle
  overload: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsBackward}#Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward}.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward)
  nameWithType.vb: StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward>.Handle(ClientMessage.ReadAllEventsBackward)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward>.Handle(ClientMessage.ReadAllEventsBackward)
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#CheckStreamAccess}#Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccess)
  commentId: M:EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#CheckStreamAccess}#Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccess)
  id: EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#CheckStreamAccess}#Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccess)
  isEii: true
  parent: EventStore.Core.Services.Storage.StorageReaderWorker
  langs:
  - csharp
  - vb
  name: IHandle<StorageMessage.CheckStreamAccess>.Handle(StorageMessage.CheckStreamAccess)
  nameWithType: StorageReaderWorker.IHandle<StorageMessage.CheckStreamAccess>.Handle(StorageMessage.CheckStreamAccess)
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccess)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>.Handle
    path: ../EventStore/src/EventStore.Core/Services/Storage/StorageReaderWorker.cs
    startLine: 150
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: void IHandle<StorageMessage.CheckStreamAccess>.Handle(StorageMessage.CheckStreamAccess msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
    content.vb: Sub EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>.Handle(msg As StorageMessage.CheckStreamAccess) Implements IHandle(Of StorageMessage.CheckStreamAccess).Handle
  overload: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#CheckStreamAccess}#Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccess}.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccess)
  nameWithType.vb: StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>.Handle(StorageMessage.CheckStreamAccess)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>.Handle(StorageMessage.CheckStreamAccess)
references:
- uid: EventStore.Core.Services.Storage
  commentId: N:EventStore.Core.Services.Storage
  isExternal: false
  name: EventStore.Core.Services.Storage
  nameWithType: EventStore.Core.Services.Storage
  fullName: EventStore.Core.Services.Storage
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.ReadEvent>
  nameWithType: IHandle<ClientMessage.ReadEvent>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>
  nameWithType.vb: IHandle(Of ClientMessage.ReadEvent)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadEvent)
  name.vb: IHandle(Of ClientMessage.ReadEvent)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadEvent
    name: ClientMessage.ReadEvent
    nameWithType: ClientMessage.ReadEvent
    fullName: EventStore.Core.Messages.ClientMessage.ReadEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadEvent
    name: ClientMessage.ReadEvent
    nameWithType: ClientMessage.ReadEvent
    fullName: EventStore.Core.Messages.ClientMessage.ReadEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.ReadStreamEventsBackward>
  nameWithType: IHandle<ClientMessage.ReadStreamEventsBackward>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>
  nameWithType.vb: IHandle(Of ClientMessage.ReadStreamEventsBackward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  name.vb: IHandle(Of ClientMessage.ReadStreamEventsBackward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.ReadStreamEventsForward>
  nameWithType: IHandle<ClientMessage.ReadStreamEventsForward>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>
  nameWithType.vb: IHandle(Of ClientMessage.ReadStreamEventsForward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  name.vb: IHandle(Of ClientMessage.ReadStreamEventsForward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.ReadAllEventsForward>
  nameWithType: IHandle<ClientMessage.ReadAllEventsForward>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>
  nameWithType.vb: IHandle(Of ClientMessage.ReadAllEventsForward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  name.vb: IHandle(Of ClientMessage.ReadAllEventsForward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    name: ClientMessage.ReadAllEventsForward
    nameWithType: ClientMessage.ReadAllEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    name: ClientMessage.ReadAllEventsForward
    nameWithType: ClientMessage.ReadAllEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.ReadAllEventsBackward>
  nameWithType: IHandle<ClientMessage.ReadAllEventsBackward>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward>
  nameWithType.vb: IHandle(Of ClientMessage.ReadAllEventsBackward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward)
  name.vb: IHandle(Of ClientMessage.ReadAllEventsBackward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward
    name: ClientMessage.ReadAllEventsBackward
    nameWithType: ClientMessage.ReadAllEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward
    name: ClientMessage.ReadAllEventsBackward
    nameWithType: ClientMessage.ReadAllEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccess}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccess}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.CheckStreamAccess>
  nameWithType: IHandle<StorageMessage.CheckStreamAccess>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>
  nameWithType.vb: IHandle(Of StorageMessage.CheckStreamAccess)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccess)
  name.vb: IHandle(Of StorageMessage.CheckStreamAccess)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
    name: StorageMessage.CheckStreamAccess
    nameWithType: StorageMessage.CheckStreamAccess
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
    name: StorageMessage.CheckStreamAccess
    nameWithType: StorageMessage.CheckStreamAccess
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<StorageReaderWorker>()
  nameWithType: ProtobufExtensions.Serialize<StorageReaderWorker>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Storage.StorageReaderWorker>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of StorageReaderWorker)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Storage.StorageReaderWorker)()
  name.vb: Serialize(Of StorageReaderWorker)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<StorageReaderWorker>
    nameWithType: ProtobufExtensions.Serialize<StorageReaderWorker>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Storage.StorageReaderWorker>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of StorageReaderWorker)
    nameWithType: ProtobufExtensions.Serialize(Of StorageReaderWorker)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Storage.StorageReaderWorker)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<StorageReaderWorker>()
  nameWithType: ProtobufExtensions.SerializeToArray<StorageReaderWorker>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Storage.StorageReaderWorker>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of StorageReaderWorker)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Storage.StorageReaderWorker)()
  name.vb: SerializeToArray(Of StorageReaderWorker)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<StorageReaderWorker>
    nameWithType: ProtobufExtensions.SerializeToArray<StorageReaderWorker>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Storage.StorageReaderWorker>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of StorageReaderWorker)
    nameWithType: ProtobufExtensions.SerializeToArray(Of StorageReaderWorker)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Storage.StorageReaderWorker)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  isExternal: false
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  isExternal: false
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.#ctor*
  commentId: Overload:EventStore.Core.Services.Storage.StorageReaderWorker.#ctor
  isExternal: false
  name: StorageReaderWorker
  nameWithType: StorageReaderWorker.StorageReaderWorker
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.StorageReaderWorker
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  isExternal: false
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.Services.Storage.ReaderIndex.IReadIndex
  commentId: T:EventStore.Core.Services.Storage.ReaderIndex.IReadIndex
  parent: EventStore.Core.Services.Storage.ReaderIndex
  isExternal: false
  name: IReadIndex
  nameWithType: IReadIndex
  fullName: EventStore.Core.Services.Storage.ReaderIndex.IReadIndex
- uid: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
  commentId: T:EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
  parent: EventStore.Core.TransactionLog.Checkpoint
  isExternal: false
  name: ICheckpoint
  nameWithType: ICheckpoint
  fullName: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
- uid: EventStore.Core.Services.Storage.ReaderIndex
  commentId: N:EventStore.Core.Services.Storage.ReaderIndex
  isExternal: false
  name: EventStore.Core.Services.Storage.ReaderIndex
  nameWithType: EventStore.Core.Services.Storage.ReaderIndex
  fullName: EventStore.Core.Services.Storage.ReaderIndex
- uid: EventStore.Core.TransactionLog.Checkpoint
  commentId: N:EventStore.Core.TransactionLog.Checkpoint
  isExternal: false
  name: EventStore.Core.TransactionLog.Checkpoint
  nameWithType: EventStore.Core.TransactionLog.Checkpoint
  fullName: EventStore.Core.TransactionLog.Checkpoint
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadEvent}#Handle*
  commentId: Overload:EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadEvent}#Handle
  isExternal: false
  name: IHandle<ClientMessage.ReadEvent>.Handle
  nameWithType: StorageReaderWorker.IHandle<ClientMessage.ReadEvent>.Handle
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>.Handle
  nameWithType.vb: StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>.Handle
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}.Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}.Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.ReadEvent)
  nameWithType: IHandle<ClientMessage.ReadEvent>.Handle(ClientMessage.ReadEvent)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>.Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  nameWithType.vb: IHandle(Of ClientMessage.ReadEvent).Handle(ClientMessage.ReadEvent)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadEvent).Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.ReadEvent>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadEvent
    name: ClientMessage.ReadEvent
    nameWithType: ClientMessage.ReadEvent
    fullName: EventStore.Core.Messages.ClientMessage.ReadEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.ReadEvent).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadEvent).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadEvent
    name: ClientMessage.ReadEvent
    nameWithType: ClientMessage.ReadEvent
    fullName: EventStore.Core.Messages.ClientMessage.ReadEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadEvent
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadEvent
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.ReadEvent
  nameWithType: ClientMessage.ReadEvent
  fullName: EventStore.Core.Messages.ClientMessage.ReadEvent
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  isExternal: false
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  isExternal: false
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsForward}#Handle*
  commentId: Overload:EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsForward}#Handle
  isExternal: false
  name: IHandle<ClientMessage.ReadStreamEventsForward>.Handle
  nameWithType: StorageReaderWorker.IHandle<ClientMessage.ReadStreamEventsForward>.Handle
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle
  nameWithType.vb: StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.ReadStreamEventsForward)
  nameWithType: IHandle<ClientMessage.ReadStreamEventsForward>.Handle(ClientMessage.ReadStreamEventsForward)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  nameWithType.vb: IHandle(Of ClientMessage.ReadStreamEventsForward).Handle(ClientMessage.ReadStreamEventsForward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward).Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.ReadStreamEventsForward>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.ReadStreamEventsForward).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.ReadStreamEventsForward
  nameWithType: ClientMessage.ReadStreamEventsForward
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsBackward}#Handle*
  commentId: Overload:EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadStreamEventsBackward}#Handle
  isExternal: false
  name: IHandle<ClientMessage.ReadStreamEventsBackward>.Handle
  nameWithType: StorageReaderWorker.IHandle<ClientMessage.ReadStreamEventsBackward>.Handle
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle
  nameWithType.vb: StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.ReadStreamEventsBackward)
  nameWithType: IHandle<ClientMessage.ReadStreamEventsBackward>.Handle(ClientMessage.ReadStreamEventsBackward)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  nameWithType.vb: IHandle(Of ClientMessage.ReadStreamEventsBackward).Handle(ClientMessage.ReadStreamEventsBackward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward).Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.ReadStreamEventsBackward>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.ReadStreamEventsBackward).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.ReadStreamEventsBackward
  nameWithType: ClientMessage.ReadStreamEventsBackward
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsForward}#Handle*
  commentId: Overload:EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsForward}#Handle
  isExternal: false
  name: IHandle<ClientMessage.ReadAllEventsForward>.Handle
  nameWithType: StorageReaderWorker.IHandle<ClientMessage.ReadAllEventsForward>.Handle
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle
  nameWithType.vb: StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.ReadAllEventsForward)
  nameWithType: IHandle<ClientMessage.ReadAllEventsForward>.Handle(ClientMessage.ReadAllEventsForward)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  nameWithType.vb: IHandle(Of ClientMessage.ReadAllEventsForward).Handle(ClientMessage.ReadAllEventsForward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsForward).Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.ReadAllEventsForward>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    name: ClientMessage.ReadAllEventsForward
    nameWithType: ClientMessage.ReadAllEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.ReadAllEventsForward).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsForward).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    name: ClientMessage.ReadAllEventsForward
    nameWithType: ClientMessage.ReadAllEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.ReadAllEventsForward
  nameWithType: ClientMessage.ReadAllEventsForward
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsBackward}#Handle*
  commentId: Overload:EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#ClientMessage#ReadAllEventsBackward}#Handle
  isExternal: false
  name: IHandle<ClientMessage.ReadAllEventsBackward>.Handle
  nameWithType: StorageReaderWorker.IHandle<ClientMessage.ReadAllEventsBackward>.Handle
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward>.Handle
  nameWithType.vb: StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward>.Handle
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward>.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward}.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward}.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.ReadAllEventsBackward)
  nameWithType: IHandle<ClientMessage.ReadAllEventsBackward>.Handle(ClientMessage.ReadAllEventsBackward)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward>.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward)
  nameWithType.vb: IHandle(Of ClientMessage.ReadAllEventsBackward).Handle(ClientMessage.ReadAllEventsBackward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward).Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.ReadAllEventsBackward>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward
    name: ClientMessage.ReadAllEventsBackward
    nameWithType: ClientMessage.ReadAllEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.ReadAllEventsBackward).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward
    name: ClientMessage.ReadAllEventsBackward
    nameWithType: ClientMessage.ReadAllEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.ReadAllEventsBackward
  nameWithType: ClientMessage.ReadAllEventsBackward
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsBackward
- uid: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#CheckStreamAccess}#Handle*
  commentId: Overload:EventStore.Core.Services.Storage.StorageReaderWorker.EventStore#Core#Bus#IHandle{EventStore#Core#Messages#StorageMessage#CheckStreamAccess}#Handle
  isExternal: false
  name: IHandle<StorageMessage.CheckStreamAccess>.Handle
  nameWithType: StorageReaderWorker.IHandle<StorageMessage.CheckStreamAccess>.Handle
  fullName: EventStore.Core.Services.Storage.StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>.Handle
  nameWithType.vb: StorageReaderWorker.EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>.Handle
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccess}.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccess)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccess}.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccess)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccess}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.CheckStreamAccess)
  nameWithType: IHandle<StorageMessage.CheckStreamAccess>.Handle(StorageMessage.CheckStreamAccess)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccess)
  nameWithType.vb: IHandle(Of StorageMessage.CheckStreamAccess).Handle(StorageMessage.CheckStreamAccess)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccess).Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccess)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.CheckStreamAccess>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
    name: StorageMessage.CheckStreamAccess
    nameWithType: StorageMessage.CheckStreamAccess
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.CheckStreamAccess).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccess).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
    name: StorageMessage.CheckStreamAccess
    nameWithType: StorageMessage.CheckStreamAccess
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  commentId: T:EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  parent: EventStore.Core.Messages
  isExternal: false
  name: StorageMessage.CheckStreamAccess
  nameWithType: StorageMessage.CheckStreamAccess
  fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess

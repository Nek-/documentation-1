### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Transport.Http.HttpService
  commentId: T:EventStore.Core.Services.Transport.Http.HttpService
  id: HttpService
  parent: EventStore.Core.Services.Transport.Http
  children:
  - EventStore.Core.Services.Transport.Http.HttpService.#ctor(EventStore.Core.Services.Transport.Http.ServiceAccessibility,EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Transport.Http.IUriRouter,EventStore.Core.Bus.MultiQueuedHandler,System.Boolean,IPAddress,System.Int32,System.String[])
  - EventStore.Core.Services.Transport.Http.HttpService.Accessibility
  - EventStore.Core.Services.Transport.Http.HttpService.CreateAndSubscribePipeline(EventStore.Core.Bus.IBus,EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider[])
  - EventStore.Core.Services.Transport.Http.HttpService.GetAllUriMatches(Uri)
  - EventStore.Core.Services.Transport.Http.HttpService.Handle(EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests)
  - EventStore.Core.Services.Transport.Http.HttpService.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  - EventStore.Core.Services.Transport.Http.HttpService.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  - EventStore.Core.Services.Transport.Http.HttpService.IsListening
  - EventStore.Core.Services.Transport.Http.HttpService.ListenPrefixes
  - EventStore.Core.Services.Transport.Http.HttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch})
  - EventStore.Core.Services.Transport.Http.HttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  - EventStore.Core.Services.Transport.Http.HttpService.SetupController(EventStore.Core.Services.Transport.Http.IHttpController)
  - EventStore.Core.Services.Transport.Http.HttpService.Shutdown
  langs:
  - csharp
  - vb
  name: HttpService
  nameWithType: HttpService
  fullName: EventStore.Core.Services.Transport.Http.HttpService
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: HttpService
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 16
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: 'public class HttpService : object, IHttpService, IHandle<SystemMessage.SystemInit>, IHandle<SystemMessage.BecomeShuttingDown>, IHandle<HttpMessage.PurgeTimedOutRequests>'
    content.vb: >-
      Public Class HttpService
          Inherits Object
          Implements IHttpService, IHandle(Of SystemMessage.SystemInit), IHandle(Of SystemMessage.BecomeShuttingDown), IHandle(Of HttpMessage.PurgeTimedOutRequests)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Services.Transport.Http.IHttpService
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.Transport.Http.HttpService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Transport.Http.HttpService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.Transport.Http.HttpService.IsListening
  commentId: P:EventStore.Core.Services.Transport.Http.HttpService.IsListening
  id: IsListening
  parent: EventStore.Core.Services.Transport.Http.HttpService
  langs:
  - csharp
  - vb
  name: IsListening
  nameWithType: HttpService.IsListening
  fullName: EventStore.Core.Services.Transport.Http.HttpService.IsListening
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: IsListening
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 23
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public bool IsListening { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsListening As Boolean
  overload: EventStore.Core.Services.Transport.Http.HttpService.IsListening*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Transport.Http.HttpService.ListenPrefixes
  commentId: P:EventStore.Core.Services.Transport.Http.HttpService.ListenPrefixes
  id: ListenPrefixes
  parent: EventStore.Core.Services.Transport.Http.HttpService
  langs:
  - csharp
  - vb
  name: ListenPrefixes
  nameWithType: HttpService.ListenPrefixes
  fullName: EventStore.Core.Services.Transport.Http.HttpService.ListenPrefixes
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ListenPrefixes
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 24
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public IEnumerable<string> ListenPrefixes { get; }
    parameters: []
    return:
      type: IEnumerable{System.String}
    content.vb: Public ReadOnly Property ListenPrefixes As IEnumerable(Of String)
  overload: EventStore.Core.Services.Transport.Http.HttpService.ListenPrefixes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Transport.Http.HttpService.Accessibility
  commentId: P:EventStore.Core.Services.Transport.Http.HttpService.Accessibility
  id: Accessibility
  parent: EventStore.Core.Services.Transport.Http.HttpService
  langs:
  - csharp
  - vb
  name: Accessibility
  nameWithType: HttpService.Accessibility
  fullName: EventStore.Core.Services.Transport.Http.HttpService.Accessibility
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Accessibility
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 25
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public ServiceAccessibility Accessibility { get; }
    parameters: []
    return:
      type: EventStore.Core.Services.Transport.Http.ServiceAccessibility
    content.vb: Public ReadOnly Property Accessibility As ServiceAccessibility
  overload: EventStore.Core.Services.Transport.Http.HttpService.Accessibility*
  implements:
  - EventStore.Core.Services.Transport.Http.IHttpService.Accessibility
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Transport.Http.HttpService.#ctor(EventStore.Core.Services.Transport.Http.ServiceAccessibility,EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Transport.Http.IUriRouter,EventStore.Core.Bus.MultiQueuedHandler,System.Boolean,IPAddress,System.Int32,System.String[])
  commentId: M:EventStore.Core.Services.Transport.Http.HttpService.#ctor(EventStore.Core.Services.Transport.Http.ServiceAccessibility,EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Transport.Http.IUriRouter,EventStore.Core.Bus.MultiQueuedHandler,System.Boolean,IPAddress,System.Int32,System.String[])
  id: '#ctor(EventStore.Core.Services.Transport.Http.ServiceAccessibility,EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Transport.Http.IUriRouter,EventStore.Core.Bus.MultiQueuedHandler,System.Boolean,IPAddress,System.Int32,System.String[])'
  parent: EventStore.Core.Services.Transport.Http.HttpService
  langs:
  - csharp
  - vb
  name: HttpService(ServiceAccessibility, IPublisher, IUriRouter, MultiQueuedHandler, Boolean, IPAddress, Int32, String[])
  nameWithType: HttpService.HttpService(ServiceAccessibility, IPublisher, IUriRouter, MultiQueuedHandler, Boolean, IPAddress, Int32, String[])
  fullName: EventStore.Core.Services.Transport.Http.HttpService.HttpService(EventStore.Core.Services.Transport.Http.ServiceAccessibility, EventStore.Core.Bus.IPublisher, EventStore.Core.Services.Transport.Http.IUriRouter, EventStore.Core.Bus.MultiQueuedHandler, System.Boolean, IPAddress, System.Int32, System.String[])
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 39
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public HttpService(ServiceAccessibility accessibility, IPublisher inputBus, IUriRouter uriRouter, MultiQueuedHandler multiQueuedHandler, bool logHttpRequests, IPAddress advertiseAsAddress, int advertiseAsPort, params string[] prefixes)
    parameters:
    - id: accessibility
      type: EventStore.Core.Services.Transport.Http.ServiceAccessibility
    - id: inputBus
      type: EventStore.Core.Bus.IPublisher
    - id: uriRouter
      type: EventStore.Core.Services.Transport.Http.IUriRouter
    - id: multiQueuedHandler
      type: EventStore.Core.Bus.MultiQueuedHandler
    - id: logHttpRequests
      type: System.Boolean
    - id: advertiseAsAddress
      type: IPAddress
    - id: advertiseAsPort
      type: System.Int32
    - id: prefixes
      type: System.String[]
    content.vb: Public Sub New(accessibility As ServiceAccessibility, inputBus As IPublisher, uriRouter As IUriRouter, multiQueuedHandler As MultiQueuedHandler, logHttpRequests As Boolean, advertiseAsAddress As IPAddress, advertiseAsPort As Integer, ParamArray prefixes As String())
  overload: EventStore.Core.Services.Transport.Http.HttpService.#ctor*
  nameWithType.vb: HttpService.HttpService(ServiceAccessibility, IPublisher, IUriRouter, MultiQueuedHandler, Boolean, IPAddress, Int32, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.Transport.Http.HttpService.HttpService(EventStore.Core.Services.Transport.Http.ServiceAccessibility, EventStore.Core.Bus.IPublisher, EventStore.Core.Services.Transport.Http.IUriRouter, EventStore.Core.Bus.MultiQueuedHandler, System.Boolean, IPAddress, System.Int32, System.String())
  name.vb: HttpService(ServiceAccessibility, IPublisher, IUriRouter, MultiQueuedHandler, Boolean, IPAddress, Int32, String())
- uid: EventStore.Core.Services.Transport.Http.HttpService.CreateAndSubscribePipeline(EventStore.Core.Bus.IBus,EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider[])
  commentId: M:EventStore.Core.Services.Transport.Http.HttpService.CreateAndSubscribePipeline(EventStore.Core.Bus.IBus,EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider[])
  id: CreateAndSubscribePipeline(EventStore.Core.Bus.IBus,EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider[])
  parent: EventStore.Core.Services.Transport.Http.HttpService
  langs:
  - csharp
  - vb
  name: CreateAndSubscribePipeline(IBus, HttpAuthenticationProvider[])
  nameWithType: HttpService.CreateAndSubscribePipeline(IBus, HttpAuthenticationProvider[])
  fullName: EventStore.Core.Services.Transport.Http.HttpService.CreateAndSubscribePipeline(EventStore.Core.Bus.IBus, EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider[])
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: CreateAndSubscribePipeline
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 61
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public static void CreateAndSubscribePipeline(IBus bus, HttpAuthenticationProvider[] httpAuthenticationProviders)
    parameters:
    - id: bus
      type: EventStore.Core.Bus.IBus
    - id: httpAuthenticationProviders
      type: EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider[]
    content.vb: Public Shared Sub CreateAndSubscribePipeline(bus As IBus, httpAuthenticationProviders As HttpAuthenticationProvider())
  overload: EventStore.Core.Services.Transport.Http.HttpService.CreateAndSubscribePipeline*
  nameWithType.vb: HttpService.CreateAndSubscribePipeline(IBus, HttpAuthenticationProvider())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Services.Transport.Http.HttpService.CreateAndSubscribePipeline(EventStore.Core.Bus.IBus, EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider())
  name.vb: CreateAndSubscribePipeline(IBus, HttpAuthenticationProvider())
- uid: EventStore.Core.Services.Transport.Http.HttpService.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  commentId: M:EventStore.Core.Services.Transport.Http.HttpService.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  id: Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  parent: EventStore.Core.Services.Transport.Http.HttpService
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.SystemInit)
  nameWithType: HttpService.Handle(SystemMessage.SystemInit)
  fullName: EventStore.Core.Services.Transport.Http.HttpService.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 76
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public void Handle(SystemMessage.SystemInit message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.SystemInit
    content.vb: Public Sub Handle(message As SystemMessage.SystemInit)
  overload: EventStore.Core.Services.Transport.Http.HttpService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Transport.Http.HttpService.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  commentId: M:EventStore.Core.Services.Transport.Http.HttpService.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  id: Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  parent: EventStore.Core.Services.Transport.Http.HttpService
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.BecomeShuttingDown)
  nameWithType: HttpService.Handle(SystemMessage.BecomeShuttingDown)
  fullName: EventStore.Core.Services.Transport.Http.HttpService.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 92
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public void Handle(SystemMessage.BecomeShuttingDown message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
    content.vb: Public Sub Handle(message As SystemMessage.BecomeShuttingDown)
  overload: EventStore.Core.Services.Transport.Http.HttpService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Transport.Http.HttpService.Handle(EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests)
  commentId: M:EventStore.Core.Services.Transport.Http.HttpService.Handle(EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests)
  id: Handle(EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests)
  parent: EventStore.Core.Services.Transport.Http.HttpService
  langs:
  - csharp
  - vb
  name: Handle(HttpMessage.PurgeTimedOutRequests)
  nameWithType: HttpService.Handle(HttpMessage.PurgeTimedOutRequests)
  fullName: EventStore.Core.Services.Transport.Http.HttpService.Handle(EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 107
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public void Handle(HttpMessage.PurgeTimedOutRequests message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests
    content.vb: Public Sub Handle(message As HttpMessage.PurgeTimedOutRequests)
  overload: EventStore.Core.Services.Transport.Http.HttpService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests}.Handle(EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Transport.Http.HttpService.Shutdown
  commentId: M:EventStore.Core.Services.Transport.Http.HttpService.Shutdown
  id: Shutdown
  parent: EventStore.Core.Services.Transport.Http.HttpService
  langs:
  - csharp
  - vb
  name: Shutdown()
  nameWithType: HttpService.Shutdown()
  fullName: EventStore.Core.Services.Transport.Http.HttpService.Shutdown()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Shutdown
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 119
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public void Shutdown()
    content.vb: Public Sub Shutdown
  overload: EventStore.Core.Services.Transport.Http.HttpService.Shutdown*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Transport.Http.HttpService.SetupController(EventStore.Core.Services.Transport.Http.IHttpController)
  commentId: M:EventStore.Core.Services.Transport.Http.HttpService.SetupController(EventStore.Core.Services.Transport.Http.IHttpController)
  id: SetupController(EventStore.Core.Services.Transport.Http.IHttpController)
  parent: EventStore.Core.Services.Transport.Http.HttpService
  langs:
  - csharp
  - vb
  name: SetupController(IHttpController)
  nameWithType: HttpService.SetupController(IHttpController)
  fullName: EventStore.Core.Services.Transport.Http.HttpService.SetupController(EventStore.Core.Services.Transport.Http.IHttpController)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetupController
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 124
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public void SetupController(IHttpController controller)
    parameters:
    - id: controller
      type: EventStore.Core.Services.Transport.Http.IHttpController
    content.vb: Public Sub SetupController(controller As IHttpController)
  overload: EventStore.Core.Services.Transport.Http.HttpService.SetupController*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Transport.Http.HttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  commentId: M:EventStore.Core.Services.Transport.Http.HttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  id: RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  parent: EventStore.Core.Services.Transport.Http.HttpService
  langs:
  - csharp
  - vb
  name: RegisterCustomAction(ControllerAction, Func<HttpEntityManager, UriTemplateMatch, RequestParams>)
  nameWithType: HttpService.RegisterCustomAction(ControllerAction, Func<HttpEntityManager, UriTemplateMatch, RequestParams>)
  fullName: EventStore.Core.Services.Transport.Http.HttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction, Func<EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: RegisterCustomAction
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 130
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public void RegisterCustomAction(ControllerAction action, Func<HttpEntityManager, UriTemplateMatch, RequestParams> handler)
    parameters:
    - id: action
      type: EventStore.Core.Services.Transport.Http.ControllerAction
    - id: handler
      type: Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams}
    content.vb: Public Sub RegisterCustomAction(action As ControllerAction, handler As Func(Of HttpEntityManager, UriTemplateMatch, RequestParams))
  overload: EventStore.Core.Services.Transport.Http.HttpService.RegisterCustomAction*
  implements:
  - EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  nameWithType.vb: HttpService.RegisterCustomAction(ControllerAction, Func(Of HttpEntityManager, UriTemplateMatch, RequestParams))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.Transport.Http.HttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction, Func(Of EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams))
  name.vb: RegisterCustomAction(ControllerAction, Func(Of HttpEntityManager, UriTemplateMatch, RequestParams))
- uid: EventStore.Core.Services.Transport.Http.HttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch})
  commentId: M:EventStore.Core.Services.Transport.Http.HttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch})
  id: RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch})
  parent: EventStore.Core.Services.Transport.Http.HttpService
  langs:
  - csharp
  - vb
  name: RegisterAction(ControllerAction, Action<HttpEntityManager, UriTemplateMatch>)
  nameWithType: HttpService.RegisterAction(ControllerAction, Action<HttpEntityManager, UriTemplateMatch>)
  fullName: EventStore.Core.Services.Transport.Http.HttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction, Action<EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: RegisterAction
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 138
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public void RegisterAction(ControllerAction action, Action<HttpEntityManager, UriTemplateMatch> handler)
    parameters:
    - id: action
      type: EventStore.Core.Services.Transport.Http.ControllerAction
    - id: handler
      type: Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch}
    content.vb: Public Sub RegisterAction(action As ControllerAction, handler As Action(Of HttpEntityManager, UriTemplateMatch))
  overload: EventStore.Core.Services.Transport.Http.HttpService.RegisterAction*
  implements:
  - EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch})
  nameWithType.vb: HttpService.RegisterAction(ControllerAction, Action(Of HttpEntityManager, UriTemplateMatch))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.Transport.Http.HttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction, Action(Of EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch))
  name.vb: RegisterAction(ControllerAction, Action(Of HttpEntityManager, UriTemplateMatch))
- uid: EventStore.Core.Services.Transport.Http.HttpService.GetAllUriMatches(Uri)
  commentId: M:EventStore.Core.Services.Transport.Http.HttpService.GetAllUriMatches(Uri)
  id: GetAllUriMatches(Uri)
  parent: EventStore.Core.Services.Transport.Http.HttpService
  langs:
  - csharp
  - vb
  name: GetAllUriMatches(Uri)
  nameWithType: HttpService.GetAllUriMatches(Uri)
  fullName: EventStore.Core.Services.Transport.Http.HttpService.GetAllUriMatches(Uri)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/HttpService.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: GetAllUriMatches
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/HttpService.cs
    startLine: 150
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public List<UriToActionMatch> GetAllUriMatches(Uri uri)
    parameters:
    - id: uri
      type: Uri
    return:
      type: List{EventStore.Core.Services.Transport.Http.UriToActionMatch}
    content.vb: Public Function GetAllUriMatches(uri As Uri) As List(Of UriToActionMatch)
  overload: EventStore.Core.Services.Transport.Http.HttpService.GetAllUriMatches*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.Transport.Http
  commentId: N:EventStore.Core.Services.Transport.Http
  isExternal: false
  name: EventStore.Core.Services.Transport.Http
  nameWithType: EventStore.Core.Services.Transport.Http
  fullName: EventStore.Core.Services.Transport.Http
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Services.Transport.Http.IHttpService
  commentId: T:EventStore.Core.Services.Transport.Http.IHttpService
  parent: EventStore.Core.Services.Transport.Http
  isExternal: false
  name: IHttpService
  nameWithType: IHttpService
  fullName: EventStore.Core.Services.Transport.Http.IHttpService
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.SystemInit>
  nameWithType: IHandle<SystemMessage.SystemInit>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>
  nameWithType.vb: IHandle(Of SystemMessage.SystemInit)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SystemInit)
  name.vb: IHandle(Of SystemMessage.SystemInit)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.BecomeShuttingDown>
  nameWithType: IHandle<SystemMessage.BecomeShuttingDown>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.BecomeShuttingDown>
  nameWithType.vb: IHandle(Of SystemMessage.BecomeShuttingDown)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  name.vb: IHandle(Of SystemMessage.BecomeShuttingDown)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
    name: SystemMessage.BecomeShuttingDown
    nameWithType: SystemMessage.BecomeShuttingDown
    fullName: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
    name: SystemMessage.BecomeShuttingDown
    nameWithType: SystemMessage.BecomeShuttingDown
    fullName: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<HttpMessage.PurgeTimedOutRequests>
  nameWithType: IHandle<HttpMessage.PurgeTimedOutRequests>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests>
  nameWithType.vb: IHandle(Of HttpMessage.PurgeTimedOutRequests)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests)
  name.vb: IHandle(Of HttpMessage.PurgeTimedOutRequests)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests
    name: HttpMessage.PurgeTimedOutRequests
    nameWithType: HttpMessage.PurgeTimedOutRequests
    fullName: EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests
    name: HttpMessage.PurgeTimedOutRequests
    nameWithType: HttpMessage.PurgeTimedOutRequests
    fullName: EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.HttpService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<HttpService>()
  nameWithType: ProtobufExtensions.Serialize<HttpService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Transport.Http.HttpService>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of HttpService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Transport.Http.HttpService)()
  name.vb: Serialize(Of HttpService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<HttpService>
    nameWithType: ProtobufExtensions.Serialize<HttpService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Transport.Http.HttpService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of HttpService)
    nameWithType: ProtobufExtensions.Serialize(Of HttpService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Transport.Http.HttpService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.HttpService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<HttpService>()
  nameWithType: ProtobufExtensions.SerializeToArray<HttpService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Transport.Http.HttpService>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of HttpService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Transport.Http.HttpService)()
  name.vb: SerializeToArray(Of HttpService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<HttpService>
    nameWithType: ProtobufExtensions.SerializeToArray<HttpService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Transport.Http.HttpService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of HttpService)
    nameWithType: ProtobufExtensions.SerializeToArray(Of HttpService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Transport.Http.HttpService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  isExternal: false
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  isExternal: false
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.Transport.Http.HttpService.IsListening*
  commentId: Overload:EventStore.Core.Services.Transport.Http.HttpService.IsListening
  isExternal: false
  name: IsListening
  nameWithType: HttpService.IsListening
  fullName: EventStore.Core.Services.Transport.Http.HttpService.IsListening
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Services.Transport.Http.HttpService.ListenPrefixes*
  commentId: Overload:EventStore.Core.Services.Transport.Http.HttpService.ListenPrefixes
  isExternal: false
  name: ListenPrefixes
  nameWithType: HttpService.ListenPrefixes
  fullName: EventStore.Core.Services.Transport.Http.HttpService.ListenPrefixes
- uid: IEnumerable{System.String}
  commentId: '!:IEnumerable{System.String}'
  definition: IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.HttpService.Accessibility*
  commentId: Overload:EventStore.Core.Services.Transport.Http.HttpService.Accessibility
  isExternal: false
  name: Accessibility
  nameWithType: HttpService.Accessibility
  fullName: EventStore.Core.Services.Transport.Http.HttpService.Accessibility
- uid: EventStore.Core.Services.Transport.Http.IHttpService.Accessibility
  commentId: P:EventStore.Core.Services.Transport.Http.IHttpService.Accessibility
  parent: EventStore.Core.Services.Transport.Http.IHttpService
  isExternal: false
  name: Accessibility
  nameWithType: IHttpService.Accessibility
  fullName: EventStore.Core.Services.Transport.Http.IHttpService.Accessibility
- uid: EventStore.Core.Services.Transport.Http.ServiceAccessibility
  commentId: T:EventStore.Core.Services.Transport.Http.ServiceAccessibility
  parent: EventStore.Core.Services.Transport.Http
  isExternal: false
  name: ServiceAccessibility
  nameWithType: ServiceAccessibility
  fullName: EventStore.Core.Services.Transport.Http.ServiceAccessibility
- uid: EventStore.Core.Services.Transport.Http.HttpService.#ctor*
  commentId: Overload:EventStore.Core.Services.Transport.Http.HttpService.#ctor
  isExternal: false
  name: HttpService
  nameWithType: HttpService.HttpService
  fullName: EventStore.Core.Services.Transport.Http.HttpService.HttpService
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  isExternal: false
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.Services.Transport.Http.IUriRouter
  commentId: T:EventStore.Core.Services.Transport.Http.IUriRouter
  parent: EventStore.Core.Services.Transport.Http
  isExternal: false
  name: IUriRouter
  nameWithType: IUriRouter
  fullName: EventStore.Core.Services.Transport.Http.IUriRouter
- uid: EventStore.Core.Bus.MultiQueuedHandler
  commentId: T:EventStore.Core.Bus.MultiQueuedHandler
  parent: EventStore.Core.Bus
  isExternal: false
  name: MultiQueuedHandler
  nameWithType: MultiQueuedHandler
  fullName: EventStore.Core.Bus.MultiQueuedHandler
- uid: IPAddress
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: IPAddress
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Services.Transport.Http.HttpService.CreateAndSubscribePipeline*
  commentId: Overload:EventStore.Core.Services.Transport.Http.HttpService.CreateAndSubscribePipeline
  isExternal: false
  name: CreateAndSubscribePipeline
  nameWithType: HttpService.CreateAndSubscribePipeline
  fullName: EventStore.Core.Services.Transport.Http.HttpService.CreateAndSubscribePipeline
- uid: EventStore.Core.Bus.IBus
  commentId: T:EventStore.Core.Bus.IBus
  parent: EventStore.Core.Bus
  isExternal: false
  name: IBus
  nameWithType: IBus
  fullName: EventStore.Core.Bus.IBus
- uid: EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider[]
  name: HttpAuthenticationProvider[]
  nameWithType: HttpAuthenticationProvider[]
  fullName: EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider[]
  nameWithType.vb: HttpAuthenticationProvider()
  fullName.vb: EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider()
  name.vb: HttpAuthenticationProvider()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider
    name: HttpAuthenticationProvider
    nameWithType: HttpAuthenticationProvider
    fullName: EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider
    name: HttpAuthenticationProvider
    nameWithType: HttpAuthenticationProvider
    fullName: EventStore.Core.Services.Transport.Http.Authentication.HttpAuthenticationProvider
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Services.Transport.Http.HttpService.Handle*
  commentId: Overload:EventStore.Core.Services.Transport.Http.HttpService.Handle
  isExternal: false
  name: Handle
  nameWithType: HttpService.Handle
  fullName: EventStore.Core.Services.Transport.Http.HttpService.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.SystemInit)
  nameWithType: IHandle<SystemMessage.SystemInit>.Handle(SystemMessage.SystemInit)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  nameWithType.vb: IHandle(Of SystemMessage.SystemInit).Handle(SystemMessage.SystemInit)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SystemInit).Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.SystemInit>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.SystemInit).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SystemInit).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.SystemInit
  commentId: T:EventStore.Core.Messages.SystemMessage.SystemInit
  parent: EventStore.Core.Messages
  isExternal: false
  name: SystemMessage.SystemInit
  nameWithType: SystemMessage.SystemInit
  fullName: EventStore.Core.Messages.SystemMessage.SystemInit
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  isExternal: false
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  isExternal: false
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.BecomeShuttingDown)
  nameWithType: IHandle<SystemMessage.BecomeShuttingDown>.Handle(SystemMessage.BecomeShuttingDown)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.BecomeShuttingDown>.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  nameWithType.vb: IHandle(Of SystemMessage.BecomeShuttingDown).Handle(SystemMessage.BecomeShuttingDown)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.BecomeShuttingDown).Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.BecomeShuttingDown>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.BecomeShuttingDown>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
    name: SystemMessage.BecomeShuttingDown
    nameWithType: SystemMessage.BecomeShuttingDown
    fullName: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.BecomeShuttingDown).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.BecomeShuttingDown).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
    name: SystemMessage.BecomeShuttingDown
    nameWithType: SystemMessage.BecomeShuttingDown
    fullName: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
  commentId: T:EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
  parent: EventStore.Core.Messages
  isExternal: false
  name: SystemMessage.BecomeShuttingDown
  nameWithType: SystemMessage.BecomeShuttingDown
  fullName: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests}.Handle(EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests}.Handle(EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(HttpMessage.PurgeTimedOutRequests)
  nameWithType: IHandle<HttpMessage.PurgeTimedOutRequests>.Handle(HttpMessage.PurgeTimedOutRequests)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests>.Handle(EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests)
  nameWithType.vb: IHandle(Of HttpMessage.PurgeTimedOutRequests).Handle(HttpMessage.PurgeTimedOutRequests)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests).Handle(EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<HttpMessage.PurgeTimedOutRequests>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests
    name: HttpMessage.PurgeTimedOutRequests
    nameWithType: HttpMessage.PurgeTimedOutRequests
    fullName: EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of HttpMessage.PurgeTimedOutRequests).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests
    name: HttpMessage.PurgeTimedOutRequests
    nameWithType: HttpMessage.PurgeTimedOutRequests
    fullName: EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests
  commentId: T:EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests
  parent: EventStore.Core.Messages
  isExternal: false
  name: HttpMessage.PurgeTimedOutRequests
  nameWithType: HttpMessage.PurgeTimedOutRequests
  fullName: EventStore.Core.Messages.HttpMessage.PurgeTimedOutRequests
- uid: EventStore.Core.Services.Transport.Http.HttpService.Shutdown*
  commentId: Overload:EventStore.Core.Services.Transport.Http.HttpService.Shutdown
  isExternal: false
  name: Shutdown
  nameWithType: HttpService.Shutdown
  fullName: EventStore.Core.Services.Transport.Http.HttpService.Shutdown
- uid: EventStore.Core.Services.Transport.Http.HttpService.SetupController*
  commentId: Overload:EventStore.Core.Services.Transport.Http.HttpService.SetupController
  isExternal: false
  name: SetupController
  nameWithType: HttpService.SetupController
  fullName: EventStore.Core.Services.Transport.Http.HttpService.SetupController
- uid: EventStore.Core.Services.Transport.Http.IHttpController
  commentId: T:EventStore.Core.Services.Transport.Http.IHttpController
  parent: EventStore.Core.Services.Transport.Http
  isExternal: false
  name: IHttpController
  nameWithType: IHttpController
  fullName: EventStore.Core.Services.Transport.Http.IHttpController
- uid: EventStore.Core.Services.Transport.Http.HttpService.RegisterCustomAction*
  commentId: Overload:EventStore.Core.Services.Transport.Http.HttpService.RegisterCustomAction
  isExternal: false
  name: RegisterCustomAction
  nameWithType: HttpService.RegisterCustomAction
  fullName: EventStore.Core.Services.Transport.Http.HttpService.RegisterCustomAction
- uid: EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  commentId: M:EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  parent: EventStore.Core.Services.Transport.Http.IHttpService
  isExternal: true
  name: RegisterCustomAction(ControllerAction, Func<HttpEntityManager, UriTemplateMatch, RequestParams>)
  nameWithType: IHttpService.RegisterCustomAction(ControllerAction, Func<HttpEntityManager, UriTemplateMatch, RequestParams>)
  fullName: EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction, Func<EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams>)
  nameWithType.vb: IHttpService.RegisterCustomAction(ControllerAction, Func(Of HttpEntityManager, UriTemplateMatch, RequestParams))
  fullName.vb: EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction, Func(Of EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams))
  name.vb: RegisterCustomAction(ControllerAction, Func(Of HttpEntityManager, UriTemplateMatch, RequestParams))
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
    name: RegisterCustomAction
    nameWithType: IHttpService.RegisterCustomAction
    fullName: EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Services.Transport.Http.ControllerAction
    name: ControllerAction
    nameWithType: ControllerAction
    fullName: EventStore.Core.Services.Transport.Http.ControllerAction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Http.RequestParams
    name: RequestParams
    nameWithType: RequestParams
    fullName: EventStore.Core.Services.Transport.Http.RequestParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
    name: RegisterCustomAction
    nameWithType: IHttpService.RegisterCustomAction
    fullName: EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Services.Transport.Http.ControllerAction
    name: ControllerAction
    nameWithType: ControllerAction
    fullName: EventStore.Core.Services.Transport.Http.ControllerAction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Http.RequestParams
    name: RequestParams
    nameWithType: RequestParams
    fullName: EventStore.Core.Services.Transport.Http.RequestParams
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.ControllerAction
  commentId: T:EventStore.Core.Services.Transport.Http.ControllerAction
  parent: EventStore.Core.Services.Transport.Http
  isExternal: false
  name: ControllerAction
  nameWithType: ControllerAction
  fullName: EventStore.Core.Services.Transport.Http.ControllerAction
- uid: Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams}
  commentId: '!:Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams}'
  definition: Func`3
  name: Func<HttpEntityManager, UriTemplateMatch, RequestParams>
  nameWithType: Func<HttpEntityManager, UriTemplateMatch, RequestParams>
  fullName: Func<EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams>
  nameWithType.vb: Func(Of HttpEntityManager, UriTemplateMatch, RequestParams)
  fullName.vb: Func(Of EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams)
  name.vb: Func(Of HttpEntityManager, UriTemplateMatch, RequestParams)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Http.RequestParams
    name: RequestParams
    nameWithType: RequestParams
    fullName: EventStore.Core.Services.Transport.Http.RequestParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Http.RequestParams
    name: RequestParams
    nameWithType: RequestParams
    fullName: EventStore.Core.Services.Transport.Http.RequestParams
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.HttpService.RegisterAction*
  commentId: Overload:EventStore.Core.Services.Transport.Http.HttpService.RegisterAction
  isExternal: false
  name: RegisterAction
  nameWithType: HttpService.RegisterAction
  fullName: EventStore.Core.Services.Transport.Http.HttpService.RegisterAction
- uid: EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch})
  commentId: M:EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch})
  parent: EventStore.Core.Services.Transport.Http.IHttpService
  isExternal: true
  name: RegisterAction(ControllerAction, Action<HttpEntityManager, UriTemplateMatch>)
  nameWithType: IHttpService.RegisterAction(ControllerAction, Action<HttpEntityManager, UriTemplateMatch>)
  fullName: EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction, Action<EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch>)
  nameWithType.vb: IHttpService.RegisterAction(ControllerAction, Action(Of HttpEntityManager, UriTemplateMatch))
  fullName.vb: EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction, Action(Of EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch))
  name.vb: RegisterAction(ControllerAction, Action(Of HttpEntityManager, UriTemplateMatch))
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch})
    name: RegisterAction
    nameWithType: IHttpService.RegisterAction
    fullName: EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Services.Transport.Http.ControllerAction
    name: ControllerAction
    nameWithType: ControllerAction
    fullName: EventStore.Core.Services.Transport.Http.ControllerAction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch})
    name: RegisterAction
    nameWithType: IHttpService.RegisterAction
    fullName: EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Services.Transport.Http.ControllerAction
    name: ControllerAction
    nameWithType: ControllerAction
    fullName: EventStore.Core.Services.Transport.Http.ControllerAction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch}
  commentId: '!:Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch}'
  definition: Action`2
  name: Action<HttpEntityManager, UriTemplateMatch>
  nameWithType: Action<HttpEntityManager, UriTemplateMatch>
  fullName: Action<EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch>
  nameWithType.vb: Action(Of HttpEntityManager, UriTemplateMatch)
  fullName.vb: Action(Of EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch)
  name.vb: Action(Of HttpEntityManager, UriTemplateMatch)
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`2
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.HttpService.GetAllUriMatches*
  commentId: Overload:EventStore.Core.Services.Transport.Http.HttpService.GetAllUriMatches
  isExternal: false
  name: GetAllUriMatches
  nameWithType: HttpService.GetAllUriMatches
  fullName: EventStore.Core.Services.Transport.Http.HttpService.GetAllUriMatches
- uid: Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: Uri
- uid: List{EventStore.Core.Services.Transport.Http.UriToActionMatch}
  commentId: '!:List{EventStore.Core.Services.Transport.Http.UriToActionMatch}'
  definition: List`1
  name: List<UriToActionMatch>
  nameWithType: List<UriToActionMatch>
  fullName: List<EventStore.Core.Services.Transport.Http.UriToActionMatch>
  nameWithType.vb: List(Of UriToActionMatch)
  fullName.vb: List(Of EventStore.Core.Services.Transport.Http.UriToActionMatch)
  name.vb: List(Of UriToActionMatch)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.Transport.Http.UriToActionMatch
    name: UriToActionMatch
    nameWithType: UriToActionMatch
    fullName: EventStore.Core.Services.Transport.Http.UriToActionMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.Transport.Http.UriToActionMatch
    name: UriToActionMatch
    nameWithType: UriToActionMatch
    fullName: EventStore.Core.Services.Transport.Http.UriToActionMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Transport.Http.IUriRouter
  commentId: T:EventStore.Core.Services.Transport.Http.IUriRouter
  id: IUriRouter
  parent: EventStore.Core.Services.Transport.Http
  children:
  - EventStore.Core.Services.Transport.Http.IUriRouter.GetAllUriMatches(Uri)
  - EventStore.Core.Services.Transport.Http.IUriRouter.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  langs:
  - csharp
  - vb
  name: IUriRouter
  nameWithType: IUriRouter
  fullName: EventStore.Core.Services.Transport.Http.IUriRouter
  type: Interface
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/UriRouters.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IUriRouter
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/UriRouters.cs
    startLine: 7
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public interface IUriRouter
    content.vb: Public Interface IUriRouter
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.Transport.Http.IUriRouter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Transport.Http.IUriRouter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EventStore.Core.Services.Transport.Http.IUriRouter.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  commentId: M:EventStore.Core.Services.Transport.Http.IUriRouter.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  id: RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  parent: EventStore.Core.Services.Transport.Http.IUriRouter
  langs:
  - csharp
  - vb
  name: RegisterAction(ControllerAction, Func<HttpEntityManager, UriTemplateMatch, RequestParams>)
  nameWithType: IUriRouter.RegisterAction(ControllerAction, Func<HttpEntityManager, UriTemplateMatch, RequestParams>)
  fullName: EventStore.Core.Services.Transport.Http.IUriRouter.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction, Func<EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/UriRouters.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: RegisterAction
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/UriRouters.cs
    startLine: 9
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: void RegisterAction(ControllerAction action, Func<HttpEntityManager, UriTemplateMatch, RequestParams> handler)
    parameters:
    - id: action
      type: EventStore.Core.Services.Transport.Http.ControllerAction
    - id: handler
      type: Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams}
    content.vb: Sub RegisterAction(action As ControllerAction, handler As Func(Of HttpEntityManager, UriTemplateMatch, RequestParams))
  overload: EventStore.Core.Services.Transport.Http.IUriRouter.RegisterAction*
  nameWithType.vb: IUriRouter.RegisterAction(ControllerAction, Func(Of HttpEntityManager, UriTemplateMatch, RequestParams))
  fullName.vb: EventStore.Core.Services.Transport.Http.IUriRouter.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction, Func(Of EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams))
  name.vb: RegisterAction(ControllerAction, Func(Of HttpEntityManager, UriTemplateMatch, RequestParams))
- uid: EventStore.Core.Services.Transport.Http.IUriRouter.GetAllUriMatches(Uri)
  commentId: M:EventStore.Core.Services.Transport.Http.IUriRouter.GetAllUriMatches(Uri)
  id: GetAllUriMatches(Uri)
  parent: EventStore.Core.Services.Transport.Http.IUriRouter
  langs:
  - csharp
  - vb
  name: GetAllUriMatches(Uri)
  nameWithType: IUriRouter.GetAllUriMatches(Uri)
  fullName: EventStore.Core.Services.Transport.Http.IUriRouter.GetAllUriMatches(Uri)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/UriRouters.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetAllUriMatches
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/UriRouters.cs
    startLine: 10
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: List<UriToActionMatch> GetAllUriMatches(Uri uri)
    parameters:
    - id: uri
      type: Uri
    return:
      type: List{EventStore.Core.Services.Transport.Http.UriToActionMatch}
    content.vb: Function GetAllUriMatches(uri As Uri) As List(Of UriToActionMatch)
  overload: EventStore.Core.Services.Transport.Http.IUriRouter.GetAllUriMatches*
references:
- uid: EventStore.Core.Services.Transport.Http
  commentId: N:EventStore.Core.Services.Transport.Http
  isExternal: false
  name: EventStore.Core.Services.Transport.Http
  nameWithType: EventStore.Core.Services.Transport.Http
  fullName: EventStore.Core.Services.Transport.Http
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.IUriRouter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<IUriRouter>()
  nameWithType: ProtobufExtensions.Serialize<IUriRouter>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Transport.Http.IUriRouter>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of IUriRouter)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Transport.Http.IUriRouter)()
  name.vb: Serialize(Of IUriRouter)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<IUriRouter>
    nameWithType: ProtobufExtensions.Serialize<IUriRouter>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Transport.Http.IUriRouter>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of IUriRouter)
    nameWithType: ProtobufExtensions.Serialize(Of IUriRouter)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Transport.Http.IUriRouter)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.IUriRouter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<IUriRouter>()
  nameWithType: ProtobufExtensions.SerializeToArray<IUriRouter>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Transport.Http.IUriRouter>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of IUriRouter)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Transport.Http.IUriRouter)()
  name.vb: SerializeToArray(Of IUriRouter)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<IUriRouter>
    nameWithType: ProtobufExtensions.SerializeToArray<IUriRouter>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Transport.Http.IUriRouter>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of IUriRouter)
    nameWithType: ProtobufExtensions.SerializeToArray(Of IUriRouter)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Transport.Http.IUriRouter)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.Transport.Http.IUriRouter.RegisterAction*
  commentId: Overload:EventStore.Core.Services.Transport.Http.IUriRouter.RegisterAction
  isExternal: false
  name: RegisterAction
  nameWithType: IUriRouter.RegisterAction
  fullName: EventStore.Core.Services.Transport.Http.IUriRouter.RegisterAction
- uid: EventStore.Core.Services.Transport.Http.ControllerAction
  commentId: T:EventStore.Core.Services.Transport.Http.ControllerAction
  parent: EventStore.Core.Services.Transport.Http
  isExternal: false
  name: ControllerAction
  nameWithType: ControllerAction
  fullName: EventStore.Core.Services.Transport.Http.ControllerAction
- uid: Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams}
  commentId: '!:Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams}'
  definition: Func`3
  name: Func<HttpEntityManager, UriTemplateMatch, RequestParams>
  nameWithType: Func<HttpEntityManager, UriTemplateMatch, RequestParams>
  fullName: Func<EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams>
  nameWithType.vb: Func(Of HttpEntityManager, UriTemplateMatch, RequestParams)
  fullName.vb: Func(Of EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams)
  name.vb: Func(Of HttpEntityManager, UriTemplateMatch, RequestParams)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Http.RequestParams
    name: RequestParams
    nameWithType: RequestParams
    fullName: EventStore.Core.Services.Transport.Http.RequestParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Http.RequestParams
    name: RequestParams
    nameWithType: RequestParams
    fullName: EventStore.Core.Services.Transport.Http.RequestParams
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.IUriRouter.GetAllUriMatches*
  commentId: Overload:EventStore.Core.Services.Transport.Http.IUriRouter.GetAllUriMatches
  isExternal: false
  name: GetAllUriMatches
  nameWithType: IUriRouter.GetAllUriMatches
  fullName: EventStore.Core.Services.Transport.Http.IUriRouter.GetAllUriMatches
- uid: Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: Uri
- uid: List{EventStore.Core.Services.Transport.Http.UriToActionMatch}
  commentId: '!:List{EventStore.Core.Services.Transport.Http.UriToActionMatch}'
  definition: List`1
  name: List<UriToActionMatch>
  nameWithType: List<UriToActionMatch>
  fullName: List<EventStore.Core.Services.Transport.Http.UriToActionMatch>
  nameWithType.vb: List(Of UriToActionMatch)
  fullName.vb: List(Of EventStore.Core.Services.Transport.Http.UriToActionMatch)
  name.vb: List(Of UriToActionMatch)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.Transport.Http.UriToActionMatch
    name: UriToActionMatch
    nameWithType: UriToActionMatch
    fullName: EventStore.Core.Services.Transport.Http.UriToActionMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.Transport.Http.UriToActionMatch
    name: UriToActionMatch
    nameWithType: UriToActionMatch
    fullName: EventStore.Core.Services.Transport.Http.UriToActionMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.VNode.ClusterVNodeController
  commentId: T:EventStore.Core.Services.VNode.ClusterVNodeController
  id: ClusterVNodeController
  parent: EventStore.Core.Services.VNode
  children:
  - EventStore.Core.Services.VNode.ClusterVNodeController.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Data.VNodeInfo,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Cluster.Settings.ClusterVNodeSettings,EventStore.Core.ClusterVNode,EventStore.Core.Services.VNode.MessageForwardingProxy,EventStore.Core.ISubsystem[])
  - EventStore.Core.Services.VNode.ClusterVNodeController.EventStore#Core#Bus#IHandle{EventStore#Core#Messaging#Message}#Handle(EventStore.Core.Messaging.Message)
  - EventStore.Core.Services.VNode.ClusterVNodeController.MasterReconnectionDelay
  - EventStore.Core.Services.VNode.ClusterVNodeController.SetMainQueue(EventStore.Core.Bus.IQueuedHandler)
  - EventStore.Core.Services.VNode.ClusterVNodeController.ShutdownTimeout
  langs:
  - csharp
  - vb
  name: ClusterVNodeController
  nameWithType: ClusterVNodeController
  fullName: EventStore.Core.Services.VNode.ClusterVNodeController
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ClusterVNodeController
    path: ../EventStore/src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
    startLine: 16
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: 'public class ClusterVNodeController : object, IHandle<Message>'
    content.vb: >-
      Public Class ClusterVNodeController
          Inherits Object
          Implements IHandle(Of Message)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.VNode.ClusterVNodeController.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.VNode.ClusterVNodeController.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.VNode.ClusterVNodeController.ShutdownTimeout
  commentId: F:EventStore.Core.Services.VNode.ClusterVNodeController.ShutdownTimeout
  id: ShutdownTimeout
  parent: EventStore.Core.Services.VNode.ClusterVNodeController
  langs:
  - csharp
  - vb
  name: ShutdownTimeout
  nameWithType: ClusterVNodeController.ShutdownTimeout
  fullName: EventStore.Core.Services.VNode.ClusterVNodeController.ShutdownTimeout
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ShutdownTimeout
    path: ../EventStore/src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
    startLine: 18
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: public static readonly TimeSpan ShutdownTimeout
    return:
      type: TimeSpan
    content.vb: Public Shared ReadOnly ShutdownTimeout As TimeSpan
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Core.Services.VNode.ClusterVNodeController.MasterReconnectionDelay
  commentId: F:EventStore.Core.Services.VNode.ClusterVNodeController.MasterReconnectionDelay
  id: MasterReconnectionDelay
  parent: EventStore.Core.Services.VNode.ClusterVNodeController
  langs:
  - csharp
  - vb
  name: MasterReconnectionDelay
  nameWithType: ClusterVNodeController.MasterReconnectionDelay
  fullName: EventStore.Core.Services.VNode.ClusterVNodeController.MasterReconnectionDelay
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: MasterReconnectionDelay
    path: ../EventStore/src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
    startLine: 19
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: public static readonly TimeSpan MasterReconnectionDelay
    return:
      type: TimeSpan
    content.vb: Public Shared ReadOnly MasterReconnectionDelay As TimeSpan
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Core.Services.VNode.ClusterVNodeController.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Data.VNodeInfo,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Cluster.Settings.ClusterVNodeSettings,EventStore.Core.ClusterVNode,EventStore.Core.Services.VNode.MessageForwardingProxy,EventStore.Core.ISubsystem[])
  commentId: M:EventStore.Core.Services.VNode.ClusterVNodeController.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Data.VNodeInfo,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Cluster.Settings.ClusterVNodeSettings,EventStore.Core.ClusterVNode,EventStore.Core.Services.VNode.MessageForwardingProxy,EventStore.Core.ISubsystem[])
  id: '#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Data.VNodeInfo,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Cluster.Settings.ClusterVNodeSettings,EventStore.Core.ClusterVNode,EventStore.Core.Services.VNode.MessageForwardingProxy,EventStore.Core.ISubsystem[])'
  parent: EventStore.Core.Services.VNode.ClusterVNodeController
  langs:
  - csharp
  - vb
  name: ClusterVNodeController(IPublisher, VNodeInfo, TFChunkDb, ClusterVNodeSettings, ClusterVNode, MessageForwardingProxy, ISubsystem[])
  nameWithType: ClusterVNodeController.ClusterVNodeController(IPublisher, VNodeInfo, TFChunkDb, ClusterVNodeSettings, ClusterVNode, MessageForwardingProxy, ISubsystem[])
  fullName: EventStore.Core.Services.VNode.ClusterVNodeController.ClusterVNodeController(EventStore.Core.Bus.IPublisher, EventStore.Core.Data.VNodeInfo, EventStore.Core.TransactionLog.Chunks.TFChunkDb, EventStore.Core.Cluster.Settings.ClusterVNodeSettings, EventStore.Core.ClusterVNode, EventStore.Core.Services.VNode.MessageForwardingProxy, EventStore.Core.ISubsystem[])
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
    startLine: 57
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: public ClusterVNodeController(IPublisher outputBus, VNodeInfo nodeInfo, TFChunkDb db, ClusterVNodeSettings vnodeSettings, ClusterVNode node, MessageForwardingProxy forwardingProxy, ISubsystem[] subSystems)
    parameters:
    - id: outputBus
      type: EventStore.Core.Bus.IPublisher
    - id: nodeInfo
      type: EventStore.Core.Data.VNodeInfo
    - id: db
      type: EventStore.Core.TransactionLog.Chunks.TFChunkDb
    - id: vnodeSettings
      type: EventStore.Core.Cluster.Settings.ClusterVNodeSettings
    - id: node
      type: EventStore.Core.ClusterVNode
    - id: forwardingProxy
      type: EventStore.Core.Services.VNode.MessageForwardingProxy
    - id: subSystems
      type: EventStore.Core.ISubsystem[]
    content.vb: Public Sub New(outputBus As IPublisher, nodeInfo As VNodeInfo, db As TFChunkDb, vnodeSettings As ClusterVNodeSettings, node As ClusterVNode, forwardingProxy As MessageForwardingProxy, subSystems As ISubsystem())
  overload: EventStore.Core.Services.VNode.ClusterVNodeController.#ctor*
  nameWithType.vb: ClusterVNodeController.ClusterVNodeController(IPublisher, VNodeInfo, TFChunkDb, ClusterVNodeSettings, ClusterVNode, MessageForwardingProxy, ISubsystem())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.VNode.ClusterVNodeController.ClusterVNodeController(EventStore.Core.Bus.IPublisher, EventStore.Core.Data.VNodeInfo, EventStore.Core.TransactionLog.Chunks.TFChunkDb, EventStore.Core.Cluster.Settings.ClusterVNodeSettings, EventStore.Core.ClusterVNode, EventStore.Core.Services.VNode.MessageForwardingProxy, EventStore.Core.ISubsystem())
  name.vb: ClusterVNodeController(IPublisher, VNodeInfo, TFChunkDb, ClusterVNodeSettings, ClusterVNode, MessageForwardingProxy, ISubsystem())
- uid: EventStore.Core.Services.VNode.ClusterVNodeController.SetMainQueue(EventStore.Core.Bus.IQueuedHandler)
  commentId: M:EventStore.Core.Services.VNode.ClusterVNodeController.SetMainQueue(EventStore.Core.Bus.IQueuedHandler)
  id: SetMainQueue(EventStore.Core.Bus.IQueuedHandler)
  parent: EventStore.Core.Services.VNode.ClusterVNodeController
  langs:
  - csharp
  - vb
  name: SetMainQueue(IQueuedHandler)
  nameWithType: ClusterVNodeController.SetMainQueue(IQueuedHandler)
  fullName: EventStore.Core.Services.VNode.ClusterVNodeController.SetMainQueue(EventStore.Core.Bus.IQueuedHandler)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetMainQueue
    path: ../EventStore/src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
    startLine: 85
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: public void SetMainQueue(IQueuedHandler mainQueue)
    parameters:
    - id: mainQueue
      type: EventStore.Core.Bus.IQueuedHandler
    content.vb: Public Sub SetMainQueue(mainQueue As IQueuedHandler)
  overload: EventStore.Core.Services.VNode.ClusterVNodeController.SetMainQueue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.VNode.ClusterVNodeController.EventStore#Core#Bus#IHandle{EventStore#Core#Messaging#Message}#Handle(EventStore.Core.Messaging.Message)
  commentId: M:EventStore.Core.Services.VNode.ClusterVNodeController.EventStore#Core#Bus#IHandle{EventStore#Core#Messaging#Message}#Handle(EventStore.Core.Messaging.Message)
  id: EventStore#Core#Bus#IHandle{EventStore#Core#Messaging#Message}#Handle(EventStore.Core.Messaging.Message)
  isEii: true
  parent: EventStore.Core.Services.VNode.ClusterVNodeController
  langs:
  - csharp
  - vb
  name: IHandle<Message>.Handle(Message)
  nameWithType: ClusterVNodeController.IHandle<Message>.Handle(Message)
  fullName: EventStore.Core.Services.VNode.ClusterVNodeController.EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>.Handle(EventStore.Core.Messaging.Message)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>.Handle
    path: ../EventStore/src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
    startLine: 278
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: void IHandle<Message>.Handle(Message message)
    parameters:
    - id: message
      type: EventStore.Core.Messaging.Message
    content.vb: Sub EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>.Handle(message As Message) Implements IHandle(Of Message).Handle
  overload: EventStore.Core.Services.VNode.ClusterVNodeController.EventStore#Core#Bus#IHandle{EventStore#Core#Messaging#Message}#Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}.Handle(EventStore.Core.Messaging.Message)
  nameWithType.vb: ClusterVNodeController.EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>.Handle(Message)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>.Handle(Message)
references:
- uid: EventStore.Core.Services.VNode
  commentId: N:EventStore.Core.Services.VNode
  isExternal: false
  name: EventStore.Core.Services.VNode
  nameWithType: EventStore.Core.Services.VNode
  fullName: EventStore.Core.Services.VNode
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<Message>
  nameWithType: IHandle<Message>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>
  nameWithType.vb: IHandle(Of Message)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messaging.Message)
  name.vb: IHandle(Of Message)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.VNode.ClusterVNodeController.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ClusterVNodeController>()
  nameWithType: ProtobufExtensions.Serialize<ClusterVNodeController>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.VNode.ClusterVNodeController>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ClusterVNodeController)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.VNode.ClusterVNodeController)()
  name.vb: Serialize(Of ClusterVNodeController)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ClusterVNodeController>
    nameWithType: ProtobufExtensions.Serialize<ClusterVNodeController>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.VNode.ClusterVNodeController>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ClusterVNodeController)
    nameWithType: ProtobufExtensions.Serialize(Of ClusterVNodeController)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.VNode.ClusterVNodeController)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.VNode.ClusterVNodeController.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ClusterVNodeController>()
  nameWithType: ProtobufExtensions.SerializeToArray<ClusterVNodeController>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.VNode.ClusterVNodeController>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ClusterVNodeController)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.VNode.ClusterVNodeController)()
  name.vb: SerializeToArray(Of ClusterVNodeController)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ClusterVNodeController>
    nameWithType: ProtobufExtensions.SerializeToArray<ClusterVNodeController>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.VNode.ClusterVNodeController>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ClusterVNodeController)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ClusterVNodeController)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.VNode.ClusterVNodeController)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  isExternal: false
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  isExternal: false
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: EventStore.Core.Services.VNode.ClusterVNodeController.#ctor*
  commentId: Overload:EventStore.Core.Services.VNode.ClusterVNodeController.#ctor
  isExternal: false
  name: ClusterVNodeController
  nameWithType: ClusterVNodeController.ClusterVNodeController
  fullName: EventStore.Core.Services.VNode.ClusterVNodeController.ClusterVNodeController
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  isExternal: false
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.Data.VNodeInfo
  commentId: T:EventStore.Core.Data.VNodeInfo
  parent: EventStore.Core.Data
  isExternal: false
  name: VNodeInfo
  nameWithType: VNodeInfo
  fullName: EventStore.Core.Data.VNodeInfo
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkDb
  commentId: T:EventStore.Core.TransactionLog.Chunks.TFChunkDb
  parent: EventStore.Core.TransactionLog.Chunks
  isExternal: false
  name: TFChunkDb
  nameWithType: TFChunkDb
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkDb
- uid: EventStore.Core.Cluster.Settings.ClusterVNodeSettings
  commentId: T:EventStore.Core.Cluster.Settings.ClusterVNodeSettings
  parent: EventStore.Core.Cluster.Settings
  isExternal: false
  name: ClusterVNodeSettings
  nameWithType: ClusterVNodeSettings
  fullName: EventStore.Core.Cluster.Settings.ClusterVNodeSettings
- uid: EventStore.Core.ClusterVNode
  commentId: T:EventStore.Core.ClusterVNode
  parent: EventStore.Core
  isExternal: false
  name: ClusterVNode
  nameWithType: ClusterVNode
  fullName: EventStore.Core.ClusterVNode
- uid: EventStore.Core.Services.VNode.MessageForwardingProxy
  commentId: T:EventStore.Core.Services.VNode.MessageForwardingProxy
  parent: EventStore.Core.Services.VNode
  isExternal: false
  name: MessageForwardingProxy
  nameWithType: MessageForwardingProxy
  fullName: EventStore.Core.Services.VNode.MessageForwardingProxy
- uid: EventStore.Core.ISubsystem[]
  name: ISubsystem[]
  nameWithType: ISubsystem[]
  fullName: EventStore.Core.ISubsystem[]
  nameWithType.vb: ISubsystem()
  fullName.vb: EventStore.Core.ISubsystem()
  name.vb: ISubsystem()
  spec.csharp:
  - uid: EventStore.Core.ISubsystem
    name: ISubsystem
    nameWithType: ISubsystem
    fullName: EventStore.Core.ISubsystem
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.ISubsystem
    name: ISubsystem
    nameWithType: ISubsystem
    fullName: EventStore.Core.ISubsystem
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  isExternal: false
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: EventStore.Core.TransactionLog.Chunks
  commentId: N:EventStore.Core.TransactionLog.Chunks
  isExternal: false
  name: EventStore.Core.TransactionLog.Chunks
  nameWithType: EventStore.Core.TransactionLog.Chunks
  fullName: EventStore.Core.TransactionLog.Chunks
- uid: EventStore.Core.Cluster.Settings
  commentId: N:EventStore.Core.Cluster.Settings
  isExternal: false
  name: EventStore.Core.Cluster.Settings
  nameWithType: EventStore.Core.Cluster.Settings
  fullName: EventStore.Core.Cluster.Settings
- uid: EventStore.Core
  commentId: N:EventStore.Core
  isExternal: false
  name: EventStore.Core
  nameWithType: EventStore.Core
  fullName: EventStore.Core
- uid: EventStore.Core.Services.VNode.ClusterVNodeController.SetMainQueue*
  commentId: Overload:EventStore.Core.Services.VNode.ClusterVNodeController.SetMainQueue
  isExternal: false
  name: SetMainQueue
  nameWithType: ClusterVNodeController.SetMainQueue
  fullName: EventStore.Core.Services.VNode.ClusterVNodeController.SetMainQueue
- uid: EventStore.Core.Bus.IQueuedHandler
  commentId: T:EventStore.Core.Bus.IQueuedHandler
  parent: EventStore.Core.Bus
  isExternal: false
  name: IQueuedHandler
  nameWithType: IQueuedHandler
  fullName: EventStore.Core.Bus.IQueuedHandler
- uid: EventStore.Core.Services.VNode.ClusterVNodeController.EventStore#Core#Bus#IHandle{EventStore#Core#Messaging#Message}#Handle*
  commentId: Overload:EventStore.Core.Services.VNode.ClusterVNodeController.EventStore#Core#Bus#IHandle{EventStore#Core#Messaging#Message}#Handle
  isExternal: false
  name: IHandle<Message>.Handle
  nameWithType: ClusterVNodeController.IHandle<Message>.Handle
  fullName: EventStore.Core.Services.VNode.ClusterVNodeController.EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>.Handle
  nameWithType.vb: ClusterVNodeController.EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>.Handle
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}.Handle(EventStore.Core.Messaging.Message)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}.Handle(EventStore.Core.Messaging.Message)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(Message)
  nameWithType: IHandle<Message>.Handle(Message)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>.Handle(EventStore.Core.Messaging.Message)
  nameWithType.vb: IHandle(Of Message).Handle(Message)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messaging.Message).Handle(EventStore.Core.Messaging.Message)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<Message>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of Message).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messaging.Message).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  isExternal: false
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  isExternal: false
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging

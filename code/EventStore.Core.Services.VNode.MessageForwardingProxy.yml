### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.VNode.MessageForwardingProxy
  commentId: T:EventStore.Core.Services.VNode.MessageForwardingProxy
  id: MessageForwardingProxy
  parent: EventStore.Core.Services.VNode
  children:
  - EventStore.Core.Services.VNode.MessageForwardingProxy.Register(Guid,Guid,EventStore.Core.Messaging.IEnvelope,TimeSpan,EventStore.Core.Messaging.Message)
  - EventStore.Core.Services.VNode.MessageForwardingProxy.TimeoutForwardings
  - EventStore.Core.Services.VNode.MessageForwardingProxy.TryForwardReply``1(Guid,``0,Func{Guid,``0,``0})
  langs:
  - csharp
  - vb
  name: MessageForwardingProxy
  nameWithType: MessageForwardingProxy
  fullName: EventStore.Core.Services.VNode.MessageForwardingProxy
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/VNode/MessageForwardingProxy.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MessageForwardingProxy
    path: ../EventStore/src/EventStore.Core/Services/VNode/MessageForwardingProxy.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: 'public class MessageForwardingProxy : object'
    content.vb: >-
      Public Class MessageForwardingProxy
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.VNode.MessageForwardingProxy.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.VNode.MessageForwardingProxy.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.VNode.MessageForwardingProxy.Register(Guid,Guid,EventStore.Core.Messaging.IEnvelope,TimeSpan,EventStore.Core.Messaging.Message)
  commentId: M:EventStore.Core.Services.VNode.MessageForwardingProxy.Register(Guid,Guid,EventStore.Core.Messaging.IEnvelope,TimeSpan,EventStore.Core.Messaging.Message)
  id: Register(Guid,Guid,EventStore.Core.Messaging.IEnvelope,TimeSpan,EventStore.Core.Messaging.Message)
  parent: EventStore.Core.Services.VNode.MessageForwardingProxy
  langs:
  - csharp
  - vb
  name: Register(Guid, Guid, IEnvelope, TimeSpan, Message)
  nameWithType: MessageForwardingProxy.Register(Guid, Guid, IEnvelope, TimeSpan, Message)
  fullName: EventStore.Core.Services.VNode.MessageForwardingProxy.Register(Guid, Guid, EventStore.Core.Messaging.IEnvelope, TimeSpan, EventStore.Core.Messaging.Message)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/VNode/MessageForwardingProxy.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Register
    path: ../EventStore/src/EventStore.Core/Services/VNode/MessageForwardingProxy.cs
    startLine: 13
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: public void Register(Guid internalCorrId, Guid clientCorrId, IEnvelope envelope, TimeSpan timeout, Message timeoutMessage)
    parameters:
    - id: internalCorrId
      type: Guid
    - id: clientCorrId
      type: Guid
    - id: envelope
      type: EventStore.Core.Messaging.IEnvelope
    - id: timeout
      type: TimeSpan
    - id: timeoutMessage
      type: EventStore.Core.Messaging.Message
    content.vb: Public Sub Register(internalCorrId As Guid, clientCorrId As Guid, envelope As IEnvelope, timeout As TimeSpan, timeoutMessage As Message)
  overload: EventStore.Core.Services.VNode.MessageForwardingProxy.Register*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.VNode.MessageForwardingProxy.TryForwardReply``1(Guid,``0,Func{Guid,``0,``0})
  commentId: M:EventStore.Core.Services.VNode.MessageForwardingProxy.TryForwardReply``1(Guid,``0,Func{Guid,``0,``0})
  id: TryForwardReply``1(Guid,``0,Func{Guid,``0,``0})
  parent: EventStore.Core.Services.VNode.MessageForwardingProxy
  langs:
  - csharp
  - vb
  name: TryForwardReply<TMessage>(Guid, TMessage, Func<Guid, TMessage, TMessage>)
  nameWithType: MessageForwardingProxy.TryForwardReply<TMessage>(Guid, TMessage, Func<Guid, TMessage, TMessage>)
  fullName: EventStore.Core.Services.VNode.MessageForwardingProxy.TryForwardReply<TMessage>(Guid, TMessage, Func<Guid, TMessage, TMessage>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/VNode/MessageForwardingProxy.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TryForwardReply
    path: ../EventStore/src/EventStore.Core/Services/VNode/MessageForwardingProxy.cs
    startLine: 26
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: 'public bool TryForwardReply<TMessage>(Guid correlationId, TMessage originalMessage, Func<Guid, TMessage, TMessage> getForwardMessage)where TMessage : Message'
    parameters:
    - id: correlationId
      type: Guid
    - id: originalMessage
      type: '{TMessage}'
    - id: getForwardMessage
      type: Func{Guid,{TMessage},{TMessage}}
    typeParameters:
    - id: TMessage
    return:
      type: System.Boolean
    content.vb: Public Function TryForwardReply(Of TMessage As Message)(correlationId As Guid, originalMessage As TMessage, getForwardMessage As Func(Of Guid, TMessage, TMessage)) As Boolean
  overload: EventStore.Core.Services.VNode.MessageForwardingProxy.TryForwardReply*
  nameWithType.vb: MessageForwardingProxy.TryForwardReply(Of TMessage)(Guid, TMessage, Func(Of Guid, TMessage, TMessage))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.VNode.MessageForwardingProxy.TryForwardReply(Of TMessage)(Guid, TMessage, Func(Of Guid, TMessage, TMessage))
  name.vb: TryForwardReply(Of TMessage)(Guid, TMessage, Func(Of Guid, TMessage, TMessage))
- uid: EventStore.Core.Services.VNode.MessageForwardingProxy.TimeoutForwardings
  commentId: M:EventStore.Core.Services.VNode.MessageForwardingProxy.TimeoutForwardings
  id: TimeoutForwardings
  parent: EventStore.Core.Services.VNode.MessageForwardingProxy
  langs:
  - csharp
  - vb
  name: TimeoutForwardings()
  nameWithType: MessageForwardingProxy.TimeoutForwardings()
  fullName: EventStore.Core.Services.VNode.MessageForwardingProxy.TimeoutForwardings()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/VNode/MessageForwardingProxy.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TimeoutForwardings
    path: ../EventStore/src/EventStore.Core/Services/VNode/MessageForwardingProxy.cs
    startLine: 38
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: public void TimeoutForwardings()
    content.vb: Public Sub TimeoutForwardings
  overload: EventStore.Core.Services.VNode.MessageForwardingProxy.TimeoutForwardings*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.VNode
  commentId: N:EventStore.Core.Services.VNode
  isExternal: false
  name: EventStore.Core.Services.VNode
  nameWithType: EventStore.Core.Services.VNode
  fullName: EventStore.Core.Services.VNode
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.VNode.MessageForwardingProxy.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<MessageForwardingProxy>()
  nameWithType: ProtobufExtensions.Serialize<MessageForwardingProxy>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.VNode.MessageForwardingProxy>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of MessageForwardingProxy)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.VNode.MessageForwardingProxy)()
  name.vb: Serialize(Of MessageForwardingProxy)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<MessageForwardingProxy>
    nameWithType: ProtobufExtensions.Serialize<MessageForwardingProxy>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.VNode.MessageForwardingProxy>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of MessageForwardingProxy)
    nameWithType: ProtobufExtensions.Serialize(Of MessageForwardingProxy)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.VNode.MessageForwardingProxy)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.VNode.MessageForwardingProxy.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<MessageForwardingProxy>()
  nameWithType: ProtobufExtensions.SerializeToArray<MessageForwardingProxy>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.VNode.MessageForwardingProxy>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of MessageForwardingProxy)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.VNode.MessageForwardingProxy)()
  name.vb: SerializeToArray(Of MessageForwardingProxy)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<MessageForwardingProxy>
    nameWithType: ProtobufExtensions.SerializeToArray<MessageForwardingProxy>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.VNode.MessageForwardingProxy>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of MessageForwardingProxy)
    nameWithType: ProtobufExtensions.SerializeToArray(Of MessageForwardingProxy)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.VNode.MessageForwardingProxy)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.VNode.MessageForwardingProxy.Register*
  commentId: Overload:EventStore.Core.Services.VNode.MessageForwardingProxy.Register
  isExternal: false
  name: Register
  nameWithType: MessageForwardingProxy.Register
  fullName: EventStore.Core.Services.VNode.MessageForwardingProxy.Register
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: EventStore.Core.Messaging.IEnvelope
  commentId: T:EventStore.Core.Messaging.IEnvelope
  parent: EventStore.Core.Messaging
  isExternal: false
  name: IEnvelope
  nameWithType: IEnvelope
  fullName: EventStore.Core.Messaging.IEnvelope
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  isExternal: false
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Core.Services.VNode.MessageForwardingProxy.TryForwardReply*
  commentId: Overload:EventStore.Core.Services.VNode.MessageForwardingProxy.TryForwardReply
  isExternal: false
  name: TryForwardReply
  nameWithType: MessageForwardingProxy.TryForwardReply
  fullName: EventStore.Core.Services.VNode.MessageForwardingProxy.TryForwardReply
- uid: '{TMessage}'
  commentId: '!:TMessage'
  definition: TMessage
  name: TMessage
  nameWithType: TMessage
  fullName: TMessage
- uid: Func{Guid,{TMessage},{TMessage}}
  commentId: '!:Func{Guid,``0,``0}'
  definition: Func`3
  name: Func<Guid, TMessage, TMessage>
  nameWithType: Func<Guid, TMessage, TMessage>
  fullName: Func<Guid, TMessage, TMessage>
  nameWithType.vb: Func(Of Guid, TMessage, TMessage)
  fullName.vb: Func(Of Guid, TMessage, TMessage)
  name.vb: Func(Of Guid, TMessage, TMessage)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TMessage
  commentId: '!:TMessage'
  isExternal: false
  name: TMessage
  nameWithType: TMessage
  fullName: TMessage
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.VNode.MessageForwardingProxy.TimeoutForwardings*
  commentId: Overload:EventStore.Core.Services.VNode.MessageForwardingProxy.TimeoutForwardings
  isExternal: false
  name: TimeoutForwardings
  nameWithType: MessageForwardingProxy.TimeoutForwardings
  fullName: EventStore.Core.Services.VNode.MessageForwardingProxy.TimeoutForwardings

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Tests.Helpers.CollectionsExtensions
  commentId: T:EventStore.Core.Tests.Helpers.CollectionsExtensions
  id: CollectionsExtensions
  parent: EventStore.Core.Tests.Helpers
  children:
  - EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN``1(IEnumerable{System.Object},System.Int32)
  - EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN``1(IEnumerable{System.Object},System.Int32,Predicate{``0})
  - EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo``1(IEnumerable{System.Object})
  - EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo``1(IEnumerable{System.Object},Predicate{``0})
  - EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle``1(IEnumerable{System.Object})
  - EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle``1(IEnumerable{System.Object},Predicate{``0})
  - EventStore.Core.Tests.Helpers.CollectionsExtensions.IsEmpty(IEnumerable{System.Object})
  langs:
  - csharp
  - vb
  name: CollectionsExtensions
  nameWithType: CollectionsExtensions
  fullName: EventStore.Core.Tests.Helpers.CollectionsExtensions
  type: Class
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CollectionsExtensions
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
    startLine: 6
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: 'public static class CollectionsExtensions : object'
    content.vb: >-
      Public Module CollectionsExtensions

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo``1(IEnumerable{System.Object})
  commentId: M:EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo``1(IEnumerable{System.Object})
  id: ContainsNo``1(IEnumerable{System.Object})
  isExtensionMethod: true
  parent: EventStore.Core.Tests.Helpers.CollectionsExtensions
  langs:
  - csharp
  - vb
  name: ContainsNo<TMessage>(IEnumerable<Object>)
  nameWithType: CollectionsExtensions.ContainsNo<TMessage>(IEnumerable<Object>)
  fullName: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo<TMessage>(IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ContainsNo
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
    startLine: 8
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static bool ContainsNo<TMessage>(this IEnumerable<object> collection)
    parameters:
    - id: collection
      type: IEnumerable{System.Object}
    typeParameters:
    - id: TMessage
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsNo(Of TMessage)(collection As IEnumerable(Of Object)) As Boolean
  overload: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo*
  nameWithType.vb: CollectionsExtensions.ContainsNo(Of TMessage)(IEnumerable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo(Of TMessage)(IEnumerable(Of System.Object))
  name.vb: ContainsNo(Of TMessage)(IEnumerable(Of Object))
- uid: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo``1(IEnumerable{System.Object},Predicate{``0})
  commentId: M:EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo``1(IEnumerable{System.Object},Predicate{``0})
  id: ContainsNo``1(IEnumerable{System.Object},Predicate{``0})
  isExtensionMethod: true
  parent: EventStore.Core.Tests.Helpers.CollectionsExtensions
  langs:
  - csharp
  - vb
  name: ContainsNo<TMessage>(IEnumerable<Object>, Predicate<TMessage>)
  nameWithType: CollectionsExtensions.ContainsNo<TMessage>(IEnumerable<Object>, Predicate<TMessage>)
  fullName: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo<TMessage>(IEnumerable<System.Object>, Predicate<TMessage>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ContainsNo
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
    startLine: 13
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static bool ContainsNo<TMessage>(this IEnumerable<object> collection, Predicate<TMessage> predicate)
    parameters:
    - id: collection
      type: IEnumerable{System.Object}
    - id: predicate
      type: Predicate{{TMessage}}
    typeParameters:
    - id: TMessage
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsNo(Of TMessage)(collection As IEnumerable(Of Object), predicate As Predicate(Of TMessage)) As Boolean
  overload: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo*
  nameWithType.vb: CollectionsExtensions.ContainsNo(Of TMessage)(IEnumerable(Of Object), Predicate(Of TMessage))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo(Of TMessage)(IEnumerable(Of System.Object), Predicate(Of TMessage))
  name.vb: ContainsNo(Of TMessage)(IEnumerable(Of Object), Predicate(Of TMessage))
- uid: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle``1(IEnumerable{System.Object})
  commentId: M:EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle``1(IEnumerable{System.Object})
  id: ContainsSingle``1(IEnumerable{System.Object})
  isExtensionMethod: true
  parent: EventStore.Core.Tests.Helpers.CollectionsExtensions
  langs:
  - csharp
  - vb
  name: ContainsSingle<TMessage>(IEnumerable<Object>)
  nameWithType: CollectionsExtensions.ContainsSingle<TMessage>(IEnumerable<Object>)
  fullName: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle<TMessage>(IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ContainsSingle
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
    startLine: 18
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static bool ContainsSingle<TMessage>(this IEnumerable<object> collection)
    parameters:
    - id: collection
      type: IEnumerable{System.Object}
    typeParameters:
    - id: TMessage
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsSingle(Of TMessage)(collection As IEnumerable(Of Object)) As Boolean
  overload: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle*
  nameWithType.vb: CollectionsExtensions.ContainsSingle(Of TMessage)(IEnumerable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle(Of TMessage)(IEnumerable(Of System.Object))
  name.vb: ContainsSingle(Of TMessage)(IEnumerable(Of Object))
- uid: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle``1(IEnumerable{System.Object},Predicate{``0})
  commentId: M:EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle``1(IEnumerable{System.Object},Predicate{``0})
  id: ContainsSingle``1(IEnumerable{System.Object},Predicate{``0})
  isExtensionMethod: true
  parent: EventStore.Core.Tests.Helpers.CollectionsExtensions
  langs:
  - csharp
  - vb
  name: ContainsSingle<TMessage>(IEnumerable<Object>, Predicate<TMessage>)
  nameWithType: CollectionsExtensions.ContainsSingle<TMessage>(IEnumerable<Object>, Predicate<TMessage>)
  fullName: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle<TMessage>(IEnumerable<System.Object>, Predicate<TMessage>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ContainsSingle
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
    startLine: 23
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static bool ContainsSingle<TMessage>(this IEnumerable<object> collection, Predicate<TMessage> predicate)
    parameters:
    - id: collection
      type: IEnumerable{System.Object}
    - id: predicate
      type: Predicate{{TMessage}}
    typeParameters:
    - id: TMessage
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsSingle(Of TMessage)(collection As IEnumerable(Of Object), predicate As Predicate(Of TMessage)) As Boolean
  overload: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle*
  nameWithType.vb: CollectionsExtensions.ContainsSingle(Of TMessage)(IEnumerable(Of Object), Predicate(Of TMessage))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle(Of TMessage)(IEnumerable(Of System.Object), Predicate(Of TMessage))
  name.vb: ContainsSingle(Of TMessage)(IEnumerable(Of Object), Predicate(Of TMessage))
- uid: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN``1(IEnumerable{System.Object},System.Int32)
  commentId: M:EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN``1(IEnumerable{System.Object},System.Int32)
  id: ContainsN``1(IEnumerable{System.Object},System.Int32)
  isExtensionMethod: true
  parent: EventStore.Core.Tests.Helpers.CollectionsExtensions
  langs:
  - csharp
  - vb
  name: ContainsN<TMessage>(IEnumerable<Object>, Int32)
  nameWithType: CollectionsExtensions.ContainsN<TMessage>(IEnumerable<Object>, Int32)
  fullName: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN<TMessage>(IEnumerable<System.Object>, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ContainsN
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
    startLine: 28
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static bool ContainsN<TMessage>(this IEnumerable<object> collection, int n)
    parameters:
    - id: collection
      type: IEnumerable{System.Object}
    - id: n
      type: System.Int32
    typeParameters:
    - id: TMessage
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsN(Of TMessage)(collection As IEnumerable(Of Object), n As Integer) As Boolean
  overload: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN*
  nameWithType.vb: CollectionsExtensions.ContainsN(Of TMessage)(IEnumerable(Of Object), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN(Of TMessage)(IEnumerable(Of System.Object), System.Int32)
  name.vb: ContainsN(Of TMessage)(IEnumerable(Of Object), Int32)
- uid: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN``1(IEnumerable{System.Object},System.Int32,Predicate{``0})
  commentId: M:EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN``1(IEnumerable{System.Object},System.Int32,Predicate{``0})
  id: ContainsN``1(IEnumerable{System.Object},System.Int32,Predicate{``0})
  isExtensionMethod: true
  parent: EventStore.Core.Tests.Helpers.CollectionsExtensions
  langs:
  - csharp
  - vb
  name: ContainsN<TMessage>(IEnumerable<Object>, Int32, Predicate<TMessage>)
  nameWithType: CollectionsExtensions.ContainsN<TMessage>(IEnumerable<Object>, Int32, Predicate<TMessage>)
  fullName: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN<TMessage>(IEnumerable<System.Object>, System.Int32, Predicate<TMessage>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ContainsN
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
    startLine: 33
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static bool ContainsN<TMessage>(this IEnumerable<object> collection, int n, Predicate<TMessage> predicate)
    parameters:
    - id: collection
      type: IEnumerable{System.Object}
    - id: n
      type: System.Int32
    - id: predicate
      type: Predicate{{TMessage}}
    typeParameters:
    - id: TMessage
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsN(Of TMessage)(collection As IEnumerable(Of Object), n As Integer, predicate As Predicate(Of TMessage)) As Boolean
  overload: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN*
  nameWithType.vb: CollectionsExtensions.ContainsN(Of TMessage)(IEnumerable(Of Object), Int32, Predicate(Of TMessage))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN(Of TMessage)(IEnumerable(Of System.Object), System.Int32, Predicate(Of TMessage))
  name.vb: ContainsN(Of TMessage)(IEnumerable(Of Object), Int32, Predicate(Of TMessage))
- uid: EventStore.Core.Tests.Helpers.CollectionsExtensions.IsEmpty(IEnumerable{System.Object})
  commentId: M:EventStore.Core.Tests.Helpers.CollectionsExtensions.IsEmpty(IEnumerable{System.Object})
  id: IsEmpty(IEnumerable{System.Object})
  isExtensionMethod: true
  parent: EventStore.Core.Tests.Helpers.CollectionsExtensions
  langs:
  - csharp
  - vb
  name: IsEmpty(IEnumerable<Object>)
  nameWithType: CollectionsExtensions.IsEmpty(IEnumerable<Object>)
  fullName: EventStore.Core.Tests.Helpers.CollectionsExtensions.IsEmpty(IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IsEmpty
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/CollectionsExtensions.cs
    startLine: 38
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static bool IsEmpty(this IEnumerable<object> collection)
    parameters:
    - id: collection
      type: IEnumerable{System.Object}
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsEmpty(collection As IEnumerable(Of Object)) As Boolean
  overload: EventStore.Core.Tests.Helpers.CollectionsExtensions.IsEmpty*
  nameWithType.vb: CollectionsExtensions.IsEmpty(IEnumerable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Tests.Helpers.CollectionsExtensions.IsEmpty(IEnumerable(Of System.Object))
  name.vb: IsEmpty(IEnumerable(Of Object))
references:
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo*
  commentId: Overload:EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo
  isExternal: false
  name: ContainsNo
  nameWithType: CollectionsExtensions.ContainsNo
  fullName: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsNo
- uid: IEnumerable{System.Object}
  commentId: '!:IEnumerable{System.Object}'
  definition: IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Predicate{{TMessage}}
  commentId: '!:Predicate{``0}'
  definition: Predicate`1
  name: Predicate<TMessage>
  nameWithType: Predicate<TMessage>
  fullName: Predicate<TMessage>
  nameWithType.vb: Predicate(Of TMessage)
  fullName.vb: Predicate(Of TMessage)
  name.vb: Predicate(Of TMessage)
  spec.csharp:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Predicate`1
  isExternal: true
  name: Predicate<>
  nameWithType: Predicate<>
  fullName: Predicate<>
  nameWithType.vb: Predicate(Of )
  fullName.vb: Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle*
  commentId: Overload:EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle
  isExternal: false
  name: ContainsSingle
  nameWithType: CollectionsExtensions.ContainsSingle
  fullName: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsSingle
- uid: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN*
  commentId: Overload:EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN
  isExternal: false
  name: ContainsN
  nameWithType: CollectionsExtensions.ContainsN
  fullName: EventStore.Core.Tests.Helpers.CollectionsExtensions.ContainsN
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Tests.Helpers.CollectionsExtensions.IsEmpty*
  commentId: Overload:EventStore.Core.Tests.Helpers.CollectionsExtensions.IsEmpty
  isExternal: false
  name: IsEmpty
  nameWithType: CollectionsExtensions.IsEmpty
  fullName: EventStore.Core.Tests.Helpers.CollectionsExtensions.IsEmpty

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Tests.Helpers.HelperExtensions
  commentId: T:EventStore.Core.Tests.Helpers.HelperExtensions
  id: HelperExtensions
  parent: EventStore.Core.Tests.Helpers
  children:
  - EventStore.Core.Tests.Helpers.HelperExtensions.AreEqual``2(IDictionary{``0,``1},IDictionary{``0,``1})
  - EventStore.Core.Tests.Helpers.HelperExtensions.AssertJArray(JArray,JArray,System.String)
  - EventStore.Core.Tests.Helpers.HelperExtensions.AssertJObject(JObject,JObject,System.String)
  - EventStore.Core.Tests.Helpers.HelperExtensions.AssertJson``1(``0,JObject)
  - EventStore.Core.Tests.Helpers.HelperExtensions.GetFilePathFromAssembly(System.String)
  - EventStore.Core.Tests.Helpers.HelperExtensions.IsBetween(System.Int32,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: HelperExtensions
  nameWithType: HelperExtensions
  fullName: EventStore.Core.Tests.Helpers.HelperExtensions
  type: Class
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: HelperExtensions
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
    startLine: 10
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: 'public static class HelperExtensions : object'
    content.vb: >-
      Public Module HelperExtensions

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Core.Tests.Helpers.HelperExtensions.IsBetween(System.Int32,System.Int32,System.Int32)
  commentId: M:EventStore.Core.Tests.Helpers.HelperExtensions.IsBetween(System.Int32,System.Int32,System.Int32)
  id: IsBetween(System.Int32,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: EventStore.Core.Tests.Helpers.HelperExtensions
  langs:
  - csharp
  - vb
  name: IsBetween(Int32, Int32, Int32)
  nameWithType: HelperExtensions.IsBetween(Int32, Int32, Int32)
  fullName: EventStore.Core.Tests.Helpers.HelperExtensions.IsBetween(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IsBetween
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
    startLine: 12
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static bool IsBetween(this int n, int a, int b)
    parameters:
    - id: n
      type: System.Int32
    - id: a
      type: System.Int32
    - id: b
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsBetween(n As Integer, a As Integer, b As Integer) As Boolean
  overload: EventStore.Core.Tests.Helpers.HelperExtensions.IsBetween*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.Tests.Helpers.HelperExtensions.AreEqual``2(IDictionary{``0,``1},IDictionary{``0,``1})
  commentId: M:EventStore.Core.Tests.Helpers.HelperExtensions.AreEqual``2(IDictionary{``0,``1},IDictionary{``0,``1})
  id: AreEqual``2(IDictionary{``0,``1},IDictionary{``0,``1})
  isExtensionMethod: true
  parent: EventStore.Core.Tests.Helpers.HelperExtensions
  langs:
  - csharp
  - vb
  name: AreEqual<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>)
  nameWithType: HelperExtensions.AreEqual<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>)
  fullName: EventStore.Core.Tests.Helpers.HelperExtensions.AreEqual<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AreEqual
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
    startLine: 17
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static bool AreEqual<TKey, TValue>(this IDictionary<TKey, TValue> first, IDictionary<TKey, TValue> second)
    parameters:
    - id: first
      type: IDictionary{{TKey},{TValue}}
    - id: second
      type: IDictionary{{TKey},{TValue}}
    typeParameters:
    - id: TKey
    - id: TValue
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AreEqual(Of TKey, TValue)(first As IDictionary(Of TKey, TValue), second As IDictionary(Of TKey, TValue)) As Boolean
  overload: EventStore.Core.Tests.Helpers.HelperExtensions.AreEqual*
  nameWithType.vb: HelperExtensions.AreEqual(Of TKey, TValue)(IDictionary(Of TKey, TValue), IDictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Tests.Helpers.HelperExtensions.AreEqual(Of TKey, TValue)(IDictionary(Of TKey, TValue), IDictionary(Of TKey, TValue))
  name.vb: AreEqual(Of TKey, TValue)(IDictionary(Of TKey, TValue), IDictionary(Of TKey, TValue))
- uid: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJObject(JObject,JObject,System.String)
  commentId: M:EventStore.Core.Tests.Helpers.HelperExtensions.AssertJObject(JObject,JObject,System.String)
  id: AssertJObject(JObject,JObject,System.String)
  parent: EventStore.Core.Tests.Helpers.HelperExtensions
  langs:
  - csharp
  - vb
  name: AssertJObject(JObject, JObject, String)
  nameWithType: HelperExtensions.AssertJObject(JObject, JObject, String)
  fullName: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJObject(JObject, JObject, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AssertJObject
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
    startLine: 26
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static void AssertJObject(JObject expected, JObject response, string path)
    parameters:
    - id: expected
      type: JObject
    - id: response
      type: JObject
    - id: path
      type: System.String
    content.vb: Public Shared Sub AssertJObject(expected As JObject, response As JObject, path As String)
  overload: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJObject*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJArray(JArray,JArray,System.String)
  commentId: M:EventStore.Core.Tests.Helpers.HelperExtensions.AssertJArray(JArray,JArray,System.String)
  id: AssertJArray(JArray,JArray,System.String)
  parent: EventStore.Core.Tests.Helpers.HelperExtensions
  langs:
  - csharp
  - vb
  name: AssertJArray(JArray, JArray, String)
  nameWithType: HelperExtensions.AssertJArray(JArray, JArray, String)
  fullName: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJArray(JArray, JArray, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AssertJArray
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
    startLine: 77
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static void AssertJArray(JArray expected, JArray response, string path)
    parameters:
    - id: expected
      type: JArray
    - id: response
      type: JArray
    - id: path
      type: System.String
    content.vb: Public Shared Sub AssertJArray(expected As JArray, response As JArray, path As String)
  overload: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJArray*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJson``1(``0,JObject)
  commentId: M:EventStore.Core.Tests.Helpers.HelperExtensions.AssertJson``1(``0,JObject)
  id: AssertJson``1(``0,JObject)
  parent: EventStore.Core.Tests.Helpers.HelperExtensions
  langs:
  - csharp
  - vb
  name: AssertJson<T>(T, JObject)
  nameWithType: HelperExtensions.AssertJson<T>(T, JObject)
  fullName: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJson<T>(T, JObject)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AssertJson
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
    startLine: 105
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static void AssertJson<T>(T expected, JObject response)
    parameters:
    - id: expected
      type: '{T}'
    - id: response
      type: JObject
    typeParameters:
    - id: T
    content.vb: Public Shared Sub AssertJson(Of T)(expected As T, response As JObject)
  overload: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJson*
  nameWithType.vb: HelperExtensions.AssertJson(Of T)(T, JObject)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJson(Of T)(T, JObject)
  name.vb: AssertJson(Of T)(T, JObject)
- uid: EventStore.Core.Tests.Helpers.HelperExtensions.GetFilePathFromAssembly(System.String)
  commentId: M:EventStore.Core.Tests.Helpers.HelperExtensions.GetFilePathFromAssembly(System.String)
  id: GetFilePathFromAssembly(System.String)
  parent: EventStore.Core.Tests.Helpers.HelperExtensions
  langs:
  - csharp
  - vb
  name: GetFilePathFromAssembly(String)
  nameWithType: HelperExtensions.GetFilePathFromAssembly(String)
  fullName: EventStore.Core.Tests.Helpers.HelperExtensions.GetFilePathFromAssembly(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetFilePathFromAssembly
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
    startLine: 115
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static string GetFilePathFromAssembly(string filePath)
    parameters:
    - id: filePath
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetFilePathFromAssembly(filePath As String) As String
  overload: EventStore.Core.Tests.Helpers.HelperExtensions.GetFilePathFromAssembly*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Tests.Helpers.HelperExtensions.IsBetween*
  commentId: Overload:EventStore.Core.Tests.Helpers.HelperExtensions.IsBetween
  isExternal: false
  name: IsBetween
  nameWithType: HelperExtensions.IsBetween
  fullName: EventStore.Core.Tests.Helpers.HelperExtensions.IsBetween
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Tests.Helpers.HelperExtensions.AreEqual*
  commentId: Overload:EventStore.Core.Tests.Helpers.HelperExtensions.AreEqual
  isExternal: false
  name: AreEqual
  nameWithType: HelperExtensions.AreEqual
  fullName: EventStore.Core.Tests.Helpers.HelperExtensions.AreEqual
- uid: IDictionary{{TKey},{TValue}}
  commentId: '!:IDictionary{``0,``1}'
  definition: IDictionary`2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: IDictionary`2
  isExternal: true
  name: IDictionary<, >
  nameWithType: IDictionary<, >
  fullName: IDictionary<, >
  nameWithType.vb: IDictionary(Of , )
  fullName.vb: IDictionary(Of , )
  name.vb: IDictionary(Of , )
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJObject*
  commentId: Overload:EventStore.Core.Tests.Helpers.HelperExtensions.AssertJObject
  isExternal: false
  name: AssertJObject
  nameWithType: HelperExtensions.AssertJObject
  fullName: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJObject
- uid: JObject
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: JObject
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJArray*
  commentId: Overload:EventStore.Core.Tests.Helpers.HelperExtensions.AssertJArray
  isExternal: false
  name: AssertJArray
  nameWithType: HelperExtensions.AssertJArray
  fullName: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJArray
- uid: JArray
  isExternal: true
  name: JArray
  nameWithType: JArray
  fullName: JArray
- uid: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJson*
  commentId: Overload:EventStore.Core.Tests.Helpers.HelperExtensions.AssertJson
  isExternal: false
  name: AssertJson
  nameWithType: HelperExtensions.AssertJson
  fullName: EventStore.Core.Tests.Helpers.HelperExtensions.AssertJson
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Core.Tests.Helpers.HelperExtensions.GetFilePathFromAssembly*
  commentId: Overload:EventStore.Core.Tests.Helpers.HelperExtensions.GetFilePathFromAssembly
  isExternal: false
  name: GetFilePathFromAssembly
  nameWithType: HelperExtensions.GetFilePathFromAssembly
  fullName: EventStore.Core.Tests.Helpers.HelperExtensions.GetFilePathFromAssembly

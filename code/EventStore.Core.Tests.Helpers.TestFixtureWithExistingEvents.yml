### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  commentId: T:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  id: TestFixtureWithExistingEvents
  parent: EventStore.Core.Tests.Helpers
  children:
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._activeTransactions
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._all
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._deletedStreams
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._listEventsHandler
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._streams
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllReadsTimeOut
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWriteComplete
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesQueueUp
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesSucceed
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesToSucceed(System.String)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyOrNoStream(System.String)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyStream(System.String)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEvent(System.String,System.Int64,System.String)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEvent(System.String,System.String,System.String,System.Int32)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventIs(System.String,System.String,System.String,System.Int32)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventJson``1(System.String,``0,System.String,System.Int32)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamContains(System.String,System.String[])
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTail(System.String,System.String[])
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTailWithLinks(System.String,System.String[])
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteOneReadBackwards
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteWriteWithResult(EventStore.Core.Messages.OperationResult)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DeletedStream(System.String)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DumpStream(System.String)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.EnableReadAll
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingEvent(System.String,System.String,System.String,System.String,System.Boolean)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingStreamMetadata(System.String,System.String)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.GetTfPos(System.String,System.Int64)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given1
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoOtherStreams
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoStream(System.String)
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.OneWriteCompletes
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ReadsBackwardQueuesUp
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.setup1
  langs:
  - csharp
  - vb
  name: TestFixtureWithExistingEvents
  nameWithType: TestFixtureWithExistingEvents
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  type: Class
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TestFixtureWithExistingEvents
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 18
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: 'public abstract class TestFixtureWithExistingEvents : TestFixtureWithReadWriteDispatchers, IHandle<ClientMessage.ReadStreamEventsBackward>, IHandle<ClientMessage.ReadStreamEventsForward>, IHandle<ClientMessage.ReadAllEventsForward>, IHandle<ClientMessage.WriteEvents>, IHandle<ClientMessage.TransactionStart>, IHandle<ClientMessage.TransactionWrite>, IHandle<ClientMessage.TransactionCommit>, IHandle<ClientMessage.DeleteStream>'
    content.vb: >-
      Public MustInherit Class TestFixtureWithExistingEvents

          Inherits TestFixtureWithReadWriteDispatchers

          Implements IHandle(Of ClientMessage.ReadStreamEventsBackward), IHandle(Of ClientMessage.ReadStreamEventsForward), IHandle(Of ClientMessage.ReadAllEventsForward), IHandle(Of ClientMessage.WriteEvents), IHandle(Of ClientMessage.TransactionStart), IHandle(Of ClientMessage.TransactionWrite), IHandle(Of ClientMessage.TransactionCommit), IHandle(Of ClientMessage.DeleteStream)
  inheritance:
  - System.Object
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  derivedClasses:
  - EventStore.Core.Tests.Authentication.with_internal_authentication_provider
  - EventStore.Core.Tests.Helpers.IODispatcherTests.QueueWriteEventsTests.when_a_write_completes
  - EventStore.Core.Tests.Helpers.IODispatcherTests.QueueWriteEventsTests.when_requesting_multiple_writes_with_different_keys
  - EventStore.Core.Tests.Helpers.IODispatcherTests.QueueWriteEventsTests.when_requesting_multiple_writes_with_the_same_key
  - EventStore.Core.Tests.Services.UserManagementService.user_management_service.TestFixtureWithUserManagementService
  - EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureWithExistingEvents
  - EventStore.Projections.Core.Tests.Services.projections_manager.managed_projection.when_persisted_state_write_fails
  - EventStore.Projections.Core.Tests.Services.projections_manager.specification_with_projection_management_service
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}
  inheritedMembers:
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._bus
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._streamDispatcher
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._writeDispatcher
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._readDispatcher
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._consumer
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._ioDispatcher
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._queue
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._otherQueues
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._timeProvider
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Envelope
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.HandledMessages
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep})
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException``1(Func{{T}},{T})
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Yield
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._listEventsHandler
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._listEventsHandler
  id: _listEventsHandler
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: _listEventsHandler
  nameWithType: TestFixtureWithExistingEvents._listEventsHandler
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._listEventsHandler
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _listEventsHandler
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 64
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected TestHandler<ClientMessage.ReadStreamEventsBackward> _listEventsHandler
    return:
      type: EventStore.Core.Tests.Bus.Helpers.TestHandler{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
    content.vb: Protected _listEventsHandler As TestHandler(Of ClientMessage.ReadStreamEventsBackward)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._streams
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._streams
  id: _streams
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: _streams
  nameWithType: TestFixtureWithExistingEvents._streams
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._streams
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _streams
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 66
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected readonly Dictionary<string, List<EventRecord>> _streams
    return:
      type: Dictionary{System.String,List{EventStore.Core.Data.EventRecord}}
    content.vb: Protected ReadOnly _streams As Dictionary(Of String, List(Of EventRecord))
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._all
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._all
  id: _all
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: _all
  nameWithType: TestFixtureWithExistingEvents._all
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._all
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _all
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 69
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected readonly SortedList<TFPos, EventRecord> _all
    return:
      type: SortedList{EventStore.Core.Data.TFPos,EventStore.Core.Data.EventRecord}
    content.vb: Protected ReadOnly _all As SortedList(Of TFPos, EventRecord)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._deletedStreams
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._deletedStreams
  id: _deletedStreams
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: _deletedStreams
  nameWithType: TestFixtureWithExistingEvents._deletedStreams
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._deletedStreams
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _deletedStreams
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 71
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected readonly HashSet<string> _deletedStreams
    return:
      type: HashSet{System.String}
    content.vb: Protected ReadOnly _deletedStreams As HashSet(Of String)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._activeTransactions
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._activeTransactions
  id: _activeTransactions
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: _activeTransactions
  nameWithType: TestFixtureWithExistingEvents._activeTransactions
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents._activeTransactions
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _activeTransactions
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 73
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected readonly Dictionary<long, TestFixtureWithExistingEvents.Transaction> _activeTransactions
    return:
      type: Dictionary{System.Int64,EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Transaction}
    content.vb: Protected ReadOnly _activeTransactions As Dictionary(Of Long, TestFixtureWithExistingEvents.Transaction)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingStreamMetadata(System.String,System.String)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingStreamMetadata(System.String,System.String)
  id: ExistingStreamMetadata(System.String,System.String)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: ExistingStreamMetadata(String, String)
  nameWithType: TestFixtureWithExistingEvents.ExistingStreamMetadata(String, String)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingStreamMetadata(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ExistingStreamMetadata
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 87
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected TFPos ExistingStreamMetadata(string streamId, string metadata)
    parameters:
    - id: streamId
      type: System.String
    - id: metadata
      type: System.String
    return:
      type: EventStore.Core.Data.TFPos
    content.vb: Protected Function ExistingStreamMetadata(streamId As String, metadata As String) As TFPos
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingStreamMetadata*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingEvent(System.String,System.String,System.String,System.String,System.Boolean)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingEvent(System.String,System.String,System.String,System.String,System.Boolean)
  id: ExistingEvent(System.String,System.String,System.String,System.String,System.Boolean)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: ExistingEvent(String, String, String, String, Boolean)
  nameWithType: TestFixtureWithExistingEvents.ExistingEvent(String, String, String, String, Boolean)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingEvent(System.String, System.String, System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ExistingEvent
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 92
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected TFPos ExistingEvent(string streamId, string eventType, string eventMetadata, string eventData, bool isJson = false)
    parameters:
    - id: streamId
      type: System.String
    - id: eventType
      type: System.String
    - id: eventMetadata
      type: System.String
    - id: eventData
      type: System.String
    - id: isJson
      type: System.Boolean
    return:
      type: EventStore.Core.Data.TFPos
    content.vb: Protected Function ExistingEvent(streamId As String, eventType As String, eventMetadata As String, eventData As String, isJson As Boolean = False) As TFPos
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingEvent*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllReadsTimeOut
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllReadsTimeOut
  id: AllReadsTimeOut
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AllReadsTimeOut()
  nameWithType: TestFixtureWithExistingEvents.AllReadsTimeOut()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllReadsTimeOut()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AllReadsTimeOut
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 115
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void AllReadsTimeOut()
    content.vb: Protected Sub AllReadsTimeOut
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllReadsTimeOut*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.EnableReadAll
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.EnableReadAll
  id: EnableReadAll
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: EnableReadAll()
  nameWithType: TestFixtureWithExistingEvents.EnableReadAll()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.EnableReadAll()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EnableReadAll
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 120
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void EnableReadAll()
    content.vb: Protected Sub EnableReadAll
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.EnableReadAll*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ReadsBackwardQueuesUp
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ReadsBackwardQueuesUp
  id: ReadsBackwardQueuesUp
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: ReadsBackwardQueuesUp()
  nameWithType: TestFixtureWithExistingEvents.ReadsBackwardQueuesUp()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ReadsBackwardQueuesUp()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ReadsBackwardQueuesUp
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 125
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void ReadsBackwardQueuesUp()
    content.vb: Protected Sub ReadsBackwardQueuesUp
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ReadsBackwardQueuesUp*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteOneReadBackwards
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteOneReadBackwards
  id: CompleteOneReadBackwards
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: CompleteOneReadBackwards()
  nameWithType: TestFixtureWithExistingEvents.CompleteOneReadBackwards()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteOneReadBackwards()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CompleteOneReadBackwards
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 130
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void CompleteOneReadBackwards()
    content.vb: Protected Sub CompleteOneReadBackwards
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteOneReadBackwards*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoStream(System.String)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoStream(System.String)
  id: NoStream(System.String)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: NoStream(String)
  nameWithType: TestFixtureWithExistingEvents.NoStream(String)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoStream(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: NoStream
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 136
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void NoStream(string streamId)
    parameters:
    - id: streamId
      type: System.String
    content.vb: Protected Sub NoStream(streamId As String)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoStream*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoOtherStreams
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoOtherStreams
  id: NoOtherStreams
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: NoOtherStreams()
  nameWithType: TestFixtureWithExistingEvents.NoOtherStreams()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoOtherStreams()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: NoOtherStreams
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 141
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void NoOtherStreams()
    content.vb: Protected Sub NoOtherStreams
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoOtherStreams*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DeletedStream(System.String)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DeletedStream(System.String)
  id: DeletedStream(System.String)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: DeletedStream(String)
  nameWithType: TestFixtureWithExistingEvents.DeletedStream(String)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DeletedStream(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: DeletedStream
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 146
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void DeletedStream(string streamId)
    parameters:
    - id: streamId
      type: System.String
    content.vb: Protected Sub DeletedStream(streamId As String)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DeletedStream*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesSucceed
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesSucceed
  id: AllWritesSucceed
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AllWritesSucceed()
  nameWithType: TestFixtureWithExistingEvents.AllWritesSucceed()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesSucceed()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AllWritesSucceed
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 157
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void AllWritesSucceed()
    content.vb: Protected Sub AllWritesSucceed
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesSucceed*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesToSucceed(System.String)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesToSucceed(System.String)
  id: AllWritesToSucceed(System.String)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AllWritesToSucceed(String)
  nameWithType: TestFixtureWithExistingEvents.AllWritesToSucceed(String)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesToSucceed(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AllWritesToSucceed
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 162
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void AllWritesToSucceed(string streamId)
    parameters:
    - id: streamId
      type: System.String
    content.vb: Protected Sub AllWritesToSucceed(streamId As String)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesToSucceed*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesQueueUp
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesQueueUp
  id: AllWritesQueueUp
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AllWritesQueueUp()
  nameWithType: TestFixtureWithExistingEvents.AllWritesQueueUp()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesQueueUp()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AllWritesQueueUp
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 167
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void AllWritesQueueUp()
    content.vb: Protected Sub AllWritesQueueUp
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesQueueUp*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.OneWriteCompletes
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.OneWriteCompletes
  id: OneWriteCompletes
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: OneWriteCompletes()
  nameWithType: TestFixtureWithExistingEvents.OneWriteCompletes()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.OneWriteCompletes()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: OneWriteCompletes
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 172
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void OneWriteCompletes()
    content.vb: Protected Sub OneWriteCompletes
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.OneWriteCompletes*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteWriteWithResult(EventStore.Core.Messages.OperationResult)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteWriteWithResult(EventStore.Core.Messages.OperationResult)
  id: CompleteWriteWithResult(EventStore.Core.Messages.OperationResult)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: CompleteWriteWithResult(OperationResult)
  nameWithType: TestFixtureWithExistingEvents.CompleteWriteWithResult(OperationResult)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteWriteWithResult(EventStore.Core.Messages.OperationResult)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CompleteWriteWithResult
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 182
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void CompleteWriteWithResult(OperationResult result)
    parameters:
    - id: result
      type: EventStore.Core.Messages.OperationResult
    content.vb: Protected Sub CompleteWriteWithResult(result As OperationResult)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteWriteWithResult*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWriteComplete
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWriteComplete
  id: AllWriteComplete
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AllWriteComplete()
  nameWithType: TestFixtureWithExistingEvents.AllWriteComplete()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWriteComplete()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AllWriteComplete
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 192
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void AllWriteComplete()
    content.vb: Protected Sub AllWriteComplete
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWriteComplete*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.setup1
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.setup1
  id: setup1
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: setup1()
  nameWithType: TestFixtureWithExistingEvents.setup1()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.setup1()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: setup1
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 198
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void setup1()
    content.vb: Public Sub setup1
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.setup1*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given1
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given1
  id: Given1
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: Given1()
  nameWithType: TestFixtureWithExistingEvents.Given1()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given1()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Given1
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 227
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected virtual void Given1()
    content.vb: Protected Overridable Sub Given1
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given1*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given
  id: Given
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: Given()
  nameWithType: TestFixtureWithExistingEvents.Given()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Given
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 231
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected virtual void Given()
    content.vb: Protected Overridable Sub Given
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  id: Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.ReadStreamEventsBackward)
  nameWithType: TestFixtureWithExistingEvents.Handle(ClientMessage.ReadStreamEventsBackward)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 235
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void Handle(ClientMessage.ReadStreamEventsBackward message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    content.vb: Public Sub Handle(message As ClientMessage.ReadStreamEventsBackward)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  id: Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.ReadStreamEventsForward)
  nameWithType: TestFixtureWithExistingEvents.Handle(ClientMessage.ReadStreamEventsForward)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 298
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void Handle(ClientMessage.ReadStreamEventsForward message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    content.vb: Public Sub Handle(message As ClientMessage.ReadStreamEventsForward)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  id: Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.WriteEvents)
  nameWithType: TestFixtureWithExistingEvents.Handle(ClientMessage.WriteEvents)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 392
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void Handle(ClientMessage.WriteEvents message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ClientMessage.WriteEvents
    content.vb: Public Sub Handle(message As ClientMessage.WriteEvents)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  id: Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.DeleteStream)
  nameWithType: TestFixtureWithExistingEvents.Handle(ClientMessage.DeleteStream)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 463
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void Handle(ClientMessage.DeleteStream message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ClientMessage.DeleteStream
    content.vb: Public Sub Handle(message As ClientMessage.DeleteStream)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  id: Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.ReadAllEventsForward)
  nameWithType: TestFixtureWithExistingEvents.Handle(ClientMessage.ReadAllEventsForward)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 493
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void Handle(ClientMessage.ReadAllEventsForward message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    content.vb: Public Sub Handle(message As ClientMessage.ReadAllEventsForward)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  id: Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.TransactionStart)
  nameWithType: TestFixtureWithExistingEvents.Handle(ClientMessage.TransactionStart)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 517
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void Handle(ClientMessage.TransactionStart message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ClientMessage.TransactionStart
    content.vb: Public Sub Handle(message As ClientMessage.TransactionStart)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  id: Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.TransactionWrite)
  nameWithType: TestFixtureWithExistingEvents.Handle(ClientMessage.TransactionWrite)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 527
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void Handle(ClientMessage.TransactionWrite message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ClientMessage.TransactionWrite
    content.vb: Public Sub Handle(message As ClientMessage.TransactionWrite)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  id: Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.TransactionCommit)
  nameWithType: TestFixtureWithExistingEvents.Handle(ClientMessage.TransactionCommit)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 543
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void Handle(ClientMessage.TransactionCommit message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ClientMessage.TransactionCommit
    content.vb: Public Sub Handle(message As ClientMessage.TransactionCommit)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.GetTfPos(System.String,System.Int64)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.GetTfPos(System.String,System.Int64)
  id: GetTfPos(System.String,System.Int64)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: GetTfPos(String, Int64)
  nameWithType: TestFixtureWithExistingEvents.GetTfPos(String, Int64)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.GetTfPos(System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetTfPos
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 559
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected TFPos GetTfPos(string streamId, long eventNumber)
    parameters:
    - id: streamId
      type: System.String
    - id: eventNumber
      type: System.Int64
    return:
      type: EventStore.Core.Data.TFPos
    content.vb: Protected Function GetTfPos(streamId As String, eventNumber As Long) As TFPos
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.GetTfPos*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEvent(System.String,System.String,System.String,System.Int32)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEvent(System.String,System.String,System.String,System.Int32)
  id: AssertLastEvent(System.String,System.String,System.String,System.Int32)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AssertLastEvent(String, String, String, Int32)
  nameWithType: TestFixtureWithExistingEvents.AssertLastEvent(String, String, String, Int32)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEvent(System.String, System.String, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AssertLastEvent
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 564
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void AssertLastEvent(string streamId, string data, string message = null, int skip = 0)
    parameters:
    - id: streamId
      type: System.String
    - id: data
      type: System.String
    - id: message
      type: System.String
    - id: skip
      type: System.Int32
    content.vb: Public Sub AssertLastEvent(streamId As String, data As String, message As String = Nothing, skip As Integer = 0)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventJson``1(System.String,``0,System.String,System.Int32)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventJson``1(System.String,``0,System.String,System.Int32)
  id: AssertLastEventJson``1(System.String,``0,System.String,System.Int32)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AssertLastEventJson<T>(String, T, String, Int32)
  nameWithType: TestFixtureWithExistingEvents.AssertLastEventJson<T>(String, T, String, Int32)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventJson<T>(System.String, T, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AssertLastEventJson
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 575
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void AssertLastEventJson<T>(string streamId, T json, string message = null, int skip = 0)
    parameters:
    - id: streamId
      type: System.String
    - id: json
      type: '{T}'
    - id: message
      type: System.String
    - id: skip
      type: System.Int32
    typeParameters:
    - id: T
    content.vb: Public Sub AssertLastEventJson(Of T)(streamId As String, json As T, message As String = Nothing, skip As Integer = 0)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventJson*
  nameWithType.vb: TestFixtureWithExistingEvents.AssertLastEventJson(Of T)(String, T, String, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventJson(Of T)(System.String, T, System.String, System.Int32)
  name.vb: AssertLastEventJson(Of T)(String, T, String, Int32)
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventIs(System.String,System.String,System.String,System.Int32)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventIs(System.String,System.String,System.String,System.Int32)
  id: AssertLastEventIs(System.String,System.String,System.String,System.Int32)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AssertLastEventIs(String, String, String, Int32)
  nameWithType: TestFixtureWithExistingEvents.AssertLastEventIs(String, String, String, Int32)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventIs(System.String, System.String, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AssertLastEventIs
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 587
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void AssertLastEventIs(string streamId, string eventType, string message = null, int skip = 0)
    parameters:
    - id: streamId
      type: System.String
    - id: eventType
      type: System.String
    - id: message
      type: System.String
    - id: skip
      type: System.Int32
    content.vb: Public Sub AssertLastEventIs(streamId As String, eventType As String, message As String = Nothing, skip As Integer = 0)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventIs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTail(System.String,System.String[])
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTail(System.String,System.String[])
  id: AssertStreamTail(System.String,System.String[])
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AssertStreamTail(String, String[])
  nameWithType: TestFixtureWithExistingEvents.AssertStreamTail(String, String[])
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTail(System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AssertStreamTail
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 598
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void AssertStreamTail(string streamId, params string[] data)
    parameters:
    - id: streamId
      type: System.String
    - id: data
      type: System.String[]
    content.vb: Public Sub AssertStreamTail(streamId As String, ParamArray data As String())
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTail*
  nameWithType.vb: TestFixtureWithExistingEvents.AssertStreamTail(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTail(System.String, System.String())
  name.vb: AssertStreamTail(String, String())
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTailWithLinks(System.String,System.String[])
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTailWithLinks(System.String,System.String[])
  id: AssertStreamTailWithLinks(System.String,System.String[])
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AssertStreamTailWithLinks(String, String[])
  nameWithType: TestFixtureWithExistingEvents.AssertStreamTailWithLinks(String, String[])
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTailWithLinks(System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AssertStreamTailWithLinks
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 614
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void AssertStreamTailWithLinks(string streamId, params string[] data)
    parameters:
    - id: streamId
      type: System.String
    - id: data
      type: System.String[]
    content.vb: Public Sub AssertStreamTailWithLinks(streamId As String, ParamArray data As String())
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTailWithLinks*
  nameWithType.vb: TestFixtureWithExistingEvents.AssertStreamTailWithLinks(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTailWithLinks(System.String, System.String())
  name.vb: AssertStreamTailWithLinks(String, String())
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamContains(System.String,System.String[])
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamContains(System.String,System.String[])
  id: AssertStreamContains(System.String,System.String[])
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AssertStreamContains(String, String[])
  nameWithType: TestFixtureWithExistingEvents.AssertStreamContains(String, String[])
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamContains(System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AssertStreamContains
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 646
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void AssertStreamContains(string streamId, params string[] data)
    parameters:
    - id: streamId
      type: System.String
    - id: data
      type: System.String[]
    content.vb: Public Sub AssertStreamContains(streamId As String, ParamArray data As String())
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamContains*
  nameWithType.vb: TestFixtureWithExistingEvents.AssertStreamContains(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamContains(System.String, System.String())
  name.vb: AssertStreamContains(String, String())
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEvent(System.String,System.Int64,System.String)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEvent(System.String,System.Int64,System.String)
  id: AssertEvent(System.String,System.Int64,System.String)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AssertEvent(String, Int64, String)
  nameWithType: TestFixtureWithExistingEvents.AssertEvent(String, Int64, String)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEvent(System.String, System.Int64, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AssertEvent
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 660
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void AssertEvent(string streamId, long eventNumber, string data)
    parameters:
    - id: streamId
      type: System.String
    - id: eventNumber
      type: System.Int64
    - id: data
      type: System.String
    content.vb: Public Sub AssertEvent(streamId As String, eventNumber As Long, data As String)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyStream(System.String)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyStream(System.String)
  id: AssertEmptyStream(System.String)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AssertEmptyStream(String)
  nameWithType: TestFixtureWithExistingEvents.AssertEmptyStream(String)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyStream(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AssertEmptyStream
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 665
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void AssertEmptyStream(string streamId)
    parameters:
    - id: streamId
      type: System.String
    content.vb: Public Sub AssertEmptyStream(streamId As String)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyStream*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyOrNoStream(System.String)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyOrNoStream(System.String)
  id: AssertEmptyOrNoStream(System.String)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: AssertEmptyOrNoStream(String)
  nameWithType: TestFixtureWithExistingEvents.AssertEmptyOrNoStream(String)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyOrNoStream(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AssertEmptyOrNoStream
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 670
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void AssertEmptyOrNoStream(string streamId)
    parameters:
    - id: streamId
      type: System.String
    content.vb: Public Sub AssertEmptyOrNoStream(streamId As String)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyOrNoStream*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DumpStream(System.String)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DumpStream(System.String)
  id: DumpStream(System.String)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  langs:
  - csharp
  - vb
  name: DumpStream(String)
  nameWithType: TestFixtureWithExistingEvents.DumpStream(String)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DumpStream(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: DumpStream
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
    startLine: 678
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void DumpStream(string streamId)
    parameters:
    - id: streamId
      type: System.String
    content.vb: Public Sub DumpStream(streamId As String)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DumpStream*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  commentId: T:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: TestFixtureWithReadWriteDispatchers
  nameWithType: TestFixtureWithReadWriteDispatchers
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.ReadStreamEventsBackward>
  nameWithType: IHandle<ClientMessage.ReadStreamEventsBackward>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>
  nameWithType.vb: IHandle(Of ClientMessage.ReadStreamEventsBackward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  name.vb: IHandle(Of ClientMessage.ReadStreamEventsBackward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.ReadStreamEventsForward>
  nameWithType: IHandle<ClientMessage.ReadStreamEventsForward>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>
  nameWithType.vb: IHandle(Of ClientMessage.ReadStreamEventsForward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  name.vb: IHandle(Of ClientMessage.ReadStreamEventsForward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.ReadAllEventsForward>
  nameWithType: IHandle<ClientMessage.ReadAllEventsForward>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>
  nameWithType.vb: IHandle(Of ClientMessage.ReadAllEventsForward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  name.vb: IHandle(Of ClientMessage.ReadAllEventsForward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    name: ClientMessage.ReadAllEventsForward
    nameWithType: ClientMessage.ReadAllEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    name: ClientMessage.ReadAllEventsForward
    nameWithType: ClientMessage.ReadAllEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.WriteEvents>
  nameWithType: IHandle<ClientMessage.WriteEvents>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.WriteEvents>
  nameWithType.vb: IHandle(Of ClientMessage.WriteEvents)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.WriteEvents)
  name.vb: IHandle(Of ClientMessage.WriteEvents)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.TransactionStart>
  nameWithType: IHandle<ClientMessage.TransactionStart>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionStart>
  nameWithType.vb: IHandle(Of ClientMessage.TransactionStart)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionStart)
  name.vb: IHandle(Of ClientMessage.TransactionStart)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.TransactionStart
    name: ClientMessage.TransactionStart
    nameWithType: ClientMessage.TransactionStart
    fullName: EventStore.Core.Messages.ClientMessage.TransactionStart
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.TransactionStart
    name: ClientMessage.TransactionStart
    nameWithType: ClientMessage.TransactionStart
    fullName: EventStore.Core.Messages.ClientMessage.TransactionStart
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.TransactionWrite>
  nameWithType: IHandle<ClientMessage.TransactionWrite>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionWrite>
  nameWithType.vb: IHandle(Of ClientMessage.TransactionWrite)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionWrite)
  name.vb: IHandle(Of ClientMessage.TransactionWrite)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.TransactionWrite
    name: ClientMessage.TransactionWrite
    nameWithType: ClientMessage.TransactionWrite
    fullName: EventStore.Core.Messages.ClientMessage.TransactionWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.TransactionWrite
    name: ClientMessage.TransactionWrite
    nameWithType: ClientMessage.TransactionWrite
    fullName: EventStore.Core.Messages.ClientMessage.TransactionWrite
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.TransactionCommit>
  nameWithType: IHandle<ClientMessage.TransactionCommit>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionCommit>
  nameWithType.vb: IHandle(Of ClientMessage.TransactionCommit)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionCommit)
  name.vb: IHandle(Of ClientMessage.TransactionCommit)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.TransactionCommit
    name: ClientMessage.TransactionCommit
    nameWithType: ClientMessage.TransactionCommit
    fullName: EventStore.Core.Messages.ClientMessage.TransactionCommit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.TransactionCommit
    name: ClientMessage.TransactionCommit
    nameWithType: ClientMessage.TransactionCommit
    fullName: EventStore.Core.Messages.ClientMessage.TransactionCommit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.DeleteStream>
  nameWithType: IHandle<ClientMessage.DeleteStream>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.DeleteStream>
  nameWithType.vb: IHandle(Of ClientMessage.DeleteStream)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.DeleteStream)
  name.vb: IHandle(Of ClientMessage.DeleteStream)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStream
    name: ClientMessage.DeleteStream
    nameWithType: ClientMessage.DeleteStream
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStream
    name: ClientMessage.DeleteStream
    nameWithType: ClientMessage.DeleteStream
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._bus
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._bus
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: _bus
  nameWithType: TestFixtureWithReadWriteDispatchers._bus
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._bus
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._streamDispatcher
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._streamDispatcher
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: _streamDispatcher
  nameWithType: TestFixtureWithReadWriteDispatchers._streamDispatcher
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._streamDispatcher
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._writeDispatcher
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._writeDispatcher
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: _writeDispatcher
  nameWithType: TestFixtureWithReadWriteDispatchers._writeDispatcher
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._writeDispatcher
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._readDispatcher
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._readDispatcher
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: _readDispatcher
  nameWithType: TestFixtureWithReadWriteDispatchers._readDispatcher
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._readDispatcher
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._consumer
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._consumer
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: _consumer
  nameWithType: TestFixtureWithReadWriteDispatchers._consumer
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._consumer
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._ioDispatcher
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._ioDispatcher
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: _ioDispatcher
  nameWithType: TestFixtureWithReadWriteDispatchers._ioDispatcher
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._ioDispatcher
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._queue
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._queue
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: _queue
  nameWithType: TestFixtureWithReadWriteDispatchers._queue
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._queue
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._otherQueues
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._otherQueues
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: _otherQueues
  nameWithType: TestFixtureWithReadWriteDispatchers._otherQueues
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._otherQueues
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._timeProvider
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._timeProvider
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: _timeProvider
  nameWithType: TestFixtureWithReadWriteDispatchers._timeProvider
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._timeProvider
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Envelope
  commentId: P:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Envelope
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: Envelope
  nameWithType: TestFixtureWithReadWriteDispatchers.Envelope
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Envelope
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.HandledMessages
  commentId: P:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.HandledMessages
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: HandledMessages
  nameWithType: TestFixtureWithReadWriteDispatchers.HandledMessages
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.HandledMessages
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: setup0()
  nameWithType: TestFixtureWithReadWriteDispatchers.setup0()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0
    name: setup0
    nameWithType: TestFixtureWithReadWriteDispatchers.setup0
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0
    name: setup0
    nameWithType: TestFixtureWithReadWriteDispatchers.setup0
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: GiveInputQueue()
  nameWithType: TestFixtureWithReadWriteDispatchers.GiveInputQueue()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue
    name: GiveInputQueue
    nameWithType: TestFixtureWithReadWriteDispatchers.GiveInputQueue
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue
    name: GiveInputQueue
    nameWithType: TestFixtureWithReadWriteDispatchers.GiveInputQueue
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: GetInputQueue()
  nameWithType: TestFixtureWithReadWriteDispatchers.GetInputQueue()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue
    name: GetInputQueue
    nameWithType: TestFixtureWithReadWriteDispatchers.GetInputQueue
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue
    name: GetInputQueue
    nameWithType: TestFixtureWithReadWriteDispatchers.GetInputQueue
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: DisableTimer()
  nameWithType: TestFixtureWithReadWriteDispatchers.DisableTimer()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer
    name: DisableTimer
    nameWithType: TestFixtureWithReadWriteDispatchers.DisableTimer
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer
    name: DisableTimer
    nameWithType: TestFixtureWithReadWriteDispatchers.DisableTimer
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: EnableTimer()
  nameWithType: TestFixtureWithReadWriteDispatchers.EnableTimer()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer
    name: EnableTimer
    nameWithType: TestFixtureWithReadWriteDispatchers.EnableTimer
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer
    name: EnableTimer
    nameWithType: TestFixtureWithReadWriteDispatchers.EnableTimer
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: WhenLoop()
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenLoop()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
    name: WhenLoop
    nameWithType: TestFixtureWithReadWriteDispatchers.WhenLoop
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
    name: WhenLoop
    nameWithType: TestFixtureWithReadWriteDispatchers.WhenLoop
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep})
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep})
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: true
  name: WhenLoop(IEnumerable<TestFixtureWithReadWriteDispatchers.WhenStep>)
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable<TestFixtureWithReadWriteDispatchers.WhenStep>)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable<EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep>)
  nameWithType.vb: TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable(Of TestFixtureWithReadWriteDispatchers.WhenStep))
  fullName.vb: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable(Of EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep))
  name.vb: WhenLoop(IEnumerable(Of TestFixtureWithReadWriteDispatchers.WhenStep))
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep})
    name: WhenLoop
    nameWithType: TestFixtureWithReadWriteDispatchers.WhenLoop
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
    name: TestFixtureWithReadWriteDispatchers.WhenStep
    nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep})
    name: WhenLoop
    nameWithType: TestFixtureWithReadWriteDispatchers.WhenLoop
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
    name: TestFixtureWithReadWriteDispatchers.WhenStep
    nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException``1(Func{{T}},{T})
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException``1(Func{``0},``0)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  definition: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException``1(Func{``0},``0)
  name: EatException<T>(Func<T>, T)
  nameWithType: TestFixtureWithReadWriteDispatchers.EatException<T>(Func<T>, T)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException<T>(Func<T>, T)
  nameWithType.vb: TestFixtureWithReadWriteDispatchers.EatException(Of T)(Func(Of T), T)
  fullName.vb: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException(Of T)(Func(Of T), T)
  name.vb: EatException(Of T)(Func(Of T), T)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException``1(Func{``0},``0)
    name: EatException<T>
    nameWithType: TestFixtureWithReadWriteDispatchers.EatException<T>
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException``1(Func{``0},``0)
    name: EatException(Of T)
    nameWithType: TestFixtureWithReadWriteDispatchers.EatException(Of T)
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: PreWhen()
  nameWithType: TestFixtureWithReadWriteDispatchers.PreWhen()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen
    name: PreWhen
    nameWithType: TestFixtureWithReadWriteDispatchers.PreWhen
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen
    name: PreWhen
    nameWithType: TestFixtureWithReadWriteDispatchers.PreWhen
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: When()
  nameWithType: TestFixtureWithReadWriteDispatchers.When()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When
    name: When
    nameWithType: TestFixtureWithReadWriteDispatchers.When
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When
    name: When
    nameWithType: TestFixtureWithReadWriteDispatchers.When
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Yield
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Yield
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  isExternal: false
  name: Yield
  nameWithType: TestFixtureWithReadWriteDispatchers.Yield
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Yield
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TestFixtureWithExistingEvents>()
  nameWithType: ProtobufExtensions.Serialize<TestFixtureWithExistingEvents>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TestFixtureWithExistingEvents)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents)()
  name.vb: Serialize(Of TestFixtureWithExistingEvents)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TestFixtureWithExistingEvents>
    nameWithType: ProtobufExtensions.Serialize<TestFixtureWithExistingEvents>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TestFixtureWithExistingEvents)
    nameWithType: ProtobufExtensions.Serialize(Of TestFixtureWithExistingEvents)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TestFixtureWithExistingEvents>()
  nameWithType: ProtobufExtensions.SerializeToArray<TestFixtureWithExistingEvents>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TestFixtureWithExistingEvents)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents)()
  name.vb: SerializeToArray(Of TestFixtureWithExistingEvents)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TestFixtureWithExistingEvents>
    nameWithType: ProtobufExtensions.SerializeToArray<TestFixtureWithExistingEvents>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TestFixtureWithExistingEvents)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TestFixtureWithExistingEvents)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  isExternal: false
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  isExternal: false
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException``1(Func{``0},``0)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException``1(Func{``0},``0)
  isExternal: true
  name: EatException<T>(Func<T>, T)
  nameWithType: TestFixtureWithReadWriteDispatchers.EatException<T>(Func<T>, T)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException<T>(Func<T>, T)
  nameWithType.vb: TestFixtureWithReadWriteDispatchers.EatException(Of T)(Func(Of T), T)
  fullName.vb: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException(Of T)(Func(Of T), T)
  name.vb: EatException(Of T)(Func(Of T), T)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException``1(Func{``0},``0)
    name: EatException<T>
    nameWithType: TestFixtureWithReadWriteDispatchers.EatException<T>
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException``1(Func{``0},``0)
    name: EatException(Of T)
    nameWithType: TestFixtureWithReadWriteDispatchers.EatException(Of T)
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Tests.Bus.Helpers.TestHandler{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  commentId: T:EventStore.Core.Tests.Bus.Helpers.TestHandler{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  parent: EventStore.Core.Tests.Bus.Helpers
  definition: EventStore.Core.Tests.Bus.Helpers.TestHandler`1
  name: TestHandler<ClientMessage.ReadStreamEventsBackward>
  nameWithType: TestHandler<ClientMessage.ReadStreamEventsBackward>
  fullName: EventStore.Core.Tests.Bus.Helpers.TestHandler<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>
  nameWithType.vb: TestHandler(Of ClientMessage.ReadStreamEventsBackward)
  fullName.vb: EventStore.Core.Tests.Bus.Helpers.TestHandler(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  name.vb: TestHandler(Of ClientMessage.ReadStreamEventsBackward)
  spec.csharp:
  - uid: EventStore.Core.Tests.Bus.Helpers.TestHandler`1
    name: TestHandler
    nameWithType: TestHandler
    fullName: EventStore.Core.Tests.Bus.Helpers.TestHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Tests.Bus.Helpers.TestHandler`1
    name: TestHandler
    nameWithType: TestHandler
    fullName: EventStore.Core.Tests.Bus.Helpers.TestHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Bus.Helpers.TestHandler`1
  commentId: T:EventStore.Core.Tests.Bus.Helpers.TestHandler`1
  isExternal: false
  name: TestHandler<T>
  nameWithType: TestHandler<T>
  fullName: EventStore.Core.Tests.Bus.Helpers.TestHandler<T>
  nameWithType.vb: TestHandler(Of T)
  fullName.vb: EventStore.Core.Tests.Bus.Helpers.TestHandler(Of T)
  name.vb: TestHandler(Of T)
  spec.csharp:
  - uid: EventStore.Core.Tests.Bus.Helpers.TestHandler`1
    name: TestHandler
    nameWithType: TestHandler
    fullName: EventStore.Core.Tests.Bus.Helpers.TestHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Tests.Bus.Helpers.TestHandler`1
    name: TestHandler
    nameWithType: TestHandler
    fullName: EventStore.Core.Tests.Bus.Helpers.TestHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Bus.Helpers
  commentId: N:EventStore.Core.Tests.Bus.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Bus.Helpers
  nameWithType: EventStore.Core.Tests.Bus.Helpers
  fullName: EventStore.Core.Tests.Bus.Helpers
- uid: Dictionary{System.String,List{EventStore.Core.Data.EventRecord}}
  commentId: '!:Dictionary{System.String,List{EventStore.Core.Data.EventRecord}}'
  definition: Dictionary`2
  name: Dictionary<String, List<EventRecord>>
  nameWithType: Dictionary<String, List<EventRecord>>
  fullName: Dictionary<System.String, List<EventStore.Core.Data.EventRecord>>
  nameWithType.vb: Dictionary(Of String, List(Of EventRecord))
  fullName.vb: Dictionary(Of System.String, List(Of EventStore.Core.Data.EventRecord))
  name.vb: Dictionary(Of String, List(Of EventRecord))
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Data.EventRecord
    name: EventRecord
    nameWithType: EventRecord
    fullName: EventStore.Core.Data.EventRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Data.EventRecord
    name: EventRecord
    nameWithType: EventRecord
    fullName: EventStore.Core.Data.EventRecord
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SortedList{EventStore.Core.Data.TFPos,EventStore.Core.Data.EventRecord}
  commentId: '!:SortedList{EventStore.Core.Data.TFPos,EventStore.Core.Data.EventRecord}'
  definition: SortedList`2
  name: SortedList<TFPos, EventRecord>
  nameWithType: SortedList<TFPos, EventRecord>
  fullName: SortedList<EventStore.Core.Data.TFPos, EventStore.Core.Data.EventRecord>
  nameWithType.vb: SortedList(Of TFPos, EventRecord)
  fullName.vb: SortedList(Of EventStore.Core.Data.TFPos, EventStore.Core.Data.EventRecord)
  name.vb: SortedList(Of TFPos, EventRecord)
  spec.csharp:
  - uid: SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: SortedList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Data.TFPos
    name: TFPos
    nameWithType: TFPos
    fullName: EventStore.Core.Data.TFPos
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.EventRecord
    name: EventRecord
    nameWithType: EventRecord
    fullName: EventStore.Core.Data.EventRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: SortedList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Data.TFPos
    name: TFPos
    nameWithType: TFPos
    fullName: EventStore.Core.Data.TFPos
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.EventRecord
    name: EventRecord
    nameWithType: EventRecord
    fullName: EventStore.Core.Data.EventRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: SortedList`2
  isExternal: true
  name: SortedList<, >
  nameWithType: SortedList<, >
  fullName: SortedList<, >
  nameWithType.vb: SortedList(Of , )
  fullName.vb: SortedList(Of , )
  name.vb: SortedList(Of , )
  spec.csharp:
  - uid: SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: SortedList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: SortedList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: HashSet{System.String}
  commentId: '!:HashSet{System.String}'
  definition: HashSet`1
  name: HashSet<String>
  nameWithType: HashSet<String>
  fullName: HashSet<System.String>
  nameWithType.vb: HashSet(Of String)
  fullName.vb: HashSet(Of System.String)
  name.vb: HashSet(Of String)
  spec.csharp:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: HashSet`1
  isExternal: true
  name: HashSet<>
  nameWithType: HashSet<>
  fullName: HashSet<>
  nameWithType.vb: HashSet(Of )
  fullName.vb: HashSet(Of )
  name.vb: HashSet(Of )
  spec.csharp:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary{System.Int64,EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Transaction}
  commentId: '!:Dictionary{System.Int64,EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Transaction}'
  definition: Dictionary`2
  name: Dictionary<Int64, TestFixtureWithExistingEvents.Transaction>
  nameWithType: Dictionary<Int64, TestFixtureWithExistingEvents.Transaction>
  fullName: Dictionary<System.Int64, EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Transaction>
  nameWithType.vb: Dictionary(Of Int64, TestFixtureWithExistingEvents.Transaction)
  fullName.vb: Dictionary(Of System.Int64, EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Transaction)
  name.vb: Dictionary(Of Int64, TestFixtureWithExistingEvents.Transaction)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Transaction
    name: TestFixtureWithExistingEvents.Transaction
    nameWithType: TestFixtureWithExistingEvents.Transaction
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Transaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Transaction
    name: TestFixtureWithExistingEvents.Transaction
    nameWithType: TestFixtureWithExistingEvents.Transaction
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Transaction
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingStreamMetadata*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingStreamMetadata
  isExternal: false
  name: ExistingStreamMetadata
  nameWithType: TestFixtureWithExistingEvents.ExistingStreamMetadata
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingStreamMetadata
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Data.TFPos
  commentId: T:EventStore.Core.Data.TFPos
  parent: EventStore.Core.Data
  isExternal: false
  name: TFPos
  nameWithType: TFPos
  fullName: EventStore.Core.Data.TFPos
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  isExternal: false
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingEvent*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingEvent
  isExternal: false
  name: ExistingEvent
  nameWithType: TestFixtureWithExistingEvents.ExistingEvent
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ExistingEvent
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllReadsTimeOut*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllReadsTimeOut
  isExternal: false
  name: AllReadsTimeOut
  nameWithType: TestFixtureWithExistingEvents.AllReadsTimeOut
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllReadsTimeOut
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.EnableReadAll*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.EnableReadAll
  isExternal: false
  name: EnableReadAll
  nameWithType: TestFixtureWithExistingEvents.EnableReadAll
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.EnableReadAll
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ReadsBackwardQueuesUp*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ReadsBackwardQueuesUp
  isExternal: false
  name: ReadsBackwardQueuesUp
  nameWithType: TestFixtureWithExistingEvents.ReadsBackwardQueuesUp
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.ReadsBackwardQueuesUp
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteOneReadBackwards*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteOneReadBackwards
  isExternal: false
  name: CompleteOneReadBackwards
  nameWithType: TestFixtureWithExistingEvents.CompleteOneReadBackwards
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteOneReadBackwards
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoStream*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoStream
  isExternal: false
  name: NoStream
  nameWithType: TestFixtureWithExistingEvents.NoStream
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoStream
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoOtherStreams*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoOtherStreams
  isExternal: false
  name: NoOtherStreams
  nameWithType: TestFixtureWithExistingEvents.NoOtherStreams
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.NoOtherStreams
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DeletedStream*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DeletedStream
  isExternal: false
  name: DeletedStream
  nameWithType: TestFixtureWithExistingEvents.DeletedStream
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DeletedStream
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesSucceed*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesSucceed
  isExternal: false
  name: AllWritesSucceed
  nameWithType: TestFixtureWithExistingEvents.AllWritesSucceed
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesSucceed
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesToSucceed*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesToSucceed
  isExternal: false
  name: AllWritesToSucceed
  nameWithType: TestFixtureWithExistingEvents.AllWritesToSucceed
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesToSucceed
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesQueueUp*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesQueueUp
  isExternal: false
  name: AllWritesQueueUp
  nameWithType: TestFixtureWithExistingEvents.AllWritesQueueUp
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWritesQueueUp
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.OneWriteCompletes*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.OneWriteCompletes
  isExternal: false
  name: OneWriteCompletes
  nameWithType: TestFixtureWithExistingEvents.OneWriteCompletes
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.OneWriteCompletes
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteWriteWithResult*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteWriteWithResult
  isExternal: false
  name: CompleteWriteWithResult
  nameWithType: TestFixtureWithExistingEvents.CompleteWriteWithResult
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.CompleteWriteWithResult
- uid: EventStore.Core.Messages.OperationResult
  commentId: T:EventStore.Core.Messages.OperationResult
  parent: EventStore.Core.Messages
  isExternal: false
  name: OperationResult
  nameWithType: OperationResult
  fullName: EventStore.Core.Messages.OperationResult
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  isExternal: false
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWriteComplete*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWriteComplete
  isExternal: false
  name: AllWriteComplete
  nameWithType: TestFixtureWithExistingEvents.AllWriteComplete
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AllWriteComplete
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.setup1*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.setup1
  isExternal: false
  name: setup1
  nameWithType: TestFixtureWithExistingEvents.setup1
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.setup1
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given1*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given1
  isExternal: false
  name: Given1
  nameWithType: TestFixtureWithExistingEvents.Given1
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given1
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given
  isExternal: false
  name: Given
  nameWithType: TestFixtureWithExistingEvents.Given
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Given
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle
  isExternal: false
  name: Handle
  nameWithType: TestFixtureWithExistingEvents.Handle
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.ReadStreamEventsBackward)
  nameWithType: IHandle<ClientMessage.ReadStreamEventsBackward>.Handle(ClientMessage.ReadStreamEventsBackward)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  nameWithType.vb: IHandle(Of ClientMessage.ReadStreamEventsBackward).Handle(ClientMessage.ReadStreamEventsBackward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward).Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.ReadStreamEventsBackward>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.ReadStreamEventsBackward).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.ReadStreamEventsBackward
  nameWithType: ClientMessage.ReadStreamEventsBackward
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  isExternal: false
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.ReadStreamEventsForward)
  nameWithType: IHandle<ClientMessage.ReadStreamEventsForward>.Handle(ClientMessage.ReadStreamEventsForward)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  nameWithType.vb: IHandle(Of ClientMessage.ReadStreamEventsForward).Handle(ClientMessage.ReadStreamEventsForward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward).Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.ReadStreamEventsForward>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.ReadStreamEventsForward).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.ReadStreamEventsForward
  nameWithType: ClientMessage.ReadStreamEventsForward
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.WriteEvents)
  nameWithType: IHandle<ClientMessage.WriteEvents>.Handle(ClientMessage.WriteEvents)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.WriteEvents>.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  nameWithType.vb: IHandle(Of ClientMessage.WriteEvents).Handle(ClientMessage.WriteEvents)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.WriteEvents).Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.WriteEvents>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.WriteEvents>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.WriteEvents).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.WriteEvents).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents
  commentId: T:EventStore.Core.Messages.ClientMessage.WriteEvents
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.WriteEvents
  nameWithType: ClientMessage.WriteEvents
  fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.DeleteStream)
  nameWithType: IHandle<ClientMessage.DeleteStream>.Handle(ClientMessage.DeleteStream)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.DeleteStream>.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  nameWithType.vb: IHandle(Of ClientMessage.DeleteStream).Handle(ClientMessage.DeleteStream)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.DeleteStream).Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.DeleteStream>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.DeleteStream>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStream
    name: ClientMessage.DeleteStream
    nameWithType: ClientMessage.DeleteStream
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.DeleteStream).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.DeleteStream).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStream
    name: ClientMessage.DeleteStream
    nameWithType: ClientMessage.DeleteStream
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.DeleteStream
  commentId: T:EventStore.Core.Messages.ClientMessage.DeleteStream
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.DeleteStream
  nameWithType: ClientMessage.DeleteStream
  fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.ReadAllEventsForward)
  nameWithType: IHandle<ClientMessage.ReadAllEventsForward>.Handle(ClientMessage.ReadAllEventsForward)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  nameWithType.vb: IHandle(Of ClientMessage.ReadAllEventsForward).Handle(ClientMessage.ReadAllEventsForward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsForward).Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.ReadAllEventsForward>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    name: ClientMessage.ReadAllEventsForward
    nameWithType: ClientMessage.ReadAllEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.ReadAllEventsForward).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsForward).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    name: ClientMessage.ReadAllEventsForward
    nameWithType: ClientMessage.ReadAllEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.ReadAllEventsForward
  nameWithType: ClientMessage.ReadAllEventsForward
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.TransactionStart)
  nameWithType: IHandle<ClientMessage.TransactionStart>.Handle(ClientMessage.TransactionStart)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionStart>.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  nameWithType.vb: IHandle(Of ClientMessage.TransactionStart).Handle(ClientMessage.TransactionStart)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionStart).Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.TransactionStart>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionStart>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TransactionStart
    name: ClientMessage.TransactionStart
    nameWithType: ClientMessage.TransactionStart
    fullName: EventStore.Core.Messages.ClientMessage.TransactionStart
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.TransactionStart).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionStart).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TransactionStart
    name: ClientMessage.TransactionStart
    nameWithType: ClientMessage.TransactionStart
    fullName: EventStore.Core.Messages.ClientMessage.TransactionStart
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.TransactionStart
  commentId: T:EventStore.Core.Messages.ClientMessage.TransactionStart
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.TransactionStart
  nameWithType: ClientMessage.TransactionStart
  fullName: EventStore.Core.Messages.ClientMessage.TransactionStart
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.TransactionWrite)
  nameWithType: IHandle<ClientMessage.TransactionWrite>.Handle(ClientMessage.TransactionWrite)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionWrite>.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  nameWithType.vb: IHandle(Of ClientMessage.TransactionWrite).Handle(ClientMessage.TransactionWrite)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionWrite).Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.TransactionWrite>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionWrite>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TransactionWrite
    name: ClientMessage.TransactionWrite
    nameWithType: ClientMessage.TransactionWrite
    fullName: EventStore.Core.Messages.ClientMessage.TransactionWrite
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.TransactionWrite).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionWrite).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TransactionWrite
    name: ClientMessage.TransactionWrite
    nameWithType: ClientMessage.TransactionWrite
    fullName: EventStore.Core.Messages.ClientMessage.TransactionWrite
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.TransactionWrite
  commentId: T:EventStore.Core.Messages.ClientMessage.TransactionWrite
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.TransactionWrite
  nameWithType: ClientMessage.TransactionWrite
  fullName: EventStore.Core.Messages.ClientMessage.TransactionWrite
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionCommit}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.TransactionCommit)
  nameWithType: IHandle<ClientMessage.TransactionCommit>.Handle(ClientMessage.TransactionCommit)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionCommit>.Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  nameWithType.vb: IHandle(Of ClientMessage.TransactionCommit).Handle(ClientMessage.TransactionCommit)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionCommit).Handle(EventStore.Core.Messages.ClientMessage.TransactionCommit)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.TransactionCommit>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionCommit>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TransactionCommit
    name: ClientMessage.TransactionCommit
    nameWithType: ClientMessage.TransactionCommit
    fullName: EventStore.Core.Messages.ClientMessage.TransactionCommit
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.TransactionCommit).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionCommit).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TransactionCommit
    name: ClientMessage.TransactionCommit
    nameWithType: ClientMessage.TransactionCommit
    fullName: EventStore.Core.Messages.ClientMessage.TransactionCommit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.TransactionCommit
  commentId: T:EventStore.Core.Messages.ClientMessage.TransactionCommit
  parent: EventStore.Core.Messages
  isExternal: false
  name: ClientMessage.TransactionCommit
  nameWithType: ClientMessage.TransactionCommit
  fullName: EventStore.Core.Messages.ClientMessage.TransactionCommit
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.GetTfPos*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.GetTfPos
  isExternal: false
  name: GetTfPos
  nameWithType: TestFixtureWithExistingEvents.GetTfPos
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.GetTfPos
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEvent*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEvent
  isExternal: false
  name: AssertLastEvent
  nameWithType: TestFixtureWithExistingEvents.AssertLastEvent
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEvent
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventJson*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventJson
  isExternal: false
  name: AssertLastEventJson
  nameWithType: TestFixtureWithExistingEvents.AssertLastEventJson
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventJson
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventIs*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventIs
  isExternal: false
  name: AssertLastEventIs
  nameWithType: TestFixtureWithExistingEvents.AssertLastEventIs
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertLastEventIs
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTail*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTail
  isExternal: false
  name: AssertStreamTail
  nameWithType: TestFixtureWithExistingEvents.AssertStreamTail
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTail
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTailWithLinks*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTailWithLinks
  isExternal: false
  name: AssertStreamTailWithLinks
  nameWithType: TestFixtureWithExistingEvents.AssertStreamTailWithLinks
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamTailWithLinks
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamContains*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamContains
  isExternal: false
  name: AssertStreamContains
  nameWithType: TestFixtureWithExistingEvents.AssertStreamContains
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertStreamContains
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEvent*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEvent
  isExternal: false
  name: AssertEvent
  nameWithType: TestFixtureWithExistingEvents.AssertEvent
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEvent
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyStream*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyStream
  isExternal: false
  name: AssertEmptyStream
  nameWithType: TestFixtureWithExistingEvents.AssertEmptyStream
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyStream
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyOrNoStream*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyOrNoStream
  isExternal: false
  name: AssertEmptyOrNoStream
  nameWithType: TestFixtureWithExistingEvents.AssertEmptyOrNoStream
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.AssertEmptyOrNoStream
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DumpStream*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DumpStream
  isExternal: false
  name: DumpStream
  nameWithType: TestFixtureWithExistingEvents.DumpStream
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents.DumpStream

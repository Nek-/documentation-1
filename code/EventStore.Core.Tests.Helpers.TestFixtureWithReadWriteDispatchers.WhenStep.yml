### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  commentId: T:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  id: TestFixtureWithReadWriteDispatchers.WhenStep
  parent: EventStore.Core.Tests.Helpers
  children:
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.#ctor(Action)
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.#ctor(EventStore.Core.Messaging.Message[])
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Action
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.GetEnumerator
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Message
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Messages
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.op_Implicit(EventStore.Core.Messaging.Message)~EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  langs:
  - csharp
  - vb
  name: TestFixtureWithReadWriteDispatchers.WhenStep
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  type: Class
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: WhenStep
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 155
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: 'public sealed class WhenStep : IEnumerable<Message>'
    content.vb: >-
      Public NotInheritable Class WhenStep

          Inherits IEnumerable(Of Message)
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Action
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Action
  id: Action
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  langs:
  - csharp
  - vb
  name: Action
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep.Action
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Action
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Action
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 157
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public readonly Action Action
    return:
      type: Action
    content.vb: Public ReadOnly Action As Action
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Message
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Message
  id: Message
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  langs:
  - csharp
  - vb
  name: Message
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep.Message
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Message
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Message
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 158
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public readonly Message Message
    return:
      type: EventStore.Core.Messaging.Message
    content.vb: Public ReadOnly Message As Message
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Messages
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Messages
  id: Messages
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  langs:
  - csharp
  - vb
  name: Messages
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep.Messages
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Messages
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Messages
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 159
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public readonly IEnumerable<Message> Messages
    return:
      type: IEnumerable{EventStore.Core.Messaging.Message}
    content.vb: Public ReadOnly Messages As IEnumerable(Of Message)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.#ctor(EventStore.Core.Messaging.Message[])
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.#ctor(EventStore.Core.Messaging.Message[])
  id: '#ctor(EventStore.Core.Messaging.Message[])'
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  langs:
  - csharp
  - vb
  name: WhenStep(Message[])
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep.WhenStep(Message[])
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.WhenStep(EventStore.Core.Messaging.Message[])
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 171
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public WhenStep(params Message[] messages)
    parameters:
    - id: messages
      type: EventStore.Core.Messaging.Message[]
    content.vb: Public Sub New(ParamArray messages As Message())
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.#ctor*
  nameWithType.vb: TestFixtureWithReadWriteDispatchers.WhenStep.WhenStep(Message())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.WhenStep(EventStore.Core.Messaging.Message())
  name.vb: WhenStep(Message())
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.#ctor(Action)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.#ctor(Action)
  id: '#ctor(Action)'
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  langs:
  - csharp
  - vb
  name: WhenStep(Action)
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep.WhenStep(Action)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.WhenStep(Action)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 176
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public WhenStep(Action action)
    parameters:
    - id: action
      type: Action
    content.vb: Public Sub New(action As Action)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.op_Implicit(EventStore.Core.Messaging.Message)~EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.op_Implicit(EventStore.Core.Messaging.Message)~EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  id: op_Implicit(EventStore.Core.Messaging.Message)~EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  langs:
  - csharp
  - vb
  name: Implicit(Message to TestFixtureWithReadWriteDispatchers.WhenStep)
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep.Implicit(Message to TestFixtureWithReadWriteDispatchers.WhenStep)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Implicit(EventStore.Core.Messaging.Message to EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep)
  type: Operator
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: op_Implicit
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 185
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static implicit operator TestFixtureWithReadWriteDispatchers.WhenStep(Message message)
    parameters:
    - id: message
      type: EventStore.Core.Messaging.Message
    return:
      type: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
    content.vb: Public Shared Widening Operator CType(message As Message) As TestFixtureWithReadWriteDispatchers.WhenStep
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.op_Implicit*
  nameWithType.vb: TestFixtureWithReadWriteDispatchers.WhenStep.Widening(Message to TestFixtureWithReadWriteDispatchers.WhenStep)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Widening(EventStore.Core.Messaging.Message to EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep)
  name.vb: Widening(Message to TestFixtureWithReadWriteDispatchers.WhenStep)
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.GetEnumerator
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.GetEnumerator
  id: GetEnumerator
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep.GetEnumerator()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetEnumerator
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 190
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public IEnumerator<Message> GetEnumerator()
    return:
      type: IEnumerator{EventStore.Core.Messaging.Message}
    content.vb: Public Function GetEnumerator As IEnumerator(Of Message)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TestFixtureWithReadWriteDispatchers.WhenStep>()
  nameWithType: ProtobufExtensions.Serialize<TestFixtureWithReadWriteDispatchers.WhenStep>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TestFixtureWithReadWriteDispatchers.WhenStep)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep)()
  name.vb: Serialize(Of TestFixtureWithReadWriteDispatchers.WhenStep)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TestFixtureWithReadWriteDispatchers.WhenStep>
    nameWithType: ProtobufExtensions.Serialize<TestFixtureWithReadWriteDispatchers.WhenStep>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TestFixtureWithReadWriteDispatchers.WhenStep)
    nameWithType: ProtobufExtensions.Serialize(Of TestFixtureWithReadWriteDispatchers.WhenStep)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TestFixtureWithReadWriteDispatchers.WhenStep>()
  nameWithType: ProtobufExtensions.SerializeToArray<TestFixtureWithReadWriteDispatchers.WhenStep>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TestFixtureWithReadWriteDispatchers.WhenStep)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep)()
  name.vb: SerializeToArray(Of TestFixtureWithReadWriteDispatchers.WhenStep)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TestFixtureWithReadWriteDispatchers.WhenStep>
    nameWithType: ProtobufExtensions.SerializeToArray<TestFixtureWithReadWriteDispatchers.WhenStep>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TestFixtureWithReadWriteDispatchers.WhenStep)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TestFixtureWithReadWriteDispatchers.WhenStep)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: Action
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: Action
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  isExternal: false
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: IEnumerable{EventStore.Core.Messaging.Message}
  commentId: '!:IEnumerable{EventStore.Core.Messaging.Message}'
  definition: IEnumerable`1
  name: IEnumerable<Message>
  nameWithType: IEnumerable<Message>
  fullName: IEnumerable<EventStore.Core.Messaging.Message>
  nameWithType.vb: IEnumerable(Of Message)
  fullName.vb: IEnumerable(Of EventStore.Core.Messaging.Message)
  name.vb: IEnumerable(Of Message)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.#ctor*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.#ctor
  isExternal: false
  name: WhenStep
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep.WhenStep
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.WhenStep
- uid: EventStore.Core.Messaging.Message[]
  name: Message[]
  nameWithType: Message[]
  fullName: EventStore.Core.Messaging.Message[]
  nameWithType.vb: Message()
  fullName.vb: EventStore.Core.Messaging.Message()
  name.vb: Message()
  spec.csharp:
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.op_Implicit*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.op_Implicit
  isExternal: false
  name: Implicit
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep.Implicit
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Implicit
  nameWithType.vb: TestFixtureWithReadWriteDispatchers.WhenStep.Widening
  fullName.vb: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.Widening
  name.vb: Widening
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  commentId: T:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: TestFixtureWithReadWriteDispatchers.WhenStep
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.GetEnumerator*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep.GetEnumerator
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep.GetEnumerator
- uid: IEnumerator{EventStore.Core.Messaging.Message}
  commentId: '!:IEnumerator{EventStore.Core.Messaging.Message}'
  definition: IEnumerator`1
  name: IEnumerator<Message>
  nameWithType: IEnumerator<Message>
  fullName: IEnumerator<EventStore.Core.Messaging.Message>
  nameWithType.vb: IEnumerator(Of Message)
  fullName.vb: IEnumerator(Of EventStore.Core.Messaging.Message)
  name.vb: IEnumerator(Of Message)
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  commentId: T:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  id: TestFixtureWithReadWriteDispatchers
  parent: EventStore.Core.Tests.Helpers
  children:
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._bus
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._consumer
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._ioDispatcher
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._otherQueues
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._queue
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._readDispatcher
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._streamDispatcher
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._timeProvider
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._writeDispatcher
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException``1(Func{``0},``0)
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Envelope
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.HandledMessages
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep})
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Yield
  langs:
  - csharp
  - vb
  name: TestFixtureWithReadWriteDispatchers
  nameWithType: TestFixtureWithReadWriteDispatchers
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  type: Class
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TestFixtureWithReadWriteDispatchers
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 15
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: 'public abstract class TestFixtureWithReadWriteDispatchers : object'
    content.vb: >-
      Public MustInherit Class TestFixtureWithReadWriteDispatchers

          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.Core.Tests.Helpers.TestFixtureWithExistingEvents
  - EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureWithReadWriteDispatchers
  - EventStore.Projections.Core.Tests.Services.event_reader.heading_event_reader.when_heading_event_reader_has_been_created
  - EventStore.Projections.Core.Tests.Services.event_reader.heading_event_reader.when_starting_a_heading_event_reader
  - EventStore.Projections.Core.Tests.Services.event_reader.heading_event_reader.when_the_heading_event_reader_handles_an_event
  - EventStore.Projections.Core.Tests.Services.event_reader.heading_event_reader.when_the_heading_event_reader_subscribes_a_projection
  - EventStore.Projections.Core.Tests.Services.event_reader.heading_event_reader.when_the_heading_event_reader_unsubscribes_a_projection
  - EventStore.Projections.Core.Tests.Services.event_reader.heading_event_reader.when_the_heading_event_reader_with_a_subscribed_projection_handles_a_cached_event_and_throws
  - EventStore.Projections.Core.Tests.Services.event_reader.heading_event_reader.when_the_heading_event_reader_with_a_subscribed_projection_handles_a_live_event_and_throws
  - EventStore.Projections.Core.Tests.Services.event_reader.heading_event_reader.when_the_heading_event_reader_with_a_subscribed_projection_handles_an_event
  - EventStore.Projections.Core.Tests.Services.event_reader.heading_event_reader.when_the_heading_event_reader_with_a_subscribed_projection_handles_an_idle_notification
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._bus
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._bus
  id: _bus
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: _bus
  nameWithType: TestFixtureWithReadWriteDispatchers._bus
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._bus
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _bus
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 17
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected InMemoryBus _bus
    return:
      type: EventStore.Core.Bus.InMemoryBus
    content.vb: Protected _bus As InMemoryBus
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._streamDispatcher
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._streamDispatcher
  id: _streamDispatcher
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: _streamDispatcher
  nameWithType: TestFixtureWithReadWriteDispatchers._streamDispatcher
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._streamDispatcher
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _streamDispatcher
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 20
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected RequestResponseDispatcher<ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted> _streamDispatcher
    return:
      type: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.DeleteStream,EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted}
    content.vb: Protected _streamDispatcher As RequestResponseDispatcher(Of ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._writeDispatcher
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._writeDispatcher
  id: _writeDispatcher
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: _writeDispatcher
  nameWithType: TestFixtureWithReadWriteDispatchers._writeDispatcher
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._writeDispatcher
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _writeDispatcher
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 23
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected RequestResponseDispatcher<ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted> _writeDispatcher
    return:
      type: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.WriteEvents,EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
    content.vb: Protected _writeDispatcher As RequestResponseDispatcher(Of ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._readDispatcher
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._readDispatcher
  id: _readDispatcher
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: _readDispatcher
  nameWithType: TestFixtureWithReadWriteDispatchers._readDispatcher
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._readDispatcher
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _readDispatcher
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 28
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected RequestResponseDispatcher<ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted> _readDispatcher
    return:
      type: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward,EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted}
    content.vb: Protected _readDispatcher As RequestResponseDispatcher(Of ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._consumer
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._consumer
  id: _consumer
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: _consumer
  nameWithType: TestFixtureWithReadWriteDispatchers._consumer
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._consumer
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _consumer
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 30
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected TestHandler<Message> _consumer
    return:
      type: EventStore.Core.Tests.Bus.Helpers.TestHandler{EventStore.Core.Messaging.Message}
    content.vb: Protected _consumer As TestHandler(Of Message)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._ioDispatcher
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._ioDispatcher
  id: _ioDispatcher
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: _ioDispatcher
  nameWithType: TestFixtureWithReadWriteDispatchers._ioDispatcher
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._ioDispatcher
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _ioDispatcher
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 31
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected IODispatcher _ioDispatcher
    return:
      type: EventStore.Core.Helpers.IODispatcher
    content.vb: Protected _ioDispatcher As IODispatcher
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._queue
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._queue
  id: _queue
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: _queue
  nameWithType: TestFixtureWithReadWriteDispatchers._queue
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._queue
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _queue
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 32
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected ManualQueue _queue
    return:
      type: EventStore.Core.Tests.Helpers.ManualQueue
    content.vb: Protected _queue As ManualQueue
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._otherQueues
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._otherQueues
  id: _otherQueues
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: _otherQueues
  nameWithType: TestFixtureWithReadWriteDispatchers._otherQueues
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._otherQueues
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _otherQueues
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 33
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected ManualQueue[] _otherQueues
    return:
      type: EventStore.Core.Tests.Helpers.ManualQueue[]
    content.vb: Protected _otherQueues As ManualQueue()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._timeProvider
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._timeProvider
  id: _timeProvider
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: _timeProvider
  nameWithType: TestFixtureWithReadWriteDispatchers._timeProvider
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers._timeProvider
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _timeProvider
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 34
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected FakeTimeProvider _timeProvider
    return:
      type: EventStore.Core.Tests.Services.TimeService.FakeTimeProvider
    content.vb: Protected _timeProvider As FakeTimeProvider
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Envelope
  commentId: P:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Envelope
  id: Envelope
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: Envelope
  nameWithType: TestFixtureWithReadWriteDispatchers.Envelope
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Envelope
  type: Property
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Envelope
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 37
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected IEnvelope Envelope { get; }
    parameters: []
    return:
      type: EventStore.Core.Messaging.IEnvelope
    content.vb: Protected ReadOnly Property Envelope As IEnvelope
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Envelope*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.HandledMessages
  commentId: P:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.HandledMessages
  id: HandledMessages
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: HandledMessages
  nameWithType: TestFixtureWithReadWriteDispatchers.HandledMessages
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.HandledMessages
  type: Property
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: HandledMessages
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 47
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected List<Message> HandledMessages { get; }
    parameters: []
    return:
      type: List{EventStore.Core.Messaging.Message}
    content.vb: Protected ReadOnly Property HandledMessages As List(Of Message)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.HandledMessages*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0
  id: setup0
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: setup0()
  nameWithType: TestFixtureWithReadWriteDispatchers.setup0()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: setup0
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 51
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public void setup0()
    content.vb: Public Sub setup0
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue
  id: GiveInputQueue
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: GiveInputQueue()
  nameWithType: TestFixtureWithReadWriteDispatchers.GiveInputQueue()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GiveInputQueue
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 76
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected virtual ManualQueue GiveInputQueue()
    return:
      type: EventStore.Core.Tests.Helpers.ManualQueue
    content.vb: Protected Overridable Function GiveInputQueue As ManualQueue
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue
  id: GetInputQueue
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: GetInputQueue()
  nameWithType: TestFixtureWithReadWriteDispatchers.GetInputQueue()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetInputQueue
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 81
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected IPublisher GetInputQueue()
    return:
      type: EventStore.Core.Bus.IPublisher
    content.vb: Protected Function GetInputQueue As IPublisher
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer
  id: DisableTimer
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: DisableTimer()
  nameWithType: TestFixtureWithReadWriteDispatchers.DisableTimer()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: DisableTimer
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 86
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void DisableTimer()
    content.vb: Protected Sub DisableTimer
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer
  id: EnableTimer
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: EnableTimer()
  nameWithType: TestFixtureWithReadWriteDispatchers.EnableTimer()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EnableTimer
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 91
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void EnableTimer()
    content.vb: Protected Sub EnableTimer
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
  id: WhenLoop
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: WhenLoop()
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenLoop()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: WhenLoop
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 96
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void WhenLoop()
    content.vb: Protected Sub WhenLoop
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep})
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep})
  id: WhenLoop(IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep})
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: WhenLoop(IEnumerable<TestFixtureWithReadWriteDispatchers.WhenStep>)
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable<TestFixtureWithReadWriteDispatchers.WhenStep>)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable<EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: WhenLoop
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 103
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected void WhenLoop(IEnumerable<TestFixtureWithReadWriteDispatchers.WhenStep> steps)
    parameters:
    - id: steps
      type: IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep}
    content.vb: Protected Sub WhenLoop(steps As IEnumerable(Of TestFixtureWithReadWriteDispatchers.WhenStep))
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop*
  nameWithType.vb: TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable(Of TestFixtureWithReadWriteDispatchers.WhenStep))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop(IEnumerable(Of EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep))
  name.vb: WhenLoop(IEnumerable(Of TestFixtureWithReadWriteDispatchers.WhenStep))
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException``1(Func{``0},``0)
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException``1(Func{``0},``0)
  id: EatException``1(Func{``0},``0)
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: EatException<T>(Func<T>, T)
  nameWithType: TestFixtureWithReadWriteDispatchers.EatException<T>(Func<T>, T)
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException<T>(Func<T>, T)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EatException
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 143
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public static T EatException<T>(Func<T> func, T defaultValue = null)
    parameters:
    - id: func
      type: Func{{T}}
    - id: defaultValue
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function EatException(Of T)(func As Func(Of T), defaultValue As T = Nothing) As T
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException*
  nameWithType.vb: TestFixtureWithReadWriteDispatchers.EatException(Of T)(Func(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException(Of T)(Func(Of T), T)
  name.vb: EatException(Of T)(Func(Of T), T)
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen
  id: PreWhen
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: PreWhen()
  nameWithType: TestFixtureWithReadWriteDispatchers.PreWhen()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: PreWhen
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 211
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected virtual IEnumerable<TestFixtureWithReadWriteDispatchers.WhenStep> PreWhen()
    return:
      type: IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep}
    content.vb: Protected Overridable Function PreWhen As IEnumerable(Of TestFixtureWithReadWriteDispatchers.WhenStep)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When
  commentId: M:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When
  id: When
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: When()
  nameWithType: TestFixtureWithReadWriteDispatchers.When()
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: When
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 216
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: protected virtual IEnumerable<TestFixtureWithReadWriteDispatchers.WhenStep> When()
    return:
      type: IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep}
    content.vb: Protected Overridable Function When As IEnumerable(Of TestFixtureWithReadWriteDispatchers.WhenStep)
  overload: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Yield
  commentId: F:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Yield
  id: Yield
  parent: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers
  langs:
  - csharp
  - vb
  name: Yield
  nameWithType: TestFixtureWithReadWriteDispatchers.Yield
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Yield
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Yield
    path: ../EventStore/src/EventStore.Core.Tests/Helpers/TestFixtureWithReadWriteDispatchers.cs
    startLine: 221
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Helpers
  syntax:
    content: public readonly TestFixtureWithReadWriteDispatchers.WhenStep Yield
    return:
      type: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
    content.vb: Public ReadOnly Yield As TestFixtureWithReadWriteDispatchers.WhenStep
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TestFixtureWithReadWriteDispatchers>()
  nameWithType: ProtobufExtensions.Serialize<TestFixtureWithReadWriteDispatchers>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TestFixtureWithReadWriteDispatchers)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers)()
  name.vb: Serialize(Of TestFixtureWithReadWriteDispatchers)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TestFixtureWithReadWriteDispatchers>
    nameWithType: ProtobufExtensions.Serialize<TestFixtureWithReadWriteDispatchers>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TestFixtureWithReadWriteDispatchers)
    nameWithType: ProtobufExtensions.Serialize(Of TestFixtureWithReadWriteDispatchers)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TestFixtureWithReadWriteDispatchers>()
  nameWithType: ProtobufExtensions.SerializeToArray<TestFixtureWithReadWriteDispatchers>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TestFixtureWithReadWriteDispatchers)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers)()
  name.vb: SerializeToArray(Of TestFixtureWithReadWriteDispatchers)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TestFixtureWithReadWriteDispatchers>
    nameWithType: ProtobufExtensions.SerializeToArray<TestFixtureWithReadWriteDispatchers>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TestFixtureWithReadWriteDispatchers)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TestFixtureWithReadWriteDispatchers)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Bus.InMemoryBus
  commentId: T:EventStore.Core.Bus.InMemoryBus
  parent: EventStore.Core.Bus
  isExternal: false
  name: InMemoryBus
  nameWithType: InMemoryBus
  fullName: EventStore.Core.Bus.InMemoryBus
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  isExternal: false
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.DeleteStream,EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted}
  commentId: T:EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.DeleteStream,EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted}
  parent: EventStore.Core.Messaging
  definition: EventStore.Core.Messaging.RequestResponseDispatcher`2
  name: RequestResponseDispatcher<ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted>
  nameWithType: RequestResponseDispatcher<ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted>
  fullName: EventStore.Core.Messaging.RequestResponseDispatcher<EventStore.Core.Messages.ClientMessage.DeleteStream, EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted>
  nameWithType.vb: RequestResponseDispatcher(Of ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted)
  fullName.vb: EventStore.Core.Messaging.RequestResponseDispatcher(Of EventStore.Core.Messages.ClientMessage.DeleteStream, EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted)
  name.vb: RequestResponseDispatcher(Of ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted)
  spec.csharp:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStream
    name: ClientMessage.DeleteStream
    nameWithType: ClientMessage.DeleteStream
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
    name: ClientMessage.DeleteStreamCompleted
    nameWithType: ClientMessage.DeleteStreamCompleted
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStream
    name: ClientMessage.DeleteStream
    nameWithType: ClientMessage.DeleteStream
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
    name: ClientMessage.DeleteStreamCompleted
    nameWithType: ClientMessage.DeleteStreamCompleted
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
  commentId: T:EventStore.Core.Messaging.RequestResponseDispatcher`2
  isExternal: false
  name: RequestResponseDispatcher<TRequest, TResponse>
  nameWithType: RequestResponseDispatcher<TRequest, TResponse>
  fullName: EventStore.Core.Messaging.RequestResponseDispatcher<TRequest, TResponse>
  nameWithType.vb: RequestResponseDispatcher(Of TRequest, TResponse)
  fullName.vb: EventStore.Core.Messaging.RequestResponseDispatcher(Of TRequest, TResponse)
  name.vb: RequestResponseDispatcher(Of TRequest, TResponse)
  spec.csharp:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  isExternal: false
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.WriteEvents,EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
  commentId: T:EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.WriteEvents,EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
  parent: EventStore.Core.Messaging
  definition: EventStore.Core.Messaging.RequestResponseDispatcher`2
  name: RequestResponseDispatcher<ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted>
  nameWithType: RequestResponseDispatcher<ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted>
  fullName: EventStore.Core.Messaging.RequestResponseDispatcher<EventStore.Core.Messages.ClientMessage.WriteEvents, EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>
  nameWithType.vb: RequestResponseDispatcher(Of ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted)
  fullName.vb: EventStore.Core.Messaging.RequestResponseDispatcher(Of EventStore.Core.Messages.ClientMessage.WriteEvents, EventStore.Core.Messages.ClientMessage.WriteEventsCompleted)
  name.vb: RequestResponseDispatcher(Of ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted)
  spec.csharp:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward,EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted}
  commentId: T:EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward,EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted}
  parent: EventStore.Core.Messaging
  definition: EventStore.Core.Messaging.RequestResponseDispatcher`2
  name: RequestResponseDispatcher<ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted>
  nameWithType: RequestResponseDispatcher<ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted>
  fullName: EventStore.Core.Messaging.RequestResponseDispatcher<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward, EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted>
  nameWithType.vb: RequestResponseDispatcher(Of ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted)
  fullName.vb: EventStore.Core.Messaging.RequestResponseDispatcher(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward, EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted)
  name.vb: RequestResponseDispatcher(Of ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted)
  spec.csharp:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
    name: ClientMessage.ReadStreamEventsBackwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
    name: ClientMessage.ReadStreamEventsBackwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Bus.Helpers.TestHandler{EventStore.Core.Messaging.Message}
  commentId: T:EventStore.Core.Tests.Bus.Helpers.TestHandler{EventStore.Core.Messaging.Message}
  parent: EventStore.Core.Tests.Bus.Helpers
  definition: EventStore.Core.Tests.Bus.Helpers.TestHandler`1
  name: TestHandler<Message>
  nameWithType: TestHandler<Message>
  fullName: EventStore.Core.Tests.Bus.Helpers.TestHandler<EventStore.Core.Messaging.Message>
  nameWithType.vb: TestHandler(Of Message)
  fullName.vb: EventStore.Core.Tests.Bus.Helpers.TestHandler(Of EventStore.Core.Messaging.Message)
  name.vb: TestHandler(Of Message)
  spec.csharp:
  - uid: EventStore.Core.Tests.Bus.Helpers.TestHandler`1
    name: TestHandler
    nameWithType: TestHandler
    fullName: EventStore.Core.Tests.Bus.Helpers.TestHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Tests.Bus.Helpers.TestHandler`1
    name: TestHandler
    nameWithType: TestHandler
    fullName: EventStore.Core.Tests.Bus.Helpers.TestHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Bus.Helpers.TestHandler`1
  commentId: T:EventStore.Core.Tests.Bus.Helpers.TestHandler`1
  isExternal: false
  name: TestHandler<T>
  nameWithType: TestHandler<T>
  fullName: EventStore.Core.Tests.Bus.Helpers.TestHandler<T>
  nameWithType.vb: TestHandler(Of T)
  fullName.vb: EventStore.Core.Tests.Bus.Helpers.TestHandler(Of T)
  name.vb: TestHandler(Of T)
  spec.csharp:
  - uid: EventStore.Core.Tests.Bus.Helpers.TestHandler`1
    name: TestHandler
    nameWithType: TestHandler
    fullName: EventStore.Core.Tests.Bus.Helpers.TestHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Tests.Bus.Helpers.TestHandler`1
    name: TestHandler
    nameWithType: TestHandler
    fullName: EventStore.Core.Tests.Bus.Helpers.TestHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Bus.Helpers
  commentId: N:EventStore.Core.Tests.Bus.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Bus.Helpers
  nameWithType: EventStore.Core.Tests.Bus.Helpers
  fullName: EventStore.Core.Tests.Bus.Helpers
- uid: EventStore.Core.Helpers.IODispatcher
  commentId: T:EventStore.Core.Helpers.IODispatcher
  parent: EventStore.Core.Helpers
  isExternal: false
  name: IODispatcher
  nameWithType: IODispatcher
  fullName: EventStore.Core.Helpers.IODispatcher
- uid: EventStore.Core.Helpers
  commentId: N:EventStore.Core.Helpers
  isExternal: false
  name: EventStore.Core.Helpers
  nameWithType: EventStore.Core.Helpers
  fullName: EventStore.Core.Helpers
- uid: EventStore.Core.Tests.Helpers.ManualQueue
  commentId: T:EventStore.Core.Tests.Helpers.ManualQueue
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: ManualQueue
  nameWithType: ManualQueue
  fullName: EventStore.Core.Tests.Helpers.ManualQueue
- uid: EventStore.Core.Tests.Helpers.ManualQueue[]
  name: ManualQueue[]
  nameWithType: ManualQueue[]
  fullName: EventStore.Core.Tests.Helpers.ManualQueue[]
  nameWithType.vb: ManualQueue()
  fullName.vb: EventStore.Core.Tests.Helpers.ManualQueue()
  name.vb: ManualQueue()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.ManualQueue
    name: ManualQueue
    nameWithType: ManualQueue
    fullName: EventStore.Core.Tests.Helpers.ManualQueue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.ManualQueue
    name: ManualQueue
    nameWithType: ManualQueue
    fullName: EventStore.Core.Tests.Helpers.ManualQueue
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Tests.Services.TimeService.FakeTimeProvider
  commentId: T:EventStore.Core.Tests.Services.TimeService.FakeTimeProvider
  parent: EventStore.Core.Tests.Services.TimeService
  isExternal: false
  name: FakeTimeProvider
  nameWithType: FakeTimeProvider
  fullName: EventStore.Core.Tests.Services.TimeService.FakeTimeProvider
- uid: EventStore.Core.Tests.Services.TimeService
  commentId: N:EventStore.Core.Tests.Services.TimeService
  isExternal: false
  name: EventStore.Core.Tests.Services.TimeService
  nameWithType: EventStore.Core.Tests.Services.TimeService
  fullName: EventStore.Core.Tests.Services.TimeService
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Envelope*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Envelope
  isExternal: false
  name: Envelope
  nameWithType: TestFixtureWithReadWriteDispatchers.Envelope
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.Envelope
- uid: EventStore.Core.Messaging.IEnvelope
  commentId: T:EventStore.Core.Messaging.IEnvelope
  parent: EventStore.Core.Messaging
  isExternal: false
  name: IEnvelope
  nameWithType: IEnvelope
  fullName: EventStore.Core.Messaging.IEnvelope
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.HandledMessages*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.HandledMessages
  isExternal: false
  name: HandledMessages
  nameWithType: TestFixtureWithReadWriteDispatchers.HandledMessages
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.HandledMessages
- uid: List{EventStore.Core.Messaging.Message}
  commentId: '!:List{EventStore.Core.Messaging.Message}'
  definition: List`1
  name: List<Message>
  nameWithType: List<Message>
  fullName: List<EventStore.Core.Messaging.Message>
  nameWithType.vb: List(Of Message)
  fullName.vb: List(Of EventStore.Core.Messaging.Message)
  name.vb: List(Of Message)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0
  isExternal: false
  name: setup0
  nameWithType: TestFixtureWithReadWriteDispatchers.setup0
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.setup0
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue
  isExternal: false
  name: GiveInputQueue
  nameWithType: TestFixtureWithReadWriteDispatchers.GiveInputQueue
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GiveInputQueue
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue
  isExternal: false
  name: GetInputQueue
  nameWithType: TestFixtureWithReadWriteDispatchers.GetInputQueue
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.GetInputQueue
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  isExternal: false
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer
  isExternal: false
  name: DisableTimer
  nameWithType: TestFixtureWithReadWriteDispatchers.DisableTimer
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.DisableTimer
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer
  isExternal: false
  name: EnableTimer
  nameWithType: TestFixtureWithReadWriteDispatchers.EnableTimer
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EnableTimer
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
  isExternal: false
  name: WhenLoop
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenLoop
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenLoop
- uid: IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep}
  commentId: '!:IEnumerable{EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep}'
  definition: IEnumerable`1
  name: IEnumerable<TestFixtureWithReadWriteDispatchers.WhenStep>
  nameWithType: IEnumerable<TestFixtureWithReadWriteDispatchers.WhenStep>
  fullName: IEnumerable<EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep>
  nameWithType.vb: IEnumerable(Of TestFixtureWithReadWriteDispatchers.WhenStep)
  fullName.vb: IEnumerable(Of EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep)
  name.vb: IEnumerable(Of TestFixtureWithReadWriteDispatchers.WhenStep)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
    name: TestFixtureWithReadWriteDispatchers.WhenStep
    nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
    name: TestFixtureWithReadWriteDispatchers.WhenStep
    nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep
    fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException
  isExternal: false
  name: EatException
  nameWithType: TestFixtureWithReadWriteDispatchers.EatException
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.EatException
- uid: Func{{T}}
  commentId: '!:Func{``0}'
  definition: Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: Func<T>
  nameWithType.vb: Func(Of T)
  fullName.vb: Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen
  isExternal: false
  name: PreWhen
  nameWithType: TestFixtureWithReadWriteDispatchers.PreWhen
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.PreWhen
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When*
  commentId: Overload:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When
  isExternal: false
  name: When
  nameWithType: TestFixtureWithReadWriteDispatchers.When
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.When
- uid: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  commentId: T:EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: TestFixtureWithReadWriteDispatchers.WhenStep
  nameWithType: TestFixtureWithReadWriteDispatchers.WhenStep
  fullName: EventStore.Core.Tests.Helpers.TestFixtureWithReadWriteDispatchers.WhenStep

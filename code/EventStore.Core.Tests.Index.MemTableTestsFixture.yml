### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture
  commentId: T:EventStore.Core.Tests.Index.MemTableTestsFixture
  id: MemTableTestsFixture
  parent: EventStore.Core.Tests.Index
  children:
  - EventStore.Core.Tests.Index.MemTableTestsFixture.#ctor(Func{EventStore.Core.Index.IMemTable})
  - EventStore.Core.Tests.Index.MemTableTestsFixture.adding_an_item_increments_count
  - EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items
  - EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items_with_duplicates_on_edges
  - EventStore.Core.Tests.Index.MemTableTestsFixture.empty_memtable_has_count_of_zero
  - EventStore.Core.Tests.Index.MemTableTestsFixture.existing_item_is_found
  - EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated
  - EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated
  - EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted
  - EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted_with_duplicates_in_descending_order
  - EventStore.Core.Tests.Index.MemTableTestsFixture.MemTable
  - EventStore.Core.Tests.Index.MemTableTestsFixture.non_existent_item_is_not_found
  - EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_and_start_exclusive_results_returns_items_included
  - EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_in_range_but_not_start_results_returns_items_included
  - EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included
  - EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  - EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_greater_than_all_items_returns_nothing
  - EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included
  - EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  - EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_less_than_all_items_returns_nothing
  - EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_in_range_but_not_end_results_returns_items_included
  - EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_duplicated_items_included
  - EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_items_included
  - EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_stream_returns_nothing
  - EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_version_returns_nothing
  - EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_with_hole_returns_items_included
  - EventStore.Core.Tests.Index.MemTableTestsFixture.SetUp
  - EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_latest
  - EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_oldest
  - EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_are_returned_in_descending_order
  - EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_can_be_found
  - EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_are_returned_in_descending_order
  - EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_can_be_found
  - EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_position
  - EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_version
  - EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version
  - EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version
  - EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_memtable
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_stream
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_correct_entry
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_memtable
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_stream
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_correct_entry
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_the_value_with_largest_position_when_triduplicated
  - EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_value_with_highest_position
  langs:
  - csharp
  - vb
  name: MemTableTestsFixture
  nameWithType: MemTableTestsFixture
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture
  type: Class
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MemTableTestsFixture
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 19
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: 'public abstract class MemTableTestsFixture : object'
    content.vb: >-
      Public MustInherit Class MemTableTestsFixture

          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.Core.Tests.Index.HashListMemTableTests
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Tests.Index.MemTableTestsFixture.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Tests.Index.MemTableTestsFixture.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.MemTable
  commentId: F:EventStore.Core.Tests.Index.MemTableTestsFixture.MemTable
  id: MemTable
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: MemTable
  nameWithType: MemTableTestsFixture.MemTable
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.MemTable
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MemTable
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 24
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: protected IMemTable MemTable
    return:
      type: EventStore.Core.Index.IMemTable
    content.vb: Protected MemTable As IMemTable
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.#ctor(Func{EventStore.Core.Index.IMemTable})
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.#ctor(Func{EventStore.Core.Index.IMemTable})
  id: '#ctor(Func{EventStore.Core.Index.IMemTable})'
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: MemTableTestsFixture(Func<IMemTable>)
  nameWithType: MemTableTestsFixture.MemTableTestsFixture(Func<IMemTable>)
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.MemTableTestsFixture(Func<EventStore.Core.Index.IMemTable>)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 26
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: protected MemTableTestsFixture(Func<IMemTable> memTableFactory)
    parameters:
    - id: memTableFactory
      type: Func{EventStore.Core.Index.IMemTable}
    content.vb: Protected Sub New(memTableFactory As Func(Of IMemTable))
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.#ctor*
  nameWithType.vb: MemTableTestsFixture.MemTableTestsFixture(Func(Of IMemTable))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: EventStore.Core.Tests.Index.MemTableTestsFixture.MemTableTestsFixture(Func(Of EventStore.Core.Index.IMemTable))
  name.vb: MemTableTestsFixture(Func(Of IMemTable))
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.SetUp
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.SetUp
  id: SetUp
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: SetUp()
  nameWithType: MemTableTestsFixture.SetUp()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.SetUp()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: SetUp
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 32
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void SetUp()
    content.vb: Public Sub SetUp
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.SetUp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version
  id: throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version()
  nameWithType: MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 38
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version()
    content.vb: Public Sub throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version
  id: throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version()
  nameWithType: MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 44
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version()
    content.vb: Public Sub throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version
  id: throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version()
  nameWithType: MemTableTestsFixture.throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 50
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version()
    content.vb: Public Sub throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_version
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_version
  id: throw_argumentoutofrangeexception_on_adding_entry_with_negative_version
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: throw_argumentoutofrangeexception_on_adding_entry_with_negative_version()
  nameWithType: MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_version()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_version()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: throw_argumentoutofrangeexception_on_adding_entry_with_negative_version
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 57
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void throw_argumentoutofrangeexception_on_adding_entry_with_negative_version()
    content.vb: Public Sub throw_argumentoutofrangeexception_on_adding_entry_with_negative_version
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_version*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_position
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_position
  id: throw_argumentoutofrangeexception_on_adding_entry_with_negative_position
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: throw_argumentoutofrangeexception_on_adding_entry_with_negative_position()
  nameWithType: MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_position()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_position()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: throw_argumentoutofrangeexception_on_adding_entry_with_negative_position
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 63
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void throw_argumentoutofrangeexception_on_adding_entry_with_negative_position()
    content.vb: Public Sub throw_argumentoutofrangeexception_on_adding_entry_with_negative_position
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_position*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.empty_memtable_has_count_of_zero
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.empty_memtable_has_count_of_zero
  id: empty_memtable_has_count_of_zero
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: empty_memtable_has_count_of_zero()
  nameWithType: MemTableTestsFixture.empty_memtable_has_count_of_zero()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.empty_memtable_has_count_of_zero()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: empty_memtable_has_count_of_zero
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 69
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void empty_memtable_has_count_of_zero()
    content.vb: Public Sub empty_memtable_has_count_of_zero
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.empty_memtable_has_count_of_zero*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.adding_an_item_increments_count
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.adding_an_item_increments_count
  id: adding_an_item_increments_count
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: adding_an_item_increments_count()
  nameWithType: MemTableTestsFixture.adding_an_item_increments_count()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.adding_an_item_increments_count()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: adding_an_item_increments_count
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 75
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void adding_an_item_increments_count()
    content.vb: Public Sub adding_an_item_increments_count
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.adding_an_item_increments_count*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.non_existent_item_is_not_found
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.non_existent_item_is_not_found
  id: non_existent_item_is_not_found
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: non_existent_item_is_not_found()
  nameWithType: MemTableTestsFixture.non_existent_item_is_not_found()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.non_existent_item_is_not_found()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: non_existent_item_is_not_found
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 82
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void non_existent_item_is_not_found()
    content.vb: Public Sub non_existent_item_is_not_found
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.non_existent_item_is_not_found*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.existing_item_is_found
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.existing_item_is_found
  id: existing_item_is_found
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: existing_item_is_found()
  nameWithType: MemTableTestsFixture.existing_item_is_found()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.existing_item_is_found()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: existing_item_is_found
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 91
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void existing_item_is_found()
    content.vb: Public Sub existing_item_is_found
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.existing_item_is_found*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted
  id: items_come_out_sorted
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: items_come_out_sorted()
  nameWithType: MemTableTestsFixture.items_come_out_sorted()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: items_come_out_sorted
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 99
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void items_come_out_sorted()
    content.vb: Public Sub items_come_out_sorted
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted_with_duplicates_in_descending_order
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted_with_duplicates_in_descending_order
  id: items_come_out_sorted_with_duplicates_in_descending_order
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: items_come_out_sorted_with_duplicates_in_descending_order()
  nameWithType: MemTableTestsFixture.items_come_out_sorted_with_duplicates_in_descending_order()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted_with_duplicates_in_descending_order()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: items_come_out_sorted_with_duplicates_in_descending_order
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 118
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void items_come_out_sorted_with_duplicates_in_descending_order()
    content.vb: Public Sub items_come_out_sorted_with_duplicates_in_descending_order
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted_with_duplicates_in_descending_order*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items
  id: can_do_range_query_of_existing_items
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: can_do_range_query_of_existing_items()
  nameWithType: MemTableTestsFixture.can_do_range_query_of_existing_items()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: can_do_range_query_of_existing_items
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 137
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void can_do_range_query_of_existing_items()
    content.vb: Public Sub can_do_range_query_of_existing_items
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items_with_duplicates_on_edges
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items_with_duplicates_on_edges
  id: can_do_range_query_of_existing_items_with_duplicates_on_edges
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: can_do_range_query_of_existing_items_with_duplicates_on_edges()
  nameWithType: MemTableTestsFixture.can_do_range_query_of_existing_items_with_duplicates_on_edges()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items_with_duplicates_on_edges()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: can_do_range_query_of_existing_items_with_duplicates_on_edges
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 153
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void can_do_range_query_of_existing_items_with_duplicates_on_edges()
    content.vb: Public Sub can_do_range_query_of_existing_items_with_duplicates_on_edges
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items_with_duplicates_on_edges*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_stream_returns_nothing
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_stream_returns_nothing
  id: range_query_of_non_existing_stream_returns_nothing
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: range_query_of_non_existing_stream_returns_nothing()
  nameWithType: MemTableTestsFixture.range_query_of_non_existing_stream_returns_nothing()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_stream_returns_nothing()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: range_query_of_non_existing_stream_returns_nothing
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 177
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void range_query_of_non_existing_stream_returns_nothing()
    content.vb: Public Sub range_query_of_non_existing_stream_returns_nothing
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_stream_returns_nothing*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_version_returns_nothing
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_version_returns_nothing
  id: range_query_of_non_existing_version_returns_nothing
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: range_query_of_non_existing_version_returns_nothing()
  nameWithType: MemTableTestsFixture.range_query_of_non_existing_version_returns_nothing()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_version_returns_nothing()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: range_query_of_non_existing_version_returns_nothing
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 187
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void range_query_of_non_existing_version_returns_nothing()
    content.vb: Public Sub range_query_of_non_existing_version_returns_nothing
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_version_returns_nothing*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_with_hole_returns_items_included
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_with_hole_returns_items_included
  id: range_query_with_hole_returns_items_included
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: range_query_with_hole_returns_items_included()
  nameWithType: MemTableTestsFixture.range_query_with_hole_returns_items_included()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_with_hole_returns_items_included()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: range_query_with_hole_returns_items_included
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 198
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void range_query_with_hole_returns_items_included()
    content.vb: Public Sub range_query_with_hole_returns_items_included
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_with_hole_returns_items_included*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_in_range_but_not_end_results_returns_items_included
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_in_range_but_not_end_results_returns_items_included
  id: query_with_start_in_range_but_not_end_results_returns_items_included
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: query_with_start_in_range_but_not_end_results_returns_items_included()
  nameWithType: MemTableTestsFixture.query_with_start_in_range_but_not_end_results_returns_items_included()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_in_range_but_not_end_results_returns_items_included()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: query_with_start_in_range_but_not_end_results_returns_items_included
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 218
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void query_with_start_in_range_but_not_end_results_returns_items_included()
    content.vb: Public Sub query_with_start_in_range_but_not_end_results_returns_items_included
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_in_range_but_not_end_results_returns_items_included*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_in_range_but_not_start_results_returns_items_included
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_in_range_but_not_start_results_returns_items_included
  id: query_with_end_in_range_but_not_start_results_returns_items_included
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: query_with_end_in_range_but_not_start_results_returns_items_included()
  nameWithType: MemTableTestsFixture.query_with_end_in_range_but_not_start_results_returns_items_included()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_in_range_but_not_start_results_returns_items_included()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: query_with_end_in_range_but_not_start_results_returns_items_included
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 234
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void query_with_end_in_range_but_not_start_results_returns_items_included()
    content.vb: Public Sub query_with_end_in_range_but_not_start_results_returns_items_included
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_in_range_but_not_start_results_returns_items_included*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_and_start_exclusive_results_returns_items_included
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_and_start_exclusive_results_returns_items_included
  id: query_with_end_and_start_exclusive_results_returns_items_included
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: query_with_end_and_start_exclusive_results_returns_items_included()
  nameWithType: MemTableTestsFixture.query_with_end_and_start_exclusive_results_returns_items_included()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_and_start_exclusive_results_returns_items_included()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: query_with_end_and_start_exclusive_results_returns_items_included
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 250
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void query_with_end_and_start_exclusive_results_returns_items_included()
    content.vb: Public Sub query_with_end_and_start_exclusive_results_returns_items_included
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_and_start_exclusive_results_returns_items_included*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included
  id: query_with_end_inside_the_hole_in_list_returns_items_included
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: query_with_end_inside_the_hole_in_list_returns_items_included()
  nameWithType: MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: query_with_end_inside_the_hole_in_list_returns_items_included
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 266
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void query_with_end_inside_the_hole_in_list_returns_items_included()
    content.vb: Public Sub query_with_end_inside_the_hole_in_list_returns_items_included
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  id: query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates()
  nameWithType: MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 282
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates()
    content.vb: Public Sub query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_items_included
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_items_included
  id: query_with_start_inside_the_hole_in_list_returns_items_included
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: query_with_start_inside_the_hole_in_list_returns_items_included()
  nameWithType: MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_items_included()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_items_included()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: query_with_start_inside_the_hole_in_list_returns_items_included
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 303
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void query_with_start_inside_the_hole_in_list_returns_items_included()
    content.vb: Public Sub query_with_start_inside_the_hole_in_list_returns_items_included
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_items_included*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_duplicated_items_included
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_duplicated_items_included
  id: query_with_start_inside_the_hole_in_list_returns_duplicated_items_included
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: query_with_start_inside_the_hole_in_list_returns_duplicated_items_included()
  nameWithType: MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_duplicated_items_included()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_duplicated_items_included()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: query_with_start_inside_the_hole_in_list_returns_duplicated_items_included
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 319
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void query_with_start_inside_the_hole_in_list_returns_duplicated_items_included()
    content.vb: Public Sub query_with_start_inside_the_hole_in_list_returns_duplicated_items_included
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_duplicated_items_included*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included
  id: query_with_start_and_end_inside_the_hole_in_list_returns_items_included
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: query_with_start_and_end_inside_the_hole_in_list_returns_items_included()
  nameWithType: MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: query_with_start_and_end_inside_the_hole_in_list_returns_items_included
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 339
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void query_with_start_and_end_inside_the_hole_in_list_returns_items_included()
    content.vb: Public Sub query_with_start_and_end_inside_the_hole_in_list_returns_items_included
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  id: query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates()
  nameWithType: MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 352
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates()
    content.vb: Public Sub query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_less_than_all_items_returns_nothing
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_less_than_all_items_returns_nothing
  id: query_with_start_and_end_less_than_all_items_returns_nothing
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: query_with_start_and_end_less_than_all_items_returns_nothing()
  nameWithType: MemTableTestsFixture.query_with_start_and_end_less_than_all_items_returns_nothing()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_less_than_all_items_returns_nothing()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: query_with_start_and_end_less_than_all_items_returns_nothing
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 371
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void query_with_start_and_end_less_than_all_items_returns_nothing()
    content.vb: Public Sub query_with_start_and_end_less_than_all_items_returns_nothing
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_less_than_all_items_returns_nothing*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_greater_than_all_items_returns_nothing
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_greater_than_all_items_returns_nothing
  id: query_with_start_and_end_greater_than_all_items_returns_nothing
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: query_with_start_and_end_greater_than_all_items_returns_nothing()
  nameWithType: MemTableTestsFixture.query_with_start_and_end_greater_than_all_items_returns_nothing()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_greater_than_all_items_returns_nothing()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: query_with_start_and_end_greater_than_all_items_returns_nothing
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 381
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void query_with_start_and_end_greater_than_all_items_returns_nothing()
    content.vb: Public Sub query_with_start_and_end_greater_than_all_items_returns_nothing
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_greater_than_all_items_returns_nothing*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_value_with_highest_position
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_value_with_highest_position
  id: try_get_one_value_returns_value_with_highest_position
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_one_value_returns_value_with_highest_position()
  nameWithType: MemTableTestsFixture.try_get_one_value_returns_value_with_highest_position()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_value_with_highest_position()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_one_value_returns_value_with_highest_position
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 391
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_one_value_returns_value_with_highest_position()
    content.vb: Public Sub try_get_one_value_returns_value_with_highest_position
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_value_with_highest_position*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated
  id: get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated()
  nameWithType: MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 402
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated()
    content.vb: Public Sub get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_the_value_with_largest_position_when_triduplicated
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_the_value_with_largest_position_when_triduplicated
  id: try_get_one_value_returns_the_value_with_largest_position_when_triduplicated
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_one_value_returns_the_value_with_largest_position_when_triduplicated()
  nameWithType: MemTableTestsFixture.try_get_one_value_returns_the_value_with_largest_position_when_triduplicated()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_the_value_with_largest_position_when_triduplicated()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_one_value_returns_the_value_with_largest_position_when_triduplicated
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 418
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_one_value_returns_the_value_with_largest_position_when_triduplicated()
    content.vb: Public Sub try_get_one_value_returns_the_value_with_largest_position_when_triduplicated
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_the_value_with_largest_position_when_triduplicated*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated
  id: get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated()
  nameWithType: MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 432
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated()
    content.vb: Public Sub get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_memtable
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_memtable
  id: try_get_latest_entry_finds_nothing_on_empty_memtable
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_latest_entry_finds_nothing_on_empty_memtable()
  nameWithType: MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_memtable()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_memtable()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_latest_entry_finds_nothing_on_empty_memtable
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 456
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_latest_entry_finds_nothing_on_empty_memtable()
    content.vb: Public Sub try_get_latest_entry_finds_nothing_on_empty_memtable
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_memtable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_stream
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_stream
  id: try_get_latest_entry_finds_nothing_on_empty_stream
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_latest_entry_finds_nothing_on_empty_stream()
  nameWithType: MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_stream()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_stream()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_latest_entry_finds_nothing_on_empty_stream
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 463
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_latest_entry_finds_nothing_on_empty_stream()
    content.vb: Public Sub try_get_latest_entry_finds_nothing_on_empty_stream
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_stream*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_latest
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_latest
  id: single_item_is_latest
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: single_item_is_latest()
  nameWithType: MemTableTestsFixture.single_item_is_latest()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_latest()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: single_item_is_latest
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 471
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void single_item_is_latest()
    content.vb: Public Sub single_item_is_latest
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_latest*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_correct_entry
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_correct_entry
  id: try_get_latest_entry_returns_correct_entry
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_latest_entry_returns_correct_entry()
  nameWithType: MemTableTestsFixture.try_get_latest_entry_returns_correct_entry()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_correct_entry()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_latest_entry_returns_correct_entry
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 482
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_latest_entry_returns_correct_entry()
    content.vb: Public Sub try_get_latest_entry_returns_correct_entry
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_correct_entry*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position
  id: try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position()
  nameWithType: MemTableTestsFixture.try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 494
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position()
    content.vb: Public Sub try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated
  id: try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated()
  nameWithType: MemTableTestsFixture.try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 508
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated()
    content.vb: Public Sub try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_memtable
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_memtable
  id: try_get_oldest_entry_finds_nothing_on_empty_memtable
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_oldest_entry_finds_nothing_on_empty_memtable()
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_memtable()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_memtable()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_oldest_entry_finds_nothing_on_empty_memtable
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 521
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_oldest_entry_finds_nothing_on_empty_memtable()
    content.vb: Public Sub try_get_oldest_entry_finds_nothing_on_empty_memtable
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_memtable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_stream
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_stream
  id: try_get_oldest_entry_finds_nothing_on_empty_stream
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_oldest_entry_finds_nothing_on_empty_stream()
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_stream()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_stream()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_oldest_entry_finds_nothing_on_empty_stream
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 528
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_oldest_entry_finds_nothing_on_empty_stream()
    content.vb: Public Sub try_get_oldest_entry_finds_nothing_on_empty_stream
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_stream*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_oldest
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_oldest
  id: single_item_is_oldest
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: single_item_is_oldest()
  nameWithType: MemTableTestsFixture.single_item_is_oldest()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_oldest()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: single_item_is_oldest
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 536
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void single_item_is_oldest()
    content.vb: Public Sub single_item_is_oldest
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_oldest*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_correct_entry
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_correct_entry
  id: try_get_oldest_entry_returns_correct_entry
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_oldest_entry_returns_correct_entry()
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_returns_correct_entry()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_correct_entry()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_oldest_entry_returns_correct_entry
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 547
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_oldest_entry_returns_correct_entry()
    content.vb: Public Sub try_get_oldest_entry_returns_correct_entry
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_correct_entry*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position
  id: try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position()
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 559
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position()
    content.vb: Public Sub try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated
  id: try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated()
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 573
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated()
    content.vb: Public Sub try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_can_be_found
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_can_be_found
  id: the_smallest_items_with_hash_collisions_can_be_found
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: the_smallest_items_with_hash_collisions_can_be_found()
  nameWithType: MemTableTestsFixture.the_smallest_items_with_hash_collisions_can_be_found()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_can_be_found()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: the_smallest_items_with_hash_collisions_can_be_found
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 587
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void the_smallest_items_with_hash_collisions_can_be_found()
    content.vb: Public Sub the_smallest_items_with_hash_collisions_can_be_found
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_can_be_found*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_are_returned_in_descending_order
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_are_returned_in_descending_order
  id: the_smallest_items_with_hash_collisions_are_returned_in_descending_order
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: the_smallest_items_with_hash_collisions_are_returned_in_descending_order()
  nameWithType: MemTableTestsFixture.the_smallest_items_with_hash_collisions_are_returned_in_descending_order()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_are_returned_in_descending_order()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: the_smallest_items_with_hash_collisions_are_returned_in_descending_order
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 601
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void the_smallest_items_with_hash_collisions_are_returned_in_descending_order()
    content.vb: Public Sub the_smallest_items_with_hash_collisions_are_returned_in_descending_order
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_are_returned_in_descending_order*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  id: try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry()
  nameWithType: MemTableTestsFixture.try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 620
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry()
    content.vb: Public Sub try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  id: try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry()
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 636
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry()
    content.vb: Public Sub try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_can_be_found
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_can_be_found
  id: the_largest_items_with_hash_collisions_can_be_found
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: the_largest_items_with_hash_collisions_can_be_found()
  nameWithType: MemTableTestsFixture.the_largest_items_with_hash_collisions_can_be_found()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_can_be_found()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: the_largest_items_with_hash_collisions_can_be_found
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 652
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void the_largest_items_with_hash_collisions_can_be_found()
    content.vb: Public Sub the_largest_items_with_hash_collisions_can_be_found
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_can_be_found*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_are_returned_in_descending_order
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_are_returned_in_descending_order
  id: the_largest_items_with_hash_collisions_are_returned_in_descending_order
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: the_largest_items_with_hash_collisions_are_returned_in_descending_order()
  nameWithType: MemTableTestsFixture.the_largest_items_with_hash_collisions_are_returned_in_descending_order()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_are_returned_in_descending_order()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: the_largest_items_with_hash_collisions_are_returned_in_descending_order
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 666
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void the_largest_items_with_hash_collisions_are_returned_in_descending_order()
    content.vb: Public Sub the_largest_items_with_hash_collisions_are_returned_in_descending_order
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_are_returned_in_descending_order*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry
  id: try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry()
  nameWithType: MemTableTestsFixture.try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 688
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry()
    content.vb: Public Sub try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry
  commentId: M:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry
  id: try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry
  parent: EventStore.Core.Tests.Index.MemTableTestsFixture
  langs:
  - csharp
  - vb
  name: try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry()
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry()
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Index/MemTableTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry
    path: ../EventStore/src/EventStore.Core.Tests/Index/MemTableTests.cs
    startLine: 704
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Index
  syntax:
    content: public void try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry()
    content.vb: Public Sub try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry
  overload: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Tests.Index
  commentId: N:EventStore.Core.Tests.Index
  isExternal: false
  name: EventStore.Core.Tests.Index
  nameWithType: EventStore.Core.Tests.Index
  fullName: EventStore.Core.Tests.Index
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<MemTableTestsFixture>()
  nameWithType: ProtobufExtensions.Serialize<MemTableTestsFixture>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Index.MemTableTestsFixture>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of MemTableTestsFixture)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Index.MemTableTestsFixture)()
  name.vb: Serialize(Of MemTableTestsFixture)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<MemTableTestsFixture>
    nameWithType: ProtobufExtensions.Serialize<MemTableTestsFixture>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Index.MemTableTestsFixture>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of MemTableTestsFixture)
    nameWithType: ProtobufExtensions.Serialize(Of MemTableTestsFixture)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Index.MemTableTestsFixture)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<MemTableTestsFixture>()
  nameWithType: ProtobufExtensions.SerializeToArray<MemTableTestsFixture>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Index.MemTableTestsFixture>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of MemTableTestsFixture)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Index.MemTableTestsFixture)()
  name.vb: SerializeToArray(Of MemTableTestsFixture)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<MemTableTestsFixture>
    nameWithType: ProtobufExtensions.SerializeToArray<MemTableTestsFixture>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Index.MemTableTestsFixture>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of MemTableTestsFixture)
    nameWithType: ProtobufExtensions.SerializeToArray(Of MemTableTestsFixture)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Index.MemTableTestsFixture)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Index.IMemTable
  commentId: T:EventStore.Core.Index.IMemTable
  parent: EventStore.Core.Index
  isExternal: false
  name: IMemTable
  nameWithType: IMemTable
  fullName: EventStore.Core.Index.IMemTable
- uid: EventStore.Core.Index
  commentId: N:EventStore.Core.Index
  isExternal: false
  name: EventStore.Core.Index
  nameWithType: EventStore.Core.Index
  fullName: EventStore.Core.Index
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.#ctor*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.#ctor
  isExternal: false
  name: MemTableTestsFixture
  nameWithType: MemTableTestsFixture.MemTableTestsFixture
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.MemTableTestsFixture
- uid: Func{EventStore.Core.Index.IMemTable}
  commentId: '!:Func{EventStore.Core.Index.IMemTable}'
  definition: Func`1
  name: Func<IMemTable>
  nameWithType: Func<IMemTable>
  fullName: Func<EventStore.Core.Index.IMemTable>
  nameWithType.vb: Func(Of IMemTable)
  fullName.vb: Func(Of EventStore.Core.Index.IMemTable)
  name.vb: Func(Of IMemTable)
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IMemTable
    name: IMemTable
    nameWithType: IMemTable
    fullName: EventStore.Core.Index.IMemTable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IMemTable
    name: IMemTable
    nameWithType: IMemTable
    fullName: EventStore.Core.Index.IMemTable
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.SetUp*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.SetUp
  isExternal: false
  name: SetUp
  nameWithType: MemTableTestsFixture.SetUp
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.SetUp
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version
  isExternal: false
  name: throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version
  nameWithType: MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_start_version
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version
  isExternal: false
  name: throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version
  nameWithType: MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_range_query_when_provided_with_negative_end_version
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version
  isExternal: false
  name: throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version
  nameWithType: MemTableTestsFixture.throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_get_one_entry_query_when_provided_with_negative_version
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_version*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_version
  isExternal: false
  name: throw_argumentoutofrangeexception_on_adding_entry_with_negative_version
  nameWithType: MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_version
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_version
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_position*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_position
  isExternal: false
  name: throw_argumentoutofrangeexception_on_adding_entry_with_negative_position
  nameWithType: MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_position
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.throw_argumentoutofrangeexception_on_adding_entry_with_negative_position
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.empty_memtable_has_count_of_zero*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.empty_memtable_has_count_of_zero
  isExternal: false
  name: empty_memtable_has_count_of_zero
  nameWithType: MemTableTestsFixture.empty_memtable_has_count_of_zero
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.empty_memtable_has_count_of_zero
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.adding_an_item_increments_count*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.adding_an_item_increments_count
  isExternal: false
  name: adding_an_item_increments_count
  nameWithType: MemTableTestsFixture.adding_an_item_increments_count
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.adding_an_item_increments_count
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.non_existent_item_is_not_found*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.non_existent_item_is_not_found
  isExternal: false
  name: non_existent_item_is_not_found
  nameWithType: MemTableTestsFixture.non_existent_item_is_not_found
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.non_existent_item_is_not_found
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.existing_item_is_found*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.existing_item_is_found
  isExternal: false
  name: existing_item_is_found
  nameWithType: MemTableTestsFixture.existing_item_is_found
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.existing_item_is_found
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted
  isExternal: false
  name: items_come_out_sorted
  nameWithType: MemTableTestsFixture.items_come_out_sorted
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted_with_duplicates_in_descending_order*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted_with_duplicates_in_descending_order
  isExternal: false
  name: items_come_out_sorted_with_duplicates_in_descending_order
  nameWithType: MemTableTestsFixture.items_come_out_sorted_with_duplicates_in_descending_order
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.items_come_out_sorted_with_duplicates_in_descending_order
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items
  isExternal: false
  name: can_do_range_query_of_existing_items
  nameWithType: MemTableTestsFixture.can_do_range_query_of_existing_items
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items_with_duplicates_on_edges*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items_with_duplicates_on_edges
  isExternal: false
  name: can_do_range_query_of_existing_items_with_duplicates_on_edges
  nameWithType: MemTableTestsFixture.can_do_range_query_of_existing_items_with_duplicates_on_edges
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.can_do_range_query_of_existing_items_with_duplicates_on_edges
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_stream_returns_nothing*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_stream_returns_nothing
  isExternal: false
  name: range_query_of_non_existing_stream_returns_nothing
  nameWithType: MemTableTestsFixture.range_query_of_non_existing_stream_returns_nothing
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_stream_returns_nothing
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_version_returns_nothing*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_version_returns_nothing
  isExternal: false
  name: range_query_of_non_existing_version_returns_nothing
  nameWithType: MemTableTestsFixture.range_query_of_non_existing_version_returns_nothing
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_of_non_existing_version_returns_nothing
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_with_hole_returns_items_included*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_with_hole_returns_items_included
  isExternal: false
  name: range_query_with_hole_returns_items_included
  nameWithType: MemTableTestsFixture.range_query_with_hole_returns_items_included
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.range_query_with_hole_returns_items_included
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_in_range_but_not_end_results_returns_items_included*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_in_range_but_not_end_results_returns_items_included
  isExternal: false
  name: query_with_start_in_range_but_not_end_results_returns_items_included
  nameWithType: MemTableTestsFixture.query_with_start_in_range_but_not_end_results_returns_items_included
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_in_range_but_not_end_results_returns_items_included
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_in_range_but_not_start_results_returns_items_included*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_in_range_but_not_start_results_returns_items_included
  isExternal: false
  name: query_with_end_in_range_but_not_start_results_returns_items_included
  nameWithType: MemTableTestsFixture.query_with_end_in_range_but_not_start_results_returns_items_included
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_in_range_but_not_start_results_returns_items_included
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_and_start_exclusive_results_returns_items_included*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_and_start_exclusive_results_returns_items_included
  isExternal: false
  name: query_with_end_and_start_exclusive_results_returns_items_included
  nameWithType: MemTableTestsFixture.query_with_end_and_start_exclusive_results_returns_items_included
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_and_start_exclusive_results_returns_items_included
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included
  isExternal: false
  name: query_with_end_inside_the_hole_in_list_returns_items_included
  nameWithType: MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  isExternal: false
  name: query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  nameWithType: MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_end_inside_the_hole_in_list_returns_items_included_with_duplicates
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_items_included*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_items_included
  isExternal: false
  name: query_with_start_inside_the_hole_in_list_returns_items_included
  nameWithType: MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_items_included
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_items_included
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_duplicated_items_included*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_duplicated_items_included
  isExternal: false
  name: query_with_start_inside_the_hole_in_list_returns_duplicated_items_included
  nameWithType: MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_duplicated_items_included
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_inside_the_hole_in_list_returns_duplicated_items_included
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included
  isExternal: false
  name: query_with_start_and_end_inside_the_hole_in_list_returns_items_included
  nameWithType: MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  isExternal: false
  name: query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  nameWithType: MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_inside_the_hole_in_list_returns_items_included_with_duplicates
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_less_than_all_items_returns_nothing*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_less_than_all_items_returns_nothing
  isExternal: false
  name: query_with_start_and_end_less_than_all_items_returns_nothing
  nameWithType: MemTableTestsFixture.query_with_start_and_end_less_than_all_items_returns_nothing
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_less_than_all_items_returns_nothing
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_greater_than_all_items_returns_nothing*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_greater_than_all_items_returns_nothing
  isExternal: false
  name: query_with_start_and_end_greater_than_all_items_returns_nothing
  nameWithType: MemTableTestsFixture.query_with_start_and_end_greater_than_all_items_returns_nothing
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.query_with_start_and_end_greater_than_all_items_returns_nothing
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_value_with_highest_position*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_value_with_highest_position
  isExternal: false
  name: try_get_one_value_returns_value_with_highest_position
  nameWithType: MemTableTestsFixture.try_get_one_value_returns_value_with_highest_position
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_value_with_highest_position
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated
  isExternal: false
  name: get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated
  nameWithType: MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_duplicated
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_the_value_with_largest_position_when_triduplicated*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_the_value_with_largest_position_when_triduplicated
  isExternal: false
  name: try_get_one_value_returns_the_value_with_largest_position_when_triduplicated
  nameWithType: MemTableTestsFixture.try_get_one_value_returns_the_value_with_largest_position_when_triduplicated
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_one_value_returns_the_value_with_largest_position_when_triduplicated
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated
  isExternal: false
  name: get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated
  nameWithType: MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.get_range_of_same_version_returns_both_values_in_descending_order_when_triduplicated
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_memtable*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_memtable
  isExternal: false
  name: try_get_latest_entry_finds_nothing_on_empty_memtable
  nameWithType: MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_memtable
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_memtable
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_stream*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_stream
  isExternal: false
  name: try_get_latest_entry_finds_nothing_on_empty_stream
  nameWithType: MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_stream
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_finds_nothing_on_empty_stream
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_latest*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_latest
  isExternal: false
  name: single_item_is_latest
  nameWithType: MemTableTestsFixture.single_item_is_latest
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_latest
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_correct_entry*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_correct_entry
  isExternal: false
  name: try_get_latest_entry_returns_correct_entry
  nameWithType: MemTableTestsFixture.try_get_latest_entry_returns_correct_entry
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_correct_entry
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position
  isExternal: false
  name: try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position
  nameWithType: MemTableTestsFixture.try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_when_duplicated_entries_returns_the_one_with_largest_position
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated
  isExternal: false
  name: try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated
  nameWithType: MemTableTestsFixture.try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_returns_the_entry_with_the_largest_position_when_triduplicated
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_memtable*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_memtable
  isExternal: false
  name: try_get_oldest_entry_finds_nothing_on_empty_memtable
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_memtable
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_memtable
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_stream*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_stream
  isExternal: false
  name: try_get_oldest_entry_finds_nothing_on_empty_stream
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_stream
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_finds_nothing_on_empty_stream
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_oldest*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_oldest
  isExternal: false
  name: single_item_is_oldest
  nameWithType: MemTableTestsFixture.single_item_is_oldest
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.single_item_is_oldest
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_correct_entry*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_correct_entry
  isExternal: false
  name: try_get_oldest_entry_returns_correct_entry
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_returns_correct_entry
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_correct_entry
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position
  isExternal: false
  name: try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_when_duplicated_entries_returns_the_one_with_smallest_position
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated
  isExternal: false
  name: try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_returns_the_entry_with_the_smallest_position_when_triduplicated
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_can_be_found*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_can_be_found
  isExternal: false
  name: the_smallest_items_with_hash_collisions_can_be_found
  nameWithType: MemTableTestsFixture.the_smallest_items_with_hash_collisions_can_be_found
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_can_be_found
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_are_returned_in_descending_order*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_are_returned_in_descending_order
  isExternal: false
  name: the_smallest_items_with_hash_collisions_are_returned_in_descending_order
  nameWithType: MemTableTestsFixture.the_smallest_items_with_hash_collisions_are_returned_in_descending_order
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.the_smallest_items_with_hash_collisions_are_returned_in_descending_order
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  isExternal: false
  name: try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  nameWithType: MemTableTestsFixture.try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  isExternal: false
  name: try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_smallest_hash_with_collisions_returns_correct_index_entry
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_can_be_found*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_can_be_found
  isExternal: false
  name: the_largest_items_with_hash_collisions_can_be_found
  nameWithType: MemTableTestsFixture.the_largest_items_with_hash_collisions_can_be_found
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_can_be_found
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_are_returned_in_descending_order*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_are_returned_in_descending_order
  isExternal: false
  name: the_largest_items_with_hash_collisions_are_returned_in_descending_order
  nameWithType: MemTableTestsFixture.the_largest_items_with_hash_collisions_are_returned_in_descending_order
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.the_largest_items_with_hash_collisions_are_returned_in_descending_order
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry
  isExternal: false
  name: try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry
  nameWithType: MemTableTestsFixture.try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_latest_entry_for_largest_hash_collision_returns_correct_index_entry
- uid: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry*
  commentId: Overload:EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry
  isExternal: false
  name: try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry
  nameWithType: MemTableTestsFixture.try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry
  fullName: EventStore.Core.Tests.Index.MemTableTestsFixture.try_get_oldest_entry_for_largest_hash_with_collisions_returns_correct_index_entry

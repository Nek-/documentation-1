### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Tests.Replication.ReadStream.TestSubscription
  commentId: T:EventStore.Core.Tests.Replication.ReadStream.TestSubscription
  id: TestSubscription
  parent: EventStore.Core.Tests.Replication.ReadStream
  children:
  - EventStore.Core.Tests.Replication.ReadStream.TestSubscription.#ctor(EventStore.Core.Tests.Helpers.MiniClusterNode,System.Int32,System.String,CountdownEvent)
  - EventStore.Core.Tests.Replication.ReadStream.TestSubscription.CreateSubscription
  - EventStore.Core.Tests.Replication.ReadStream.TestSubscription.EventAppeared
  - EventStore.Core.Tests.Replication.ReadStream.TestSubscription.Node
  - EventStore.Core.Tests.Replication.ReadStream.TestSubscription.StreamEvents
  - EventStore.Core.Tests.Replication.ReadStream.TestSubscription.StreamId
  - EventStore.Core.Tests.Replication.ReadStream.TestSubscription.SubscriptionsConfirmed
  langs:
  - csharp
  - vb
  name: TestSubscription
  nameWithType: TestSubscription
  fullName: EventStore.Core.Tests.Replication.ReadStream.TestSubscription
  type: Class
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TestSubscription
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
    startLine: 11
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Replication.ReadStream
  syntax:
    content: 'public class TestSubscription : object'
    content.vb: >-
      Public Class TestSubscription

          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Tests.Replication.ReadStream.TestSubscription.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Tests.Replication.ReadStream.TestSubscription.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.Node
  commentId: F:EventStore.Core.Tests.Replication.ReadStream.TestSubscription.Node
  id: Node
  parent: EventStore.Core.Tests.Replication.ReadStream.TestSubscription
  langs:
  - csharp
  - vb
  name: Node
  nameWithType: TestSubscription.Node
  fullName: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.Node
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Node
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
    startLine: 13
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Replication.ReadStream
  syntax:
    content: public MiniClusterNode Node
    return:
      type: EventStore.Core.Tests.Helpers.MiniClusterNode
    content.vb: Public Node As MiniClusterNode
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.SubscriptionsConfirmed
  commentId: F:EventStore.Core.Tests.Replication.ReadStream.TestSubscription.SubscriptionsConfirmed
  id: SubscriptionsConfirmed
  parent: EventStore.Core.Tests.Replication.ReadStream.TestSubscription
  langs:
  - csharp
  - vb
  name: SubscriptionsConfirmed
  nameWithType: TestSubscription.SubscriptionsConfirmed
  fullName: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.SubscriptionsConfirmed
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: SubscriptionsConfirmed
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
    startLine: 14
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Replication.ReadStream
  syntax:
    content: public CountdownEvent SubscriptionsConfirmed
    return:
      type: CountdownEvent
    content.vb: Public SubscriptionsConfirmed As CountdownEvent
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.EventAppeared
  commentId: F:EventStore.Core.Tests.Replication.ReadStream.TestSubscription.EventAppeared
  id: EventAppeared
  parent: EventStore.Core.Tests.Replication.ReadStream.TestSubscription
  langs:
  - csharp
  - vb
  name: EventAppeared
  nameWithType: TestSubscription.EventAppeared
  fullName: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.EventAppeared
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EventAppeared
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
    startLine: 15
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Replication.ReadStream
  syntax:
    content: public CountdownEvent EventAppeared
    return:
      type: CountdownEvent
    content.vb: Public EventAppeared As CountdownEvent
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.StreamEvents
  commentId: F:EventStore.Core.Tests.Replication.ReadStream.TestSubscription.StreamEvents
  id: StreamEvents
  parent: EventStore.Core.Tests.Replication.ReadStream.TestSubscription
  langs:
  - csharp
  - vb
  name: StreamEvents
  nameWithType: TestSubscription.StreamEvents
  fullName: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.StreamEvents
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: StreamEvents
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
    startLine: 16
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Replication.ReadStream
  syntax:
    content: public List<ClientMessage.StreamEventAppeared> StreamEvents
    return:
      type: List{EventStore.Core.Messages.ClientMessage.StreamEventAppeared}
    content.vb: Public StreamEvents As List(Of ClientMessage.StreamEventAppeared)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.StreamId
  commentId: F:EventStore.Core.Tests.Replication.ReadStream.TestSubscription.StreamId
  id: StreamId
  parent: EventStore.Core.Tests.Replication.ReadStream.TestSubscription
  langs:
  - csharp
  - vb
  name: StreamId
  nameWithType: TestSubscription.StreamId
  fullName: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.StreamId
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: StreamId
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
    startLine: 17
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Replication.ReadStream
  syntax:
    content: public string StreamId
    return:
      type: System.String
    content.vb: Public StreamId As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.#ctor(EventStore.Core.Tests.Helpers.MiniClusterNode,System.Int32,System.String,CountdownEvent)
  commentId: M:EventStore.Core.Tests.Replication.ReadStream.TestSubscription.#ctor(EventStore.Core.Tests.Helpers.MiniClusterNode,System.Int32,System.String,CountdownEvent)
  id: '#ctor(EventStore.Core.Tests.Helpers.MiniClusterNode,System.Int32,System.String,CountdownEvent)'
  parent: EventStore.Core.Tests.Replication.ReadStream.TestSubscription
  langs:
  - csharp
  - vb
  name: TestSubscription(MiniClusterNode, Int32, String, CountdownEvent)
  nameWithType: TestSubscription.TestSubscription(MiniClusterNode, Int32, String, CountdownEvent)
  fullName: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.TestSubscription(EventStore.Core.Tests.Helpers.MiniClusterNode, System.Int32, System.String, CountdownEvent)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
    startLine: 19
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Replication.ReadStream
  syntax:
    content: public TestSubscription(MiniClusterNode node, int expectedEvents, string streamId, CountdownEvent subscriptionsConfirmed)
    parameters:
    - id: node
      type: EventStore.Core.Tests.Helpers.MiniClusterNode
    - id: expectedEvents
      type: System.Int32
    - id: streamId
      type: System.String
    - id: subscriptionsConfirmed
      type: CountdownEvent
    content.vb: Public Sub New(node As MiniClusterNode, expectedEvents As Integer, streamId As String, subscriptionsConfirmed As CountdownEvent)
  overload: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.CreateSubscription
  commentId: M:EventStore.Core.Tests.Replication.ReadStream.TestSubscription.CreateSubscription
  id: CreateSubscription
  parent: EventStore.Core.Tests.Replication.ReadStream.TestSubscription
  langs:
  - csharp
  - vb
  name: CreateSubscription()
  nameWithType: TestSubscription.CreateSubscription()
  fullName: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.CreateSubscription()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CreateSubscription
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/Subscriptions/TestSubscription.cs
    startLine: 27
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Replication.ReadStream
  syntax:
    content: public void CreateSubscription()
    content.vb: Public Sub CreateSubscription
  overload: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.CreateSubscription*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Tests.Replication.ReadStream
  commentId: N:EventStore.Core.Tests.Replication.ReadStream
  isExternal: false
  name: EventStore.Core.Tests.Replication.ReadStream
  nameWithType: EventStore.Core.Tests.Replication.ReadStream
  fullName: EventStore.Core.Tests.Replication.ReadStream
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TestSubscription>()
  nameWithType: ProtobufExtensions.Serialize<TestSubscription>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Replication.ReadStream.TestSubscription>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TestSubscription)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Replication.ReadStream.TestSubscription)()
  name.vb: Serialize(Of TestSubscription)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TestSubscription>
    nameWithType: ProtobufExtensions.Serialize<TestSubscription>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Replication.ReadStream.TestSubscription>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TestSubscription)
    nameWithType: ProtobufExtensions.Serialize(Of TestSubscription)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Replication.ReadStream.TestSubscription)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TestSubscription>()
  nameWithType: ProtobufExtensions.SerializeToArray<TestSubscription>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Replication.ReadStream.TestSubscription>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TestSubscription)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Replication.ReadStream.TestSubscription)()
  name.vb: SerializeToArray(Of TestSubscription)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TestSubscription>
    nameWithType: ProtobufExtensions.SerializeToArray<TestSubscription>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Replication.ReadStream.TestSubscription>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TestSubscription)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TestSubscription)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Replication.ReadStream.TestSubscription)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Tests.Helpers.MiniClusterNode
  commentId: T:EventStore.Core.Tests.Helpers.MiniClusterNode
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: MiniClusterNode
  nameWithType: MiniClusterNode
  fullName: EventStore.Core.Tests.Helpers.MiniClusterNode
- uid: CountdownEvent
  isExternal: true
  name: CountdownEvent
  nameWithType: CountdownEvent
  fullName: CountdownEvent
- uid: List{EventStore.Core.Messages.ClientMessage.StreamEventAppeared}
  commentId: '!:List{EventStore.Core.Messages.ClientMessage.StreamEventAppeared}'
  definition: List`1
  name: List<ClientMessage.StreamEventAppeared>
  nameWithType: List<ClientMessage.StreamEventAppeared>
  fullName: List<EventStore.Core.Messages.ClientMessage.StreamEventAppeared>
  nameWithType.vb: List(Of ClientMessage.StreamEventAppeared)
  fullName.vb: List(Of EventStore.Core.Messages.ClientMessage.StreamEventAppeared)
  name.vb: List(Of ClientMessage.StreamEventAppeared)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.StreamEventAppeared
    name: ClientMessage.StreamEventAppeared
    nameWithType: ClientMessage.StreamEventAppeared
    fullName: EventStore.Core.Messages.ClientMessage.StreamEventAppeared
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.StreamEventAppeared
    name: ClientMessage.StreamEventAppeared
    nameWithType: ClientMessage.StreamEventAppeared
    fullName: EventStore.Core.Messages.ClientMessage.StreamEventAppeared
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.#ctor*
  commentId: Overload:EventStore.Core.Tests.Replication.ReadStream.TestSubscription.#ctor
  isExternal: false
  name: TestSubscription
  nameWithType: TestSubscription.TestSubscription
  fullName: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.TestSubscription
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.CreateSubscription*
  commentId: Overload:EventStore.Core.Tests.Replication.ReadStream.TestSubscription.CreateSubscription
  isExternal: false
  name: CreateSubscription
  nameWithType: TestSubscription.CreateSubscription
  fullName: EventStore.Core.Tests.Replication.ReadStream.TestSubscription.CreateSubscription

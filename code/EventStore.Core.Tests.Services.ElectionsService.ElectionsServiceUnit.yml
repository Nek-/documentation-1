### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  commentId: T:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  id: ElectionsServiceUnit
  parent: EventStore.Core.Tests.Services.ElectionsService
  children:
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.#ctor(EventStore.Core.Tests.Services.ElectionsService.ClusterSettings)
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue(Func{EventStore.Core.Messaging.Message,System.Boolean})
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue``1
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClusterInfo
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ElectionsService
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.GetNodeAt(System.Int32)
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.InitialClusterInfo
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.InitialClusterSettings
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.InputMessages
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.IsCurrent(IPEndPoint)
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListAliveMembers(Func{EventStore.Core.Cluster.MemberInfo,System.Boolean})
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListMembers(Func{EventStore.Core.Cluster.MemberInfo,System.Boolean})
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.OwnEndPoint
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish(EventStore.Core.Messaging.Message)
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish(IEnumerable{EventStore.Core.Messaging.Message})
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publisher
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.RepublishFromPublisher(System.Boolean)
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.UpdateClusterMemberInfo(System.Int32,System.Nullable{EventStore.Core.Data.VNodeState},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64})
  langs:
  - csharp
  - vb
  name: ElectionsServiceUnit
  nameWithType: ElectionsServiceUnit
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  type: Class
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ElectionsServiceUnit
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 15
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: 'public class ElectionsServiceUnit : object'
    content.vb: >-
      Public Class ElectionsServiceUnit

          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClusterInfo
  commentId: P:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClusterInfo
  id: ClusterInfo
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: ClusterInfo
  nameWithType: ElectionsServiceUnit.ClusterInfo
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClusterInfo
  type: Property
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ClusterInfo
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 22
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public ClusterInfo ClusterInfo { get; }
    parameters: []
    return:
      type: EventStore.Core.Cluster.ClusterInfo
    content.vb: Public ReadOnly Property ClusterInfo As ClusterInfo
  overload: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClusterInfo*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.OwnEndPoint
  commentId: P:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.OwnEndPoint
  id: OwnEndPoint
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: OwnEndPoint
  nameWithType: ElectionsServiceUnit.OwnEndPoint
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.OwnEndPoint
  type: Property
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: OwnEndPoint
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 23
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public IPEndPoint OwnEndPoint { get; }
    parameters: []
    return:
      type: IPEndPoint
    content.vb: Public ReadOnly Property OwnEndPoint As IPEndPoint
  overload: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.OwnEndPoint*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ElectionsService
  commentId: F:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ElectionsService
  id: ElectionsService
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: ElectionsService
  nameWithType: ElectionsServiceUnit.ElectionsService
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ElectionsService
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ElectionsService
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 25
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: protected ElectionsService ElectionsService
    return:
      type: EventStore.Core.Services.ElectionsService
    content.vb: Protected ElectionsService As ElectionsService
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publisher
  commentId: F:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publisher
  id: Publisher
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: Publisher
  nameWithType: ElectionsServiceUnit.Publisher
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publisher
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Publisher
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 27
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public readonly FakePublisher Publisher
    return:
      type: EventStore.Core.Tests.Fakes.FakePublisher
    content.vb: Public ReadOnly Publisher As FakePublisher
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.InputMessages
  commentId: F:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.InputMessages
  id: InputMessages
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: InputMessages
  nameWithType: ElectionsServiceUnit.InputMessages
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.InputMessages
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: InputMessages
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 28
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public readonly List<Message> InputMessages
    return:
      type: List{EventStore.Core.Messaging.Message}
    content.vb: Public ReadOnly InputMessages As List(Of Message)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.InitialClusterSettings
  commentId: F:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.InitialClusterSettings
  id: InitialClusterSettings
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: InitialClusterSettings
  nameWithType: ElectionsServiceUnit.InitialClusterSettings
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.InitialClusterSettings
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: InitialClusterSettings
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 32
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: protected readonly ClusterSettings InitialClusterSettings
    return:
      type: EventStore.Core.Tests.Services.ElectionsService.ClusterSettings
    content.vb: Protected ReadOnly InitialClusterSettings As ClusterSettings
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.InitialClusterInfo
  commentId: F:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.InitialClusterInfo
  id: InitialClusterInfo
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: InitialClusterInfo
  nameWithType: ElectionsServiceUnit.InitialClusterInfo
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.InitialClusterInfo
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: InitialClusterInfo
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 33
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: protected readonly ClusterInfo InitialClusterInfo
    return:
      type: EventStore.Core.Cluster.ClusterInfo
    content.vb: Protected ReadOnly InitialClusterInfo As ClusterInfo
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.#ctor(EventStore.Core.Tests.Services.ElectionsService.ClusterSettings)
  commentId: M:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.#ctor(EventStore.Core.Tests.Services.ElectionsService.ClusterSettings)
  id: '#ctor(EventStore.Core.Tests.Services.ElectionsService.ClusterSettings)'
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: ElectionsServiceUnit(ClusterSettings)
  nameWithType: ElectionsServiceUnit.ElectionsServiceUnit(ClusterSettings)
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ElectionsServiceUnit(EventStore.Core.Tests.Services.ElectionsService.ClusterSettings)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 35
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public ElectionsServiceUnit(ClusterSettings clusterSettings)
    parameters:
    - id: clusterSettings
      type: EventStore.Core.Tests.Services.ElectionsService.ClusterSettings
    content.vb: Public Sub New(clusterSettings As ClusterSettings)
  overload: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish(EventStore.Core.Messaging.Message)
  commentId: M:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish(EventStore.Core.Messaging.Message)
  id: Publish(EventStore.Core.Messaging.Message)
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: Publish(Message)
  nameWithType: ElectionsServiceUnit.Publish(Message)
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish(EventStore.Core.Messaging.Message)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Publish
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 97
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public void Publish(Message message)
    parameters:
    - id: message
      type: EventStore.Core.Messaging.Message
    content.vb: Public Sub Publish(message As Message)
  overload: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish(IEnumerable{EventStore.Core.Messaging.Message})
  commentId: M:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish(IEnumerable{EventStore.Core.Messaging.Message})
  id: Publish(IEnumerable{EventStore.Core.Messaging.Message})
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: Publish(IEnumerable<Message>)
  nameWithType: ElectionsServiceUnit.Publish(IEnumerable<Message>)
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish(IEnumerable<EventStore.Core.Messaging.Message>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Publish
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 103
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public void Publish(IEnumerable<Message> messages)
    parameters:
    - id: messages
      type: IEnumerable{EventStore.Core.Messaging.Message}
    content.vb: Public Sub Publish(messages As IEnumerable(Of Message))
  overload: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish*
  nameWithType.vb: ElectionsServiceUnit.Publish(IEnumerable(Of Message))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish(IEnumerable(Of EventStore.Core.Messaging.Message))
  name.vb: Publish(IEnumerable(Of Message))
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue``1
  commentId: M:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue``1
  id: ClearMessageFromQueue``1
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: ClearMessageFromQueue<T>()
  nameWithType: ElectionsServiceUnit.ClearMessageFromQueue<T>()
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue<T>()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ClearMessageFromQueue
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 111
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public T[] ClearMessageFromQueue<T>()
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Function ClearMessageFromQueue(Of T) As T()
  overload: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue*
  nameWithType.vb: ElectionsServiceUnit.ClearMessageFromQueue(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue(Of T)()
  name.vb: ClearMessageFromQueue(Of T)()
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue(Func{EventStore.Core.Messaging.Message,System.Boolean})
  commentId: M:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue(Func{EventStore.Core.Messaging.Message,System.Boolean})
  id: ClearMessageFromQueue(Func{EventStore.Core.Messaging.Message,System.Boolean})
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: ClearMessageFromQueue(Func<Message, Boolean>)
  nameWithType: ElectionsServiceUnit.ClearMessageFromQueue(Func<Message, Boolean>)
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue(Func<EventStore.Core.Messaging.Message, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ClearMessageFromQueue
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 116
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public Message[] ClearMessageFromQueue(Func<Message, bool> predicate)
    parameters:
    - id: predicate
      type: Func{EventStore.Core.Messaging.Message,System.Boolean}
    return:
      type: EventStore.Core.Messaging.Message[]
    content.vb: Public Function ClearMessageFromQueue(predicate As Func(Of Message, Boolean)) As Message()
  overload: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue*
  nameWithType.vb: ElectionsServiceUnit.ClearMessageFromQueue(Func(Of Message, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue(Func(Of EventStore.Core.Messaging.Message, System.Boolean))
  name.vb: ClearMessageFromQueue(Func(Of Message, Boolean))
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.RepublishFromPublisher(System.Boolean)
  commentId: M:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.RepublishFromPublisher(System.Boolean)
  id: RepublishFromPublisher(System.Boolean)
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: RepublishFromPublisher(Boolean)
  nameWithType: ElectionsServiceUnit.RepublishFromPublisher(Boolean)
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.RepublishFromPublisher(System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: RepublishFromPublisher
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 136
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public Message[] RepublishFromPublisher(bool skipScheduledMessages = false)
    parameters:
    - id: skipScheduledMessages
      type: System.Boolean
    return:
      type: EventStore.Core.Messaging.Message[]
    content.vb: Public Function RepublishFromPublisher(skipScheduledMessages As Boolean = False) As Message()
  overload: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.RepublishFromPublisher*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.IsCurrent(IPEndPoint)
  commentId: M:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.IsCurrent(IPEndPoint)
  id: IsCurrent(IPEndPoint)
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: IsCurrent(IPEndPoint)
  nameWithType: ElectionsServiceUnit.IsCurrent(IPEndPoint)
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.IsCurrent(IPEndPoint)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IsCurrent
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 164
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public bool IsCurrent(IPEndPoint endPoint)
    parameters:
    - id: endPoint
      type: IPEndPoint
    return:
      type: System.Boolean
    content.vb: Public Function IsCurrent(endPoint As IPEndPoint) As Boolean
  overload: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.IsCurrent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.GetNodeAt(System.Int32)
  commentId: M:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.GetNodeAt(System.Int32)
  id: GetNodeAt(System.Int32)
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: GetNodeAt(Int32)
  nameWithType: ElectionsServiceUnit.GetNodeAt(Int32)
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.GetNodeAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetNodeAt
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 169
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public MemberInfo GetNodeAt(int index)
    parameters:
    - id: index
      type: System.Int32
    return:
      type: EventStore.Core.Cluster.MemberInfo
    content.vb: Public Function GetNodeAt(index As Integer) As MemberInfo
  overload: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.GetNodeAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListMembers(Func{EventStore.Core.Cluster.MemberInfo,System.Boolean})
  commentId: M:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListMembers(Func{EventStore.Core.Cluster.MemberInfo,System.Boolean})
  id: ListMembers(Func{EventStore.Core.Cluster.MemberInfo,System.Boolean})
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: ListMembers(Func<MemberInfo, Boolean>)
  nameWithType: ElectionsServiceUnit.ListMembers(Func<MemberInfo, Boolean>)
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListMembers(Func<EventStore.Core.Cluster.MemberInfo, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ListMembers
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 174
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public IEnumerable<MemberInfo> ListMembers(Func<MemberInfo, bool> predicate = null)
    parameters:
    - id: predicate
      type: Func{EventStore.Core.Cluster.MemberInfo,System.Boolean}
    return:
      type: IEnumerable{EventStore.Core.Cluster.MemberInfo}
    content.vb: Public Function ListMembers(predicate As Func(Of MemberInfo, Boolean) = Nothing) As IEnumerable(Of MemberInfo)
  overload: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListMembers*
  nameWithType.vb: ElectionsServiceUnit.ListMembers(Func(Of MemberInfo, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListMembers(Func(Of EventStore.Core.Cluster.MemberInfo, System.Boolean))
  name.vb: ListMembers(Func(Of MemberInfo, Boolean))
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListAliveMembers(Func{EventStore.Core.Cluster.MemberInfo,System.Boolean})
  commentId: M:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListAliveMembers(Func{EventStore.Core.Cluster.MemberInfo,System.Boolean})
  id: ListAliveMembers(Func{EventStore.Core.Cluster.MemberInfo,System.Boolean})
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: ListAliveMembers(Func<MemberInfo, Boolean>)
  nameWithType: ElectionsServiceUnit.ListAliveMembers(Func<MemberInfo, Boolean>)
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListAliveMembers(Func<EventStore.Core.Cluster.MemberInfo, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ListAliveMembers
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 188
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public IEnumerable<MemberInfo> ListAliveMembers(Func<MemberInfo, bool> predicate = null)
    parameters:
    - id: predicate
      type: Func{EventStore.Core.Cluster.MemberInfo,System.Boolean}
    return:
      type: IEnumerable{EventStore.Core.Cluster.MemberInfo}
    content.vb: Public Function ListAliveMembers(predicate As Func(Of MemberInfo, Boolean) = Nothing) As IEnumerable(Of MemberInfo)
  overload: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListAliveMembers*
  nameWithType.vb: ElectionsServiceUnit.ListAliveMembers(Func(Of MemberInfo, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListAliveMembers(Func(Of EventStore.Core.Cluster.MemberInfo, System.Boolean))
  name.vb: ListAliveMembers(Func(Of MemberInfo, Boolean))
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.UpdateClusterMemberInfo(System.Int32,System.Nullable{EventStore.Core.Data.VNodeState},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64})
  commentId: M:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.UpdateClusterMemberInfo(System.Int32,System.Nullable{EventStore.Core.Data.VNodeState},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64})
  id: UpdateClusterMemberInfo(System.Int32,System.Nullable{EventStore.Core.Data.VNodeState},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64})
  parent: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit
  langs:
  - csharp
  - vb
  name: UpdateClusterMemberInfo(Int32, Nullable<VNodeState>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>)
  nameWithType: ElectionsServiceUnit.UpdateClusterMemberInfo(Int32, Nullable<VNodeState>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>)
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.UpdateClusterMemberInfo(System.Int32, System.Nullable<EventStore.Core.Data.VNodeState>, System.Nullable<System.Boolean>, System.Nullable<System.Int64>, System.Nullable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: UpdateClusterMemberInfo
    path: ../EventStore/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
    startLine: 193
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.ElectionsService
  syntax:
    content: public void UpdateClusterMemberInfo(int nodeIndex, VNodeState? role = null, bool ? isAlive = null, long ? writerCheckpoint = null, long ? chaserCheckpoint = null)
    parameters:
    - id: nodeIndex
      type: System.Int32
    - id: role
      type: System.Nullable{EventStore.Core.Data.VNodeState}
    - id: isAlive
      type: System.Nullable{System.Boolean}
    - id: writerCheckpoint
      type: System.Nullable{System.Int64}
    - id: chaserCheckpoint
      type: System.Nullable{System.Int64}
    content.vb: Public Sub UpdateClusterMemberInfo(nodeIndex As Integer, role As VNodeState? = Nothing, isAlive As Boolean? = Nothing, writerCheckpoint As Long? = Nothing, chaserCheckpoint As Long? = Nothing)
  overload: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.UpdateClusterMemberInfo*
  nameWithType.vb: ElectionsServiceUnit.UpdateClusterMemberInfo(Int32, Nullable(Of VNodeState), Nullable(Of Boolean), Nullable(Of Int64), Nullable(Of Int64))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.UpdateClusterMemberInfo(System.Int32, System.Nullable(Of EventStore.Core.Data.VNodeState), System.Nullable(Of System.Boolean), System.Nullable(Of System.Int64), System.Nullable(Of System.Int64))
  name.vb: UpdateClusterMemberInfo(Int32, Nullable(Of VNodeState), Nullable(Of Boolean), Nullable(Of Int64), Nullable(Of Int64))
references:
- uid: EventStore.Core.Tests.Services.ElectionsService
  commentId: N:EventStore.Core.Tests.Services.ElectionsService
  isExternal: false
  name: EventStore.Core.Tests.Services.ElectionsService
  nameWithType: EventStore.Core.Tests.Services.ElectionsService
  fullName: EventStore.Core.Tests.Services.ElectionsService
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ElectionsServiceUnit>()
  nameWithType: ProtobufExtensions.Serialize<ElectionsServiceUnit>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ElectionsServiceUnit)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit)()
  name.vb: Serialize(Of ElectionsServiceUnit)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ElectionsServiceUnit>
    nameWithType: ProtobufExtensions.Serialize<ElectionsServiceUnit>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ElectionsServiceUnit)
    nameWithType: ProtobufExtensions.Serialize(Of ElectionsServiceUnit)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ElectionsServiceUnit>()
  nameWithType: ProtobufExtensions.SerializeToArray<ElectionsServiceUnit>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ElectionsServiceUnit)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit)()
  name.vb: SerializeToArray(Of ElectionsServiceUnit)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ElectionsServiceUnit>
    nameWithType: ProtobufExtensions.SerializeToArray<ElectionsServiceUnit>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ElectionsServiceUnit)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ElectionsServiceUnit)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClusterInfo*
  commentId: Overload:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClusterInfo
  isExternal: false
  name: ClusterInfo
  nameWithType: ElectionsServiceUnit.ClusterInfo
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClusterInfo
- uid: EventStore.Core.Cluster.ClusterInfo
  commentId: T:EventStore.Core.Cluster.ClusterInfo
  parent: EventStore.Core.Cluster
  isExternal: false
  name: ClusterInfo
  nameWithType: ClusterInfo
  fullName: EventStore.Core.Cluster.ClusterInfo
- uid: EventStore.Core.Cluster
  commentId: N:EventStore.Core.Cluster
  isExternal: false
  name: EventStore.Core.Cluster
  nameWithType: EventStore.Core.Cluster
  fullName: EventStore.Core.Cluster
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.OwnEndPoint*
  commentId: Overload:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.OwnEndPoint
  isExternal: false
  name: OwnEndPoint
  nameWithType: ElectionsServiceUnit.OwnEndPoint
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.OwnEndPoint
- uid: IPEndPoint
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: IPEndPoint
- uid: EventStore.Core.Services.ElectionsService
  commentId: T:EventStore.Core.Services.ElectionsService
  parent: EventStore.Core.Services
  isExternal: false
  name: ElectionsService
  nameWithType: ElectionsService
  fullName: EventStore.Core.Services.ElectionsService
- uid: EventStore.Core.Services
  commentId: N:EventStore.Core.Services
  isExternal: false
  name: EventStore.Core.Services
  nameWithType: EventStore.Core.Services
  fullName: EventStore.Core.Services
- uid: EventStore.Core.Tests.Fakes.FakePublisher
  commentId: T:EventStore.Core.Tests.Fakes.FakePublisher
  parent: EventStore.Core.Tests.Fakes
  isExternal: false
  name: FakePublisher
  nameWithType: FakePublisher
  fullName: EventStore.Core.Tests.Fakes.FakePublisher
- uid: EventStore.Core.Tests.Fakes
  commentId: N:EventStore.Core.Tests.Fakes
  isExternal: false
  name: EventStore.Core.Tests.Fakes
  nameWithType: EventStore.Core.Tests.Fakes
  fullName: EventStore.Core.Tests.Fakes
- uid: List{EventStore.Core.Messaging.Message}
  commentId: '!:List{EventStore.Core.Messaging.Message}'
  definition: List`1
  name: List<Message>
  nameWithType: List<Message>
  fullName: List<EventStore.Core.Messaging.Message>
  nameWithType.vb: List(Of Message)
  fullName.vb: List(Of EventStore.Core.Messaging.Message)
  name.vb: List(Of Message)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.ElectionsService.ClusterSettings
  commentId: T:EventStore.Core.Tests.Services.ElectionsService.ClusterSettings
  parent: EventStore.Core.Tests.Services.ElectionsService
  isExternal: false
  name: ClusterSettings
  nameWithType: ClusterSettings
  fullName: EventStore.Core.Tests.Services.ElectionsService.ClusterSettings
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.#ctor*
  commentId: Overload:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.#ctor
  isExternal: false
  name: ElectionsServiceUnit
  nameWithType: ElectionsServiceUnit.ElectionsServiceUnit
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ElectionsServiceUnit
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish*
  commentId: Overload:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish
  isExternal: false
  name: Publish
  nameWithType: ElectionsServiceUnit.Publish
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.Publish
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  isExternal: false
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: IEnumerable{EventStore.Core.Messaging.Message}
  commentId: '!:IEnumerable{EventStore.Core.Messaging.Message}'
  definition: IEnumerable`1
  name: IEnumerable<Message>
  nameWithType: IEnumerable<Message>
  fullName: IEnumerable<EventStore.Core.Messaging.Message>
  nameWithType.vb: IEnumerable(Of Message)
  fullName.vb: IEnumerable(Of EventStore.Core.Messaging.Message)
  name.vb: IEnumerable(Of Message)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue*
  commentId: Overload:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue
  isExternal: false
  name: ClearMessageFromQueue
  nameWithType: ElectionsServiceUnit.ClearMessageFromQueue
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ClearMessageFromQueue
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Func{EventStore.Core.Messaging.Message,System.Boolean}
  commentId: '!:Func{EventStore.Core.Messaging.Message,System.Boolean}'
  definition: Func`2
  name: Func<Message, Boolean>
  nameWithType: Func<Message, Boolean>
  fullName: Func<EventStore.Core.Messaging.Message, System.Boolean>
  nameWithType.vb: Func(Of Message, Boolean)
  fullName.vb: Func(Of EventStore.Core.Messaging.Message, System.Boolean)
  name.vb: Func(Of Message, Boolean)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging.Message[]
  name: Message[]
  nameWithType: Message[]
  fullName: EventStore.Core.Messaging.Message[]
  nameWithType.vb: Message()
  fullName.vb: EventStore.Core.Messaging.Message()
  name.vb: Message()
  spec.csharp:
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.RepublishFromPublisher*
  commentId: Overload:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.RepublishFromPublisher
  isExternal: false
  name: RepublishFromPublisher
  nameWithType: ElectionsServiceUnit.RepublishFromPublisher
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.RepublishFromPublisher
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.IsCurrent*
  commentId: Overload:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.IsCurrent
  isExternal: false
  name: IsCurrent
  nameWithType: ElectionsServiceUnit.IsCurrent
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.IsCurrent
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.GetNodeAt*
  commentId: Overload:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.GetNodeAt
  isExternal: false
  name: GetNodeAt
  nameWithType: ElectionsServiceUnit.GetNodeAt
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.GetNodeAt
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Cluster.MemberInfo
  commentId: T:EventStore.Core.Cluster.MemberInfo
  parent: EventStore.Core.Cluster
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: EventStore.Core.Cluster.MemberInfo
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListMembers*
  commentId: Overload:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListMembers
  isExternal: false
  name: ListMembers
  nameWithType: ElectionsServiceUnit.ListMembers
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListMembers
- uid: Func{EventStore.Core.Cluster.MemberInfo,System.Boolean}
  commentId: '!:Func{EventStore.Core.Cluster.MemberInfo,System.Boolean}'
  definition: Func`2
  name: Func<MemberInfo, Boolean>
  nameWithType: Func<MemberInfo, Boolean>
  fullName: Func<EventStore.Core.Cluster.MemberInfo, System.Boolean>
  nameWithType.vb: Func(Of MemberInfo, Boolean)
  fullName.vb: Func(Of EventStore.Core.Cluster.MemberInfo, System.Boolean)
  name.vb: Func(Of MemberInfo, Boolean)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Cluster.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: EventStore.Core.Cluster.MemberInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Cluster.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: EventStore.Core.Cluster.MemberInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{EventStore.Core.Cluster.MemberInfo}
  commentId: '!:IEnumerable{EventStore.Core.Cluster.MemberInfo}'
  definition: IEnumerable`1
  name: IEnumerable<MemberInfo>
  nameWithType: IEnumerable<MemberInfo>
  fullName: IEnumerable<EventStore.Core.Cluster.MemberInfo>
  nameWithType.vb: IEnumerable(Of MemberInfo)
  fullName.vb: IEnumerable(Of EventStore.Core.Cluster.MemberInfo)
  name.vb: IEnumerable(Of MemberInfo)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Cluster.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: EventStore.Core.Cluster.MemberInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Cluster.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: EventStore.Core.Cluster.MemberInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListAliveMembers*
  commentId: Overload:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListAliveMembers
  isExternal: false
  name: ListAliveMembers
  nameWithType: ElectionsServiceUnit.ListAliveMembers
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.ListAliveMembers
- uid: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.UpdateClusterMemberInfo*
  commentId: Overload:EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.UpdateClusterMemberInfo
  isExternal: false
  name: UpdateClusterMemberInfo
  nameWithType: ElectionsServiceUnit.UpdateClusterMemberInfo
  fullName: EventStore.Core.Tests.Services.ElectionsService.ElectionsServiceUnit.UpdateClusterMemberInfo
- uid: System.Nullable{EventStore.Core.Data.VNodeState}
  commentId: '!:System.Nullable{EventStore.Core.Data.VNodeState}'
  definition: System.Nullable`1
  name: Nullable<VNodeState>
  nameWithType: Nullable<VNodeState>
  fullName: System.Nullable<EventStore.Core.Data.VNodeState>
  nameWithType.vb: Nullable(Of VNodeState)
  fullName.vb: System.Nullable(Of EventStore.Core.Data.VNodeState)
  name.vb: Nullable(Of VNodeState)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Data.VNodeState
    name: VNodeState
    nameWithType: VNodeState
    fullName: EventStore.Core.Data.VNodeState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Data.VNodeState
    name: VNodeState
    nameWithType: VNodeState
    fullName: EventStore.Core.Data.VNodeState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Boolean}
  commentId: '!:System.Nullable{System.Boolean}'
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

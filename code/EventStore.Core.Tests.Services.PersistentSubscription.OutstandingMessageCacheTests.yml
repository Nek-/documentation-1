### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  commentId: T:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  id: OutstandingMessageCacheTests
  parent: EventStore.Core.Tests.Services.PersistentSubscription
  children:
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.adding_an_item_causes_count_to_go_up
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_duplicate
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_multiple_messages_same_time_different_ids
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_duplicate
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_existing_item
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_existing_item
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_first_message_and_have_removed_from_time
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_second_message_same_time_different_ids
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.get_expired_messages_returns_max_value_on_empty_cache
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_on_empty_cache_returns_max
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_add
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_adds_then_remove
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list_with_another_that_should_not
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_is_removed_does_not_show_up_in_expired_list
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_notexpired_is_not_included_in_expired_list
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.when_created_has_zero_count
  langs:
  - csharp
  - vb
  name: OutstandingMessageCacheTests
  nameWithType: OutstandingMessageCacheTests
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  type: Class
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: OutstandingMessageCacheTests
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 7
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: 'public class OutstandingMessageCacheTests : object'
    content.vb: >-
      Public Class OutstandingMessageCacheTests

          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.when_created_has_zero_count
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.when_created_has_zero_count
  id: when_created_has_zero_count
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: when_created_has_zero_count()
  nameWithType: OutstandingMessageCacheTests.when_created_has_zero_count()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.when_created_has_zero_count()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: when_created_has_zero_count
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 10
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void when_created_has_zero_count()
    content.vb: Public Sub when_created_has_zero_count
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.when_created_has_zero_count*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_existing_item
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_existing_item
  id: can_remove_non_existing_item
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: can_remove_non_existing_item()
  nameWithType: OutstandingMessageCacheTests.can_remove_non_existing_item()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_existing_item()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: can_remove_non_existing_item
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 17
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void can_remove_non_existing_item()
    content.vb: Public Sub can_remove_non_existing_item
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_existing_item*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.adding_an_item_causes_count_to_go_up
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.adding_an_item_causes_count_to_go_up
  id: adding_an_item_causes_count_to_go_up
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: adding_an_item_causes_count_to_go_up()
  nameWithType: OutstandingMessageCacheTests.adding_an_item_causes_count_to_go_up()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.adding_an_item_causes_count_to_go_up()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: adding_an_item_causes_count_to_go_up
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 24
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void adding_an_item_causes_count_to_go_up()
    content.vb: Public Sub adding_an_item_causes_count_to_go_up
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.adding_an_item_causes_count_to_go_up*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_duplicate
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_duplicate
  id: can_add_duplicate
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: can_add_duplicate()
  nameWithType: OutstandingMessageCacheTests.can_add_duplicate()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_duplicate()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: can_add_duplicate
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 34
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void can_add_duplicate()
    content.vb: Public Sub can_add_duplicate
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_duplicate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_duplicate
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_duplicate
  id: can_remove_duplicate
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: can_remove_duplicate()
  nameWithType: OutstandingMessageCacheTests.can_remove_duplicate()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_duplicate()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: can_remove_duplicate
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 47
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void can_remove_duplicate()
    content.vb: Public Sub can_remove_duplicate
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_duplicate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_existing_item
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_existing_item
  id: can_remove_existing_item
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: can_remove_existing_item()
  nameWithType: OutstandingMessageCacheTests.can_remove_existing_item()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_existing_item()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: can_remove_existing_item
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 59
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void can_remove_existing_item()
    content.vb: Public Sub can_remove_existing_item
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_existing_item*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_add
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_add
  id: lowest_works_on_add
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: lowest_works_on_add()
  nameWithType: OutstandingMessageCacheTests.lowest_works_on_add()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_add()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: lowest_works_on_add
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 70
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void lowest_works_on_add()
    content.vb: Public Sub lowest_works_on_add
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_adds_then_remove
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_adds_then_remove
  id: lowest_works_on_adds_then_remove
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: lowest_works_on_adds_then_remove()
  nameWithType: OutstandingMessageCacheTests.lowest_works_on_adds_then_remove()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_adds_then_remove()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: lowest_works_on_adds_then_remove
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 79
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void lowest_works_on_adds_then_remove()
    content.vb: Public Sub lowest_works_on_adds_then_remove
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_adds_then_remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_on_empty_cache_returns_max
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_on_empty_cache_returns_max
  id: lowest_on_empty_cache_returns_max
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: lowest_on_empty_cache_returns_max()
  nameWithType: OutstandingMessageCacheTests.lowest_on_empty_cache_returns_max()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_on_empty_cache_returns_max()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: lowest_on_empty_cache_returns_max
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 93
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void lowest_on_empty_cache_returns_max()
    content.vb: Public Sub lowest_on_empty_cache_returns_max
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_on_empty_cache_returns_max*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.get_expired_messages_returns_max_value_on_empty_cache
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.get_expired_messages_returns_max_value_on_empty_cache
  id: get_expired_messages_returns_max_value_on_empty_cache
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: get_expired_messages_returns_max_value_on_empty_cache()
  nameWithType: OutstandingMessageCacheTests.get_expired_messages_returns_max_value_on_empty_cache()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.get_expired_messages_returns_max_value_on_empty_cache()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: get_expired_messages_returns_max_value_on_empty_cache
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 99
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void get_expired_messages_returns_max_value_on_empty_cache()
    content.vb: Public Sub get_expired_messages_returns_max_value_on_empty_cache
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.get_expired_messages_returns_max_value_on_empty_cache*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list
  id: message_that_expires_is_included_in_expired_list
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: message_that_expires_is_included_in_expired_list()
  nameWithType: OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: message_that_expires_is_included_in_expired_list
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 107
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void message_that_expires_is_included_in_expired_list()
    content.vb: Public Sub message_that_expires_is_included_in_expired_list
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list_with_another_that_should_not
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list_with_another_that_should_not
  id: message_that_expires_is_included_in_expired_list_with_another_that_should_not
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: message_that_expires_is_included_in_expired_list_with_another_that_should_not()
  nameWithType: OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list_with_another_that_should_not()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list_with_another_that_should_not()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: message_that_expires_is_included_in_expired_list_with_another_that_should_not
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 118
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void message_that_expires_is_included_in_expired_list_with_another_that_should_not()
    content.vb: Public Sub message_that_expires_is_included_in_expired_list_with_another_that_should_not
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list_with_another_that_should_not*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_is_removed_does_not_show_up_in_expired_list
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_is_removed_does_not_show_up_in_expired_list
  id: message_that_is_removed_does_not_show_up_in_expired_list
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: message_that_is_removed_does_not_show_up_in_expired_list()
  nameWithType: OutstandingMessageCacheTests.message_that_is_removed_does_not_show_up_in_expired_list()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_is_removed_does_not_show_up_in_expired_list()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: message_that_is_removed_does_not_show_up_in_expired_list
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 130
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void message_that_is_removed_does_not_show_up_in_expired_list()
    content.vb: Public Sub message_that_is_removed_does_not_show_up_in_expired_list
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_is_removed_does_not_show_up_in_expired_list*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_first_message_and_have_removed_from_time
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_first_message_and_have_removed_from_time
  id: can_remove_non_first_message_and_have_removed_from_time
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: can_remove_non_first_message_and_have_removed_from_time()
  nameWithType: OutstandingMessageCacheTests.can_remove_non_first_message_and_have_removed_from_time()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_first_message_and_have_removed_from_time()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: can_remove_non_first_message_and_have_removed_from_time
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 141
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void can_remove_non_first_message_and_have_removed_from_time()
    content.vb: Public Sub can_remove_non_first_message_and_have_removed_from_time
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_first_message_and_have_removed_from_time*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_multiple_messages_same_time_different_ids
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_multiple_messages_same_time_different_ids
  id: can_add_multiple_messages_same_time_different_ids
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: can_add_multiple_messages_same_time_different_ids()
  nameWithType: OutstandingMessageCacheTests.can_add_multiple_messages_same_time_different_ids()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_multiple_messages_same_time_different_ids()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: can_add_multiple_messages_same_time_different_ids
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 155
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void can_add_multiple_messages_same_time_different_ids()
    content.vb: Public Sub can_add_multiple_messages_same_time_different_ids
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_multiple_messages_same_time_different_ids*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_second_message_same_time_different_ids
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_second_message_same_time_different_ids
  id: can_remove_second_message_same_time_different_ids
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: can_remove_second_message_same_time_different_ids()
  nameWithType: OutstandingMessageCacheTests.can_remove_second_message_same_time_different_ids()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_second_message_same_time_different_ids()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: can_remove_second_message_same_time_different_ids
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 168
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void can_remove_second_message_same_time_different_ids()
    content.vb: Public Sub can_remove_second_message_same_time_different_ids
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_second_message_same_time_different_ids*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_notexpired_is_not_included_in_expired_list
  commentId: M:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_notexpired_is_not_included_in_expired_list
  id: message_that_notexpired_is_not_included_in_expired_list
  parent: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests
  langs:
  - csharp
  - vb
  name: message_that_notexpired_is_not_included_in_expired_list()
  nameWithType: OutstandingMessageCacheTests.message_that_notexpired_is_not_included_in_expired_list()
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_notexpired_is_not_included_in_expired_list()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: message_that_notexpired_is_not_included_in_expired_list
    path: ../EventStore/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
    startLine: 183
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.PersistentSubscription
  syntax:
    content: public void message_that_notexpired_is_not_included_in_expired_list()
    content.vb: Public Sub message_that_notexpired_is_not_included_in_expired_list
  overload: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_notexpired_is_not_included_in_expired_list*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Tests.Services.PersistentSubscription
  commentId: N:EventStore.Core.Tests.Services.PersistentSubscription
  isExternal: false
  name: EventStore.Core.Tests.Services.PersistentSubscription
  nameWithType: EventStore.Core.Tests.Services.PersistentSubscription
  fullName: EventStore.Core.Tests.Services.PersistentSubscription
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<OutstandingMessageCacheTests>()
  nameWithType: ProtobufExtensions.Serialize<OutstandingMessageCacheTests>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of OutstandingMessageCacheTests)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests)()
  name.vb: Serialize(Of OutstandingMessageCacheTests)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<OutstandingMessageCacheTests>
    nameWithType: ProtobufExtensions.Serialize<OutstandingMessageCacheTests>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of OutstandingMessageCacheTests)
    nameWithType: ProtobufExtensions.Serialize(Of OutstandingMessageCacheTests)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<OutstandingMessageCacheTests>()
  nameWithType: ProtobufExtensions.SerializeToArray<OutstandingMessageCacheTests>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of OutstandingMessageCacheTests)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests)()
  name.vb: SerializeToArray(Of OutstandingMessageCacheTests)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<OutstandingMessageCacheTests>
    nameWithType: ProtobufExtensions.SerializeToArray<OutstandingMessageCacheTests>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of OutstandingMessageCacheTests)
    nameWithType: ProtobufExtensions.SerializeToArray(Of OutstandingMessageCacheTests)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.when_created_has_zero_count*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.when_created_has_zero_count
  isExternal: false
  name: when_created_has_zero_count
  nameWithType: OutstandingMessageCacheTests.when_created_has_zero_count
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.when_created_has_zero_count
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_existing_item*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_existing_item
  isExternal: false
  name: can_remove_non_existing_item
  nameWithType: OutstandingMessageCacheTests.can_remove_non_existing_item
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_existing_item
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.adding_an_item_causes_count_to_go_up*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.adding_an_item_causes_count_to_go_up
  isExternal: false
  name: adding_an_item_causes_count_to_go_up
  nameWithType: OutstandingMessageCacheTests.adding_an_item_causes_count_to_go_up
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.adding_an_item_causes_count_to_go_up
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_duplicate*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_duplicate
  isExternal: false
  name: can_add_duplicate
  nameWithType: OutstandingMessageCacheTests.can_add_duplicate
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_duplicate
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_duplicate*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_duplicate
  isExternal: false
  name: can_remove_duplicate
  nameWithType: OutstandingMessageCacheTests.can_remove_duplicate
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_duplicate
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_existing_item*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_existing_item
  isExternal: false
  name: can_remove_existing_item
  nameWithType: OutstandingMessageCacheTests.can_remove_existing_item
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_existing_item
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_add*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_add
  isExternal: false
  name: lowest_works_on_add
  nameWithType: OutstandingMessageCacheTests.lowest_works_on_add
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_add
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_adds_then_remove*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_adds_then_remove
  isExternal: false
  name: lowest_works_on_adds_then_remove
  nameWithType: OutstandingMessageCacheTests.lowest_works_on_adds_then_remove
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_works_on_adds_then_remove
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_on_empty_cache_returns_max*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_on_empty_cache_returns_max
  isExternal: false
  name: lowest_on_empty_cache_returns_max
  nameWithType: OutstandingMessageCacheTests.lowest_on_empty_cache_returns_max
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.lowest_on_empty_cache_returns_max
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.get_expired_messages_returns_max_value_on_empty_cache*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.get_expired_messages_returns_max_value_on_empty_cache
  isExternal: false
  name: get_expired_messages_returns_max_value_on_empty_cache
  nameWithType: OutstandingMessageCacheTests.get_expired_messages_returns_max_value_on_empty_cache
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.get_expired_messages_returns_max_value_on_empty_cache
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list
  isExternal: false
  name: message_that_expires_is_included_in_expired_list
  nameWithType: OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list_with_another_that_should_not*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list_with_another_that_should_not
  isExternal: false
  name: message_that_expires_is_included_in_expired_list_with_another_that_should_not
  nameWithType: OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list_with_another_that_should_not
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_expires_is_included_in_expired_list_with_another_that_should_not
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_is_removed_does_not_show_up_in_expired_list*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_is_removed_does_not_show_up_in_expired_list
  isExternal: false
  name: message_that_is_removed_does_not_show_up_in_expired_list
  nameWithType: OutstandingMessageCacheTests.message_that_is_removed_does_not_show_up_in_expired_list
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_is_removed_does_not_show_up_in_expired_list
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_first_message_and_have_removed_from_time*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_first_message_and_have_removed_from_time
  isExternal: false
  name: can_remove_non_first_message_and_have_removed_from_time
  nameWithType: OutstandingMessageCacheTests.can_remove_non_first_message_and_have_removed_from_time
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_non_first_message_and_have_removed_from_time
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_multiple_messages_same_time_different_ids*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_multiple_messages_same_time_different_ids
  isExternal: false
  name: can_add_multiple_messages_same_time_different_ids
  nameWithType: OutstandingMessageCacheTests.can_add_multiple_messages_same_time_different_ids
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_add_multiple_messages_same_time_different_ids
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_second_message_same_time_different_ids*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_second_message_same_time_different_ids
  isExternal: false
  name: can_remove_second_message_same_time_different_ids
  nameWithType: OutstandingMessageCacheTests.can_remove_second_message_same_time_different_ids
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.can_remove_second_message_same_time_different_ids
- uid: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_notexpired_is_not_included_in_expired_list*
  commentId: Overload:EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_notexpired_is_not_included_in_expired_list
  isExternal: false
  name: message_that_notexpired_is_not_included_in_expired_list
  nameWithType: OutstandingMessageCacheTests.message_that_notexpired_is_not_included_in_expired_list
  fullName: EventStore.Core.Tests.Services.PersistentSubscription.OutstandingMessageCacheTests.message_that_notexpired_is_not_included_in_expired_list

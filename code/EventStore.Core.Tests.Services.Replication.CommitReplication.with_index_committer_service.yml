### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  commentId: T:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  id: with_index_committer_service
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication
  children:
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._commitCount
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._eventStreamId
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._expectedCommitReplicatedMessages
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._handledMessages
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._indexCommitter
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._publisher
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._replicationCheckpoint
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._replicationPosition
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._service
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._timeoutSeconds
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._writerCheckpoint
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingCommit(System.Int64,System.Int64,System.Int64)
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepare(System.Int64,System.Int64)
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepares(System.Int64,System.Int64[])
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeMaster
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeSlave
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeUnknown
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureSetUp
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureTearDown
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.When
  langs:
  - csharp
  - vb
  name: with_index_committer_service
  nameWithType: with_index_committer_service
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  type: Class
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: with_index_committer_service
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 15
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: 'public abstract class with_index_committer_service : object'
    content.vb: >-
      Public MustInherit Class with_index_committer_service

          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.Core.Tests.Services.Replication.CommitReplication.when_3_node_cluster_receives_1_commit_ack
  - EventStore.Core.Tests.Services.Replication.CommitReplication.when_3_node_cluster_receives_2_commit_acks
  - EventStore.Core.Tests.Services.Replication.CommitReplication.when_3_node_cluster_receives_2_commit_acks_for_positions_lower_than_checkpoint
  - EventStore.Core.Tests.Services.Replication.CommitReplication.when_3_node_cluster_receives_multiple_acks_for_different_positions
  - EventStore.Core.Tests.Services.Replication.CommitReplication.when_3_node_cluster_receives_multiple_acks_for_different_positions_out_of_order
  - EventStore.Core.Tests.Services.Replication.CommitReplication.when_3_node_cluster_receives_multiple_acks_for_same_positions
  - EventStore.Core.Tests.Services.Replication.CommitReplication.when_master_node_in_3_node_cluster_with_outstanding_commit_acks_becomes_unknown
  - EventStore.Core.Tests.Services.Replication.CommitReplication.when_single_node_cluster_receives_commit_ack_for_multiple_prepares
  - EventStore.Core.Tests.Services.Replication.CommitReplication.when_single_node_receives_commit_ack
  - EventStore.Core.Tests.Services.Replication.CommitReplication.when_slave_node_in_3_node_cluster_receives_commit_ack
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._timeoutSeconds
  commentId: F:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._timeoutSeconds
  id: _timeoutSeconds
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: _timeoutSeconds
  nameWithType: with_index_committer_service._timeoutSeconds
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._timeoutSeconds
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _timeoutSeconds
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 17
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected const int _timeoutSeconds = null
    return:
      type: System.Int32
    content.vb: Protected Const _timeoutSeconds As Integer = Nothing
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._eventStreamId
  commentId: F:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._eventStreamId
  id: _eventStreamId
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: _eventStreamId
  nameWithType: with_index_committer_service._eventStreamId
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._eventStreamId
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _eventStreamId
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 18
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected string _eventStreamId
    return:
      type: System.String
    content.vb: Protected _eventStreamId As String
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._commitCount
  commentId: F:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._commitCount
  id: _commitCount
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: _commitCount
  nameWithType: with_index_committer_service._commitCount
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._commitCount
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _commitCount
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 19
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected int _commitCount
    return:
      type: System.Int32
    content.vb: Protected _commitCount As Integer
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._replicationPosition
  commentId: F:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._replicationPosition
  id: _replicationPosition
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: _replicationPosition
  nameWithType: with_index_committer_service._replicationPosition
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._replicationPosition
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _replicationPosition
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 20
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected long _replicationPosition
    return:
      type: System.Int64
    content.vb: Protected _replicationPosition As Long
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._replicationCheckpoint
  commentId: F:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._replicationCheckpoint
  id: _replicationCheckpoint
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: _replicationCheckpoint
  nameWithType: with_index_committer_service._replicationCheckpoint
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._replicationCheckpoint
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _replicationCheckpoint
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 22
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected ICheckpoint _replicationCheckpoint
    return:
      type: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
    content.vb: Protected _replicationCheckpoint As ICheckpoint
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._writerCheckpoint
  commentId: F:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._writerCheckpoint
  id: _writerCheckpoint
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: _writerCheckpoint
  nameWithType: with_index_committer_service._writerCheckpoint
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._writerCheckpoint
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _writerCheckpoint
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 23
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected ICheckpoint _writerCheckpoint
    return:
      type: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
    content.vb: Protected _writerCheckpoint As ICheckpoint
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._publisher
  commentId: F:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._publisher
  id: _publisher
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: _publisher
  nameWithType: with_index_committer_service._publisher
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._publisher
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _publisher
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 24
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected InMemoryBus _publisher
    return:
      type: EventStore.Core.Bus.InMemoryBus
    content.vb: Protected _publisher As InMemoryBus
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._handledMessages
  commentId: F:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._handledMessages
  id: _handledMessages
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: _handledMessages
  nameWithType: with_index_committer_service._handledMessages
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._handledMessages
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _handledMessages
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 25
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected List<StorageMessage.CommitReplicated> _handledMessages
    return:
      type: List{EventStore.Core.Messages.StorageMessage.CommitReplicated}
    content.vb: Protected _handledMessages As List(Of StorageMessage.CommitReplicated)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._service
  commentId: F:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._service
  id: _service
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: _service
  nameWithType: with_index_committer_service._service
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._service
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _service
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 27
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected IndexCommitterService _service
    return:
      type: EventStore.Core.Services.Storage.IndexCommitterService
    content.vb: Protected _service As IndexCommitterService
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._indexCommitter
  commentId: F:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._indexCommitter
  id: _indexCommitter
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: _indexCommitter
  nameWithType: with_index_committer_service._indexCommitter
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._indexCommitter
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _indexCommitter
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 28
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected FakeIndexCommitter _indexCommitter
    return:
      type: EventStore.Core.Tests.Services.Replication.CommitReplication.FakeIndexCommitter
    content.vb: Protected _indexCommitter As FakeIndexCommitter
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._expectedCommitReplicatedMessages
  commentId: F:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._expectedCommitReplicatedMessages
  id: _expectedCommitReplicatedMessages
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: _expectedCommitReplicatedMessages
  nameWithType: with_index_committer_service._expectedCommitReplicatedMessages
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service._expectedCommitReplicatedMessages
  type: Field
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: _expectedCommitReplicatedMessages
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 30
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected int _expectedCommitReplicatedMessages
    return:
      type: System.Int32
    content.vb: Protected _expectedCommitReplicatedMessages As Integer
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureSetUp
  commentId: M:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureSetUp
  id: TestFixtureSetUp
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: TestFixtureSetUp()
  nameWithType: with_index_committer_service.TestFixtureSetUp()
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureSetUp()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TestFixtureSetUp
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 32
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: public virtual void TestFixtureSetUp()
    content.vb: Public Overridable Sub TestFixtureSetUp
  overload: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureSetUp*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureTearDown
  commentId: M:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureTearDown
  id: TestFixtureTearDown
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: TestFixtureTearDown()
  nameWithType: with_index_committer_service.TestFixtureTearDown()
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureTearDown()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TestFixtureTearDown
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 44
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: public virtual void TestFixtureTearDown()
    content.vb: Public Overridable Sub TestFixtureTearDown
  overload: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureTearDown*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.When
  commentId: M:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.When
  id: When
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: When()
  nameWithType: with_index_committer_service.When()
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.When()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: When
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 50
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: public abstract void When()
    content.vb: Public MustOverride Sub When
  overload: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.When*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepare(System.Int64,System.Int64)
  commentId: M:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepare(System.Int64,System.Int64)
  id: AddPendingPrepare(System.Int64,System.Int64)
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: AddPendingPrepare(Int64, Int64)
  nameWithType: with_index_committer_service.AddPendingPrepare(Int64, Int64)
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepare(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AddPendingPrepare
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 52
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected void AddPendingPrepare(long transactionPosition, long postPosition = null)
    parameters:
    - id: transactionPosition
      type: System.Int64
    - id: postPosition
      type: System.Int64
    content.vb: Protected Sub AddPendingPrepare(transactionPosition As Long, postPosition As Long = Nothing)
  overload: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepare*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepares(System.Int64,System.Int64[])
  commentId: M:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepares(System.Int64,System.Int64[])
  id: AddPendingPrepares(System.Int64,System.Int64[])
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: AddPendingPrepares(Int64, Int64[])
  nameWithType: with_index_committer_service.AddPendingPrepares(Int64, Int64[])
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepares(System.Int64, System.Int64[])
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AddPendingPrepares
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 59
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected void AddPendingPrepares(long transactionPosition, long[] logPositions)
    parameters:
    - id: transactionPosition
      type: System.Int64
    - id: logPositions
      type: System.Int64[]
    content.vb: Protected Sub AddPendingPrepares(transactionPosition As Long, logPositions As Long())
  overload: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepares*
  nameWithType.vb: with_index_committer_service.AddPendingPrepares(Int64, Int64())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepares(System.Int64, System.Int64())
  name.vb: AddPendingPrepares(Int64, Int64())
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingCommit(System.Int64,System.Int64,System.Int64)
  commentId: M:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingCommit(System.Int64,System.Int64,System.Int64)
  id: AddPendingCommit(System.Int64,System.Int64,System.Int64)
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: AddPendingCommit(Int64, Int64, Int64)
  nameWithType: with_index_committer_service.AddPendingCommit(Int64, Int64, Int64)
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingCommit(System.Int64, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AddPendingCommit
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 77
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected void AddPendingCommit(long transactionPosition, long logPosition, long postPosition = null)
    parameters:
    - id: transactionPosition
      type: System.Int64
    - id: logPosition
      type: System.Int64
    - id: postPosition
      type: System.Int64
    content.vb: Protected Sub AddPendingCommit(transactionPosition As Long, logPosition As Long, postPosition As Long = Nothing)
  overload: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingCommit*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeMaster
  commentId: M:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeMaster
  id: BecomeMaster
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: BecomeMaster()
  nameWithType: with_index_committer_service.BecomeMaster()
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeMaster()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: BecomeMaster
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 84
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected void BecomeMaster()
    content.vb: Protected Sub BecomeMaster
  overload: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeMaster*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeUnknown
  commentId: M:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeUnknown
  id: BecomeUnknown
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: BecomeUnknown()
  nameWithType: with_index_committer_service.BecomeUnknown()
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeUnknown()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: BecomeUnknown
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 89
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected void BecomeUnknown()
    content.vb: Protected Sub BecomeUnknown
  overload: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeUnknown*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeSlave
  commentId: M:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeSlave
  id: BecomeSlave
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service
  langs:
  - csharp
  - vb
  name: BecomeSlave()
  nameWithType: with_index_committer_service.BecomeSlave()
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeSlave()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: BecomeSlave
    path: ../EventStore/src/EventStore.Core.Tests/Services/Replication/CommitReplication/with_index_committer_service.cs
    startLine: 94
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Replication.CommitReplication
  syntax:
    content: protected void BecomeSlave()
    content.vb: Protected Sub BecomeSlave
  overload: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeSlave*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication
  commentId: N:EventStore.Core.Tests.Services.Replication.CommitReplication
  isExternal: false
  name: EventStore.Core.Tests.Services.Replication.CommitReplication
  nameWithType: EventStore.Core.Tests.Services.Replication.CommitReplication
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<with_index_committer_service>()
  nameWithType: ProtobufExtensions.Serialize<with_index_committer_service>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of with_index_committer_service)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service)()
  name.vb: Serialize(Of with_index_committer_service)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<with_index_committer_service>
    nameWithType: ProtobufExtensions.Serialize<with_index_committer_service>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of with_index_committer_service)
    nameWithType: ProtobufExtensions.Serialize(Of with_index_committer_service)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<with_index_committer_service>()
  nameWithType: ProtobufExtensions.SerializeToArray<with_index_committer_service>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of with_index_committer_service)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service)()
  name.vb: SerializeToArray(Of with_index_committer_service)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<with_index_committer_service>
    nameWithType: ProtobufExtensions.SerializeToArray<with_index_committer_service>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of with_index_committer_service)
    nameWithType: ProtobufExtensions.SerializeToArray(Of with_index_committer_service)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
  commentId: T:EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
  parent: EventStore.Core.TransactionLog.Checkpoint
  isExternal: false
  name: ICheckpoint
  nameWithType: ICheckpoint
  fullName: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
- uid: EventStore.Core.TransactionLog.Checkpoint
  commentId: N:EventStore.Core.TransactionLog.Checkpoint
  isExternal: false
  name: EventStore.Core.TransactionLog.Checkpoint
  nameWithType: EventStore.Core.TransactionLog.Checkpoint
  fullName: EventStore.Core.TransactionLog.Checkpoint
- uid: EventStore.Core.Bus.InMemoryBus
  commentId: T:EventStore.Core.Bus.InMemoryBus
  parent: EventStore.Core.Bus
  isExternal: false
  name: InMemoryBus
  nameWithType: InMemoryBus
  fullName: EventStore.Core.Bus.InMemoryBus
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  isExternal: false
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: List{EventStore.Core.Messages.StorageMessage.CommitReplicated}
  commentId: '!:List{EventStore.Core.Messages.StorageMessage.CommitReplicated}'
  definition: List`1
  name: List<StorageMessage.CommitReplicated>
  nameWithType: List<StorageMessage.CommitReplicated>
  fullName: List<EventStore.Core.Messages.StorageMessage.CommitReplicated>
  nameWithType.vb: List(Of StorageMessage.CommitReplicated)
  fullName.vb: List(Of EventStore.Core.Messages.StorageMessage.CommitReplicated)
  name.vb: List(Of StorageMessage.CommitReplicated)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.CommitReplicated
    name: StorageMessage.CommitReplicated
    nameWithType: StorageMessage.CommitReplicated
    fullName: EventStore.Core.Messages.StorageMessage.CommitReplicated
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.CommitReplicated
    name: StorageMessage.CommitReplicated
    nameWithType: StorageMessage.CommitReplicated
    fullName: EventStore.Core.Messages.StorageMessage.CommitReplicated
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.IndexCommitterService
  commentId: T:EventStore.Core.Services.Storage.IndexCommitterService
  parent: EventStore.Core.Services.Storage
  isExternal: false
  name: IndexCommitterService
  nameWithType: IndexCommitterService
  fullName: EventStore.Core.Services.Storage.IndexCommitterService
- uid: EventStore.Core.Services.Storage
  commentId: N:EventStore.Core.Services.Storage
  isExternal: false
  name: EventStore.Core.Services.Storage
  nameWithType: EventStore.Core.Services.Storage
  fullName: EventStore.Core.Services.Storage
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.FakeIndexCommitter
  commentId: T:EventStore.Core.Tests.Services.Replication.CommitReplication.FakeIndexCommitter
  parent: EventStore.Core.Tests.Services.Replication.CommitReplication
  isExternal: false
  name: FakeIndexCommitter
  nameWithType: FakeIndexCommitter
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.FakeIndexCommitter
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureSetUp*
  commentId: Overload:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureSetUp
  isExternal: false
  name: TestFixtureSetUp
  nameWithType: with_index_committer_service.TestFixtureSetUp
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureSetUp
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureTearDown*
  commentId: Overload:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureTearDown
  isExternal: false
  name: TestFixtureTearDown
  nameWithType: with_index_committer_service.TestFixtureTearDown
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.TestFixtureTearDown
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.When*
  commentId: Overload:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.When
  isExternal: false
  name: When
  nameWithType: with_index_committer_service.When
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.When
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepare*
  commentId: Overload:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepare
  isExternal: false
  name: AddPendingPrepare
  nameWithType: with_index_committer_service.AddPendingPrepare
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepare
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepares*
  commentId: Overload:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepares
  isExternal: false
  name: AddPendingPrepares
  nameWithType: with_index_committer_service.AddPendingPrepares
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingPrepares
- uid: System.Int64[]
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  nameWithType.vb: Int64()
  fullName.vb: System.Int64()
  name.vb: Int64()
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingCommit*
  commentId: Overload:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingCommit
  isExternal: false
  name: AddPendingCommit
  nameWithType: with_index_committer_service.AddPendingCommit
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.AddPendingCommit
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeMaster*
  commentId: Overload:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeMaster
  isExternal: false
  name: BecomeMaster
  nameWithType: with_index_committer_service.BecomeMaster
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeMaster
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeUnknown*
  commentId: Overload:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeUnknown
  isExternal: false
  name: BecomeUnknown
  nameWithType: with_index_committer_service.BecomeUnknown
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeUnknown
- uid: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeSlave*
  commentId: Overload:EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeSlave
  isExternal: false
  name: BecomeSlave
  nameWithType: with_index_committer_service.BecomeSlave
  fullName: EventStore.Core.Tests.Services.Replication.CommitReplication.with_index_committer_service.BecomeSlave

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex
  commentId: T:EventStore.Core.Tests.Services.Storage.FakeTableIndex
  id: FakeTableIndex
  parent: EventStore.Core.Tests.Services.Storage
  children:
  - EventStore.Core.Tests.Services.Storage.FakeTableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
  - EventStore.Core.Tests.Services.Storage.FakeTableIndex.AddEntries(System.Int64,IList{EventStore.Core.Index.IndexKey})
  - EventStore.Core.Tests.Services.Storage.FakeTableIndex.Close(System.Boolean)
  - EventStore.Core.Tests.Services.Storage.FakeTableIndex.CommitCheckpoint
  - EventStore.Core.Tests.Services.Storage.FakeTableIndex.GetRange(System.String,System.Int64,System.Int64,System.Nullable{System.Int32})
  - EventStore.Core.Tests.Services.Storage.FakeTableIndex.Initialize(System.Int64)
  - EventStore.Core.Tests.Services.Storage.FakeTableIndex.PrepareCheckpoint
  - EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  - EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  - EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
  langs:
  - csharp
  - vb
  name: FakeTableIndex
  nameWithType: FakeTableIndex
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex
  type: Class
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: FakeTableIndex
    path: ../EventStore/src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
    startLine: 6
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Storage
  syntax:
    content: 'public class FakeTableIndex : object, ITableIndex'
    content.vb: >-
      Public Class FakeTableIndex

          Inherits Object

          Implements ITableIndex
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Index.ITableIndex
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Tests.Services.Storage.FakeTableIndex.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Tests.Services.Storage.FakeTableIndex.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.PrepareCheckpoint
  commentId: P:EventStore.Core.Tests.Services.Storage.FakeTableIndex.PrepareCheckpoint
  id: PrepareCheckpoint
  parent: EventStore.Core.Tests.Services.Storage.FakeTableIndex
  langs:
  - csharp
  - vb
  name: PrepareCheckpoint
  nameWithType: FakeTableIndex.PrepareCheckpoint
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.PrepareCheckpoint
  type: Property
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: PrepareCheckpoint
    path: ../EventStore/src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
    startLine: 10
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Storage
  syntax:
    content: public long PrepareCheckpoint { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property PrepareCheckpoint As Long
  overload: EventStore.Core.Tests.Services.Storage.FakeTableIndex.PrepareCheckpoint*
  implements:
  - EventStore.Core.Index.ITableIndex.PrepareCheckpoint
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.CommitCheckpoint
  commentId: P:EventStore.Core.Tests.Services.Storage.FakeTableIndex.CommitCheckpoint
  id: CommitCheckpoint
  parent: EventStore.Core.Tests.Services.Storage.FakeTableIndex
  langs:
  - csharp
  - vb
  name: CommitCheckpoint
  nameWithType: FakeTableIndex.CommitCheckpoint
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.CommitCheckpoint
  type: Property
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CommitCheckpoint
    path: ../EventStore/src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
    startLine: 11
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Storage
  syntax:
    content: public long CommitCheckpoint { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property CommitCheckpoint As Long
  overload: EventStore.Core.Tests.Services.Storage.FakeTableIndex.CommitCheckpoint*
  implements:
  - EventStore.Core.Index.ITableIndex.CommitCheckpoint
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Initialize(System.Int64)
  commentId: M:EventStore.Core.Tests.Services.Storage.FakeTableIndex.Initialize(System.Int64)
  id: Initialize(System.Int64)
  parent: EventStore.Core.Tests.Services.Storage.FakeTableIndex
  langs:
  - csharp
  - vb
  name: Initialize(Int64)
  nameWithType: FakeTableIndex.Initialize(Int64)
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Initialize(System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Initialize
    path: ../EventStore/src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
    startLine: 13
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Storage
  syntax:
    content: public void Initialize(long chaserCheckpoint)
    parameters:
    - id: chaserCheckpoint
      type: System.Int64
    content.vb: Public Sub Initialize(chaserCheckpoint As Long)
  overload: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Initialize*
  implements:
  - EventStore.Core.Index.ITableIndex.Initialize(System.Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Close(System.Boolean)
  commentId: M:EventStore.Core.Tests.Services.Storage.FakeTableIndex.Close(System.Boolean)
  id: Close(System.Boolean)
  parent: EventStore.Core.Tests.Services.Storage.FakeTableIndex
  langs:
  - csharp
  - vb
  name: Close(Boolean)
  nameWithType: FakeTableIndex.Close(Boolean)
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Close(System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Close
    path: ../EventStore/src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
    startLine: 17
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Storage
  syntax:
    content: public void Close(bool removeFiles = true)
    parameters:
    - id: removeFiles
      type: System.Boolean
    content.vb: Public Sub Close(removeFiles As Boolean = True)
  overload: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Close*
  implements:
  - EventStore.Core.Index.ITableIndex.Close(System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
  commentId: M:EventStore.Core.Tests.Services.Storage.FakeTableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
  id: Add(System.Int64,System.String,System.Int64,System.Int64)
  parent: EventStore.Core.Tests.Services.Storage.FakeTableIndex
  langs:
  - csharp
  - vb
  name: Add(Int64, String, Int64, Int64)
  nameWithType: FakeTableIndex.Add(Int64, String, Int64, Int64)
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Add(System.Int64, System.String, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Add
    path: ../EventStore/src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
    startLine: 21
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Storage
  syntax:
    content: public void Add(long commitPos, string streamId, long version, long position)
    parameters:
    - id: commitPos
      type: System.Int64
    - id: streamId
      type: System.String
    - id: version
      type: System.Int64
    - id: position
      type: System.Int64
    content.vb: Public Sub Add(commitPos As Long, streamId As String, version As Long, position As Long)
  overload: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Add*
  implements:
  - EventStore.Core.Index.ITableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.AddEntries(System.Int64,IList{EventStore.Core.Index.IndexKey})
  commentId: M:EventStore.Core.Tests.Services.Storage.FakeTableIndex.AddEntries(System.Int64,IList{EventStore.Core.Index.IndexKey})
  id: AddEntries(System.Int64,IList{EventStore.Core.Index.IndexKey})
  parent: EventStore.Core.Tests.Services.Storage.FakeTableIndex
  langs:
  - csharp
  - vb
  name: AddEntries(Int64, IList<IndexKey>)
  nameWithType: FakeTableIndex.AddEntries(Int64, IList<IndexKey>)
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.AddEntries(System.Int64, IList<EventStore.Core.Index.IndexKey>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AddEntries
    path: ../EventStore/src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
    startLine: 26
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Storage
  syntax:
    content: public void AddEntries(long commitPos, IList<IndexKey> entries)
    parameters:
    - id: commitPos
      type: System.Int64
    - id: entries
      type: IList{EventStore.Core.Index.IndexKey}
    content.vb: Public Sub AddEntries(commitPos As Long, entries As IList(Of IndexKey))
  overload: EventStore.Core.Tests.Services.Storage.FakeTableIndex.AddEntries*
  nameWithType.vb: FakeTableIndex.AddEntries(Int64, IList(Of IndexKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Services.Storage.FakeTableIndex.AddEntries(System.Int64, IList(Of EventStore.Core.Index.IndexKey))
  name.vb: AddEntries(Int64, IList(Of IndexKey))
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
  commentId: M:EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
  id: TryGetOneValue(System.String,System.Int64,System.Int64@)
  parent: EventStore.Core.Tests.Services.Storage.FakeTableIndex
  langs:
  - csharp
  - vb
  name: TryGetOneValue(String, Int64, out Int64)
  nameWithType: FakeTableIndex.TryGetOneValue(String, Int64, out Int64)
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOneValue(System.String, System.Int64, out System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TryGetOneValue
    path: ../EventStore/src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
    startLine: 31
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Storage
  syntax:
    content: public bool TryGetOneValue(string streamId, long version, out long position)
    parameters:
    - id: streamId
      type: System.String
    - id: version
      type: System.Int64
    - id: position
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: Public Function TryGetOneValue(streamId As String, version As Long, ByRef position As Long) As Boolean
  overload: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOneValue*
  implements:
  - EventStore.Core.Index.ITableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
  nameWithType.vb: FakeTableIndex.TryGetOneValue(String, Int64, ByRef Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOneValue(System.String, System.Int64, ByRef System.Int64)
  name.vb: TryGetOneValue(String, Int64, ByRef Int64)
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  id: TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Tests.Services.Storage.FakeTableIndex
  langs:
  - csharp
  - vb
  name: TryGetLatestEntry(String, out IndexEntry)
  nameWithType: FakeTableIndex.TryGetLatestEntry(String, out IndexEntry)
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetLatestEntry(System.String, out EventStore.Core.Index.IndexEntry)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TryGetLatestEntry
    path: ../EventStore/src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
    startLine: 37
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Storage
  syntax:
    content: public bool TryGetLatestEntry(string streamId, out IndexEntry entry)
    parameters:
    - id: streamId
      type: System.String
    - id: entry
      type: EventStore.Core.Index.IndexEntry
    return:
      type: System.Boolean
    content.vb: Public Function TryGetLatestEntry(streamId As String, ByRef entry As IndexEntry) As Boolean
  overload: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetLatestEntry*
  implements:
  - EventStore.Core.Index.ITableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  nameWithType.vb: FakeTableIndex.TryGetLatestEntry(String, ByRef IndexEntry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetLatestEntry(System.String, ByRef EventStore.Core.Index.IndexEntry)
  name.vb: TryGetLatestEntry(String, ByRef IndexEntry)
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  id: TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Tests.Services.Storage.FakeTableIndex
  langs:
  - csharp
  - vb
  name: TryGetOldestEntry(String, out IndexEntry)
  nameWithType: FakeTableIndex.TryGetOldestEntry(String, out IndexEntry)
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOldestEntry(System.String, out EventStore.Core.Index.IndexEntry)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TryGetOldestEntry
    path: ../EventStore/src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
    startLine: 43
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Storage
  syntax:
    content: public bool TryGetOldestEntry(string streamId, out IndexEntry entry)
    parameters:
    - id: streamId
      type: System.String
    - id: entry
      type: EventStore.Core.Index.IndexEntry
    return:
      type: System.Boolean
    content.vb: Public Function TryGetOldestEntry(streamId As String, ByRef entry As IndexEntry) As Boolean
  overload: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOldestEntry*
  implements:
  - EventStore.Core.Index.ITableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  nameWithType.vb: FakeTableIndex.TryGetOldestEntry(String, ByRef IndexEntry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOldestEntry(System.String, ByRef EventStore.Core.Index.IndexEntry)
  name.vb: TryGetOldestEntry(String, ByRef IndexEntry)
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.GetRange(System.String,System.Int64,System.Int64,System.Nullable{System.Int32})
  commentId: M:EventStore.Core.Tests.Services.Storage.FakeTableIndex.GetRange(System.String,System.Int64,System.Int64,System.Nullable{System.Int32})
  id: GetRange(System.String,System.Int64,System.Int64,System.Nullable{System.Int32})
  parent: EventStore.Core.Tests.Services.Storage.FakeTableIndex
  langs:
  - csharp
  - vb
  name: GetRange(String, Int64, Int64, Nullable<Int32>)
  nameWithType: FakeTableIndex.GetRange(String, Int64, Int64, Nullable<Int32>)
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.GetRange(System.String, System.Int64, System.Int64, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetRange
    path: ../EventStore/src/EventStore.Core.Tests/Services/Storage/FakeTableIndex.cs
    startLine: 49
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Storage
  syntax:
    content: public IEnumerable<IndexEntry> GetRange(string streamId, long startVersion, long endVersion, int ? limit = null)
    parameters:
    - id: streamId
      type: System.String
    - id: startVersion
      type: System.Int64
    - id: endVersion
      type: System.Int64
    - id: limit
      type: System.Nullable{System.Int32}
    return:
      type: IEnumerable{EventStore.Core.Index.IndexEntry}
    content.vb: Public Function GetRange(streamId As String, startVersion As Long, endVersion As Long, limit As Integer? = Nothing) As IEnumerable(Of IndexEntry)
  overload: EventStore.Core.Tests.Services.Storage.FakeTableIndex.GetRange*
  nameWithType.vb: FakeTableIndex.GetRange(String, Int64, Int64, Nullable(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Services.Storage.FakeTableIndex.GetRange(System.String, System.Int64, System.Int64, System.Nullable(Of System.Int32))
  name.vb: GetRange(String, Int64, Int64, Nullable(Of Int32))
references:
- uid: EventStore.Core.Tests.Services.Storage
  commentId: N:EventStore.Core.Tests.Services.Storage
  isExternal: false
  name: EventStore.Core.Tests.Services.Storage
  nameWithType: EventStore.Core.Tests.Services.Storage
  fullName: EventStore.Core.Tests.Services.Storage
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Index.ITableIndex
  commentId: T:EventStore.Core.Index.ITableIndex
  parent: EventStore.Core.Index
  isExternal: false
  name: ITableIndex
  nameWithType: ITableIndex
  fullName: EventStore.Core.Index.ITableIndex
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<FakeTableIndex>()
  nameWithType: ProtobufExtensions.Serialize<FakeTableIndex>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Services.Storage.FakeTableIndex>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of FakeTableIndex)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Services.Storage.FakeTableIndex)()
  name.vb: Serialize(Of FakeTableIndex)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<FakeTableIndex>
    nameWithType: ProtobufExtensions.Serialize<FakeTableIndex>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Services.Storage.FakeTableIndex>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of FakeTableIndex)
    nameWithType: ProtobufExtensions.Serialize(Of FakeTableIndex)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Services.Storage.FakeTableIndex)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<FakeTableIndex>()
  nameWithType: ProtobufExtensions.SerializeToArray<FakeTableIndex>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Services.Storage.FakeTableIndex>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of FakeTableIndex)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Services.Storage.FakeTableIndex)()
  name.vb: SerializeToArray(Of FakeTableIndex)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<FakeTableIndex>
    nameWithType: ProtobufExtensions.SerializeToArray<FakeTableIndex>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Services.Storage.FakeTableIndex>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of FakeTableIndex)
    nameWithType: ProtobufExtensions.SerializeToArray(Of FakeTableIndex)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Services.Storage.FakeTableIndex)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index
  commentId: N:EventStore.Core.Index
  isExternal: false
  name: EventStore.Core.Index
  nameWithType: EventStore.Core.Index
  fullName: EventStore.Core.Index
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.PrepareCheckpoint*
  commentId: Overload:EventStore.Core.Tests.Services.Storage.FakeTableIndex.PrepareCheckpoint
  isExternal: false
  name: PrepareCheckpoint
  nameWithType: FakeTableIndex.PrepareCheckpoint
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.PrepareCheckpoint
- uid: EventStore.Core.Index.ITableIndex.PrepareCheckpoint
  commentId: P:EventStore.Core.Index.ITableIndex.PrepareCheckpoint
  parent: EventStore.Core.Index.ITableIndex
  isExternal: false
  name: PrepareCheckpoint
  nameWithType: ITableIndex.PrepareCheckpoint
  fullName: EventStore.Core.Index.ITableIndex.PrepareCheckpoint
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.CommitCheckpoint*
  commentId: Overload:EventStore.Core.Tests.Services.Storage.FakeTableIndex.CommitCheckpoint
  isExternal: false
  name: CommitCheckpoint
  nameWithType: FakeTableIndex.CommitCheckpoint
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.CommitCheckpoint
- uid: EventStore.Core.Index.ITableIndex.CommitCheckpoint
  commentId: P:EventStore.Core.Index.ITableIndex.CommitCheckpoint
  parent: EventStore.Core.Index.ITableIndex
  isExternal: false
  name: CommitCheckpoint
  nameWithType: ITableIndex.CommitCheckpoint
  fullName: EventStore.Core.Index.ITableIndex.CommitCheckpoint
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Initialize*
  commentId: Overload:EventStore.Core.Tests.Services.Storage.FakeTableIndex.Initialize
  isExternal: false
  name: Initialize
  nameWithType: FakeTableIndex.Initialize
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Initialize
- uid: EventStore.Core.Index.ITableIndex.Initialize(System.Int64)
  commentId: M:EventStore.Core.Index.ITableIndex.Initialize(System.Int64)
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: Initialize(Int64)
  nameWithType: ITableIndex.Initialize(Int64)
  fullName: EventStore.Core.Index.ITableIndex.Initialize(System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.Initialize(System.Int64)
    name: Initialize
    nameWithType: ITableIndex.Initialize
    fullName: EventStore.Core.Index.ITableIndex.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.Initialize(System.Int64)
    name: Initialize
    nameWithType: ITableIndex.Initialize
    fullName: EventStore.Core.Index.ITableIndex.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Close*
  commentId: Overload:EventStore.Core.Tests.Services.Storage.FakeTableIndex.Close
  isExternal: false
  name: Close
  nameWithType: FakeTableIndex.Close
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Close
- uid: EventStore.Core.Index.ITableIndex.Close(System.Boolean)
  commentId: M:EventStore.Core.Index.ITableIndex.Close(System.Boolean)
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: Close(Boolean)
  nameWithType: ITableIndex.Close(Boolean)
  fullName: EventStore.Core.Index.ITableIndex.Close(System.Boolean)
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.Close(System.Boolean)
    name: Close
    nameWithType: ITableIndex.Close
    fullName: EventStore.Core.Index.ITableIndex.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.Close(System.Boolean)
    name: Close
    nameWithType: ITableIndex.Close
    fullName: EventStore.Core.Index.ITableIndex.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Add*
  commentId: Overload:EventStore.Core.Tests.Services.Storage.FakeTableIndex.Add
  isExternal: false
  name: Add
  nameWithType: FakeTableIndex.Add
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.Add
- uid: EventStore.Core.Index.ITableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
  commentId: M:EventStore.Core.Index.ITableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: Add(Int64, String, Int64, Int64)
  nameWithType: ITableIndex.Add(Int64, String, Int64, Int64)
  fullName: EventStore.Core.Index.ITableIndex.Add(System.Int64, System.String, System.Int64, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
    name: Add
    nameWithType: ITableIndex.Add
    fullName: EventStore.Core.Index.ITableIndex.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
    name: Add
    nameWithType: ITableIndex.Add
    fullName: EventStore.Core.Index.ITableIndex.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.AddEntries*
  commentId: Overload:EventStore.Core.Tests.Services.Storage.FakeTableIndex.AddEntries
  isExternal: false
  name: AddEntries
  nameWithType: FakeTableIndex.AddEntries
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.AddEntries
- uid: IList{EventStore.Core.Index.IndexKey}
  commentId: '!:IList{EventStore.Core.Index.IndexKey}'
  definition: IList`1
  name: IList<IndexKey>
  nameWithType: IList<IndexKey>
  fullName: IList<EventStore.Core.Index.IndexKey>
  nameWithType.vb: IList(Of IndexKey)
  fullName.vb: IList(Of EventStore.Core.Index.IndexKey)
  name.vb: IList(Of IndexKey)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexKey
    name: IndexKey
    nameWithType: IndexKey
    fullName: EventStore.Core.Index.IndexKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexKey
    name: IndexKey
    nameWithType: IndexKey
    fullName: EventStore.Core.Index.IndexKey
  - name: )
    nameWithType: )
    fullName: )
- uid: IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOneValue*
  commentId: Overload:EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOneValue
  isExternal: false
  name: TryGetOneValue
  nameWithType: FakeTableIndex.TryGetOneValue
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOneValue
- uid: EventStore.Core.Index.ITableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
  commentId: M:EventStore.Core.Index.ITableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: TryGetOneValue(String, Int64, Int64)
  nameWithType: ITableIndex.TryGetOneValue(String, Int64, Int64)
  fullName: EventStore.Core.Index.ITableIndex.TryGetOneValue(System.String, System.Int64, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
    name: TryGetOneValue
    nameWithType: ITableIndex.TryGetOneValue
    fullName: EventStore.Core.Index.ITableIndex.TryGetOneValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
    name: TryGetOneValue
    nameWithType: ITableIndex.TryGetOneValue
    fullName: EventStore.Core.Index.ITableIndex.TryGetOneValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetLatestEntry*
  commentId: Overload:EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetLatestEntry
  isExternal: false
  name: TryGetLatestEntry
  nameWithType: FakeTableIndex.TryGetLatestEntry
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetLatestEntry
- uid: EventStore.Core.Index.ITableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.ITableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: TryGetLatestEntry(String, IndexEntry)
  nameWithType: ITableIndex.TryGetLatestEntry(String, IndexEntry)
  fullName: EventStore.Core.Index.ITableIndex.TryGetLatestEntry(System.String, EventStore.Core.Index.IndexEntry)
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
    name: TryGetLatestEntry
    nameWithType: ITableIndex.TryGetLatestEntry
    fullName: EventStore.Core.Index.ITableIndex.TryGetLatestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
    name: TryGetLatestEntry
    nameWithType: ITableIndex.TryGetLatestEntry
    fullName: EventStore.Core.Index.ITableIndex.TryGetLatestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IndexEntry
  commentId: T:EventStore.Core.Index.IndexEntry
  parent: EventStore.Core.Index
  isExternal: false
  name: IndexEntry
  nameWithType: IndexEntry
  fullName: EventStore.Core.Index.IndexEntry
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOldestEntry*
  commentId: Overload:EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOldestEntry
  isExternal: false
  name: TryGetOldestEntry
  nameWithType: FakeTableIndex.TryGetOldestEntry
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.TryGetOldestEntry
- uid: EventStore.Core.Index.ITableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.ITableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: TryGetOldestEntry(String, IndexEntry)
  nameWithType: ITableIndex.TryGetOldestEntry(String, IndexEntry)
  fullName: EventStore.Core.Index.ITableIndex.TryGetOldestEntry(System.String, EventStore.Core.Index.IndexEntry)
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
    name: TryGetOldestEntry
    nameWithType: ITableIndex.TryGetOldestEntry
    fullName: EventStore.Core.Index.ITableIndex.TryGetOldestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
    name: TryGetOldestEntry
    nameWithType: ITableIndex.TryGetOldestEntry
    fullName: EventStore.Core.Index.ITableIndex.TryGetOldestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.Storage.FakeTableIndex.GetRange*
  commentId: Overload:EventStore.Core.Tests.Services.Storage.FakeTableIndex.GetRange
  isExternal: false
  name: GetRange
  nameWithType: FakeTableIndex.GetRange
  fullName: EventStore.Core.Tests.Services.Storage.FakeTableIndex.GetRange
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{EventStore.Core.Index.IndexEntry}
  commentId: '!:IEnumerable{EventStore.Core.Index.IndexEntry}'
  definition: IEnumerable`1
  name: IEnumerable<IndexEntry>
  nameWithType: IEnumerable<IndexEntry>
  fullName: IEnumerable<EventStore.Core.Index.IndexEntry>
  nameWithType.vb: IEnumerable(Of IndexEntry)
  fullName.vb: IEnumerable(Of EventStore.Core.Index.IndexEntry)
  name.vb: IEnumerable(Of IndexEntry)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

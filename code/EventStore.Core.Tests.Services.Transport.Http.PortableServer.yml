### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer
  commentId: T:EventStore.Core.Tests.Services.Transport.Http.PortableServer
  id: PortableServer
  parent: EventStore.Core.Tests.Services.Transport.Http
  children:
  - EventStore.Core.Tests.Services.Transport.Http.PortableServer.#ctor(IPEndPoint,System.Int32)
  - EventStore.Core.Tests.Services.Transport.Http.PortableServer.BuiltInClient
  - EventStore.Core.Tests.Services.Transport.Http.PortableServer.IsListening
  - EventStore.Core.Tests.Services.Transport.Http.PortableServer.Publish(EventStore.Core.Messaging.Message)
  - EventStore.Core.Tests.Services.Transport.Http.PortableServer.SetUp
  - EventStore.Core.Tests.Services.Transport.Http.PortableServer.StartServiceAndSendRequest(Action{EventStore.Core.Services.Transport.Http.HttpService},System.String,Func{EventStore.Transport.Http.HttpResponse,System.Boolean})
  - EventStore.Core.Tests.Services.Transport.Http.PortableServer.TearDown
  langs:
  - csharp
  - vb
  name: PortableServer
  nameWithType: PortableServer
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer
  type: Class
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: PortableServer
    path: ../EventStore/src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
    startLine: 14
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Transport.Http
  syntax:
    content: 'public class PortableServer : object'
    content.vb: >-
      Public Class PortableServer

          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Core.Tests.Services.Transport.Http.PortableServer.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Tests.Services.Transport.Http.PortableServer.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.IsListening
  commentId: P:EventStore.Core.Tests.Services.Transport.Http.PortableServer.IsListening
  id: IsListening
  parent: EventStore.Core.Tests.Services.Transport.Http.PortableServer
  langs:
  - csharp
  - vb
  name: IsListening
  nameWithType: PortableServer.IsListening
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.IsListening
  type: Property
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IsListening
    path: ../EventStore/src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
    startLine: 16
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Transport.Http
  syntax:
    content: public bool IsListening { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsListening As Boolean
  overload: EventStore.Core.Tests.Services.Transport.Http.PortableServer.IsListening*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.BuiltInClient
  commentId: P:EventStore.Core.Tests.Services.Transport.Http.PortableServer.BuiltInClient
  id: BuiltInClient
  parent: EventStore.Core.Tests.Services.Transport.Http.PortableServer
  langs:
  - csharp
  - vb
  name: BuiltInClient
  nameWithType: PortableServer.BuiltInClient
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.BuiltInClient
  type: Property
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: BuiltInClient
    path: ../EventStore/src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
    startLine: 24
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Transport.Http
  syntax:
    content: public IHttpClient BuiltInClient { get; }
    parameters: []
    return:
      type: EventStore.Transport.Http.Client.IHttpClient
    content.vb: Public ReadOnly Property BuiltInClient As IHttpClient
  overload: EventStore.Core.Tests.Services.Transport.Http.PortableServer.BuiltInClient*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.#ctor(IPEndPoint,System.Int32)
  commentId: M:EventStore.Core.Tests.Services.Transport.Http.PortableServer.#ctor(IPEndPoint,System.Int32)
  id: '#ctor(IPEndPoint,System.Int32)'
  parent: EventStore.Core.Tests.Services.Transport.Http.PortableServer
  langs:
  - csharp
  - vb
  name: PortableServer(IPEndPoint, Int32)
  nameWithType: PortableServer.PortableServer(IPEndPoint, Int32)
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.PortableServer(IPEndPoint, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
    startLine: 40
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Transport.Http
  syntax:
    content: public PortableServer(IPEndPoint serverEndPoint, int timeout = 10000)
    parameters:
    - id: serverEndPoint
      type: IPEndPoint
    - id: timeout
      type: System.Int32
    content.vb: Public Sub New(serverEndPoint As IPEndPoint, timeout As Integer = 10000)
  overload: EventStore.Core.Tests.Services.Transport.Http.PortableServer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.SetUp
  commentId: M:EventStore.Core.Tests.Services.Transport.Http.PortableServer.SetUp
  id: SetUp
  parent: EventStore.Core.Tests.Services.Transport.Http.PortableServer
  langs:
  - csharp
  - vb
  name: SetUp()
  nameWithType: PortableServer.SetUp()
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.SetUp()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: SetUp
    path: ../EventStore/src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
    startLine: 47
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Transport.Http
  syntax:
    content: public void SetUp()
    content.vb: Public Sub SetUp
  overload: EventStore.Core.Tests.Services.Transport.Http.PortableServer.SetUp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.TearDown
  commentId: M:EventStore.Core.Tests.Services.Transport.Http.PortableServer.TearDown
  id: TearDown
  parent: EventStore.Core.Tests.Services.Transport.Http.PortableServer
  langs:
  - csharp
  - vb
  name: TearDown()
  nameWithType: PortableServer.TearDown()
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.TearDown()
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TearDown
    path: ../EventStore/src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
    startLine: 67
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Transport.Http
  syntax:
    content: public void TearDown()
    content.vb: Public Sub TearDown
  overload: EventStore.Core.Tests.Services.Transport.Http.PortableServer.TearDown*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.Publish(EventStore.Core.Messaging.Message)
  commentId: M:EventStore.Core.Tests.Services.Transport.Http.PortableServer.Publish(EventStore.Core.Messaging.Message)
  id: Publish(EventStore.Core.Messaging.Message)
  parent: EventStore.Core.Tests.Services.Transport.Http.PortableServer
  langs:
  - csharp
  - vb
  name: Publish(Message)
  nameWithType: PortableServer.Publish(Message)
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.Publish(EventStore.Core.Messaging.Message)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Publish
    path: ../EventStore/src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
    startLine: 76
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Transport.Http
  syntax:
    content: public void Publish(Message message)
    parameters:
    - id: message
      type: EventStore.Core.Messaging.Message
    content.vb: Public Sub Publish(message As Message)
  overload: EventStore.Core.Tests.Services.Transport.Http.PortableServer.Publish*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.StartServiceAndSendRequest(Action{EventStore.Core.Services.Transport.Http.HttpService},System.String,Func{EventStore.Transport.Http.HttpResponse,System.Boolean})
  commentId: M:EventStore.Core.Tests.Services.Transport.Http.PortableServer.StartServiceAndSendRequest(Action{EventStore.Core.Services.Transport.Http.HttpService},System.String,Func{EventStore.Transport.Http.HttpResponse,System.Boolean})
  id: StartServiceAndSendRequest(Action{EventStore.Core.Services.Transport.Http.HttpService},System.String,Func{EventStore.Transport.Http.HttpResponse,System.Boolean})
  parent: EventStore.Core.Tests.Services.Transport.Http.PortableServer
  langs:
  - csharp
  - vb
  name: StartServiceAndSendRequest(Action<HttpService>, String, Func<HttpResponse, Boolean>)
  nameWithType: PortableServer.StartServiceAndSendRequest(Action<HttpService>, String, Func<HttpResponse, Boolean>)
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.StartServiceAndSendRequest(Action<EventStore.Core.Services.Transport.Http.HttpService>, System.String, Func<EventStore.Transport.Http.HttpResponse, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: StartServiceAndSendRequest
    path: ../EventStore/src/EventStore.Core.Tests/Services/Transport/Http/PortableServer.cs
    startLine: 81
  assemblies:
  - EventStore.Core.Tests
  namespace: EventStore.Core.Tests.Services.Transport.Http
  syntax:
    content: public Tuple<bool, string> StartServiceAndSendRequest(Action<HttpService> bootstrap, string requestUrl, Func<HttpResponse, bool> verifyResponse)
    parameters:
    - id: bootstrap
      type: Action{EventStore.Core.Services.Transport.Http.HttpService}
    - id: requestUrl
      type: System.String
    - id: verifyResponse
      type: Func{EventStore.Transport.Http.HttpResponse,System.Boolean}
    return:
      type: Tuple{System.Boolean,System.String}
    content.vb: Public Function StartServiceAndSendRequest(bootstrap As Action(Of HttpService), requestUrl As String, verifyResponse As Func(Of HttpResponse, Boolean)) As Tuple(Of Boolean, String)
  overload: EventStore.Core.Tests.Services.Transport.Http.PortableServer.StartServiceAndSendRequest*
  nameWithType.vb: PortableServer.StartServiceAndSendRequest(Action(Of HttpService), String, Func(Of HttpResponse, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Tests.Services.Transport.Http.PortableServer.StartServiceAndSendRequest(Action(Of EventStore.Core.Services.Transport.Http.HttpService), System.String, Func(Of EventStore.Transport.Http.HttpResponse, System.Boolean))
  name.vb: StartServiceAndSendRequest(Action(Of HttpService), String, Func(Of HttpResponse, Boolean))
references:
- uid: EventStore.Core.Tests.Services.Transport.Http
  commentId: N:EventStore.Core.Tests.Services.Transport.Http
  isExternal: false
  name: EventStore.Core.Tests.Services.Transport.Http
  nameWithType: EventStore.Core.Tests.Services.Transport.Http
  fullName: EventStore.Core.Tests.Services.Transport.Http
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<PortableServer>()
  nameWithType: ProtobufExtensions.Serialize<PortableServer>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Services.Transport.Http.PortableServer>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of PortableServer)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Services.Transport.Http.PortableServer)()
  name.vb: Serialize(Of PortableServer)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<PortableServer>
    nameWithType: ProtobufExtensions.Serialize<PortableServer>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Tests.Services.Transport.Http.PortableServer>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of PortableServer)
    nameWithType: ProtobufExtensions.Serialize(Of PortableServer)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Tests.Services.Transport.Http.PortableServer)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<PortableServer>()
  nameWithType: ProtobufExtensions.SerializeToArray<PortableServer>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Services.Transport.Http.PortableServer>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of PortableServer)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Services.Transport.Http.PortableServer)()
  name.vb: SerializeToArray(Of PortableServer)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<PortableServer>
    nameWithType: ProtobufExtensions.SerializeToArray<PortableServer>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Tests.Services.Transport.Http.PortableServer>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of PortableServer)
    nameWithType: ProtobufExtensions.SerializeToArray(Of PortableServer)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Tests.Services.Transport.Http.PortableServer)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.IsListening*
  commentId: Overload:EventStore.Core.Tests.Services.Transport.Http.PortableServer.IsListening
  isExternal: false
  name: IsListening
  nameWithType: PortableServer.IsListening
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.IsListening
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.BuiltInClient*
  commentId: Overload:EventStore.Core.Tests.Services.Transport.Http.PortableServer.BuiltInClient
  isExternal: false
  name: BuiltInClient
  nameWithType: PortableServer.BuiltInClient
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.BuiltInClient
- uid: EventStore.Transport.Http.Client.IHttpClient
  commentId: T:EventStore.Transport.Http.Client.IHttpClient
  parent: EventStore.Transport.Http.Client
  isExternal: false
  name: IHttpClient
  nameWithType: IHttpClient
  fullName: EventStore.Transport.Http.Client.IHttpClient
- uid: EventStore.Transport.Http.Client
  commentId: N:EventStore.Transport.Http.Client
  isExternal: false
  name: EventStore.Transport.Http.Client
  nameWithType: EventStore.Transport.Http.Client
  fullName: EventStore.Transport.Http.Client
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.#ctor*
  commentId: Overload:EventStore.Core.Tests.Services.Transport.Http.PortableServer.#ctor
  isExternal: false
  name: PortableServer
  nameWithType: PortableServer.PortableServer
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.PortableServer
- uid: IPEndPoint
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: IPEndPoint
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.SetUp*
  commentId: Overload:EventStore.Core.Tests.Services.Transport.Http.PortableServer.SetUp
  isExternal: false
  name: SetUp
  nameWithType: PortableServer.SetUp
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.SetUp
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.TearDown*
  commentId: Overload:EventStore.Core.Tests.Services.Transport.Http.PortableServer.TearDown
  isExternal: false
  name: TearDown
  nameWithType: PortableServer.TearDown
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.TearDown
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.Publish*
  commentId: Overload:EventStore.Core.Tests.Services.Transport.Http.PortableServer.Publish
  isExternal: false
  name: Publish
  nameWithType: PortableServer.Publish
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.Publish
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  isExternal: false
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Core.Tests.Services.Transport.Http.PortableServer.StartServiceAndSendRequest*
  commentId: Overload:EventStore.Core.Tests.Services.Transport.Http.PortableServer.StartServiceAndSendRequest
  isExternal: false
  name: StartServiceAndSendRequest
  nameWithType: PortableServer.StartServiceAndSendRequest
  fullName: EventStore.Core.Tests.Services.Transport.Http.PortableServer.StartServiceAndSendRequest
- uid: Action{EventStore.Core.Services.Transport.Http.HttpService}
  commentId: '!:Action{EventStore.Core.Services.Transport.Http.HttpService}'
  definition: Action`1
  name: Action<HttpService>
  nameWithType: Action<HttpService>
  fullName: Action<EventStore.Core.Services.Transport.Http.HttpService>
  nameWithType.vb: Action(Of HttpService)
  fullName.vb: Action(Of EventStore.Core.Services.Transport.Http.HttpService)
  name.vb: Action(Of HttpService)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.Transport.Http.HttpService
    name: HttpService
    nameWithType: HttpService
    fullName: EventStore.Core.Services.Transport.Http.HttpService
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.Transport.Http.HttpService
    name: HttpService
    nameWithType: HttpService
    fullName: EventStore.Core.Services.Transport.Http.HttpService
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Func{EventStore.Transport.Http.HttpResponse,System.Boolean}
  commentId: '!:Func{EventStore.Transport.Http.HttpResponse,System.Boolean}'
  definition: Func`2
  name: Func<HttpResponse, Boolean>
  nameWithType: Func<HttpResponse, Boolean>
  fullName: Func<EventStore.Transport.Http.HttpResponse, System.Boolean>
  nameWithType.vb: Func(Of HttpResponse, Boolean)
  fullName.vb: Func(Of EventStore.Transport.Http.HttpResponse, System.Boolean)
  name.vb: Func(Of HttpResponse, Boolean)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.Transport.Http.HttpResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.Transport.Http.HttpResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Tuple{System.Boolean,System.String}
  commentId: '!:Tuple{System.Boolean,System.String}'
  definition: Tuple`2
  name: Tuple<Boolean, String>
  nameWithType: Tuple<Boolean, String>
  fullName: Tuple<System.Boolean, System.String>
  nameWithType.vb: Tuple(Of Boolean, String)
  fullName.vb: Tuple(Of System.Boolean, System.String)
  name.vb: Tuple(Of Boolean, String)
  spec.csharp:
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Tuple`2
  isExternal: true
  name: Tuple<, >
  nameWithType: Tuple<, >
  fullName: Tuple<, >
  nameWithType.vb: Tuple(Of , )
  fullName.vb: Tuple(Of , )
  name.vb: Tuple(Of , )
  spec.csharp:
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

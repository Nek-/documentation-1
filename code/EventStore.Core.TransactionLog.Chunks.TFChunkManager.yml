### YamlMime:ManagedReference
items:
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  commentId: T:EventStore.Core.TransactionLog.Chunks.TFChunkManager
  id: TFChunkManager
  parent: EventStore.Core.TransactionLog.Chunks
  children:
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.#ctor(EventStore.Core.TransactionLog.Chunks.TFChunkDbConfig)
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddChunk(EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk)
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddNewChunk
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddNewChunk(EventStore.Core.TransactionLog.Chunks.ChunkHeader,System.Int32)
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.ChunksCount
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.CreateTempChunk(EventStore.Core.TransactionLog.Chunks.ChunkHeader,System.Int32)
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.Dispose
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.EnableCaching
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunk(System.Int32)
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkFor(System.Int64)
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkForOrDefault(System.String)
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.MaxChunksCount
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.SwitchChunk(EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk,System.Boolean,System.Boolean)
  langs:
  - csharp
  - vb
  name: TFChunkManager
  nameWithType: TFChunkManager
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  type: Class
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TFChunkManager
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 9
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: 'public class TFChunkManager : IDisposable'
    content.vb: >-
      Public Class TFChunkManager
          Inherits IDisposable
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.TransactionLog.Chunks.TFChunkManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.MaxChunksCount
  commentId: F:EventStore.Core.TransactionLog.Chunks.TFChunkManager.MaxChunksCount
  id: MaxChunksCount
  parent: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  langs:
  - csharp
  - vb
  name: MaxChunksCount
  nameWithType: TFChunkManager.MaxChunksCount
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.MaxChunksCount
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: MaxChunksCount
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 13
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: public const int MaxChunksCount = null
    return:
      type: System.Int32
    content.vb: Public Const MaxChunksCount As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.ChunksCount
  commentId: P:EventStore.Core.TransactionLog.Chunks.TFChunkManager.ChunksCount
  id: ChunksCount
  parent: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  langs:
  - csharp
  - vb
  name: ChunksCount
  nameWithType: TFChunkManager.ChunksCount
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.ChunksCount
  type: Property
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ChunksCount
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 15
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: public int ChunksCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ChunksCount As Integer
  overload: EventStore.Core.TransactionLog.Chunks.TFChunkManager.ChunksCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.#ctor(EventStore.Core.TransactionLog.Chunks.TFChunkDbConfig)
  commentId: M:EventStore.Core.TransactionLog.Chunks.TFChunkManager.#ctor(EventStore.Core.TransactionLog.Chunks.TFChunkDbConfig)
  id: '#ctor(EventStore.Core.TransactionLog.Chunks.TFChunkDbConfig)'
  parent: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  langs:
  - csharp
  - vb
  name: TFChunkManager(TFChunkDbConfig)
  nameWithType: TFChunkManager.TFChunkManager(TFChunkDbConfig)
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.TFChunkManager(EventStore.Core.TransactionLog.Chunks.TFChunkDbConfig)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 26
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: public TFChunkManager(TFChunkDbConfig config)
    parameters:
    - id: config
      type: EventStore.Core.TransactionLog.Chunks.TFChunkDbConfig
    content.vb: Public Sub New(config As TFChunkDbConfig)
  overload: EventStore.Core.TransactionLog.Chunks.TFChunkManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.EnableCaching
  commentId: M:EventStore.Core.TransactionLog.Chunks.TFChunkManager.EnableCaching
  id: EnableCaching
  parent: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  langs:
  - csharp
  - vb
  name: EnableCaching()
  nameWithType: TFChunkManager.EnableCaching()
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.EnableCaching()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: EnableCaching
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 32
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: public void EnableCaching()
    content.vb: Public Sub EnableCaching
  overload: EventStore.Core.TransactionLog.Chunks.TFChunkManager.EnableCaching*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.CreateTempChunk(EventStore.Core.TransactionLog.Chunks.ChunkHeader,System.Int32)
  commentId: M:EventStore.Core.TransactionLog.Chunks.TFChunkManager.CreateTempChunk(EventStore.Core.TransactionLog.Chunks.ChunkHeader,System.Int32)
  id: CreateTempChunk(EventStore.Core.TransactionLog.Chunks.ChunkHeader,System.Int32)
  parent: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  langs:
  - csharp
  - vb
  name: CreateTempChunk(ChunkHeader, Int32)
  nameWithType: TFChunkManager.CreateTempChunk(ChunkHeader, Int32)
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.CreateTempChunk(EventStore.Core.TransactionLog.Chunks.ChunkHeader, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CreateTempChunk
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 99
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: public TFChunk CreateTempChunk(ChunkHeader chunkHeader, int fileSize)
    parameters:
    - id: chunkHeader
      type: EventStore.Core.TransactionLog.Chunks.ChunkHeader
    - id: fileSize
      type: System.Int32
    return:
      type: EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk
    content.vb: Public Function CreateTempChunk(chunkHeader As ChunkHeader, fileSize As Integer) As TFChunk
  overload: EventStore.Core.TransactionLog.Chunks.TFChunkManager.CreateTempChunk*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddNewChunk
  commentId: M:EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddNewChunk
  id: AddNewChunk
  parent: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  langs:
  - csharp
  - vb
  name: AddNewChunk()
  nameWithType: TFChunkManager.AddNewChunk()
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddNewChunk()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AddNewChunk
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 111
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: public TFChunk AddNewChunk()
    return:
      type: EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk
    content.vb: Public Function AddNewChunk As TFChunk
  overload: EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddNewChunk*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddNewChunk(EventStore.Core.TransactionLog.Chunks.ChunkHeader,System.Int32)
  commentId: M:EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddNewChunk(EventStore.Core.TransactionLog.Chunks.ChunkHeader,System.Int32)
  id: AddNewChunk(EventStore.Core.TransactionLog.Chunks.ChunkHeader,System.Int32)
  parent: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  langs:
  - csharp
  - vb
  name: AddNewChunk(ChunkHeader, Int32)
  nameWithType: TFChunkManager.AddNewChunk(ChunkHeader, Int32)
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddNewChunk(EventStore.Core.TransactionLog.Chunks.ChunkHeader, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AddNewChunk
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 131
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: public TFChunk AddNewChunk(ChunkHeader chunkHeader, int fileSize)
    parameters:
    - id: chunkHeader
      type: EventStore.Core.TransactionLog.Chunks.ChunkHeader
    - id: fileSize
      type: System.Int32
    return:
      type: EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk
    content.vb: Public Function AddNewChunk(chunkHeader As ChunkHeader, fileSize As Integer) As TFChunk
  overload: EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddNewChunk*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddChunk(EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk)
  commentId: M:EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddChunk(EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk)
  id: AddChunk(EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk)
  parent: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  langs:
  - csharp
  - vb
  name: AddChunk(TFChunk)
  nameWithType: TFChunkManager.AddChunk(TFChunk)
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddChunk(EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: AddChunk
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 155
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: public void AddChunk(TFChunk chunk)
    parameters:
    - id: chunk
      type: EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk
    content.vb: Public Sub AddChunk(chunk As TFChunk)
  overload: EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddChunk*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.SwitchChunk(EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk,System.Boolean,System.Boolean)
  commentId: M:EventStore.Core.TransactionLog.Chunks.TFChunkManager.SwitchChunk(EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk,System.Boolean,System.Boolean)
  id: SwitchChunk(EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk,System.Boolean,System.Boolean)
  parent: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  langs:
  - csharp
  - vb
  name: SwitchChunk(TFChunk, Boolean, Boolean)
  nameWithType: TFChunkManager.SwitchChunk(TFChunk, Boolean, Boolean)
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.SwitchChunk(EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: SwitchChunk
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 171
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: public TFChunk SwitchChunk(TFChunk chunk, bool verifyHash, bool removeChunksWithGreaterNumbers)
    parameters:
    - id: chunk
      type: EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk
    - id: verifyHash
      type: System.Boolean
    - id: removeChunksWithGreaterNumbers
      type: System.Boolean
    return:
      type: EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk
    content.vb: Public Function SwitchChunk(chunk As TFChunk, verifyHash As Boolean, removeChunksWithGreaterNumbers As Boolean) As TFChunk
  overload: EventStore.Core.TransactionLog.Chunks.TFChunkManager.SwitchChunk*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkFor(System.Int64)
  commentId: M:EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkFor(System.Int64)
  id: GetChunkFor(System.Int64)
  parent: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  langs:
  - csharp
  - vb
  name: GetChunkFor(Int64)
  nameWithType: TFChunkManager.GetChunkFor(Int64)
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkFor(System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetChunkFor
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 290
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: public TFChunk GetChunkFor(long logPosition)
    parameters:
    - id: logPosition
      type: System.Int64
    return:
      type: EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk
    content.vb: Public Function GetChunkFor(logPosition As Long) As TFChunk
  overload: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkFor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunk(System.Int32)
  commentId: M:EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunk(System.Int32)
  id: GetChunk(System.Int32)
  parent: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  langs:
  - csharp
  - vb
  name: GetChunk(Int32)
  nameWithType: TFChunkManager.GetChunk(Int32)
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunk(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetChunk
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 302
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: public TFChunk GetChunk(int chunkNum)
    parameters:
    - id: chunkNum
      type: System.Int32
    return:
      type: EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk
    content.vb: Public Function GetChunk(chunkNum As Integer) As TFChunk
  overload: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunk*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkForOrDefault(System.String)
  commentId: M:EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkForOrDefault(System.String)
  id: GetChunkForOrDefault(System.String)
  parent: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  langs:
  - csharp
  - vb
  name: GetChunkForOrDefault(String)
  nameWithType: TFChunkManager.GetChunkForOrDefault(String)
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkForOrDefault(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetChunkForOrDefault
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 313
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: public TFChunk GetChunkForOrDefault(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk
    content.vb: Public Function GetChunkForOrDefault(path As String) As TFChunk
  overload: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkForOrDefault*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.Dispose
  commentId: M:EventStore.Core.TransactionLog.Chunks.TFChunkManager.Dispose
  id: Dispose
  parent: EventStore.Core.TransactionLog.Chunks.TFChunkManager
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: TFChunkManager.Dispose()
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.Dispose()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Dispose
    path: ../EventStore/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
    startLine: 318
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.Chunks
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: EventStore.Core.TransactionLog.Chunks.TFChunkManager.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.TransactionLog.Chunks
  commentId: N:EventStore.Core.TransactionLog.Chunks
  isExternal: false
  name: EventStore.Core.TransactionLog.Chunks
  nameWithType: EventStore.Core.TransactionLog.Chunks
  fullName: EventStore.Core.TransactionLog.Chunks
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TFChunkManager>()
  nameWithType: ProtobufExtensions.Serialize<TFChunkManager>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.Chunks.TFChunkManager>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TFChunkManager)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.Chunks.TFChunkManager)()
  name.vb: Serialize(Of TFChunkManager)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TFChunkManager>
    nameWithType: ProtobufExtensions.Serialize<TFChunkManager>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.Chunks.TFChunkManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TFChunkManager)
    nameWithType: ProtobufExtensions.Serialize(Of TFChunkManager)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.Chunks.TFChunkManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TFChunkManager>()
  nameWithType: ProtobufExtensions.SerializeToArray<TFChunkManager>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.Chunks.TFChunkManager>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TFChunkManager)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.Chunks.TFChunkManager)()
  name.vb: SerializeToArray(Of TFChunkManager)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TFChunkManager>
    nameWithType: ProtobufExtensions.SerializeToArray<TFChunkManager>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.Chunks.TFChunkManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TFChunkManager)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TFChunkManager)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.Chunks.TFChunkManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.ChunksCount*
  commentId: Overload:EventStore.Core.TransactionLog.Chunks.TFChunkManager.ChunksCount
  isExternal: false
  name: ChunksCount
  nameWithType: TFChunkManager.ChunksCount
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.ChunksCount
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.#ctor*
  commentId: Overload:EventStore.Core.TransactionLog.Chunks.TFChunkManager.#ctor
  isExternal: false
  name: TFChunkManager
  nameWithType: TFChunkManager.TFChunkManager
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.TFChunkManager
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkDbConfig
  commentId: T:EventStore.Core.TransactionLog.Chunks.TFChunkDbConfig
  parent: EventStore.Core.TransactionLog.Chunks
  isExternal: false
  name: TFChunkDbConfig
  nameWithType: TFChunkDbConfig
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkDbConfig
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.EnableCaching*
  commentId: Overload:EventStore.Core.TransactionLog.Chunks.TFChunkManager.EnableCaching
  isExternal: false
  name: EnableCaching
  nameWithType: TFChunkManager.EnableCaching
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.EnableCaching
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.CreateTempChunk*
  commentId: Overload:EventStore.Core.TransactionLog.Chunks.TFChunkManager.CreateTempChunk
  isExternal: false
  name: CreateTempChunk
  nameWithType: TFChunkManager.CreateTempChunk
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.CreateTempChunk
- uid: EventStore.Core.TransactionLog.Chunks.ChunkHeader
  commentId: T:EventStore.Core.TransactionLog.Chunks.ChunkHeader
  parent: EventStore.Core.TransactionLog.Chunks
  isExternal: false
  name: ChunkHeader
  nameWithType: ChunkHeader
  fullName: EventStore.Core.TransactionLog.Chunks.ChunkHeader
- uid: EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk
  commentId: T:EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk
  parent: EventStore.Core.TransactionLog.Chunks.TFChunk
  isExternal: false
  name: TFChunk
  nameWithType: TFChunk
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunk.TFChunk
- uid: EventStore.Core.TransactionLog.Chunks.TFChunk
  commentId: N:EventStore.Core.TransactionLog.Chunks.TFChunk
  isExternal: false
  name: EventStore.Core.TransactionLog.Chunks.TFChunk
  nameWithType: EventStore.Core.TransactionLog.Chunks.TFChunk
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunk
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddNewChunk*
  commentId: Overload:EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddNewChunk
  isExternal: false
  name: AddNewChunk
  nameWithType: TFChunkManager.AddNewChunk
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddNewChunk
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddChunk*
  commentId: Overload:EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddChunk
  isExternal: false
  name: AddChunk
  nameWithType: TFChunkManager.AddChunk
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.AddChunk
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.SwitchChunk*
  commentId: Overload:EventStore.Core.TransactionLog.Chunks.TFChunkManager.SwitchChunk
  isExternal: false
  name: SwitchChunk
  nameWithType: TFChunkManager.SwitchChunk
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.SwitchChunk
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkFor*
  commentId: Overload:EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkFor
  isExternal: false
  name: GetChunkFor
  nameWithType: TFChunkManager.GetChunkFor
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkFor
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunk*
  commentId: Overload:EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunk
  isExternal: false
  name: GetChunk
  nameWithType: TFChunkManager.GetChunk
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunk
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkForOrDefault*
  commentId: Overload:EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkForOrDefault
  isExternal: false
  name: GetChunkForOrDefault
  nameWithType: TFChunkManager.GetChunkForOrDefault
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.GetChunkForOrDefault
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkManager.Dispose*
  commentId: Overload:EventStore.Core.TransactionLog.Chunks.TFChunkManager.Dispose
  isExternal: false
  name: Dispose
  nameWithType: TFChunkManager.Dispose
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkManager.Dispose

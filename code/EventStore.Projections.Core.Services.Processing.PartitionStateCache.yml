### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache
  commentId: T:EventStore.Projections.Core.Services.Processing.PartitionStateCache
  id: PartitionStateCache
  parent: EventStore.Projections.Core.Services.Processing
  children:
  - EventStore.Projections.Core.Services.Processing.PartitionStateCache.#ctor(System.Int32)
  - EventStore.Projections.Core.Services.Processing.PartitionStateCache.CacheAndLockPartitionState(System.String,EventStore.Projections.Core.Services.Processing.PartitionState,EventStore.Projections.Core.Services.Processing.CheckpointTag)
  - EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachedItemCount
  - EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachePartitionState(System.String,EventStore.Projections.Core.Services.Processing.PartitionState)
  - EventStore.Projections.Core.Services.Processing.PartitionStateCache.Enumerate
  - EventStore.Projections.Core.Services.Processing.PartitionStateCache.GetLockedPartitionState(System.String)
  - EventStore.Projections.Core.Services.Processing.PartitionStateCache.Initialize
  - EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetAndLockPartitionState(System.String,EventStore.Projections.Core.Services.Processing.CheckpointTag)
  - EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetPartitionState(System.String)
  - EventStore.Projections.Core.Services.Processing.PartitionStateCache.Unlock(EventStore.Projections.Core.Services.Processing.CheckpointTag,System.Boolean)
  langs:
  - csharp
  - vb
  name: PartitionStateCache
  nameWithType: PartitionStateCache
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache
  type: Class
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: PartitionStateCache
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
    startLine: 6
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: 'public class PartitionStateCache : object'
    content.vb: >-
      Public Class PartitionStateCache
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Projections.Core.Services.Processing.PartitionStateCache.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Projections.Core.Services.Processing.PartitionStateCache.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.#ctor(System.Int32)
  commentId: M:EventStore.Projections.Core.Services.Processing.PartitionStateCache.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: EventStore.Projections.Core.Services.Processing.PartitionStateCache
  langs:
  - csharp
  - vb
  name: PartitionStateCache(Int32)
  nameWithType: PartitionStateCache.PartitionStateCache(Int32)
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.PartitionStateCache(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
    startLine: 19
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public PartitionStateCache(int maxCachedPartitions = 4000)
    parameters:
    - id: maxCachedPartitions
      type: System.Int32
    content.vb: Public Sub New(maxCachedPartitions As Integer = 4000)
  overload: EventStore.Projections.Core.Services.Processing.PartitionStateCache.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachedItemCount
  commentId: P:EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachedItemCount
  id: CachedItemCount
  parent: EventStore.Projections.Core.Services.Processing.PartitionStateCache
  langs:
  - csharp
  - vb
  name: CachedItemCount
  nameWithType: PartitionStateCache.CachedItemCount
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachedItemCount
  type: Property
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CachedItemCount
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
    startLine: 26
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public int CachedItemCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property CachedItemCount As Integer
  overload: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachedItemCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Initialize
  commentId: M:EventStore.Projections.Core.Services.Processing.PartitionStateCache.Initialize
  id: Initialize
  parent: EventStore.Projections.Core.Services.Processing.PartitionStateCache
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: PartitionStateCache.Initialize()
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Initialize()
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Initialize
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
    startLine: 31
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Initialize()
    content.vb: Public Sub Initialize
  overload: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Initialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CacheAndLockPartitionState(System.String,EventStore.Projections.Core.Services.Processing.PartitionState,EventStore.Projections.Core.Services.Processing.CheckpointTag)
  commentId: M:EventStore.Projections.Core.Services.Processing.PartitionStateCache.CacheAndLockPartitionState(System.String,EventStore.Projections.Core.Services.Processing.PartitionState,EventStore.Projections.Core.Services.Processing.CheckpointTag)
  id: CacheAndLockPartitionState(System.String,EventStore.Projections.Core.Services.Processing.PartitionState,EventStore.Projections.Core.Services.Processing.CheckpointTag)
  parent: EventStore.Projections.Core.Services.Processing.PartitionStateCache
  langs:
  - csharp
  - vb
  name: CacheAndLockPartitionState(String, PartitionState, CheckpointTag)
  nameWithType: PartitionStateCache.CacheAndLockPartitionState(String, PartitionState, CheckpointTag)
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CacheAndLockPartitionState(System.String, EventStore.Projections.Core.Services.Processing.PartitionState, EventStore.Projections.Core.Services.Processing.CheckpointTag)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CacheAndLockPartitionState
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
    startLine: 40
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void CacheAndLockPartitionState(string partition, PartitionState data, CheckpointTag at)
    parameters:
    - id: partition
      type: System.String
    - id: data
      type: EventStore.Projections.Core.Services.Processing.PartitionState
    - id: at
      type: EventStore.Projections.Core.Services.Processing.CheckpointTag
    content.vb: Public Sub CacheAndLockPartitionState(partition As String, data As PartitionState, at As CheckpointTag)
  overload: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CacheAndLockPartitionState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachePartitionState(System.String,EventStore.Projections.Core.Services.Processing.PartitionState)
  commentId: M:EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachePartitionState(System.String,EventStore.Projections.Core.Services.Processing.PartitionState)
  id: CachePartitionState(System.String,EventStore.Projections.Core.Services.Processing.PartitionState)
  parent: EventStore.Projections.Core.Services.Processing.PartitionStateCache
  langs:
  - csharp
  - vb
  name: CachePartitionState(String, PartitionState)
  nameWithType: PartitionStateCache.CachePartitionState(String, PartitionState)
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachePartitionState(System.String, EventStore.Projections.Core.Services.Processing.PartitionState)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CachePartitionState
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
    startLine: 54
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void CachePartitionState(string partition, PartitionState data)
    parameters:
    - id: partition
      type: System.String
    - id: data
      type: EventStore.Projections.Core.Services.Processing.PartitionState
    content.vb: Public Sub CachePartitionState(partition As String, data As PartitionState)
  overload: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachePartitionState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetAndLockPartitionState(System.String,EventStore.Projections.Core.Services.Processing.CheckpointTag)
  commentId: M:EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetAndLockPartitionState(System.String,EventStore.Projections.Core.Services.Processing.CheckpointTag)
  id: TryGetAndLockPartitionState(System.String,EventStore.Projections.Core.Services.Processing.CheckpointTag)
  parent: EventStore.Projections.Core.Services.Processing.PartitionStateCache
  langs:
  - csharp
  - vb
  name: TryGetAndLockPartitionState(String, CheckpointTag)
  nameWithType: PartitionStateCache.TryGetAndLockPartitionState(String, CheckpointTag)
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetAndLockPartitionState(System.String, EventStore.Projections.Core.Services.Processing.CheckpointTag)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TryGetAndLockPartitionState
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
    startLine: 66
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public PartitionState TryGetAndLockPartitionState(string partition, CheckpointTag lockAt)
    parameters:
    - id: partition
      type: System.String
    - id: lockAt
      type: EventStore.Projections.Core.Services.Processing.CheckpointTag
    return:
      type: EventStore.Projections.Core.Services.Processing.PartitionState
    content.vb: Public Function TryGetAndLockPartitionState(partition As String, lockAt As CheckpointTag) As PartitionState
  overload: EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetAndLockPartitionState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetPartitionState(System.String)
  commentId: M:EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetPartitionState(System.String)
  id: TryGetPartitionState(System.String)
  parent: EventStore.Projections.Core.Services.Processing.PartitionStateCache
  langs:
  - csharp
  - vb
  name: TryGetPartitionState(String)
  nameWithType: PartitionStateCache.TryGetPartitionState(String)
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetPartitionState(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TryGetPartitionState
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
    startLine: 88
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public PartitionState TryGetPartitionState(string partition)
    parameters:
    - id: partition
      type: System.String
    return:
      type: EventStore.Projections.Core.Services.Processing.PartitionState
    content.vb: Public Function TryGetPartitionState(partition As String) As PartitionState
  overload: EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetPartitionState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.GetLockedPartitionState(System.String)
  commentId: M:EventStore.Projections.Core.Services.Processing.PartitionStateCache.GetLockedPartitionState(System.String)
  id: GetLockedPartitionState(System.String)
  parent: EventStore.Projections.Core.Services.Processing.PartitionStateCache
  langs:
  - csharp
  - vb
  name: GetLockedPartitionState(String)
  nameWithType: PartitionStateCache.GetLockedPartitionState(String)
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.GetLockedPartitionState(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: GetLockedPartitionState
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
    startLine: 97
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public PartitionState GetLockedPartitionState(string partition)
    parameters:
    - id: partition
      type: System.String
    return:
      type: EventStore.Projections.Core.Services.Processing.PartitionState
    content.vb: Public Function GetLockedPartitionState(partition As String) As PartitionState
  overload: EventStore.Projections.Core.Services.Processing.PartitionStateCache.GetLockedPartitionState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Unlock(EventStore.Projections.Core.Services.Processing.CheckpointTag,System.Boolean)
  commentId: M:EventStore.Projections.Core.Services.Processing.PartitionStateCache.Unlock(EventStore.Projections.Core.Services.Processing.CheckpointTag,System.Boolean)
  id: Unlock(EventStore.Projections.Core.Services.Processing.CheckpointTag,System.Boolean)
  parent: EventStore.Projections.Core.Services.Processing.PartitionStateCache
  langs:
  - csharp
  - vb
  name: Unlock(CheckpointTag, Boolean)
  nameWithType: PartitionStateCache.Unlock(CheckpointTag, Boolean)
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Unlock(EventStore.Projections.Core.Services.Processing.CheckpointTag, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Unlock
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
    startLine: 113
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Unlock(CheckpointTag beforeCheckpoint, bool forgetUnlocked = false)
    parameters:
    - id: beforeCheckpoint
      type: EventStore.Projections.Core.Services.Processing.CheckpointTag
    - id: forgetUnlocked
      type: System.Boolean
    content.vb: Public Sub Unlock(beforeCheckpoint As CheckpointTag, forgetUnlocked As Boolean = False)
  overload: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Unlock*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Enumerate
  commentId: M:EventStore.Projections.Core.Services.Processing.PartitionStateCache.Enumerate
  id: Enumerate
  parent: EventStore.Projections.Core.Services.Processing.PartitionStateCache
  langs:
  - csharp
  - vb
  name: Enumerate()
  nameWithType: PartitionStateCache.Enumerate()
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Enumerate()
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Enumerate
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
    startLine: 155
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public IEnumerable<Tuple<string, PartitionState>> Enumerate()
    return:
      type: IEnumerable{Tuple{System.String,EventStore.Projections.Core.Services.Processing.PartitionState}}
    content.vb: Public Function Enumerate As IEnumerable(Of Tuple(Of String, PartitionState))
  overload: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Enumerate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Projections.Core.Services.Processing
  commentId: N:EventStore.Projections.Core.Services.Processing
  isExternal: false
  name: EventStore.Projections.Core.Services.Processing
  nameWithType: EventStore.Projections.Core.Services.Processing
  fullName: EventStore.Projections.Core.Services.Processing
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<PartitionStateCache>()
  nameWithType: ProtobufExtensions.Serialize<PartitionStateCache>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Projections.Core.Services.Processing.PartitionStateCache>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of PartitionStateCache)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Projections.Core.Services.Processing.PartitionStateCache)()
  name.vb: Serialize(Of PartitionStateCache)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<PartitionStateCache>
    nameWithType: ProtobufExtensions.Serialize<PartitionStateCache>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Projections.Core.Services.Processing.PartitionStateCache>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of PartitionStateCache)
    nameWithType: ProtobufExtensions.Serialize(Of PartitionStateCache)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Projections.Core.Services.Processing.PartitionStateCache)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<PartitionStateCache>()
  nameWithType: ProtobufExtensions.SerializeToArray<PartitionStateCache>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Projections.Core.Services.Processing.PartitionStateCache>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of PartitionStateCache)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Projections.Core.Services.Processing.PartitionStateCache)()
  name.vb: SerializeToArray(Of PartitionStateCache)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<PartitionStateCache>
    nameWithType: ProtobufExtensions.SerializeToArray<PartitionStateCache>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Projections.Core.Services.Processing.PartitionStateCache>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of PartitionStateCache)
    nameWithType: ProtobufExtensions.SerializeToArray(Of PartitionStateCache)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Projections.Core.Services.Processing.PartitionStateCache)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.#ctor*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.PartitionStateCache.#ctor
  isExternal: false
  name: PartitionStateCache
  nameWithType: PartitionStateCache.PartitionStateCache
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.PartitionStateCache
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachedItemCount*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachedItemCount
  isExternal: false
  name: CachedItemCount
  nameWithType: PartitionStateCache.CachedItemCount
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachedItemCount
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Initialize*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.PartitionStateCache.Initialize
  isExternal: false
  name: Initialize
  nameWithType: PartitionStateCache.Initialize
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Initialize
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CacheAndLockPartitionState*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.PartitionStateCache.CacheAndLockPartitionState
  isExternal: false
  name: CacheAndLockPartitionState
  nameWithType: PartitionStateCache.CacheAndLockPartitionState
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CacheAndLockPartitionState
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Projections.Core.Services.Processing.PartitionState
  commentId: T:EventStore.Projections.Core.Services.Processing.PartitionState
  parent: EventStore.Projections.Core.Services.Processing
  isExternal: false
  name: PartitionState
  nameWithType: PartitionState
  fullName: EventStore.Projections.Core.Services.Processing.PartitionState
- uid: EventStore.Projections.Core.Services.Processing.CheckpointTag
  commentId: T:EventStore.Projections.Core.Services.Processing.CheckpointTag
  parent: EventStore.Projections.Core.Services.Processing
  isExternal: false
  name: CheckpointTag
  nameWithType: CheckpointTag
  fullName: EventStore.Projections.Core.Services.Processing.CheckpointTag
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachePartitionState*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachePartitionState
  isExternal: false
  name: CachePartitionState
  nameWithType: PartitionStateCache.CachePartitionState
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.CachePartitionState
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetAndLockPartitionState*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetAndLockPartitionState
  isExternal: false
  name: TryGetAndLockPartitionState
  nameWithType: PartitionStateCache.TryGetAndLockPartitionState
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetAndLockPartitionState
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetPartitionState*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetPartitionState
  isExternal: false
  name: TryGetPartitionState
  nameWithType: PartitionStateCache.TryGetPartitionState
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.TryGetPartitionState
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.GetLockedPartitionState*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.PartitionStateCache.GetLockedPartitionState
  isExternal: false
  name: GetLockedPartitionState
  nameWithType: PartitionStateCache.GetLockedPartitionState
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.GetLockedPartitionState
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Unlock*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.PartitionStateCache.Unlock
  isExternal: false
  name: Unlock
  nameWithType: PartitionStateCache.Unlock
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Unlock
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Enumerate*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.PartitionStateCache.Enumerate
  isExternal: false
  name: Enumerate
  nameWithType: PartitionStateCache.Enumerate
  fullName: EventStore.Projections.Core.Services.Processing.PartitionStateCache.Enumerate
- uid: IEnumerable{Tuple{System.String,EventStore.Projections.Core.Services.Processing.PartitionState}}
  commentId: '!:IEnumerable{Tuple{System.String,EventStore.Projections.Core.Services.Processing.PartitionState}}'
  definition: IEnumerable`1
  name: IEnumerable<Tuple<String, PartitionState>>
  nameWithType: IEnumerable<Tuple<String, PartitionState>>
  fullName: IEnumerable<Tuple<System.String, EventStore.Projections.Core.Services.Processing.PartitionState>>
  nameWithType.vb: IEnumerable(Of Tuple(Of String, PartitionState))
  fullName.vb: IEnumerable(Of Tuple(Of System.String, EventStore.Projections.Core.Services.Processing.PartitionState))
  name.vb: IEnumerable(Of Tuple(Of String, PartitionState))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Projections.Core.Services.Processing.PartitionState
    name: PartitionState
    nameWithType: PartitionState
    fullName: EventStore.Projections.Core.Services.Processing.PartitionState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Projections.Core.Services.Processing.PartitionState
    name: PartitionState
    nameWithType: PartitionState
    fullName: EventStore.Projections.Core.Services.Processing.PartitionState
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

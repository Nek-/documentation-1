### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Tests.CallbackSubscriber
  commentId: T:EventStore.Projections.Core.Tests.CallbackSubscriber
  id: CallbackSubscriber
  parent: EventStore.Projections.Core.Tests
  children:
  - EventStore.Projections.Core.Tests.CallbackSubscriber.Create``1(Action{``0})
  langs:
  - csharp
  - vb
  name: CallbackSubscriber
  nameWithType: CallbackSubscriber
  fullName: EventStore.Projections.Core.Tests.CallbackSubscriber
  type: Class
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/CallbackSubscriber.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CallbackSubscriber
    path: ../EventStore/src/EventStore.Projections.Core.Tests/CallbackSubscriber.cs
    startLine: 6
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests
  syntax:
    content: 'public static class CallbackSubscriber : object'
    content.vb: >-
      Public Module CallbackSubscriber

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Projections.Core.Tests.CallbackSubscriber.Create``1(Action{``0})
  commentId: M:EventStore.Projections.Core.Tests.CallbackSubscriber.Create``1(Action{``0})
  id: Create``1(Action{``0})
  parent: EventStore.Projections.Core.Tests.CallbackSubscriber
  langs:
  - csharp
  - vb
  name: Create<T>(Action<T>)
  nameWithType: CallbackSubscriber.Create<T>(Action<T>)
  fullName: EventStore.Projections.Core.Tests.CallbackSubscriber.Create<T>(Action<T>)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/CallbackSubscriber.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Create
    path: ../EventStore/src/EventStore.Projections.Core.Tests/CallbackSubscriber.cs
    startLine: 23
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests
  syntax:
    content: 'public static IHandle<T> Create<T>(Action<T> callback)where T : Message'
    parameters:
    - id: callback
      type: Action{{T}}
    typeParameters:
    - id: T
    return:
      type: EventStore.Core.Bus.IHandle{{T}}
    content.vb: Public Shared Function Create(Of T As Message)(callback As Action(Of T)) As IHandle(Of T)
  overload: EventStore.Projections.Core.Tests.CallbackSubscriber.Create*
  nameWithType.vb: CallbackSubscriber.Create(Of T)(Action(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Projections.Core.Tests.CallbackSubscriber.Create(Of T)(Action(Of T))
  name.vb: Create(Of T)(Action(Of T))
references:
- uid: EventStore.Projections.Core.Tests
  commentId: N:EventStore.Projections.Core.Tests
  isExternal: false
  name: EventStore.Projections.Core.Tests
  nameWithType: EventStore.Projections.Core.Tests
  fullName: EventStore.Projections.Core.Tests
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Projections.Core.Tests.CallbackSubscriber.Create*
  commentId: Overload:EventStore.Projections.Core.Tests.CallbackSubscriber.Create
  isExternal: false
  name: Create
  nameWithType: CallbackSubscriber.Create
  fullName: EventStore.Projections.Core.Tests.CallbackSubscriber.Create
- uid: Action{{T}}
  commentId: '!:Action{`0}'
  definition: Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{{T}}
  commentId: T:EventStore.Core.Bus.IHandle{`0}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  isExternal: false
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  isExternal: false
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus

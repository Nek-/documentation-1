### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler
  commentId: T:EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler
  id: TestCheckpointManagerMessageHandler
  parent: EventStore.Projections.Core.Tests.Services.core_projection
  children:
  - EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  - EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  - EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.Failed)
  - EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  - EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.RestartRequested)
  - EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledFailedMessages
  - EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledMessages
  - EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledRestartRequestedMessages
  - EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledStreamAwaitingMessage
  - EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledWriteCompletedMessage
  langs:
  - csharp
  - vb
  name: TestCheckpointManagerMessageHandler
  nameWithType: TestCheckpointManagerMessageHandler
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler
  type: Class
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TestCheckpointManagerMessageHandler
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
    startLine: 5
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: 'public class TestCheckpointManagerMessageHandler : object, IEmittedStreamContainer, IProjectionCheckpointManager, IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>, IHandle<CoreProjectionProcessingMessage.RestartRequested>, IHandle<CoreProjectionProcessingMessage.Failed>, IHandle<CoreProjectionProcessingMessage.EmittedStreamAwaiting>, IHandle<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>'
    content.vb: >-
      Public Class TestCheckpointManagerMessageHandler

          Inherits Object

          Implements IEmittedStreamContainer, IProjectionCheckpointManager, IHandle(Of CoreProjectionProcessingMessage.ReadyForCheckpoint), IHandle(Of CoreProjectionProcessingMessage.RestartRequested), IHandle(Of CoreProjectionProcessingMessage.Failed), IHandle(Of CoreProjectionProcessingMessage.EmittedStreamAwaiting), IHandle(Of CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  inheritance:
  - System.Object
  implements:
  - EventStore.Projections.Core.Messages.IEmittedStreamContainer
  - EventStore.Projections.Core.Messages.IProjectionCheckpointManager
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.ReadyForCheckpoint}
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamAwaiting}
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamWriteCompleted}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledMessages
  commentId: F:EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledMessages
  id: HandledMessages
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler
  langs:
  - csharp
  - vb
  name: HandledMessages
  nameWithType: TestCheckpointManagerMessageHandler.HandledMessages
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledMessages
  type: Field
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: HandledMessages
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
    startLine: 7
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public readonly List<CoreProjectionProcessingMessage.ReadyForCheckpoint> HandledMessages
    return:
      type: List{CoreProjectionProcessingMessage.ReadyForCheckpoint}
    content.vb: Public ReadOnly HandledMessages As List(Of CoreProjectionProcessingMessage.ReadyForCheckpoint)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledRestartRequestedMessages
  commentId: F:EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledRestartRequestedMessages
  id: HandledRestartRequestedMessages
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler
  langs:
  - csharp
  - vb
  name: HandledRestartRequestedMessages
  nameWithType: TestCheckpointManagerMessageHandler.HandledRestartRequestedMessages
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledRestartRequestedMessages
  type: Field
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: HandledRestartRequestedMessages
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
    startLine: 10
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public readonly List<CoreProjectionProcessingMessage.RestartRequested> HandledRestartRequestedMessages
    return:
      type: List{CoreProjectionProcessingMessage.RestartRequested}
    content.vb: Public ReadOnly HandledRestartRequestedMessages As List(Of CoreProjectionProcessingMessage.RestartRequested)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledFailedMessages
  commentId: F:EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledFailedMessages
  id: HandledFailedMessages
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler
  langs:
  - csharp
  - vb
  name: HandledFailedMessages
  nameWithType: TestCheckpointManagerMessageHandler.HandledFailedMessages
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledFailedMessages
  type: Field
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: HandledFailedMessages
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
    startLine: 13
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public readonly List<CoreProjectionProcessingMessage.Failed> HandledFailedMessages
    return:
      type: List{CoreProjectionProcessingMessage.Failed}
    content.vb: Public ReadOnly HandledFailedMessages As List(Of CoreProjectionProcessingMessage.Failed)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledWriteCompletedMessage
  commentId: F:EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledWriteCompletedMessage
  id: HandledWriteCompletedMessage
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler
  langs:
  - csharp
  - vb
  name: HandledWriteCompletedMessage
  nameWithType: TestCheckpointManagerMessageHandler.HandledWriteCompletedMessage
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledWriteCompletedMessage
  type: Field
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: HandledWriteCompletedMessage
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
    startLine: 16
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public readonly List<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted> HandledWriteCompletedMessage
    return:
      type: List{CoreProjectionProcessingMessage.EmittedStreamWriteCompleted}
    content.vb: Public ReadOnly HandledWriteCompletedMessage As List(Of CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledStreamAwaitingMessage
  commentId: F:EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledStreamAwaitingMessage
  id: HandledStreamAwaitingMessage
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler
  langs:
  - csharp
  - vb
  name: HandledStreamAwaitingMessage
  nameWithType: TestCheckpointManagerMessageHandler.HandledStreamAwaitingMessage
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.HandledStreamAwaitingMessage
  type: Field
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: HandledStreamAwaitingMessage
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
    startLine: 19
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public readonly List<CoreProjectionProcessingMessage.EmittedStreamAwaiting> HandledStreamAwaitingMessage
    return:
      type: List{CoreProjectionProcessingMessage.EmittedStreamAwaiting}
    content.vb: Public ReadOnly HandledStreamAwaitingMessage As List(Of CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  commentId: M:EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  id: Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  nameWithType: TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
    startLine: 22
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public void Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint message)
    parameters:
    - id: message
      type: CoreProjectionProcessingMessage.ReadyForCheckpoint
    content.vb: Public Sub Handle(message As CoreProjectionProcessingMessage.ReadyForCheckpoint)
  overload: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.ReadyForCheckpoint}.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.RestartRequested)
  commentId: M:EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.RestartRequested)
  id: Handle(CoreProjectionProcessingMessage.RestartRequested)
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionProcessingMessage.RestartRequested)
  nameWithType: TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.RestartRequested)
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.RestartRequested)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
    startLine: 27
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public void Handle(CoreProjectionProcessingMessage.RestartRequested message)
    parameters:
    - id: message
      type: CoreProjectionProcessingMessage.RestartRequested
    content.vb: Public Sub Handle(message As CoreProjectionProcessingMessage.RestartRequested)
  overload: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}.Handle(CoreProjectionProcessingMessage.RestartRequested)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.Failed)
  commentId: M:EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.Failed)
  id: Handle(CoreProjectionProcessingMessage.Failed)
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionProcessingMessage.Failed)
  nameWithType: TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.Failed)
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.Failed)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
    startLine: 32
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public void Handle(CoreProjectionProcessingMessage.Failed message)
    parameters:
    - id: message
      type: CoreProjectionProcessingMessage.Failed
    content.vb: Public Sub Handle(message As CoreProjectionProcessingMessage.Failed)
  overload: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}.Handle(CoreProjectionProcessingMessage.Failed)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  commentId: M:EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  id: Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  nameWithType: TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
    startLine: 37
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public void Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting message)
    parameters:
    - id: message
      type: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    content.vb: Public Sub Handle(message As CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  overload: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamAwaiting}.Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  commentId: M:EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  id: Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  nameWithType: TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestCheckpointManagerMessageHandler.cs
    startLine: 42
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public void Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted message)
    parameters:
    - id: message
      type: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    content.vb: Public Sub Handle(message As CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  overload: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamWriteCompleted}.Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Projections.Core.Tests.Services.core_projection
  commentId: N:EventStore.Projections.Core.Tests.Services.core_projection
  isExternal: false
  name: EventStore.Projections.Core.Tests.Services.core_projection
  nameWithType: EventStore.Projections.Core.Tests.Services.core_projection
  fullName: EventStore.Projections.Core.Tests.Services.core_projection
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Projections.Core.Messages.IEmittedStreamContainer
  commentId: T:EventStore.Projections.Core.Messages.IEmittedStreamContainer
  parent: EventStore.Projections.Core.Messages
  isExternal: false
  name: IEmittedStreamContainer
  nameWithType: IEmittedStreamContainer
  fullName: EventStore.Projections.Core.Messages.IEmittedStreamContainer
- uid: EventStore.Projections.Core.Messages.IProjectionCheckpointManager
  commentId: T:EventStore.Projections.Core.Messages.IProjectionCheckpointManager
  parent: EventStore.Projections.Core.Messages
  isExternal: false
  name: IProjectionCheckpointManager
  nameWithType: IProjectionCheckpointManager
  fullName: EventStore.Projections.Core.Messages.IProjectionCheckpointManager
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.ReadyForCheckpoint}
  commentId: T:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.ReadyForCheckpoint}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>
  nameWithType: IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.ReadyForCheckpoint)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.ReadyForCheckpoint)
  name.vb: IHandle(Of CoreProjectionProcessingMessage.ReadyForCheckpoint)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.ReadyForCheckpoint
    name: CoreProjectionProcessingMessage.ReadyForCheckpoint
    nameWithType: CoreProjectionProcessingMessage.ReadyForCheckpoint
    fullName: CoreProjectionProcessingMessage.ReadyForCheckpoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.ReadyForCheckpoint
    name: CoreProjectionProcessingMessage.ReadyForCheckpoint
    nameWithType: CoreProjectionProcessingMessage.ReadyForCheckpoint
    fullName: CoreProjectionProcessingMessage.ReadyForCheckpoint
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}
  commentId: T:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionProcessingMessage.RestartRequested>
  nameWithType: IHandle<CoreProjectionProcessingMessage.RestartRequested>
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.RestartRequested>
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.RestartRequested)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.RestartRequested)
  name.vb: IHandle(Of CoreProjectionProcessingMessage.RestartRequested)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.RestartRequested
    name: CoreProjectionProcessingMessage.RestartRequested
    nameWithType: CoreProjectionProcessingMessage.RestartRequested
    fullName: CoreProjectionProcessingMessage.RestartRequested
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.RestartRequested
    name: CoreProjectionProcessingMessage.RestartRequested
    nameWithType: CoreProjectionProcessingMessage.RestartRequested
    fullName: CoreProjectionProcessingMessage.RestartRequested
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}
  commentId: T:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionProcessingMessage.Failed>
  nameWithType: IHandle<CoreProjectionProcessingMessage.Failed>
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.Failed>
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.Failed)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.Failed)
  name.vb: IHandle(Of CoreProjectionProcessingMessage.Failed)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.Failed
    name: CoreProjectionProcessingMessage.Failed
    nameWithType: CoreProjectionProcessingMessage.Failed
    fullName: CoreProjectionProcessingMessage.Failed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.Failed
    name: CoreProjectionProcessingMessage.Failed
    nameWithType: CoreProjectionProcessingMessage.Failed
    fullName: CoreProjectionProcessingMessage.Failed
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamAwaiting}
  commentId: T:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamAwaiting}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionProcessingMessage.EmittedStreamAwaiting>
  nameWithType: IHandle<CoreProjectionProcessingMessage.EmittedStreamAwaiting>
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.EmittedStreamAwaiting>
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  name.vb: IHandle(Of CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    name: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    nameWithType: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    fullName: CoreProjectionProcessingMessage.EmittedStreamAwaiting
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    name: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    nameWithType: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    fullName: CoreProjectionProcessingMessage.EmittedStreamAwaiting
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamWriteCompleted}
  commentId: T:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamWriteCompleted}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>
  nameWithType: IHandle<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  name.vb: IHandle(Of CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    name: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    nameWithType: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    fullName: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    name: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    nameWithType: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    fullName: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TestCheckpointManagerMessageHandler>()
  nameWithType: ProtobufExtensions.Serialize<TestCheckpointManagerMessageHandler>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TestCheckpointManagerMessageHandler)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler)()
  name.vb: Serialize(Of TestCheckpointManagerMessageHandler)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TestCheckpointManagerMessageHandler>
    nameWithType: ProtobufExtensions.Serialize<TestCheckpointManagerMessageHandler>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TestCheckpointManagerMessageHandler)
    nameWithType: ProtobufExtensions.Serialize(Of TestCheckpointManagerMessageHandler)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TestCheckpointManagerMessageHandler>()
  nameWithType: ProtobufExtensions.SerializeToArray<TestCheckpointManagerMessageHandler>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TestCheckpointManagerMessageHandler)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler)()
  name.vb: SerializeToArray(Of TestCheckpointManagerMessageHandler)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TestCheckpointManagerMessageHandler>
    nameWithType: ProtobufExtensions.SerializeToArray<TestCheckpointManagerMessageHandler>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TestCheckpointManagerMessageHandler)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TestCheckpointManagerMessageHandler)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages
  commentId: N:EventStore.Projections.Core.Messages
  isExternal: false
  name: EventStore.Projections.Core.Messages
  nameWithType: EventStore.Projections.Core.Messages
  fullName: EventStore.Projections.Core.Messages
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  isExternal: false
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  isExternal: false
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: List{CoreProjectionProcessingMessage.ReadyForCheckpoint}
  commentId: '!:List{CoreProjectionProcessingMessage.ReadyForCheckpoint}'
  definition: List`1
  name: List<CoreProjectionProcessingMessage.ReadyForCheckpoint>
  nameWithType: List<CoreProjectionProcessingMessage.ReadyForCheckpoint>
  fullName: List<CoreProjectionProcessingMessage.ReadyForCheckpoint>
  nameWithType.vb: List(Of CoreProjectionProcessingMessage.ReadyForCheckpoint)
  fullName.vb: List(Of CoreProjectionProcessingMessage.ReadyForCheckpoint)
  name.vb: List(Of CoreProjectionProcessingMessage.ReadyForCheckpoint)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.ReadyForCheckpoint
    name: CoreProjectionProcessingMessage.ReadyForCheckpoint
    nameWithType: CoreProjectionProcessingMessage.ReadyForCheckpoint
    fullName: CoreProjectionProcessingMessage.ReadyForCheckpoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.ReadyForCheckpoint
    name: CoreProjectionProcessingMessage.ReadyForCheckpoint
    nameWithType: CoreProjectionProcessingMessage.ReadyForCheckpoint
    fullName: CoreProjectionProcessingMessage.ReadyForCheckpoint
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: List{CoreProjectionProcessingMessage.RestartRequested}
  commentId: '!:List{CoreProjectionProcessingMessage.RestartRequested}'
  definition: List`1
  name: List<CoreProjectionProcessingMessage.RestartRequested>
  nameWithType: List<CoreProjectionProcessingMessage.RestartRequested>
  fullName: List<CoreProjectionProcessingMessage.RestartRequested>
  nameWithType.vb: List(Of CoreProjectionProcessingMessage.RestartRequested)
  fullName.vb: List(Of CoreProjectionProcessingMessage.RestartRequested)
  name.vb: List(Of CoreProjectionProcessingMessage.RestartRequested)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.RestartRequested
    name: CoreProjectionProcessingMessage.RestartRequested
    nameWithType: CoreProjectionProcessingMessage.RestartRequested
    fullName: CoreProjectionProcessingMessage.RestartRequested
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.RestartRequested
    name: CoreProjectionProcessingMessage.RestartRequested
    nameWithType: CoreProjectionProcessingMessage.RestartRequested
    fullName: CoreProjectionProcessingMessage.RestartRequested
  - name: )
    nameWithType: )
    fullName: )
- uid: List{CoreProjectionProcessingMessage.Failed}
  commentId: '!:List{CoreProjectionProcessingMessage.Failed}'
  definition: List`1
  name: List<CoreProjectionProcessingMessage.Failed>
  nameWithType: List<CoreProjectionProcessingMessage.Failed>
  fullName: List<CoreProjectionProcessingMessage.Failed>
  nameWithType.vb: List(Of CoreProjectionProcessingMessage.Failed)
  fullName.vb: List(Of CoreProjectionProcessingMessage.Failed)
  name.vb: List(Of CoreProjectionProcessingMessage.Failed)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.Failed
    name: CoreProjectionProcessingMessage.Failed
    nameWithType: CoreProjectionProcessingMessage.Failed
    fullName: CoreProjectionProcessingMessage.Failed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.Failed
    name: CoreProjectionProcessingMessage.Failed
    nameWithType: CoreProjectionProcessingMessage.Failed
    fullName: CoreProjectionProcessingMessage.Failed
  - name: )
    nameWithType: )
    fullName: )
- uid: List{CoreProjectionProcessingMessage.EmittedStreamWriteCompleted}
  commentId: '!:List{CoreProjectionProcessingMessage.EmittedStreamWriteCompleted}'
  definition: List`1
  name: List<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>
  nameWithType: List<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>
  fullName: List<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>
  nameWithType.vb: List(Of CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  fullName.vb: List(Of CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  name.vb: List(Of CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    name: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    nameWithType: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    fullName: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    name: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    nameWithType: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    fullName: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: List{CoreProjectionProcessingMessage.EmittedStreamAwaiting}
  commentId: '!:List{CoreProjectionProcessingMessage.EmittedStreamAwaiting}'
  definition: List`1
  name: List<CoreProjectionProcessingMessage.EmittedStreamAwaiting>
  nameWithType: List<CoreProjectionProcessingMessage.EmittedStreamAwaiting>
  fullName: List<CoreProjectionProcessingMessage.EmittedStreamAwaiting>
  nameWithType.vb: List(Of CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  fullName.vb: List(Of CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  name.vb: List(Of CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    name: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    nameWithType: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    fullName: CoreProjectionProcessingMessage.EmittedStreamAwaiting
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    name: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    nameWithType: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    fullName: CoreProjectionProcessingMessage.EmittedStreamAwaiting
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle*
  commentId: Overload:EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle
  isExternal: false
  name: Handle
  nameWithType: TestCheckpointManagerMessageHandler.Handle
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestCheckpointManagerMessageHandler.Handle
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.ReadyForCheckpoint}.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  commentId: M:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.ReadyForCheckpoint}.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  parent: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.ReadyForCheckpoint}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  nameWithType: IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>.Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.ReadyForCheckpoint).Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.ReadyForCheckpoint).Handle(CoreProjectionProcessingMessage.ReadyForCheckpoint)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>.Handle
    fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.ReadyForCheckpoint>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.ReadyForCheckpoint
    name: CoreProjectionProcessingMessage.ReadyForCheckpoint
    nameWithType: CoreProjectionProcessingMessage.ReadyForCheckpoint
    fullName: CoreProjectionProcessingMessage.ReadyForCheckpoint
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionProcessingMessage.ReadyForCheckpoint).Handle
    fullName: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.ReadyForCheckpoint).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.ReadyForCheckpoint
    name: CoreProjectionProcessingMessage.ReadyForCheckpoint
    nameWithType: CoreProjectionProcessingMessage.ReadyForCheckpoint
    fullName: CoreProjectionProcessingMessage.ReadyForCheckpoint
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreProjectionProcessingMessage.ReadyForCheckpoint
  commentId: T:CoreProjectionProcessingMessage.ReadyForCheckpoint
  isExternal: false
  name: CoreProjectionProcessingMessage.ReadyForCheckpoint
  nameWithType: CoreProjectionProcessingMessage.ReadyForCheckpoint
  fullName: CoreProjectionProcessingMessage.ReadyForCheckpoint
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  isExternal: false
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}.Handle(CoreProjectionProcessingMessage.RestartRequested)
  commentId: M:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}.Handle(CoreProjectionProcessingMessage.RestartRequested)
  parent: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionProcessingMessage.RestartRequested)
  nameWithType: IHandle<CoreProjectionProcessingMessage.RestartRequested>.Handle(CoreProjectionProcessingMessage.RestartRequested)
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.RestartRequested>.Handle(CoreProjectionProcessingMessage.RestartRequested)
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.RestartRequested).Handle(CoreProjectionProcessingMessage.RestartRequested)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.RestartRequested).Handle(CoreProjectionProcessingMessage.RestartRequested)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionProcessingMessage.RestartRequested>.Handle
    fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.RestartRequested>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.RestartRequested
    name: CoreProjectionProcessingMessage.RestartRequested
    nameWithType: CoreProjectionProcessingMessage.RestartRequested
    fullName: CoreProjectionProcessingMessage.RestartRequested
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionProcessingMessage.RestartRequested).Handle
    fullName: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.RestartRequested).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.RestartRequested
    name: CoreProjectionProcessingMessage.RestartRequested
    nameWithType: CoreProjectionProcessingMessage.RestartRequested
    fullName: CoreProjectionProcessingMessage.RestartRequested
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreProjectionProcessingMessage.RestartRequested
  commentId: T:CoreProjectionProcessingMessage.RestartRequested
  isExternal: false
  name: CoreProjectionProcessingMessage.RestartRequested
  nameWithType: CoreProjectionProcessingMessage.RestartRequested
  fullName: CoreProjectionProcessingMessage.RestartRequested
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}.Handle(CoreProjectionProcessingMessage.Failed)
  commentId: M:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}.Handle(CoreProjectionProcessingMessage.Failed)
  parent: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionProcessingMessage.Failed)
  nameWithType: IHandle<CoreProjectionProcessingMessage.Failed>.Handle(CoreProjectionProcessingMessage.Failed)
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.Failed>.Handle(CoreProjectionProcessingMessage.Failed)
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.Failed).Handle(CoreProjectionProcessingMessage.Failed)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.Failed).Handle(CoreProjectionProcessingMessage.Failed)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionProcessingMessage.Failed>.Handle
    fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.Failed>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.Failed
    name: CoreProjectionProcessingMessage.Failed
    nameWithType: CoreProjectionProcessingMessage.Failed
    fullName: CoreProjectionProcessingMessage.Failed
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionProcessingMessage.Failed).Handle
    fullName: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.Failed).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.Failed
    name: CoreProjectionProcessingMessage.Failed
    nameWithType: CoreProjectionProcessingMessage.Failed
    fullName: CoreProjectionProcessingMessage.Failed
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreProjectionProcessingMessage.Failed
  commentId: T:CoreProjectionProcessingMessage.Failed
  isExternal: false
  name: CoreProjectionProcessingMessage.Failed
  nameWithType: CoreProjectionProcessingMessage.Failed
  fullName: CoreProjectionProcessingMessage.Failed
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamAwaiting}.Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  commentId: M:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamAwaiting}.Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  parent: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamAwaiting}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  nameWithType: IHandle<CoreProjectionProcessingMessage.EmittedStreamAwaiting>.Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.EmittedStreamAwaiting>.Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.EmittedStreamAwaiting).Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.EmittedStreamAwaiting).Handle(CoreProjectionProcessingMessage.EmittedStreamAwaiting)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionProcessingMessage.EmittedStreamAwaiting>.Handle
    fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.EmittedStreamAwaiting>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    name: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    nameWithType: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    fullName: CoreProjectionProcessingMessage.EmittedStreamAwaiting
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionProcessingMessage.EmittedStreamAwaiting).Handle
    fullName: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.EmittedStreamAwaiting).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    name: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    nameWithType: CoreProjectionProcessingMessage.EmittedStreamAwaiting
    fullName: CoreProjectionProcessingMessage.EmittedStreamAwaiting
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreProjectionProcessingMessage.EmittedStreamAwaiting
  commentId: T:CoreProjectionProcessingMessage.EmittedStreamAwaiting
  isExternal: false
  name: CoreProjectionProcessingMessage.EmittedStreamAwaiting
  nameWithType: CoreProjectionProcessingMessage.EmittedStreamAwaiting
  fullName: CoreProjectionProcessingMessage.EmittedStreamAwaiting
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamWriteCompleted}.Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  commentId: M:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamWriteCompleted}.Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  parent: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.EmittedStreamWriteCompleted}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  nameWithType: IHandle<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>.Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>.Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.EmittedStreamWriteCompleted).Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.EmittedStreamWriteCompleted).Handle(CoreProjectionProcessingMessage.EmittedStreamWriteCompleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>.Handle
    fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.EmittedStreamWriteCompleted>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    name: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    nameWithType: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    fullName: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionProcessingMessage.EmittedStreamWriteCompleted).Handle
    fullName: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.EmittedStreamWriteCompleted).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    name: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    nameWithType: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
    fullName: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
  commentId: T:CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
  isExternal: false
  name: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
  nameWithType: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted
  fullName: CoreProjectionProcessingMessage.EmittedStreamWriteCompleted

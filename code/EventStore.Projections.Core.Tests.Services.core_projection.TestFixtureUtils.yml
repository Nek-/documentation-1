### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils
  commentId: T:EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils
  id: TestFixtureUtils
  parent: EventStore.Projections.Core.Tests.Services.core_projection
  children:
  - EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ExceptOfEventType(IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  - EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType(IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  - EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType(List{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  - EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfTypes``3(IEnumerable{System.Object})
  - EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream(IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  - EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream(List{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  - EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.WithEventType(List{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  langs:
  - csharp
  - vb
  name: TestFixtureUtils
  nameWithType: TestFixtureUtils
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils
  type: Class
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TestFixtureUtils
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
    startLine: 7
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: 'public static class TestFixtureUtils : object'
    content.vb: >-
      Public Module TestFixtureUtils

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream(IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  commentId: M:EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream(IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  id: ToStream(IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  isExtensionMethod: true
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils
  langs:
  - csharp
  - vb
  name: ToStream(IEnumerable<ClientMessage.WriteEvents>, String)
  nameWithType: TestFixtureUtils.ToStream(IEnumerable<ClientMessage.WriteEvents>, String)
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream(IEnumerable<EventStore.Core.Messages.ClientMessage.WriteEvents>, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ToStream
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
    startLine: 9
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public static IEnumerable<ClientMessage.WriteEvents> ToStream(this IEnumerable<ClientMessage.WriteEvents> self, string streamId)
    parameters:
    - id: self
      type: IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents}
    - id: streamId
      type: System.String
    return:
      type: IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToStream(self As IEnumerable(Of ClientMessage.WriteEvents), streamId As String) As IEnumerable(Of ClientMessage.WriteEvents)
  overload: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream*
  nameWithType.vb: TestFixtureUtils.ToStream(IEnumerable(Of ClientMessage.WriteEvents), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream(IEnumerable(Of EventStore.Core.Messages.ClientMessage.WriteEvents), System.String)
  name.vb: ToStream(IEnumerable(Of ClientMessage.WriteEvents), String)
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream(List{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  commentId: M:EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream(List{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  id: ToStream(List{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  isExtensionMethod: true
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils
  langs:
  - csharp
  - vb
  name: ToStream(List<ClientMessage.WriteEvents>, String)
  nameWithType: TestFixtureUtils.ToStream(List<ClientMessage.WriteEvents>, String)
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream(List<EventStore.Core.Messages.ClientMessage.WriteEvents>, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ToStream
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
    startLine: 15
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public static List<ClientMessage.WriteEvents> ToStream(this List<ClientMessage.WriteEvents> self, string streamId)
    parameters:
    - id: self
      type: List{EventStore.Core.Messages.ClientMessage.WriteEvents}
    - id: streamId
      type: System.String
    return:
      type: List{EventStore.Core.Messages.ClientMessage.WriteEvents}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToStream(self As List(Of ClientMessage.WriteEvents), streamId As String) As List(Of ClientMessage.WriteEvents)
  overload: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream*
  nameWithType.vb: TestFixtureUtils.ToStream(List(Of ClientMessage.WriteEvents), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream(List(Of EventStore.Core.Messages.ClientMessage.WriteEvents), System.String)
  name.vb: ToStream(List(Of ClientMessage.WriteEvents), String)
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType(IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  commentId: M:EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType(IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  id: OfEventType(IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  isExtensionMethod: true
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils
  langs:
  - csharp
  - vb
  name: OfEventType(IEnumerable<ClientMessage.WriteEvents>, String)
  nameWithType: TestFixtureUtils.OfEventType(IEnumerable<ClientMessage.WriteEvents>, String)
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType(IEnumerable<EventStore.Core.Messages.ClientMessage.WriteEvents>, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: OfEventType
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
    startLine: 21
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public static IEnumerable<Event> OfEventType(this IEnumerable<ClientMessage.WriteEvents> self, string type)
    parameters:
    - id: self
      type: IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents}
    - id: type
      type: System.String
    return:
      type: IEnumerable{EventStore.Core.Data.Event}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OfEventType(self As IEnumerable(Of ClientMessage.WriteEvents), type As String) As IEnumerable(Of  Event)
  overload: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType*
  nameWithType.vb: TestFixtureUtils.OfEventType(IEnumerable(Of ClientMessage.WriteEvents), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType(IEnumerable(Of EventStore.Core.Messages.ClientMessage.WriteEvents), System.String)
  name.vb: OfEventType(IEnumerable(Of ClientMessage.WriteEvents), String)
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ExceptOfEventType(IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  commentId: M:EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ExceptOfEventType(IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  id: ExceptOfEventType(IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  isExtensionMethod: true
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils
  langs:
  - csharp
  - vb
  name: ExceptOfEventType(IEnumerable<ClientMessage.WriteEvents>, String)
  nameWithType: TestFixtureUtils.ExceptOfEventType(IEnumerable<ClientMessage.WriteEvents>, String)
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ExceptOfEventType(IEnumerable<EventStore.Core.Messages.ClientMessage.WriteEvents>, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ExceptOfEventType
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
    startLine: 27
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public static IEnumerable<Event> ExceptOfEventType(this IEnumerable<ClientMessage.WriteEvents> self, string type)
    parameters:
    - id: self
      type: IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents}
    - id: type
      type: System.String
    return:
      type: IEnumerable{EventStore.Core.Data.Event}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExceptOfEventType(self As IEnumerable(Of ClientMessage.WriteEvents), type As String) As IEnumerable(Of  Event)
  overload: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ExceptOfEventType*
  nameWithType.vb: TestFixtureUtils.ExceptOfEventType(IEnumerable(Of ClientMessage.WriteEvents), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ExceptOfEventType(IEnumerable(Of EventStore.Core.Messages.ClientMessage.WriteEvents), System.String)
  name.vb: ExceptOfEventType(IEnumerable(Of ClientMessage.WriteEvents), String)
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType(List{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  commentId: M:EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType(List{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  id: OfEventType(List{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  isExtensionMethod: true
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils
  langs:
  - csharp
  - vb
  name: OfEventType(List<ClientMessage.WriteEvents>, String)
  nameWithType: TestFixtureUtils.OfEventType(List<ClientMessage.WriteEvents>, String)
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType(List<EventStore.Core.Messages.ClientMessage.WriteEvents>, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: OfEventType
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
    startLine: 33
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public static List<Event> OfEventType(this List<ClientMessage.WriteEvents> self, string type)
    parameters:
    - id: self
      type: List{EventStore.Core.Messages.ClientMessage.WriteEvents}
    - id: type
      type: System.String
    return:
      type: List{EventStore.Core.Data.Event}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OfEventType(self As List(Of ClientMessage.WriteEvents), type As String) As List(Of  Event)
  overload: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType*
  nameWithType.vb: TestFixtureUtils.OfEventType(List(Of ClientMessage.WriteEvents), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType(List(Of EventStore.Core.Messages.ClientMessage.WriteEvents), System.String)
  name.vb: OfEventType(List(Of ClientMessage.WriteEvents), String)
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.WithEventType(List{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  commentId: M:EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.WithEventType(List{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  id: WithEventType(List{EventStore.Core.Messages.ClientMessage.WriteEvents},System.String)
  isExtensionMethod: true
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils
  langs:
  - csharp
  - vb
  name: WithEventType(List<ClientMessage.WriteEvents>, String)
  nameWithType: TestFixtureUtils.WithEventType(List<ClientMessage.WriteEvents>, String)
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.WithEventType(List<EventStore.Core.Messages.ClientMessage.WriteEvents>, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: WithEventType
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
    startLine: 39
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: public static List<ClientMessage.WriteEvents> WithEventType(this List<ClientMessage.WriteEvents> self, string type)
    parameters:
    - id: self
      type: List{EventStore.Core.Messages.ClientMessage.WriteEvents}
    - id: type
      type: System.String
    return:
      type: List{EventStore.Core.Messages.ClientMessage.WriteEvents}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithEventType(self As List(Of ClientMessage.WriteEvents), type As String) As List(Of ClientMessage.WriteEvents)
  overload: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.WithEventType*
  nameWithType.vb: TestFixtureUtils.WithEventType(List(Of ClientMessage.WriteEvents), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.WithEventType(List(Of EventStore.Core.Messages.ClientMessage.WriteEvents), System.String)
  name.vb: WithEventType(List(Of ClientMessage.WriteEvents), String)
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfTypes``3(IEnumerable{System.Object})
  commentId: M:EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfTypes``3(IEnumerable{System.Object})
  id: OfTypes``3(IEnumerable{System.Object})
  isExtensionMethod: true
  parent: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils
  langs:
  - csharp
  - vb
  name: OfTypes<T, T1, T2>(IEnumerable<Object>)
  nameWithType: TestFixtureUtils.OfTypes<T, T1, T2>(IEnumerable<Object>)
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfTypes<T, T1, T2>(IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: OfTypes
    path: ../EventStore/src/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs
    startLine: 45
  assemblies:
  - EventStore.Projections.Core.Tests
  namespace: EventStore.Projections.Core.Tests.Services.core_projection
  syntax:
    content: 'public static IEnumerable<T> OfTypes<T, T1, T2>(this IEnumerable<object> source)where T1 : T where T2 : T'
    parameters:
    - id: source
      type: IEnumerable{System.Object}
    typeParameters:
    - id: T
    - id: T1
    - id: T2
    return:
      type: IEnumerable{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OfTypes(Of T, T1 As T, T2 As T)(source As IEnumerable(Of Object)) As IEnumerable(Of T)
  overload: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfTypes*
  nameWithType.vb: TestFixtureUtils.OfTypes(Of T, T1, T2)(IEnumerable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfTypes(Of T, T1, T2)(IEnumerable(Of System.Object))
  name.vb: OfTypes(Of T, T1, T2)(IEnumerable(Of Object))
references:
- uid: EventStore.Projections.Core.Tests.Services.core_projection
  commentId: N:EventStore.Projections.Core.Tests.Services.core_projection
  isExternal: false
  name: EventStore.Projections.Core.Tests.Services.core_projection
  nameWithType: EventStore.Projections.Core.Tests.Services.core_projection
  fullName: EventStore.Projections.Core.Tests.Services.core_projection
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream*
  commentId: Overload:EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream
  isExternal: false
  name: ToStream
  nameWithType: TestFixtureUtils.ToStream
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ToStream
- uid: IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents}
  commentId: '!:IEnumerable{EventStore.Core.Messages.ClientMessage.WriteEvents}'
  definition: IEnumerable`1
  name: IEnumerable<ClientMessage.WriteEvents>
  nameWithType: IEnumerable<ClientMessage.WriteEvents>
  fullName: IEnumerable<EventStore.Core.Messages.ClientMessage.WriteEvents>
  nameWithType.vb: IEnumerable(Of ClientMessage.WriteEvents)
  fullName.vb: IEnumerable(Of EventStore.Core.Messages.ClientMessage.WriteEvents)
  name.vb: IEnumerable(Of ClientMessage.WriteEvents)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: List{EventStore.Core.Messages.ClientMessage.WriteEvents}
  commentId: '!:List{EventStore.Core.Messages.ClientMessage.WriteEvents}'
  definition: List`1
  name: List<ClientMessage.WriteEvents>
  nameWithType: List<ClientMessage.WriteEvents>
  fullName: List<EventStore.Core.Messages.ClientMessage.WriteEvents>
  nameWithType.vb: List(Of ClientMessage.WriteEvents)
  fullName.vb: List(Of EventStore.Core.Messages.ClientMessage.WriteEvents)
  name.vb: List(Of ClientMessage.WriteEvents)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType*
  commentId: Overload:EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType
  isExternal: false
  name: OfEventType
  nameWithType: TestFixtureUtils.OfEventType
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfEventType
- uid: IEnumerable{EventStore.Core.Data.Event}
  commentId: '!:IEnumerable{EventStore.Core.Data.Event}'
  definition: IEnumerable`1
  name: IEnumerable<Event>
  nameWithType: IEnumerable<Event>
  fullName: IEnumerable<EventStore.Core.Data.Event>
  nameWithType.vb: IEnumerable(Of Event)
  fullName.vb: IEnumerable(Of EventStore.Core.Data.Event)
  name.vb: IEnumerable(Of Event)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ExceptOfEventType*
  commentId: Overload:EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ExceptOfEventType
  isExternal: false
  name: ExceptOfEventType
  nameWithType: TestFixtureUtils.ExceptOfEventType
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.ExceptOfEventType
- uid: List{EventStore.Core.Data.Event}
  commentId: '!:List{EventStore.Core.Data.Event}'
  definition: List`1
  name: List<Event>
  nameWithType: List<Event>
  fullName: List<EventStore.Core.Data.Event>
  nameWithType.vb: List(Of Event)
  fullName.vb: List(Of EventStore.Core.Data.Event)
  name.vb: List(Of Event)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.WithEventType*
  commentId: Overload:EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.WithEventType
  isExternal: false
  name: WithEventType
  nameWithType: TestFixtureUtils.WithEventType
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.WithEventType
- uid: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfTypes*
  commentId: Overload:EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfTypes
  isExternal: false
  name: OfTypes
  nameWithType: TestFixtureUtils.OfTypes
  fullName: EventStore.Projections.Core.Tests.Services.core_projection.TestFixtureUtils.OfTypes
- uid: IEnumerable{System.Object}
  commentId: '!:IEnumerable{System.Object}'
  definition: IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )

### YamlMime:ManagedReference
items:
- uid: EventStore.TestClient.Client
  commentId: T:EventStore.TestClient.Client
  id: Client
  parent: EventStore.TestClient
  children:
  - EventStore.TestClient.Client.#ctor(EventStore.TestClient.ClientOptions)
  - EventStore.TestClient.Client.CreateTcpConnection(EventStore.TestClient.CommandProcessorContext,Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},EventStore.Core.Services.Transport.Tcp.TcpPackage},Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]}},Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},SocketError},System.Boolean,IPEndPoint)
  - EventStore.TestClient.Client.HttpEndpoint
  - EventStore.TestClient.Client.InteractiveMode
  - EventStore.TestClient.Client.Options
  - EventStore.TestClient.Client.Run
  - EventStore.TestClient.Client.TargetHost
  - EventStore.TestClient.Client.TcpEndpoint
  - EventStore.TestClient.Client.UseSsl
  - EventStore.TestClient.Client.ValidateServer
  langs:
  - csharp
  - vb
  name: Client
  nameWithType: Client
  fullName: EventStore.TestClient.Client
  type: Class
  source:
    remote:
      path: src/EventStore.TestClient/Client.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Client
    path: ../EventStore/src/EventStore.TestClient/Client.cs
    startLine: 18
  assemblies:
  - EventStore.TestClient
  namespace: EventStore.TestClient
  syntax:
    content: 'public class Client : object'
    content.vb: >-
      Public Class Client

          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.TestClient.Client.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.TestClient.Client.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.TestClient.Client.InteractiveMode
  commentId: F:EventStore.TestClient.Client.InteractiveMode
  id: InteractiveMode
  parent: EventStore.TestClient.Client
  langs:
  - csharp
  - vb
  name: InteractiveMode
  nameWithType: Client.InteractiveMode
  fullName: EventStore.TestClient.Client.InteractiveMode
  type: Field
  source:
    remote:
      path: src/EventStore.TestClient/Client.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: InteractiveMode
    path: ../EventStore/src/EventStore.TestClient/Client.cs
    startLine: 22
  assemblies:
  - EventStore.TestClient
  namespace: EventStore.TestClient
  syntax:
    content: public readonly bool InteractiveMode
    return:
      type: System.Boolean
    content.vb: Public ReadOnly InteractiveMode As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.TestClient.Client.Options
  commentId: F:EventStore.TestClient.Client.Options
  id: Options
  parent: EventStore.TestClient.Client
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: Client.Options
  fullName: EventStore.TestClient.Client.Options
  type: Field
  source:
    remote:
      path: src/EventStore.TestClient/Client.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Options
    path: ../EventStore/src/EventStore.TestClient/Client.cs
    startLine: 24
  assemblies:
  - EventStore.TestClient
  namespace: EventStore.TestClient
  syntax:
    content: public readonly ClientOptions Options
    return:
      type: EventStore.TestClient.ClientOptions
    content.vb: Public ReadOnly Options As ClientOptions
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.TestClient.Client.TcpEndpoint
  commentId: F:EventStore.TestClient.Client.TcpEndpoint
  id: TcpEndpoint
  parent: EventStore.TestClient.Client
  langs:
  - csharp
  - vb
  name: TcpEndpoint
  nameWithType: Client.TcpEndpoint
  fullName: EventStore.TestClient.Client.TcpEndpoint
  type: Field
  source:
    remote:
      path: src/EventStore.TestClient/Client.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TcpEndpoint
    path: ../EventStore/src/EventStore.TestClient/Client.cs
    startLine: 25
  assemblies:
  - EventStore.TestClient
  namespace: EventStore.TestClient
  syntax:
    content: public readonly IPEndPoint TcpEndpoint
    return:
      type: IPEndPoint
    content.vb: Public ReadOnly TcpEndpoint As IPEndPoint
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.TestClient.Client.HttpEndpoint
  commentId: F:EventStore.TestClient.Client.HttpEndpoint
  id: HttpEndpoint
  parent: EventStore.TestClient.Client
  langs:
  - csharp
  - vb
  name: HttpEndpoint
  nameWithType: Client.HttpEndpoint
  fullName: EventStore.TestClient.Client.HttpEndpoint
  type: Field
  source:
    remote:
      path: src/EventStore.TestClient/Client.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: HttpEndpoint
    path: ../EventStore/src/EventStore.TestClient/Client.cs
    startLine: 26
  assemblies:
  - EventStore.TestClient
  namespace: EventStore.TestClient
  syntax:
    content: public readonly IPEndPoint HttpEndpoint
    return:
      type: IPEndPoint
    content.vb: Public ReadOnly HttpEndpoint As IPEndPoint
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.TestClient.Client.UseSsl
  commentId: F:EventStore.TestClient.Client.UseSsl
  id: UseSsl
  parent: EventStore.TestClient.Client
  langs:
  - csharp
  - vb
  name: UseSsl
  nameWithType: Client.UseSsl
  fullName: EventStore.TestClient.Client.UseSsl
  type: Field
  source:
    remote:
      path: src/EventStore.TestClient/Client.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: UseSsl
    path: ../EventStore/src/EventStore.TestClient/Client.cs
    startLine: 27
  assemblies:
  - EventStore.TestClient
  namespace: EventStore.TestClient
  syntax:
    content: public readonly bool UseSsl
    return:
      type: System.Boolean
    content.vb: Public ReadOnly UseSsl As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.TestClient.Client.TargetHost
  commentId: F:EventStore.TestClient.Client.TargetHost
  id: TargetHost
  parent: EventStore.TestClient.Client
  langs:
  - csharp
  - vb
  name: TargetHost
  nameWithType: Client.TargetHost
  fullName: EventStore.TestClient.Client.TargetHost
  type: Field
  source:
    remote:
      path: src/EventStore.TestClient/Client.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TargetHost
    path: ../EventStore/src/EventStore.TestClient/Client.cs
    startLine: 28
  assemblies:
  - EventStore.TestClient
  namespace: EventStore.TestClient
  syntax:
    content: public readonly string TargetHost
    return:
      type: System.String
    content.vb: Public ReadOnly TargetHost As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.TestClient.Client.ValidateServer
  commentId: F:EventStore.TestClient.Client.ValidateServer
  id: ValidateServer
  parent: EventStore.TestClient.Client
  langs:
  - csharp
  - vb
  name: ValidateServer
  nameWithType: Client.ValidateServer
  fullName: EventStore.TestClient.Client.ValidateServer
  type: Field
  source:
    remote:
      path: src/EventStore.TestClient/Client.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ValidateServer
    path: ../EventStore/src/EventStore.TestClient/Client.cs
    startLine: 29
  assemblies:
  - EventStore.TestClient
  namespace: EventStore.TestClient
  syntax:
    content: public readonly bool ValidateServer
    return:
      type: System.Boolean
    content.vb: Public ReadOnly ValidateServer As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.TestClient.Client.#ctor(EventStore.TestClient.ClientOptions)
  commentId: M:EventStore.TestClient.Client.#ctor(EventStore.TestClient.ClientOptions)
  id: '#ctor(EventStore.TestClient.ClientOptions)'
  parent: EventStore.TestClient.Client
  langs:
  - csharp
  - vb
  name: Client(ClientOptions)
  nameWithType: Client.Client(ClientOptions)
  fullName: EventStore.TestClient.Client.Client(EventStore.TestClient.ClientOptions)
  type: Constructor
  source:
    remote:
      path: src/EventStore.TestClient/Client.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.TestClient/Client.cs
    startLine: 36
  assemblies:
  - EventStore.TestClient
  namespace: EventStore.TestClient
  syntax:
    content: public Client(ClientOptions options)
    parameters:
    - id: options
      type: EventStore.TestClient.ClientOptions
    content.vb: Public Sub New(options As ClientOptions)
  overload: EventStore.TestClient.Client.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.TestClient.Client.Run
  commentId: M:EventStore.TestClient.Client.Run
  id: Run
  parent: EventStore.TestClient.Client
  langs:
  - csharp
  - vb
  name: Run()
  nameWithType: Client.Run()
  fullName: EventStore.TestClient.Client.Run()
  type: Method
  source:
    remote:
      path: src/EventStore.TestClient/Client.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: Run
    path: ../EventStore/src/EventStore.TestClient/Client.cs
    startLine: 92
  assemblies:
  - EventStore.TestClient
  namespace: EventStore.TestClient
  syntax:
    content: public int Run()
    return:
      type: System.Int32
    content.vb: Public Function Run As Integer
  overload: EventStore.TestClient.Client.Run*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.TestClient.Client.CreateTcpConnection(EventStore.TestClient.CommandProcessorContext,Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},EventStore.Core.Services.Transport.Tcp.TcpPackage},Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]}},Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},SocketError},System.Boolean,IPEndPoint)
  commentId: M:EventStore.TestClient.Client.CreateTcpConnection(EventStore.TestClient.CommandProcessorContext,Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},EventStore.Core.Services.Transport.Tcp.TcpPackage},Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]}},Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},SocketError},System.Boolean,IPEndPoint)
  id: CreateTcpConnection(EventStore.TestClient.CommandProcessorContext,Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},EventStore.Core.Services.Transport.Tcp.TcpPackage},Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]}},Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},SocketError},System.Boolean,IPEndPoint)
  parent: EventStore.TestClient.Client
  langs:
  - csharp
  - vb
  name: CreateTcpConnection(CommandProcessorContext, Action<TcpTypedConnection<Byte[]>, TcpPackage>, Action<TcpTypedConnection<Byte[]>>, Action<TcpTypedConnection<Byte[]>, SocketError>, Boolean, IPEndPoint)
  nameWithType: Client.CreateTcpConnection(CommandProcessorContext, Action<TcpTypedConnection<Byte[]>, TcpPackage>, Action<TcpTypedConnection<Byte[]>>, Action<TcpTypedConnection<Byte[]>, SocketError>, Boolean, IPEndPoint)
  fullName: EventStore.TestClient.Client.CreateTcpConnection(EventStore.TestClient.CommandProcessorContext, Action<EventStore.Transport.Tcp.TcpTypedConnection<System.Byte[]>, EventStore.Core.Services.Transport.Tcp.TcpPackage>, Action<EventStore.Transport.Tcp.TcpTypedConnection<System.Byte[]>>, Action<EventStore.Transport.Tcp.TcpTypedConnection<System.Byte[]>, SocketError>, System.Boolean, IPEndPoint)
  type: Method
  source:
    remote:
      path: src/EventStore.TestClient/Client.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: CreateTcpConnection
    path: ../EventStore/src/EventStore.TestClient/Client.cs
    startLine: 151
  assemblies:
  - EventStore.TestClient
  namespace: EventStore.TestClient
  syntax:
    content: public TcpTypedConnection<byte[]> CreateTcpConnection(CommandProcessorContext context, Action<TcpTypedConnection<byte[]>, TcpPackage> handlePackage, Action<TcpTypedConnection<byte[]>> connectionEstablished = null, Action<TcpTypedConnection<byte[]>, SocketError> connectionClosed = null, bool failContextOnError = true, IPEndPoint tcpEndPoint = null)
    parameters:
    - id: context
      type: EventStore.TestClient.CommandProcessorContext
    - id: handlePackage
      type: Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},EventStore.Core.Services.Transport.Tcp.TcpPackage}
    - id: connectionEstablished
      type: Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]}}
    - id: connectionClosed
      type: Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},SocketError}
    - id: failContextOnError
      type: System.Boolean
    - id: tcpEndPoint
      type: IPEndPoint
    return:
      type: EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]}
    content.vb: Public Function CreateTcpConnection(context As CommandProcessorContext, handlePackage As Action(Of TcpTypedConnection(Of Byte()), TcpPackage), connectionEstablished As Action(Of TcpTypedConnection(Of Byte())) = Nothing, connectionClosed As Action(Of TcpTypedConnection(Of Byte()), SocketError) = Nothing, failContextOnError As Boolean = True, tcpEndPoint As IPEndPoint = Nothing) As TcpTypedConnection(Of Byte())
  overload: EventStore.TestClient.Client.CreateTcpConnection*
  nameWithType.vb: Client.CreateTcpConnection(CommandProcessorContext, Action(Of TcpTypedConnection(Of Byte()), TcpPackage), Action(Of TcpTypedConnection(Of Byte())), Action(Of TcpTypedConnection(Of Byte()), SocketError), Boolean, IPEndPoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.TestClient.Client.CreateTcpConnection(EventStore.TestClient.CommandProcessorContext, Action(Of EventStore.Transport.Tcp.TcpTypedConnection(Of System.Byte()), EventStore.Core.Services.Transport.Tcp.TcpPackage), Action(Of EventStore.Transport.Tcp.TcpTypedConnection(Of System.Byte())), Action(Of EventStore.Transport.Tcp.TcpTypedConnection(Of System.Byte()), SocketError), System.Boolean, IPEndPoint)
  name.vb: CreateTcpConnection(CommandProcessorContext, Action(Of TcpTypedConnection(Of Byte()), TcpPackage), Action(Of TcpTypedConnection(Of Byte())), Action(Of TcpTypedConnection(Of Byte()), SocketError), Boolean, IPEndPoint)
references:
- uid: EventStore.TestClient
  commentId: N:EventStore.TestClient
  isExternal: false
  name: EventStore.TestClient
  nameWithType: EventStore.TestClient
  fullName: EventStore.TestClient
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.TestClient.Client.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<Client>()
  nameWithType: ProtobufExtensions.Serialize<Client>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.TestClient.Client>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of Client)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.TestClient.Client)()
  name.vb: Serialize(Of Client)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<Client>
    nameWithType: ProtobufExtensions.Serialize<Client>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.TestClient.Client>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of Client)
    nameWithType: ProtobufExtensions.Serialize(Of Client)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.TestClient.Client)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.TestClient.Client.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<Client>()
  nameWithType: ProtobufExtensions.SerializeToArray<Client>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.TestClient.Client>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of Client)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.TestClient.Client)()
  name.vb: SerializeToArray(Of Client)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<Client>
    nameWithType: ProtobufExtensions.SerializeToArray<Client>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.TestClient.Client>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of Client)
    nameWithType: ProtobufExtensions.SerializeToArray(Of Client)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.TestClient.Client)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.TestClient.ClientOptions
  commentId: T:EventStore.TestClient.ClientOptions
  parent: EventStore.TestClient
  isExternal: false
  name: ClientOptions
  nameWithType: ClientOptions
  fullName: EventStore.TestClient.ClientOptions
- uid: IPEndPoint
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: IPEndPoint
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.TestClient.Client.#ctor*
  commentId: Overload:EventStore.TestClient.Client.#ctor
  isExternal: false
  name: Client
  nameWithType: Client.Client
  fullName: EventStore.TestClient.Client.Client
- uid: EventStore.TestClient.Client.Run*
  commentId: Overload:EventStore.TestClient.Client.Run
  isExternal: false
  name: Run
  nameWithType: Client.Run
  fullName: EventStore.TestClient.Client.Run
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.TestClient.Client.CreateTcpConnection*
  commentId: Overload:EventStore.TestClient.Client.CreateTcpConnection
  isExternal: false
  name: CreateTcpConnection
  nameWithType: Client.CreateTcpConnection
  fullName: EventStore.TestClient.Client.CreateTcpConnection
- uid: EventStore.TestClient.CommandProcessorContext
  commentId: T:EventStore.TestClient.CommandProcessorContext
  parent: EventStore.TestClient
  isExternal: false
  name: CommandProcessorContext
  nameWithType: CommandProcessorContext
  fullName: EventStore.TestClient.CommandProcessorContext
- uid: Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},EventStore.Core.Services.Transport.Tcp.TcpPackage}
  commentId: '!:Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},EventStore.Core.Services.Transport.Tcp.TcpPackage}'
  definition: Action`2
  name: Action<TcpTypedConnection<Byte[]>, TcpPackage>
  nameWithType: Action<TcpTypedConnection<Byte[]>, TcpPackage>
  fullName: Action<EventStore.Transport.Tcp.TcpTypedConnection<System.Byte[]>, EventStore.Core.Services.Transport.Tcp.TcpPackage>
  nameWithType.vb: Action(Of TcpTypedConnection(Of Byte()), TcpPackage)
  fullName.vb: Action(Of EventStore.Transport.Tcp.TcpTypedConnection(Of System.Byte()), EventStore.Core.Services.Transport.Tcp.TcpPackage)
  name.vb: Action(Of TcpTypedConnection(Of Byte()), TcpPackage)
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]}}
  commentId: '!:Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]}}'
  definition: Action`1
  name: Action<TcpTypedConnection<Byte[]>>
  nameWithType: Action<TcpTypedConnection<Byte[]>>
  fullName: Action<EventStore.Transport.Tcp.TcpTypedConnection<System.Byte[]>>
  nameWithType.vb: Action(Of TcpTypedConnection(Of Byte()))
  fullName.vb: Action(Of EventStore.Transport.Tcp.TcpTypedConnection(Of System.Byte()))
  name.vb: Action(Of TcpTypedConnection(Of Byte()))
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},SocketError}
  commentId: '!:Action{EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]},SocketError}'
  definition: Action`2
  name: Action<TcpTypedConnection<Byte[]>, SocketError>
  nameWithType: Action<TcpTypedConnection<Byte[]>, SocketError>
  fullName: Action<EventStore.Transport.Tcp.TcpTypedConnection<System.Byte[]>, SocketError>
  nameWithType.vb: Action(Of TcpTypedConnection(Of Byte()), SocketError)
  fullName.vb: Action(Of EventStore.Transport.Tcp.TcpTypedConnection(Of System.Byte()), SocketError)
  name.vb: Action(Of TcpTypedConnection(Of Byte()), SocketError)
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: SocketError
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: SocketError
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]}
  commentId: T:EventStore.Transport.Tcp.TcpTypedConnection{System.Byte[]}
  parent: EventStore.Transport.Tcp
  definition: EventStore.Transport.Tcp.TcpTypedConnection`1
  name: TcpTypedConnection<Byte[]>
  nameWithType: TcpTypedConnection<Byte[]>
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<System.Byte[]>
  nameWithType.vb: TcpTypedConnection(Of Byte())
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of System.Byte())
  name.vb: TcpTypedConnection(Of Byte())
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`2
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1
  commentId: T:EventStore.Transport.Tcp.TcpTypedConnection`1
  isExternal: false
  name: TcpTypedConnection<T>
  nameWithType: TcpTypedConnection<T>
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>
  nameWithType.vb: TcpTypedConnection(Of T)
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T)
  name.vb: TcpTypedConnection(Of T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp
  commentId: N:EventStore.Transport.Tcp
  isExternal: false
  name: EventStore.Transport.Tcp
  nameWithType: EventStore.Transport.Tcp
  fullName: EventStore.Transport.Tcp

### YamlMime:ManagedReference
items:
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1
  commentId: T:EventStore.Transport.Tcp.Formatting.FormatterBase`1
  id: FormatterBase`1
  parent: EventStore.Transport.Tcp.Formatting
  children:
  - EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(ArraySegment{System.Byte})
  - EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(EventStore.BufferManagement.BufferPool)
  - EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(Stream)
  - EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(System.Byte[])
  - EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArray(`0)
  - EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArraySegment(`0)
  - EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToBufferPool(`0)
  langs:
  - csharp
  - vb
  name: FormatterBase<T>
  nameWithType: FormatterBase<T>
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>
  type: Class
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: FormatterBase
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
    startLine: 6
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  syntax:
    content: 'public abstract class FormatterBase<T> : object, IMessageFormatter<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public MustInherit Class FormatterBase(Of T)
          Inherits Object
          Implements IMessageFormatter(Of T)
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Transport.Tcp.Formatting.FormatterBase`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Transport.Tcp.Formatting.FormatterBase`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  nameWithType.vb: FormatterBase(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T)
  name.vb: FormatterBase(Of T)
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToBufferPool(`0)
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToBufferPool(`0)
  id: ToBufferPool(`0)
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase`1
  langs:
  - csharp
  - vb
  name: ToBufferPool(T)
  nameWithType: FormatterBase<T>.ToBufferPool(T)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToBufferPool(T)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ToBufferPool
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
    startLine: 13
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nGets a <xref href=\"EventStore.BufferManagement.BufferPool\" data-throw-if-not-resolved=\"false\"></xref> representing the IMessage provided.\n"
  example: []
  syntax:
    content: public abstract BufferPool ToBufferPool(T message)
    parameters:
    - id: message
      type: '{T}'
      description: The message.
    return:
      type: EventStore.BufferManagement.BufferPool
      description: A <xref href="EventStore.BufferManagement.BufferPool" data-throw-if-not-resolved="false"></xref> with a representation of the message
    content.vb: Public MustOverride Function ToBufferPool(message As T) As BufferPool
  overload: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToBufferPool*
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}.ToBufferPool({T})
  nameWithType.vb: FormatterBase(Of T).ToBufferPool(T)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToBufferPool(T)
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArraySegment(`0)
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArraySegment(`0)
  id: ToArraySegment(`0)
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase`1
  langs:
  - csharp
  - vb
  name: ToArraySegment(T)
  nameWithType: FormatterBase<T>.ToArraySegment(T)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToArraySegment(T)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ToArraySegment
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
    startLine: 20
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nconverts the message to a <see cref=\"!:ArraySegment&lt;T>\"></see>\n"
  example: []
  syntax:
    content: public virtual ArraySegment<byte> ToArraySegment(T message)
    parameters:
    - id: message
      type: '{T}'
      description: The message.
    return:
      type: ArraySegment{System.Byte}
      description: ''
    content.vb: Public Overridable Function ToArraySegment(message As T) As ArraySegment(Of Byte)
  overload: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArraySegment*
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}.ToArraySegment({T})
  nameWithType.vb: FormatterBase(Of T).ToArraySegment(T)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToArraySegment(T)
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArray(`0)
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArray(`0)
  id: ToArray(`0)
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase`1
  langs:
  - csharp
  - vb
  name: ToArray(T)
  nameWithType: FormatterBase<T>.ToArray(T)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToArray(T)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ToArray
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
    startLine: 30
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nConverts the message to a byte array\n"
  example: []
  syntax:
    content: public virtual byte[] ToArray(T message)
    parameters:
    - id: message
      type: '{T}'
      description: The message.
    return:
      type: System.Byte[]
      description: ''
    content.vb: Public Overridable Function ToArray(message As T) As Byte()
  overload: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArray*
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}.ToArray({T})
  nameWithType.vb: FormatterBase(Of T).ToArray(T)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToArray(T)
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(EventStore.BufferManagement.BufferPool)
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(EventStore.BufferManagement.BufferPool)
  id: From(EventStore.BufferManagement.BufferPool)
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase`1
  langs:
  - csharp
  - vb
  name: From(BufferPool)
  nameWithType: FormatterBase<T>.From(BufferPool)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From(EventStore.BufferManagement.BufferPool)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: From
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
    startLine: 43
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nGets a message from a <xref href=\"EventStore.BufferManagement.BufferPool\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual T From(BufferPool bufferPool)
    parameters:
    - id: bufferPool
      type: EventStore.BufferManagement.BufferPool
      description: The BufferPool to get data from.
    return:
      type: '{T}'
      description: ''
    content.vb: Public Overridable Function From(bufferPool As BufferPool) As T
  overload: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From*
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}.From(EventStore.BufferManagement.BufferPool)
  nameWithType.vb: FormatterBase(Of T).From(BufferPool)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From(EventStore.BufferManagement.BufferPool)
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(ArraySegment{System.Byte})
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(ArraySegment{System.Byte})
  id: From(ArraySegment{System.Byte})
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase`1
  langs:
  - csharp
  - vb
  name: From(ArraySegment<Byte>)
  nameWithType: FormatterBase<T>.From(ArraySegment<Byte>)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From(ArraySegment<System.Byte>)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: From
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
    startLine: 56
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nGets a message from a <see cref=\"!:ArraySegment&lt;Byte>\"></see>\n"
  example: []
  syntax:
    content: public virtual T From(ArraySegment<byte> segment)
    parameters:
    - id: segment
      type: ArraySegment{System.Byte}
      description: The segment containing the raw data.
    return:
      type: '{T}'
      description: ''
    content.vb: Public Overridable Function From(segment As ArraySegment(Of Byte)) As T
  overload: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From*
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}.From(ArraySegment{System.Byte})
  nameWithType.vb: FormatterBase(Of T).From(ArraySegment(Of Byte))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From(ArraySegment(Of System.Byte))
  name.vb: From(ArraySegment(Of Byte))
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(System.Byte[])
  id: From(System.Byte[])
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase`1
  langs:
  - csharp
  - vb
  name: From(Byte[])
  nameWithType: FormatterBase<T>.From(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From(System.Byte[])
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: From
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
    startLine: 69
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nGets a message from a byte array\n"
  example: []
  syntax:
    content: public virtual T From(byte[] array)
    parameters:
    - id: array
      type: System.Byte[]
      description: The byte array.
    return:
      type: '{T}'
      description: ''
    content.vb: Public Overridable Function From(array As Byte()) As T
  overload: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From*
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}.From(System.Byte[])
  nameWithType.vb: FormatterBase(Of T).From(Byte())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From(System.Byte())
  name.vb: From(Byte())
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(Stream)
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(Stream)
  id: From(Stream)
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase`1
  langs:
  - csharp
  - vb
  name: From(Stream)
  nameWithType: FormatterBase<T>.From(Stream)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From(Stream)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: From
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/FormatterBase.cs
    startLine: 84
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nCreates a message object from the specified stream\n"
  example: []
  syntax:
    content: public abstract T From(Stream stream)
    parameters:
    - id: stream
      type: Stream
      description: The stream.
    return:
      type: '{T}'
      description: ''
    content.vb: Public MustOverride Function From(stream As Stream) As T
  overload: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From*
  nameWithType.vb: FormatterBase(Of T).From(Stream)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From(Stream)
references:
- uid: EventStore.Transport.Tcp.Formatting
  commentId: N:EventStore.Transport.Tcp.Formatting
  name: EventStore.Transport.Tcp.Formatting
  nameWithType: EventStore.Transport.Tcp.Formatting
  fullName: EventStore.Transport.Tcp.Formatting
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}
  commentId: T:EventStore.Transport.Tcp.Formatting.IMessageFormatter{`0}
  parent: EventStore.Transport.Tcp.Formatting
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
  name: IMessageFormatter<T>
  nameWithType: IMessageFormatter<T>
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>
  nameWithType.vb: IMessageFormatter(Of T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T)
  name.vb: IMessageFormatter(Of T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<FormatterBase<T>>()
  nameWithType: ProtobufExtensions.Serialize<FormatterBase<T>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.Formatting.FormatterBase<T>>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of FormatterBase(Of T))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.Formatting.FormatterBase(Of T))()
  name.vb: Serialize(Of FormatterBase(Of T))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<FormatterBase<T>>
    nameWithType: ProtobufExtensions.Serialize<FormatterBase<T>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.Formatting.FormatterBase<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of FormatterBase(Of T))
    nameWithType: ProtobufExtensions.Serialize(Of FormatterBase(Of T))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.Formatting.FormatterBase(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<FormatterBase<T>>()
  nameWithType: ProtobufExtensions.SerializeToArray<FormatterBase<T>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.Formatting.FormatterBase<T>>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of FormatterBase(Of T))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.Formatting.FormatterBase(Of T))()
  name.vb: SerializeToArray(Of FormatterBase(Of T))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<FormatterBase<T>>
    nameWithType: ProtobufExtensions.SerializeToArray<FormatterBase<T>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.Formatting.FormatterBase<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of FormatterBase(Of T))
    nameWithType: ProtobufExtensions.SerializeToArray(Of FormatterBase(Of T))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.Formatting.FormatterBase(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
  commentId: T:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
  name: IMessageFormatter<T>
  nameWithType: IMessageFormatter<T>
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>
  nameWithType.vb: IMessageFormatter(Of T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T)
  name.vb: IMessageFormatter(Of T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.BufferManagement.BufferPool
  commentId: T:EventStore.BufferManagement.BufferPool
  parent: EventStore.BufferManagement
  name: BufferPool
  nameWithType: BufferPool
  fullName: EventStore.BufferManagement.BufferPool
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToBufferPool*
  commentId: Overload:EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToBufferPool
  name: ToBufferPool
  nameWithType: FormatterBase<T>.ToBufferPool
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToBufferPool
  nameWithType.vb: FormatterBase(Of T).ToBufferPool
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToBufferPool
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}.ToBufferPool({T})
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter{`0}.ToBufferPool(`0)
  parent: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
  name: ToBufferPool(T)
  nameWithType: IMessageFormatter<T>.ToBufferPool(T)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToBufferPool(T)
  nameWithType.vb: IMessageFormatter(Of T).ToBufferPool(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToBufferPool(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
    name: ToBufferPool
    nameWithType: IMessageFormatter<T>.ToBufferPool
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToBufferPool
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
    name: ToBufferPool
    nameWithType: IMessageFormatter(Of T).ToBufferPool
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToBufferPool
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.BufferManagement
  commentId: N:EventStore.BufferManagement
  name: EventStore.BufferManagement
  nameWithType: EventStore.BufferManagement
  fullName: EventStore.BufferManagement
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
  name: ToBufferPool(T)
  nameWithType: IMessageFormatter<T>.ToBufferPool(T)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToBufferPool(T)
  nameWithType.vb: IMessageFormatter(Of T).ToBufferPool(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToBufferPool(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
    name: ToBufferPool
    nameWithType: IMessageFormatter<T>.ToBufferPool
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToBufferPool
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
    name: ToBufferPool
    nameWithType: IMessageFormatter(Of T).ToBufferPool
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToBufferPool
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArraySegment*
  commentId: Overload:EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArraySegment
  name: ToArraySegment
  nameWithType: FormatterBase<T>.ToArraySegment
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToArraySegment
  nameWithType.vb: FormatterBase(Of T).ToArraySegment
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToArraySegment
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}.ToArraySegment({T})
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter{`0}.ToArraySegment(`0)
  parent: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
  name: ToArraySegment(T)
  nameWithType: IMessageFormatter<T>.ToArraySegment(T)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToArraySegment(T)
  nameWithType.vb: IMessageFormatter(Of T).ToArraySegment(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToArraySegment(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
    name: ToArraySegment
    nameWithType: IMessageFormatter<T>.ToArraySegment
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToArraySegment
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
    name: ToArraySegment
    nameWithType: IMessageFormatter(Of T).ToArraySegment
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToArraySegment
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ArraySegment{System.Byte}
  commentId: '!:ArraySegment{System.Byte}'
  definition: ArraySegment`1
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: ArraySegment<System.Byte>
  nameWithType.vb: ArraySegment(Of Byte)
  fullName.vb: ArraySegment(Of System.Byte)
  name.vb: ArraySegment(Of Byte)
  spec.csharp:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
  name: ToArraySegment(T)
  nameWithType: IMessageFormatter<T>.ToArraySegment(T)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToArraySegment(T)
  nameWithType.vb: IMessageFormatter(Of T).ToArraySegment(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToArraySegment(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
    name: ToArraySegment
    nameWithType: IMessageFormatter<T>.ToArraySegment
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToArraySegment
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
    name: ToArraySegment
    nameWithType: IMessageFormatter(Of T).ToArraySegment
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToArraySegment
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ArraySegment`1
  isExternal: true
  name: ArraySegment<>
  nameWithType: ArraySegment<>
  fullName: ArraySegment<>
  nameWithType.vb: ArraySegment(Of )
  fullName.vb: ArraySegment(Of )
  name.vb: ArraySegment(Of )
  spec.csharp:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArray*
  commentId: Overload:EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArray
  name: ToArray
  nameWithType: FormatterBase<T>.ToArray
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToArray
  nameWithType.vb: FormatterBase(Of T).ToArray
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToArray
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}.ToArray({T})
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter{`0}.ToArray(`0)
  parent: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
  name: ToArray(T)
  nameWithType: IMessageFormatter<T>.ToArray(T)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToArray(T)
  nameWithType.vb: IMessageFormatter(Of T).ToArray(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToArray(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
    name: ToArray
    nameWithType: IMessageFormatter<T>.ToArray
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToArray
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
    name: ToArray
    nameWithType: IMessageFormatter(Of T).ToArray
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToArray
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
  name: ToArray(T)
  nameWithType: IMessageFormatter<T>.ToArray(T)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToArray(T)
  nameWithType.vb: IMessageFormatter(Of T).ToArray(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToArray(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
    name: ToArray
    nameWithType: IMessageFormatter<T>.ToArray
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToArray
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
    name: ToArray
    nameWithType: IMessageFormatter(Of T).ToArray
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToArray
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From*
  commentId: Overload:EventStore.Transport.Tcp.Formatting.FormatterBase`1.From
  name: From
  nameWithType: FormatterBase<T>.From
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From
  nameWithType.vb: FormatterBase(Of T).From
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}.From(EventStore.BufferManagement.BufferPool)
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter{`0}.From(EventStore.BufferManagement.BufferPool)
  parent: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
  name: From(BufferPool)
  nameWithType: IMessageFormatter<T>.From(BufferPool)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From(EventStore.BufferManagement.BufferPool)
  nameWithType.vb: IMessageFormatter(Of T).From(BufferPool)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From(EventStore.BufferManagement.BufferPool)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
    name: From
    nameWithType: IMessageFormatter<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.BufferManagement.BufferPool
    name: BufferPool
    nameWithType: BufferPool
    fullName: EventStore.BufferManagement.BufferPool
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
    name: From
    nameWithType: IMessageFormatter(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.BufferManagement.BufferPool
    name: BufferPool
    nameWithType: BufferPool
    fullName: EventStore.BufferManagement.BufferPool
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
  name: From(BufferPool)
  nameWithType: IMessageFormatter<T>.From(BufferPool)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From(EventStore.BufferManagement.BufferPool)
  nameWithType.vb: IMessageFormatter(Of T).From(BufferPool)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From(EventStore.BufferManagement.BufferPool)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
    name: From
    nameWithType: IMessageFormatter<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.BufferManagement.BufferPool
    name: BufferPool
    nameWithType: BufferPool
    fullName: EventStore.BufferManagement.BufferPool
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
    name: From
    nameWithType: IMessageFormatter(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.BufferManagement.BufferPool
    name: BufferPool
    nameWithType: BufferPool
    fullName: EventStore.BufferManagement.BufferPool
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}.From(ArraySegment{System.Byte})
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter{`0}.From(ArraySegment{System.Byte})
  parent: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
  name: From(ArraySegment<Byte>)
  nameWithType: IMessageFormatter<T>.From(ArraySegment<Byte>)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From(ArraySegment<System.Byte>)
  nameWithType.vb: IMessageFormatter(Of T).From(ArraySegment(Of Byte))
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From(ArraySegment(Of System.Byte))
  name.vb: From(ArraySegment(Of Byte))
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
    name: From
    nameWithType: IMessageFormatter<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
    name: From
    nameWithType: IMessageFormatter(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
  isExternal: true
  name: From(ArraySegment<Byte>)
  nameWithType: IMessageFormatter<T>.From(ArraySegment<Byte>)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From(ArraySegment<System.Byte>)
  nameWithType.vb: IMessageFormatter(Of T).From(ArraySegment(Of Byte))
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From(ArraySegment(Of System.Byte))
  name.vb: From(ArraySegment(Of Byte))
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
    name: From
    nameWithType: IMessageFormatter<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
    name: From
    nameWithType: IMessageFormatter(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}.From(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter{`0}.From(System.Byte[])
  parent: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
  name: From(Byte[])
  nameWithType: IMessageFormatter<T>.From(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From(System.Byte[])
  nameWithType.vb: IMessageFormatter(Of T).From(Byte())
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From(System.Byte())
  name.vb: From(Byte())
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
    name: From
    nameWithType: IMessageFormatter<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
    name: From
    nameWithType: IMessageFormatter(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
  isExternal: true
  name: From(Byte[])
  nameWithType: IMessageFormatter<T>.From(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From(System.Byte[])
  nameWithType.vb: IMessageFormatter(Of T).From(Byte())
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From(System.Byte())
  name.vb: From(Byte())
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
    name: From
    nameWithType: IMessageFormatter<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
    name: From
    nameWithType: IMessageFormatter(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: Stream

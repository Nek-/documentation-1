### YamlMime:ManagedReference
items:
- uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1
  commentId: T:EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1
  id: ProtoBufMessageFormatter`1
  parent: EventStore.Transport.Tcp.Formatting
  children:
  - EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor
  - EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor(EventStore.BufferManagement.BufferManager)
  - EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor(EventStore.BufferManagement.BufferManager,System.Int32)
  - EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.From(Stream)
  - EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.ToBufferPool(`0)
  langs:
  - csharp
  - vb
  name: ProtoBufMessageFormatter<T>
  nameWithType: ProtoBufMessageFormatter<T>
  fullName: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>
  type: Class
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/ProtoBufMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ProtoBufMessageFormatter
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/ProtoBufMessageFormatter.cs
    startLine: 9
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nFormats a message for transport using ProtoBuf serialization\n"
  example: []
  syntax:
    content: 'public class ProtoBufMessageFormatter<T> : FormatterBase<T>, IMessageFormatter<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class ProtoBufMessageFormatter(Of T)
          Inherits FormatterBase(Of T)
          Implements IMessageFormatter(Of T)
  inheritance:
  - System.Object
  - EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}
  inheritedMembers:
  - EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.ToArraySegment({T})
  - EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.ToArray({T})
  - EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.From(EventStore.BufferManagement.BufferPool)
  - EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.From(ArraySegment{System.Byte})
  - EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.From(System.Byte[])
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  nameWithType.vb: ProtoBufMessageFormatter(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T)
  name.vb: ProtoBufMessageFormatter(Of T)
- uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor
  commentId: M:EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor
  id: '#ctor'
  parent: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1
  langs:
  - csharp
  - vb
  name: ProtoBufMessageFormatter()
  nameWithType: ProtoBufMessageFormatter<T>.ProtoBufMessageFormatter()
  fullName: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>.ProtoBufMessageFormatter()
  type: Constructor
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/ProtoBufMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/ProtoBufMessageFormatter.cs
    startLine: 17
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nInitializes a new instance of the <xref href=\"EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ProtoBufMessageFormatter()
    content.vb: Public Sub New
  overload: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor*
  nameWithType.vb: ProtoBufMessageFormatter(Of T).ProtoBufMessageFormatter()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T).ProtoBufMessageFormatter()
- uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor(EventStore.BufferManagement.BufferManager)
  commentId: M:EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor(EventStore.BufferManagement.BufferManager)
  id: '#ctor(EventStore.BufferManagement.BufferManager)'
  parent: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1
  langs:
  - csharp
  - vb
  name: ProtoBufMessageFormatter(BufferManager)
  nameWithType: ProtoBufMessageFormatter<T>.ProtoBufMessageFormatter(BufferManager)
  fullName: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>.ProtoBufMessageFormatter(EventStore.BufferManagement.BufferManager)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/ProtoBufMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/ProtoBufMessageFormatter.cs
    startLine: 24
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nInitializes a new instance of the <xref href=\"EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ProtoBufMessageFormatter(BufferManager bufferManager)
    parameters:
    - id: bufferManager
      type: EventStore.BufferManagement.BufferManager
      description: The buffer manager.
    content.vb: Public Sub New(bufferManager As BufferManager)
  overload: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor*
  nameWithType.vb: ProtoBufMessageFormatter(Of T).ProtoBufMessageFormatter(BufferManager)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T).ProtoBufMessageFormatter(EventStore.BufferManagement.BufferManager)
- uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor(EventStore.BufferManagement.BufferManager,System.Int32)
  commentId: M:EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor(EventStore.BufferManagement.BufferManager,System.Int32)
  id: '#ctor(EventStore.BufferManagement.BufferManager,System.Int32)'
  parent: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1
  langs:
  - csharp
  - vb
  name: ProtoBufMessageFormatter(BufferManager, Int32)
  nameWithType: ProtoBufMessageFormatter<T>.ProtoBufMessageFormatter(BufferManager, Int32)
  fullName: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>.ProtoBufMessageFormatter(EventStore.BufferManagement.BufferManager, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/ProtoBufMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/ProtoBufMessageFormatter.cs
    startLine: 32
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nInitializes a new instance of the <xref href=\"EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ProtoBufMessageFormatter(BufferManager bufferManager, int initialBuffers)
    parameters:
    - id: bufferManager
      type: EventStore.BufferManagement.BufferManager
      description: The buffer manager.
    - id: initialBuffers
      type: System.Int32
      description: The number of initial buffers.
    content.vb: Public Sub New(bufferManager As BufferManager, initialBuffers As Integer)
  overload: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor*
  nameWithType.vb: ProtoBufMessageFormatter(Of T).ProtoBufMessageFormatter(BufferManager, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T).ProtoBufMessageFormatter(EventStore.BufferManagement.BufferManager, System.Int32)
- uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.ToBufferPool(`0)
  commentId: M:EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.ToBufferPool(`0)
  id: ToBufferPool(`0)
  parent: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1
  langs:
  - csharp
  - vb
  name: ToBufferPool(T)
  nameWithType: ProtoBufMessageFormatter<T>.ToBufferPool(T)
  fullName: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>.ToBufferPool(T)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/ProtoBufMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ToBufferPool
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/ProtoBufMessageFormatter.cs
    startLine: 43
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nGets a <xref href=\"EventStore.BufferManagement.BufferPool\" data-throw-if-not-resolved=\"false\"></xref> representing the IMessage provided.\n"
  example: []
  syntax:
    content: public override BufferPool ToBufferPool(T message)
    parameters:
    - id: message
      type: '{T}'
      description: The message.
    return:
      type: EventStore.BufferManagement.BufferPool
      description: A <xref href="EventStore.BufferManagement.BufferPool" data-throw-if-not-resolved="false"></xref> with a representation of the message
    content.vb: Public Overrides Function ToBufferPool(message As T) As BufferPool
  overridden: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.ToBufferPool({T})
  overload: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.ToBufferPool*
  nameWithType.vb: ProtoBufMessageFormatter(Of T).ToBufferPool(T)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T).ToBufferPool(T)
- uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.From(Stream)
  commentId: M:EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.From(Stream)
  id: From(Stream)
  parent: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1
  langs:
  - csharp
  - vb
  name: From(Stream)
  nameWithType: ProtoBufMessageFormatter<T>.From(Stream)
  fullName: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>.From(Stream)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/ProtoBufMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: From
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/ProtoBufMessageFormatter.cs
    startLine: 59
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nCreates a message object from the specified stream\n"
  example: []
  syntax:
    content: public override T From(Stream stream)
    parameters:
    - id: stream
      type: Stream
      description: The stream.
    return:
      type: '{T}'
      description: A message object
    content.vb: Public Overrides Function From(stream As Stream) As T
  overridden: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.From(Stream)
  overload: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.From*
  nameWithType.vb: ProtoBufMessageFormatter(Of T).From(Stream)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T).From(Stream)
references:
- uid: EventStore.Transport.Tcp.Formatting
  commentId: N:EventStore.Transport.Tcp.Formatting
  isExternal: false
  name: EventStore.Transport.Tcp.Formatting
  nameWithType: EventStore.Transport.Tcp.Formatting
  fullName: EventStore.Transport.Tcp.Formatting
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}
  commentId: T:EventStore.Transport.Tcp.Formatting.FormatterBase{`0}
  parent: EventStore.Transport.Tcp.Formatting
  definition: EventStore.Transport.Tcp.Formatting.FormatterBase`1
  name: FormatterBase<T>
  nameWithType: FormatterBase<T>
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>
  nameWithType.vb: FormatterBase(Of T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T)
  name.vb: FormatterBase(Of T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1
    name: FormatterBase
    nameWithType: FormatterBase
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1
    name: FormatterBase
    nameWithType: FormatterBase
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}
  commentId: T:EventStore.Transport.Tcp.Formatting.IMessageFormatter{`0}
  parent: EventStore.Transport.Tcp.Formatting
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
  name: IMessageFormatter<T>
  nameWithType: IMessageFormatter<T>
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>
  nameWithType.vb: IMessageFormatter(Of T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T)
  name.vb: IMessageFormatter(Of T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.ToArraySegment({T})
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase{`0}.ToArraySegment(`0)
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}
  definition: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArraySegment(`0)
  name: ToArraySegment(T)
  nameWithType: FormatterBase<T>.ToArraySegment(T)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToArraySegment(T)
  nameWithType.vb: FormatterBase(Of T).ToArraySegment(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToArraySegment(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArraySegment(`0)
    name: ToArraySegment
    nameWithType: FormatterBase<T>.ToArraySegment
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToArraySegment
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArraySegment(`0)
    name: ToArraySegment
    nameWithType: FormatterBase(Of T).ToArraySegment
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToArraySegment
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.ToArray({T})
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase{`0}.ToArray(`0)
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}
  definition: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArray(`0)
  name: ToArray(T)
  nameWithType: FormatterBase<T>.ToArray(T)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToArray(T)
  nameWithType.vb: FormatterBase(Of T).ToArray(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToArray(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArray(`0)
    name: ToArray
    nameWithType: FormatterBase<T>.ToArray
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToArray
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArray(`0)
    name: ToArray
    nameWithType: FormatterBase(Of T).ToArray
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToArray
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.From(EventStore.BufferManagement.BufferPool)
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase{`0}.From(EventStore.BufferManagement.BufferPool)
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}
  definition: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(EventStore.BufferManagement.BufferPool)
  name: From(BufferPool)
  nameWithType: FormatterBase<T>.From(BufferPool)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From(EventStore.BufferManagement.BufferPool)
  nameWithType.vb: FormatterBase(Of T).From(BufferPool)
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From(EventStore.BufferManagement.BufferPool)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(EventStore.BufferManagement.BufferPool)
    name: From
    nameWithType: FormatterBase<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.BufferManagement.BufferPool
    name: BufferPool
    nameWithType: BufferPool
    fullName: EventStore.BufferManagement.BufferPool
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(EventStore.BufferManagement.BufferPool)
    name: From
    nameWithType: FormatterBase(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.BufferManagement.BufferPool
    name: BufferPool
    nameWithType: BufferPool
    fullName: EventStore.BufferManagement.BufferPool
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.From(ArraySegment{System.Byte})
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase{`0}.From(ArraySegment{System.Byte})
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}
  definition: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(ArraySegment{System.Byte})
  name: From(ArraySegment<Byte>)
  nameWithType: FormatterBase<T>.From(ArraySegment<Byte>)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From(ArraySegment<System.Byte>)
  nameWithType.vb: FormatterBase(Of T).From(ArraySegment(Of Byte))
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From(ArraySegment(Of System.Byte))
  name.vb: From(ArraySegment(Of Byte))
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(ArraySegment{System.Byte})
    name: From
    nameWithType: FormatterBase<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(ArraySegment{System.Byte})
    name: From
    nameWithType: FormatterBase(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.From(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase{`0}.From(System.Byte[])
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}
  definition: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(System.Byte[])
  name: From(Byte[])
  nameWithType: FormatterBase<T>.From(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From(System.Byte[])
  nameWithType.vb: FormatterBase(Of T).From(Byte())
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From(System.Byte())
  name.vb: From(Byte())
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(System.Byte[])
    name: From
    nameWithType: FormatterBase<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(System.Byte[])
    name: From
    nameWithType: FormatterBase(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ProtoBufMessageFormatter<T>>()
  nameWithType: ProtobufExtensions.Serialize<ProtoBufMessageFormatter<T>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ProtoBufMessageFormatter(Of T))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T))()
  name.vb: Serialize(Of ProtoBufMessageFormatter(Of T))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ProtoBufMessageFormatter<T>>
    nameWithType: ProtobufExtensions.Serialize<ProtoBufMessageFormatter<T>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ProtoBufMessageFormatter(Of T))
    nameWithType: ProtobufExtensions.Serialize(Of ProtoBufMessageFormatter(Of T))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ProtoBufMessageFormatter<T>>()
  nameWithType: ProtobufExtensions.SerializeToArray<ProtoBufMessageFormatter<T>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ProtoBufMessageFormatter(Of T))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T))()
  name.vb: SerializeToArray(Of ProtoBufMessageFormatter(Of T))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ProtoBufMessageFormatter<T>>
    nameWithType: ProtobufExtensions.SerializeToArray<ProtoBufMessageFormatter<T>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ProtoBufMessageFormatter(Of T))
    nameWithType: ProtobufExtensions.SerializeToArray(Of ProtoBufMessageFormatter(Of T))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1
  commentId: T:EventStore.Transport.Tcp.Formatting.FormatterBase`1
  isExternal: false
  name: FormatterBase<T>
  nameWithType: FormatterBase<T>
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>
  nameWithType.vb: FormatterBase(Of T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T)
  name.vb: FormatterBase(Of T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1
    name: FormatterBase
    nameWithType: FormatterBase
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1
    name: FormatterBase
    nameWithType: FormatterBase
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
  commentId: T:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
  isExternal: false
  name: IMessageFormatter<T>
  nameWithType: IMessageFormatter<T>
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>
  nameWithType.vb: IMessageFormatter(Of T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T)
  name.vb: IMessageFormatter(Of T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArraySegment(`0)
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArraySegment(`0)
  isExternal: false
  name: ToArraySegment(T)
  nameWithType: FormatterBase<T>.ToArraySegment(T)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToArraySegment(T)
  nameWithType.vb: FormatterBase(Of T).ToArraySegment(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToArraySegment(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArraySegment(`0)
    name: ToArraySegment
    nameWithType: FormatterBase<T>.ToArraySegment
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToArraySegment
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArraySegment(`0)
    name: ToArraySegment
    nameWithType: FormatterBase(Of T).ToArraySegment
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToArraySegment
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArray(`0)
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArray(`0)
  isExternal: false
  name: ToArray(T)
  nameWithType: FormatterBase<T>.ToArray(T)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToArray(T)
  nameWithType.vb: FormatterBase(Of T).ToArray(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToArray(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArray(`0)
    name: ToArray
    nameWithType: FormatterBase<T>.ToArray
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToArray
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToArray(`0)
    name: ToArray
    nameWithType: FormatterBase(Of T).ToArray
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToArray
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(EventStore.BufferManagement.BufferPool)
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(EventStore.BufferManagement.BufferPool)
  isExternal: false
  name: From(BufferPool)
  nameWithType: FormatterBase<T>.From(BufferPool)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From(EventStore.BufferManagement.BufferPool)
  nameWithType.vb: FormatterBase(Of T).From(BufferPool)
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From(EventStore.BufferManagement.BufferPool)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(EventStore.BufferManagement.BufferPool)
    name: From
    nameWithType: FormatterBase<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.BufferManagement.BufferPool
    name: BufferPool
    nameWithType: BufferPool
    fullName: EventStore.BufferManagement.BufferPool
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(EventStore.BufferManagement.BufferPool)
    name: From
    nameWithType: FormatterBase(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.BufferManagement.BufferPool
    name: BufferPool
    nameWithType: BufferPool
    fullName: EventStore.BufferManagement.BufferPool
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(ArraySegment{System.Byte})
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(ArraySegment{System.Byte})
  isExternal: true
  name: From(ArraySegment<Byte>)
  nameWithType: FormatterBase<T>.From(ArraySegment<Byte>)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From(ArraySegment<System.Byte>)
  nameWithType.vb: FormatterBase(Of T).From(ArraySegment(Of Byte))
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From(ArraySegment(Of System.Byte))
  name.vb: From(ArraySegment(Of Byte))
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(ArraySegment{System.Byte})
    name: From
    nameWithType: FormatterBase<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(ArraySegment{System.Byte})
    name: From
    nameWithType: FormatterBase(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(System.Byte[])
  isExternal: true
  name: From(Byte[])
  nameWithType: FormatterBase<T>.From(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From(System.Byte[])
  nameWithType.vb: FormatterBase(Of T).From(Byte())
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From(System.Byte())
  name.vb: From(Byte())
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(System.Byte[])
    name: From
    nameWithType: FormatterBase<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(System.Byte[])
    name: From
    nameWithType: FormatterBase(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1
  commentId: T:EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1
  isExternal: false
  name: ProtoBufMessageFormatter<T>
  nameWithType: ProtoBufMessageFormatter<T>
  fullName: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>
  nameWithType.vb: ProtoBufMessageFormatter(Of T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T)
  name.vb: ProtoBufMessageFormatter(Of T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1
    name: ProtoBufMessageFormatter
    nameWithType: ProtoBufMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1
    name: ProtoBufMessageFormatter
    nameWithType: ProtoBufMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor*
  commentId: Overload:EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.#ctor
  isExternal: false
  name: ProtoBufMessageFormatter
  nameWithType: ProtoBufMessageFormatter<T>.ProtoBufMessageFormatter
  fullName: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>.ProtoBufMessageFormatter
  nameWithType.vb: ProtoBufMessageFormatter(Of T).ProtoBufMessageFormatter
  fullName.vb: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T).ProtoBufMessageFormatter
- uid: EventStore.BufferManagement.BufferManager
  commentId: T:EventStore.BufferManagement.BufferManager
  parent: EventStore.BufferManagement
  isExternal: false
  name: BufferManager
  nameWithType: BufferManager
  fullName: EventStore.BufferManagement.BufferManager
- uid: EventStore.BufferManagement
  commentId: N:EventStore.BufferManagement
  isExternal: false
  name: EventStore.BufferManagement
  nameWithType: EventStore.BufferManagement
  fullName: EventStore.BufferManagement
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.BufferManagement.BufferPool
  commentId: T:EventStore.BufferManagement.BufferPool
  parent: EventStore.BufferManagement
  isExternal: false
  name: BufferPool
  nameWithType: BufferPool
  fullName: EventStore.BufferManagement.BufferPool
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.ToBufferPool({T})
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase{`0}.ToBufferPool(`0)
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}
  definition: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToBufferPool(`0)
  name: ToBufferPool(T)
  nameWithType: FormatterBase<T>.ToBufferPool(T)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToBufferPool(T)
  nameWithType.vb: FormatterBase(Of T).ToBufferPool(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToBufferPool(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToBufferPool(`0)
    name: ToBufferPool
    nameWithType: FormatterBase<T>.ToBufferPool
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToBufferPool
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToBufferPool(`0)
    name: ToBufferPool
    nameWithType: FormatterBase(Of T).ToBufferPool
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToBufferPool
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.ToBufferPool*
  commentId: Overload:EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.ToBufferPool
  isExternal: false
  name: ToBufferPool
  nameWithType: ProtoBufMessageFormatter<T>.ToBufferPool
  fullName: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>.ToBufferPool
  nameWithType.vb: ProtoBufMessageFormatter(Of T).ToBufferPool
  fullName.vb: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T).ToBufferPool
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToBufferPool(`0)
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToBufferPool(`0)
  isExternal: false
  name: ToBufferPool(T)
  nameWithType: FormatterBase<T>.ToBufferPool(T)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToBufferPool(T)
  nameWithType.vb: FormatterBase(Of T).ToBufferPool(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToBufferPool(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToBufferPool(`0)
    name: ToBufferPool
    nameWithType: FormatterBase<T>.ToBufferPool
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.ToBufferPool
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.ToBufferPool(`0)
    name: ToBufferPool
    nameWithType: FormatterBase(Of T).ToBufferPool
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).ToBufferPool
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}.From(Stream)
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase{`0}.From(Stream)
  parent: EventStore.Transport.Tcp.Formatting.FormatterBase{{T}}
  definition: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(Stream)
  name: From(Stream)
  nameWithType: FormatterBase<T>.From(Stream)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From(Stream)
  nameWithType.vb: FormatterBase(Of T).From(Stream)
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From(Stream)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(Stream)
    name: From
    nameWithType: FormatterBase<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(Stream)
    name: From
    nameWithType: FormatterBase(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.From*
  commentId: Overload:EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter`1.From
  isExternal: false
  name: From
  nameWithType: ProtoBufMessageFormatter<T>.From
  fullName: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter<T>.From
  nameWithType.vb: ProtoBufMessageFormatter(Of T).From
  fullName.vb: EventStore.Transport.Tcp.Formatting.ProtoBufMessageFormatter(Of T).From
- uid: Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: Stream
- uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(Stream)
  commentId: M:EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(Stream)
  isExternal: true
  name: From(Stream)
  nameWithType: FormatterBase<T>.From(Stream)
  fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From(Stream)
  nameWithType.vb: FormatterBase(Of T).From(Stream)
  fullName.vb: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From(Stream)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(Stream)
    name: From
    nameWithType: FormatterBase<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.FormatterBase`1.From(Stream)
    name: From
    nameWithType: FormatterBase(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.FormatterBase(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )

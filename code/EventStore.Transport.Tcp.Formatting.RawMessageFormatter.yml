### YamlMime:ManagedReference
items:
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  commentId: T:EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  id: RawMessageFormatter
  parent: EventStore.Transport.Tcp.Formatting
  children:
  - EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor
  - EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor(EventStore.BufferManagement.BufferManager)
  - EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor(EventStore.BufferManagement.BufferManager,System.Int32)
  - EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(ArraySegment{System.Byte})
  - EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(EventStore.BufferManagement.BufferPool)
  - EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(System.Byte[])
  - EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArray(System.Byte[])
  - EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArraySegment(System.Byte[])
  - EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToBufferPool(System.Byte[])
  langs:
  - csharp
  - vb
  name: RawMessageFormatter
  nameWithType: RawMessageFormatter
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  type: Class
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: RawMessageFormatter
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
    startLine: 8
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nFormatter which does not format anything, actually. Just outputs raw byte[].\n"
  example: []
  syntax:
    content: 'public class RawMessageFormatter : object, IMessageFormatter<byte[]>'
    content.vb: >-
      Public Class RawMessageFormatter
          Inherits Object
          Implements IMessageFormatter(Of Byte())
  inheritance:
  - System.Object
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Transport.Tcp.Formatting.RawMessageFormatter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Transport.Tcp.Formatting.RawMessageFormatter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor
  commentId: M:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor
  id: '#ctor'
  parent: EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  langs:
  - csharp
  - vb
  name: RawMessageFormatter()
  nameWithType: RawMessageFormatter.RawMessageFormatter()
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.RawMessageFormatter()
  type: Constructor
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
    startLine: 16
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nInitializes a new instance of the <xref href=\"EventStore.Transport.Tcp.Formatting.RawMessageFormatter\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public RawMessageFormatter()
    content.vb: Public Sub New
  overload: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor(EventStore.BufferManagement.BufferManager)
  commentId: M:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor(EventStore.BufferManagement.BufferManager)
  id: '#ctor(EventStore.BufferManagement.BufferManager)'
  parent: EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  langs:
  - csharp
  - vb
  name: RawMessageFormatter(BufferManager)
  nameWithType: RawMessageFormatter.RawMessageFormatter(BufferManager)
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.RawMessageFormatter(EventStore.BufferManagement.BufferManager)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
    startLine: 23
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nInitializes a new instance of the <xref href=\"EventStore.Transport.Tcp.Formatting.RawMessageFormatter\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public RawMessageFormatter(BufferManager bufferManager)
    parameters:
    - id: bufferManager
      type: EventStore.BufferManagement.BufferManager
      description: The buffer manager.
    content.vb: Public Sub New(bufferManager As BufferManager)
  overload: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor(EventStore.BufferManagement.BufferManager,System.Int32)
  commentId: M:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor(EventStore.BufferManagement.BufferManager,System.Int32)
  id: '#ctor(EventStore.BufferManagement.BufferManager,System.Int32)'
  parent: EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  langs:
  - csharp
  - vb
  name: RawMessageFormatter(BufferManager, Int32)
  nameWithType: RawMessageFormatter.RawMessageFormatter(BufferManager, Int32)
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.RawMessageFormatter(EventStore.BufferManagement.BufferManager, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
    startLine: 31
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  summary: "\nInitializes a new instance of the <xref href=\"EventStore.Transport.Tcp.Formatting.RawMessageFormatter\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public RawMessageFormatter(BufferManager bufferManager, int initialBuffers)
    parameters:
    - id: bufferManager
      type: EventStore.BufferManagement.BufferManager
      description: The buffer manager.
    - id: initialBuffers
      type: System.Int32
      description: The number of initial buffers.
    content.vb: Public Sub New(bufferManager As BufferManager, initialBuffers As Integer)
  overload: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToBufferPool(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToBufferPool(System.Byte[])
  id: ToBufferPool(System.Byte[])
  parent: EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  langs:
  - csharp
  - vb
  name: ToBufferPool(Byte[])
  nameWithType: RawMessageFormatter.ToBufferPool(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToBufferPool(System.Byte[])
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ToBufferPool
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
    startLine: 37
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  syntax:
    content: public BufferPool ToBufferPool(byte[] message)
    parameters:
    - id: message
      type: System.Byte[]
    return:
      type: EventStore.BufferManagement.BufferPool
    content.vb: Public Function ToBufferPool(message As Byte()) As BufferPool
  overload: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToBufferPool*
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.ToBufferPool(System.Byte[])
  nameWithType.vb: RawMessageFormatter.ToBufferPool(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToBufferPool(System.Byte())
  name.vb: ToBufferPool(Byte())
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArraySegment(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArraySegment(System.Byte[])
  id: ToArraySegment(System.Byte[])
  parent: EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  langs:
  - csharp
  - vb
  name: ToArraySegment(Byte[])
  nameWithType: RawMessageFormatter.ToArraySegment(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArraySegment(System.Byte[])
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ToArraySegment
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
    startLine: 47
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  syntax:
    content: public ArraySegment<byte> ToArraySegment(byte[] message)
    parameters:
    - id: message
      type: System.Byte[]
    return:
      type: ArraySegment{System.Byte}
    content.vb: Public Function ToArraySegment(message As Byte()) As ArraySegment(Of Byte)
  overload: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArraySegment*
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.ToArraySegment(System.Byte[])
  nameWithType.vb: RawMessageFormatter.ToArraySegment(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArraySegment(System.Byte())
  name.vb: ToArraySegment(Byte())
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArray(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArray(System.Byte[])
  id: ToArray(System.Byte[])
  parent: EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  langs:
  - csharp
  - vb
  name: ToArray(Byte[])
  nameWithType: RawMessageFormatter.ToArray(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArray(System.Byte[])
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: ToArray
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
    startLine: 53
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  syntax:
    content: public byte[] ToArray(byte[] message)
    parameters:
    - id: message
      type: System.Byte[]
    return:
      type: System.Byte[]
    content.vb: Public Function ToArray(message As Byte()) As Byte()
  overload: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArray*
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.ToArray(System.Byte[])
  nameWithType.vb: RawMessageFormatter.ToArray(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArray(System.Byte())
  name.vb: ToArray(Byte())
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(EventStore.BufferManagement.BufferPool)
  commentId: M:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(EventStore.BufferManagement.BufferPool)
  id: From(EventStore.BufferManagement.BufferPool)
  parent: EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  langs:
  - csharp
  - vb
  name: From(BufferPool)
  nameWithType: RawMessageFormatter.From(BufferPool)
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(EventStore.BufferManagement.BufferPool)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: From
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
    startLine: 59
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  syntax:
    content: public byte[] From(BufferPool bufferPool)
    parameters:
    - id: bufferPool
      type: EventStore.BufferManagement.BufferPool
    return:
      type: System.Byte[]
    content.vb: Public Function From(bufferPool As BufferPool) As Byte()
  overload: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From*
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.From(EventStore.BufferManagement.BufferPool)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(ArraySegment{System.Byte})
  commentId: M:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(ArraySegment{System.Byte})
  id: From(ArraySegment{System.Byte})
  parent: EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  langs:
  - csharp
  - vb
  name: From(ArraySegment<Byte>)
  nameWithType: RawMessageFormatter.From(ArraySegment<Byte>)
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(ArraySegment<System.Byte>)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: From
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
    startLine: 64
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  syntax:
    content: public byte[] From(ArraySegment<byte> segment)
    parameters:
    - id: segment
      type: ArraySegment{System.Byte}
    return:
      type: System.Byte[]
    content.vb: Public Function From(segment As ArraySegment(Of Byte)) As Byte()
  overload: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From*
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.From(ArraySegment{System.Byte})
  nameWithType.vb: RawMessageFormatter.From(ArraySegment(Of Byte))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(ArraySegment(Of System.Byte))
  name.vb: From(ArraySegment(Of Byte))
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(System.Byte[])
  id: From(System.Byte[])
  parent: EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  langs:
  - csharp
  - vb
  name: From(Byte[])
  nameWithType: RawMessageFormatter.From(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(System.Byte[])
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: From
    path: ../EventStore/src/EventStore.Transport.Tcp/Formatting/RawMessageFormatter.cs
    startLine: 71
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp.Formatting
  syntax:
    content: public byte[] From(byte[] array)
    parameters:
    - id: array
      type: System.Byte[]
    return:
      type: System.Byte[]
    content.vb: Public Function From(array As Byte()) As Byte()
  overload: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From*
  implements:
  - EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.From(System.Byte[])
  nameWithType.vb: RawMessageFormatter.From(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From(System.Byte())
  name.vb: From(Byte())
references:
- uid: EventStore.Transport.Tcp.Formatting
  commentId: N:EventStore.Transport.Tcp.Formatting
  isExternal: false
  name: EventStore.Transport.Tcp.Formatting
  nameWithType: EventStore.Transport.Tcp.Formatting
  fullName: EventStore.Transport.Tcp.Formatting
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}
  commentId: T:EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}
  parent: EventStore.Transport.Tcp.Formatting
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
  name: IMessageFormatter<Byte[]>
  nameWithType: IMessageFormatter<Byte[]>
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<System.Byte[]>
  nameWithType.vb: IMessageFormatter(Of Byte())
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of System.Byte())
  name.vb: IMessageFormatter(Of Byte())
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<RawMessageFormatter>()
  nameWithType: ProtobufExtensions.Serialize<RawMessageFormatter>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.Formatting.RawMessageFormatter>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of RawMessageFormatter)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.Formatting.RawMessageFormatter)()
  name.vb: Serialize(Of RawMessageFormatter)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<RawMessageFormatter>
    nameWithType: ProtobufExtensions.Serialize<RawMessageFormatter>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.Formatting.RawMessageFormatter>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of RawMessageFormatter)
    nameWithType: ProtobufExtensions.Serialize(Of RawMessageFormatter)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.Formatting.RawMessageFormatter)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<RawMessageFormatter>()
  nameWithType: ProtobufExtensions.SerializeToArray<RawMessageFormatter>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.Formatting.RawMessageFormatter>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of RawMessageFormatter)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.Formatting.RawMessageFormatter)()
  name.vb: SerializeToArray(Of RawMessageFormatter)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<RawMessageFormatter>
    nameWithType: ProtobufExtensions.SerializeToArray<RawMessageFormatter>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.Formatting.RawMessageFormatter>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of RawMessageFormatter)
    nameWithType: ProtobufExtensions.SerializeToArray(Of RawMessageFormatter)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.Formatting.RawMessageFormatter)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
  commentId: T:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
  isExternal: false
  name: IMessageFormatter<T>
  nameWithType: IMessageFormatter<T>
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>
  nameWithType.vb: IMessageFormatter(Of T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T)
  name.vb: IMessageFormatter(Of T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  commentId: T:EventStore.Transport.Tcp.Formatting.RawMessageFormatter
  isExternal: false
  name: RawMessageFormatter
  nameWithType: RawMessageFormatter
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor*
  commentId: Overload:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.#ctor
  isExternal: false
  name: RawMessageFormatter
  nameWithType: RawMessageFormatter.RawMessageFormatter
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.RawMessageFormatter
- uid: EventStore.BufferManagement.BufferManager
  commentId: T:EventStore.BufferManagement.BufferManager
  parent: EventStore.BufferManagement
  isExternal: false
  name: BufferManager
  nameWithType: BufferManager
  fullName: EventStore.BufferManagement.BufferManager
- uid: EventStore.BufferManagement
  commentId: N:EventStore.BufferManagement
  isExternal: false
  name: EventStore.BufferManagement
  nameWithType: EventStore.BufferManagement
  fullName: EventStore.BufferManagement
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToBufferPool*
  commentId: Overload:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToBufferPool
  isExternal: false
  name: ToBufferPool
  nameWithType: RawMessageFormatter.ToBufferPool
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToBufferPool
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.ToBufferPool(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.ToBufferPool(System.Byte[])
  parent: EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
  name: ToBufferPool(Byte[])
  nameWithType: IMessageFormatter<Byte[]>.ToBufferPool(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<System.Byte[]>.ToBufferPool(System.Byte[])
  nameWithType.vb: IMessageFormatter(Of Byte()).ToBufferPool(Byte())
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of System.Byte()).ToBufferPool(System.Byte())
  name.vb: ToBufferPool(Byte())
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
    name: ToBufferPool
    nameWithType: IMessageFormatter<Byte[]>.ToBufferPool
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<System.Byte[]>.ToBufferPool
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
    name: ToBufferPool
    nameWithType: IMessageFormatter(Of Byte()).ToBufferPool
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of System.Byte()).ToBufferPool
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.BufferManagement.BufferPool
  commentId: T:EventStore.BufferManagement.BufferPool
  parent: EventStore.BufferManagement
  isExternal: false
  name: BufferPool
  nameWithType: BufferPool
  fullName: EventStore.BufferManagement.BufferPool
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
  isExternal: false
  name: ToBufferPool(T)
  nameWithType: IMessageFormatter<T>.ToBufferPool(T)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToBufferPool(T)
  nameWithType.vb: IMessageFormatter(Of T).ToBufferPool(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToBufferPool(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
    name: ToBufferPool
    nameWithType: IMessageFormatter<T>.ToBufferPool
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToBufferPool
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToBufferPool(`0)
    name: ToBufferPool
    nameWithType: IMessageFormatter(Of T).ToBufferPool
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToBufferPool
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArraySegment*
  commentId: Overload:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArraySegment
  isExternal: false
  name: ToArraySegment
  nameWithType: RawMessageFormatter.ToArraySegment
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArraySegment
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.ToArraySegment(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.ToArraySegment(System.Byte[])
  parent: EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
  name: ToArraySegment(Byte[])
  nameWithType: IMessageFormatter<Byte[]>.ToArraySegment(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<System.Byte[]>.ToArraySegment(System.Byte[])
  nameWithType.vb: IMessageFormatter(Of Byte()).ToArraySegment(Byte())
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of System.Byte()).ToArraySegment(System.Byte())
  name.vb: ToArraySegment(Byte())
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
    name: ToArraySegment
    nameWithType: IMessageFormatter<Byte[]>.ToArraySegment
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<System.Byte[]>.ToArraySegment
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
    name: ToArraySegment
    nameWithType: IMessageFormatter(Of Byte()).ToArraySegment
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of System.Byte()).ToArraySegment
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: ArraySegment{System.Byte}
  commentId: '!:ArraySegment{System.Byte}'
  definition: ArraySegment`1
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: ArraySegment<System.Byte>
  nameWithType.vb: ArraySegment(Of Byte)
  fullName.vb: ArraySegment(Of System.Byte)
  name.vb: ArraySegment(Of Byte)
  spec.csharp:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
  isExternal: false
  name: ToArraySegment(T)
  nameWithType: IMessageFormatter<T>.ToArraySegment(T)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToArraySegment(T)
  nameWithType.vb: IMessageFormatter(Of T).ToArraySegment(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToArraySegment(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
    name: ToArraySegment
    nameWithType: IMessageFormatter<T>.ToArraySegment
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToArraySegment
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArraySegment(`0)
    name: ToArraySegment
    nameWithType: IMessageFormatter(Of T).ToArraySegment
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToArraySegment
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ArraySegment`1
  isExternal: true
  name: ArraySegment<>
  nameWithType: ArraySegment<>
  fullName: ArraySegment<>
  nameWithType.vb: ArraySegment(Of )
  fullName.vb: ArraySegment(Of )
  name.vb: ArraySegment(Of )
  spec.csharp:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArray*
  commentId: Overload:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArray
  isExternal: false
  name: ToArray
  nameWithType: RawMessageFormatter.ToArray
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.ToArray
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.ToArray(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.ToArray(System.Byte[])
  parent: EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
  name: ToArray(Byte[])
  nameWithType: IMessageFormatter<Byte[]>.ToArray(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<System.Byte[]>.ToArray(System.Byte[])
  nameWithType.vb: IMessageFormatter(Of Byte()).ToArray(Byte())
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of System.Byte()).ToArray(System.Byte())
  name.vb: ToArray(Byte())
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
    name: ToArray
    nameWithType: IMessageFormatter<Byte[]>.ToArray
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<System.Byte[]>.ToArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
    name: ToArray
    nameWithType: IMessageFormatter(Of Byte()).ToArray
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of System.Byte()).ToArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
  isExternal: false
  name: ToArray(T)
  nameWithType: IMessageFormatter<T>.ToArray(T)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToArray(T)
  nameWithType.vb: IMessageFormatter(Of T).ToArray(T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToArray(T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
    name: ToArray
    nameWithType: IMessageFormatter<T>.ToArray
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.ToArray
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.ToArray(`0)
    name: ToArray
    nameWithType: IMessageFormatter(Of T).ToArray
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).ToArray
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From*
  commentId: Overload:EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From
  isExternal: false
  name: From
  nameWithType: RawMessageFormatter.From
  fullName: EventStore.Transport.Tcp.Formatting.RawMessageFormatter.From
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.From(EventStore.BufferManagement.BufferPool)
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.From(EventStore.BufferManagement.BufferPool)
  parent: EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
  name: From(BufferPool)
  nameWithType: IMessageFormatter<Byte[]>.From(BufferPool)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<System.Byte[]>.From(EventStore.BufferManagement.BufferPool)
  nameWithType.vb: IMessageFormatter(Of Byte()).From(BufferPool)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of System.Byte()).From(EventStore.BufferManagement.BufferPool)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
    name: From
    nameWithType: IMessageFormatter<Byte[]>.From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<System.Byte[]>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.BufferManagement.BufferPool
    name: BufferPool
    nameWithType: BufferPool
    fullName: EventStore.BufferManagement.BufferPool
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
    name: From
    nameWithType: IMessageFormatter(Of Byte()).From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of System.Byte()).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.BufferManagement.BufferPool
    name: BufferPool
    nameWithType: BufferPool
    fullName: EventStore.BufferManagement.BufferPool
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
  isExternal: false
  name: From(BufferPool)
  nameWithType: IMessageFormatter<T>.From(BufferPool)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From(EventStore.BufferManagement.BufferPool)
  nameWithType.vb: IMessageFormatter(Of T).From(BufferPool)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From(EventStore.BufferManagement.BufferPool)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
    name: From
    nameWithType: IMessageFormatter<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.BufferManagement.BufferPool
    name: BufferPool
    nameWithType: BufferPool
    fullName: EventStore.BufferManagement.BufferPool
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(EventStore.BufferManagement.BufferPool)
    name: From
    nameWithType: IMessageFormatter(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.BufferManagement.BufferPool
    name: BufferPool
    nameWithType: BufferPool
    fullName: EventStore.BufferManagement.BufferPool
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.From(ArraySegment{System.Byte})
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.From(ArraySegment{System.Byte})
  parent: EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
  name: From(ArraySegment<Byte>)
  nameWithType: IMessageFormatter<Byte[]>.From(ArraySegment<Byte>)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<System.Byte[]>.From(ArraySegment<System.Byte>)
  nameWithType.vb: IMessageFormatter(Of Byte()).From(ArraySegment(Of Byte))
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of System.Byte()).From(ArraySegment(Of System.Byte))
  name.vb: From(ArraySegment(Of Byte))
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
    name: From
    nameWithType: IMessageFormatter<Byte[]>.From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<System.Byte[]>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
    name: From
    nameWithType: IMessageFormatter(Of Byte()).From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of System.Byte()).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
  isExternal: true
  name: From(ArraySegment<Byte>)
  nameWithType: IMessageFormatter<T>.From(ArraySegment<Byte>)
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From(ArraySegment<System.Byte>)
  nameWithType.vb: IMessageFormatter(Of T).From(ArraySegment(Of Byte))
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From(ArraySegment(Of System.Byte))
  name.vb: From(ArraySegment(Of Byte))
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
    name: From
    nameWithType: IMessageFormatter<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(ArraySegment{System.Byte})
    name: From
    nameWithType: IMessageFormatter(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.From(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}.From(System.Byte[])
  parent: EventStore.Transport.Tcp.Formatting.IMessageFormatter{System.Byte[]}
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
  name: From(Byte[])
  nameWithType: IMessageFormatter<Byte[]>.From(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<System.Byte[]>.From(System.Byte[])
  nameWithType.vb: IMessageFormatter(Of Byte()).From(Byte())
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of System.Byte()).From(System.Byte())
  name.vb: From(Byte())
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
    name: From
    nameWithType: IMessageFormatter<Byte[]>.From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<System.Byte[]>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
    name: From
    nameWithType: IMessageFormatter(Of Byte()).From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of System.Byte()).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
  commentId: M:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
  isExternal: true
  name: From(Byte[])
  nameWithType: IMessageFormatter<T>.From(Byte[])
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From(System.Byte[])
  nameWithType.vb: IMessageFormatter(Of T).From(Byte())
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From(System.Byte())
  name.vb: From(Byte())
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
    name: From
    nameWithType: IMessageFormatter<T>.From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>.From
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1.From(System.Byte[])
    name: From
    nameWithType: IMessageFormatter(Of T).From
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T).From
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )

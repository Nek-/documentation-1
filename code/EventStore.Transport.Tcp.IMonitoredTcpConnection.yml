### YamlMime:ManagedReference
items:
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection
  commentId: T:EventStore.Transport.Tcp.IMonitoredTcpConnection
  id: IMonitoredTcpConnection
  parent: EventStore.Transport.Tcp
  children:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.InReceive
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.InSend
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.InSendBytes
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.IsClosed
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.IsFaulted
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.IsInitialized
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForReceive
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForSend
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.LastReceiveStarted
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.LastSendStarted
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingReceivedBytes
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingSendBytes
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesReceived
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesSent
  langs:
  - csharp
  - vb
  name: IMonitoredTcpConnection
  nameWithType: IMonitoredTcpConnection
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection
  type: Interface
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IMonitoredTcpConnection
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 4
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public interface IMonitoredTcpConnection
    content.vb: Public Interface IMonitoredTcpConnection
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForSend
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForSend
  id: IsReadyForSend
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: IsReadyForSend
  nameWithType: IMonitoredTcpConnection.IsReadyForSend
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForSend
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IsReadyForSend
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 6
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: bool IsReadyForSend { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsReadyForSend As Boolean
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForSend*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForReceive
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForReceive
  id: IsReadyForReceive
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: IsReadyForReceive
  nameWithType: IMonitoredTcpConnection.IsReadyForReceive
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForReceive
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IsReadyForReceive
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 7
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: bool IsReadyForReceive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsReadyForReceive As Boolean
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForReceive*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsInitialized
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsInitialized
  id: IsInitialized
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: IsInitialized
  nameWithType: IMonitoredTcpConnection.IsInitialized
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsInitialized
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IsInitialized
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 8
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: bool IsInitialized { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsInitialized As Boolean
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsInitialized*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsFaulted
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsFaulted
  id: IsFaulted
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: IsFaulted
  nameWithType: IMonitoredTcpConnection.IsFaulted
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsFaulted
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IsFaulted
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 9
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: bool IsFaulted { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsFaulted As Boolean
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsFaulted*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsClosed
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsClosed
  id: IsClosed
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: IsClosed
  nameWithType: IMonitoredTcpConnection.IsClosed
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsClosed
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: IsClosed
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 10
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: bool IsClosed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsClosed As Boolean
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsClosed*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSend
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.InSend
  id: InSend
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: InSend
  nameWithType: IMonitoredTcpConnection.InSend
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSend
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: InSend
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 12
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: bool InSend { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property InSend As Boolean
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSend*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.InReceive
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.InReceive
  id: InReceive
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: InReceive
  nameWithType: IMonitoredTcpConnection.InReceive
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.InReceive
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: InReceive
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 13
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: bool InReceive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property InReceive As Boolean
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.InReceive*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastSendStarted
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.LastSendStarted
  id: LastSendStarted
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: LastSendStarted
  nameWithType: IMonitoredTcpConnection.LastSendStarted
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastSendStarted
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: LastSendStarted
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 15
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: DateTime? LastSendStarted { get; }
    parameters: []
    return:
      type: System.Nullable{DateTime}
    content.vb: ReadOnly Property LastSendStarted As DateTime?
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastSendStarted*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastReceiveStarted
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.LastReceiveStarted
  id: LastReceiveStarted
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: LastReceiveStarted
  nameWithType: IMonitoredTcpConnection.LastReceiveStarted
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastReceiveStarted
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: LastReceiveStarted
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 16
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: DateTime? LastReceiveStarted { get; }
    parameters: []
    return:
      type: System.Nullable{DateTime}
    content.vb: ReadOnly Property LastReceiveStarted As DateTime?
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastReceiveStarted*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingSendBytes
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingSendBytes
  id: PendingSendBytes
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: PendingSendBytes
  nameWithType: IMonitoredTcpConnection.PendingSendBytes
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingSendBytes
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: PendingSendBytes
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 18
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: int PendingSendBytes { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property PendingSendBytes As Integer
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingSendBytes*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSendBytes
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.InSendBytes
  id: InSendBytes
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: InSendBytes
  nameWithType: IMonitoredTcpConnection.InSendBytes
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSendBytes
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: InSendBytes
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 19
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: int InSendBytes { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property InSendBytes As Integer
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSendBytes*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingReceivedBytes
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingReceivedBytes
  id: PendingReceivedBytes
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: PendingReceivedBytes
  nameWithType: IMonitoredTcpConnection.PendingReceivedBytes
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingReceivedBytes
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: PendingReceivedBytes
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 20
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: int PendingReceivedBytes { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property PendingReceivedBytes As Integer
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingReceivedBytes*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesSent
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesSent
  id: TotalBytesSent
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: TotalBytesSent
  nameWithType: IMonitoredTcpConnection.TotalBytesSent
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesSent
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TotalBytesSent
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 22
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: long TotalBytesSent { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: ReadOnly Property TotalBytesSent As Long
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesSent*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesReceived
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesReceived
  id: TotalBytesReceived
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  langs:
  - csharp
  - vb
  name: TotalBytesReceived
  nameWithType: IMonitoredTcpConnection.TotalBytesReceived
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesReceived
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
      branch: docs
      repo: https://github.com/ChrisChinchilla/EventStore.git
    id: TotalBytesReceived
    path: ../EventStore/src/EventStore.Transport.Tcp/IMonitoredTcpConnection.cs
    startLine: 23
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: long TotalBytesReceived { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: ReadOnly Property TotalBytesReceived As Long
  overload: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesReceived*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: EventStore.Transport.Tcp
  commentId: N:EventStore.Transport.Tcp
  isExternal: false
  name: EventStore.Transport.Tcp
  nameWithType: EventStore.Transport.Tcp
  fullName: EventStore.Transport.Tcp
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  parent: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  definition: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  name: AsDynamic()
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic()
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic()
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<IMonitoredTcpConnection>()
  nameWithType: ProtobufExtensions.Serialize<IMonitoredTcpConnection>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.IMonitoredTcpConnection>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of IMonitoredTcpConnection)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.IMonitoredTcpConnection)()
  name.vb: Serialize(Of IMonitoredTcpConnection)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<IMonitoredTcpConnection>
    nameWithType: ProtobufExtensions.Serialize<IMonitoredTcpConnection>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.IMonitoredTcpConnection>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of IMonitoredTcpConnection)
    nameWithType: ProtobufExtensions.Serialize(Of IMonitoredTcpConnection)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.IMonitoredTcpConnection)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<IMonitoredTcpConnection>()
  nameWithType: ProtobufExtensions.SerializeToArray<IMonitoredTcpConnection>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.IMonitoredTcpConnection>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of IMonitoredTcpConnection)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.IMonitoredTcpConnection)()
  name.vb: SerializeToArray(Of IMonitoredTcpConnection)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<IMonitoredTcpConnection>
    nameWithType: ProtobufExtensions.SerializeToArray<IMonitoredTcpConnection>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.IMonitoredTcpConnection>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of IMonitoredTcpConnection)
    nameWithType: ProtobufExtensions.SerializeToArray(Of IMonitoredTcpConnection)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.IMonitoredTcpConnection)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  commentId: M:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  isExternal: true
  name: AsDynamic(Object)
  nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic(Object)
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
  spec.csharp:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)
    name: AsDynamic
    nameWithType: PrivateReflectionDynamicObjectExtensions.AsDynamic
    fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  commentId: T:EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
  parent: EventStore.Core.Tests.Helpers
  isExternal: false
  name: PrivateReflectionDynamicObjectExtensions
  nameWithType: PrivateReflectionDynamicObjectExtensions
  fullName: EventStore.Core.Tests.Helpers.PrivateReflectionDynamicObjectExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Tests.Helpers
  commentId: N:EventStore.Core.Tests.Helpers
  isExternal: false
  name: EventStore.Core.Tests.Helpers
  nameWithType: EventStore.Core.Tests.Helpers
  fullName: EventStore.Core.Tests.Helpers
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForSend*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForSend
  isExternal: false
  name: IsReadyForSend
  nameWithType: IMonitoredTcpConnection.IsReadyForSend
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForSend
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForReceive*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForReceive
  isExternal: false
  name: IsReadyForReceive
  nameWithType: IMonitoredTcpConnection.IsReadyForReceive
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForReceive
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsInitialized*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsInitialized
  isExternal: false
  name: IsInitialized
  nameWithType: IMonitoredTcpConnection.IsInitialized
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsInitialized
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsFaulted*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsFaulted
  isExternal: false
  name: IsFaulted
  nameWithType: IMonitoredTcpConnection.IsFaulted
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsFaulted
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsClosed*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsClosed
  isExternal: false
  name: IsClosed
  nameWithType: IMonitoredTcpConnection.IsClosed
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsClosed
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSend*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.InSend
  isExternal: false
  name: InSend
  nameWithType: IMonitoredTcpConnection.InSend
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSend
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.InReceive*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.InReceive
  isExternal: false
  name: InReceive
  nameWithType: IMonitoredTcpConnection.InReceive
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.InReceive
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastSendStarted*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.LastSendStarted
  isExternal: false
  name: LastSendStarted
  nameWithType: IMonitoredTcpConnection.LastSendStarted
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastSendStarted
- uid: System.Nullable{DateTime}
  commentId: '!:System.Nullable{DateTime}'
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastReceiveStarted*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.LastReceiveStarted
  isExternal: false
  name: LastReceiveStarted
  nameWithType: IMonitoredTcpConnection.LastReceiveStarted
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastReceiveStarted
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingSendBytes*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingSendBytes
  isExternal: false
  name: PendingSendBytes
  nameWithType: IMonitoredTcpConnection.PendingSendBytes
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingSendBytes
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSendBytes*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.InSendBytes
  isExternal: false
  name: InSendBytes
  nameWithType: IMonitoredTcpConnection.InSendBytes
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSendBytes
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingReceivedBytes*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingReceivedBytes
  isExternal: false
  name: PendingReceivedBytes
  nameWithType: IMonitoredTcpConnection.PendingReceivedBytes
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingReceivedBytes
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesSent*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesSent
  isExternal: false
  name: TotalBytesSent
  nameWithType: IMonitoredTcpConnection.TotalBytesSent
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesSent
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesReceived*
  commentId: Overload:EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesReceived
  isExternal: false
  name: TotalBytesReceived
  nameWithType: IMonitoredTcpConnection.TotalBytesReceived
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesReceived

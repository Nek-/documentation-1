### YamlMime:ManagedReference
items:
- uid: EventStore.Transport.Tcp.ITcpConnection
  commentId: T:EventStore.Transport.Tcp.ITcpConnection
  id: ITcpConnection
  parent: EventStore.Transport.Tcp
  children:
  - EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
  - EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
  - EventStore.Transport.Tcp.ITcpConnection.ConnectionClosed
  - EventStore.Transport.Tcp.ITcpConnection.ConnectionId
  - EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(IEnumerable{ArraySegment{System.Byte}})
  - EventStore.Transport.Tcp.ITcpConnection.IsClosed
  - EventStore.Transport.Tcp.ITcpConnection.LocalEndPoint
  - EventStore.Transport.Tcp.ITcpConnection.PendingSendBytes
  - EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}})
  - EventStore.Transport.Tcp.ITcpConnection.RemoteEndPoint
  - EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
  - EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
  langs:
  - csharp
  - vb
  name: ITcpConnection
  nameWithType: ITcpConnection
  fullName: EventStore.Transport.Tcp.ITcpConnection
  type: Interface
  source:
    remote:
      path: src/EventStore.Transport.Tcp/ITcpConnection.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ITcpConnection
    path: ../EventStore/src/EventStore.Transport.Tcp/ITcpConnection.cs
    startLine: 7
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public interface ITcpConnection
    content.vb: Public Interface ITcpConnection
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Transport.Tcp.ITcpConnection.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Transport.Tcp.ITcpConnection.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EventStore.Transport.Tcp.ITcpConnection.ConnectionClosed
  commentId: E:EventStore.Transport.Tcp.ITcpConnection.ConnectionClosed
  id: ConnectionClosed
  parent: EventStore.Transport.Tcp.ITcpConnection
  langs:
  - csharp
  - vb
  name: ConnectionClosed
  nameWithType: ITcpConnection.ConnectionClosed
  fullName: EventStore.Transport.Tcp.ITcpConnection.ConnectionClosed
  type: Event
  source:
    remote:
      path: src/EventStore.Transport.Tcp/ITcpConnection.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ConnectionClosed
    path: ../EventStore/src/EventStore.Transport.Tcp/ITcpConnection.cs
    startLine: 9
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: event Action<ITcpConnection, SocketError> ConnectionClosed
    return:
      type: Action{EventStore.Transport.Tcp.ITcpConnection,SocketError}
    content.vb: Event ConnectionClosed As Action(Of ITcpConnection, SocketError)
- uid: EventStore.Transport.Tcp.ITcpConnection.ConnectionId
  commentId: P:EventStore.Transport.Tcp.ITcpConnection.ConnectionId
  id: ConnectionId
  parent: EventStore.Transport.Tcp.ITcpConnection
  langs:
  - csharp
  - vb
  name: ConnectionId
  nameWithType: ITcpConnection.ConnectionId
  fullName: EventStore.Transport.Tcp.ITcpConnection.ConnectionId
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/ITcpConnection.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ConnectionId
    path: ../EventStore/src/EventStore.Transport.Tcp/ITcpConnection.cs
    startLine: 11
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: Guid ConnectionId { get; }
    parameters: []
    return:
      type: Guid
    content.vb: ReadOnly Property ConnectionId As Guid
  overload: EventStore.Transport.Tcp.ITcpConnection.ConnectionId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
  commentId: P:EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
  id: ClientConnectionName
  parent: EventStore.Transport.Tcp.ITcpConnection
  langs:
  - csharp
  - vb
  name: ClientConnectionName
  nameWithType: ITcpConnection.ClientConnectionName
  fullName: EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/ITcpConnection.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ClientConnectionName
    path: ../EventStore/src/EventStore.Transport.Tcp/ITcpConnection.cs
    startLine: 12
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: string ClientConnectionName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property ClientConnectionName As String
  overload: EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.ITcpConnection.RemoteEndPoint
  commentId: P:EventStore.Transport.Tcp.ITcpConnection.RemoteEndPoint
  id: RemoteEndPoint
  parent: EventStore.Transport.Tcp.ITcpConnection
  langs:
  - csharp
  - vb
  name: RemoteEndPoint
  nameWithType: ITcpConnection.RemoteEndPoint
  fullName: EventStore.Transport.Tcp.ITcpConnection.RemoteEndPoint
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/ITcpConnection.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: RemoteEndPoint
    path: ../EventStore/src/EventStore.Transport.Tcp/ITcpConnection.cs
    startLine: 13
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: IPEndPoint RemoteEndPoint { get; }
    parameters: []
    return:
      type: IPEndPoint
    content.vb: ReadOnly Property RemoteEndPoint As IPEndPoint
  overload: EventStore.Transport.Tcp.ITcpConnection.RemoteEndPoint*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.ITcpConnection.LocalEndPoint
  commentId: P:EventStore.Transport.Tcp.ITcpConnection.LocalEndPoint
  id: LocalEndPoint
  parent: EventStore.Transport.Tcp.ITcpConnection
  langs:
  - csharp
  - vb
  name: LocalEndPoint
  nameWithType: ITcpConnection.LocalEndPoint
  fullName: EventStore.Transport.Tcp.ITcpConnection.LocalEndPoint
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/ITcpConnection.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: LocalEndPoint
    path: ../EventStore/src/EventStore.Transport.Tcp/ITcpConnection.cs
    startLine: 14
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: IPEndPoint LocalEndPoint { get; }
    parameters: []
    return:
      type: IPEndPoint
    content.vb: ReadOnly Property LocalEndPoint As IPEndPoint
  overload: EventStore.Transport.Tcp.ITcpConnection.LocalEndPoint*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
  commentId: P:EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
  id: SendQueueSize
  parent: EventStore.Transport.Tcp.ITcpConnection
  langs:
  - csharp
  - vb
  name: SendQueueSize
  nameWithType: ITcpConnection.SendQueueSize
  fullName: EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/ITcpConnection.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SendQueueSize
    path: ../EventStore/src/EventStore.Transport.Tcp/ITcpConnection.cs
    startLine: 15
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: int SendQueueSize { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property SendQueueSize As Integer
  overload: EventStore.Transport.Tcp.ITcpConnection.SendQueueSize*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.ITcpConnection.PendingSendBytes
  commentId: P:EventStore.Transport.Tcp.ITcpConnection.PendingSendBytes
  id: PendingSendBytes
  parent: EventStore.Transport.Tcp.ITcpConnection
  langs:
  - csharp
  - vb
  name: PendingSendBytes
  nameWithType: ITcpConnection.PendingSendBytes
  fullName: EventStore.Transport.Tcp.ITcpConnection.PendingSendBytes
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/ITcpConnection.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: PendingSendBytes
    path: ../EventStore/src/EventStore.Transport.Tcp/ITcpConnection.cs
    startLine: 16
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: int PendingSendBytes { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property PendingSendBytes As Integer
  overload: EventStore.Transport.Tcp.ITcpConnection.PendingSendBytes*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.ITcpConnection.IsClosed
  commentId: P:EventStore.Transport.Tcp.ITcpConnection.IsClosed
  id: IsClosed
  parent: EventStore.Transport.Tcp.ITcpConnection
  langs:
  - csharp
  - vb
  name: IsClosed
  nameWithType: ITcpConnection.IsClosed
  fullName: EventStore.Transport.Tcp.ITcpConnection.IsClosed
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/ITcpConnection.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: IsClosed
    path: ../EventStore/src/EventStore.Transport.Tcp/ITcpConnection.cs
    startLine: 17
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: bool IsClosed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsClosed As Boolean
  overload: EventStore.Transport.Tcp.ITcpConnection.IsClosed*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}})
  commentId: M:EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}})
  id: ReceiveAsync(Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}})
  parent: EventStore.Transport.Tcp.ITcpConnection
  langs:
  - csharp
  - vb
  name: ReceiveAsync(Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>)
  nameWithType: ITcpConnection.ReceiveAsync(Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>)
  fullName: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(Action<EventStore.Transport.Tcp.ITcpConnection, IEnumerable<ArraySegment<System.Byte>>>)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/ITcpConnection.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: ReceiveAsync
    path: ../EventStore/src/EventStore.Transport.Tcp/ITcpConnection.cs
    startLine: 19
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: void ReceiveAsync(Action<ITcpConnection, IEnumerable<ArraySegment<byte>>> callback)
    parameters:
    - id: callback
      type: Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}}
    content.vb: Sub ReceiveAsync(callback As Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte))))
  overload: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync*
  nameWithType.vb: ITcpConnection.ReceiveAsync(Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte))))
  fullName.vb: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(Action(Of EventStore.Transport.Tcp.ITcpConnection, IEnumerable(Of ArraySegment(Of System.Byte))))
  name.vb: ReceiveAsync(Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte))))
- uid: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(IEnumerable{ArraySegment{System.Byte}})
  commentId: M:EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(IEnumerable{ArraySegment{System.Byte}})
  id: EnqueueSend(IEnumerable{ArraySegment{System.Byte}})
  parent: EventStore.Transport.Tcp.ITcpConnection
  langs:
  - csharp
  - vb
  name: EnqueueSend(IEnumerable<ArraySegment<Byte>>)
  nameWithType: ITcpConnection.EnqueueSend(IEnumerable<ArraySegment<Byte>>)
  fullName: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(IEnumerable<ArraySegment<System.Byte>>)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/ITcpConnection.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: EnqueueSend
    path: ../EventStore/src/EventStore.Transport.Tcp/ITcpConnection.cs
    startLine: 20
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: void EnqueueSend(IEnumerable<ArraySegment<byte>> data)
    parameters:
    - id: data
      type: IEnumerable{ArraySegment{System.Byte}}
    content.vb: Sub EnqueueSend(data As IEnumerable(Of ArraySegment(Of Byte)))
  overload: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend*
  nameWithType.vb: ITcpConnection.EnqueueSend(IEnumerable(Of ArraySegment(Of Byte)))
  fullName.vb: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(IEnumerable(Of ArraySegment(Of System.Byte)))
  name.vb: EnqueueSend(IEnumerable(Of ArraySegment(Of Byte)))
- uid: EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
  commentId: M:EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
  id: Close(System.String)
  parent: EventStore.Transport.Tcp.ITcpConnection
  langs:
  - csharp
  - vb
  name: Close(String)
  nameWithType: ITcpConnection.Close(String)
  fullName: EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/ITcpConnection.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: Close
    path: ../EventStore/src/EventStore.Transport.Tcp/ITcpConnection.cs
    startLine: 21
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: void Close(string reason)
    parameters:
    - id: reason
      type: System.String
    content.vb: Sub Close(reason As String)
  overload: EventStore.Transport.Tcp.ITcpConnection.Close*
- uid: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
  commentId: M:EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
  id: SetClientConnectionName(System.String)
  parent: EventStore.Transport.Tcp.ITcpConnection
  langs:
  - csharp
  - vb
  name: SetClientConnectionName(String)
  nameWithType: ITcpConnection.SetClientConnectionName(String)
  fullName: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/ITcpConnection.cs
      branch: release-v4.1.1
      repo: https://github.com/EventStore/EventStore.git
    id: SetClientConnectionName
    path: ../EventStore/src/EventStore.Transport.Tcp/ITcpConnection.cs
    startLine: 22
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: void SetClientConnectionName(string clientConnectionName)
    parameters:
    - id: clientConnectionName
      type: System.String
    content.vb: Sub SetClientConnectionName(clientConnectionName As String)
  overload: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName*
references:
- uid: EventStore.Transport.Tcp
  commentId: N:EventStore.Transport.Tcp
  isExternal: false
  name: EventStore.Transport.Tcp
  nameWithType: EventStore.Transport.Tcp
  fullName: EventStore.Transport.Tcp
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.ITcpConnection.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ITcpConnection>()
  nameWithType: ProtobufExtensions.Serialize<ITcpConnection>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.ITcpConnection>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ITcpConnection)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.ITcpConnection)()
  name.vb: Serialize(Of ITcpConnection)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ITcpConnection>
    nameWithType: ProtobufExtensions.Serialize<ITcpConnection>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.ITcpConnection>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ITcpConnection)
    nameWithType: ProtobufExtensions.Serialize(Of ITcpConnection)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.ITcpConnection)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.ITcpConnection.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ITcpConnection>()
  nameWithType: ProtobufExtensions.SerializeToArray<ITcpConnection>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.ITcpConnection>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ITcpConnection)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.ITcpConnection)()
  name.vb: SerializeToArray(Of ITcpConnection)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ITcpConnection>
    nameWithType: ProtobufExtensions.SerializeToArray<ITcpConnection>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.ITcpConnection>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ITcpConnection)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ITcpConnection)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.ITcpConnection)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  isExternal: false
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  isExternal: false
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  isExternal: false
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  isExternal: false
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: Action{EventStore.Transport.Tcp.ITcpConnection,SocketError}
  commentId: '!:Action{EventStore.Transport.Tcp.ITcpConnection,SocketError}'
  definition: Action`2
  name: Action<ITcpConnection, SocketError>
  nameWithType: Action<ITcpConnection, SocketError>
  fullName: Action<EventStore.Transport.Tcp.ITcpConnection, SocketError>
  nameWithType.vb: Action(Of ITcpConnection, SocketError)
  fullName.vb: Action(Of EventStore.Transport.Tcp.ITcpConnection, SocketError)
  name.vb: Action(Of ITcpConnection, SocketError)
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: SocketError
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: SocketError
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`2
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.ITcpConnection.ConnectionId*
  commentId: Overload:EventStore.Transport.Tcp.ITcpConnection.ConnectionId
  isExternal: false
  name: ConnectionId
  nameWithType: ITcpConnection.ConnectionId
  fullName: EventStore.Transport.Tcp.ITcpConnection.ConnectionId
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName*
  commentId: Overload:EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
  isExternal: false
  name: ClientConnectionName
  nameWithType: ITcpConnection.ClientConnectionName
  fullName: EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Transport.Tcp.ITcpConnection.RemoteEndPoint*
  commentId: Overload:EventStore.Transport.Tcp.ITcpConnection.RemoteEndPoint
  isExternal: false
  name: RemoteEndPoint
  nameWithType: ITcpConnection.RemoteEndPoint
  fullName: EventStore.Transport.Tcp.ITcpConnection.RemoteEndPoint
- uid: IPEndPoint
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: IPEndPoint
- uid: EventStore.Transport.Tcp.ITcpConnection.LocalEndPoint*
  commentId: Overload:EventStore.Transport.Tcp.ITcpConnection.LocalEndPoint
  isExternal: false
  name: LocalEndPoint
  nameWithType: ITcpConnection.LocalEndPoint
  fullName: EventStore.Transport.Tcp.ITcpConnection.LocalEndPoint
- uid: EventStore.Transport.Tcp.ITcpConnection.SendQueueSize*
  commentId: Overload:EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
  isExternal: false
  name: SendQueueSize
  nameWithType: ITcpConnection.SendQueueSize
  fullName: EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Transport.Tcp.ITcpConnection.PendingSendBytes*
  commentId: Overload:EventStore.Transport.Tcp.ITcpConnection.PendingSendBytes
  isExternal: false
  name: PendingSendBytes
  nameWithType: ITcpConnection.PendingSendBytes
  fullName: EventStore.Transport.Tcp.ITcpConnection.PendingSendBytes
- uid: EventStore.Transport.Tcp.ITcpConnection.IsClosed*
  commentId: Overload:EventStore.Transport.Tcp.ITcpConnection.IsClosed
  isExternal: false
  name: IsClosed
  nameWithType: ITcpConnection.IsClosed
  fullName: EventStore.Transport.Tcp.ITcpConnection.IsClosed
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync*
  commentId: Overload:EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync
  isExternal: false
  name: ReceiveAsync
  nameWithType: ITcpConnection.ReceiveAsync
  fullName: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync
- uid: Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}}
  commentId: '!:Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}}'
  definition: Action`2
  name: Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>
  nameWithType: Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>
  fullName: Action<EventStore.Transport.Tcp.ITcpConnection, IEnumerable<ArraySegment<System.Byte>>>
  nameWithType.vb: Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte)))
  fullName.vb: Action(Of EventStore.Transport.Tcp.ITcpConnection, IEnumerable(Of ArraySegment(Of System.Byte)))
  name.vb: Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte)))
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend*
  commentId: Overload:EventStore.Transport.Tcp.ITcpConnection.EnqueueSend
  isExternal: false
  name: EnqueueSend
  nameWithType: ITcpConnection.EnqueueSend
  fullName: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend
- uid: IEnumerable{ArraySegment{System.Byte}}
  commentId: '!:IEnumerable{ArraySegment{System.Byte}}'
  definition: IEnumerable`1
  name: IEnumerable<ArraySegment<Byte>>
  nameWithType: IEnumerable<ArraySegment<Byte>>
  fullName: IEnumerable<ArraySegment<System.Byte>>
  nameWithType.vb: IEnumerable(Of ArraySegment(Of Byte))
  fullName.vb: IEnumerable(Of ArraySegment(Of System.Byte))
  name.vb: IEnumerable(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.ITcpConnection.Close*
  commentId: Overload:EventStore.Transport.Tcp.ITcpConnection.Close
  isExternal: false
  name: Close
  nameWithType: ITcpConnection.Close
  fullName: EventStore.Transport.Tcp.ITcpConnection.Close
- uid: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName*
  commentId: Overload:EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName
  isExternal: false
  name: SetClientConnectionName
  nameWithType: ITcpConnection.SetClientConnectionName
  fullName: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName

### YamlMime:ManagedReference
items:
- uid: EventStore.Transport.Tcp.TcpConnectionBase
  commentId: T:EventStore.Transport.Tcp.TcpConnectionBase
  id: TcpConnectionBase
  parent: EventStore.Transport.Tcp
  children:
  - EventStore.Transport.Tcp.TcpConnectionBase.#ctor(IPEndPoint)
  - EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(Socket)
  - EventStore.Transport.Tcp.TcpConnectionBase.InReceive
  - EventStore.Transport.Tcp.TcpConnectionBase.InSend
  - EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
  - EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
  - EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
  - EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
  - EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
  - EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
  - EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
  - EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
  - EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
  - EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
  - EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
  - EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
  - EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
  - EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
  - EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
  - EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
  - EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
  langs:
  - csharp
  - vb
  name: TcpConnectionBase
  nameWithType: TcpConnectionBase
  fullName: EventStore.Transport.Tcp.TcpConnectionBase
  type: Class
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: TcpConnectionBase
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 8
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: 'public class TcpConnectionBase : object, IMonitoredTcpConnection'
    content.vb: >-
      Public Class TcpConnectionBase
          Inherits Object
          Implements IMonitoredTcpConnection
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.Transport.Tcp.TcpConnection
  - EventStore.Transport.Tcp.TcpConnectionLockless
  - EventStore.Transport.Tcp.TcpConnectionSsl
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Transport.Tcp.TcpConnectionBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Transport.Tcp.TcpConnectionBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
  id: RemoteEndPoint
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: RemoteEndPoint
  nameWithType: TcpConnectionBase.RemoteEndPoint
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: RemoteEndPoint
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 10
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public IPEndPoint RemoteEndPoint { get; }
    parameters: []
    return:
      type: IPEndPoint
    content.vb: Public ReadOnly Property RemoteEndPoint As IPEndPoint
  overload: EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
  id: LocalEndPoint
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: LocalEndPoint
  nameWithType: TcpConnectionBase.LocalEndPoint
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: LocalEndPoint
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 11
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public IPEndPoint LocalEndPoint { get; }
    parameters: []
    return:
      type: IPEndPoint
    content.vb: Public ReadOnly Property LocalEndPoint As IPEndPoint
  overload: EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
  id: IsInitialized
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: IsInitialized
  nameWithType: TcpConnectionBase.IsInitialized
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: IsInitialized
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 13
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public bool IsInitialized { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInitialized As Boolean
  overload: EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.IsInitialized
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
  id: IsClosed
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: IsClosed
  nameWithType: TcpConnectionBase.IsClosed
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: IsClosed
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 14
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public bool IsClosed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsClosed As Boolean
  overload: EventStore.Transport.Tcp.TcpConnectionBase.IsClosed*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.IsClosed
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InSend
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.InSend
  id: InSend
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: InSend
  nameWithType: TcpConnectionBase.InSend
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InSend
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: InSend
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 15
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public bool InSend { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property InSend As Boolean
  overload: EventStore.Transport.Tcp.TcpConnectionBase.InSend*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.InSend
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InReceive
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.InReceive
  id: InReceive
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: InReceive
  nameWithType: TcpConnectionBase.InReceive
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InReceive
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: InReceive
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 16
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public bool InReceive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property InReceive As Boolean
  overload: EventStore.Transport.Tcp.TcpConnectionBase.InReceive*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.InReceive
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
  id: PendingSendBytes
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: PendingSendBytes
  nameWithType: TcpConnectionBase.PendingSendBytes
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: PendingSendBytes
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 17
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public int PendingSendBytes { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property PendingSendBytes As Integer
  overload: EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingSendBytes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
  id: InSendBytes
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: InSendBytes
  nameWithType: TcpConnectionBase.InSendBytes
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: InSendBytes
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 18
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public int InSendBytes { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property InSendBytes As Integer
  overload: EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.InSendBytes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
  id: PendingReceivedBytes
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: PendingReceivedBytes
  nameWithType: TcpConnectionBase.PendingReceivedBytes
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: PendingReceivedBytes
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 19
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public int PendingReceivedBytes { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property PendingReceivedBytes As Integer
  overload: EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingReceivedBytes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
  id: TotalBytesSent
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: TotalBytesSent
  nameWithType: TcpConnectionBase.TotalBytesSent
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: TotalBytesSent
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 20
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public long TotalBytesSent { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property TotalBytesSent As Long
  overload: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesSent
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
  id: TotalBytesReceived
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: TotalBytesReceived
  nameWithType: TcpConnectionBase.TotalBytesReceived
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: TotalBytesReceived
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 21
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public long TotalBytesReceived { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property TotalBytesReceived As Long
  overload: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesReceived
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
  id: SendCalls
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: SendCalls
  nameWithType: TcpConnectionBase.SendCalls
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: SendCalls
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 22
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public int SendCalls { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SendCalls As Integer
  overload: EventStore.Transport.Tcp.TcpConnectionBase.SendCalls*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
  id: SendCallbacks
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: SendCallbacks
  nameWithType: TcpConnectionBase.SendCallbacks
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: SendCallbacks
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 23
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public int SendCallbacks { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SendCallbacks As Integer
  overload: EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
  id: ReceiveCalls
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: ReceiveCalls
  nameWithType: TcpConnectionBase.ReceiveCalls
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ReceiveCalls
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 24
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public int ReceiveCalls { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ReceiveCalls As Integer
  overload: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
  id: ReceiveCallbacks
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: ReceiveCallbacks
  nameWithType: TcpConnectionBase.ReceiveCallbacks
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ReceiveCallbacks
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 25
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public int ReceiveCallbacks { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ReceiveCallbacks As Integer
  overload: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
  id: IsReadyForSend
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: IsReadyForSend
  nameWithType: TcpConnectionBase.IsReadyForSend
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: IsReadyForSend
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 27
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public bool IsReadyForSend { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadyForSend As Boolean
  overload: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForSend
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
  id: IsReadyForReceive
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: IsReadyForReceive
  nameWithType: TcpConnectionBase.IsReadyForReceive
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: IsReadyForReceive
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 43
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public bool IsReadyForReceive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadyForReceive As Boolean
  overload: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForReceive
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
  id: IsFaulted
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: IsFaulted
  nameWithType: TcpConnectionBase.IsFaulted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: IsFaulted
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 59
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public bool IsFaulted { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFaulted As Boolean
  overload: EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.IsFaulted
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
  id: LastSendStarted
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: LastSendStarted
  nameWithType: TcpConnectionBase.LastSendStarted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: LastSendStarted
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 75
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public DateTime? LastSendStarted { get; }
    parameters: []
    return:
      type: System.Nullable{DateTime}
    content.vb: Public ReadOnly Property LastSendStarted As DateTime?
  overload: EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.LastSendStarted
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
  id: LastReceiveStarted
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: LastReceiveStarted
  nameWithType: TcpConnectionBase.LastReceiveStarted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: LastReceiveStarted
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 84
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public DateTime? LastReceiveStarted { get; }
    parameters: []
    return:
      type: System.Nullable{DateTime}
    content.vb: Public ReadOnly Property LastReceiveStarted As DateTime?
  overload: EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted*
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection.LastReceiveStarted
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionBase.#ctor(IPEndPoint)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.#ctor(IPEndPoint)
  id: '#ctor(IPEndPoint)'
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: TcpConnectionBase(IPEndPoint)
  nameWithType: TcpConnectionBase.TcpConnectionBase(IPEndPoint)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.TcpConnectionBase(IPEndPoint)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 112
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public TcpConnectionBase(IPEndPoint remoteEndPoint)
    parameters:
    - id: remoteEndPoint
      type: IPEndPoint
    content.vb: Public Sub New(remoteEndPoint As IPEndPoint)
  overload: EventStore.Transport.Tcp.TcpConnectionBase.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(Socket)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(Socket)
  id: InitConnectionBase(Socket)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: InitConnectionBase(Socket)
  nameWithType: TcpConnectionBase.InitConnectionBase(Socket)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(Socket)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: InitConnectionBase
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 120
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: protected void InitConnectionBase(Socket socket)
    parameters:
    - id: socket
      type: Socket
    content.vb: Protected Sub InitConnectionBase(socket As Socket)
  overload: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
  id: NotifySendScheduled(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: NotifySendScheduled(Int32)
  nameWithType: TcpConnectionBase.NotifySendScheduled(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: NotifySendScheduled
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 128
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: protected void NotifySendScheduled(int bytes)
    parameters:
    - id: bytes
      type: System.Int32
    content.vb: Protected Sub NotifySendScheduled(bytes As Integer)
  overload: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
  id: NotifySendStarting(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: NotifySendStarting(Int32)
  nameWithType: TcpConnectionBase.NotifySendStarting(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: NotifySendStarting
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 133
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: protected void NotifySendStarting(int bytes)
    parameters:
    - id: bytes
      type: System.Int32
    content.vb: Protected Sub NotifySendStarting(bytes As Integer)
  overload: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
  id: NotifySendCompleted(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: NotifySendCompleted(Int32)
  nameWithType: TcpConnectionBase.NotifySendCompleted(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: NotifySendCompleted
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 142
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: protected void NotifySendCompleted(int bytes)
    parameters:
    - id: bytes
      type: System.Int32
    content.vb: Protected Sub NotifySendCompleted(bytes As Integer)
  overload: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  id: NotifyReceiveStarting
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: NotifyReceiveStarting()
  nameWithType: TcpConnectionBase.NotifyReceiveStarting()
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting()
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: NotifyReceiveStarting
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 150
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: protected void NotifyReceiveStarting()
    content.vb: Protected Sub NotifyReceiveStarting
  overload: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
  id: NotifyReceiveCompleted(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: NotifyReceiveCompleted(Int32)
  nameWithType: TcpConnectionBase.NotifyReceiveCompleted(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: NotifyReceiveCompleted
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 158
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: protected void NotifyReceiveCompleted(int bytes)
    parameters:
    - id: bytes
      type: System.Int32
    content.vb: Protected Sub NotifyReceiveCompleted(bytes As Integer)
  overload: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
  id: NotifyReceiveDispatched(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: NotifyReceiveDispatched(Int32)
  nameWithType: TcpConnectionBase.NotifyReceiveDispatched(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: NotifyReceiveDispatched
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 166
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: protected void NotifyReceiveDispatched(int bytes)
    parameters:
    - id: bytes
      type: System.Int32
    content.vb: Protected Sub NotifyReceiveDispatched(bytes As Integer)
  overload: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  id: NotifyClosed
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  langs:
  - csharp
  - vb
  name: NotifyClosed()
  nameWithType: TcpConnectionBase.NotifyClosed()
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed()
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionBase.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: NotifyClosed
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionBase.cs
    startLine: 171
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: protected void NotifyClosed()
    content.vb: Protected Sub NotifyClosed
  overload: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: EventStore.Transport.Tcp
  commentId: N:EventStore.Transport.Tcp
  name: EventStore.Transport.Tcp
  nameWithType: EventStore.Transport.Tcp
  fullName: EventStore.Transport.Tcp
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection
  commentId: T:EventStore.Transport.Tcp.IMonitoredTcpConnection
  parent: EventStore.Transport.Tcp
  name: IMonitoredTcpConnection
  nameWithType: IMonitoredTcpConnection
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TcpConnectionBase>()
  nameWithType: ProtobufExtensions.Serialize<TcpConnectionBase>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.TcpConnectionBase>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TcpConnectionBase)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.TcpConnectionBase)()
  name.vb: Serialize(Of TcpConnectionBase)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TcpConnectionBase>
    nameWithType: ProtobufExtensions.Serialize<TcpConnectionBase>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.TcpConnectionBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TcpConnectionBase)
    nameWithType: ProtobufExtensions.Serialize(Of TcpConnectionBase)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.TcpConnectionBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TcpConnectionBase>()
  nameWithType: ProtobufExtensions.SerializeToArray<TcpConnectionBase>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.TcpConnectionBase>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TcpConnectionBase)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.TcpConnectionBase)()
  name.vb: SerializeToArray(Of TcpConnectionBase)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TcpConnectionBase>
    nameWithType: ProtobufExtensions.SerializeToArray<TcpConnectionBase>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.TcpConnectionBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TcpConnectionBase)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TcpConnectionBase)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.TcpConnectionBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
  name: RemoteEndPoint
  nameWithType: TcpConnectionBase.RemoteEndPoint
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
- uid: IPEndPoint
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: IPEndPoint
- uid: EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
  name: LocalEndPoint
  nameWithType: TcpConnectionBase.LocalEndPoint
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
  name: IsInitialized
  nameWithType: TcpConnectionBase.IsInitialized
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsInitialized
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsInitialized
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: IsInitialized
  nameWithType: IMonitoredTcpConnection.IsInitialized
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsInitialized
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsClosed*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
  name: IsClosed
  nameWithType: TcpConnectionBase.IsClosed
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsClosed
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsClosed
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: IsClosed
  nameWithType: IMonitoredTcpConnection.IsClosed
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsClosed
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InSend*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.InSend
  name: InSend
  nameWithType: TcpConnectionBase.InSend
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InSend
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSend
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.InSend
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: InSend
  nameWithType: IMonitoredTcpConnection.InSend
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSend
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InReceive*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.InReceive
  name: InReceive
  nameWithType: TcpConnectionBase.InReceive
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InReceive
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.InReceive
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.InReceive
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: InReceive
  nameWithType: IMonitoredTcpConnection.InReceive
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.InReceive
- uid: EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
  name: PendingSendBytes
  nameWithType: TcpConnectionBase.PendingSendBytes
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingSendBytes
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingSendBytes
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: PendingSendBytes
  nameWithType: IMonitoredTcpConnection.PendingSendBytes
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingSendBytes
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
  name: InSendBytes
  nameWithType: TcpConnectionBase.InSendBytes
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSendBytes
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.InSendBytes
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: InSendBytes
  nameWithType: IMonitoredTcpConnection.InSendBytes
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.InSendBytes
- uid: EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
  name: PendingReceivedBytes
  nameWithType: TcpConnectionBase.PendingReceivedBytes
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingReceivedBytes
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingReceivedBytes
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: PendingReceivedBytes
  nameWithType: IMonitoredTcpConnection.PendingReceivedBytes
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.PendingReceivedBytes
- uid: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
  name: TotalBytesSent
  nameWithType: TcpConnectionBase.TotalBytesSent
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesSent
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesSent
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: TotalBytesSent
  nameWithType: IMonitoredTcpConnection.TotalBytesSent
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesSent
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
  name: TotalBytesReceived
  nameWithType: TcpConnectionBase.TotalBytesReceived
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesReceived
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesReceived
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: TotalBytesReceived
  nameWithType: IMonitoredTcpConnection.TotalBytesReceived
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.TotalBytesReceived
- uid: EventStore.Transport.Tcp.TcpConnectionBase.SendCalls*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
  name: SendCalls
  nameWithType: TcpConnectionBase.SendCalls
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
- uid: EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
  name: SendCallbacks
  nameWithType: TcpConnectionBase.SendCallbacks
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
- uid: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
  name: ReceiveCalls
  nameWithType: TcpConnectionBase.ReceiveCalls
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
- uid: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
  name: ReceiveCallbacks
  nameWithType: TcpConnectionBase.ReceiveCallbacks
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
  name: IsReadyForSend
  nameWithType: TcpConnectionBase.IsReadyForSend
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForSend
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForSend
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: IsReadyForSend
  nameWithType: IMonitoredTcpConnection.IsReadyForSend
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForSend
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
  name: IsReadyForReceive
  nameWithType: TcpConnectionBase.IsReadyForReceive
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForReceive
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForReceive
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: IsReadyForReceive
  nameWithType: IMonitoredTcpConnection.IsReadyForReceive
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsReadyForReceive
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
  name: IsFaulted
  nameWithType: TcpConnectionBase.IsFaulted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsFaulted
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.IsFaulted
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: IsFaulted
  nameWithType: IMonitoredTcpConnection.IsFaulted
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.IsFaulted
- uid: EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
  name: LastSendStarted
  nameWithType: TcpConnectionBase.LastSendStarted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastSendStarted
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.LastSendStarted
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: LastSendStarted
  nameWithType: IMonitoredTcpConnection.LastSendStarted
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastSendStarted
- uid: System.Nullable{DateTime}
  commentId: '!:System.Nullable{DateTime}'
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
  name: LastReceiveStarted
  nameWithType: TcpConnectionBase.LastReceiveStarted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastReceiveStarted
  commentId: P:EventStore.Transport.Tcp.IMonitoredTcpConnection.LastReceiveStarted
  parent: EventStore.Transport.Tcp.IMonitoredTcpConnection
  name: LastReceiveStarted
  nameWithType: IMonitoredTcpConnection.LastReceiveStarted
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection.LastReceiveStarted
- uid: EventStore.Transport.Tcp.TcpConnectionBase.#ctor*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.#ctor
  name: TcpConnectionBase
  nameWithType: TcpConnectionBase.TcpConnectionBase
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.TcpConnectionBase
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase
  name: InitConnectionBase
  nameWithType: TcpConnectionBase.InitConnectionBase
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase
- uid: Socket
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: Socket
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled
  name: NotifySendScheduled
  nameWithType: TcpConnectionBase.NotifySendScheduled
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting
  name: NotifySendStarting
  nameWithType: TcpConnectionBase.NotifySendStarting
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted
  name: NotifySendCompleted
  nameWithType: TcpConnectionBase.NotifySendCompleted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  name: NotifyReceiveStarting
  nameWithType: TcpConnectionBase.NotifyReceiveStarting
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted
  name: NotifyReceiveCompleted
  nameWithType: TcpConnectionBase.NotifyReceiveCompleted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched
  name: NotifyReceiveDispatched
  nameWithType: TcpConnectionBase.NotifyReceiveDispatched
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  name: NotifyClosed
  nameWithType: TcpConnectionBase.NotifyClosed
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed

### YamlMime:ManagedReference
items:
- uid: EventStore.BufferManagement.BufferManager
  commentId: T:EventStore.BufferManagement.BufferManager
  id: BufferManager
  parent: EventStore.BufferManagement
  children:
  - EventStore.BufferManagement.BufferManager.#ctor(System.Int32,System.Int32)
  - EventStore.BufferManagement.BufferManager.#ctor(System.Int32,System.Int32,System.Int32)
  - EventStore.BufferManagement.BufferManager.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)
  - EventStore.BufferManagement.BufferManager.AvailableBuffers
  - EventStore.BufferManagement.BufferManager.CheckIn(System.ArraySegment{System.Byte})
  - EventStore.BufferManagement.BufferManager.CheckIn(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
  - EventStore.BufferManagement.BufferManager.CheckOut
  - EventStore.BufferManagement.BufferManager.CheckOut(System.Int32)
  - EventStore.BufferManagement.BufferManager.ChunkSize
  - EventStore.BufferManagement.BufferManager.Default
  - EventStore.BufferManagement.BufferManager.SegmentChunksCount
  - EventStore.BufferManagement.BufferManager.SegmentsCount
  - EventStore.BufferManagement.BufferManager.SetDefaultBufferManager(EventStore.BufferManagement.BufferManager)
  - EventStore.BufferManagement.BufferManager.TotalBufferSize
  langs:
  - csharp
  - vb
  name: BufferManager
  nameWithType: BufferManager
  fullName: EventStore.BufferManagement.BufferManager
  type: Class
  source:
    id: BufferManager
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 22
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nA manager to handle buffers for the socket connections\n"
  remarks: "\nWhen used in an async call a buffer is pinned. Large numbers of pinned buffers\ncause problem with the GC (in particular it causes heap fragmentation).\nThis class maintains a set of large segments and gives clients pieces of these\nsegments that they can use for their buffers. The alternative to this would be to\ncreate many small arrays which it then maintained. This methodology should be slightly\nbetter than the many small array methodology because in creating only a few very\nlarge objects it will force these objects to be placed on the LOH. Since the\nobjects are on the LOH they are at this time not subject to compacting which would\nrequire an update of all GC roots as would be the case with lots of smaller arrays\nthat were in the normal heap.\n"
  example: []
  syntax:
    content: public class BufferManager
    content.vb: Public Class BufferManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.BufferManagement.BufferManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.BufferManagement.BufferManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.BufferManagement.BufferManager.Default
  commentId: P:EventStore.BufferManagement.BufferManager.Default
  id: Default
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: BufferManager.Default
  fullName: EventStore.BufferManagement.BufferManager.Default
  type: Property
  source:
    id: Default
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 43
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nGets the default buffer manager\n"
  remarks: You should only be using this method if you don&apos;t want to manage buffers on your own.
  example: []
  syntax:
    content: public static BufferManager Default { get; }
    parameters: []
    return:
      type: EventStore.BufferManagement.BufferManager
      description: The default buffer manager.
    content.vb: Public Shared ReadOnly Property Default As BufferManager
  overload: EventStore.BufferManagement.BufferManager.Default*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.BufferManagement.BufferManager.SetDefaultBufferManager(EventStore.BufferManagement.BufferManager)
  commentId: M:EventStore.BufferManagement.BufferManager.SetDefaultBufferManager(EventStore.BufferManagement.BufferManager)
  id: SetDefaultBufferManager(EventStore.BufferManagement.BufferManager)
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: SetDefaultBufferManager(BufferManager)
  nameWithType: BufferManager.SetDefaultBufferManager(BufferManager)
  fullName: EventStore.BufferManagement.BufferManager.SetDefaultBufferManager(EventStore.BufferManagement.BufferManager)
  type: Method
  source:
    id: SetDefaultBufferManager
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 56
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nSets the default buffer manager.\n"
  example: []
  syntax:
    content: public static void SetDefaultBufferManager(BufferManager manager)
    parameters:
    - id: manager
      type: EventStore.BufferManagement.BufferManager
      description: The new default buffer manager.
    content.vb: Public Shared Sub SetDefaultBufferManager(manager As BufferManager)
  overload: EventStore.BufferManagement.BufferManager.SetDefaultBufferManager*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.BufferManagement.BufferManager.ChunkSize
  commentId: P:EventStore.BufferManagement.BufferManager.ChunkSize
  id: ChunkSize
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: ChunkSize
  nameWithType: BufferManager.ChunkSize
  fullName: EventStore.BufferManagement.BufferManager.ChunkSize
  type: Property
  source:
    id: ChunkSize
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 62
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  syntax:
    content: public int ChunkSize { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ChunkSize As Integer
  overload: EventStore.BufferManagement.BufferManager.ChunkSize*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.BufferManagement.BufferManager.SegmentsCount
  commentId: P:EventStore.BufferManagement.BufferManager.SegmentsCount
  id: SegmentsCount
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: SegmentsCount
  nameWithType: BufferManager.SegmentsCount
  fullName: EventStore.BufferManagement.BufferManager.SegmentsCount
  type: Property
  source:
    id: SegmentsCount
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 66
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  syntax:
    content: public int SegmentsCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SegmentsCount As Integer
  overload: EventStore.BufferManagement.BufferManager.SegmentsCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.BufferManagement.BufferManager.SegmentChunksCount
  commentId: P:EventStore.BufferManagement.BufferManager.SegmentChunksCount
  id: SegmentChunksCount
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: SegmentChunksCount
  nameWithType: BufferManager.SegmentChunksCount
  fullName: EventStore.BufferManagement.BufferManager.SegmentChunksCount
  type: Property
  source:
    id: SegmentChunksCount
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 70
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  syntax:
    content: public int SegmentChunksCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SegmentChunksCount As Integer
  overload: EventStore.BufferManagement.BufferManager.SegmentChunksCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.BufferManagement.BufferManager.AvailableBuffers
  commentId: P:EventStore.BufferManagement.BufferManager.AvailableBuffers
  id: AvailableBuffers
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: AvailableBuffers
  nameWithType: BufferManager.AvailableBuffers
  fullName: EventStore.BufferManagement.BufferManager.AvailableBuffers
  type: Property
  source:
    id: AvailableBuffers
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 77
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nThe current number of buffers available\n"
  example: []
  syntax:
    content: public int AvailableBuffers { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property AvailableBuffers As Integer
  overload: EventStore.BufferManagement.BufferManager.AvailableBuffers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.BufferManagement.BufferManager.TotalBufferSize
  commentId: P:EventStore.BufferManagement.BufferManager.TotalBufferSize
  id: TotalBufferSize
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: TotalBufferSize
  nameWithType: BufferManager.TotalBufferSize
  fullName: EventStore.BufferManagement.BufferManager.TotalBufferSize
  type: Property
  source:
    id: TotalBufferSize
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 84
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nThe total size of all buffers\n"
  example: []
  syntax:
    content: public int TotalBufferSize { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property TotalBufferSize As Integer
  overload: EventStore.BufferManagement.BufferManager.TotalBufferSize*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.BufferManagement.BufferManager.#ctor(System.Int32,System.Int32)
  commentId: M:EventStore.BufferManagement.BufferManager.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: BufferManager(Int32, Int32)
  nameWithType: BufferManager.BufferManager(Int32, Int32)
  fullName: EventStore.BufferManagement.BufferManager.BufferManager(System.Int32, System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 93
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nConstructs a new <xref href=\"EventStore.BufferManagement.BufferManager\" data-throw-if-not-resolved=\"false\"></xref> object\n"
  example: []
  syntax:
    content: public BufferManager(int segmentChunks, int chunkSize)
    parameters:
    - id: segmentChunks
      type: System.Int32
      description: The number of chunks to create per segment
    - id: chunkSize
      type: System.Int32
      description: The size of a chunk in bytes
    content.vb: Public Sub New(segmentChunks As Integer, chunkSize As Integer)
  overload: EventStore.BufferManagement.BufferManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.BufferManagement.BufferManager.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:EventStore.BufferManagement.BufferManager.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: BufferManager(Int32, Int32, Int32)
  nameWithType: BufferManager.BufferManager(Int32, Int32, Int32)
  fullName: EventStore.BufferManagement.BufferManager.BufferManager(System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 103
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nConstructs a new <xref href=\"EventStore.BufferManagement.BufferManager\" data-throw-if-not-resolved=\"false\"></xref> object\n"
  example: []
  syntax:
    content: public BufferManager(int segmentChunks, int chunkSize, int initialSegments)
    parameters:
    - id: segmentChunks
      type: System.Int32
      description: The number of chunks to create per segment
    - id: chunkSize
      type: System.Int32
      description: The size of a chunk in bytes
    - id: initialSegments
      type: System.Int32
      description: The initial number of segments to create
    content.vb: Public Sub New(segmentChunks As Integer, chunkSize As Integer, initialSegments As Integer)
  overload: EventStore.BufferManagement.BufferManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.BufferManagement.BufferManager.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)
  commentId: M:EventStore.BufferManagement.BufferManager.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)'
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: BufferManager(Int32, Int32, Int32, Boolean)
  nameWithType: BufferManager.BufferManager(Int32, Int32, Int32, Boolean)
  fullName: EventStore.BufferManagement.BufferManager.BufferManager(System.Int32, System.Int32, System.Int32, System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 114
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nConstructs a new <xref href=\"EventStore.BufferManagement.BufferManager\" data-throw-if-not-resolved=\"false\"></xref> object\n"
  example: []
  syntax:
    content: public BufferManager(int segmentChunks, int chunkSize, int initialSegments, bool allowedToCreateMemory)
    parameters:
    - id: segmentChunks
      type: System.Int32
      description: The number of chunks to create per segment
    - id: chunkSize
      type: System.Int32
      description: The size of a chunk in bytes
    - id: initialSegments
      type: System.Int32
      description: The initial number of segments to create
    - id: allowedToCreateMemory
      type: System.Boolean
      description: If false when empty and checkout is called an exception will be thrown
    content.vb: Public Sub New(segmentChunks As Integer, chunkSize As Integer, initialSegments As Integer, allowedToCreateMemory As Boolean)
  overload: EventStore.BufferManagement.BufferManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.BufferManagement.BufferManager.CheckOut
  commentId: M:EventStore.BufferManagement.BufferManager.CheckOut
  id: CheckOut
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: CheckOut()
  nameWithType: BufferManager.CheckOut()
  fullName: EventStore.BufferManagement.BufferManager.CheckOut()
  type: Method
  source:
    id: CheckOut
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 168
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nChecks out a buffer from the manager\n"
  remarks: "\nIt is the client&apos;s responsibility to return the buffer to the manager by\ncalling <xref href=\"EventStore.BufferManagement.BufferManager.CheckIn(System.ArraySegment%7bSystem.Byte%7d)\" data-throw-if-not-resolved=\"false\"></xref> on the buffer\n"
  example: []
  syntax:
    content: public ArraySegment<byte> CheckOut()
    return:
      type: System.ArraySegment{System.Byte}
      description: A <xref href="System.ArraySegment%601" data-throw-if-not-resolved="false"></xref> that can be used as a buffer
    content.vb: Public Function CheckOut As ArraySegment(Of Byte)
  overload: EventStore.BufferManagement.BufferManager.CheckOut*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.BufferManagement.BufferManager.CheckOut(System.Int32)
  commentId: M:EventStore.BufferManagement.BufferManager.CheckOut(System.Int32)
  id: CheckOut(System.Int32)
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: CheckOut(Int32)
  nameWithType: BufferManager.CheckOut(Int32)
  fullName: EventStore.BufferManagement.BufferManager.CheckOut(System.Int32)
  type: Method
  source:
    id: CheckOut
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 189
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nChecks out a buffer from the manager\n"
  remarks: "\nIt is the client&apos;s responsibility to return the buffer to the manger by\ncalling <xref href=\"EventStore.BufferManagement.BufferManager.CheckIn(System.Collections.Generic.IEnumerable%7bSystem.ArraySegment%7bSystem.Byte%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> on the buffer\n"
  example: []
  syntax:
    content: public IEnumerable<ArraySegment<byte>> CheckOut(int toGet)
    parameters:
    - id: toGet
      type: System.Int32
    return:
      type: System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}
      description: A <xref href="System.ArraySegment%601" data-throw-if-not-resolved="false"></xref> that can be used as a buffer
    content.vb: Public Function CheckOut(toGet As Integer) As IEnumerable(Of ArraySegment(Of Byte))
  overload: EventStore.BufferManagement.BufferManager.CheckOut*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.BufferManagement.BufferManager.CheckIn(System.ArraySegment{System.Byte})
  commentId: M:EventStore.BufferManagement.BufferManager.CheckIn(System.ArraySegment{System.Byte})
  id: CheckIn(System.ArraySegment{System.Byte})
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: CheckIn(ArraySegment<Byte>)
  nameWithType: BufferManager.CheckIn(ArraySegment<Byte>)
  fullName: EventStore.BufferManagement.BufferManager.CheckIn(System.ArraySegment<System.Byte>)
  type: Method
  source:
    id: CheckIn
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 226
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nReturns a buffer to the control of the manager\n"
  remarks: "\nIt is the client&apos;s responsibility to return the buffer to the manger by\ncalling <xref href=\"EventStore.BufferManagement.BufferManager.CheckIn(System.ArraySegment%7bSystem.Byte%7d)\" data-throw-if-not-resolved=\"false\"></xref> on the buffer\n"
  example: []
  syntax:
    content: public void CheckIn(ArraySegment<byte> buffer)
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: The <xref href="System.ArraySegment%601" data-throw-if-not-resolved="false"></xref> to return to the cache
    content.vb: Public Sub CheckIn(buffer As ArraySegment(Of Byte))
  overload: EventStore.BufferManagement.BufferManager.CheckIn*
  nameWithType.vb: BufferManager.CheckIn(ArraySegment(Of Byte))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.BufferManagement.BufferManager.CheckIn(System.ArraySegment(Of System.Byte))
  name.vb: CheckIn(ArraySegment(Of Byte))
- uid: EventStore.BufferManagement.BufferManager.CheckIn(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
  commentId: M:EventStore.BufferManagement.BufferManager.CheckIn(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
  id: CheckIn(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
  parent: EventStore.BufferManagement.BufferManager
  langs:
  - csharp
  - vb
  name: CheckIn(IEnumerable<ArraySegment<Byte>>)
  nameWithType: BufferManager.CheckIn(IEnumerable<ArraySegment<Byte>>)
  fullName: EventStore.BufferManagement.BufferManager.CheckIn(System.Collections.Generic.IEnumerable<System.ArraySegment<System.Byte>>)
  type: Method
  source:
    id: CheckIn
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.BufferManagement/BufferManager.cs
    startLine: 239
  assemblies:
  - EventStore.BufferManagement
  namespace: EventStore.BufferManagement
  summary: "\nReturns a set of buffers to the control of the manager\n"
  remarks: "\nIt is the client&apos;s responsibility to return the buffer to the manger by\ncalling <xref href=\"EventStore.BufferManagement.BufferManager.CheckIn(System.Collections.Generic.IEnumerable%7bSystem.ArraySegment%7bSystem.Byte%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> on the buffer\n"
  example: []
  syntax:
    content: public void CheckIn(IEnumerable<ArraySegment<byte>> buffersToReturn)
    parameters:
    - id: buffersToReturn
      type: System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}
      description: The <xref href="System.ArraySegment%601" data-throw-if-not-resolved="false"></xref> to return to the cache
    content.vb: Public Sub CheckIn(buffersToReturn As IEnumerable(Of ArraySegment(Of Byte)))
  overload: EventStore.BufferManagement.BufferManager.CheckIn*
  nameWithType.vb: BufferManager.CheckIn(IEnumerable(Of ArraySegment(Of Byte)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.BufferManagement.BufferManager.CheckIn(System.Collections.Generic.IEnumerable(Of System.ArraySegment(Of System.Byte)))
  name.vb: CheckIn(IEnumerable(Of ArraySegment(Of Byte)))
references:
- uid: EventStore.BufferManagement
  commentId: N:EventStore.BufferManagement
  name: EventStore.BufferManagement
  nameWithType: EventStore.BufferManagement
  fullName: EventStore.BufferManagement
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.BufferManagement.BufferManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<BufferManager>()
  nameWithType: ProtobufExtensions.Serialize<BufferManager>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.BufferManagement.BufferManager>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of BufferManager)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.BufferManagement.BufferManager)()
  name.vb: Serialize(Of BufferManager)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<BufferManager>
    nameWithType: ProtobufExtensions.Serialize<BufferManager>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.BufferManagement.BufferManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of BufferManager)
    nameWithType: ProtobufExtensions.Serialize(Of BufferManager)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.BufferManagement.BufferManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.BufferManagement.BufferManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<BufferManager>()
  nameWithType: ProtobufExtensions.SerializeToArray<BufferManager>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.BufferManagement.BufferManager>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of BufferManager)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.BufferManagement.BufferManager)()
  name.vb: SerializeToArray(Of BufferManager)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<BufferManager>
    nameWithType: ProtobufExtensions.SerializeToArray<BufferManager>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.BufferManagement.BufferManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of BufferManager)
    nameWithType: ProtobufExtensions.SerializeToArray(Of BufferManager)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.BufferManagement.BufferManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.BufferManagement.BufferManager.Default*
  commentId: Overload:EventStore.BufferManagement.BufferManager.Default
  name: Default
  nameWithType: BufferManager.Default
  fullName: EventStore.BufferManagement.BufferManager.Default
- uid: EventStore.BufferManagement.BufferManager
  commentId: T:EventStore.BufferManagement.BufferManager
  parent: EventStore.BufferManagement
  name: BufferManager
  nameWithType: BufferManager
  fullName: EventStore.BufferManagement.BufferManager
- uid: EventStore.BufferManagement.BufferManager.SetDefaultBufferManager*
  commentId: Overload:EventStore.BufferManagement.BufferManager.SetDefaultBufferManager
  name: SetDefaultBufferManager
  nameWithType: BufferManager.SetDefaultBufferManager
  fullName: EventStore.BufferManagement.BufferManager.SetDefaultBufferManager
- uid: EventStore.BufferManagement.BufferManager.ChunkSize*
  commentId: Overload:EventStore.BufferManagement.BufferManager.ChunkSize
  name: ChunkSize
  nameWithType: BufferManager.ChunkSize
  fullName: EventStore.BufferManagement.BufferManager.ChunkSize
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.BufferManagement.BufferManager.SegmentsCount*
  commentId: Overload:EventStore.BufferManagement.BufferManager.SegmentsCount
  name: SegmentsCount
  nameWithType: BufferManager.SegmentsCount
  fullName: EventStore.BufferManagement.BufferManager.SegmentsCount
- uid: EventStore.BufferManagement.BufferManager.SegmentChunksCount*
  commentId: Overload:EventStore.BufferManagement.BufferManager.SegmentChunksCount
  name: SegmentChunksCount
  nameWithType: BufferManager.SegmentChunksCount
  fullName: EventStore.BufferManagement.BufferManager.SegmentChunksCount
- uid: EventStore.BufferManagement.BufferManager.AvailableBuffers*
  commentId: Overload:EventStore.BufferManagement.BufferManager.AvailableBuffers
  name: AvailableBuffers
  nameWithType: BufferManager.AvailableBuffers
  fullName: EventStore.BufferManagement.BufferManager.AvailableBuffers
- uid: EventStore.BufferManagement.BufferManager.TotalBufferSize*
  commentId: Overload:EventStore.BufferManagement.BufferManager.TotalBufferSize
  name: TotalBufferSize
  nameWithType: BufferManager.TotalBufferSize
  fullName: EventStore.BufferManagement.BufferManager.TotalBufferSize
- uid: EventStore.BufferManagement.BufferManager.#ctor*
  commentId: Overload:EventStore.BufferManagement.BufferManager.#ctor
  name: BufferManager
  nameWithType: BufferManager.BufferManager
  fullName: EventStore.BufferManagement.BufferManager.BufferManager
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.BufferManagement.BufferManager.CheckIn(System.ArraySegment{System.Byte})
  commentId: M:EventStore.BufferManagement.BufferManager.CheckIn(System.ArraySegment{System.Byte})
  isExternal: true
- uid: System.ArraySegment`1
  commentId: T:System.ArraySegment`1
  isExternal: true
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.BufferManagement.BufferManager.CheckOut*
  commentId: Overload:EventStore.BufferManagement.BufferManager.CheckOut
  name: CheckOut
  nameWithType: BufferManager.CheckOut
  fullName: EventStore.BufferManagement.BufferManager.CheckOut
- uid: System.ArraySegment{System.Byte}
  commentId: T:System.ArraySegment{System.Byte}
  parent: System
  definition: System.ArraySegment`1
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  nameWithType.vb: ArraySegment(Of Byte)
  fullName.vb: System.ArraySegment(Of System.Byte)
  name.vb: ArraySegment(Of Byte)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.BufferManagement.BufferManager.CheckIn(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
  commentId: M:EventStore.BufferManagement.BufferManager.CheckIn(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
  isExternal: true
- uid: System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ArraySegment<Byte>>
  nameWithType: IEnumerable<ArraySegment<Byte>>
  fullName: System.Collections.Generic.IEnumerable<System.ArraySegment<System.Byte>>
  nameWithType.vb: IEnumerable(Of ArraySegment(Of Byte))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.ArraySegment(Of System.Byte))
  name.vb: IEnumerable(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EventStore.BufferManagement.BufferManager.CheckIn*
  commentId: Overload:EventStore.BufferManagement.BufferManager.CheckIn
  name: CheckIn
  nameWithType: BufferManager.CheckIn
  fullName: EventStore.BufferManagement.BufferManager.CheckIn

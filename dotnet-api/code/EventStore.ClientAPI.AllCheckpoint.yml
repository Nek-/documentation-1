### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.AllCheckpoint
  commentId: T:EventStore.ClientAPI.AllCheckpoint
  id: AllCheckpoint
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.AllCheckpoint.AllStart
  langs:
  - csharp
  - vb
  name: AllCheckpoint
  nameWithType: AllCheckpoint
  fullName: EventStore.ClientAPI.AllCheckpoint
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/AllCheckpoint.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: AllCheckpoint
    path: ../EventStore/src/EventStore.ClientAPI/AllCheckpoint.cs
    startLine: 6
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThis class contains constants to be used when setting up subscriptions\nusing the  IEventStoreConnection.SubscribeToAllFrom method on\n<xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static class AllCheckpoint : object'
    content.vb: >-
      Public Module AllCheckpoint
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.ClientAPI.AllCheckpoint.AllStart
  commentId: F:EventStore.ClientAPI.AllCheckpoint.AllStart
  id: AllStart
  parent: EventStore.ClientAPI.AllCheckpoint
  langs:
  - csharp
  - vb
  name: AllStart
  nameWithType: AllCheckpoint.AllStart
  fullName: EventStore.ClientAPI.AllCheckpoint.AllStart
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/AllCheckpoint.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: AllStart
    path: ../EventStore/src/EventStore.ClientAPI/AllCheckpoint.cs
    startLine: 11
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nIndicates that a catch-up subscription should receive all events\nin the database.\n"
  example: []
  syntax:
    content: public static Position? AllStart
    return:
      type: System.Nullable{EventStore.ClientAPI.Position}
    content.vb: Public Shared AllStart As Position?
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EventStore.ClientAPI.IEventStoreConnection
  commentId: T:EventStore.ClientAPI.IEventStoreConnection
  parent: EventStore.ClientAPI
  name: IEventStoreConnection
  nameWithType: IEventStoreConnection
  fullName: EventStore.ClientAPI.IEventStoreConnection
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Nullable{EventStore.ClientAPI.Position}
  commentId: '!:System.Nullable{EventStore.ClientAPI.Position}'
  definition: System.Nullable`1
  name: Nullable<Position>
  nameWithType: Nullable<Position>
  fullName: System.Nullable<EventStore.ClientAPI.Position>
  nameWithType.vb: Nullable(Of Position)
  fullName.vb: System.Nullable(Of EventStore.ClientAPI.Position)
  name.vb: Nullable(Of Position)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

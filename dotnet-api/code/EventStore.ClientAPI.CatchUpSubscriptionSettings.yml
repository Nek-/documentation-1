### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
  commentId: T:EventStore.ClientAPI.CatchUpSubscriptionSettings
  id: CatchUpSubscriptionSettings
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.Default
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.MaxLiveQueueSize
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.ReadBatchSize
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.ResolveLinkTos
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.SubscriptionName
  - EventStore.ClientAPI.CatchUpSubscriptionSettings.VerboseLogging
  langs:
  - csharp
  - vb
  name: CatchUpSubscriptionSettings
  nameWithType: CatchUpSubscriptionSettings
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: CatchUpSubscriptionSettings
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 7
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSettings for <xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class CatchUpSubscriptionSettings
    content.vb: Public Class CatchUpSubscriptionSettings
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.MaxLiveQueueSize
  commentId: F:EventStore.ClientAPI.CatchUpSubscriptionSettings.MaxLiveQueueSize
  id: MaxLiveQueueSize
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: MaxLiveQueueSize
  nameWithType: CatchUpSubscriptionSettings.MaxLiveQueueSize
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.MaxLiveQueueSize
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: MaxLiveQueueSize
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 11
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe maximum amount of events to cache when processing from a live subscription. Going above this value will drop the subscription.\n"
  example: []
  syntax:
    content: public readonly int MaxLiveQueueSize
    return:
      type: System.Int32
    content.vb: Public ReadOnly MaxLiveQueueSize As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.ReadBatchSize
  commentId: F:EventStore.ClientAPI.CatchUpSubscriptionSettings.ReadBatchSize
  id: ReadBatchSize
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: ReadBatchSize
  nameWithType: CatchUpSubscriptionSettings.ReadBatchSize
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.ReadBatchSize
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ReadBatchSize
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 16
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe number of events to read per batch when reading the history.\n"
  example: []
  syntax:
    content: public readonly int ReadBatchSize
    return:
      type: System.Int32
    content.vb: Public ReadOnly ReadBatchSize As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.VerboseLogging
  commentId: F:EventStore.ClientAPI.CatchUpSubscriptionSettings.VerboseLogging
  id: VerboseLogging
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: VerboseLogging
  nameWithType: CatchUpSubscriptionSettings.VerboseLogging
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.VerboseLogging
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: VerboseLogging
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 21
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nEnables verbose logging on the subscription.\n"
  example: []
  syntax:
    content: public readonly bool VerboseLogging
    return:
      type: System.Boolean
    content.vb: Public ReadOnly VerboseLogging As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.ResolveLinkTos
  commentId: F:EventStore.ClientAPI.CatchUpSubscriptionSettings.ResolveLinkTos
  id: ResolveLinkTos
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: ResolveLinkTos
  nameWithType: CatchUpSubscriptionSettings.ResolveLinkTos
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.ResolveLinkTos
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ResolveLinkTos
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 26
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWhether to resolve link events.\n"
  example: []
  syntax:
    content: public readonly bool ResolveLinkTos
    return:
      type: System.Boolean
    content.vb: Public ReadOnly ResolveLinkTos As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.SubscriptionName
  commentId: F:EventStore.ClientAPI.CatchUpSubscriptionSettings.SubscriptionName
  id: SubscriptionName
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: SubscriptionName
  nameWithType: CatchUpSubscriptionSettings.SubscriptionName
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.SubscriptionName
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SubscriptionName
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 31
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe name of the subscription.\n"
  example: []
  syntax:
    content: public readonly string SubscriptionName
    return:
      type: System.String
    content.vb: Public ReadOnly SubscriptionName As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.Default
  commentId: F:EventStore.ClientAPI.CatchUpSubscriptionSettings.Default
  id: Default
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: CatchUpSubscriptionSettings.Default
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.Default
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Default
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 36
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nReturns default settings.\n"
  example: []
  syntax:
    content: public static readonly CatchUpSubscriptionSettings Default
    return:
      type: EventStore.ClientAPI.CatchUpSubscriptionSettings
    content.vb: Public Shared ReadOnly Default As CatchUpSubscriptionSettings
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)
  commentId: M:EventStore.ClientAPI.CatchUpSubscriptionSettings.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)
  id: '#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)'
  parent: EventStore.ClientAPI.CatchUpSubscriptionSettings
  langs:
  - csharp
  - vb
  name: CatchUpSubscriptionSettings(Int32, Int32, Boolean, Boolean, String)
  nameWithType: CatchUpSubscriptionSettings.CatchUpSubscriptionSettings(Int32, Int32, Boolean, Boolean, String)
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.CatchUpSubscriptionSettings(System.Int32, System.Int32, System.Boolean, System.Boolean, System.String)
  type: Constructor
  source:
    remote:
      path: src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
    startLine: 52
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConstructs a <xref href=\"EventStore.ClientAPI.CatchUpSubscriptionSettings\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: public CatchUpSubscriptionSettings(int maxLiveQueueSize, int readBatchSize, bool verboseLogging, bool resolveLinkTos, string subscriptionName = "")
    parameters:
    - id: maxLiveQueueSize
      type: System.Int32
      description: The maximum amount of events to buffer when processing from a live subscription. Going above this amount will drop the subscription.
    - id: readBatchSize
      type: System.Int32
      description: The number of events to read per batch when reading through history.
    - id: verboseLogging
      type: System.Boolean
      description: Enables verbose logging on the subscription.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve link events.
    - id: subscriptionName
      type: System.String
      description: The name of the subscription.
    content.vb: Public Sub New(maxLiveQueueSize As Integer, readBatchSize As Integer, verboseLogging As Boolean, resolveLinkTos As Boolean, subscriptionName As String = "")
  overload: EventStore.ClientAPI.CatchUpSubscriptionSettings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreCatchUpSubscription
  parent: EventStore.ClientAPI
  name: EventStoreCatchUpSubscription
  nameWithType: EventStoreCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
  commentId: T:EventStore.ClientAPI.CatchUpSubscriptionSettings
  parent: EventStore.ClientAPI
  name: CatchUpSubscriptionSettings
  nameWithType: CatchUpSubscriptionSettings
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings.#ctor*
  commentId: Overload:EventStore.ClientAPI.CatchUpSubscriptionSettings.#ctor
  name: CatchUpSubscriptionSettings
  nameWithType: CatchUpSubscriptionSettings.CatchUpSubscriptionSettings
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings.CatchUpSubscriptionSettings

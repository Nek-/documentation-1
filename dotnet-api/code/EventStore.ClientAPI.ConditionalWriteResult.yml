### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.ConditionalWriteResult
  commentId: T:EventStore.ClientAPI.ConditionalWriteResult
  id: ConditionalWriteResult
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.ConditionalWriteResult.#ctor(EventStore.ClientAPI.ConditionalWriteStatus)
  - EventStore.ClientAPI.ConditionalWriteResult.#ctor(System.Int64,EventStore.ClientAPI.Position)
  - EventStore.ClientAPI.ConditionalWriteResult.LogPosition
  - EventStore.ClientAPI.ConditionalWriteResult.NextExpectedVersion
  - EventStore.ClientAPI.ConditionalWriteResult.Status
  langs:
  - csharp
  - vb
  name: ConditionalWriteResult
  nameWithType: ConditionalWriteResult
  fullName: EventStore.ClientAPI.ConditionalWriteResult
  type: Struct
  source:
    id: ConditionalWriteResult
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConditionalWriteResult.cs
    startLine: 6
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nResult type returned after conditionally writing to a stream.\n"
  example: []
  syntax:
    content: public struct ConditionalWriteResult
    content.vb: Public Structure ConditionalWriteResult
  extensionMethods:
  - EventStore.ClientAPI.ConditionalWriteResult.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: EventStore.ClientAPI.ConditionalWriteResult.Status
  commentId: F:EventStore.ClientAPI.ConditionalWriteResult.Status
  id: Status
  parent: EventStore.ClientAPI.ConditionalWriteResult
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: ConditionalWriteResult.Status
  fullName: EventStore.ClientAPI.ConditionalWriteResult.Status
  type: Field
  source:
    id: Status
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConditionalWriteResult.cs
    startLine: 10
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nReturns if the write was successful.\n"
  example: []
  syntax:
    content: public readonly ConditionalWriteStatus Status
    return:
      type: EventStore.ClientAPI.ConditionalWriteStatus
    content.vb: Public ReadOnly Status As ConditionalWriteStatus
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ConditionalWriteResult.NextExpectedVersion
  commentId: F:EventStore.ClientAPI.ConditionalWriteResult.NextExpectedVersion
  id: NextExpectedVersion
  parent: EventStore.ClientAPI.ConditionalWriteResult
  langs:
  - csharp
  - vb
  name: NextExpectedVersion
  nameWithType: ConditionalWriteResult.NextExpectedVersion
  fullName: EventStore.ClientAPI.ConditionalWriteResult.NextExpectedVersion
  type: Field
  source:
    id: NextExpectedVersion
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConditionalWriteResult.cs
    startLine: 15
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe next expected version for the stream.\n"
  example: []
  syntax:
    content: public readonly long? NextExpectedVersion
    return:
      type: System.Nullable{System.Int64}
    content.vb: Public ReadOnly NextExpectedVersion As Long?
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ConditionalWriteResult.LogPosition
  commentId: F:EventStore.ClientAPI.ConditionalWriteResult.LogPosition
  id: LogPosition
  parent: EventStore.ClientAPI.ConditionalWriteResult
  langs:
  - csharp
  - vb
  name: LogPosition
  nameWithType: ConditionalWriteResult.LogPosition
  fullName: EventStore.ClientAPI.ConditionalWriteResult.LogPosition
  type: Field
  source:
    id: LogPosition
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConditionalWriteResult.cs
    startLine: 20
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe <xref href=\"EventStore.ClientAPI.ConditionalWriteResult.LogPosition\" data-throw-if-not-resolved=\"false\"></xref> of the write.\n"
  example: []
  syntax:
    content: public readonly Position? LogPosition
    return:
      type: System.Nullable{EventStore.ClientAPI.Position}
    content.vb: Public ReadOnly LogPosition As Position?
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ConditionalWriteResult.#ctor(System.Int64,EventStore.ClientAPI.Position)
  commentId: M:EventStore.ClientAPI.ConditionalWriteResult.#ctor(System.Int64,EventStore.ClientAPI.Position)
  id: '#ctor(System.Int64,EventStore.ClientAPI.Position)'
  parent: EventStore.ClientAPI.ConditionalWriteResult
  langs:
  - csharp
  - vb
  name: ConditionalWriteResult(Int64, Position)
  nameWithType: ConditionalWriteResult.ConditionalWriteResult(Int64, Position)
  fullName: EventStore.ClientAPI.ConditionalWriteResult.ConditionalWriteResult(System.Int64, EventStore.ClientAPI.Position)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConditionalWriteResult.cs
    startLine: 27
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConstructs a new <xref href=\"EventStore.ClientAPI.WriteResult\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ConditionalWriteResult(long nextExpectedVersion, Position logPosition)
    parameters:
    - id: nextExpectedVersion
      type: System.Int64
      description: The next expected version for the stream.
    - id: logPosition
      type: EventStore.ClientAPI.Position
      description: The position of the write in the log
    content.vb: Public Sub New(nextExpectedVersion As Long, logPosition As Position)
  overload: EventStore.ClientAPI.ConditionalWriteResult.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConditionalWriteResult.#ctor(EventStore.ClientAPI.ConditionalWriteStatus)
  commentId: M:EventStore.ClientAPI.ConditionalWriteResult.#ctor(EventStore.ClientAPI.ConditionalWriteStatus)
  id: '#ctor(EventStore.ClientAPI.ConditionalWriteStatus)'
  parent: EventStore.ClientAPI.ConditionalWriteResult
  langs:
  - csharp
  - vb
  name: ConditionalWriteResult(ConditionalWriteStatus)
  nameWithType: ConditionalWriteResult.ConditionalWriteResult(ConditionalWriteStatus)
  fullName: EventStore.ClientAPI.ConditionalWriteResult.ConditionalWriteResult(EventStore.ClientAPI.ConditionalWriteStatus)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConditionalWriteResult.cs
    startLine: 37
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConstructs a new <xref href=\"EventStore.ClientAPI.WriteResult\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ConditionalWriteResult(ConditionalWriteStatus status)
    parameters:
    - id: status
      type: EventStore.ClientAPI.ConditionalWriteStatus
      description: The status of the write operation.
    content.vb: Public Sub New(status As ConditionalWriteStatus)
  overload: EventStore.ClientAPI.ConditionalWriteResult.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: EventStore.ClientAPI.ConditionalWriteResult.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  parent: EventStore.Projections.Core.Utils.EnumExtensions
  definition: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<ConditionalWriteResult>()
  nameWithType: EnumExtensions.EnumValueName<ConditionalWriteResult>()
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.ClientAPI.ConditionalWriteResult>()
  nameWithType.vb: EnumExtensions.EnumValueName(Of ConditionalWriteResult)()
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.ClientAPI.ConditionalWriteResult)()
  name.vb: EnumValueName(Of ConditionalWriteResult)()
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName<ConditionalWriteResult>
    nameWithType: EnumExtensions.EnumValueName<ConditionalWriteResult>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.ClientAPI.ConditionalWriteResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName(Of ConditionalWriteResult)
    nameWithType: EnumExtensions.EnumValueName(Of ConditionalWriteResult)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.ClientAPI.ConditionalWriteResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<T>(T)
  nameWithType: EnumExtensions.EnumValueName<T>(T)
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>(T)
  nameWithType.vb: EnumExtensions.EnumValueName(Of T)(T)
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)(T)
  name.vb: EnumValueName(Of T)(T)
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName<T>
    nameWithType: EnumExtensions.EnumValueName<T>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName(Of T)
    nameWithType: EnumExtensions.EnumValueName(Of T)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions
  commentId: T:EventStore.Projections.Core.Utils.EnumExtensions
  parent: EventStore.Projections.Core.Utils
  name: EnumExtensions
  nameWithType: EnumExtensions
  fullName: EventStore.Projections.Core.Utils.EnumExtensions
- uid: EventStore.Projections.Core.Utils
  commentId: N:EventStore.Projections.Core.Utils
  name: EventStore.Projections.Core.Utils
  nameWithType: EventStore.Projections.Core.Utils
  fullName: EventStore.Projections.Core.Utils
- uid: EventStore.ClientAPI.ConditionalWriteStatus
  commentId: T:EventStore.ClientAPI.ConditionalWriteStatus
  parent: EventStore.ClientAPI
  name: ConditionalWriteStatus
  nameWithType: ConditionalWriteStatus
  fullName: EventStore.ClientAPI.ConditionalWriteStatus
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ConditionalWriteResult.LogPosition
  commentId: F:EventStore.ClientAPI.ConditionalWriteResult.LogPosition
  isExternal: true
- uid: System.Nullable{EventStore.ClientAPI.Position}
  commentId: '!:System.Nullable{EventStore.ClientAPI.Position}'
  definition: System.Nullable`1
  name: Nullable<Position>
  nameWithType: Nullable<Position>
  fullName: System.Nullable<EventStore.ClientAPI.Position>
  nameWithType.vb: Nullable(Of Position)
  fullName.vb: System.Nullable(Of EventStore.ClientAPI.Position)
  name.vb: Nullable(Of Position)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.WriteResult
  commentId: T:EventStore.ClientAPI.WriteResult
  name: WriteResult
  nameWithType: WriteResult
  fullName: EventStore.ClientAPI.WriteResult
- uid: EventStore.ClientAPI.ConditionalWriteResult.#ctor*
  commentId: Overload:EventStore.ClientAPI.ConditionalWriteResult.#ctor
  name: ConditionalWriteResult
  nameWithType: ConditionalWriteResult.ConditionalWriteResult
  fullName: EventStore.ClientAPI.ConditionalWriteResult.ConditionalWriteResult
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.ClientAPI.Position
  commentId: T:EventStore.ClientAPI.Position
  parent: EventStore.ClientAPI
  name: Position
  nameWithType: Position
  fullName: EventStore.ClientAPI.Position

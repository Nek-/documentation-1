### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder
  commentId: T:EventStore.ClientAPI.ConnectionSettingsBuilder
  id: ConnectionSettingsBuilder
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.ConnectionSettingsBuilder.Build
  - EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging
  - EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse
  - EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting
  - EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying
  - EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit(EventStore.ClientAPI.ConnectionSettingsBuilder)~EventStore.ClientAPI.ConnectionSettings
  - EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode
  - EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly
  - EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode
  - EventStore.ClientAPI.ConnectionSettingsBuilder.PreferReadOnlyReplica
  - EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns(System.String)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials(EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed[])
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(System.Boolean,System.Net.EndPoint[])
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(System.Net.EndPoint[])
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout(System.TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval(System.TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout(System.TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts(System.Int32)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo(System.TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo(System.TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo(System.TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo(System.TimeSpan)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger
  - EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomHttpClient(EventStore.ClientAPI.Transport.Http.IHttpClient)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger(EventStore.ClientAPI.ILogger)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger
  - EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger(System.String)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection(System.String,System.Boolean)
  - EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf(System.TimeSpan)
  langs:
  - csharp
  - vb
  name: ConnectionSettingsBuilder
  nameWithType: ConnectionSettingsBuilder
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder
  type: Class
  source:
    id: ConnectionSettingsBuilder
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 12
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nUsed to build a connection settings (fluent API)\n"
  example: []
  syntax:
    content: public class ConnectionSettingsBuilder
    content.vb: Public Class ConnectionSettingsBuilder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomHttpClient(EventStore.ClientAPI.Transport.Http.IHttpClient)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomHttpClient(EventStore.ClientAPI.Transport.Http.IHttpClient)
  id: UseCustomHttpClient(EventStore.ClientAPI.Transport.Http.IHttpClient)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: UseCustomHttpClient(IHttpClient)
  nameWithType: ConnectionSettingsBuilder.UseCustomHttpClient(IHttpClient)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomHttpClient(EventStore.ClientAPI.Transport.Http.IHttpClient)
  type: Method
  source:
    id: UseCustomHttpClient
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 54
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConfigures the connection to use a custom <xref href=\"EventStore.ClientAPI.Transport.Http.IHttpClient\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder UseCustomHttpClient(IHttpClient client)
    parameters:
    - id: client
      type: EventStore.ClientAPI.Transport.Http.IHttpClient
      description: The <xref href="EventStore.ClientAPI.Transport.Http.IHttpClient" data-throw-if-not-resolved="false"></xref> to use.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function UseCustomHttpClient(client As IHttpClient) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomHttpClient*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger(EventStore.ClientAPI.ILogger)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger(EventStore.ClientAPI.ILogger)
  id: UseCustomLogger(EventStore.ClientAPI.ILogger)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: UseCustomLogger(ILogger)
  nameWithType: ConnectionSettingsBuilder.UseCustomLogger(ILogger)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger(EventStore.ClientAPI.ILogger)
  type: Method
  source:
    id: UseCustomLogger
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 64
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConfigures the connection to output log messages to the given <xref href=\"EventStore.ClientAPI.ILogger\" data-throw-if-not-resolved=\"false\"></xref>. You should implement this interface using another library such as NLog or log4net.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder UseCustomLogger(ILogger logger)
    parameters:
    - id: logger
      type: EventStore.ClientAPI.ILogger
      description: The <xref href="EventStore.ClientAPI.ILogger" data-throw-if-not-resolved="false"></xref> to use.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function UseCustomLogger(logger As ILogger) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger
  id: UseConsoleLogger
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: UseConsoleLogger()
  nameWithType: ConnectionSettingsBuilder.UseConsoleLogger()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger()
  type: Method
  source:
    id: UseConsoleLogger
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 73
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConfigures the connection to output log messages to the console.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder UseConsoleLogger()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
    content.vb: Public Function UseConsoleLogger As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger
  id: UseDebugLogger
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: UseDebugLogger()
  nameWithType: ConnectionSettingsBuilder.UseDebugLogger()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger()
  type: Method
  source:
    id: UseDebugLogger
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 82
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConfigures the connection to output log messages to the listeners\nconfigured on <xref href=\"System.Diagnostics.Debug\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder UseDebugLogger()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
    content.vb: Public Function UseDebugLogger As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger(System.String)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger(System.String)
  id: UseFileLogger(System.String)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: UseFileLogger(String)
  nameWithType: ConnectionSettingsBuilder.UseFileLogger(String)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger(System.String)
  type: Method
  source:
    id: UseFileLogger
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 91
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConfigures the connection to output log messages to a file.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder UseFileLogger(string filename)
    parameters:
    - id: filename
      type: System.String
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
    content.vb: Public Function UseFileLogger(filename As String) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging
  id: EnableVerboseLogging
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: EnableVerboseLogging()
  nameWithType: ConnectionSettingsBuilder.EnableVerboseLogging()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging()
  type: Method
  source:
    id: EnableVerboseLogging
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 100
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nTurns on verbose <xref href=\"EventStore.ClientAPI.EventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> internal logic logging. By contains default information about connection, disconnection and errors, but you can customize output.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder EnableVerboseLogging()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function EnableVerboseLogging As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo(System.Int32)
  id: LimitOperationsQueueTo(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: LimitOperationsQueueTo(Int32)
  nameWithType: ConnectionSettingsBuilder.LimitOperationsQueueTo(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo(System.Int32)
  type: Method
  source:
    id: LimitOperationsQueueTo
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 110
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the limit for number of outstanding operations.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder LimitOperationsQueueTo(int limit)
    parameters:
    - id: limit
      type: System.Int32
      description: The new limit of outstanding operations
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function LimitOperationsQueueTo(limit As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo(System.Int32)
  id: LimitConcurrentOperationsTo(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: LimitConcurrentOperationsTo(Int32)
  nameWithType: ConnectionSettingsBuilder.LimitConcurrentOperationsTo(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo(System.Int32)
  type: Method
  source:
    id: LimitConcurrentOperationsTo
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 122
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nLimits the number of concurrent operations that this connection can have.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder LimitConcurrentOperationsTo(int limit)
    parameters:
    - id: limit
      type: System.Int32
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function LimitConcurrentOperationsTo(limit As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo(System.Int32)
  id: LimitAttemptsForOperationTo(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: LimitAttemptsForOperationTo(Int32)
  nameWithType: ConnectionSettingsBuilder.LimitAttemptsForOperationTo(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo(System.Int32)
  type: Method
  source:
    id: LimitAttemptsForOperationTo
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 134
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nLimits the number of operation attempts.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder LimitAttemptsForOperationTo(int limit)
    parameters:
    - id: limit
      type: System.Int32
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function LimitAttemptsForOperationTo(limit As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo(System.Int32)
  id: LimitRetriesForOperationTo(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: LimitRetriesForOperationTo(Int32)
  nameWithType: ConnectionSettingsBuilder.LimitRetriesForOperationTo(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo(System.Int32)
  type: Method
  source:
    id: LimitRetriesForOperationTo
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 146
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nLimits the number of operation retries.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder LimitRetriesForOperationTo(int limit)
    parameters:
    - id: limit
      type: System.Int32
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function LimitRetriesForOperationTo(limit As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying
  id: KeepRetrying
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: KeepRetrying()
  nameWithType: ConnectionSettingsBuilder.KeepRetrying()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying()
  type: Method
  source:
    id: KeepRetrying
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 157
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAllows infinite operation retry attempts.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder KeepRetrying()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function KeepRetrying As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo(System.Int32)
  id: LimitReconnectionsTo(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: LimitReconnectionsTo(Int32)
  nameWithType: ConnectionSettingsBuilder.LimitReconnectionsTo(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo(System.Int32)
  type: Method
  source:
    id: LimitReconnectionsTo
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 167
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nLimits the number of reconnections this connection can try to make.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder LimitReconnectionsTo(int limit)
    parameters:
    - id: limit
      type: System.Int32
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function LimitReconnectionsTo(limit As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting
  id: KeepReconnecting
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: KeepReconnecting()
  nameWithType: ConnectionSettingsBuilder.KeepReconnecting()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting()
  type: Method
  source:
    id: KeepReconnecting
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 178
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAllows infinite reconnection attempts.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder KeepReconnecting()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function KeepReconnecting As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly
  id: PerformOnMasterOnly
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: PerformOnMasterOnly()
  nameWithType: ConnectionSettingsBuilder.PerformOnMasterOnly()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly()
  type: Method
  source:
    id: PerformOnMasterOnly
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 187
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRequires all write and read requests to be served only by master (cluster version only).\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder PerformOnMasterOnly()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function PerformOnMasterOnly As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode
  id: PerformOnAnyNode
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: PerformOnAnyNode()
  nameWithType: ConnectionSettingsBuilder.PerformOnAnyNode()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode()
  type: Method
  source:
    id: PerformOnAnyNode
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 196
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAllow for writes to be forwarded and read requests served locally if node is not master (cluster version only).\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder PerformOnAnyNode()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function PerformOnAnyNode As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo(System.TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo(System.TimeSpan)
  id: SetReconnectionDelayTo(System.TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetReconnectionDelayTo(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetReconnectionDelayTo(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo(System.TimeSpan)
  type: Method
  source:
    id: SetReconnectionDelayTo
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 206
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the delay between reconnection attempts.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetReconnectionDelayTo(TimeSpan reconnectionDelay)
    parameters:
    - id: reconnectionDelay
      type: System.TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetReconnectionDelayTo(reconnectionDelay As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo(System.TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo(System.TimeSpan)
  id: SetQueueTimeoutTo(System.TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetQueueTimeoutTo(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetQueueTimeoutTo(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo(System.TimeSpan)
  type: Method
  source:
    id: SetQueueTimeoutTo
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 216
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the maximum permitted time a request may be queued awaiting transmission; if exceeded an <xref href=\"EventStore.ClientAPI.Exceptions.OperationExpiredException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetQueueTimeoutTo(TimeSpan queueTimeout)
    parameters:
    - id: queueTimeout
      type: System.TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetQueueTimeoutTo(queueTimeout As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo(System.TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo(System.TimeSpan)
  id: SetOperationTimeoutTo(System.TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetOperationTimeoutTo(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetOperationTimeoutTo(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo(System.TimeSpan)
  type: Method
  source:
    id: SetOperationTimeoutTo
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 226
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the operation timeout duration.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetOperationTimeoutTo(TimeSpan operationTimeout)
    parameters:
    - id: operationTimeout
      type: System.TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetOperationTimeoutTo(operationTimeout As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo(System.TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo(System.TimeSpan)
  id: SetTimeoutCheckPeriodTo(System.TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetTimeoutCheckPeriodTo(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo(System.TimeSpan)
  type: Method
  source:
    id: SetTimeoutCheckPeriodTo
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 236
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets how often timeouts should be checked for.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetTimeoutCheckPeriodTo(TimeSpan timeoutCheckPeriod)
    parameters:
    - id: timeoutCheckPeriod
      type: System.TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetTimeoutCheckPeriodTo(timeoutCheckPeriod As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials(EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials(EventStore.ClientAPI.SystemData.UserCredentials)
  id: SetDefaultUserCredentials(EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetDefaultUserCredentials(UserCredentials)
  nameWithType: ConnectionSettingsBuilder.SetDefaultUserCredentials(UserCredentials)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials(EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: SetDefaultUserCredentials
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 247
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the default <xref href=\"EventStore.ClientAPI.SystemData.UserCredentials\" data-throw-if-not-resolved=\"false\"></xref> used for this connection.\nIf user credentials are not given for an operation, these credentials will be used.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetDefaultUserCredentials(UserCredentials userCredentials)
    parameters:
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetDefaultUserCredentials(userCredentials As UserCredentials) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection(System.String,System.Boolean)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection(System.String,System.Boolean)
  id: UseSslConnection(System.String,System.Boolean)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: UseSslConnection(String, Boolean)
  nameWithType: ConnectionSettingsBuilder.UseSslConnection(String, Boolean)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection(System.String, System.Boolean)
  type: Method
  source:
    id: UseSslConnection
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 258
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nUses a SSL connection over TCP. This should generally be used with authentication.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder UseSslConnection(string targetHost, bool validateServer)
    parameters:
    - id: targetHost
      type: System.String
      description: HostName of server certificate.
    - id: validateServer
      type: System.Boolean
      description: Whether to accept connection from server with not trusted certificate.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function UseSslConnection(targetHost As String, validateServer As Boolean) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse
  id: FailOnNoServerResponse
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: FailOnNoServerResponse()
  nameWithType: ConnectionSettingsBuilder.FailOnNoServerResponse()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse()
  type: Method
  source:
    id: FailOnNoServerResponse
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 270
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nMarks that no response from server should cause an error on the request.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder FailOnNoServerResponse()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function FailOnNoServerResponse As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval(System.TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval(System.TimeSpan)
  id: SetHeartbeatInterval(System.TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetHeartbeatInterval(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetHeartbeatInterval(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval(System.TimeSpan)
  type: Method
  source:
    id: SetHeartbeatInterval
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 280
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets how often heartbeats should be expected on the connection (lower values detect broken sockets faster).\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetHeartbeatInterval(TimeSpan interval)
    parameters:
    - id: interval
      type: System.TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetHeartbeatInterval(interval As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout(System.TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout(System.TimeSpan)
  id: SetHeartbeatTimeout(System.TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetHeartbeatTimeout(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetHeartbeatTimeout(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout(System.TimeSpan)
  type: Method
  source:
    id: SetHeartbeatTimeout
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 290
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets how long to wait without heartbeats before determining a connection to be dead (must be longer than heartbeat interval).\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetHeartbeatTimeout(TimeSpan timeout)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function SetHeartbeatTimeout(timeout As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf(System.TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf(System.TimeSpan)
  id: WithConnectionTimeoutOf(System.TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: WithConnectionTimeoutOf(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.WithConnectionTimeoutOf(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf(System.TimeSpan)
  type: Method
  source:
    id: WithConnectionTimeoutOf
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 300
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the timeout for attempting to connect to a server before aborting and attempting a reconnect.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder WithConnectionTimeoutOf(TimeSpan timeout)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: ''
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: ''
    content.vb: Public Function WithConnectionTimeoutOf(timeout As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns(System.String)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns(System.String)
  id: SetClusterDns(System.String)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetClusterDns(String)
  nameWithType: ConnectionSettingsBuilder.SetClusterDns(String)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns(System.String)
  type: Method
  source:
    id: SetClusterDns
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 311
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the DNS name under which cluster nodes are listed.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetClusterDns(string clusterDns)
    parameters:
    - id: clusterDns
      type: System.String
      description: The DNS name under which cluster nodes are listed.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.DnsClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function SetClusterDns(clusterDns As String) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If <code data-dev-comment-type="paramref" class="paramref">clusterDns</code> is null or empty.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts(System.Int32)
  id: SetMaxDiscoverAttempts(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetMaxDiscoverAttempts(Int32)
  nameWithType: ConnectionSettingsBuilder.SetMaxDiscoverAttempts(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts(System.Int32)
  type: Method
  source:
    id: SetMaxDiscoverAttempts
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 323
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the maximum number of attempts for discovery.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetMaxDiscoverAttempts(int maxDiscoverAttempts)
    parameters:
    - id: maxDiscoverAttempts
      type: System.Int32
      description: The maximum number of attempts for DNS discovery.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.DnsClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function SetMaxDiscoverAttempts(maxDiscoverAttempts As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: If <code data-dev-comment-type="paramref" class="paramref">maxDiscoverAttempts</code> is less than or equal to 0.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout(System.TimeSpan)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout(System.TimeSpan)
  id: SetGossipTimeout(System.TimeSpan)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetGossipTimeout(TimeSpan)
  nameWithType: ConnectionSettingsBuilder.SetGossipTimeout(TimeSpan)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout(System.TimeSpan)
  type: Method
  source:
    id: SetGossipTimeout
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 337
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the period after which gossip times out if none is received.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetGossipTimeout(TimeSpan timeout)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The period after which gossip times out if none is received.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.DnsClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function SetGossipTimeout(timeout As TimeSpan) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode
  id: PreferRandomNode
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: PreferRandomNode()
  nameWithType: ConnectionSettingsBuilder.PreferRandomNode()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode()
  type: Method
  source:
    id: PreferRandomNode
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 346
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWhether to randomly choose a node that&apos;s alive from the known nodes.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder PreferRandomNode()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.DnsClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function PreferRandomNode As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode
  id: PreferSlaveNode
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: PreferSlaveNode()
  nameWithType: ConnectionSettingsBuilder.PreferSlaveNode()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode()
  type: Method
  source:
    id: PreferSlaveNode
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 355
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWhether to prioritize choosing a slave node that&apos;s alive from the known nodes.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder PreferSlaveNode()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.DnsClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function PreferSlaveNode As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferReadOnlyReplica
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.PreferReadOnlyReplica
  id: PreferReadOnlyReplica
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: PreferReadOnlyReplica()
  nameWithType: ConnectionSettingsBuilder.PreferReadOnlyReplica()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferReadOnlyReplica()
  type: Method
  source:
    id: PreferReadOnlyReplica
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 364
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWhether to prioritize choosing a read only replica that&apos;s alive from the known nodes. \n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder PreferReadOnlyReplica()
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.DnsClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function PreferReadOnlyReplica As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferReadOnlyReplica*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort(System.Int32)
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort(System.Int32)
  id: SetClusterGossipPort(System.Int32)
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetClusterGossipPort(Int32)
  nameWithType: ConnectionSettingsBuilder.SetClusterGossipPort(Int32)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort(System.Int32)
  type: Method
  source:
    id: SetClusterGossipPort
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 384
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the well-known port on which the cluster gossip is taking place.\n\nIf you are using the commercial edition of Event Store HA, with Manager nodes in\nplace, this should be the port number of the External HTTP port on which the\nmanagers are running.\n\nIf you are using the open source edition of Event Store HA, this should be the\nExternal HTTP port that the nodes are running on. If you cannot use a well-known\nport for this across all nodes, you can instead use gossip seed discovery and set\nthe <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> of some seed nodes instead.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetClusterGossipPort(int clusterGossipPort)
    parameters:
    - id: clusterGossipPort
      type: System.Int32
      description: The cluster gossip port.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.DnsClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function SetClusterGossipPort(clusterGossipPort As Integer) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(System.Net.EndPoint[])
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(System.Net.EndPoint[])
  id: SetGossipSeedEndPoints(System.Net.EndPoint[])
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetGossipSeedEndPoints(EndPoint[])
  nameWithType: ConnectionSettingsBuilder.SetGossipSeedEndPoints(EndPoint[])
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(System.Net.EndPoint[])
  type: Method
  source:
    id: SetGossipSeedEndPoints
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 404
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets gossip seed endpoints for the client.\n\n<div class=\"NOTE\"><h5>note</h5><p>\nThis should be the external HTTP endpoint of the server, as it is required\nfor the client to exchange gossip with the server. The standard port is 2113.\n</p></div>\n\nIf the server requires a specific Host header to be sent as part of the gossip\nrequest, use the overload of this method taking <xref href=\"EventStore.ClientAPI.GossipSeed\" data-throw-if-not-resolved=\"false\"></xref> instead.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetGossipSeedEndPoints(params EndPoint[] gossipSeeds)
    parameters:
    - id: gossipSeeds
      type: System.Net.EndPoint[]
      description: <xref href="System.Net.EndPoint" data-throw-if-not-resolved="false"></xref>s representing the endpoints of nodes from which to seed gossip.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.ClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function SetGossipSeedEndPoints(ParamArray gossipSeeds As EndPoint()) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If no gossip seeds are specified.
  nameWithType.vb: ConnectionSettingsBuilder.SetGossipSeedEndPoints(EndPoint())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(System.Net.EndPoint())
  name.vb: SetGossipSeedEndPoints(EndPoint())
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(System.Boolean,System.Net.EndPoint[])
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(System.Boolean,System.Net.EndPoint[])
  id: SetGossipSeedEndPoints(System.Boolean,System.Net.EndPoint[])
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetGossipSeedEndPoints(Boolean, EndPoint[])
  nameWithType: ConnectionSettingsBuilder.SetGossipSeedEndPoints(Boolean, EndPoint[])
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(System.Boolean, System.Net.EndPoint[])
  type: Method
  source:
    id: SetGossipSeedEndPoints
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 423
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets gossip seed endpoints for the client.\n\n<div class=\"NOTE\"><h5>note</h5><p>\nThis should be the external HTTP endpoint of the server, as it is required\nfor the client to exchange gossip with the server. The standard port is 2113.\n</p></div>\n\nIf the server requires a specific Host header to be sent as part of the gossip\nrequest, use the overload of this method taking <xref href=\"EventStore.ClientAPI.GossipSeed\" data-throw-if-not-resolved=\"false\"></xref> instead.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetGossipSeedEndPoints(bool seedOverTls, params EndPoint[] gossipSeeds)
    parameters:
    - id: seedOverTls
      type: System.Boolean
      description: Specifies that eventstore should use https when connecting to gossip
    - id: gossipSeeds
      type: System.Net.EndPoint[]
      description: <xref href="System.Net.EndPoint" data-throw-if-not-resolved="false"></xref>s representing the endpoints of nodes from which to seed gossip.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.ClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function SetGossipSeedEndPoints(seedOverTls As Boolean, ParamArray gossipSeeds As EndPoint()) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If no gossip seeds are specified.
  nameWithType.vb: ConnectionSettingsBuilder.SetGossipSeedEndPoints(Boolean, EndPoint())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(System.Boolean, System.Net.EndPoint())
  name.vb: SetGossipSeedEndPoints(Boolean, EndPoint())
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed[])
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed[])
  id: SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed[])
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: SetGossipSeedEndPoints(GossipSeed[])
  nameWithType: ConnectionSettingsBuilder.SetGossipSeedEndPoints(GossipSeed[])
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed[])
  type: Method
  source:
    id: SetGossipSeedEndPoints
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 438
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets gossip seed endpoints for the client.\n"
  example: []
  syntax:
    content: public ConnectionSettingsBuilder SetGossipSeedEndPoints(params GossipSeed[] gossipSeeds)
    parameters:
    - id: gossipSeeds
      type: EventStore.ClientAPI.GossipSeed[]
      description: <xref href="EventStore.ClientAPI.GossipSeed" data-throw-if-not-resolved="false"></xref>s representing the endpoints of nodes from which to seed gossip.
    return:
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: A <xref href="EventStore.ClientAPI.ClusterSettingsBuilder" data-throw-if-not-resolved="false"></xref> for further configuration.
    content.vb: Public Function SetGossipSeedEndPoints(ParamArray gossipSeeds As GossipSeed()) As ConnectionSettingsBuilder
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If no gossip seeds are specified.
  nameWithType.vb: ConnectionSettingsBuilder.SetGossipSeedEndPoints(GossipSeed())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed())
  name.vb: SetGossipSeedEndPoints(GossipSeed())
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit(EventStore.ClientAPI.ConnectionSettingsBuilder)~EventStore.ClientAPI.ConnectionSettings
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit(EventStore.ClientAPI.ConnectionSettingsBuilder)~EventStore.ClientAPI.ConnectionSettings
  id: op_Implicit(EventStore.ClientAPI.ConnectionSettingsBuilder)~EventStore.ClientAPI.ConnectionSettings
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: Implicit(ConnectionSettingsBuilder to ConnectionSettings)
  nameWithType: ConnectionSettingsBuilder.Implicit(ConnectionSettingsBuilder to ConnectionSettings)
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.Implicit(EventStore.ClientAPI.ConnectionSettingsBuilder to EventStore.ClientAPI.ConnectionSettings)
  type: Operator
  source:
    id: op_Implicit
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 452
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConvert the mutable <xref href=\"EventStore.ClientAPI.ConnectionSettingsBuilder\" data-throw-if-not-resolved=\"false\"></xref> object to an immutable\n<xref href=\"EventStore.ClientAPI.ConnectionSettings\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: public static implicit operator ConnectionSettings(ConnectionSettingsBuilder builder)
    parameters:
    - id: builder
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: The <xref href="EventStore.ClientAPI.ConnectionSettingsBuilder" data-throw-if-not-resolved="false"></xref> to convert.
    return:
      type: EventStore.ClientAPI.ConnectionSettings
      description: An immutable <xref href="EventStore.ClientAPI.ConnectionSettings" data-throw-if-not-resolved="false"></xref> object with the values specified by the builder.
    content.vb: Public Shared Widening Operator CType(builder As ConnectionSettingsBuilder) As ConnectionSettings
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit*
  nameWithType.vb: ConnectionSettingsBuilder.Widening(ConnectionSettingsBuilder to ConnectionSettings)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.ClientAPI.ConnectionSettingsBuilder.Widening(EventStore.ClientAPI.ConnectionSettingsBuilder to EventStore.ClientAPI.ConnectionSettings)
  name.vb: Widening(ConnectionSettingsBuilder to ConnectionSettings)
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.Build
  commentId: M:EventStore.ClientAPI.ConnectionSettingsBuilder.Build
  id: Build
  parent: EventStore.ClientAPI.ConnectionSettingsBuilder
  langs:
  - csharp
  - vb
  name: Build()
  nameWithType: ConnectionSettingsBuilder.Build()
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.Build()
  type: Method
  source:
    id: Build
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
    startLine: 460
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConvert the mutable <xref href=\"EventStore.ClientAPI.ConnectionSettingsBuilder\" data-throw-if-not-resolved=\"false\"></xref> object to an immutable\n<xref href=\"EventStore.ClientAPI.ConnectionSettings\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: public ConnectionSettings Build()
    return:
      type: EventStore.ClientAPI.ConnectionSettings
    content.vb: Public Function Build As ConnectionSettings
  overload: EventStore.ClientAPI.ConnectionSettingsBuilder.Build*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.ClientAPI.Transport.Http.IHttpClient
  commentId: T:EventStore.ClientAPI.Transport.Http.IHttpClient
  parent: EventStore.ClientAPI.Transport.Http
  name: IHttpClient
  nameWithType: IHttpClient
  fullName: EventStore.ClientAPI.Transport.Http.IHttpClient
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomHttpClient*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomHttpClient
  name: UseCustomHttpClient
  nameWithType: ConnectionSettingsBuilder.UseCustomHttpClient
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomHttpClient
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder
  commentId: T:EventStore.ClientAPI.ConnectionSettingsBuilder
  parent: EventStore.ClientAPI
  name: ConnectionSettingsBuilder
  nameWithType: ConnectionSettingsBuilder
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder
- uid: EventStore.ClientAPI.Transport.Http
  commentId: N:EventStore.ClientAPI.Transport.Http
  name: EventStore.ClientAPI.Transport.Http
  nameWithType: EventStore.ClientAPI.Transport.Http
  fullName: EventStore.ClientAPI.Transport.Http
- uid: EventStore.ClientAPI.ILogger
  commentId: T:EventStore.ClientAPI.ILogger
  parent: EventStore.ClientAPI
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.ClientAPI.ILogger
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger
  name: UseCustomLogger
  nameWithType: ConnectionSettingsBuilder.UseCustomLogger
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger
  name: UseConsoleLogger
  nameWithType: ConnectionSettingsBuilder.UseConsoleLogger
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger
- uid: System.Diagnostics.Debug
  commentId: T:System.Diagnostics.Debug
  isExternal: true
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger
  name: UseDebugLogger
  nameWithType: ConnectionSettingsBuilder.UseDebugLogger
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger
  name: UseFileLogger
  nameWithType: ConnectionSettingsBuilder.UseFileLogger
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.ClientAPI.EventStoreConnection
  commentId: T:EventStore.ClientAPI.EventStoreConnection
  name: EventStoreConnection
  nameWithType: EventStoreConnection
  fullName: EventStore.ClientAPI.EventStoreConnection
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging
  name: EnableVerboseLogging
  nameWithType: ConnectionSettingsBuilder.EnableVerboseLogging
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo
  name: LimitOperationsQueueTo
  nameWithType: ConnectionSettingsBuilder.LimitOperationsQueueTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo
  name: LimitConcurrentOperationsTo
  nameWithType: ConnectionSettingsBuilder.LimitConcurrentOperationsTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo
  name: LimitAttemptsForOperationTo
  nameWithType: ConnectionSettingsBuilder.LimitAttemptsForOperationTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo
  name: LimitRetriesForOperationTo
  nameWithType: ConnectionSettingsBuilder.LimitRetriesForOperationTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying
  name: KeepRetrying
  nameWithType: ConnectionSettingsBuilder.KeepRetrying
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo
  name: LimitReconnectionsTo
  nameWithType: ConnectionSettingsBuilder.LimitReconnectionsTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting
  name: KeepReconnecting
  nameWithType: ConnectionSettingsBuilder.KeepReconnecting
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly
  name: PerformOnMasterOnly
  nameWithType: ConnectionSettingsBuilder.PerformOnMasterOnly
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode
  name: PerformOnAnyNode
  nameWithType: ConnectionSettingsBuilder.PerformOnAnyNode
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo
  name: SetReconnectionDelayTo
  nameWithType: ConnectionSettingsBuilder.SetReconnectionDelayTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: EventStore.ClientAPI.Exceptions.OperationExpiredException
  commentId: T:EventStore.ClientAPI.Exceptions.OperationExpiredException
  name: OperationExpiredException
  nameWithType: OperationExpiredException
  fullName: EventStore.ClientAPI.Exceptions.OperationExpiredException
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo
  name: SetQueueTimeoutTo
  nameWithType: ConnectionSettingsBuilder.SetQueueTimeoutTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetQueueTimeoutTo
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo
  name: SetOperationTimeoutTo
  nameWithType: ConnectionSettingsBuilder.SetOperationTimeoutTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo
  name: SetTimeoutCheckPeriodTo
  nameWithType: ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo
- uid: EventStore.ClientAPI.SystemData.UserCredentials
  commentId: T:EventStore.ClientAPI.SystemData.UserCredentials
  parent: EventStore.ClientAPI.SystemData
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.ClientAPI.SystemData.UserCredentials
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials
  name: SetDefaultUserCredentials
  nameWithType: ConnectionSettingsBuilder.SetDefaultUserCredentials
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials
- uid: EventStore.ClientAPI.SystemData
  commentId: N:EventStore.ClientAPI.SystemData
  name: EventStore.ClientAPI.SystemData
  nameWithType: EventStore.ClientAPI.SystemData
  fullName: EventStore.ClientAPI.SystemData
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection
  name: UseSslConnection
  nameWithType: ConnectionSettingsBuilder.UseSslConnection
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse
  name: FailOnNoServerResponse
  nameWithType: ConnectionSettingsBuilder.FailOnNoServerResponse
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval
  name: SetHeartbeatInterval
  nameWithType: ConnectionSettingsBuilder.SetHeartbeatInterval
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout
  name: SetHeartbeatTimeout
  nameWithType: ConnectionSettingsBuilder.SetHeartbeatTimeout
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf
  name: WithConnectionTimeoutOf
  nameWithType: ConnectionSettingsBuilder.WithConnectionTimeoutOf
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf
- uid: EventStore.ClientAPI.DnsClusterSettingsBuilder
  commentId: T:EventStore.ClientAPI.DnsClusterSettingsBuilder
  parent: EventStore.ClientAPI
  name: DnsClusterSettingsBuilder
  nameWithType: DnsClusterSettingsBuilder
  fullName: EventStore.ClientAPI.DnsClusterSettingsBuilder
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns
  name: SetClusterDns
  nameWithType: ConnectionSettingsBuilder.SetClusterDns
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts
  name: SetMaxDiscoverAttempts
  nameWithType: ConnectionSettingsBuilder.SetMaxDiscoverAttempts
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout
  name: SetGossipTimeout
  nameWithType: ConnectionSettingsBuilder.SetGossipTimeout
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode
  name: PreferRandomNode
  nameWithType: ConnectionSettingsBuilder.PreferRandomNode
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferRandomNode
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode
  name: PreferSlaveNode
  nameWithType: ConnectionSettingsBuilder.PreferSlaveNode
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferSlaveNode
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferReadOnlyReplica*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.PreferReadOnlyReplica
  name: PreferReadOnlyReplica
  nameWithType: ConnectionSettingsBuilder.PreferReadOnlyReplica
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.PreferReadOnlyReplica
- uid: System.Net.IPEndPoint
  commentId: T:System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort
  name: SetClusterGossipPort
  nameWithType: ConnectionSettingsBuilder.SetClusterGossipPort
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort
- uid: System.Net
  commentId: N:System.Net
  isExternal: true
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: EventStore.ClientAPI.GossipSeed
  commentId: T:EventStore.ClientAPI.GossipSeed
  name: GossipSeed
  nameWithType: GossipSeed
  fullName: EventStore.ClientAPI.GossipSeed
- uid: System.Net.EndPoint
  commentId: T:System.Net.EndPoint
  parent: System.Net
  isExternal: true
  name: EndPoint
  nameWithType: EndPoint
  fullName: System.Net.EndPoint
- uid: EventStore.ClientAPI.ClusterSettingsBuilder
  commentId: T:EventStore.ClientAPI.ClusterSettingsBuilder
  parent: EventStore.ClientAPI
  name: ClusterSettingsBuilder
  nameWithType: ClusterSettingsBuilder
  fullName: EventStore.ClientAPI.ClusterSettingsBuilder
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints
  name: SetGossipSeedEndPoints
  nameWithType: ConnectionSettingsBuilder.SetGossipSeedEndPoints
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints
- uid: System.Net.EndPoint[]
  isExternal: true
  name: EndPoint[]
  nameWithType: EndPoint[]
  fullName: System.Net.EndPoint[]
  nameWithType.vb: EndPoint()
  fullName.vb: System.Net.EndPoint()
  name.vb: EndPoint()
  spec.csharp:
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.ClientAPI.GossipSeed[]
  isExternal: true
  name: GossipSeed[]
  nameWithType: GossipSeed[]
  fullName: EventStore.ClientAPI.GossipSeed[]
  nameWithType.vb: GossipSeed()
  fullName.vb: EventStore.ClientAPI.GossipSeed()
  name.vb: GossipSeed()
  spec.csharp:
  - uid: EventStore.ClientAPI.GossipSeed
    name: GossipSeed
    nameWithType: GossipSeed
    fullName: EventStore.ClientAPI.GossipSeed
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.ClientAPI.GossipSeed
    name: GossipSeed
    nameWithType: GossipSeed
    fullName: EventStore.ClientAPI.GossipSeed
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.ClientAPI.ConnectionSettings
  commentId: T:EventStore.ClientAPI.ConnectionSettings
  parent: EventStore.ClientAPI
  name: ConnectionSettings
  nameWithType: ConnectionSettings
  fullName: EventStore.ClientAPI.ConnectionSettings
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit
  name: Implicit
  nameWithType: ConnectionSettingsBuilder.Implicit
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.Implicit
  nameWithType.vb: ConnectionSettingsBuilder.Widening
  fullName.vb: EventStore.ClientAPI.ConnectionSettingsBuilder.Widening
  name.vb: Widening
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder.Build*
  commentId: Overload:EventStore.ClientAPI.ConnectionSettingsBuilder.Build
  name: Build
  nameWithType: ConnectionSettingsBuilder.Build
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder.Build

### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.EventStoreAllCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreAllCatchUpSubscription
  id: EventStoreAllCatchUpSubscription
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.EventStoreAllCatchUpSubscription.LastProcessedPosition
  - EventStore.ClientAPI.EventStoreAllCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  - EventStore.ClientAPI.EventStoreAllCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  langs:
  - csharp
  - vb
  name: EventStoreAllCatchUpSubscription
  nameWithType: EventStoreAllCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreAllCatchUpSubscription
  type: Class
  source:
    id: EventStoreAllCatchUpSubscription
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 379
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nA catch-up subscription to all events in the Event Store.\n"
  example: []
  syntax:
    content: 'public class EventStoreAllCatchUpSubscription : EventStoreCatchUpSubscription'
    content.vb: >-
      Public Class EventStoreAllCatchUpSubscription
          Inherits EventStoreCatchUpSubscription
  inheritance:
  - System.Object
  - EventStore.ClientAPI.EventStoreCatchUpSubscription
  inheritedMembers:
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.LastProcessedPosition
  commentId: P:EventStore.ClientAPI.EventStoreAllCatchUpSubscription.LastProcessedPosition
  id: LastProcessedPosition
  parent: EventStore.ClientAPI.EventStoreAllCatchUpSubscription
  langs:
  - csharp
  - vb
  name: LastProcessedPosition
  nameWithType: EventStoreAllCatchUpSubscription.LastProcessedPosition
  fullName: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.LastProcessedPosition
  type: Property
  source:
    id: LastProcessedPosition
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 383
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe last position processed on the subscription.\n"
  example: []
  syntax:
    content: public Position LastProcessedPosition { get; }
    parameters: []
    return:
      type: EventStore.ClientAPI.Position
    content.vb: Public ReadOnly Property LastProcessedPosition As Position
  overload: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.LastProcessedPosition*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  commentId: M:EventStore.ClientAPI.EventStoreAllCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  id: ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  parent: EventStore.ClientAPI.EventStoreAllCatchUpSubscription
  langs:
  - csharp
  - vb
  name: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  nameWithType: EventStoreAllCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  fullName: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable<System.Int64>, System.Nullable<System.Int64>)
  type: Method
  source:
    id: ReadEventsTillAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 421
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRead events until the given position async.\n"
  example: []
  syntax:
    content: protected override Task ReadEventsTillAsync(IEventStoreConnection connection, bool resolveLinkTos, UserCredentials userCredentials, long? lastCommitPosition, long? lastEventNumber)
    parameters:
    - id: connection
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The connection.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve Link events.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials for the operation.
    - id: lastCommitPosition
      type: System.Nullable{System.Int64}
      description: The commit position to read until.
    - id: lastEventNumber
      type: System.Nullable{System.Int64}
      description: The event number to read until.
    return:
      type: Task
      description: ''
    content.vb: Protected Overrides Function ReadEventsTillAsync(connection As IEventStoreConnection, resolveLinkTos As Boolean, userCredentials As UserCredentials, lastCommitPosition As Long?, lastEventNumber As Long?) As Task
  overridden: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  overload: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.ReadEventsTillAsync*
  nameWithType.vb: EventStoreAllCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable(Of System.Int64), System.Nullable(Of System.Int64))
  name.vb: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
- uid: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  commentId: M:EventStore.ClientAPI.EventStoreAllCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  id: TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  parent: EventStore.ClientAPI.EventStoreAllCatchUpSubscription
  langs:
  - csharp
  - vb
  name: TryProcessAsync(ResolvedEvent)
  nameWithType: EventStoreAllCatchUpSubscription.TryProcessAsync(ResolvedEvent)
  fullName: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  type: Method
  source:
    id: TryProcessAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 473
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nTry to process a single <xref href=\"EventStore.ClientAPI.ResolvedEvent\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected override Task TryProcessAsync(ResolvedEvent e)
    parameters:
    - id: e
      type: EventStore.ClientAPI.ResolvedEvent
      description: The <xref href="EventStore.ClientAPI.ResolvedEvent" data-throw-if-not-resolved="false"></xref> to process.
    return:
      type: Task
    content.vb: Protected Overrides Function TryProcessAsync(e As ResolvedEvent) As Task
  overridden: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  overload: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.TryProcessAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreCatchUpSubscription
  parent: EventStore.ClientAPI
  name: EventStoreCatchUpSubscription
  nameWithType: EventStoreCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  commentId: P:EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: IsSubscribedToAll
  nameWithType: EventStoreCatchUpSubscription.IsSubscribedToAll
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  commentId: P:EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: StreamId
  nameWithType: EventStoreCatchUpSubscription.StreamId
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  commentId: P:EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: SubscriptionName
  nameWithType: EventStoreCatchUpSubscription.SubscriptionName
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: Log
  nameWithType: EventStoreCatchUpSubscription.Log
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: ReadBatchSize
  nameWithType: EventStoreCatchUpSubscription.ReadBatchSize
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: MaxPushQueueSize
  nameWithType: EventStoreCatchUpSubscription.MaxPushQueueSize
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: EventAppeared
  nameWithType: EventStoreCatchUpSubscription.EventAppeared
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: Verbose
  nameWithType: EventStoreCatchUpSubscription.Verbose
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: ShouldStop
  nameWithType: EventStoreCatchUpSubscription.ShouldStop
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  isExternal: true
  name: Stop(TimeSpan)
  nameWithType: EventStoreCatchUpSubscription.Stop(TimeSpan)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
    name: Stop
    nameWithType: EventStoreCatchUpSubscription.Stop
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
    name: Stop
    nameWithType: EventStoreCatchUpSubscription.Stop
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: Stop()
  nameWithType: EventStoreCatchUpSubscription.Stop()
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop()
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
    name: Stop
    nameWithType: EventStoreCatchUpSubscription.Stop
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
    name: Stop
    nameWithType: EventStoreCatchUpSubscription.Stop
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.LastProcessedPosition*
  commentId: Overload:EventStore.ClientAPI.EventStoreAllCatchUpSubscription.LastProcessedPosition
  name: LastProcessedPosition
  nameWithType: EventStoreAllCatchUpSubscription.LastProcessedPosition
  fullName: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.LastProcessedPosition
- uid: EventStore.ClientAPI.Position
  commentId: T:EventStore.ClientAPI.Position
  parent: EventStore.ClientAPI
  name: Position
  nameWithType: Position
  fullName: EventStore.ClientAPI.Position
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  isExternal: true
  name: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  nameWithType: EventStoreCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable<System.Int64>, System.Nullable<System.Int64>)
  nameWithType.vb: EventStoreCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
  fullName.vb: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable(Of System.Int64), System.Nullable(Of System.Int64))
  name.vb: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
    name: ReadEventsTillAsync
    nameWithType: EventStoreCatchUpSubscription.ReadEventsTillAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
    name: ReadEventsTillAsync
    nameWithType: EventStoreCatchUpSubscription.ReadEventsTillAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.ReadEventsTillAsync*
  commentId: Overload:EventStore.ClientAPI.EventStoreAllCatchUpSubscription.ReadEventsTillAsync
  name: ReadEventsTillAsync
  nameWithType: EventStoreAllCatchUpSubscription.ReadEventsTillAsync
  fullName: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.ReadEventsTillAsync
- uid: EventStore.ClientAPI.IEventStoreConnection
  commentId: T:EventStore.ClientAPI.IEventStoreConnection
  parent: EventStore.ClientAPI
  name: IEventStoreConnection
  nameWithType: IEventStoreConnection
  fullName: EventStore.ClientAPI.IEventStoreConnection
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.ClientAPI.SystemData.UserCredentials
  commentId: T:EventStore.ClientAPI.SystemData.UserCredentials
  parent: EventStore.ClientAPI.SystemData
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.ClientAPI.SystemData.UserCredentials
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: EventStore.ClientAPI.SystemData
  commentId: N:EventStore.ClientAPI.SystemData
  name: EventStore.ClientAPI.SystemData
  nameWithType: EventStore.ClientAPI.SystemData
  fullName: EventStore.ClientAPI.SystemData
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ResolvedEvent
  commentId: T:EventStore.ClientAPI.ResolvedEvent
  parent: EventStore.ClientAPI
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.ClientAPI.ResolvedEvent
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: TryProcessAsync(ResolvedEvent)
  nameWithType: EventStoreCatchUpSubscription.TryProcessAsync(ResolvedEvent)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
    name: TryProcessAsync
    nameWithType: EventStoreCatchUpSubscription.TryProcessAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
    name: TryProcessAsync
    nameWithType: EventStoreCatchUpSubscription.TryProcessAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.TryProcessAsync*
  commentId: Overload:EventStore.ClientAPI.EventStoreAllCatchUpSubscription.TryProcessAsync
  name: TryProcessAsync
  nameWithType: EventStoreAllCatchUpSubscription.TryProcessAsync
  fullName: EventStore.ClientAPI.EventStoreAllCatchUpSubscription.TryProcessAsync

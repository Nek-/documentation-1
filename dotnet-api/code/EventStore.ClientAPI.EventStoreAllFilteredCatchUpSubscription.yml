### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription
  id: EventStoreAllFilteredCatchUpSubscription
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position)
  - EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  - EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.SubscribeToStreamAsync
  - EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  langs:
  - csharp
  - vb
  name: EventStoreAllFilteredCatchUpSubscription
  nameWithType: EventStoreAllFilteredCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: EventStoreAllFilteredCatchUpSubscription
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs
    startLine: 13
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nA catch-up subscription to all events in the Event Store with an applied filter.\n"
  example: []
  syntax:
    content: 'public class EventStoreAllFilteredCatchUpSubscription : EventStoreCatchUpSubscription'
    content.vb: >-
      Public Class EventStoreAllFilteredCatchUpSubscription

          Inherits EventStoreCatchUpSubscription
  inheritance:
  - System.Object
  - EventStore.ClientAPI.EventStoreCatchUpSubscription
  inheritedMembers:
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Connection
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ResolveLinkTos
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.UserCredentials
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Subscription
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.AllowProcessing
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(System.TimeSpan)
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent)
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception)
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(EventStore.ClientAPI.SubscriptionDropReason,System.Exception)
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction(System.Func{System.Threading.Tasks.Task})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  commentId: M:EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  id: ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  parent: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription
  langs:
  - csharp
  - vb
  name: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  nameWithType: EventStoreAllFilteredCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  fullName: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable<System.Int64>, System.Nullable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ReadEventsTillAsync
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs
    startLine: 42
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  example: []
  syntax:
    content: protected override Task<Position> ReadEventsTillAsync(IEventStoreConnection connection, bool resolveLinkTos, UserCredentials userCredentials, long? lastCommitPosition, long? lastEventNumber)
    parameters:
    - id: connection
      type: EventStore.ClientAPI.IEventStoreConnection
    - id: resolveLinkTos
      type: System.Boolean
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
    - id: lastCommitPosition
      type: System.Nullable{System.Int64}
    - id: lastEventNumber
      type: System.Nullable{System.Int64}
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.Position}
    content.vb: Protected Overrides Function ReadEventsTillAsync(connection As IEventStoreConnection, resolveLinkTos As Boolean, userCredentials As UserCredentials, lastCommitPosition As Long?, lastEventNumber As Long?) As Task(Of Position)
  overridden: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  overload: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.ReadEventsTillAsync*
  nameWithType.vb: EventStoreAllFilteredCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable(Of System.Int64), System.Nullable(Of System.Int64))
  name.vb: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
- uid: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  commentId: M:EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  id: TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  parent: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription
  langs:
  - csharp
  - vb
  name: TryProcessAsync(ResolvedEvent)
  nameWithType: EventStoreAllFilteredCatchUpSubscription.TryProcessAsync(ResolvedEvent)
  fullName: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: TryProcessAsync
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs
    startLine: 119
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  example: []
  syntax:
    content: protected override Task TryProcessAsync(ResolvedEvent e)
    parameters:
    - id: e
      type: EventStore.ClientAPI.ResolvedEvent
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overrides Function TryProcessAsync(e As ResolvedEvent) As Task
  overridden: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  overload: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.TryProcessAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.SubscribeToStreamAsync
  commentId: M:EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.SubscribeToStreamAsync
  id: SubscribeToStreamAsync
  parent: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription
  langs:
  - csharp
  - vb
  name: SubscribeToStreamAsync()
  nameWithType: EventStoreAllFilteredCatchUpSubscription.SubscribeToStreamAsync()
  fullName: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.SubscribeToStreamAsync()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SubscribeToStreamAsync
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs
    startLine: 172
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  example: []
  syntax:
    content: protected override Task SubscribeToStreamAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overrides Function SubscribeToStreamAsync As Task
  overridden: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync
  overload: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.SubscribeToStreamAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position)
  commentId: M:EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position)
  id: LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position)
  parent: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription
  langs:
  - csharp
  - vb
  name: LiveProcessingStarted(EventStoreCatchUpSubscription, Position)
  nameWithType: EventStoreAllFilteredCatchUpSubscription.LiveProcessingStarted(EventStoreCatchUpSubscription, Position)
  fullName: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.Position)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: LiveProcessingStarted
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs
    startLine: 194
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  example: []
  syntax:
    content: protected override Task LiveProcessingStarted(EventStoreCatchUpSubscription eventStoreCatchUpSubscription, Position lastPosition)
    parameters:
    - id: eventStoreCatchUpSubscription
      type: EventStore.ClientAPI.EventStoreCatchUpSubscription
    - id: lastPosition
      type: EventStore.ClientAPI.Position
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overrides Function LiveProcessingStarted(eventStoreCatchUpSubscription As EventStoreCatchUpSubscription, lastPosition As Position) As Task
  overridden: EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position)
  overload: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.LiveProcessingStarted*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreCatchUpSubscription
  parent: EventStore.ClientAPI
  name: EventStoreCatchUpSubscription
  nameWithType: EventStoreCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  commentId: P:EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: IsSubscribedToAll
  nameWithType: EventStoreCatchUpSubscription.IsSubscribedToAll
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  commentId: P:EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: StreamId
  nameWithType: EventStoreCatchUpSubscription.StreamId
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  commentId: P:EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: SubscriptionName
  nameWithType: EventStoreCatchUpSubscription.SubscriptionName
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: Log
  nameWithType: EventStoreCatchUpSubscription.Log
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Connection
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Connection
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: Connection
  nameWithType: EventStoreCatchUpSubscription.Connection
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Connection
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ResolveLinkTos
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ResolveLinkTos
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: ResolveLinkTos
  nameWithType: EventStoreCatchUpSubscription.ResolveLinkTos
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ResolveLinkTos
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.UserCredentials
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.UserCredentials
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: UserCredentials
  nameWithType: EventStoreCatchUpSubscription.UserCredentials
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.UserCredentials
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: ReadBatchSize
  nameWithType: EventStoreCatchUpSubscription.ReadBatchSize
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: MaxPushQueueSize
  nameWithType: EventStoreCatchUpSubscription.MaxPushQueueSize
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: EventAppeared
  nameWithType: EventStoreCatchUpSubscription.EventAppeared
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: Verbose
  nameWithType: EventStoreCatchUpSubscription.Verbose
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Subscription
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Subscription
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: Subscription
  nameWithType: EventStoreCatchUpSubscription.Subscription
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Subscription
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.AllowProcessing
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.AllowProcessing
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: AllowProcessing
  nameWithType: EventStoreCatchUpSubscription.AllowProcessing
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.AllowProcessing
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: ShouldStop
  nameWithType: EventStoreCatchUpSubscription.ShouldStop
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(System.TimeSpan)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(System.TimeSpan)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  isExternal: true
  name: Stop(TimeSpan)
  nameWithType: EventStoreCatchUpSubscription.Stop(TimeSpan)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(System.TimeSpan)
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(System.TimeSpan)
    name: Stop
    nameWithType: EventStoreCatchUpSubscription.Stop
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(System.TimeSpan)
    name: Stop
    nameWithType: EventStoreCatchUpSubscription.Stop
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: Stop()
  nameWithType: EventStoreCatchUpSubscription.Stop()
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop()
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
    name: Stop
    nameWithType: EventStoreCatchUpSubscription.Stop
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
    name: Stop
    nameWithType: EventStoreCatchUpSubscription.Stop
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: ReadMissedHistoricEventsAsync()
  nameWithType: EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync()
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync()
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
    name: ReadMissedHistoricEventsAsync
    nameWithType: EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
    name: ReadMissedHistoricEventsAsync
    nameWithType: EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: EnqueuePushedEvent(EventStoreSubscription, ResolvedEvent)
  nameWithType: EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStoreSubscription, ResolvedEvent)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent)
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent)
    name: EnqueuePushedEvent
    nameWithType: EventStoreCatchUpSubscription.EnqueuePushedEvent
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent)
    name: EnqueuePushedEvent
    nameWithType: EventStoreCatchUpSubscription.EnqueuePushedEvent
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  isExternal: true
  name: ServerSubscriptionDropped(EventStoreSubscription, SubscriptionDropReason, Exception)
  nameWithType: EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStoreSubscription, SubscriptionDropReason, Exception)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception)
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception)
    name: ServerSubscriptionDropped
    nameWithType: EventStoreCatchUpSubscription.ServerSubscriptionDropped
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception)
    name: ServerSubscriptionDropped
    nameWithType: EventStoreCatchUpSubscription.ServerSubscriptionDropped
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(EventStore.ClientAPI.SubscriptionDropReason,System.Exception)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(EventStore.ClientAPI.SubscriptionDropReason,System.Exception)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  isExternal: true
  name: EnqueueSubscriptionDropNotification(SubscriptionDropReason, Exception)
  nameWithType: EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(SubscriptionDropReason, Exception)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(EventStore.ClientAPI.SubscriptionDropReason, System.Exception)
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(EventStore.ClientAPI.SubscriptionDropReason,System.Exception)
    name: EnqueueSubscriptionDropNotification
    nameWithType: EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(EventStore.ClientAPI.SubscriptionDropReason,System.Exception)
    name: EnqueueSubscriptionDropNotification
    nameWithType: EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: EnsureProcessingPushQueue()
  nameWithType: EventStoreCatchUpSubscription.EnsureProcessingPushQueue()
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue()
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue
    name: EnsureProcessingPushQueue
    nameWithType: EventStoreCatchUpSubscription.EnsureProcessingPushQueue
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue
    name: EnsureProcessingPushQueue
    nameWithType: EventStoreCatchUpSubscription.EnsureProcessingPushQueue
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction(System.Func{System.Threading.Tasks.Task})
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction(System.Func{System.Threading.Tasks.Task})
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  isExternal: true
  name: EnqueueAction(Func<Task>)
  nameWithType: EventStoreCatchUpSubscription.EnqueueAction(Func<Task>)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction(System.Func<System.Threading.Tasks.Task>)
  nameWithType.vb: EventStoreCatchUpSubscription.EnqueueAction(Func(Of Task))
  fullName.vb: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction(System.Func(Of System.Threading.Tasks.Task))
  name.vb: EnqueueAction(Func(Of Task))
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction(System.Func{System.Threading.Tasks.Task})
    name: EnqueueAction
    nameWithType: EventStoreCatchUpSubscription.EnqueueAction
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction(System.Func{System.Threading.Tasks.Task})
    name: EnqueueAction
    nameWithType: EventStoreCatchUpSubscription.EnqueueAction
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  isExternal: true
  name: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  nameWithType: EventStoreCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable<System.Int64>, System.Nullable<System.Int64>)
  nameWithType.vb: EventStoreCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
  fullName.vb: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable(Of System.Int64), System.Nullable(Of System.Int64))
  name.vb: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
    name: ReadEventsTillAsync
    nameWithType: EventStoreCatchUpSubscription.ReadEventsTillAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
    name: ReadEventsTillAsync
    nameWithType: EventStoreCatchUpSubscription.ReadEventsTillAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.ReadEventsTillAsync*
  commentId: Overload:EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.ReadEventsTillAsync
  name: ReadEventsTillAsync
  nameWithType: EventStoreAllFilteredCatchUpSubscription.ReadEventsTillAsync
  fullName: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.ReadEventsTillAsync
- uid: EventStore.ClientAPI.IEventStoreConnection
  commentId: T:EventStore.ClientAPI.IEventStoreConnection
  parent: EventStore.ClientAPI
  name: IEventStoreConnection
  nameWithType: IEventStoreConnection
  fullName: EventStore.ClientAPI.IEventStoreConnection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.ClientAPI.SystemData.UserCredentials
  commentId: T:EventStore.ClientAPI.SystemData.UserCredentials
  parent: EventStore.ClientAPI.SystemData
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.ClientAPI.SystemData.UserCredentials
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.Position}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.Position}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Position>
  nameWithType: Task<Position>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.Position>
  nameWithType.vb: Task(Of Position)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.Position)
  name.vb: Task(Of Position)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.SystemData
  commentId: N:EventStore.ClientAPI.SystemData
  name: EventStore.ClientAPI.SystemData
  nameWithType: EventStore.ClientAPI.SystemData
  fullName: EventStore.ClientAPI.SystemData
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: TryProcessAsync(ResolvedEvent)
  nameWithType: EventStoreCatchUpSubscription.TryProcessAsync(ResolvedEvent)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
    name: TryProcessAsync
    nameWithType: EventStoreCatchUpSubscription.TryProcessAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
    name: TryProcessAsync
    nameWithType: EventStoreCatchUpSubscription.TryProcessAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.TryProcessAsync*
  commentId: Overload:EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.TryProcessAsync
  name: TryProcessAsync
  nameWithType: EventStoreAllFilteredCatchUpSubscription.TryProcessAsync
  fullName: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.TryProcessAsync
- uid: EventStore.ClientAPI.ResolvedEvent
  commentId: T:EventStore.ClientAPI.ResolvedEvent
  parent: EventStore.ClientAPI
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.ClientAPI.ResolvedEvent
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: SubscribeToStreamAsync()
  nameWithType: EventStoreCatchUpSubscription.SubscribeToStreamAsync()
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync()
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync
    name: SubscribeToStreamAsync
    nameWithType: EventStoreCatchUpSubscription.SubscribeToStreamAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync
    name: SubscribeToStreamAsync
    nameWithType: EventStoreCatchUpSubscription.SubscribeToStreamAsync
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.SubscribeToStreamAsync*
  commentId: Overload:EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.SubscribeToStreamAsync
  name: SubscribeToStreamAsync
  nameWithType: EventStoreAllFilteredCatchUpSubscription.SubscribeToStreamAsync
  fullName: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.SubscribeToStreamAsync
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: LiveProcessingStarted(EventStoreCatchUpSubscription, Position)
  nameWithType: EventStoreCatchUpSubscription.LiveProcessingStarted(EventStoreCatchUpSubscription, Position)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.Position)
  spec.csharp:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position)
    name: LiveProcessingStarted
    nameWithType: EventStoreCatchUpSubscription.LiveProcessingStarted
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position)
    name: LiveProcessingStarted
    nameWithType: EventStoreCatchUpSubscription.LiveProcessingStarted
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.LiveProcessingStarted*
  commentId: Overload:EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.LiveProcessingStarted
  name: LiveProcessingStarted
  nameWithType: EventStoreAllFilteredCatchUpSubscription.LiveProcessingStarted
  fullName: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription.LiveProcessingStarted
- uid: EventStore.ClientAPI.Position
  commentId: T:EventStore.ClientAPI.Position
  parent: EventStore.ClientAPI
  name: Position
  nameWithType: Position
  fullName: EventStore.ClientAPI.Position

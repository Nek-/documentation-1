### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreCatchUpSubscription
  id: EventStoreCatchUpSubscription
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.#ctor(EventStore.ClientAPI.IEventStoreConnection,EventStore.ClientAPI.ILogger,System.String,EventStore.ClientAPI.SystemData.UserCredentials,Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,Task},Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,Exception},EventStore.ClientAPI.CatchUpSubscriptionSettings)
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.AllowProcessing
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Connection
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction(Func{Task})
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent)
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(EventStore.ClientAPI.SubscriptionDropReason,Exception)
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position)
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ResolveLinkTos
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,Exception)
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Subscription
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.UserCredentials
  - EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
  langs:
  - csharp
  - vb
  name: EventStoreCatchUpSubscription
  nameWithType: EventStoreCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: EventStoreCatchUpSubscription
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 15
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nBase class representing catch-up subscriptions.\n"
  example: []
  syntax:
    content: 'public abstract class EventStoreCatchUpSubscription : object'
    content.vb: >-
      Public MustInherit Class EventStoreCatchUpSubscription
          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.ClientAPI.EventStoreAllCatchUpSubscription
  - EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription
  - EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  commentId: P:EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  id: IsSubscribedToAll
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: IsSubscribedToAll
  nameWithType: EventStoreCatchUpSubscription.IsSubscribedToAll
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  type: Property
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: IsSubscribedToAll
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 20
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nIndicates whether the subscription is to all events or to\na specific stream.\n"
  example: []
  syntax:
    content: public bool IsSubscribedToAll { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSubscribedToAll As Boolean
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  commentId: P:EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  id: StreamId
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: StreamId
  nameWithType: EventStoreCatchUpSubscription.StreamId
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  type: Property
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: StreamId
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 26
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe name of the stream to which the subscription is subscribed\n(empty if subscribed to all).\n"
  example: []
  syntax:
    content: public string StreamId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property StreamId As String
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  commentId: P:EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  id: SubscriptionName
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: SubscriptionName
  nameWithType: EventStoreCatchUpSubscription.SubscriptionName
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  type: Property
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SubscriptionName
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 31
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe name of subscription.\n"
  example: []
  syntax:
    content: public string SubscriptionName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SubscriptionName As String
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
  id: Log
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: Log
  nameWithType: EventStoreCatchUpSubscription.Log
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Log
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Log
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 36
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe <xref href=\"EventStore.ClientAPI.ILogger\" data-throw-if-not-resolved=\"false\"></xref> to use for the subscription.\n"
  example: []
  syntax:
    content: protected readonly ILogger Log
    return:
      type: EventStore.ClientAPI.ILogger
    content.vb: Protected ReadOnly Log As ILogger
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Connection
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Connection
  id: Connection
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: Connection
  nameWithType: EventStoreCatchUpSubscription.Connection
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Connection
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Connection
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 41
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected readonly IEventStoreConnection Connection
    return:
      type: EventStore.ClientAPI.IEventStoreConnection
    content.vb: Protected ReadOnly Connection As IEventStoreConnection
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ResolveLinkTos
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ResolveLinkTos
  id: ResolveLinkTos
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: ResolveLinkTos
  nameWithType: EventStoreCatchUpSubscription.ResolveLinkTos
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ResolveLinkTos
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ResolveLinkTos
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 45
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWhether to resolve LinkTo events automatically\n"
  example: []
  syntax:
    content: protected readonly bool ResolveLinkTos
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly ResolveLinkTos As Boolean
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.UserCredentials
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.UserCredentials
  id: UserCredentials
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: UserCredentials
  nameWithType: EventStoreCatchUpSubscription.UserCredentials
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.UserCredentials
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: UserCredentials
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 49
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe <xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription.UserCredentials\" data-throw-if-not-resolved=\"false\"></xref> associated with the subscription.\n"
  example: []
  syntax:
    content: protected readonly UserCredentials UserCredentials
    return:
      type: EventStore.ClientAPI.SystemData.UserCredentials
    content.vb: Protected ReadOnly UserCredentials As UserCredentials
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
  id: ReadBatchSize
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: ReadBatchSize
  nameWithType: EventStoreCatchUpSubscription.ReadBatchSize
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ReadBatchSize
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 54
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe batch size to use during the read phase of the subscription.\n"
  example: []
  syntax:
    content: protected readonly int ReadBatchSize
    return:
      type: System.Int32
    content.vb: Protected ReadOnly ReadBatchSize As Integer
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
  id: MaxPushQueueSize
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: MaxPushQueueSize
  nameWithType: EventStoreCatchUpSubscription.MaxPushQueueSize
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: MaxPushQueueSize
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 59
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe maximum number of events to buffer before the subscription drops.\n"
  example: []
  syntax:
    content: protected readonly int MaxPushQueueSize
    return:
      type: System.Int32
    content.vb: Protected ReadOnly MaxPushQueueSize As Integer
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
  id: EventAppeared
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: EventAppeared
  nameWithType: EventStoreCatchUpSubscription.EventAppeared
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: EventAppeared
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 64
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAction invoked when a new event appears on the subscription.\n"
  example: []
  syntax:
    content: protected readonly Func<EventStoreCatchUpSubscription, ResolvedEvent, Task> EventAppeared
    return:
      type: Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,Task}
    content.vb: Protected ReadOnly EventAppeared As Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
  id: Verbose
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: Verbose
  nameWithType: EventStoreCatchUpSubscription.Verbose
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Verbose
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 72
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWhether or not to use verbose logging (useful during debugging).\n"
  example: []
  syntax:
    content: protected readonly bool Verbose
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly Verbose As Boolean
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Subscription
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Subscription
  id: Subscription
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: Subscription
  nameWithType: EventStoreCatchUpSubscription.Subscription
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Subscription
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Subscription
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 78
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe underlying <xref href=\"EventStore.ClientAPI.EventStoreSubscription\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected EventStoreSubscription Subscription
    return:
      type: EventStore.ClientAPI.EventStoreSubscription
    content.vb: Protected Subscription As EventStoreSubscription
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.AllowProcessing
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.AllowProcessing
  id: AllowProcessing
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: AllowProcessing
  nameWithType: EventStoreCatchUpSubscription.AllowProcessing
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.AllowProcessing
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: AllowProcessing
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 83
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWhether or not to process events.\n"
  example: []
  syntax:
    content: protected volatile bool AllowProcessing
    return:
      type: System.Boolean
    content.vb: Protected AllowProcessing As Boolean
  modifiers.csharp:
  - protected
  - volatile
  modifiers.vb:
  - Protected
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
  id: ShouldStop
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: ShouldStop
  nameWithType: EventStoreCatchUpSubscription.ShouldStop
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ShouldStop
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 89
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nstop has been called.\n"
  example: []
  syntax:
    content: protected volatile bool ShouldStop
    return:
      type: System.Boolean
    content.vb: Protected ShouldStop As Boolean
  modifiers.csharp:
  - protected
  - volatile
  modifiers.vb:
  - Protected
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  id: ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int64})
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  nameWithType: EventStoreCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable<Int64>, Nullable<Int64>)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable<System.Int64>, System.Nullable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ReadEventsTillAsync
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 103
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRead events until the given position or event number async.\n"
  example: []
  syntax:
    content: protected abstract Task<Position> ReadEventsTillAsync(IEventStoreConnection connection, bool resolveLinkTos, UserCredentials userCredentials, long? lastCommitPosition, long? lastEventNumber)
    parameters:
    - id: connection
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The connection.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve Link events.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials for the operation.
    - id: lastCommitPosition
      type: System.Nullable{System.Int64}
      description: The commit position to read until.
    - id: lastEventNumber
      type: System.Nullable{System.Int64}
      description: The event number to read until.
    return:
      type: Task{EventStore.ClientAPI.Position}
      description: ''
    content.vb: Protected MustOverride Function ReadEventsTillAsync(connection As IEventStoreConnection, resolveLinkTos As Boolean, userCredentials As UserCredentials, lastCommitPosition As Long?, lastEventNumber As Long?) As Task(Of Position)
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync*
  nameWithType.vb: EventStoreCatchUpSubscription.ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials, System.Nullable(Of System.Int64), System.Nullable(Of System.Int64))
  name.vb: ReadEventsTillAsync(IEventStoreConnection, Boolean, UserCredentials, Nullable(Of Int64), Nullable(Of Int64))
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  id: TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: TryProcessAsync(ResolvedEvent)
  nameWithType: EventStoreCatchUpSubscription.TryProcessAsync(ResolvedEvent)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync(EventStore.ClientAPI.ResolvedEvent)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: TryProcessAsync
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 113
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nTry to process a single <xref href=\"EventStore.ClientAPI.ResolvedEvent\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected abstract Task TryProcessAsync(ResolvedEvent e)
    parameters:
    - id: e
      type: EventStore.ClientAPI.ResolvedEvent
      description: The <xref href="EventStore.ClientAPI.ResolvedEvent" data-throw-if-not-resolved="false"></xref> to process.
    return:
      type: Task
    content.vb: Protected MustOverride Function TryProcessAsync(e As ResolvedEvent) As Task
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.#ctor(EventStore.ClientAPI.IEventStoreConnection,EventStore.ClientAPI.ILogger,System.String,EventStore.ClientAPI.SystemData.UserCredentials,Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,Task},Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,Exception},EventStore.ClientAPI.CatchUpSubscriptionSettings)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.#ctor(EventStore.ClientAPI.IEventStoreConnection,EventStore.ClientAPI.ILogger,System.String,EventStore.ClientAPI.SystemData.UserCredentials,Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,Task},Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,Exception},EventStore.ClientAPI.CatchUpSubscriptionSettings)
  id: '#ctor(EventStore.ClientAPI.IEventStoreConnection,EventStore.ClientAPI.ILogger,System.String,EventStore.ClientAPI.SystemData.UserCredentials,Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,Task},Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,Exception},EventStore.ClientAPI.CatchUpSubscriptionSettings)'
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: EventStoreCatchUpSubscription(IEventStoreConnection, ILogger, String, UserCredentials, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, CatchUpSubscriptionSettings)
  nameWithType: EventStoreCatchUpSubscription.EventStoreCatchUpSubscription(IEventStoreConnection, ILogger, String, UserCredentials, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, CatchUpSubscriptionSettings)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EventStoreCatchUpSubscription(EventStore.ClientAPI.IEventStoreConnection, EventStore.ClientAPI.ILogger, System.String, EventStore.ClientAPI.SystemData.UserCredentials, Func<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, Task>, Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>, Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, Exception>, EventStore.ClientAPI.CatchUpSubscriptionSettings)
  type: Constructor
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 126
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConstructs state for EventStoreCatchUpSubscription.\n"
  example: []
  syntax:
    content: protected EventStoreCatchUpSubscription(IEventStoreConnection connection, ILogger log, string streamId, UserCredentials userCredentials, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreCatchUpSubscription> liveProcessingStarted, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped, CatchUpSubscriptionSettings settings)
    parameters:
    - id: connection
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The connection.
    - id: log
      type: EventStore.ClientAPI.ILogger
      description: The <xref href="EventStore.ClientAPI.ILogger" data-throw-if-not-resolved="false"></xref> to use.
    - id: streamId
      type: System.String
      description: The stream name.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials for the operations.
    - id: eventAppeared
      type: Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,Task}
      description: Action invoked when events are received.
    - id: liveProcessingStarted
      type: Action{EventStore.ClientAPI.EventStoreCatchUpSubscription}
      description: Action invoked when the read phase finishes.
    - id: subscriptionDropped
      type: Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,Exception}
      description: Action invoked if the subscription drops.
    - id: settings
      type: EventStore.ClientAPI.CatchUpSubscriptionSettings
      description: Settings for this subscription.
    content.vb: Protected Sub New(connection As IEventStoreConnection, log As ILogger, streamId As String, userCredentials As UserCredentials, eventAppeared As Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), liveProcessingStarted As Action(Of EventStoreCatchUpSubscription), subscriptionDropped As Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), settings As CatchUpSubscriptionSettings)
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.#ctor*
  nameWithType.vb: EventStoreCatchUpSubscription.EventStoreCatchUpSubscription(IEventStoreConnection, ILogger, String, UserCredentials, Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), CatchUpSubscriptionSettings)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: EventStore.ClientAPI.EventStoreCatchUpSubscription.EventStoreCatchUpSubscription(EventStore.ClientAPI.IEventStoreConnection, EventStore.ClientAPI.ILogger, System.String, EventStore.ClientAPI.SystemData.UserCredentials, Func(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, Task), Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription), Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, Exception), EventStore.ClientAPI.CatchUpSubscriptionSettings)
  name.vb: EventStoreCatchUpSubscription(IEventStoreConnection, ILogger, String, UserCredentials, Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), CatchUpSubscriptionSettings)
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
  id: Stop(TimeSpan)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: Stop(TimeSpan)
  nameWithType: EventStoreCatchUpSubscription.Stop(TimeSpan)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(TimeSpan)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Stop
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 164
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAttempts to stop the subscription blocking for completion of stop.\n"
  example: []
  syntax:
    content: public void Stop(TimeSpan timeout)
    parameters:
    - id: timeout
      type: TimeSpan
      description: The maximum amount of time which the current thread will block waiting for the subscription to stop before throwing a TimeoutException.
    content.vb: Public Sub Stop(timeout As TimeSpan)
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  id: Stop
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: EventStoreCatchUpSubscription.Stop()
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Stop
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 174
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAttempts to stop the subscription without blocking for completion of stop\n"
  example: []
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync
  id: SubscribeToStreamAsync
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: SubscribeToStreamAsync()
  nameWithType: EventStoreCatchUpSubscription.SubscribeToStreamAsync()
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SubscribeToStreamAsync
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 243
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscribes to the stream.\n"
  example: []
  syntax:
    content: protected abstract Task SubscribeToStreamAsync()
    return:
      type: Task
      description: ''
    content.vb: Protected MustOverride Function SubscribeToStreamAsync As Task
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
  id: ReadMissedHistoricEventsAsync
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: ReadMissedHistoricEventsAsync()
  nameWithType: EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync()
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ReadMissedHistoricEventsAsync
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 249
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\n\n"
  example: []
  syntax:
    content: protected Task ReadMissedHistoricEventsAsync()
    return:
      type: Task
      description: ''
    content.vb: Protected Function ReadMissedHistoricEventsAsync As Task
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position)
  id: LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: LiveProcessingStarted(EventStoreCatchUpSubscription, Position)
  nameWithType: EventStoreCatchUpSubscription.LiveProcessingStarted(EventStoreCatchUpSubscription, Position)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted(EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.Position)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: LiveProcessingStarted
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 293
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe callback invoked when the subscription switches to push notifications.\n"
  example: []
  syntax:
    content: protected abstract Task LiveProcessingStarted(EventStoreCatchUpSubscription eventStoreCatchUpSubscription, Position lastPosition)
    parameters:
    - id: eventStoreCatchUpSubscription
      type: EventStore.ClientAPI.EventStoreCatchUpSubscription
      description: ''
    - id: lastPosition
      type: EventStore.ClientAPI.Position
      description: ''
    return:
      type: Task
      description: ''
    content.vb: Protected MustOverride Function LiveProcessingStarted(eventStoreCatchUpSubscription As EventStoreCatchUpSubscription, lastPosition As Position) As Task
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent)
  id: EnqueuePushedEvent(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: EnqueuePushedEvent(EventStoreSubscription, ResolvedEvent)
  nameWithType: EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStoreSubscription, ResolvedEvent)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent(EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: EnqueuePushedEvent
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 302
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nEnqueues a pushed event.\n"
  example: []
  syntax:
    content: protected Task EnqueuePushedEvent(EventStoreSubscription subscription, ResolvedEvent e)
    parameters:
    - id: subscription
      type: EventStore.ClientAPI.EventStoreSubscription
      description: ''
    - id: e
      type: EventStore.ClientAPI.ResolvedEvent
      description: ''
    return:
      type: Task
      description: ''
    content.vb: Protected Function EnqueuePushedEvent(subscription As EventStoreSubscription, e As ResolvedEvent) As Task
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,Exception)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,Exception)
  id: ServerSubscriptionDropped(EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,Exception)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: ServerSubscriptionDropped(EventStoreSubscription, SubscriptionDropReason, Exception)
  nameWithType: EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStoreSubscription, SubscriptionDropReason, Exception)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped(EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, Exception)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ServerSubscriptionDropped
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 329
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nInvoked when the subscription is dropped.\n"
  example: []
  syntax:
    content: protected void ServerSubscriptionDropped(EventStoreSubscription subscription, SubscriptionDropReason reason, Exception exc)
    parameters:
    - id: subscription
      type: EventStore.ClientAPI.EventStoreSubscription
      description: ''
    - id: reason
      type: EventStore.ClientAPI.SubscriptionDropReason
      description: ''
    - id: exc
      type: Exception
      description: ''
    content.vb: Protected Sub ServerSubscriptionDropped(subscription As EventStoreSubscription, reason As SubscriptionDropReason, exc As Exception)
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(EventStore.ClientAPI.SubscriptionDropReason,Exception)
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(EventStore.ClientAPI.SubscriptionDropReason,Exception)
  id: EnqueueSubscriptionDropNotification(EventStore.ClientAPI.SubscriptionDropReason,Exception)
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: EnqueueSubscriptionDropNotification(SubscriptionDropReason, Exception)
  nameWithType: EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(SubscriptionDropReason, Exception)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification(EventStore.ClientAPI.SubscriptionDropReason, Exception)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: EnqueueSubscriptionDropNotification
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 339
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nEnqueues a dropped notification for later processing.\n"
  example: []
  syntax:
    content: protected void EnqueueSubscriptionDropNotification(SubscriptionDropReason reason, Exception error)
    parameters:
    - id: reason
      type: EventStore.ClientAPI.SubscriptionDropReason
      description: ''
    - id: error
      type: Exception
      description: ''
    content.vb: Protected Sub EnqueueSubscriptionDropNotification(reason As SubscriptionDropReason, error As Exception)
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue
  id: EnsureProcessingPushQueue
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: EnsureProcessingPushQueue()
  nameWithType: EventStoreCatchUpSubscription.EnsureProcessingPushQueue()
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: EnsureProcessingPushQueue
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 352
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nForces the subscription to process the queue if necessary.\n"
  example: []
  syntax:
    content: protected void EnsureProcessingPushQueue()
    content.vb: Protected Sub EnsureProcessingPushQueue
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction(Func{Task})
  commentId: M:EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction(Func{Task})
  id: EnqueueAction(Func{Task})
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  langs:
  - csharp
  - vb
  name: EnqueueAction(Func<Task>)
  nameWithType: EventStoreCatchUpSubscription.EnqueueAction(Func<Task>)
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction(Func<Task>)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: EnqueueAction
    path: ../EventStore/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
    startLine: 372
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nPlaces an action on the queue.\n"
  example: []
  syntax:
    content: protected void EnqueueAction(Func<Task> action)
    parameters:
    - id: action
      type: Func{Task}
      description: ''
    content.vb: Protected Sub EnqueueAction(action As Func(Of Task))
  overload: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction*
  nameWithType.vb: EventStoreCatchUpSubscription.EnqueueAction(Func(Of Task))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction(Func(Of Task))
  name.vb: EnqueueAction(Func(Of Task))
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
  name: IsSubscribedToAll
  nameWithType: EventStoreCatchUpSubscription.IsSubscribedToAll
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
  name: StreamId
  nameWithType: EventStoreCatchUpSubscription.StreamId
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
  name: SubscriptionName
  nameWithType: EventStoreCatchUpSubscription.SubscriptionName
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscriptionName
- uid: EventStore.ClientAPI.ILogger
  commentId: T:EventStore.ClientAPI.ILogger
  parent: EventStore.ClientAPI
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.ClientAPI.ILogger
- uid: EventStore.ClientAPI.IEventStoreConnection
  commentId: T:EventStore.ClientAPI.IEventStoreConnection
  parent: EventStore.ClientAPI
  name: IEventStoreConnection
  nameWithType: IEventStoreConnection
  fullName: EventStore.ClientAPI.IEventStoreConnection
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.UserCredentials
  commentId: F:EventStore.ClientAPI.EventStoreCatchUpSubscription.UserCredentials
  parent: EventStore.ClientAPI.EventStoreCatchUpSubscription
  name: UserCredentials
  nameWithType: EventStoreCatchUpSubscription.UserCredentials
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.UserCredentials
- uid: EventStore.ClientAPI.SystemData.UserCredentials
  commentId: T:EventStore.ClientAPI.SystemData.UserCredentials
  parent: EventStore.ClientAPI.SystemData
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.ClientAPI.SystemData.UserCredentials
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreCatchUpSubscription
  parent: EventStore.ClientAPI
  name: EventStoreCatchUpSubscription
  nameWithType: EventStoreCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
- uid: EventStore.ClientAPI.SystemData
  commentId: N:EventStore.ClientAPI.SystemData
  name: EventStore.ClientAPI.SystemData
  nameWithType: EventStore.ClientAPI.SystemData
  fullName: EventStore.ClientAPI.SystemData
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,Task}
  commentId: '!:Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,Task}'
  definition: Func`3
  name: Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>
  nameWithType: Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>
  fullName: Func<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, Task>
  nameWithType.vb: Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task)
  fullName.vb: Func(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, Task)
  name.vb: Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreSubscription
  commentId: T:EventStore.ClientAPI.EventStoreSubscription
  parent: EventStore.ClientAPI
  name: EventStoreSubscription
  nameWithType: EventStoreSubscription
  fullName: EventStore.ClientAPI.EventStoreSubscription
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync
  name: ReadEventsTillAsync
  nameWithType: EventStoreCatchUpSubscription.ReadEventsTillAsync
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTillAsync
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{EventStore.ClientAPI.Position}
  commentId: '!:Task{EventStore.ClientAPI.Position}'
  definition: Task`1
  name: Task<Position>
  nameWithType: Task<Position>
  fullName: Task<EventStore.ClientAPI.Position>
  nameWithType.vb: Task(Of Position)
  fullName.vb: Task(Of EventStore.ClientAPI.Position)
  name.vb: Task(Of Position)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ResolvedEvent
  commentId: T:EventStore.ClientAPI.ResolvedEvent
  parent: EventStore.ClientAPI
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.ClientAPI.ResolvedEvent
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync
  name: TryProcessAsync
  nameWithType: EventStoreCatchUpSubscription.TryProcessAsync
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcessAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.#ctor*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.#ctor
  name: EventStoreCatchUpSubscription
  nameWithType: EventStoreCatchUpSubscription.EventStoreCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EventStoreCatchUpSubscription
- uid: Action{EventStore.ClientAPI.EventStoreCatchUpSubscription}
  commentId: '!:Action{EventStore.ClientAPI.EventStoreCatchUpSubscription}'
  definition: Action`1
  name: Action<EventStoreCatchUpSubscription>
  nameWithType: Action<EventStoreCatchUpSubscription>
  fullName: Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>
  nameWithType.vb: Action(Of EventStoreCatchUpSubscription)
  fullName.vb: Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription)
  name.vb: Action(Of EventStoreCatchUpSubscription)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,Exception}
  commentId: '!:Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,Exception}'
  definition: Action`3
  name: Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>
  nameWithType: Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>
  fullName: Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, Exception>
  nameWithType.vb: Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception)
  fullName.vb: Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, Exception)
  name.vb: Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception)
  spec.csharp:
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
  commentId: T:EventStore.ClientAPI.CatchUpSubscriptionSettings
  parent: EventStore.ClientAPI
  name: CatchUpSubscriptionSettings
  nameWithType: CatchUpSubscriptionSettings
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`3
  isExternal: true
  name: Action<, , >
  nameWithType: Action<, , >
  fullName: Action<, , >
  nameWithType.vb: Action(Of , , )
  fullName.vb: Action(Of , , )
  name.vb: Action(Of , , )
  spec.csharp:
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
  name: Stop
  nameWithType: EventStoreCatchUpSubscription.Stop
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync
  name: SubscribeToStreamAsync
  nameWithType: EventStoreCatchUpSubscription.SubscribeToStreamAsync
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.SubscribeToStreamAsync
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
  name: ReadMissedHistoricEventsAsync
  nameWithType: EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadMissedHistoricEventsAsync
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted
  name: LiveProcessingStarted
  nameWithType: EventStoreCatchUpSubscription.LiveProcessingStarted
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.LiveProcessingStarted
- uid: EventStore.ClientAPI.Position
  commentId: T:EventStore.ClientAPI.Position
  parent: EventStore.ClientAPI
  name: Position
  nameWithType: Position
  fullName: EventStore.ClientAPI.Position
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent
  name: EnqueuePushedEvent
  nameWithType: EventStoreCatchUpSubscription.EnqueuePushedEvent
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueuePushedEvent
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped
  name: ServerSubscriptionDropped
  nameWithType: EventStoreCatchUpSubscription.ServerSubscriptionDropped
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.ServerSubscriptionDropped
- uid: EventStore.ClientAPI.SubscriptionDropReason
  commentId: T:EventStore.ClientAPI.SubscriptionDropReason
  parent: EventStore.ClientAPI
  name: SubscriptionDropReason
  nameWithType: SubscriptionDropReason
  fullName: EventStore.ClientAPI.SubscriptionDropReason
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification
  name: EnqueueSubscriptionDropNotification
  nameWithType: EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueSubscriptionDropNotification
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue
  name: EnsureProcessingPushQueue
  nameWithType: EventStoreCatchUpSubscription.EnsureProcessingPushQueue
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnsureProcessingPushQueue
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction*
  commentId: Overload:EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction
  name: EnqueueAction
  nameWithType: EventStoreCatchUpSubscription.EnqueueAction
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription.EnqueueAction
- uid: Func{Task}
  commentId: '!:Func{Task}'
  definition: Func`1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: Func<Task>
  nameWithType.vb: Func(Of Task)
  fullName.vb: Func(Of Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

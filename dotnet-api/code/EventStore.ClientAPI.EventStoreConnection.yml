### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.EventStoreConnection
  commentId: T:EventStore.ClientAPI.EventStoreConnection
  id: EventStoreConnection
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,EventStore.ClientAPI.ClusterSettings,System.String)
  - EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,EventStore.ClientAPI.IEndPointDiscoverer,System.String)
  - EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,System.Net.IPEndPoint,System.String)
  - EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,System.String)
  - EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,System.Uri,System.String)
  - EventStore.ClientAPI.EventStoreConnection.Create(System.Net.IPEndPoint,System.String)
  - EventStore.ClientAPI.EventStoreConnection.Create(System.String,EventStore.ClientAPI.ConnectionSettingsBuilder,System.String)
  - EventStore.ClientAPI.EventStoreConnection.Create(System.String,System.String)
  - EventStore.ClientAPI.EventStoreConnection.Create(System.Uri,System.String)
  langs:
  - csharp
  - vb
  name: EventStoreConnection
  nameWithType: EventStoreConnection
  fullName: EventStore.ClientAPI.EventStoreConnection
  type: Class
  source:
    id: EventStoreConnection
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreConnection.cs
    startLine: 14
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nContains factory methods for building connections to an Event Store server.\n"
  example: []
  syntax:
    content: public static class EventStoreConnection
    content.vb: Public Module EventStoreConnection
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.ClientAPI.EventStoreConnection.Create(System.Uri,System.String)
  commentId: M:EventStore.ClientAPI.EventStoreConnection.Create(System.Uri,System.String)
  id: Create(System.Uri,System.String)
  parent: EventStore.ClientAPI.EventStoreConnection
  langs:
  - csharp
  - vb
  name: Create(Uri, String)
  nameWithType: EventStoreConnection.Create(Uri, String)
  fullName: EventStore.ClientAPI.EventStoreConnection.Create(System.Uri, System.String)
  type: Method
  source:
    id: Create
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreConnection.cs
    startLine: 24
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a new <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> to single node using default <xref href=\"EventStore.ClientAPI.ConnectionSettings\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEventStoreConnection Create(Uri uri, string connectionName = null)
    parameters:
    - id: uri
      type: System.Uri
      description: The Uri to connect to. It can be tcp:// to point to a single node or discover:// to discover nodes
    - id: connectionName
      type: System.String
      description: Optional name of connection (will be generated automatically, if not provided)
    return:
      type: EventStore.ClientAPI.IEventStoreConnection
      description: a new <xref href="EventStore.ClientAPI.IEventStoreConnection" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Create(uri As Uri, connectionName As String = Nothing) As IEventStoreConnection
  overload: EventStore.ClientAPI.EventStoreConnection.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.ClientAPI.EventStoreConnection.Create(System.String,System.String)
  commentId: M:EventStore.ClientAPI.EventStoreConnection.Create(System.String,System.String)
  id: Create(System.String,System.String)
  parent: EventStore.ClientAPI.EventStoreConnection
  langs:
  - csharp
  - vb
  name: Create(String, String)
  nameWithType: EventStoreConnection.Create(String, String)
  fullName: EventStore.ClientAPI.EventStoreConnection.Create(System.String, System.String)
  type: Method
  source:
    id: Create
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreConnection.cs
    startLine: 34
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a new <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> to single node using default <xref href=\"EventStore.ClientAPI.ConnectionSettings\" data-throw-if-not-resolved=\"false\"></xref> provided via a connectionstring\n"
  example: []
  syntax:
    content: public static IEventStoreConnection Create(string connectionString, string connectionName = null)
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string to for this connection.
    - id: connectionName
      type: System.String
      description: Optional name of connection (will be generated automatically, if not provided)
    return:
      type: EventStore.ClientAPI.IEventStoreConnection
      description: a new <xref href="EventStore.ClientAPI.IEventStoreConnection" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Create(connectionString As String, connectionName As String = Nothing) As IEventStoreConnection
  overload: EventStore.ClientAPI.EventStoreConnection.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.ClientAPI.EventStoreConnection.Create(System.String,EventStore.ClientAPI.ConnectionSettingsBuilder,System.String)
  commentId: M:EventStore.ClientAPI.EventStoreConnection.Create(System.String,EventStore.ClientAPI.ConnectionSettingsBuilder,System.String)
  id: Create(System.String,EventStore.ClientAPI.ConnectionSettingsBuilder,System.String)
  parent: EventStore.ClientAPI.EventStoreConnection
  langs:
  - csharp
  - vb
  name: Create(String, ConnectionSettingsBuilder, String)
  nameWithType: EventStoreConnection.Create(String, ConnectionSettingsBuilder, String)
  fullName: EventStore.ClientAPI.EventStoreConnection.Create(System.String, EventStore.ClientAPI.ConnectionSettingsBuilder, System.String)
  type: Method
  source:
    id: Create
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreConnection.cs
    startLine: 45
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a new <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> to single node using default <xref href=\"EventStore.ClientAPI.ConnectionSettings\" data-throw-if-not-resolved=\"false\"></xref> provided via a connectionstring\n"
  example: []
  syntax:
    content: public static IEventStoreConnection Create(string connectionString, ConnectionSettingsBuilder builder, string connectionName = null)
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string to for this connection.
    - id: builder
      type: EventStore.ClientAPI.ConnectionSettingsBuilder
      description: Pre-populated settings builder, optional. If not specified, a new builder will be created.
    - id: connectionName
      type: System.String
      description: Optional name of connection (will be generated automatically, if not provided)
    return:
      type: EventStore.ClientAPI.IEventStoreConnection
      description: a new <xref href="EventStore.ClientAPI.IEventStoreConnection" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Create(connectionString As String, builder As ConnectionSettingsBuilder, connectionName As String = Nothing) As IEventStoreConnection
  overload: EventStore.ClientAPI.EventStoreConnection.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,System.String)
  commentId: M:EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,System.String)
  id: Create(EventStore.ClientAPI.ConnectionSettings,System.String)
  parent: EventStore.ClientAPI.EventStoreConnection
  langs:
  - csharp
  - vb
  name: Create(ConnectionSettings, String)
  nameWithType: EventStoreConnection.Create(ConnectionSettings, String)
  fullName: EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings, System.String)
  type: Method
  source:
    id: Create
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreConnection.cs
    startLine: 69
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a new <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> using the gossip seeds specified in the <code data-dev-comment-type=\"paramref\" class=\"paramref\">connectionSettings</code>\n"
  example: []
  syntax:
    content: public static IEventStoreConnection Create(ConnectionSettings connectionSettings, string connectionName = null)
    parameters:
    - id: connectionSettings
      type: EventStore.ClientAPI.ConnectionSettings
      description: The <xref href="EventStore.ClientAPI.ConnectionSettings" data-throw-if-not-resolved="false"></xref> to apply to the new connection
    - id: connectionName
      type: System.String
      description: Optional name of connection (will be generated automatically, if not provided)
    return:
      type: EventStore.ClientAPI.IEventStoreConnection
      description: a new <xref href="EventStore.ClientAPI.IEventStoreConnection" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Create(connectionSettings As ConnectionSettings, connectionName As String = Nothing) As IEventStoreConnection
  overload: EventStore.ClientAPI.EventStoreConnection.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,System.Uri,System.String)
  commentId: M:EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,System.Uri,System.String)
  id: Create(EventStore.ClientAPI.ConnectionSettings,System.Uri,System.String)
  parent: EventStore.ClientAPI.EventStoreConnection
  langs:
  - csharp
  - vb
  name: Create(ConnectionSettings, Uri, String)
  nameWithType: EventStoreConnection.Create(ConnectionSettings, Uri, String)
  fullName: EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings, System.Uri, System.String)
  type: Method
  source:
    id: Create
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreConnection.cs
    startLine: 84
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a new <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref>\n"
  remarks: You must pass a uri or set gossip seeds in the connection settings.
  example: []
  syntax:
    content: public static IEventStoreConnection Create(ConnectionSettings connectionSettings, Uri uri, string connectionName = null)
    parameters:
    - id: connectionSettings
      type: EventStore.ClientAPI.ConnectionSettings
      description: The <xref href="EventStore.ClientAPI.ConnectionSettings" data-throw-if-not-resolved="false"></xref> to apply to the new connection. If null the default settings will be used and the <code data-dev-comment-type="paramref" class="paramref">uri</code> must not be null
    - id: uri
      type: System.Uri
      description: The Uri to connect to. It can be tcp:// to point to a single node or discover:// to discover nodes via dns or null to connect using the gossip seeds from the <code data-dev-comment-type="paramref" class="paramref">connectionSettings</code>
    - id: connectionName
      type: System.String
      description: Optional name of connection (will be generated automatically, if not provided)
    return:
      type: EventStore.ClientAPI.IEventStoreConnection
      description: a new <xref href="EventStore.ClientAPI.IEventStoreConnection" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Create(connectionSettings As ConnectionSettings, uri As Uri, connectionName As String = Nothing) As IEventStoreConnection
  overload: EventStore.ClientAPI.EventStoreConnection.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.ClientAPI.EventStoreConnection.Create(System.Net.IPEndPoint,System.String)
  commentId: M:EventStore.ClientAPI.EventStoreConnection.Create(System.Net.IPEndPoint,System.String)
  id: Create(System.Net.IPEndPoint,System.String)
  parent: EventStore.ClientAPI.EventStoreConnection
  langs:
  - csharp
  - vb
  name: Create(IPEndPoint, String)
  nameWithType: EventStoreConnection.Create(IPEndPoint, String)
  fullName: EventStore.ClientAPI.EventStoreConnection.Create(System.Net.IPEndPoint, System.String)
  type: Method
  source:
    id: Create
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreConnection.cs
    startLine: 173
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a new <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> to single node using default <xref href=\"EventStore.ClientAPI.ConnectionSettings\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEventStoreConnection Create(IPEndPoint tcpEndPoint, string connectionName = null)
    parameters:
    - id: tcpEndPoint
      type: System.Net.IPEndPoint
      description: The <xref href="System.Net.IPEndPoint" data-throw-if-not-resolved="false"></xref> to connect to.
    - id: connectionName
      type: System.String
      description: Optional name of connection (will be generated automatically, if not provided)
    return:
      type: EventStore.ClientAPI.IEventStoreConnection
      description: a new <xref href="EventStore.ClientAPI.IEventStoreConnection" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Create(tcpEndPoint As IPEndPoint, connectionName As String = Nothing) As IEventStoreConnection
  overload: EventStore.ClientAPI.EventStoreConnection.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,System.Net.IPEndPoint,System.String)
  commentId: M:EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,System.Net.IPEndPoint,System.String)
  id: Create(EventStore.ClientAPI.ConnectionSettings,System.Net.IPEndPoint,System.String)
  parent: EventStore.ClientAPI.EventStoreConnection
  langs:
  - csharp
  - vb
  name: Create(ConnectionSettings, IPEndPoint, String)
  nameWithType: EventStoreConnection.Create(ConnectionSettings, IPEndPoint, String)
  fullName: EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings, System.Net.IPEndPoint, System.String)
  type: Method
  source:
    id: Create
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreConnection.cs
    startLine: 184
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a new <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> to single node using specific <xref href=\"EventStore.ClientAPI.ConnectionSettings\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEventStoreConnection Create(ConnectionSettings connectionSettings, IPEndPoint tcpEndPoint, string connectionName = null)
    parameters:
    - id: connectionSettings
      type: EventStore.ClientAPI.ConnectionSettings
      description: The <xref href="EventStore.ClientAPI.ConnectionSettings" data-throw-if-not-resolved="false"></xref> to apply to the new connection
    - id: tcpEndPoint
      type: System.Net.IPEndPoint
      description: The <xref href="System.Net.IPEndPoint" data-throw-if-not-resolved="false"></xref> to connect to.
    - id: connectionName
      type: System.String
      description: Optional name of connection (will be generated automatically, if not provided)
    return:
      type: EventStore.ClientAPI.IEventStoreConnection
      description: a new <xref href="EventStore.ClientAPI.IEventStoreConnection" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Create(connectionSettings As ConnectionSettings, tcpEndPoint As IPEndPoint, connectionName As String = Nothing) As IEventStoreConnection
  overload: EventStore.ClientAPI.EventStoreConnection.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,EventStore.ClientAPI.ClusterSettings,System.String)
  commentId: M:EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,EventStore.ClientAPI.ClusterSettings,System.String)
  id: Create(EventStore.ClientAPI.ConnectionSettings,EventStore.ClientAPI.ClusterSettings,System.String)
  parent: EventStore.ClientAPI.EventStoreConnection
  langs:
  - csharp
  - vb
  name: Create(ConnectionSettings, ClusterSettings, String)
  nameWithType: EventStoreConnection.Create(ConnectionSettings, ClusterSettings, String)
  fullName: EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings, EventStore.ClientAPI.ClusterSettings, System.String)
  type: Method
  source:
    id: Create
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreConnection.cs
    startLine: 200
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a new <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> to EventStore cluster \nusing specific <xref href=\"EventStore.ClientAPI.ConnectionSettings\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"EventStore.ClientAPI.ClusterSettings\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEventStoreConnection Create(ConnectionSettings connectionSettings, ClusterSettings clusterSettings, string connectionName = null)
    parameters:
    - id: connectionSettings
      type: EventStore.ClientAPI.ConnectionSettings
      description: The <xref href="EventStore.ClientAPI.ConnectionSettings" data-throw-if-not-resolved="false"></xref> to apply to the new connection
    - id: clusterSettings
      type: EventStore.ClientAPI.ClusterSettings
      description: The <xref href="EventStore.ClientAPI.ClusterSettings" data-throw-if-not-resolved="false"></xref> that determine cluster behavior.
    - id: connectionName
      type: System.String
      description: Optional name of connection (will be generated automatically, if not provided)
    return:
      type: EventStore.ClientAPI.IEventStoreConnection
      description: a new <xref href="EventStore.ClientAPI.IEventStoreConnection" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Create(connectionSettings As ConnectionSettings, clusterSettings As ClusterSettings, connectionName As String = Nothing) As IEventStoreConnection
  overload: EventStore.ClientAPI.EventStoreConnection.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,EventStore.ClientAPI.IEndPointDiscoverer,System.String)
  commentId: M:EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,EventStore.ClientAPI.IEndPointDiscoverer,System.String)
  id: Create(EventStore.ClientAPI.ConnectionSettings,EventStore.ClientAPI.IEndPointDiscoverer,System.String)
  parent: EventStore.ClientAPI.EventStoreConnection
  langs:
  - csharp
  - vb
  name: Create(ConnectionSettings, IEndPointDiscoverer, String)
  nameWithType: EventStoreConnection.Create(ConnectionSettings, IEndPointDiscoverer, String)
  fullName: EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings, EventStore.ClientAPI.IEndPointDiscoverer, System.String)
  type: Method
  source:
    id: Create
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreConnection.cs
    startLine: 224
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCreates a new <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> using specific <xref href=\"EventStore.ClientAPI.ConnectionSettings\" data-throw-if-not-resolved=\"false\"></xref> and a custom-defined <xref href=\"EventStore.ClientAPI.IEndPointDiscoverer\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEventStoreConnection Create(ConnectionSettings connectionSettings, IEndPointDiscoverer endPointDiscoverer, string connectionName = null)
    parameters:
    - id: connectionSettings
      type: EventStore.ClientAPI.ConnectionSettings
      description: The <xref href="EventStore.ClientAPI.ConnectionSettings" data-throw-if-not-resolved="false"></xref> to apply to the new connection
    - id: endPointDiscoverer
      type: EventStore.ClientAPI.IEndPointDiscoverer
      description: The custom-defined <xref href="EventStore.ClientAPI.IEndPointDiscoverer" data-throw-if-not-resolved="false"></xref> to use for node discovery
    - id: connectionName
      type: System.String
      description: Optional name of connection (will be generated automatically, if not provided)
    return:
      type: EventStore.ClientAPI.IEventStoreConnection
      description: a new <xref href="EventStore.ClientAPI.IEventStoreConnection" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function Create(connectionSettings As ConnectionSettings, endPointDiscoverer As IEndPointDiscoverer, connectionName As String = Nothing) As IEventStoreConnection
  overload: EventStore.ClientAPI.EventStoreConnection.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.ClientAPI.IEventStoreConnection
  commentId: T:EventStore.ClientAPI.IEventStoreConnection
  parent: EventStore.ClientAPI
  name: IEventStoreConnection
  nameWithType: IEventStoreConnection
  fullName: EventStore.ClientAPI.IEventStoreConnection
- uid: EventStore.ClientAPI.ConnectionSettings
  commentId: T:EventStore.ClientAPI.ConnectionSettings
  parent: EventStore.ClientAPI
  name: ConnectionSettings
  nameWithType: ConnectionSettings
  fullName: EventStore.ClientAPI.ConnectionSettings
- uid: EventStore.ClientAPI.EventStoreConnection.Create*
  commentId: Overload:EventStore.ClientAPI.EventStoreConnection.Create
  name: Create
  nameWithType: EventStoreConnection.Create
  fullName: EventStore.ClientAPI.EventStoreConnection.Create
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.ClientAPI.ConnectionSettingsBuilder
  commentId: T:EventStore.ClientAPI.ConnectionSettingsBuilder
  parent: EventStore.ClientAPI
  name: ConnectionSettingsBuilder
  nameWithType: ConnectionSettingsBuilder
  fullName: EventStore.ClientAPI.ConnectionSettingsBuilder
- uid: System.Net.IPEndPoint
  commentId: T:System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net
  commentId: N:System.Net
  isExternal: true
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: EventStore.ClientAPI.ClusterSettings
  commentId: T:EventStore.ClientAPI.ClusterSettings
  parent: EventStore.ClientAPI
  name: ClusterSettings
  nameWithType: ClusterSettings
  fullName: EventStore.ClientAPI.ClusterSettings
- uid: EventStore.ClientAPI.IEndPointDiscoverer
  commentId: T:EventStore.ClientAPI.IEndPointDiscoverer
  parent: EventStore.ClientAPI
  name: IEndPointDiscoverer
  nameWithType: IEndPointDiscoverer
  fullName: EventStore.ClientAPI.IEndPointDiscoverer

### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  commentId: T:EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  id: EventStorePersistentSubscriptionBase
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(EventStore.ClientAPI.ResolvedEvent)
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent})
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Collections.Generic.IEnumerable{System.Guid})
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Guid)
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.DefaultBufferSize
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(EventStore.ClientAPI.ResolvedEvent,EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent},EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  - EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop(System.TimeSpan)
  langs:
  - csharp
  - vb
  name: EventStorePersistentSubscriptionBase
  nameWithType: EventStorePersistentSubscriptionBase
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  type: Class
  source:
    id: EventStorePersistentSubscriptionBase
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 18
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRepresents a persistent subscription connection.\n"
  example: []
  syntax:
    content: public abstract class EventStorePersistentSubscriptionBase
    content.vb: Public MustInherit Class EventStorePersistentSubscriptionBase
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.ClientAPI.EventStorePersistentSubscription
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.DefaultBufferSize
  commentId: F:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.DefaultBufferSize
  id: DefaultBufferSize
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: DefaultBufferSize
  nameWithType: EventStorePersistentSubscriptionBase.DefaultBufferSize
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.DefaultBufferSize
  type: Field
  source:
    id: DefaultBufferSize
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 24
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe default buffer size for the persistent subscription\n"
  example: []
  syntax:
    content: public const int DefaultBufferSize = 10
    return:
      type: System.Int32
    content.vb: Public Const DefaultBufferSize As Integer = 10
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(EventStore.ClientAPI.ResolvedEvent)
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(EventStore.ClientAPI.ResolvedEvent)
  id: Acknowledge(EventStore.ClientAPI.ResolvedEvent)
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Acknowledge(ResolvedEvent)
  nameWithType: EventStorePersistentSubscriptionBase.Acknowledge(ResolvedEvent)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(EventStore.ClientAPI.ResolvedEvent)
  type: Method
  source:
    id: Acknowledge
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 96
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAcknowledge that a message have completed processing (this will tell the server it has been processed)\n"
  remarks: There is no need to ack a message if you have Auto Ack enabled
  example: []
  syntax:
    content: public void Acknowledge(ResolvedEvent event)
    parameters:
    - id: event
      type: EventStore.ClientAPI.ResolvedEvent
      description: The <xref href="EventStore.ClientAPI.ResolvedEvent" data-throw-if-not-resolved="false"></xref> to acknowledge
    content.vb: Public Sub Acknowledge(event As ResolvedEvent)
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent})
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent})
  id: Acknowledge(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent})
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Acknowledge(IEnumerable<ResolvedEvent>)
  nameWithType: EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable<ResolvedEvent>)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Collections.Generic.IEnumerable<EventStore.ClientAPI.ResolvedEvent>)
  type: Method
  source:
    id: Acknowledge
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 105
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAcknowledge that a message have completed processing (this will tell the server it has been processed)\n"
  remarks: There is no need to ack a message if you have Auto Ack enabled
  example: []
  syntax:
    content: public void Acknowledge(IEnumerable<ResolvedEvent> events)
    parameters:
    - id: events
      type: System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent}
      description: The <xref href="EventStore.ClientAPI.ResolvedEvent" data-throw-if-not-resolved="false"></xref>s to acknowledge there should be less than 2000 to ack at a time.
    content.vb: Public Sub Acknowledge(events As IEnumerable(Of ResolvedEvent))
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge*
  nameWithType.vb: EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable(Of ResolvedEvent))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Collections.Generic.IEnumerable(Of EventStore.ClientAPI.ResolvedEvent))
  name.vb: Acknowledge(IEnumerable(Of ResolvedEvent))
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Guid)
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Guid)
  id: Acknowledge(System.Guid)
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Acknowledge(Guid)
  nameWithType: EventStorePersistentSubscriptionBase.Acknowledge(Guid)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Guid)
  type: Method
  source:
    id: Acknowledge
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 117
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAcknowledge a message by event id (this will tell the server it has been processed)\n"
  remarks: There is no need to ack a message if you have Auto Ack enabled
  example: []
  syntax:
    content: public void Acknowledge(Guid eventId)
    parameters:
    - id: eventId
      type: System.Guid
      description: The <xref href="EventStore.ClientAPI.ResolvedEvent" data-throw-if-not-resolved="false"></xref> OriginalEvent.EventId to acknowledge
    content.vb: Public Sub Acknowledge(eventId As Guid)
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Collections.Generic.IEnumerable{System.Guid})
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Collections.Generic.IEnumerable{System.Guid})
  id: Acknowledge(System.Collections.Generic.IEnumerable{System.Guid})
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Acknowledge(IEnumerable<Guid>)
  nameWithType: EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable<Guid>)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Collections.Generic.IEnumerable<System.Guid>)
  type: Method
  source:
    id: Acknowledge
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 126
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAcknowledge a group of messages by event id (this will tell the server it has been processed)\n"
  remarks: There is no need to ack a message if you have Auto Ack enabled
  example: []
  syntax:
    content: public void Acknowledge(IEnumerable<Guid> events)
    parameters:
    - id: events
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The <xref href="EventStore.ClientAPI.ResolvedEvent" data-throw-if-not-resolved="false"></xref> OriginalEvent.EventIds to acknowledge there should be less than 2000 to ack at a time.
    content.vb: Public Sub Acknowledge(events As IEnumerable(Of Guid))
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge*
  nameWithType.vb: EventStorePersistentSubscriptionBase.Acknowledge(IEnumerable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Collections.Generic.IEnumerable(Of System.Guid))
  name.vb: Acknowledge(IEnumerable(Of Guid))
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(EventStore.ClientAPI.ResolvedEvent,EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(EventStore.ClientAPI.ResolvedEvent,EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  id: Fail(EventStore.ClientAPI.ResolvedEvent,EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Fail(ResolvedEvent, PersistentSubscriptionNakEventAction, String)
  nameWithType: EventStorePersistentSubscriptionBase.Fail(ResolvedEvent, PersistentSubscriptionNakEventAction, String)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(EventStore.ClientAPI.ResolvedEvent, EventStore.ClientAPI.PersistentSubscriptionNakEventAction, System.String)
  type: Method
  source:
    id: Fail
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 139
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nMark a message failed processing. The server will be take action based upon the action paramter\n"
  example: []
  syntax:
    content: public void Fail(ResolvedEvent event, PersistentSubscriptionNakEventAction action, string reason)
    parameters:
    - id: event
      type: EventStore.ClientAPI.ResolvedEvent
      description: The event to mark as failed
    - id: action
      type: EventStore.ClientAPI.PersistentSubscriptionNakEventAction
      description: The <xref href="EventStore.ClientAPI.PersistentSubscriptionNakEventAction" data-throw-if-not-resolved="false"></xref> action to take
    - id: reason
      type: System.String
      description: A string with a message as to why the failure is occurring
    content.vb: Public Sub Fail(event As ResolvedEvent, action As PersistentSubscriptionNakEventAction, reason As String)
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent},EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent},EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  id: Fail(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent},EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Fail(IEnumerable<ResolvedEvent>, PersistentSubscriptionNakEventAction, String)
  nameWithType: EventStorePersistentSubscriptionBase.Fail(IEnumerable<ResolvedEvent>, PersistentSubscriptionNakEventAction, String)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(System.Collections.Generic.IEnumerable<EventStore.ClientAPI.ResolvedEvent>, EventStore.ClientAPI.PersistentSubscriptionNakEventAction, System.String)
  type: Method
  source:
    id: Fail
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 149
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nMark nmessages that have failed processing. The server will take action based upon the action parameter\n"
  example: []
  syntax:
    content: public void Fail(IEnumerable<ResolvedEvent> events, PersistentSubscriptionNakEventAction action, string reason)
    parameters:
    - id: events
      type: System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent}
      description: The events to mark as failed
    - id: action
      type: EventStore.ClientAPI.PersistentSubscriptionNakEventAction
      description: The <xref href="EventStore.ClientAPI.PersistentSubscriptionNakEventAction" data-throw-if-not-resolved="false"></xref> action to take
    - id: reason
      type: System.String
      description: A string with a message as to why the failure is occurring
    content.vb: Public Sub Fail(events As IEnumerable(Of ResolvedEvent), action As PersistentSubscriptionNakEventAction, reason As String)
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail*
  nameWithType.vb: EventStorePersistentSubscriptionBase.Fail(IEnumerable(Of ResolvedEvent), PersistentSubscriptionNakEventAction, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(System.Collections.Generic.IEnumerable(Of EventStore.ClientAPI.ResolvedEvent), EventStore.ClientAPI.PersistentSubscriptionNakEventAction, System.String)
  name.vb: Fail(IEnumerable(Of ResolvedEvent), PersistentSubscriptionNakEventAction, String)
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop(System.TimeSpan)
  commentId: M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop(System.TimeSpan)
  id: Stop(System.TimeSpan)
  parent: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  langs:
  - csharp
  - vb
  name: Stop(TimeSpan)
  nameWithType: EventStorePersistentSubscriptionBase.Stop(TimeSpan)
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop(System.TimeSpan)
  type: Method
  source:
    id: Stop
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
    startLine: 163
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nDisconnects this client from the persistent subscriptions.\n"
  example: []
  syntax:
    content: public void Stop(TimeSpan timeout)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: ''
    content.vb: Public Sub Stop(timeout As TimeSpan)
  overload: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.ClientAPI.ResolvedEvent
  commentId: T:EventStore.ClientAPI.ResolvedEvent
  parent: EventStore.ClientAPI
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.ClientAPI.ResolvedEvent
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge*
  commentId: Overload:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge
  name: Acknowledge
  nameWithType: EventStorePersistentSubscriptionBase.Acknowledge
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge
- uid: System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent}
  commentId: T:System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ResolvedEvent>
  nameWithType: IEnumerable<ResolvedEvent>
  fullName: System.Collections.Generic.IEnumerable<EventStore.ClientAPI.ResolvedEvent>
  nameWithType.vb: IEnumerable(Of ResolvedEvent)
  fullName.vb: System.Collections.Generic.IEnumerable(Of EventStore.ClientAPI.ResolvedEvent)
  name.vb: IEnumerable(Of ResolvedEvent)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Collections.Generic.IEnumerable{System.Guid}
  commentId: T:System.Collections.Generic.IEnumerable{System.Guid}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Guid>
  nameWithType: IEnumerable<Guid>
  fullName: System.Collections.Generic.IEnumerable<System.Guid>
  nameWithType.vb: IEnumerable(Of Guid)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Guid)
  name.vb: IEnumerable(Of Guid)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.PersistentSubscriptionNakEventAction
  commentId: T:EventStore.ClientAPI.PersistentSubscriptionNakEventAction
  parent: EventStore.ClientAPI
  name: PersistentSubscriptionNakEventAction
  nameWithType: PersistentSubscriptionNakEventAction
  fullName: EventStore.ClientAPI.PersistentSubscriptionNakEventAction
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail*
  commentId: Overload:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail
  name: Fail
  nameWithType: EventStorePersistentSubscriptionBase.Fail
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
  isExternal: true
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop*
  commentId: Overload:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop
  name: Stop
  nameWithType: EventStorePersistentSubscriptionBase.Stop
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan

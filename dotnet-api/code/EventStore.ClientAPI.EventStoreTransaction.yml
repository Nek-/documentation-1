### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.EventStoreTransaction
  commentId: T:EventStore.ClientAPI.EventStoreTransaction
  id: EventStoreTransaction
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.EventStoreTransaction.CommitAsync
  - EventStore.ClientAPI.EventStoreTransaction.Dispose
  - EventStore.ClientAPI.EventStoreTransaction.Rollback
  - EventStore.ClientAPI.EventStoreTransaction.TransactionId
  - EventStore.ClientAPI.EventStoreTransaction.WriteAsync(EventStore.ClientAPI.EventData[])
  - EventStore.ClientAPI.EventStoreTransaction.WriteAsync(IEnumerable{EventStore.ClientAPI.EventData})
  langs:
  - csharp
  - vb
  name: EventStoreTransaction
  nameWithType: EventStoreTransaction
  fullName: EventStore.ClientAPI.EventStoreTransaction
  type: Class
  source:
    id: EventStoreTransaction
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreTransaction.cs
    startLine: 11
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRepresents a multi-request transaction with the Event Store\n"
  example: []
  syntax:
    content: 'public class EventStoreTransaction : IDisposable'
    content.vb: >-
      Public Class EventStoreTransaction
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.EventStoreTransaction.TransactionId
  commentId: F:EventStore.ClientAPI.EventStoreTransaction.TransactionId
  id: TransactionId
  parent: EventStore.ClientAPI.EventStoreTransaction
  langs:
  - csharp
  - vb
  name: TransactionId
  nameWithType: EventStoreTransaction.TransactionId
  fullName: EventStore.ClientAPI.EventStoreTransaction.TransactionId
  type: Field
  source:
    id: TransactionId
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreTransaction.cs
    startLine: 16
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe ID of the transaction. This can be used to recover\na transaction later.\n"
  example: []
  syntax:
    content: public readonly long TransactionId
    return:
      type: System.Int64
    content.vb: Public ReadOnly TransactionId As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.EventStoreTransaction.CommitAsync
  commentId: M:EventStore.ClientAPI.EventStoreTransaction.CommitAsync
  id: CommitAsync
  parent: EventStore.ClientAPI.EventStoreTransaction
  langs:
  - csharp
  - vb
  name: CommitAsync()
  nameWithType: EventStoreTransaction.CommitAsync()
  fullName: EventStore.ClientAPI.EventStoreTransaction.CommitAsync()
  type: Method
  source:
    id: CommitAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreTransaction.cs
    startLine: 42
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously commits this transaction\n"
  example: []
  syntax:
    content: public Task<WriteResult> CommitAsync()
    return:
      type: Task{EventStore.ClientAPI.WriteResult}
      description: A <see cref="!:Task"></see> that returns expected version for following write requests
    content.vb: Public Function CommitAsync As Task(Of WriteResult)
  overload: EventStore.ClientAPI.EventStoreTransaction.CommitAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.EventStoreTransaction.WriteAsync(EventStore.ClientAPI.EventData[])
  commentId: M:EventStore.ClientAPI.EventStoreTransaction.WriteAsync(EventStore.ClientAPI.EventData[])
  id: WriteAsync(EventStore.ClientAPI.EventData[])
  parent: EventStore.ClientAPI.EventStoreTransaction
  langs:
  - csharp
  - vb
  name: WriteAsync(EventData[])
  nameWithType: EventStoreTransaction.WriteAsync(EventData[])
  fullName: EventStore.ClientAPI.EventStoreTransaction.WriteAsync(EventStore.ClientAPI.EventData[])
  type: Method
  source:
    id: WriteAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreTransaction.cs
    startLine: 54
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWrites to a transaction in the event store asynchronously\n"
  example: []
  syntax:
    content: public Task WriteAsync(params EventData[] events)
    parameters:
    - id: events
      type: EventStore.ClientAPI.EventData[]
      description: The events to write
    return:
      type: Task
      description: A <see cref="!:Task"></see> allowing the caller to control the async operation
    content.vb: Public Function WriteAsync(ParamArray events As EventData()) As Task
  overload: EventStore.ClientAPI.EventStoreTransaction.WriteAsync*
  nameWithType.vb: EventStoreTransaction.WriteAsync(EventData())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.EventStoreTransaction.WriteAsync(EventStore.ClientAPI.EventData())
  name.vb: WriteAsync(EventData())
- uid: EventStore.ClientAPI.EventStoreTransaction.WriteAsync(IEnumerable{EventStore.ClientAPI.EventData})
  commentId: M:EventStore.ClientAPI.EventStoreTransaction.WriteAsync(IEnumerable{EventStore.ClientAPI.EventData})
  id: WriteAsync(IEnumerable{EventStore.ClientAPI.EventData})
  parent: EventStore.ClientAPI.EventStoreTransaction
  langs:
  - csharp
  - vb
  name: WriteAsync(IEnumerable<EventData>)
  nameWithType: EventStoreTransaction.WriteAsync(IEnumerable<EventData>)
  fullName: EventStore.ClientAPI.EventStoreTransaction.WriteAsync(IEnumerable<EventStore.ClientAPI.EventData>)
  type: Method
  source:
    id: WriteAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreTransaction.cs
    startLine: 63
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWrites to a transaction in the event store asynchronously\n"
  example: []
  syntax:
    content: public Task WriteAsync(IEnumerable<EventData> events)
    parameters:
    - id: events
      type: IEnumerable{EventStore.ClientAPI.EventData}
      description: The events to write
    return:
      type: Task
      description: A <see cref="!:Task"></see> allowing the caller to control the async operation
    content.vb: Public Function WriteAsync(events As IEnumerable(Of EventData)) As Task
  overload: EventStore.ClientAPI.EventStoreTransaction.WriteAsync*
  nameWithType.vb: EventStoreTransaction.WriteAsync(IEnumerable(Of EventData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.EventStoreTransaction.WriteAsync(IEnumerable(Of EventStore.ClientAPI.EventData))
  name.vb: WriteAsync(IEnumerable(Of EventData))
- uid: EventStore.ClientAPI.EventStoreTransaction.Rollback
  commentId: M:EventStore.ClientAPI.EventStoreTransaction.Rollback
  id: Rollback
  parent: EventStore.ClientAPI.EventStoreTransaction
  langs:
  - csharp
  - vb
  name: Rollback()
  nameWithType: EventStoreTransaction.Rollback()
  fullName: EventStore.ClientAPI.EventStoreTransaction.Rollback()
  type: Method
  source:
    id: Rollback
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreTransaction.cs
    startLine: 72
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRollsback this transaction.\n"
  example: []
  syntax:
    content: public void Rollback()
    content.vb: Public Sub Rollback
  overload: EventStore.ClientAPI.EventStoreTransaction.Rollback*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.EventStoreTransaction.Dispose
  commentId: M:EventStore.ClientAPI.EventStoreTransaction.Dispose
  id: Dispose
  parent: EventStore.ClientAPI.EventStoreTransaction
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: EventStoreTransaction.Dispose()
  fullName: EventStore.ClientAPI.EventStoreTransaction.Dispose()
  type: Method
  source:
    id: Dispose
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/EventStoreTransaction.cs
    startLine: 80
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nDisposes this transaction rolling it back if not already committed\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: EventStore.ClientAPI.EventStoreTransaction.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.ClientAPI.EventStoreTransaction.CommitAsync*
  commentId: Overload:EventStore.ClientAPI.EventStoreTransaction.CommitAsync
  name: CommitAsync
  nameWithType: EventStoreTransaction.CommitAsync
  fullName: EventStore.ClientAPI.EventStoreTransaction.CommitAsync
- uid: Task{EventStore.ClientAPI.WriteResult}
  commentId: '!:Task{EventStore.ClientAPI.WriteResult}'
  definition: Task`1
  name: Task<WriteResult>
  nameWithType: Task<WriteResult>
  fullName: Task<EventStore.ClientAPI.WriteResult>
  nameWithType.vb: Task(Of WriteResult)
  fullName.vb: Task(Of EventStore.ClientAPI.WriteResult)
  name.vb: Task(Of WriteResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.WriteResult
    name: WriteResult
    nameWithType: WriteResult
    fullName: EventStore.ClientAPI.WriteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.WriteResult
    name: WriteResult
    nameWithType: WriteResult
    fullName: EventStore.ClientAPI.WriteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreTransaction.WriteAsync*
  commentId: Overload:EventStore.ClientAPI.EventStoreTransaction.WriteAsync
  name: WriteAsync
  nameWithType: EventStoreTransaction.WriteAsync
  fullName: EventStore.ClientAPI.EventStoreTransaction.WriteAsync
- uid: EventStore.ClientAPI.EventData[]
  isExternal: true
  name: EventData[]
  nameWithType: EventData[]
  fullName: EventStore.ClientAPI.EventData[]
  nameWithType.vb: EventData()
  fullName.vb: EventStore.ClientAPI.EventData()
  name.vb: EventData()
  spec.csharp:
  - uid: EventStore.ClientAPI.EventData
    name: EventData
    nameWithType: EventData
    fullName: EventStore.ClientAPI.EventData
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.ClientAPI.EventData
    name: EventData
    nameWithType: EventData
    fullName: EventStore.ClientAPI.EventData
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: IEnumerable{EventStore.ClientAPI.EventData}
  commentId: '!:IEnumerable{EventStore.ClientAPI.EventData}'
  definition: IEnumerable`1
  name: IEnumerable<EventData>
  nameWithType: IEnumerable<EventData>
  fullName: IEnumerable<EventStore.ClientAPI.EventData>
  nameWithType.vb: IEnumerable(Of EventData)
  fullName.vb: IEnumerable(Of EventStore.ClientAPI.EventData)
  name.vb: IEnumerable(Of EventData)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventData
    name: EventData
    nameWithType: EventData
    fullName: EventStore.ClientAPI.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventData
    name: EventData
    nameWithType: EventData
    fullName: EventStore.ClientAPI.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreTransaction.Rollback*
  commentId: Overload:EventStore.ClientAPI.EventStoreTransaction.Rollback
  name: Rollback
  nameWithType: EventStoreTransaction.Rollback
  fullName: EventStore.ClientAPI.EventStoreTransaction.Rollback
- uid: EventStore.ClientAPI.EventStoreTransaction.Dispose*
  commentId: Overload:EventStore.ClientAPI.EventStoreTransaction.Dispose
  name: Dispose
  nameWithType: EventStoreTransaction.Dispose
  fullName: EventStore.ClientAPI.EventStoreTransaction.Dispose

### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.ExpectedVersion
  commentId: T:EventStore.ClientAPI.ExpectedVersion
  id: ExpectedVersion
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.ExpectedVersion.Any
  - EventStore.ClientAPI.ExpectedVersion.EmptyStream
  - EventStore.ClientAPI.ExpectedVersion.NoStream
  - EventStore.ClientAPI.ExpectedVersion.StreamExists
  langs:
  - csharp
  - vb
  name: ExpectedVersion
  nameWithType: ExpectedVersion
  fullName: EventStore.ClientAPI.ExpectedVersion
  type: Class
  source:
    id: ExpectedVersion
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ExpectedVersion.cs
    startLine: 17
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConstants used for expected version control\n"
  remarks: "\nThe use of expected version can be a bit tricky especially when discussing idempotency assurances given by Event Store.\n\nThere are four possible values you can use for passing an expected version.\nAny other value states that the last event written to the stream should have a sequence number matching your\nexpected value.\n\nEvent Store assures idempotency for all operations using any value in ExpectedVersion except for\nExpectedVersion.Any and ExpectedVersion.StreamExists. When using ExpectedVersion.Any or ExpectedVersion.StreamExists\nEvent Store does its best to assure idempotency but does not guarantee idempotency.\n"
  example: []
  syntax:
    content: public static class ExpectedVersion
    content.vb: Public Module ExpectedVersion
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.ClientAPI.ExpectedVersion.Any
  commentId: F:EventStore.ClientAPI.ExpectedVersion.Any
  id: Any
  parent: EventStore.ClientAPI.ExpectedVersion
  langs:
  - csharp
  - vb
  name: Any
  nameWithType: ExpectedVersion.Any
  fullName: EventStore.ClientAPI.ExpectedVersion.Any
  type: Field
  source:
    id: Any
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ExpectedVersion.cs
    startLine: 21
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe write should not conflict with anything and should always succeed.\n"
  example: []
  syntax:
    content: public const int Any = -2
    return:
      type: System.Int32
    content.vb: Public Const Any As Integer = -2
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.ExpectedVersion.NoStream
  commentId: F:EventStore.ClientAPI.ExpectedVersion.NoStream
  id: NoStream
  parent: EventStore.ClientAPI.ExpectedVersion
  langs:
  - csharp
  - vb
  name: NoStream
  nameWithType: ExpectedVersion.NoStream
  fullName: EventStore.ClientAPI.ExpectedVersion.NoStream
  type: Field
  source:
    id: NoStream
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ExpectedVersion.cs
    startLine: 26
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe stream should not yet exist. If it does exist treat that as a concurrency problem.\n"
  example: []
  syntax:
    content: public const int NoStream = -1
    return:
      type: System.Int32
    content.vb: Public Const NoStream As Integer = -1
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.ExpectedVersion.EmptyStream
  commentId: F:EventStore.ClientAPI.ExpectedVersion.EmptyStream
  id: EmptyStream
  parent: EventStore.ClientAPI.ExpectedVersion
  langs:
  - csharp
  - vb
  name: EmptyStream
  nameWithType: ExpectedVersion.EmptyStream
  fullName: EventStore.ClientAPI.ExpectedVersion.EmptyStream
  type: Field
  source:
    id: EmptyStream
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ExpectedVersion.cs
    startLine: 32
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe stream should exist but be empty when writing. If it does not exist or is not empty treat that as a concurrency problem.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("ExpectedVersion.EmptyStream has been deprecated. Use ExpectedVersion.NoStream instead")]

      public const int EmptyStream = -1
    return:
      type: System.Int32
    content.vb: >-
      <Obsolete("ExpectedVersion.EmptyStream has been deprecated. Use ExpectedVersion.NoStream instead")>

      Public Const EmptyStream As Integer = -1
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ExpectedVersion.EmptyStream has been deprecated. Use ExpectedVersion.NoStream instead
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.ExpectedVersion.StreamExists
  commentId: F:EventStore.ClientAPI.ExpectedVersion.StreamExists
  id: StreamExists
  parent: EventStore.ClientAPI.ExpectedVersion
  langs:
  - csharp
  - vb
  name: StreamExists
  nameWithType: ExpectedVersion.StreamExists
  fullName: EventStore.ClientAPI.ExpectedVersion.StreamExists
  type: Field
  source:
    id: StreamExists
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ExpectedVersion.cs
    startLine: 37
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe stream should exist. If it or a metadata stream does not exist treat that as a concurrency problem.\n"
  example: []
  syntax:
    content: public const int StreamExists = -4
    return:
      type: System.Int32
    content.vb: Public Const StreamExists As Integer = -4
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32

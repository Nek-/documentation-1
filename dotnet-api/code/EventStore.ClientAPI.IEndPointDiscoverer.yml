### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.IEndPointDiscoverer
  commentId: T:EventStore.ClientAPI.IEndPointDiscoverer
  id: IEndPointDiscoverer
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.IEndPointDiscoverer.DiscoverAsync(System.Net.IPEndPoint)
  langs:
  - csharp
  - vb
  name: IEndPointDiscoverer
  nameWithType: IEndPointDiscoverer
  fullName: EventStore.ClientAPI.IEndPointDiscoverer
  type: Interface
  source:
    id: IEndPointDiscoverer
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/IEndPointDiscoverer.cs
    startLine: 7
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRepresents a way of discovering cluster endpoints. This could be through gossip, consul, text files, etc\n"
  example: []
  syntax:
    content: public interface IEndPointDiscoverer
    content.vb: Public Interface IEndPointDiscoverer
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EventStore.ClientAPI.IEndPointDiscoverer.DiscoverAsync(System.Net.IPEndPoint)
  commentId: M:EventStore.ClientAPI.IEndPointDiscoverer.DiscoverAsync(System.Net.IPEndPoint)
  id: DiscoverAsync(System.Net.IPEndPoint)
  parent: EventStore.ClientAPI.IEndPointDiscoverer
  langs:
  - csharp
  - vb
  name: DiscoverAsync(IPEndPoint)
  nameWithType: IEndPointDiscoverer.DiscoverAsync(IPEndPoint)
  fullName: EventStore.ClientAPI.IEndPointDiscoverer.DiscoverAsync(System.Net.IPEndPoint)
  type: Method
  source:
    id: DiscoverAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/IEndPointDiscoverer.cs
    startLine: 12
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCalled to discover a new <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: Task<NodeEndPoints> DiscoverAsync(IPEndPoint failedTcpEndPoint)
    parameters:
    - id: failedTcpEndPoint
      type: System.Net.IPEndPoint
      description: The <xref href="System.Net.IPEndPoint" data-throw-if-not-resolved="false"></xref>The recently failed endpoint
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.NodeEndPoints}
    content.vb: Function DiscoverAsync(failedTcpEndPoint As IPEndPoint) As Task(Of NodeEndPoints)
  overload: EventStore.ClientAPI.IEndPointDiscoverer.DiscoverAsync*
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Net.IPEndPoint
  commentId: T:System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: EventStore.ClientAPI.IEndPointDiscoverer.DiscoverAsync*
  commentId: Overload:EventStore.ClientAPI.IEndPointDiscoverer.DiscoverAsync
  name: DiscoverAsync
  nameWithType: IEndPointDiscoverer.DiscoverAsync
  fullName: EventStore.ClientAPI.IEndPointDiscoverer.DiscoverAsync
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.NodeEndPoints}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.NodeEndPoints}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NodeEndPoints>
  nameWithType: Task<NodeEndPoints>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.NodeEndPoints>
  nameWithType.vb: Task(Of NodeEndPoints)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.NodeEndPoints)
  name.vb: Task(Of NodeEndPoints)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.NodeEndPoints
    name: NodeEndPoints
    nameWithType: NodeEndPoints
    fullName: EventStore.ClientAPI.NodeEndPoints
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.NodeEndPoints
    name: NodeEndPoints
    nameWithType: NodeEndPoints
    fullName: EventStore.ClientAPI.NodeEndPoints
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net
  commentId: N:System.Net
  isExternal: true
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks

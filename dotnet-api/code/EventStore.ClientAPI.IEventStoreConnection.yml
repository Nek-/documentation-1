### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.IEventStoreConnection
  commentId: T:EventStore.ClientAPI.IEventStoreConnection
  id: IEventStoreConnection
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int64,EventStore.ClientAPI.EventData[])
  - EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int64,EventStore.ClientAPI.SystemData.UserCredentials,EventStore.ClientAPI.EventData[])
  - EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.AuthenticationFailed
  - EventStore.ClientAPI.IEventStoreConnection.Close
  - EventStore.ClientAPI.IEventStoreConnection.Closed
  - EventStore.ClientAPI.IEventStoreConnection.ConditionalAppendToStreamAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.ConnectAsync
  - EventStore.ClientAPI.IEventStoreConnection.Connected
  - EventStore.ClientAPI.IEventStoreConnection.ConnectionName
  - EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscription(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Nullable{System.Int32},System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  - EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscriptionAsync(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Nullable{System.Int32},System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  - EventStore.ClientAPI.IEventStoreConnection.ContinueTransaction(System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.CreatePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.PersistentSubscriptionSettings,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.DeletePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync(System.String,System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync(System.String,System.Int64,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.Disconnected
  - EventStore.ClientAPI.IEventStoreConnection.ErrorOccurred
  - EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync(System.Boolean,EventStore.ClientAPI.Filter,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync(System.Boolean,EventStore.ClientAPI.Filter,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task},System.Int32,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.Filter,EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.Filter,EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task},System.Int32,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsRawBytesAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.ReadEventAsync(System.String,System.Int64,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsBackwardAsync(System.String,System.Int64,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsForwardAsync(System.String,System.Int64,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.Reconnecting
  - EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync(System.String,System.Int64,EventStore.ClientAPI.StreamMetadata,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync(System.String,System.Int64,System.Byte[],EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.SetSystemSettingsAsync(EventStore.ClientAPI.SystemSettings,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.Settings
  - EventStore.ClientAPI.IEventStoreConnection.StartTransactionAsync(System.String,System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllAsync(System.Boolean,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamAsync(System.String,System.Boolean,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamFrom(System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.UpdatePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.PersistentSubscriptionSettings,EventStore.ClientAPI.SystemData.UserCredentials)
  langs:
  - csharp
  - vb
  name: IEventStoreConnection
  nameWithType: IEventStoreConnection
  fullName: EventStore.ClientAPI.IEventStoreConnection
  type: Interface
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: IEventStoreConnection
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 20
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nMaintains a full duplex connection to Event Store.\n"
  remarks: "\nAn <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> operates differently than a SqlConnection. Normally\nwhen using an <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> you want to keep the connection open for a much longer of time than\nwhen you use a SqlConnection. If you prefer the usage pattern of using(new Connection()) .. then you would likely\nwant to create a FlyWeight on top of the <xref href=\"EventStore.ClientAPI.EventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref>.\n\nAnother difference is that with the <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> all operations are handled in a full async manner\n(even if you call the synchronous behaviors). Many threads can use an <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> at the same\ntime or a single thread can make many asynchronous requests. To get the best performance out of the connection\nit is generally recommended to use it in this way.\n"
  example: []
  syntax:
    content: 'public interface IEventStoreConnection : IDisposable'
    content.vb: >-
      Public Interface IEventStoreConnection

          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  extensionMethods:
  - EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  - EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  - EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  - EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  - EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EventStore.ClientAPI.IEventStoreConnection.ConnectionName
  commentId: P:EventStore.ClientAPI.IEventStoreConnection.ConnectionName
  id: ConnectionName
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: ConnectionName
  nameWithType: IEventStoreConnection.ConnectionName
  fullName: EventStore.ClientAPI.IEventStoreConnection.ConnectionName
  type: Property
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ConnectionName
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 25
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nGets the name of this connection. A connection name is useful for disambiguation\nin log files.\n"
  example: []
  syntax:
    content: string ConnectionName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property ConnectionName As String
  overload: EventStore.ClientAPI.IEventStoreConnection.ConnectionName*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.ClientAPI.IEventStoreConnection.ConnectAsync
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.ConnectAsync
  id: ConnectAsync
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: ConnectAsync()
  nameWithType: IEventStoreConnection.ConnectAsync()
  fullName: EventStore.ClientAPI.IEventStoreConnection.ConnectAsync()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ConnectAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 31
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nConnects the <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> asynchronously to a destination.\n"
  example: []
  syntax:
    content: Task ConnectAsync()
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> to wait upon.
    content.vb: Function ConnectAsync As Task
  overload: EventStore.ClientAPI.IEventStoreConnection.ConnectAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.Close
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.Close
  id: Close
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: IEventStoreConnection.Close()
  fullName: EventStore.ClientAPI.IEventStoreConnection.Close()
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Close
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 36
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nCloses this <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: void Close()
    content.vb: Sub Close
  overload: EventStore.ClientAPI.IEventStoreConnection.Close*
- uid: EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync(System.String,System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync(System.String,System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)
  id: DeleteStreamAsync(System.String,System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: DeleteStreamAsync(String, Int64, UserCredentials)
  nameWithType: IEventStoreConnection.DeleteStreamAsync(String, Int64, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync(System.String, System.Int64, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: DeleteStreamAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 45
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nDeletes a stream from Event Store asynchronously.\n"
  example: []
  syntax:
    content: Task<DeleteResult> DeleteStreamAsync(string stream, long expectedVersion, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream to delete.
    - id: expectedVersion
      type: System.Int64
      description: The expected version that the streams should have when being deleted. <xref href="EventStore.ClientAPI.ExpectedVersion" data-throw-if-not-resolved="false"></xref>
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.DeleteResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the results of the delete stream operation.
    content.vb: Function DeleteStreamAsync(stream As String, expectedVersion As Long, userCredentials As UserCredentials = Nothing) As Task(Of DeleteResult)
  overload: EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync(System.String,System.Int64,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync(System.String,System.Int64,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  id: DeleteStreamAsync(System.String,System.Int64,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: DeleteStreamAsync(String, Int64, Boolean, UserCredentials)
  nameWithType: IEventStoreConnection.DeleteStreamAsync(String, Int64, Boolean, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync(System.String, System.Int64, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: DeleteStreamAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 56
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nDeletes a stream from Event Store asynchronously.\n"
  example: []
  syntax:
    content: Task<DeleteResult> DeleteStreamAsync(string stream, long expectedVersion, bool hardDelete, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream to delete.
    - id: expectedVersion
      type: System.Int64
      description: The expected version that the streams should have when being deleted. <xref href="EventStore.ClientAPI.ExpectedVersion" data-throw-if-not-resolved="false"></xref>
    - id: hardDelete
      type: System.Boolean
      description: Indicator for tombstoning vs soft-deleting the stream. Tombstoned streams can never be recreated. Soft-deleted streams can be written to again, but the EventNumber sequence will not start from 0.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.DeleteResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the results of the delete stream operation.
    content.vb: Function DeleteStreamAsync(stream As String, expectedVersion As Long, hardDelete As Boolean, userCredentials As UserCredentials = Nothing) As Task(Of DeleteResult)
  overload: EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int64,EventStore.ClientAPI.EventData[])
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int64,EventStore.ClientAPI.EventData[])
  id: AppendToStreamAsync(System.String,System.Int64,EventStore.ClientAPI.EventData[])
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: AppendToStreamAsync(String, Int64, EventData[])
  nameWithType: IEventStoreConnection.AppendToStreamAsync(String, Int64, EventData[])
  fullName: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String, System.Int64, EventStore.ClientAPI.EventData[])
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: AppendToStreamAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 76
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAppends events asynchronously to a stream.\n"
  remarks: "\nWhen appending events to a stream the <xref href=\"EventStore.ClientAPI.ExpectedVersion\" data-throw-if-not-resolved=\"false\"></xref> choice can\nmake a large difference in the observed behavior. For example, if no stream exists\nand ExpectedVersion.Any is used, a new stream will be implicitly created when appending.\nTODO: Link above and below?\nThere are also differences in idempotency between different types of calls.\nIf you specify an ExpectedVersion aside from ExpectedVersion.Any, Event Store\nwill give you an idempotency guarantee. If using ExpectedVersion.Any, Event Store\nwill do its best to provide idempotency but does not guarantee idempotency.\n"
  example: []
  syntax:
    content: Task<WriteResult> AppendToStreamAsync(string stream, long expectedVersion, params EventData[] events)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream to append events to.
    - id: expectedVersion
      type: System.Int64
      description: The <xref href="EventStore.ClientAPI.ExpectedVersion" data-throw-if-not-resolved="false"></xref> of the stream to append to.
    - id: events
      type: EventStore.ClientAPI.EventData[]
      description: The events to append to the stream.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.WriteResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the results of the write operation.
    content.vb: Function AppendToStreamAsync(stream As String, expectedVersion As Long, ParamArray events As EventData()) As Task(Of WriteResult)
  overload: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync*
  nameWithType.vb: IEventStoreConnection.AppendToStreamAsync(String, Int64, EventData())
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String, System.Int64, EventStore.ClientAPI.EventData())
  name.vb: AppendToStreamAsync(String, Int64, EventData())
- uid: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int64,EventStore.ClientAPI.SystemData.UserCredentials,EventStore.ClientAPI.EventData[])
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int64,EventStore.ClientAPI.SystemData.UserCredentials,EventStore.ClientAPI.EventData[])
  id: AppendToStreamAsync(System.String,System.Int64,EventStore.ClientAPI.SystemData.UserCredentials,EventStore.ClientAPI.EventData[])
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: AppendToStreamAsync(String, Int64, UserCredentials, EventData[])
  nameWithType: IEventStoreConnection.AppendToStreamAsync(String, Int64, UserCredentials, EventData[])
  fullName: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String, System.Int64, EventStore.ClientAPI.SystemData.UserCredentials, EventStore.ClientAPI.EventData[])
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: AppendToStreamAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 96
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAppends events asynchronously to a stream.\n"
  remarks: "\nWhen appending events to a stream the <xref href=\"EventStore.ClientAPI.ExpectedVersion\" data-throw-if-not-resolved=\"false\"></xref> choice can\nmake a large difference in the observed behavior. For example, if no stream exists\nand ExpectedVersion.Any is used, a new stream will be implicitly created when appending.\n\nThere are also differences in idempotency between different types of calls.\nIf you specify an ExpectedVersion aside from ExpectedVersion.Any, Event Store\nwill give you an idempotency guarantee. If using ExpectedVersion.Any, Event Store\nwill do its best to provide idempotency but does not guarantee idempotency.\n"
  example: []
  syntax:
    content: Task<WriteResult> AppendToStreamAsync(string stream, long expectedVersion, UserCredentials userCredentials, params EventData[] events)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream to append events to.
    - id: expectedVersion
      type: System.Int64
      description: The <xref href="EventStore.ClientAPI.ExpectedVersion" data-throw-if-not-resolved="false"></xref> of the stream to append to.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    - id: events
      type: EventStore.ClientAPI.EventData[]
      description: The events to append to the stream.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.WriteResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the results of the write operation.
    content.vb: Function AppendToStreamAsync(stream As String, expectedVersion As Long, userCredentials As UserCredentials, ParamArray events As EventData()) As Task(Of WriteResult)
  overload: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync*
  nameWithType.vb: IEventStoreConnection.AppendToStreamAsync(String, Int64, UserCredentials, EventData())
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String, System.Int64, EventStore.ClientAPI.SystemData.UserCredentials, EventStore.ClientAPI.EventData())
  name.vb: AppendToStreamAsync(String, Int64, UserCredentials, EventData())
- uid: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData},EventStore.ClientAPI.SystemData.UserCredentials)
  id: AppendToStreamAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: AppendToStreamAsync(String, Int64, IEnumerable<EventData>, UserCredentials)
  nameWithType: IEventStoreConnection.AppendToStreamAsync(String, Int64, IEnumerable<EventData>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String, System.Int64, System.Collections.Generic.IEnumerable<EventStore.ClientAPI.EventData>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: AppendToStreamAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 117
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAppends events asynchronously to a stream.\n"
  remarks: "\nWhen appending events to a stream the <xref href=\"EventStore.ClientAPI.ExpectedVersion\" data-throw-if-not-resolved=\"false\"></xref> choice can\nmake a large difference in the observed behavior. For example, if no stream exists\nand ExpectedVersion.Any is used, a new stream will be implicitly created when appending.\n\nThere are also differences in idempotency between different types of calls.\nIf you specify an ExpectedVersion aside from ExpectedVersion.Any, Event Store\nwill give you an idempotency guarantee. If using ExpectedVersion.Any, Event Store\nwill do its best to provide idempotency but does not guarantee idempotency.\n"
  example: []
  syntax:
    content: Task<WriteResult> AppendToStreamAsync(string stream, long expectedVersion, IEnumerable<EventData> events, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream to append events to.
    - id: expectedVersion
      type: System.Int64
      description: The <xref href="EventStore.ClientAPI.ExpectedVersion" data-throw-if-not-resolved="false"></xref> of the stream to append to.
    - id: events
      type: System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData}
      description: The events to append to the stream.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.WriteResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the results of the write operation.
    content.vb: Function AppendToStreamAsync(stream As String, expectedVersion As Long, events As IEnumerable(Of EventData), userCredentials As UserCredentials = Nothing) As Task(Of WriteResult)
  overload: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync*
  nameWithType.vb: IEventStoreConnection.AppendToStreamAsync(String, Int64, IEnumerable(Of EventData), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String, System.Int64, System.Collections.Generic.IEnumerable(Of EventStore.ClientAPI.EventData), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: AppendToStreamAsync(String, Int64, IEnumerable(Of EventData), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnection.ConditionalAppendToStreamAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.ConditionalAppendToStreamAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData},EventStore.ClientAPI.SystemData.UserCredentials)
  id: ConditionalAppendToStreamAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: ConditionalAppendToStreamAsync(String, Int64, IEnumerable<EventData>, UserCredentials)
  nameWithType: IEventStoreConnection.ConditionalAppendToStreamAsync(String, Int64, IEnumerable<EventData>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.ConditionalAppendToStreamAsync(System.String, System.Int64, System.Collections.Generic.IEnumerable<EventStore.ClientAPI.EventData>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ConditionalAppendToStreamAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 138
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAppends events asynchronously to a stream if the stream version matches the <code data-dev-comment-type=\"paramref\" class=\"paramref\">expectedVersion</code>.\n"
  remarks: "\nWhen appending events to a stream the <xref href=\"EventStore.ClientAPI.ExpectedVersion\" data-throw-if-not-resolved=\"false\"></xref> choice can\nmake a large difference in the observed behavior. For example, if no stream exists\nand ExpectedVersion.Any is used, a new stream will be implicitly created when appending.\n\nThere are also differences in idempotency between different types of calls.\nIf you specify an ExpectedVersion aside from ExpectedVersion.Any, Event Store\nwill give you an idempotency guarantee. If using ExpectedVersion.Any, Event Store\nwill do its best to provide idempotency but does not guarantee idempotency.\n"
  example: []
  syntax:
    content: Task<ConditionalWriteResult> ConditionalAppendToStreamAsync(string stream, long expectedVersion, IEnumerable<EventData> events, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream to append events to.
    - id: expectedVersion
      type: System.Int64
      description: The <xref href="EventStore.ClientAPI.ExpectedVersion" data-throw-if-not-resolved="false"></xref> of the stream to append to.
    - id: events
      type: System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData}
      description: The events to append to the stream.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.ConditionalWriteResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> describing if the operation succeeded and, if not, the reason for failure (which can be either stream version mismatch or trying to write to a deleted stream).
    content.vb: Function ConditionalAppendToStreamAsync(stream As String, expectedVersion As Long, events As IEnumerable(Of EventData), userCredentials As UserCredentials = Nothing) As Task(Of ConditionalWriteResult)
  overload: EventStore.ClientAPI.IEventStoreConnection.ConditionalAppendToStreamAsync*
  nameWithType.vb: IEventStoreConnection.ConditionalAppendToStreamAsync(String, Int64, IEnumerable(Of EventData), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.ConditionalAppendToStreamAsync(System.String, System.Int64, System.Collections.Generic.IEnumerable(Of EventStore.ClientAPI.EventData), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: ConditionalAppendToStreamAsync(String, Int64, IEnumerable(Of EventData), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnection.StartTransactionAsync(System.String,System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.StartTransactionAsync(System.String,System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)
  id: StartTransactionAsync(System.String,System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: StartTransactionAsync(String, Int64, UserCredentials)
  nameWithType: IEventStoreConnection.StartTransactionAsync(String, Int64, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.StartTransactionAsync(System.String, System.Int64, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: StartTransactionAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 153
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nStarts an asynchronous transaction in Event Store on a given stream.\n"
  remarks: "\nA <xref href=\"EventStore.ClientAPI.EventStoreTransaction\" data-throw-if-not-resolved=\"false\"></xref> allows the calling of multiple writes with multiple\nround trips over long periods of time between the caller and Event Store. This method\nis only available through the TCP interface and no equivalent exists for the RESTful interface.\n"
  example: []
  syntax:
    content: Task<EventStoreTransaction> StartTransactionAsync(string stream, long expectedVersion, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The stream to start a transaction on.
    - id: expectedVersion
      type: System.Int64
      description: The expected version of the stream at the time of starting the transaction.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStoreTransaction}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> representing a multi-request transaction.
    content.vb: Function StartTransactionAsync(stream As String, expectedVersion As Long, userCredentials As UserCredentials = Nothing) As Task(Of EventStoreTransaction)
  overload: EventStore.ClientAPI.IEventStoreConnection.StartTransactionAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.ContinueTransaction(System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.ContinueTransaction(System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)
  id: ContinueTransaction(System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: ContinueTransaction(Int64, UserCredentials)
  nameWithType: IEventStoreConnection.ContinueTransaction(Int64, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.ContinueTransaction(System.Int64, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ContinueTransaction
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 167
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nContinues specified transaction.\n"
  remarks: "\nA <xref href=\"EventStore.ClientAPI.EventStoreTransaction\" data-throw-if-not-resolved=\"false\"></xref> allows the calling of multiple writes with multiple\nround trips over long periods of time between the caller and the event store. This method\nis only available through the TCP interface and no equivalent exists for the RESTful interface.\n"
  example: []
  syntax:
    content: EventStoreTransaction ContinueTransaction(long transactionId, UserCredentials userCredentials = null)
    parameters:
    - id: transactionId
      type: System.Int64
      description: The transaction ID that needs to be continued.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: EventStore.ClientAPI.EventStoreTransaction
      description: A <xref href="EventStore.ClientAPI.EventStoreTransaction" data-throw-if-not-resolved="false"></xref> representing a multi-request transaction.
    content.vb: Function ContinueTransaction(transactionId As Long, userCredentials As UserCredentials = Nothing) As EventStoreTransaction
  overload: EventStore.ClientAPI.IEventStoreConnection.ContinueTransaction*
- uid: EventStore.ClientAPI.IEventStoreConnection.ReadEventAsync(System.String,System.Int64,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.ReadEventAsync(System.String,System.Int64,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  id: ReadEventAsync(System.String,System.Int64,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: ReadEventAsync(String, Int64, Boolean, UserCredentials)
  nameWithType: IEventStoreConnection.ReadEventAsync(String, Int64, Boolean, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.ReadEventAsync(System.String, System.Int64, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ReadEventAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 177
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously reads a single event from a stream.\n"
  example: []
  syntax:
    content: Task<EventReadResult> ReadEventAsync(string stream, long eventNumber, bool resolveLinkTos, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The stream to read from
    - id: eventNumber
      type: System.Int64
      description: The event number to read, <xref href="EventStore.ClientAPI.StreamPosition" data-throw-if-not-resolved="false"></xref> to read the last event in the stream
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve LinkTo events automatically
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.EventReadResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the results of the read operation.
    content.vb: Function ReadEventAsync(stream As String, eventNumber As Long, resolveLinkTos As Boolean, userCredentials As UserCredentials = Nothing) As Task(Of EventReadResult)
  overload: EventStore.ClientAPI.IEventStoreConnection.ReadEventAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsForwardAsync(System.String,System.Int64,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsForwardAsync(System.String,System.Int64,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  id: ReadStreamEventsForwardAsync(System.String,System.Int64,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: ReadStreamEventsForwardAsync(String, Int64, Int32, Boolean, UserCredentials)
  nameWithType: IEventStoreConnection.ReadStreamEventsForwardAsync(String, Int64, Int32, Boolean, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsForwardAsync(System.String, System.Int64, System.Int32, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ReadStreamEventsForwardAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 189
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously reads count events from an event stream forwards (e.g. oldest to newest) starting from position start.\n"
  example: []
  syntax:
    content: Task<StreamEventsSlice> ReadStreamEventsForwardAsync(string stream, long start, int count, bool resolveLinkTos, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The stream to read from.
    - id: start
      type: System.Int64
      description: The starting point to read from.
    - id: count
      type: System.Int32
      description: The count of items to read.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve LinkTo events automatically.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.StreamEventsSlice}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the results of the read operation.
    content.vb: Function ReadStreamEventsForwardAsync(stream As String, start As Long, count As Integer, resolveLinkTos As Boolean, userCredentials As UserCredentials = Nothing) As Task(Of StreamEventsSlice)
  overload: EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsForwardAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsBackwardAsync(System.String,System.Int64,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsBackwardAsync(System.String,System.Int64,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  id: ReadStreamEventsBackwardAsync(System.String,System.Int64,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: ReadStreamEventsBackwardAsync(String, Int64, Int32, Boolean, UserCredentials)
  nameWithType: IEventStoreConnection.ReadStreamEventsBackwardAsync(String, Int64, Int32, Boolean, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsBackwardAsync(System.String, System.Int64, System.Int32, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ReadStreamEventsBackwardAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 201
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously reads count events from an event stream backwards (e.g. newest to oldest) from position.\n"
  example: []
  syntax:
    content: Task<StreamEventsSlice> ReadStreamEventsBackwardAsync(string stream, long start, int count, bool resolveLinkTos, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The stream to read from.
    - id: start
      type: System.Int64
      description: The position to start reading from.
    - id: count
      type: System.Int32
      description: The count to read from the position.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve LinkTo events automatically.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.StreamEventsSlice}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the results of the read operation.
    content.vb: Function ReadStreamEventsBackwardAsync(stream As String, start As Long, count As Integer, resolveLinkTos As Boolean, userCredentials As UserCredentials = Nothing) As Task(Of StreamEventsSlice)
  overload: EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsBackwardAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  id: ReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: ReadAllEventsForwardAsync(Position, Int32, Boolean, UserCredentials)
  nameWithType: IEventStoreConnection.ReadAllEventsForwardAsync(Position, Int32, Boolean, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsForwardAsync(EventStore.ClientAPI.Position, System.Int32, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ReadAllEventsForwardAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 212
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously reads all events in the node forward (e.g. beginning to end).\n"
  example: []
  syntax:
    content: Task<AllEventsSlice> ReadAllEventsForwardAsync(Position position, int maxCount, bool resolveLinkTos, UserCredentials userCredentials = null)
    parameters:
    - id: position
      type: EventStore.ClientAPI.Position
      description: The position to start reading from.
    - id: maxCount
      type: System.Int32
      description: The maximum count to read.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve LinkTo events automatically.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.AllEventsSlice}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the records read.
    content.vb: Function ReadAllEventsForwardAsync(position As Position, maxCount As Integer, resolveLinkTos As Boolean, userCredentials As UserCredentials = Nothing) As Task(Of AllEventsSlice)
  overload: EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsForwardAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,EventStore.ClientAPI.SystemData.UserCredentials)
  id: FilteredReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: FilteredReadAllEventsForwardAsync(Position, Int32, Boolean, Filter, UserCredentials)
  nameWithType: IEventStoreConnection.FilteredReadAllEventsForwardAsync(Position, Int32, Boolean, Filter, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsForwardAsync(EventStore.ClientAPI.Position, System.Int32, System.Boolean, EventStore.ClientAPI.Filter, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: FilteredReadAllEventsForwardAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 224
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously reads all events in the node forward (e.g. beginning to end). Filters events based upon the passed in filter.\n"
  example: []
  syntax:
    content: Task<AllEventsSlice> FilteredReadAllEventsForwardAsync(Position position, int maxCount, bool resolveLinkTos, Filter filter, UserCredentials userCredentials = null)
    parameters:
    - id: position
      type: EventStore.ClientAPI.Position
      description: The position to start reading from.
    - id: maxCount
      type: System.Int32
      description: The maximum count to read.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve LinkTo events automatically.
    - id: filter
      type: EventStore.ClientAPI.Filter
      description: An <xref href="EventStore.ClientAPI.Filter" data-throw-if-not-resolved="false"></xref> to be applied to the read operation.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.AllEventsSlice}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the records read.
    content.vb: Function FilteredReadAllEventsForwardAsync(position As Position, maxCount As Integer, resolveLinkTos As Boolean, filter As Filter, userCredentials As UserCredentials = Nothing) As Task(Of AllEventsSlice)
  overload: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsForwardAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials)
  id: FilteredReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: FilteredReadAllEventsForwardAsync(Position, Int32, Boolean, Filter, Int32, UserCredentials)
  nameWithType: IEventStoreConnection.FilteredReadAllEventsForwardAsync(Position, Int32, Boolean, Filter, Int32, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsForwardAsync(EventStore.ClientAPI.Position, System.Int32, System.Boolean, EventStore.ClientAPI.Filter, System.Int32, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: FilteredReadAllEventsForwardAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 237
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously reads all events in the node forward (e.g. beginning to end). Filters events based upon the passed in filter.\n"
  example: []
  syntax:
    content: Task<AllEventsSlice> FilteredReadAllEventsForwardAsync(Position position, int maxCount, bool resolveLinkTos, Filter filter, int maxSearchWindow, UserCredentials userCredentials = null)
    parameters:
    - id: position
      type: EventStore.ClientAPI.Position
      description: The position to start reading from.
    - id: maxCount
      type: System.Int32
      description: The maximum count to read.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve LinkTo events automatically.
    - id: filter
      type: EventStore.ClientAPI.Filter
      description: An <xref href="EventStore.ClientAPI.Filter" data-throw-if-not-resolved="false"></xref> to be applied to the read operation.
    - id: maxSearchWindow
      type: System.Int32
      description: The maximum number of events examined before returning a slice.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.AllEventsSlice}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the records read.
    content.vb: Function FilteredReadAllEventsForwardAsync(position As Position, maxCount As Integer, resolveLinkTos As Boolean, filter As Filter, maxSearchWindow As Integer, userCredentials As UserCredentials = Nothing) As Task(Of AllEventsSlice)
  overload: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsForwardAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  id: ReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: ReadAllEventsBackwardAsync(Position, Int32, Boolean, UserCredentials)
  nameWithType: IEventStoreConnection.ReadAllEventsBackwardAsync(Position, Int32, Boolean, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsBackwardAsync(EventStore.ClientAPI.Position, System.Int32, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ReadAllEventsBackwardAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 249
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously reads all events in the node backwards (e.g. end to beginning).\n"
  example: []
  syntax:
    content: Task<AllEventsSlice> ReadAllEventsBackwardAsync(Position position, int maxCount, bool resolveLinkTos, UserCredentials userCredentials = null)
    parameters:
    - id: position
      type: EventStore.ClientAPI.Position
      description: The position to start reading from.
    - id: maxCount
      type: System.Int32
      description: The maximum count to read.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve Link events automatically.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.AllEventsSlice}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the records read.
    content.vb: Function ReadAllEventsBackwardAsync(position As Position, maxCount As Integer, resolveLinkTos As Boolean, userCredentials As UserCredentials = Nothing) As Task(Of AllEventsSlice)
  overload: EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsBackwardAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials)
  id: FilteredReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: FilteredReadAllEventsBackwardAsync(Position, Int32, Boolean, Filter, Int32, UserCredentials)
  nameWithType: IEventStoreConnection.FilteredReadAllEventsBackwardAsync(Position, Int32, Boolean, Filter, Int32, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsBackwardAsync(EventStore.ClientAPI.Position, System.Int32, System.Boolean, EventStore.ClientAPI.Filter, System.Int32, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: FilteredReadAllEventsBackwardAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 262
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously reads all events in the node backwards (e.g. end to beginning). Filters events based upon the passed in filter.\n"
  example: []
  syntax:
    content: Task<AllEventsSlice> FilteredReadAllEventsBackwardAsync(Position position, int maxCount, bool resolveLinkTos, Filter filter, int maxSearchWindow, UserCredentials userCredentials = null)
    parameters:
    - id: position
      type: EventStore.ClientAPI.Position
      description: The position to start reading from.
    - id: maxCount
      type: System.Int32
      description: The maximum count to read.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve LinkTo events automatically.
    - id: filter
      type: EventStore.ClientAPI.Filter
      description: An <xref href="EventStore.ClientAPI.Filter" data-throw-if-not-resolved="false"></xref> to be applied to the read operation.
    - id: maxSearchWindow
      type: System.Int32
      description: The maximum number of events examined before returning a slice.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.AllEventsSlice}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the records read.
    content.vb: Function FilteredReadAllEventsBackwardAsync(position As Position, maxCount As Integer, resolveLinkTos As Boolean, filter As Filter, maxSearchWindow As Integer, userCredentials As UserCredentials = Nothing) As Task(Of AllEventsSlice)
  overload: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsBackwardAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,EventStore.ClientAPI.SystemData.UserCredentials)
  id: FilteredReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.Filter,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: FilteredReadAllEventsBackwardAsync(Position, Int32, Boolean, Filter, UserCredentials)
  nameWithType: IEventStoreConnection.FilteredReadAllEventsBackwardAsync(Position, Int32, Boolean, Filter, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsBackwardAsync(EventStore.ClientAPI.Position, System.Int32, System.Boolean, EventStore.ClientAPI.Filter, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: FilteredReadAllEventsBackwardAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 274
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously reads all events in the node backwards (e.g. end to beginning). Filters events based upon the passed in filter.\n"
  example: []
  syntax:
    content: Task<AllEventsSlice> FilteredReadAllEventsBackwardAsync(Position position, int maxCount, bool resolveLinkTos, Filter filter, UserCredentials userCredentials = null)
    parameters:
    - id: position
      type: EventStore.ClientAPI.Position
      description: The position to start reading from.
    - id: maxCount
      type: System.Int32
      description: The maximum count to read.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve LinkTo events automatically.
    - id: filter
      type: EventStore.ClientAPI.Filter
      description: An <xref href="EventStore.ClientAPI.Filter" data-throw-if-not-resolved="false"></xref> to be applied to the read operation.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The optional user credentials to perform operation with.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.AllEventsSlice}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the records read.
    content.vb: Function FilteredReadAllEventsBackwardAsync(position As Position, maxCount As Integer, resolveLinkTos As Boolean, filter As Filter, userCredentials As UserCredentials = Nothing) As Task(Of AllEventsSlice)
  overload: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsBackwardAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamAsync(System.String,System.Boolean,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamAsync(System.String,System.Boolean,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  id: SubscribeToStreamAsync(System.String,System.Boolean,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: SubscribeToStreamAsync(String, Boolean, Func<EventStoreSubscription, ResolvedEvent, Task>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnection.SubscribeToStreamAsync(String, Boolean, Func<EventStoreSubscription, ResolvedEvent, Task>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamAsync(System.String, System.Boolean, System.Func<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SubscribeToStreamAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 288
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously subscribes to a single event stream. New events\nwritten to the stream while the subscription is active will be\npushed to the client.\n"
  example: []
  syntax:
    content: Task<EventStoreSubscription> SubscribeToStreamAsync(string stream, bool resolveLinkTos, Func<EventStoreSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The stream to subscribe to.
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve Link events automatically.
    - id: eventAppeared
      type: System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
      description: A Task invoked and awaited when a new event is received over the subscription.
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStoreSubscription}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> representing the subscription.
    content.vb: Function SubscribeToStreamAsync(stream As String, resolveLinkTos As Boolean, eventAppeared As Func(Of EventStoreSubscription, ResolvedEvent, Task), subscriptionDropped As Action(Of EventStoreSubscription, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing) As Task(Of EventStoreSubscription)
  overload: EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamAsync*
  nameWithType.vb: IEventStoreConnection.SubscribeToStreamAsync(String, Boolean, Func(Of EventStoreSubscription, ResolvedEvent, Task), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamAsync(System.String, System.Boolean, System.Func(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToStreamAsync(String, Boolean, Func(Of EventStoreSubscription, ResolvedEvent, Task), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamFrom(System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamFrom(System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  id: SubscribeToStreamFrom(System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: SubscribeToStreamFrom(String, Nullable<Int64>, CatchUpSubscriptionSettings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnection.SubscribeToStreamFrom(String, Nullable<Int64>, CatchUpSubscriptionSettings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamFrom(System.String, System.Nullable<System.Int64>, EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Func<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SubscribeToStreamFrom
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 325
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscribes to a single event stream. Existing events from\nlastCheckpoint onwards are read from the stream\nand presented to the user of <xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref>\nas if they had been pushed.\n\nOnce the end of the stream is read the subscription is\ntransparently (to the user) switched to push new events as\nthey are written.\n\nThe action liveProcessingStarted is called when the\n<xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref> switches from the reading\nphase to the live subscription phase.\n"
  example: []
  syntax:
    content: EventStoreStreamCatchUpSubscription SubscribeToStreamFrom(string stream, long? lastCheckpoint, CatchUpSubscriptionSettings settings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreCatchUpSubscription> liveProcessingStarted = null, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The stream to subscribe to.
    - id: lastCheckpoint
      type: System.Nullable{System.Int64}
      description: >-
        The event number from which to start.


        To receive all events in the stream, use <xref href="EventStore.ClientAPI.StreamCheckpoint.StreamStart" data-throw-if-not-resolved="false"></xref>.

        If events have already been received and resubscription from the same point

        is desired, use the event number of the last event processed which

        appeared on the subscription.


        Using <xref href="EventStore.ClientAPI.StreamPosition.Start" data-throw-if-not-resolved="false"></xref> here will result in missing

        the first event in the stream.
    - id: settings
      type: EventStore.ClientAPI.CatchUpSubscriptionSettings
      description: The <xref href="EventStore.ClientAPI.CatchUpSubscriptionSettings" data-throw-if-not-resolved="false"></xref> for the subscription.
    - id: eventAppeared
      type: System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
      description: A Task invoked and awaited when a new event is received over the subscription.
    - id: liveProcessingStarted
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription}
      description: An action invoked when the subscription switches to newly-pushed events.
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
      description: An <xref href="EventStore.ClientAPI.EventStoreStreamCatchUpSubscription" data-throw-if-not-resolved="false"></xref> representing the subscription.
    content.vb: Function SubscribeToStreamFrom(stream As String, lastCheckpoint As Long?, settings As CatchUpSubscriptionSettings, eventAppeared As Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), liveProcessingStarted As Action(Of EventStoreCatchUpSubscription) = Nothing, subscriptionDropped As Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing) As EventStoreStreamCatchUpSubscription
  overload: EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamFrom*
  nameWithType.vb: IEventStoreConnection.SubscribeToStreamFrom(String, Nullable(Of Int64), CatchUpSubscriptionSettings, Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamFrom(System.String, System.Nullable(Of System.Int64), EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Func(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToStreamFrom(String, Nullable(Of Int64), CatchUpSubscriptionSettings, Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllAsync(System.Boolean,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllAsync(System.Boolean,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  id: SubscribeToAllAsync(System.Boolean,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: SubscribeToAllAsync(Boolean, Func<EventStoreSubscription, ResolvedEvent, Task>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnection.SubscribeToAllAsync(Boolean, Func<EventStoreSubscription, ResolvedEvent, Task>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllAsync(System.Boolean, System.Func<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SubscribeToAllAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 345
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously subscribes to all events in Event Store. New\nevents written to the stream while the subscription is active\nwill be pushed to the client.\n"
  example: []
  syntax:
    content: Task<EventStoreSubscription> SubscribeToAllAsync(bool resolveLinkTos, Func<EventStoreSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null)
    parameters:
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve Link events automatically.
    - id: eventAppeared
      type: System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
      description: A Task invoked and awaited when a new event is received over the subscription.
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStoreSubscription}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> representing the subscription.
    content.vb: Function SubscribeToAllAsync(resolveLinkTos As Boolean, eventAppeared As Func(Of EventStoreSubscription, ResolvedEvent, Task), subscriptionDropped As Action(Of EventStoreSubscription, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing) As Task(Of EventStoreSubscription)
  overload: EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllAsync*
  nameWithType.vb: IEventStoreConnection.SubscribeToAllAsync(Boolean, Func(Of EventStoreSubscription, ResolvedEvent, Task), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllAsync(System.Boolean, System.Func(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToAllAsync(Boolean, Func(Of EventStoreSubscription, ResolvedEvent, Task), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync(System.Boolean,EventStore.ClientAPI.Filter,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task},System.Int32,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync(System.Boolean,EventStore.ClientAPI.Filter,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task},System.Int32,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  id: FilteredSubscribeToAllAsync(System.Boolean,EventStore.ClientAPI.Filter,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task},System.Int32,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: FilteredSubscribeToAllAsync(Boolean, Filter, Func<EventStoreSubscription, ResolvedEvent, Task>, Func<EventStoreSubscription, Position, Task>, Int32, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnection.FilteredSubscribeToAllAsync(Boolean, Filter, Func<EventStoreSubscription, ResolvedEvent, Task>, Func<EventStoreSubscription, Position, Task>, Int32, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync(System.Boolean, EventStore.ClientAPI.Filter, System.Func<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Func<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.Position, System.Threading.Tasks.Task>, System.Int32, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: FilteredSubscribeToAllAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 367
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously subscribes to all events in Event Store. New\nevents written to the stream while the subscription is active\nwill be pushed to the client. Filters events based upon the passed in filter.\n"
  example: []
  syntax:
    content: Task<EventStoreSubscription> FilteredSubscribeToAllAsync(bool resolveLinkTos, Filter filter, Func<EventStoreSubscription, ResolvedEvent, Task> eventAppeared, Func<EventStoreSubscription, Position, Task> checkpointReached, int checkpointInterval, Action<EventStoreSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null)
    parameters:
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve Link events automatically.
    - id: filter
      type: EventStore.ClientAPI.Filter
      description: A <xref href="EventStore.ClientAPI.Filter" data-throw-if-not-resolved="false"></xref> to be applied to the read operation.
    - id: eventAppeared
      type: System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
      description: A Task invoked and awaited when a new event is received over the subscription.
    - id: checkpointReached
      type: System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task}
      description: "\nA Task invoked and await when a checkpoint is reached.\nSet the checkpointInterval to define how often this method is called.\n"
    - id: checkpointInterval
      type: System.Int32
      description: Sets how often the checkpointReached callback is called.
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStoreSubscription}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> representing the subscription.
    content.vb: Function FilteredSubscribeToAllAsync(resolveLinkTos As Boolean, filter As Filter, eventAppeared As Func(Of EventStoreSubscription, ResolvedEvent, Task), checkpointReached As Func(Of EventStoreSubscription, Position, Task), checkpointInterval As Integer, subscriptionDropped As Action(Of EventStoreSubscription, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing) As Task(Of EventStoreSubscription)
  overload: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync*
  nameWithType.vb: IEventStoreConnection.FilteredSubscribeToAllAsync(Boolean, Filter, Func(Of EventStoreSubscription, ResolvedEvent, Task), Func(Of EventStoreSubscription, Position, Task), Int32, Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync(System.Boolean, EventStore.ClientAPI.Filter, System.Func(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Func(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.Position, System.Threading.Tasks.Task), System.Int32, System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: FilteredSubscribeToAllAsync(Boolean, Filter, Func(Of EventStoreSubscription, ResolvedEvent, Task), Func(Of EventStoreSubscription, Position, Task), Int32, Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync(System.Boolean,EventStore.ClientAPI.Filter,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync(System.Boolean,EventStore.ClientAPI.Filter,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  id: FilteredSubscribeToAllAsync(System.Boolean,EventStore.ClientAPI.Filter,System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: FilteredSubscribeToAllAsync(Boolean, Filter, Func<EventStoreSubscription, ResolvedEvent, Task>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnection.FilteredSubscribeToAllAsync(Boolean, Filter, Func<EventStoreSubscription, ResolvedEvent, Task>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync(System.Boolean, EventStore.ClientAPI.Filter, System.Func<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: FilteredSubscribeToAllAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 387
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously subscribes to all events in Event Store. New\nevents written to the stream while the subscription is active\nwill be pushed to the client. Filters events based upon the passed in filter.\n"
  example: []
  syntax:
    content: Task<EventStoreSubscription> FilteredSubscribeToAllAsync(bool resolveLinkTos, Filter filter, Func<EventStoreSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null)
    parameters:
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve Link events automatically.
    - id: filter
      type: EventStore.ClientAPI.Filter
      description: A <xref href="EventStore.ClientAPI.Filter" data-throw-if-not-resolved="false"></xref> to be applied to the read operation.
    - id: eventAppeared
      type: System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
      description: A Task invoked and awaited when a new event is received over the subscription.
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStoreSubscription}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> representing the subscription.
    content.vb: Function FilteredSubscribeToAllAsync(resolveLinkTos As Boolean, filter As Filter, eventAppeared As Func(Of EventStoreSubscription, ResolvedEvent, Task), subscriptionDropped As Action(Of EventStoreSubscription, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing) As Task(Of EventStoreSubscription)
  overload: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync*
  nameWithType.vb: IEventStoreConnection.FilteredSubscribeToAllAsync(Boolean, Filter, Func(Of EventStoreSubscription, ResolvedEvent, Task), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync(System.Boolean, EventStore.ClientAPI.Filter, System.Func(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: FilteredSubscribeToAllAsync(Boolean, Filter, Func(Of EventStoreSubscription, ResolvedEvent, Task), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscription(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Nullable{System.Int32},System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscription(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Nullable{System.Int32},System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  id: ConnectToPersistentSubscription(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Nullable{System.Int32},System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: ConnectToPersistentSubscription(String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable<Int32>, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnection.ConnectToPersistentSubscription(String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable<Int32>, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscription(System.String, System.String, System.Func<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Nullable<System.Int32>, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ConnectToPersistentSubscription
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 412
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscribes to a persistent subscription (competing consumer) on an event store.\n"
  remarks: >
    This will connect you to a persistent subscription group for a stream. The subscription group

    must first be created with CreatePersistentSubscriptionAsync. Many connections

    can connect to the same group and they will be treated as competing consumers within the group.

    If one connection dies work will be balanced across the rest of the consumers in the group. If

    you attempt to connect to a group that does not exist you will be given an exception.
  example: []
  syntax:
    content: EventStorePersistentSubscriptionBase ConnectToPersistentSubscription(string stream, string groupName, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, int?, Task> eventAppeared, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null, int bufferSize = 10, bool autoAck = true)
    parameters:
    - id: stream
      type: System.String
      description: The stream to subscribe to.
    - id: groupName
      type: System.String
      description: The subscription group to connect to.
    - id: eventAppeared
      type: System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Nullable{System.Int32},System.Threading.Tasks.Task}
      description: A Task invoked and awaited when a new event is received over the subscription.
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    - id: bufferSize
      type: System.Int32
      description: The buffer size to use for the persistent subscription.
    - id: autoAck
      type: System.Boolean
      description: >-
        Whether the subscription should automatically acknowledge messages processed.

        If not set the receiver is required to explicitly acknowledge messages through the subscription.
    return:
      type: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
      description: An <xref href="EventStore.ClientAPI.EventStorePersistentSubscriptionBase" data-throw-if-not-resolved="false"></xref> representing the subscription.
    content.vb: Function ConnectToPersistentSubscription(stream As String, groupName As String, eventAppeared As Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Integer?, Task), subscriptionDropped As Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing, bufferSize As Integer = 10, autoAck As Boolean = True) As EventStorePersistentSubscriptionBase
  overload: EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscription*
  nameWithType.vb: IEventStoreConnection.ConnectToPersistentSubscription(String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable(Of Int32), Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscription(System.String, System.String, System.Func(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Nullable(Of System.Int32), System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscription(String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable(Of Int32), Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
- uid: EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscriptionAsync(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Nullable{System.Int32},System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscriptionAsync(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Nullable{System.Int32},System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  id: ConnectToPersistentSubscriptionAsync(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Nullable{System.Int32},System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: ConnectToPersistentSubscriptionAsync(String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable<Int32>, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnection.ConnectToPersistentSubscriptionAsync(String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable<Int32>, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscriptionAsync(System.String, System.String, System.Func<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Nullable<System.Int32>, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ConnectToPersistentSubscriptionAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 439
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously subscribes to a persistent subscription (competing consumer) on an event store.\n"
  remarks: >
    This will connect you to a persistent subscription group for a stream. The subscription group

    must first be created with CreatePersistentSubscriptionAsync. Many connections

    can connect to the same group and they will be treated as competing consumers within the group.

    If one connection dies work will be balanced across the rest of the consumers in the group. If

    you attempt to connect to a group that does not exist you will be given an exception.
  example: []
  syntax:
    content: Task<EventStorePersistentSubscriptionBase> ConnectToPersistentSubscriptionAsync(string stream, string groupName, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, int?, Task> eventAppeared, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null, int bufferSize = 10, bool autoAck = true)
    parameters:
    - id: stream
      type: System.String
      description: The stream to subscribe to.
    - id: groupName
      type: System.String
      description: The subscription group to connect to.
    - id: eventAppeared
      type: System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Nullable{System.Int32},System.Threading.Tasks.Task}
      description: A Task invoked and awaited when a new event is received over the subscription.
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    - id: bufferSize
      type: System.Int32
      description: The buffer size to use for the persistent subscription.
    - id: autoAck
      type: System.Boolean
      description: >-
        Whether the subscription should automatically acknowledge messages processed.

        If not set the receiver is required to explicitly acknowledge messages through the subscription.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStorePersistentSubscriptionBase}
      description: An <xref href="EventStore.ClientAPI.EventStorePersistentSubscriptionBase" data-throw-if-not-resolved="false"></xref> representing the subscription.
    content.vb: Function ConnectToPersistentSubscriptionAsync(stream As String, groupName As String, eventAppeared As Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Integer?, Task), subscriptionDropped As Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing, bufferSize As Integer = 10, autoAck As Boolean = True) As Task(Of EventStorePersistentSubscriptionBase)
  overload: EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscriptionAsync*
  nameWithType.vb: IEventStoreConnection.ConnectToPersistentSubscriptionAsync(String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable(Of Int32), Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscriptionAsync(System.String, System.String, System.Func(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Nullable(Of System.Int32), System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscriptionAsync(String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable(Of Int32), Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
- uid: EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  id: SubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: SubscribeToAllFrom(Nullable<Position>, CatchUpSubscriptionSettings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnection.SubscribeToAllFrom(Nullable<Position>, CatchUpSubscriptionSettings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllFrom(System.Nullable<EventStore.ClientAPI.Position>, EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Func<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SubscribeToAllFrom
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 503
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscribes to a all events. Existing events from lastCheckpoint\nonwards are read from Event Store and presented to the user of\n<xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref> as if they had been pushed.\n\nOnce the end of the stream is read the subscription is\ntransparently (to the user) switched to push new events as\nthey are written.\n\nThe action liveProcessingStarted is called when the\n<xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref> switches from the reading\nphase to the live subscription phase.\n"
  example: []
  syntax:
    content: EventStoreAllCatchUpSubscription SubscribeToAllFrom(Position? lastCheckpoint, CatchUpSubscriptionSettings settings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreCatchUpSubscription> liveProcessingStarted = null, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null)
    parameters:
    - id: lastCheckpoint
      type: System.Nullable{EventStore.ClientAPI.Position}
      description: >-
        The position from which to start.


        To receive all events in the database, use <xref href="EventStore.ClientAPI.AllCheckpoint.AllStart" data-throw-if-not-resolved="false"></xref>.

        If events have already been received and resubscription from the same point

        is desired, use the position representing the last event processed which

        appeared on the subscription.


        Using <xref href="EventStore.ClientAPI.Position.Start" data-throw-if-not-resolved="false"></xref> here will result in missing

        the first event in the stream.
    - id: settings
      type: EventStore.ClientAPI.CatchUpSubscriptionSettings
      description: The <xref href="EventStore.ClientAPI.CatchUpSubscriptionSettings" data-throw-if-not-resolved="false"></xref> for the subscription.
    - id: eventAppeared
      type: System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
      description: A Task invoked and awaited when a new event is received over the subscription.
    - id: liveProcessingStarted
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription}
      description: An action invoked when the subscription switches to newly-pushed events.
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: EventStore.ClientAPI.EventStoreAllCatchUpSubscription
      description: An <xref href="EventStore.ClientAPI.EventStoreAllCatchUpSubscription" data-throw-if-not-resolved="false"></xref> representing the subscription.
    content.vb: Function SubscribeToAllFrom(lastCheckpoint As Position?, settings As CatchUpSubscriptionSettings, eventAppeared As Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), liveProcessingStarted As Action(Of EventStoreCatchUpSubscription) = Nothing, subscriptionDropped As Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing) As EventStoreAllCatchUpSubscription
  overload: EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllFrom*
  nameWithType.vb: IEventStoreConnection.SubscribeToAllFrom(Nullable(Of Position), CatchUpSubscriptionSettings, Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllFrom(System.Nullable(Of EventStore.ClientAPI.Position), EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Func(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToAllFrom(Nullable(Of Position), CatchUpSubscriptionSettings, Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.Filter,EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task},System.Int32,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.Filter,EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task},System.Int32,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  id: FilteredSubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.Filter,EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task},System.Int32,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: FilteredSubscribeToAllFrom(Nullable<Position>, Filter, CatchUpSubscriptionFilteredSettings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Func<EventStoreCatchUpSubscription, Position, Task>, Int32, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnection.FilteredSubscribeToAllFrom(Nullable<Position>, Filter, CatchUpSubscriptionFilteredSettings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Func<EventStoreCatchUpSubscription, Position, Task>, Int32, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom(System.Nullable<EventStore.ClientAPI.Position>, EventStore.ClientAPI.Filter, EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings, System.Func<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Func<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.Position, System.Threading.Tasks.Task>, System.Int32, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: FilteredSubscribeToAllFrom
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 545
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscribes to a all events. Existing events from lastCheckpoint\nonwards are read from Event Store and presented to the user of\n<xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref> as if they had been pushed.\n\nOnce the end of the stream is read the subscription is\ntransparently (to the user) switched to push new events as\nthey are written.\n\nThe action liveProcessingStarted is called when the\n<xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref> switches from the reading\nphase to the live subscription phase. Filters events based upon the passed in filter.\n"
  example: []
  syntax:
    content: EventStoreAllFilteredCatchUpSubscription FilteredSubscribeToAllFrom(Position? lastCheckpoint, Filter filter, CatchUpSubscriptionFilteredSettings settings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task> eventAppeared, Func<EventStoreCatchUpSubscription, Position, Task> checkpointReached, int checkpointIntervalMultiplier, Action<EventStoreCatchUpSubscription> liveProcessingStarted = null, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null)
    parameters:
    - id: lastCheckpoint
      type: System.Nullable{EventStore.ClientAPI.Position}
      description: >-
        The position from which to start.


        To receive all events in the database, use <xref href="EventStore.ClientAPI.AllCheckpoint.AllStart" data-throw-if-not-resolved="false"></xref>.

        If events have already been received and resubscription from the same point

        is desired, use the position representing the last event processed which

        appeared on the subscription.


        Using <xref href="EventStore.ClientAPI.Position.Start" data-throw-if-not-resolved="false"></xref> here will result in missing

        the first event in the stream.
    - id: filter
      type: EventStore.ClientAPI.Filter
      description: A <xref href="EventStore.ClientAPI.Filter" data-throw-if-not-resolved="false"></xref> to be applied to the read operation.
    - id: settings
      type: EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings
      description: The <xref href="EventStore.ClientAPI.CatchUpSubscriptionSettings" data-throw-if-not-resolved="false"></xref> for the subscription.
    - id: eventAppeared
      type: System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
      description: A Task invoked and awaited when a new event is received over the subscription.
    - id: checkpointReached
      type: System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task}
      description: "\nA Task invoked and await when a checkpoint is reached.\nSet the checkpointIntervalMultiplier to define how often this method is called.\n"
    - id: checkpointIntervalMultiplier
      type: System.Int32
      description: Sets how often the checkpointReached callback is called. It is multiplied by the max search window.
    - id: liveProcessingStarted
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription}
      description: An action invoked when the subscription switches to newly-pushed events.
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription
      description: An <xref href="EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription" data-throw-if-not-resolved="false"></xref> representing the subscription.
    content.vb: Function FilteredSubscribeToAllFrom(lastCheckpoint As Position?, filter As Filter, settings As CatchUpSubscriptionFilteredSettings, eventAppeared As Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), checkpointReached As Func(Of EventStoreCatchUpSubscription, Position, Task), checkpointIntervalMultiplier As Integer, liveProcessingStarted As Action(Of EventStoreCatchUpSubscription) = Nothing, subscriptionDropped As Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing) As EventStoreAllFilteredCatchUpSubscription
  overload: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom*
  nameWithType.vb: IEventStoreConnection.FilteredSubscribeToAllFrom(Nullable(Of Position), Filter, CatchUpSubscriptionFilteredSettings, Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), Func(Of EventStoreCatchUpSubscription, Position, Task), Int32, Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom(System.Nullable(Of EventStore.ClientAPI.Position), EventStore.ClientAPI.Filter, EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings, System.Func(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Func(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.Position, System.Threading.Tasks.Task), System.Int32, System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: FilteredSubscribeToAllFrom(Nullable(Of Position), Filter, CatchUpSubscriptionFilteredSettings, Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), Func(Of EventStoreCatchUpSubscription, Position, Task), Int32, Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.Filter,EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.Filter,EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  id: FilteredSubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.Filter,EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings,System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: FilteredSubscribeToAllFrom(Nullable<Position>, Filter, CatchUpSubscriptionFilteredSettings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnection.FilteredSubscribeToAllFrom(Nullable<Position>, Filter, CatchUpSubscriptionFilteredSettings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom(System.Nullable<EventStore.ClientAPI.Position>, EventStore.ClientAPI.Filter, EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings, System.Func<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: FilteredSubscribeToAllFrom
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 585
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscribes to a all events. Existing events from lastCheckpoint\nonwards are read from Event Store and presented to the user of\n<xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref> as if they had been pushed.\n\nOnce the end of the stream is read the subscription is\ntransparently (to the user) switched to push new events as\nthey are written.\n\nThe action liveProcessingStarted is called when the\n<xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref> switches from the reading\nphase to the live subscription phase. Filters events based upon the passed in filter.\n"
  example: []
  syntax:
    content: EventStoreAllFilteredCatchUpSubscription FilteredSubscribeToAllFrom(Position? lastCheckpoint, Filter filter, CatchUpSubscriptionFilteredSettings settings, Func<EventStoreCatchUpSubscription, ResolvedEvent, Task> eventAppeared, Action<EventStoreCatchUpSubscription> liveProcessingStarted = null, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null)
    parameters:
    - id: lastCheckpoint
      type: System.Nullable{EventStore.ClientAPI.Position}
      description: >-
        The position from which to start.


        To receive all events in the database, use <xref href="EventStore.ClientAPI.AllCheckpoint.AllStart" data-throw-if-not-resolved="false"></xref>.

        If events have already been received and resubscription from the same point

        is desired, use the position representing the last event processed which

        appeared on the subscription.


        Using <xref href="EventStore.ClientAPI.Position.Start" data-throw-if-not-resolved="false"></xref> here will result in missing

        the first event in the stream.
    - id: filter
      type: EventStore.ClientAPI.Filter
      description: A <xref href="EventStore.ClientAPI.Filter" data-throw-if-not-resolved="false"></xref> to be applied to the read operation.
    - id: settings
      type: EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings
      description: The <xref href="EventStore.ClientAPI.CatchUpSubscriptionSettings" data-throw-if-not-resolved="false"></xref> for the subscription.
    - id: eventAppeared
      type: System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
      description: A Task invoked and awaited when a new event is received over the subscription.
    - id: liveProcessingStarted
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription}
      description: An action invoked when the subscription switches to newly-pushed events.
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription
      description: An <xref href="EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription" data-throw-if-not-resolved="false"></xref> representing the subscription.
    content.vb: Function FilteredSubscribeToAllFrom(lastCheckpoint As Position?, filter As Filter, settings As CatchUpSubscriptionFilteredSettings, eventAppeared As Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), liveProcessingStarted As Action(Of EventStoreCatchUpSubscription) = Nothing, subscriptionDropped As Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing) As EventStoreAllFilteredCatchUpSubscription
  overload: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom*
  nameWithType.vb: IEventStoreConnection.FilteredSubscribeToAllFrom(Nullable(Of Position), Filter, CatchUpSubscriptionFilteredSettings, Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom(System.Nullable(Of EventStore.ClientAPI.Position), EventStore.ClientAPI.Filter, EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings, System.Func(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: FilteredSubscribeToAllFrom(Nullable(Of Position), Filter, CatchUpSubscriptionFilteredSettings, Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnection.UpdatePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.PersistentSubscriptionSettings,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.UpdatePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.PersistentSubscriptionSettings,EventStore.ClientAPI.SystemData.UserCredentials)
  id: UpdatePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.PersistentSubscriptionSettings,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: UpdatePersistentSubscriptionAsync(String, String, PersistentSubscriptionSettings, UserCredentials)
  nameWithType: IEventStoreConnection.UpdatePersistentSubscriptionAsync(String, String, PersistentSubscriptionSettings, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.UpdatePersistentSubscriptionAsync(System.String, System.String, EventStore.ClientAPI.PersistentSubscriptionSettings, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: UpdatePersistentSubscriptionAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 613
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously update a persistent subscription group on a stream.\n"
  example: []
  syntax:
    content: Task UpdatePersistentSubscriptionAsync(string stream, string groupName, PersistentSubscriptionSettings settings, UserCredentials credentials)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream to create the persistent subscription on.
    - id: groupName
      type: System.String
      description: The name of the group to create.
    - id: settings
      type: EventStore.ClientAPI.PersistentSubscriptionSettings
      description: The <xref href="EventStore.ClientAPI.PersistentSubscriptionSettings" data-throw-if-not-resolved="false"></xref> for the subscription
    - id: credentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The credentials to be used for this operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that can be waited upon.
    content.vb: Function UpdatePersistentSubscriptionAsync(stream As String, groupName As String, settings As PersistentSubscriptionSettings, credentials As UserCredentials) As Task
  overload: EventStore.ClientAPI.IEventStoreConnection.UpdatePersistentSubscriptionAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.CreatePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.PersistentSubscriptionSettings,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.CreatePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.PersistentSubscriptionSettings,EventStore.ClientAPI.SystemData.UserCredentials)
  id: CreatePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.PersistentSubscriptionSettings,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: CreatePersistentSubscriptionAsync(String, String, PersistentSubscriptionSettings, UserCredentials)
  nameWithType: IEventStoreConnection.CreatePersistentSubscriptionAsync(String, String, PersistentSubscriptionSettings, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.CreatePersistentSubscriptionAsync(System.String, System.String, EventStore.ClientAPI.PersistentSubscriptionSettings, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: CreatePersistentSubscriptionAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 625
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously create a persistent subscription group on a stream.\n"
  example: []
  syntax:
    content: Task CreatePersistentSubscriptionAsync(string stream, string groupName, PersistentSubscriptionSettings settings, UserCredentials credentials)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream to create the persistent subscription on.
    - id: groupName
      type: System.String
      description: The name of the group to create.
    - id: settings
      type: EventStore.ClientAPI.PersistentSubscriptionSettings
      description: The <xref href="EventStore.ClientAPI.PersistentSubscriptionSettings" data-throw-if-not-resolved="false"></xref> for the subscription.
    - id: credentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: The credentials to be used for this operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that can be waited upon.
    content.vb: Function CreatePersistentSubscriptionAsync(stream As String, groupName As String, settings As PersistentSubscriptionSettings, credentials As UserCredentials) As Task
  overload: EventStore.ClientAPI.IEventStoreConnection.CreatePersistentSubscriptionAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.DeletePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.DeletePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: DeletePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: DeletePersistentSubscriptionAsync(String, String, UserCredentials)
  nameWithType: IEventStoreConnection.DeletePersistentSubscriptionAsync(String, String, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.DeletePersistentSubscriptionAsync(System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: DeletePersistentSubscriptionAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 636
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously delete a persistent subscription group on a stream.\n"
  example: []
  syntax:
    content: Task DeletePersistentSubscriptionAsync(string stream, string groupName, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream to delete the persistent subscription on.
    - id: groupName
      type: System.String
      description: The name of the group to delete.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that can be waited upon.
    content.vb: Function DeletePersistentSubscriptionAsync(stream As String, groupName As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.IEventStoreConnection.DeletePersistentSubscriptionAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync(System.String,System.Int64,EventStore.ClientAPI.StreamMetadata,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync(System.String,System.Int64,EventStore.ClientAPI.StreamMetadata,EventStore.ClientAPI.SystemData.UserCredentials)
  id: SetStreamMetadataAsync(System.String,System.Int64,EventStore.ClientAPI.StreamMetadata,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: SetStreamMetadataAsync(String, Int64, StreamMetadata, UserCredentials)
  nameWithType: IEventStoreConnection.SetStreamMetadataAsync(String, Int64, StreamMetadata, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync(System.String, System.Int64, EventStore.ClientAPI.StreamMetadata, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SetStreamMetadataAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 656
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously sets the metadata for a stream.\n"
  example: []
  syntax:
    content: Task<WriteResult> SetStreamMetadataAsync(string stream, long expectedMetastreamVersion, StreamMetadata metadata, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream for which to set metadata.
    - id: expectedMetastreamVersion
      type: System.Int64
      description: The expected version for the write to the metadata stream.
    - id: metadata
      type: EventStore.ClientAPI.StreamMetadata
      description: A <xref href="EventStore.ClientAPI.StreamMetadata" data-throw-if-not-resolved="false"></xref> representing the new metadata.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.WriteResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the results of the write operation.
    content.vb: Function SetStreamMetadataAsync(stream As String, expectedMetastreamVersion As Long, metadata As StreamMetadata, userCredentials As UserCredentials = Nothing) As Task(Of WriteResult)
  overload: EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync(System.String,System.Int64,System.Byte[],EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync(System.String,System.Int64,System.Byte[],EventStore.ClientAPI.SystemData.UserCredentials)
  id: SetStreamMetadataAsync(System.String,System.Int64,System.Byte[],EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: SetStreamMetadataAsync(String, Int64, Byte[], UserCredentials)
  nameWithType: IEventStoreConnection.SetStreamMetadataAsync(String, Int64, Byte[], UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync(System.String, System.Int64, System.Byte[], EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SetStreamMetadataAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 667
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously sets the metadata for a stream.\n"
  example: []
  syntax:
    content: Task<WriteResult> SetStreamMetadataAsync(string stream, long expectedMetastreamVersion, byte[] metadata, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream for which to set metadata.
    - id: expectedMetastreamVersion
      type: System.Int64
      description: The expected version for the write to the metadata stream.
    - id: metadata
      type: System.Byte[]
      description: A byte array representing the new metadata.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.WriteResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the results of the write operation.
    content.vb: Function SetStreamMetadataAsync(stream As String, expectedMetastreamVersion As Long, metadata As Byte(), userCredentials As UserCredentials = Nothing) As Task(Of WriteResult)
  overload: EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync*
  nameWithType.vb: IEventStoreConnection.SetStreamMetadataAsync(String, Int64, Byte(), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync(System.String, System.Int64, System.Byte(), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SetStreamMetadataAsync(String, Int64, Byte(), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetStreamMetadataAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: GetStreamMetadataAsync(String, UserCredentials)
  nameWithType: IEventStoreConnection.GetStreamMetadataAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: GetStreamMetadataAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 676
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously reads the metadata for a stream and converts the metadata into a <xref href=\"EventStore.ClientAPI.StreamMetadata\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: Task<StreamMetadataResult> GetStreamMetadataAsync(string stream, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream for which to read metadata.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.StreamMetadataResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> representing system and user-specified metadata as properties.
    content.vb: Function GetStreamMetadataAsync(stream As String, userCredentials As UserCredentials = Nothing) As Task(Of StreamMetadataResult)
  overload: EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsRawBytesAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsRawBytesAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetStreamMetadataAsRawBytesAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: GetStreamMetadataAsRawBytesAsync(String, UserCredentials)
  nameWithType: IEventStoreConnection.GetStreamMetadataAsRawBytesAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsRawBytesAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: GetStreamMetadataAsRawBytesAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 684
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously reads the metadata for a stream as a byte array.\n"
  example: []
  syntax:
    content: Task<RawStreamMetadataResult> GetStreamMetadataAsRawBytesAsync(string stream, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: The name of the stream for which to read metadata.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.RawStreamMetadataResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> representing system metadata as properties and user-specified metadata as bytes.
    content.vb: Function GetStreamMetadataAsRawBytesAsync(stream As String, userCredentials As UserCredentials = Nothing) As Task(Of RawStreamMetadataResult)
  overload: EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsRawBytesAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.SetSystemSettingsAsync(EventStore.ClientAPI.SystemSettings,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.SetSystemSettingsAsync(EventStore.ClientAPI.SystemSettings,EventStore.ClientAPI.SystemData.UserCredentials)
  id: SetSystemSettingsAsync(EventStore.ClientAPI.SystemSettings,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: SetSystemSettingsAsync(SystemSettings, UserCredentials)
  nameWithType: IEventStoreConnection.SetSystemSettingsAsync(SystemSettings, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnection.SetSystemSettingsAsync(EventStore.ClientAPI.SystemSettings, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SetSystemSettingsAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 694
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSets the global settings for the server or cluster to which the <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref>\nis connected.\n"
  example: []
  syntax:
    content: Task SetSystemSettingsAsync(SystemSettings settings, UserCredentials userCredentials = null)
    parameters:
    - id: settings
      type: EventStore.ClientAPI.SystemSettings
      description: The <xref href="EventStore.ClientAPI.SystemSettings" data-throw-if-not-resolved="false"></xref> to apply.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that can be waited upon.
    content.vb: Function SetSystemSettingsAsync(settings As SystemSettings, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.IEventStoreConnection.SetSystemSettingsAsync*
- uid: EventStore.ClientAPI.IEventStoreConnection.Connected
  commentId: E:EventStore.ClientAPI.IEventStoreConnection.Connected
  id: Connected
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: Connected
  nameWithType: IEventStoreConnection.Connected
  fullName: EventStore.ClientAPI.IEventStoreConnection.Connected
  type: Event
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Connected
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 699
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nFired when an <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> connects to an Event Store server.\n"
  example: []
  syntax:
    content: event EventHandler<ClientConnectionEventArgs> Connected
    return:
      type: System.EventHandler{EventStore.ClientAPI.ClientConnectionEventArgs}
    content.vb: Event Connected As EventHandler(Of ClientConnectionEventArgs)
- uid: EventStore.ClientAPI.IEventStoreConnection.Disconnected
  commentId: E:EventStore.ClientAPI.IEventStoreConnection.Disconnected
  id: Disconnected
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: Disconnected
  nameWithType: IEventStoreConnection.Disconnected
  fullName: EventStore.ClientAPI.IEventStoreConnection.Disconnected
  type: Event
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Disconnected
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 705
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nFired when an <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> is disconnected from an Event Store server\nby some means other than by calling the <xref href=\"EventStore.ClientAPI.IEventStoreConnection.Close\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: event EventHandler<ClientConnectionEventArgs> Disconnected
    return:
      type: System.EventHandler{EventStore.ClientAPI.ClientConnectionEventArgs}
    content.vb: Event Disconnected As EventHandler(Of ClientConnectionEventArgs)
- uid: EventStore.ClientAPI.IEventStoreConnection.Reconnecting
  commentId: E:EventStore.ClientAPI.IEventStoreConnection.Reconnecting
  id: Reconnecting
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: Reconnecting
  nameWithType: IEventStoreConnection.Reconnecting
  fullName: EventStore.ClientAPI.IEventStoreConnection.Reconnecting
  type: Event
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Reconnecting
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 711
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nFired when an <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> is attempting to reconnect to an Event Store\nserver following a disconnection.\n"
  example: []
  syntax:
    content: event EventHandler<ClientReconnectingEventArgs> Reconnecting
    return:
      type: System.EventHandler{EventStore.ClientAPI.ClientReconnectingEventArgs}
    content.vb: Event Reconnecting As EventHandler(Of ClientReconnectingEventArgs)
- uid: EventStore.ClientAPI.IEventStoreConnection.Closed
  commentId: E:EventStore.ClientAPI.IEventStoreConnection.Closed
  id: Closed
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: Closed
  nameWithType: IEventStoreConnection.Closed
  fullName: EventStore.ClientAPI.IEventStoreConnection.Closed
  type: Event
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Closed
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 717
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nFired when an <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref> is closed either using the <xref href=\"EventStore.ClientAPI.IEventStoreConnection.Close\" data-throw-if-not-resolved=\"false\"></xref>\nmethod, or when reconnection limits are reached without a successful connection being established.\n"
  example: []
  syntax:
    content: event EventHandler<ClientClosedEventArgs> Closed
    return:
      type: System.EventHandler{EventStore.ClientAPI.ClientClosedEventArgs}
    content.vb: Event Closed As EventHandler(Of ClientClosedEventArgs)
- uid: EventStore.ClientAPI.IEventStoreConnection.ErrorOccurred
  commentId: E:EventStore.ClientAPI.IEventStoreConnection.ErrorOccurred
  id: ErrorOccurred
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: ErrorOccurred
  nameWithType: IEventStoreConnection.ErrorOccurred
  fullName: EventStore.ClientAPI.IEventStoreConnection.ErrorOccurred
  type: Event
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ErrorOccurred
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 722
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nFired when an error is thrown on an <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: event EventHandler<ClientErrorEventArgs> ErrorOccurred
    return:
      type: System.EventHandler{EventStore.ClientAPI.ClientErrorEventArgs}
    content.vb: Event ErrorOccurred As EventHandler(Of ClientErrorEventArgs)
- uid: EventStore.ClientAPI.IEventStoreConnection.AuthenticationFailed
  commentId: E:EventStore.ClientAPI.IEventStoreConnection.AuthenticationFailed
  id: AuthenticationFailed
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: AuthenticationFailed
  nameWithType: IEventStoreConnection.AuthenticationFailed
  fullName: EventStore.ClientAPI.IEventStoreConnection.AuthenticationFailed
  type: Event
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: AuthenticationFailed
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 727
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nFired when a client fails to authenticate to an Event Store server.\n"
  example: []
  syntax:
    content: event EventHandler<ClientAuthenticationFailedEventArgs> AuthenticationFailed
    return:
      type: System.EventHandler{EventStore.ClientAPI.ClientAuthenticationFailedEventArgs}
    content.vb: Event AuthenticationFailed As EventHandler(Of ClientAuthenticationFailedEventArgs)
- uid: EventStore.ClientAPI.IEventStoreConnection.Settings
  commentId: P:EventStore.ClientAPI.IEventStoreConnection.Settings
  id: Settings
  parent: EventStore.ClientAPI.IEventStoreConnection
  langs:
  - csharp
  - vb
  name: Settings
  nameWithType: IEventStoreConnection.Settings
  fullName: EventStore.ClientAPI.IEventStoreConnection.Settings
  type: Property
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnection.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Settings
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnection.cs
    startLine: 733
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nA <xref href=\"EventStore.ClientAPI.ConnectionSettings\" data-throw-if-not-resolved=\"false\"></xref> object is an immutable representation of the settings for an\n<xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: ConnectionSettings Settings { get; }
    parameters: []
    return:
      type: EventStore.ClientAPI.ConnectionSettings
    content.vb: ReadOnly Property Settings As ConnectionSettings
  overload: EventStore.ClientAPI.IEventStoreConnection.Settings*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: EventStore.ClientAPI.IEventStoreConnection
  commentId: T:EventStore.ClientAPI.IEventStoreConnection
  parent: EventStore.ClientAPI
  name: IEventStoreConnection
  nameWithType: IEventStoreConnection
  fullName: EventStore.ClientAPI.IEventStoreConnection
- uid: EventStore.ClientAPI.EventStoreConnection
  commentId: T:EventStore.ClientAPI.EventStoreConnection
  name: EventStoreConnection
  nameWithType: EventStoreConnection
  fullName: EventStore.ClientAPI.EventStoreConnection
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  definition: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  name: SubscribeToStreamAsync(String, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamAsync(String, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(System.String, System.Boolean, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  nameWithType.vb: IEventStoreConnectionExtensions.SubscribeToStreamAsync(String, Boolean, Action(Of EventStoreSubscription, ResolvedEvent), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(System.String, System.Boolean, System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToStreamAsync(String, Boolean, Action(Of EventStoreSubscription, ResolvedEvent), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToStreamAsync
    nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToStreamAsync
    nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  definition: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  name: SubscribeToStreamFrom(String, Nullable<Int64>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamFrom(String, Nullable<Int64>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(System.String, System.Nullable<System.Int64>, EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  nameWithType.vb: IEventStoreConnectionExtensions.SubscribeToStreamFrom(String, Nullable(Of Int64), CatchUpSubscriptionSettings, Action(Of EventStoreCatchUpSubscription, ResolvedEvent), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(System.String, System.Nullable(Of System.Int64), EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToStreamFrom(String, Nullable(Of Int64), CatchUpSubscriptionSettings, Action(Of EventStoreCatchUpSubscription, ResolvedEvent), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToStreamFrom
    nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamFrom
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
    name: CatchUpSubscriptionSettings
    nameWithType: CatchUpSubscriptionSettings
    fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToStreamFrom
    nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamFrom
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
    name: CatchUpSubscriptionSettings
    nameWithType: CatchUpSubscriptionSettings
    fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  definition: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  name: SubscribeToAllAsync(Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnectionExtensions.SubscribeToAllAsync(Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(System.Boolean, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  nameWithType.vb: IEventStoreConnectionExtensions.SubscribeToAllAsync(Boolean, Action(Of EventStoreSubscription, ResolvedEvent), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(System.Boolean, System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToAllAsync(Boolean, Action(Of EventStoreSubscription, ResolvedEvent), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToAllAsync
    nameWithType: IEventStoreConnectionExtensions.SubscribeToAllAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToAllAsync
    nameWithType: IEventStoreConnectionExtensions.SubscribeToAllAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  definition: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  name: ConnectToPersistentSubscription(String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription(String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(System.String, System.String, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  nameWithType.vb: IEventStoreConnectionExtensions.ConnectToPersistentSubscription(String, String, Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(System.String, System.String, System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscription(String, String, Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscription
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscription
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  definition: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  name: ConnectToPersistentSubscription(String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription(String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(System.String, System.String, System.Func<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  nameWithType.vb: IEventStoreConnectionExtensions.ConnectToPersistentSubscription(String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(System.String, System.String, System.Func(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscription(String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscription
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscription
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  definition: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  name: ConnectToPersistentSubscriptionAsync(String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(System.String, System.String, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  nameWithType.vb: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(String, String, Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(System.String, System.String, System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscriptionAsync(String, String, Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscriptionAsync
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscriptionAsync
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  definition: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  name: ConnectToPersistentSubscriptionAsync(String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(System.String, System.String, System.Func<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  nameWithType.vb: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(System.String, System.String, System.Func(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscriptionAsync(String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscriptionAsync
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscriptionAsync
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection,System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  definition: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection,System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  name: SubscribeToAllFrom(Nullable<Position>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnectionExtensions.SubscribeToAllFrom(Nullable<Position>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(System.Nullable<EventStore.ClientAPI.Position>, EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  nameWithType.vb: IEventStoreConnectionExtensions.SubscribeToAllFrom(Nullable(Of Position), CatchUpSubscriptionSettings, Action(Of EventStoreCatchUpSubscription, ResolvedEvent), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(System.Nullable(Of EventStore.ClientAPI.Position), EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToAllFrom(Nullable(Of Position), CatchUpSubscriptionSettings, Action(Of EventStoreCatchUpSubscription, ResolvedEvent), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToAllFrom
    nameWithType: IEventStoreConnectionExtensions.SubscribeToAllFrom
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
    name: CatchUpSubscriptionSettings
    nameWithType: CatchUpSubscriptionSettings
    fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToAllFrom
    nameWithType: IEventStoreConnectionExtensions.SubscribeToAllFrom
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
    name: CatchUpSubscriptionSettings
    nameWithType: CatchUpSubscriptionSettings
    fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  isExternal: true
  name: SubscribeToStreamAsync(IEventStoreConnection, String, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamAsync(IEventStoreConnection, String, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection, System.String, System.Boolean, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  nameWithType.vb: IEventStoreConnectionExtensions.SubscribeToStreamAsync(IEventStoreConnection, String, Boolean, Action(Of EventStoreSubscription, ResolvedEvent), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection, System.String, System.Boolean, System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToStreamAsync(IEventStoreConnection, String, Boolean, Action(Of EventStoreSubscription, ResolvedEvent), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToStreamAsync
    nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToStreamAsync
    nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions
  commentId: T:EventStore.ClientAPI.IEventStoreConnectionExtensions
  parent: EventStore.ClientAPI
  name: IEventStoreConnectionExtensions
  nameWithType: IEventStoreConnectionExtensions
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  isExternal: true
  name: SubscribeToStreamFrom(IEventStoreConnection, String, Nullable<Int64>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamFrom(IEventStoreConnection, String, Nullable<Int64>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection, System.String, System.Nullable<System.Int64>, EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  nameWithType.vb: IEventStoreConnectionExtensions.SubscribeToStreamFrom(IEventStoreConnection, String, Nullable(Of Int64), CatchUpSubscriptionSettings, Action(Of EventStoreCatchUpSubscription, ResolvedEvent), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection, System.String, System.Nullable(Of System.Int64), EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToStreamFrom(IEventStoreConnection, String, Nullable(Of Int64), CatchUpSubscriptionSettings, Action(Of EventStoreCatchUpSubscription, ResolvedEvent), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToStreamFrom
    nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamFrom
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
    name: CatchUpSubscriptionSettings
    nameWithType: CatchUpSubscriptionSettings
    fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToStreamFrom
    nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamFrom
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
    name: CatchUpSubscriptionSettings
    nameWithType: CatchUpSubscriptionSettings
    fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  isExternal: true
  name: SubscribeToAllAsync(IEventStoreConnection, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnectionExtensions.SubscribeToAllAsync(IEventStoreConnection, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  nameWithType.vb: IEventStoreConnectionExtensions.SubscribeToAllAsync(IEventStoreConnection, Boolean, Action(Of EventStoreSubscription, ResolvedEvent), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToAllAsync(IEventStoreConnection, Boolean, Action(Of EventStoreSubscription, ResolvedEvent), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToAllAsync
    nameWithType: IEventStoreConnectionExtensions.SubscribeToAllAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToAllAsync
    nameWithType: IEventStoreConnectionExtensions.SubscribeToAllAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  isExternal: true
  name: ConnectToPersistentSubscription(IEventStoreConnection, String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription(IEventStoreConnection, String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  nameWithType.vb: IEventStoreConnectionExtensions.ConnectToPersistentSubscription(IEventStoreConnection, String, String, Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscription(IEventStoreConnection, String, String, Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscription
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscription
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  isExternal: true
  name: ConnectToPersistentSubscription(IEventStoreConnection, String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription(IEventStoreConnection, String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Func<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  nameWithType.vb: IEventStoreConnectionExtensions.ConnectToPersistentSubscription(IEventStoreConnection, String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Func(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscription(IEventStoreConnection, String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscription
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscription
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  isExternal: true
  name: ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  nameWithType.vb: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscriptionAsync
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscriptionAsync
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  isExternal: true
  name: ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Func<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  nameWithType.vb: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Func(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscriptionAsync
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
    name: ConnectToPersistentSubscriptionAsync
    nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection,System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection,System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  isExternal: true
  name: SubscribeToAllFrom(IEventStoreConnection, Nullable<Position>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnectionExtensions.SubscribeToAllFrom(IEventStoreConnection, Nullable<Position>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection, System.Nullable<EventStore.ClientAPI.Position>, EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  nameWithType.vb: IEventStoreConnectionExtensions.SubscribeToAllFrom(IEventStoreConnection, Nullable(Of Position), CatchUpSubscriptionSettings, Action(Of EventStoreCatchUpSubscription, ResolvedEvent), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection, System.Nullable(Of EventStore.ClientAPI.Position), EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToAllFrom(IEventStoreConnection, Nullable(Of Position), CatchUpSubscriptionSettings, Action(Of EventStoreCatchUpSubscription, ResolvedEvent), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  spec.csharp:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection,System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToAllFrom
    nameWithType: IEventStoreConnectionExtensions.SubscribeToAllFrom
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
    name: CatchUpSubscriptionSettings
    nameWithType: CatchUpSubscriptionSettings
    fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection,System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
    name: SubscribeToAllFrom
    nameWithType: IEventStoreConnectionExtensions.SubscribeToAllFrom
    fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.ClientAPI.IEventStoreConnection
    name: IEventStoreConnection
    nameWithType: IEventStoreConnection
    fullName: EventStore.ClientAPI.IEventStoreConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
    name: CatchUpSubscriptionSettings
    nameWithType: CatchUpSubscriptionSettings
    fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SystemData.UserCredentials
    name: UserCredentials
    nameWithType: UserCredentials
    fullName: EventStore.ClientAPI.SystemData.UserCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.ClientAPI.IEventStoreConnection.ConnectionName*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.ConnectionName
  name: ConnectionName
  nameWithType: IEventStoreConnection.ConnectionName
  fullName: EventStore.ClientAPI.IEventStoreConnection.ConnectionName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: EventStore.ClientAPI.IEventStoreConnection.ConnectAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.ConnectAsync
  name: ConnectAsync
  nameWithType: IEventStoreConnection.ConnectAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.ConnectAsync
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: EventStore.ClientAPI.IEventStoreConnection.Close*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.Close
  name: Close
  nameWithType: IEventStoreConnection.Close
  fullName: EventStore.ClientAPI.IEventStoreConnection.Close
- uid: EventStore.ClientAPI.ExpectedVersion
  commentId: T:EventStore.ClientAPI.ExpectedVersion
  name: ExpectedVersion
  nameWithType: ExpectedVersion
  fullName: EventStore.ClientAPI.ExpectedVersion
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync
  name: DeleteStreamAsync
  nameWithType: IEventStoreConnection.DeleteStreamAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.ClientAPI.SystemData.UserCredentials
  commentId: T:EventStore.ClientAPI.SystemData.UserCredentials
  parent: EventStore.ClientAPI.SystemData
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.ClientAPI.SystemData.UserCredentials
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.DeleteResult}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.DeleteResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<DeleteResult>
  nameWithType: Task<DeleteResult>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.DeleteResult>
  nameWithType.vb: Task(Of DeleteResult)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.DeleteResult)
  name.vb: Task(Of DeleteResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.DeleteResult
    name: DeleteResult
    nameWithType: DeleteResult
    fullName: EventStore.ClientAPI.DeleteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.DeleteResult
    name: DeleteResult
    nameWithType: DeleteResult
    fullName: EventStore.ClientAPI.DeleteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.SystemData
  commentId: N:EventStore.ClientAPI.SystemData
  name: EventStore.ClientAPI.SystemData
  nameWithType: EventStore.ClientAPI.SystemData
  fullName: EventStore.ClientAPI.SystemData
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync
  name: AppendToStreamAsync
  nameWithType: IEventStoreConnection.AppendToStreamAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync
- uid: EventStore.ClientAPI.EventData[]
  isExternal: true
  name: EventData[]
  nameWithType: EventData[]
  fullName: EventStore.ClientAPI.EventData[]
  nameWithType.vb: EventData()
  fullName.vb: EventStore.ClientAPI.EventData()
  name.vb: EventData()
  spec.csharp:
  - uid: EventStore.ClientAPI.EventData
    name: EventData
    nameWithType: EventData
    fullName: EventStore.ClientAPI.EventData
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.ClientAPI.EventData
    name: EventData
    nameWithType: EventData
    fullName: EventStore.ClientAPI.EventData
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.WriteResult}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.WriteResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<WriteResult>
  nameWithType: Task<WriteResult>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.WriteResult>
  nameWithType.vb: Task(Of WriteResult)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.WriteResult)
  name.vb: Task(Of WriteResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.WriteResult
    name: WriteResult
    nameWithType: WriteResult
    fullName: EventStore.ClientAPI.WriteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.WriteResult
    name: WriteResult
    nameWithType: WriteResult
    fullName: EventStore.ClientAPI.WriteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData}
  commentId: T:System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EventData>
  nameWithType: IEnumerable<EventData>
  fullName: System.Collections.Generic.IEnumerable<EventStore.ClientAPI.EventData>
  nameWithType.vb: IEnumerable(Of EventData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of EventStore.ClientAPI.EventData)
  name.vb: IEnumerable(Of EventData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventData
    name: EventData
    nameWithType: EventData
    fullName: EventStore.ClientAPI.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventData
    name: EventData
    nameWithType: EventData
    fullName: EventStore.ClientAPI.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EventStore.ClientAPI.IEventStoreConnection.ConditionalAppendToStreamAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.ConditionalAppendToStreamAsync
  name: ConditionalAppendToStreamAsync
  nameWithType: IEventStoreConnection.ConditionalAppendToStreamAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.ConditionalAppendToStreamAsync
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.ConditionalWriteResult}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.ConditionalWriteResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ConditionalWriteResult>
  nameWithType: Task<ConditionalWriteResult>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.ConditionalWriteResult>
  nameWithType.vb: Task(Of ConditionalWriteResult)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.ConditionalWriteResult)
  name.vb: Task(Of ConditionalWriteResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.ConditionalWriteResult
    name: ConditionalWriteResult
    nameWithType: ConditionalWriteResult
    fullName: EventStore.ClientAPI.ConditionalWriteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.ConditionalWriteResult
    name: ConditionalWriteResult
    nameWithType: ConditionalWriteResult
    fullName: EventStore.ClientAPI.ConditionalWriteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreTransaction
  commentId: T:EventStore.ClientAPI.EventStoreTransaction
  parent: EventStore.ClientAPI
  name: EventStoreTransaction
  nameWithType: EventStoreTransaction
  fullName: EventStore.ClientAPI.EventStoreTransaction
- uid: EventStore.ClientAPI.IEventStoreConnection.StartTransactionAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.StartTransactionAsync
  name: StartTransactionAsync
  nameWithType: IEventStoreConnection.StartTransactionAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.StartTransactionAsync
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStoreTransaction}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.EventStoreTransaction}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EventStoreTransaction>
  nameWithType: Task<EventStoreTransaction>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.EventStoreTransaction>
  nameWithType.vb: Task(Of EventStoreTransaction)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.EventStoreTransaction)
  name.vb: Task(Of EventStoreTransaction)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreTransaction
    name: EventStoreTransaction
    nameWithType: EventStoreTransaction
    fullName: EventStore.ClientAPI.EventStoreTransaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreTransaction
    name: EventStoreTransaction
    nameWithType: EventStoreTransaction
    fullName: EventStore.ClientAPI.EventStoreTransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.ContinueTransaction*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.ContinueTransaction
  name: ContinueTransaction
  nameWithType: IEventStoreConnection.ContinueTransaction
  fullName: EventStore.ClientAPI.IEventStoreConnection.ContinueTransaction
- uid: EventStore.ClientAPI.StreamPosition
  commentId: T:EventStore.ClientAPI.StreamPosition
  name: StreamPosition
  nameWithType: StreamPosition
  fullName: EventStore.ClientAPI.StreamPosition
- uid: EventStore.ClientAPI.IEventStoreConnection.ReadEventAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.ReadEventAsync
  name: ReadEventAsync
  nameWithType: IEventStoreConnection.ReadEventAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.ReadEventAsync
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.EventReadResult}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.EventReadResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EventReadResult>
  nameWithType: Task<EventReadResult>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.EventReadResult>
  nameWithType.vb: Task(Of EventReadResult)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.EventReadResult)
  name.vb: Task(Of EventReadResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventReadResult
    name: EventReadResult
    nameWithType: EventReadResult
    fullName: EventStore.ClientAPI.EventReadResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventReadResult
    name: EventReadResult
    nameWithType: EventReadResult
    fullName: EventStore.ClientAPI.EventReadResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsForwardAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsForwardAsync
  name: ReadStreamEventsForwardAsync
  nameWithType: IEventStoreConnection.ReadStreamEventsForwardAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsForwardAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.StreamEventsSlice}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.StreamEventsSlice}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<StreamEventsSlice>
  nameWithType: Task<StreamEventsSlice>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.StreamEventsSlice>
  nameWithType.vb: Task(Of StreamEventsSlice)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.StreamEventsSlice)
  name.vb: Task(Of StreamEventsSlice)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.StreamEventsSlice
    name: StreamEventsSlice
    nameWithType: StreamEventsSlice
    fullName: EventStore.ClientAPI.StreamEventsSlice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.StreamEventsSlice
    name: StreamEventsSlice
    nameWithType: StreamEventsSlice
    fullName: EventStore.ClientAPI.StreamEventsSlice
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsBackwardAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsBackwardAsync
  name: ReadStreamEventsBackwardAsync
  nameWithType: IEventStoreConnection.ReadStreamEventsBackwardAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsBackwardAsync
- uid: EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsForwardAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsForwardAsync
  name: ReadAllEventsForwardAsync
  nameWithType: IEventStoreConnection.ReadAllEventsForwardAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsForwardAsync
- uid: EventStore.ClientAPI.Position
  commentId: T:EventStore.ClientAPI.Position
  parent: EventStore.ClientAPI
  name: Position
  nameWithType: Position
  fullName: EventStore.ClientAPI.Position
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.AllEventsSlice}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.AllEventsSlice}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<AllEventsSlice>
  nameWithType: Task<AllEventsSlice>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.AllEventsSlice>
  nameWithType.vb: Task(Of AllEventsSlice)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.AllEventsSlice)
  name.vb: Task(Of AllEventsSlice)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.AllEventsSlice
    name: AllEventsSlice
    nameWithType: AllEventsSlice
    fullName: EventStore.ClientAPI.AllEventsSlice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.AllEventsSlice
    name: AllEventsSlice
    nameWithType: AllEventsSlice
    fullName: EventStore.ClientAPI.AllEventsSlice
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Filter
  commentId: T:EventStore.ClientAPI.Filter
  parent: EventStore.ClientAPI
  name: Filter
  nameWithType: Filter
  fullName: EventStore.ClientAPI.Filter
- uid: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsForwardAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsForwardAsync
  name: FilteredReadAllEventsForwardAsync
  nameWithType: IEventStoreConnection.FilteredReadAllEventsForwardAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsForwardAsync
- uid: EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsBackwardAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsBackwardAsync
  name: ReadAllEventsBackwardAsync
  nameWithType: IEventStoreConnection.ReadAllEventsBackwardAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsBackwardAsync
- uid: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsBackwardAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsBackwardAsync
  name: FilteredReadAllEventsBackwardAsync
  nameWithType: IEventStoreConnection.FilteredReadAllEventsBackwardAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.FilteredReadAllEventsBackwardAsync
- uid: EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamAsync
  name: SubscribeToStreamAsync
  nameWithType: IEventStoreConnection.SubscribeToStreamAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamAsync
- uid: System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
  commentId: T:System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<EventStoreSubscription, ResolvedEvent, Task>
  nameWithType: Func<EventStoreSubscription, ResolvedEvent, Task>
  fullName: System.Func<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of EventStoreSubscription, ResolvedEvent, Task)
  fullName.vb: System.Func(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task)
  name.vb: Func(Of EventStoreSubscription, ResolvedEvent, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
  commentId: T:System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
  parent: System
  definition: System.Action`3
  name: Action<EventStoreSubscription, SubscriptionDropReason, Exception>
  nameWithType: Action<EventStoreSubscription, SubscriptionDropReason, Exception>
  fullName: System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>
  nameWithType.vb: Action(Of EventStoreSubscription, SubscriptionDropReason, Exception)
  fullName.vb: System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception)
  name.vb: Action(Of EventStoreSubscription, SubscriptionDropReason, Exception)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStoreSubscription}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.EventStoreSubscription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EventStoreSubscription>
  nameWithType: Task<EventStoreSubscription>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.EventStoreSubscription>
  nameWithType.vb: Task(Of EventStoreSubscription)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.EventStoreSubscription)
  name.vb: Task(Of EventStoreSubscription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`3
  commentId: T:System.Action`3
  isExternal: true
  name: Action<T1, T2, T3>
  nameWithType: Action<T1, T2, T3>
  fullName: System.Action<T1, T2, T3>
  nameWithType.vb: Action(Of T1, T2, T3)
  fullName.vb: System.Action(Of T1, T2, T3)
  name.vb: Action(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreCatchUpSubscription
  parent: EventStore.ClientAPI
  name: EventStoreCatchUpSubscription
  nameWithType: EventStoreCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
- uid: EventStore.ClientAPI.StreamCheckpoint.StreamStart
  commentId: F:EventStore.ClientAPI.StreamCheckpoint.StreamStart
  isExternal: true
- uid: EventStore.ClientAPI.StreamPosition.Start
  commentId: F:EventStore.ClientAPI.StreamPosition.Start
  isExternal: true
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
  commentId: T:EventStore.ClientAPI.CatchUpSubscriptionSettings
  parent: EventStore.ClientAPI
  name: CatchUpSubscriptionSettings
  nameWithType: CatchUpSubscriptionSettings
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
- uid: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
  parent: EventStore.ClientAPI
  name: EventStoreStreamCatchUpSubscription
  nameWithType: EventStoreStreamCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
- uid: EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamFrom*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamFrom
  name: SubscribeToStreamFrom
  nameWithType: IEventStoreConnection.SubscribeToStreamFrom
  fullName: EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamFrom
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
  commentId: T:System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>
  nameWithType: Func<EventStoreCatchUpSubscription, ResolvedEvent, Task>
  fullName: System.Func<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task)
  fullName.vb: System.Func(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task)
  name.vb: Func(Of EventStoreCatchUpSubscription, ResolvedEvent, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription}
  commentId: T:System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription}
  parent: System
  definition: System.Action`1
  name: Action<EventStoreCatchUpSubscription>
  nameWithType: Action<EventStoreCatchUpSubscription>
  fullName: System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>
  nameWithType.vb: Action(Of EventStoreCatchUpSubscription)
  fullName.vb: System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription)
  name.vb: Action(Of EventStoreCatchUpSubscription)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
  commentId: T:System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
  parent: System
  definition: System.Action`3
  name: Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>
  nameWithType: Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>
  fullName: System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>
  nameWithType.vb: Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception)
  fullName.vb: System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception)
  name.vb: Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllAsync
  name: SubscribeToAllAsync
  nameWithType: IEventStoreConnection.SubscribeToAllAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllAsync
- uid: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync
  name: FilteredSubscribeToAllAsync
  nameWithType: IEventStoreConnection.FilteredSubscribeToAllAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllAsync
- uid: System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task}
  commentId: T:System.Func{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<EventStoreSubscription, Position, Task>
  nameWithType: Func<EventStoreSubscription, Position, Task>
  fullName: System.Func<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.Position, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of EventStoreSubscription, Position, Task)
  fullName.vb: System.Func(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.Position, System.Threading.Tasks.Task)
  name.vb: Func(Of EventStoreSubscription, Position, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  commentId: T:EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  parent: EventStore.ClientAPI
  name: EventStorePersistentSubscriptionBase
  nameWithType: EventStorePersistentSubscriptionBase
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
- uid: EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscription*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscription
  name: ConnectToPersistentSubscription
  nameWithType: IEventStoreConnection.ConnectToPersistentSubscription
  fullName: EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscription
- uid: System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Nullable{System.Int32},System.Threading.Tasks.Task}
  commentId: T:System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Nullable{System.Int32},System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`4
  name: Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable<Int32>, Task>
  nameWithType: Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable<Int32>, Task>
  fullName: System.Func<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Nullable<System.Int32>, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable(Of Int32), Task)
  fullName.vb: System.Func(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Nullable(Of System.Int32), System.Threading.Tasks.Task)
  name.vb: Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Nullable(Of Int32), Task)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
  commentId: T:System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
  parent: System
  definition: System.Action`3
  name: Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>
  nameWithType: Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>
  fullName: System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>
  nameWithType.vb: Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception)
  fullName.vb: System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception)
  name.vb: Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscriptionAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscriptionAsync
  name: ConnectToPersistentSubscriptionAsync
  nameWithType: IEventStoreConnection.ConnectToPersistentSubscriptionAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscriptionAsync
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStorePersistentSubscriptionBase}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.EventStorePersistentSubscriptionBase}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EventStorePersistentSubscriptionBase>
  nameWithType: Task<EventStorePersistentSubscriptionBase>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.EventStorePersistentSubscriptionBase>
  nameWithType.vb: Task(Of EventStorePersistentSubscriptionBase)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase)
  name.vb: Task(Of EventStorePersistentSubscriptionBase)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.AllCheckpoint.AllStart
  commentId: F:EventStore.ClientAPI.AllCheckpoint.AllStart
  isExternal: true
- uid: EventStore.ClientAPI.Position.Start
  commentId: F:EventStore.ClientAPI.Position.Start
  isExternal: true
- uid: EventStore.ClientAPI.EventStoreAllCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreAllCatchUpSubscription
  parent: EventStore.ClientAPI
  name: EventStoreAllCatchUpSubscription
  nameWithType: EventStoreAllCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreAllCatchUpSubscription
- uid: EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllFrom*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllFrom
  name: SubscribeToAllFrom
  nameWithType: IEventStoreConnection.SubscribeToAllFrom
  fullName: EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllFrom
- uid: System.Nullable{EventStore.ClientAPI.Position}
  commentId: T:System.Nullable{EventStore.ClientAPI.Position}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Position>
  nameWithType: Nullable<Position>
  fullName: System.Nullable<EventStore.ClientAPI.Position>
  nameWithType.vb: Nullable(Of Position)
  fullName.vb: System.Nullable(Of EventStore.ClientAPI.Position)
  name.vb: Nullable(Of Position)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription
  parent: EventStore.ClientAPI
  name: EventStoreAllFilteredCatchUpSubscription
  nameWithType: EventStoreAllFilteredCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreAllFilteredCatchUpSubscription
- uid: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom
  name: FilteredSubscribeToAllFrom
  nameWithType: IEventStoreConnection.FilteredSubscribeToAllFrom
  fullName: EventStore.ClientAPI.IEventStoreConnection.FilteredSubscribeToAllFrom
- uid: EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings
  commentId: T:EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings
  parent: EventStore.ClientAPI
  name: CatchUpSubscriptionFilteredSettings
  nameWithType: CatchUpSubscriptionFilteredSettings
  fullName: EventStore.ClientAPI.CatchUpSubscriptionFilteredSettings
- uid: System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task}
  commentId: T:System.Func{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.Position,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<EventStoreCatchUpSubscription, Position, Task>
  nameWithType: Func<EventStoreCatchUpSubscription, Position, Task>
  fullName: System.Func<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.Position, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of EventStoreCatchUpSubscription, Position, Task)
  fullName.vb: System.Func(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.Position, System.Threading.Tasks.Task)
  name.vb: Func(Of EventStoreCatchUpSubscription, Position, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.PersistentSubscriptionSettings
  commentId: T:EventStore.ClientAPI.PersistentSubscriptionSettings
  parent: EventStore.ClientAPI
  name: PersistentSubscriptionSettings
  nameWithType: PersistentSubscriptionSettings
  fullName: EventStore.ClientAPI.PersistentSubscriptionSettings
- uid: EventStore.ClientAPI.IEventStoreConnection.UpdatePersistentSubscriptionAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.UpdatePersistentSubscriptionAsync
  name: UpdatePersistentSubscriptionAsync
  nameWithType: IEventStoreConnection.UpdatePersistentSubscriptionAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.UpdatePersistentSubscriptionAsync
- uid: EventStore.ClientAPI.IEventStoreConnection.CreatePersistentSubscriptionAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.CreatePersistentSubscriptionAsync
  name: CreatePersistentSubscriptionAsync
  nameWithType: IEventStoreConnection.CreatePersistentSubscriptionAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.CreatePersistentSubscriptionAsync
- uid: EventStore.ClientAPI.IEventStoreConnection.DeletePersistentSubscriptionAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.DeletePersistentSubscriptionAsync
  name: DeletePersistentSubscriptionAsync
  nameWithType: IEventStoreConnection.DeletePersistentSubscriptionAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.DeletePersistentSubscriptionAsync
- uid: EventStore.ClientAPI.StreamMetadata
  commentId: T:EventStore.ClientAPI.StreamMetadata
  parent: EventStore.ClientAPI
  name: StreamMetadata
  nameWithType: StreamMetadata
  fullName: EventStore.ClientAPI.StreamMetadata
- uid: EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync
  name: SetStreamMetadataAsync
  nameWithType: IEventStoreConnection.SetStreamMetadataAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsync
  name: GetStreamMetadataAsync
  nameWithType: IEventStoreConnection.GetStreamMetadataAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsync
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.StreamMetadataResult}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.StreamMetadataResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<StreamMetadataResult>
  nameWithType: Task<StreamMetadataResult>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.StreamMetadataResult>
  nameWithType.vb: Task(Of StreamMetadataResult)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.StreamMetadataResult)
  name.vb: Task(Of StreamMetadataResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.StreamMetadataResult
    name: StreamMetadataResult
    nameWithType: StreamMetadataResult
    fullName: EventStore.ClientAPI.StreamMetadataResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.StreamMetadataResult
    name: StreamMetadataResult
    nameWithType: StreamMetadataResult
    fullName: EventStore.ClientAPI.StreamMetadataResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsRawBytesAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsRawBytesAsync
  name: GetStreamMetadataAsRawBytesAsync
  nameWithType: IEventStoreConnection.GetStreamMetadataAsRawBytesAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsRawBytesAsync
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.RawStreamMetadataResult}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.RawStreamMetadataResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RawStreamMetadataResult>
  nameWithType: Task<RawStreamMetadataResult>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.RawStreamMetadataResult>
  nameWithType.vb: Task(Of RawStreamMetadataResult)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.RawStreamMetadataResult)
  name.vb: Task(Of RawStreamMetadataResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.RawStreamMetadataResult
    name: RawStreamMetadataResult
    nameWithType: RawStreamMetadataResult
    fullName: EventStore.ClientAPI.RawStreamMetadataResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.RawStreamMetadataResult
    name: RawStreamMetadataResult
    nameWithType: RawStreamMetadataResult
    fullName: EventStore.ClientAPI.RawStreamMetadataResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.SystemSettings
  commentId: T:EventStore.ClientAPI.SystemSettings
  parent: EventStore.ClientAPI
  name: SystemSettings
  nameWithType: SystemSettings
  fullName: EventStore.ClientAPI.SystemSettings
- uid: EventStore.ClientAPI.IEventStoreConnection.SetSystemSettingsAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.SetSystemSettingsAsync
  name: SetSystemSettingsAsync
  nameWithType: IEventStoreConnection.SetSystemSettingsAsync
  fullName: EventStore.ClientAPI.IEventStoreConnection.SetSystemSettingsAsync
- uid: System.EventHandler{EventStore.ClientAPI.ClientConnectionEventArgs}
  commentId: T:System.EventHandler{EventStore.ClientAPI.ClientConnectionEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ClientConnectionEventArgs>
  nameWithType: EventHandler<ClientConnectionEventArgs>
  fullName: System.EventHandler<EventStore.ClientAPI.ClientConnectionEventArgs>
  nameWithType.vb: EventHandler(Of ClientConnectionEventArgs)
  fullName.vb: System.EventHandler(Of EventStore.ClientAPI.ClientConnectionEventArgs)
  name.vb: EventHandler(Of ClientConnectionEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.ClientConnectionEventArgs
    name: ClientConnectionEventArgs
    nameWithType: ClientConnectionEventArgs
    fullName: EventStore.ClientAPI.ClientConnectionEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.ClientConnectionEventArgs
    name: ClientConnectionEventArgs
    nameWithType: ClientConnectionEventArgs
    fullName: EventStore.ClientAPI.ClientConnectionEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnection.Close
  commentId: M:EventStore.ClientAPI.IEventStoreConnection.Close
  isExternal: true
- uid: System.EventHandler{EventStore.ClientAPI.ClientReconnectingEventArgs}
  commentId: T:System.EventHandler{EventStore.ClientAPI.ClientReconnectingEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ClientReconnectingEventArgs>
  nameWithType: EventHandler<ClientReconnectingEventArgs>
  fullName: System.EventHandler<EventStore.ClientAPI.ClientReconnectingEventArgs>
  nameWithType.vb: EventHandler(Of ClientReconnectingEventArgs)
  fullName.vb: System.EventHandler(Of EventStore.ClientAPI.ClientReconnectingEventArgs)
  name.vb: EventHandler(Of ClientReconnectingEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.ClientReconnectingEventArgs
    name: ClientReconnectingEventArgs
    nameWithType: ClientReconnectingEventArgs
    fullName: EventStore.ClientAPI.ClientReconnectingEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.ClientReconnectingEventArgs
    name: ClientReconnectingEventArgs
    nameWithType: ClientReconnectingEventArgs
    fullName: EventStore.ClientAPI.ClientReconnectingEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{EventStore.ClientAPI.ClientClosedEventArgs}
  commentId: T:System.EventHandler{EventStore.ClientAPI.ClientClosedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ClientClosedEventArgs>
  nameWithType: EventHandler<ClientClosedEventArgs>
  fullName: System.EventHandler<EventStore.ClientAPI.ClientClosedEventArgs>
  nameWithType.vb: EventHandler(Of ClientClosedEventArgs)
  fullName.vb: System.EventHandler(Of EventStore.ClientAPI.ClientClosedEventArgs)
  name.vb: EventHandler(Of ClientClosedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.ClientClosedEventArgs
    name: ClientClosedEventArgs
    nameWithType: ClientClosedEventArgs
    fullName: EventStore.ClientAPI.ClientClosedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.ClientClosedEventArgs
    name: ClientClosedEventArgs
    nameWithType: ClientClosedEventArgs
    fullName: EventStore.ClientAPI.ClientClosedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{EventStore.ClientAPI.ClientErrorEventArgs}
  commentId: T:System.EventHandler{EventStore.ClientAPI.ClientErrorEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ClientErrorEventArgs>
  nameWithType: EventHandler<ClientErrorEventArgs>
  fullName: System.EventHandler<EventStore.ClientAPI.ClientErrorEventArgs>
  nameWithType.vb: EventHandler(Of ClientErrorEventArgs)
  fullName.vb: System.EventHandler(Of EventStore.ClientAPI.ClientErrorEventArgs)
  name.vb: EventHandler(Of ClientErrorEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.ClientErrorEventArgs
    name: ClientErrorEventArgs
    nameWithType: ClientErrorEventArgs
    fullName: EventStore.ClientAPI.ClientErrorEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.ClientErrorEventArgs
    name: ClientErrorEventArgs
    nameWithType: ClientErrorEventArgs
    fullName: EventStore.ClientAPI.ClientErrorEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{EventStore.ClientAPI.ClientAuthenticationFailedEventArgs}
  commentId: T:System.EventHandler{EventStore.ClientAPI.ClientAuthenticationFailedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ClientAuthenticationFailedEventArgs>
  nameWithType: EventHandler<ClientAuthenticationFailedEventArgs>
  fullName: System.EventHandler<EventStore.ClientAPI.ClientAuthenticationFailedEventArgs>
  nameWithType.vb: EventHandler(Of ClientAuthenticationFailedEventArgs)
  fullName.vb: System.EventHandler(Of EventStore.ClientAPI.ClientAuthenticationFailedEventArgs)
  name.vb: EventHandler(Of ClientAuthenticationFailedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.ClientAuthenticationFailedEventArgs
    name: ClientAuthenticationFailedEventArgs
    nameWithType: ClientAuthenticationFailedEventArgs
    fullName: EventStore.ClientAPI.ClientAuthenticationFailedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.ClientAuthenticationFailedEventArgs
    name: ClientAuthenticationFailedEventArgs
    nameWithType: ClientAuthenticationFailedEventArgs
    fullName: EventStore.ClientAPI.ClientAuthenticationFailedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ConnectionSettings
  commentId: T:EventStore.ClientAPI.ConnectionSettings
  parent: EventStore.ClientAPI
  name: ConnectionSettings
  nameWithType: ConnectionSettings
  fullName: EventStore.ClientAPI.ConnectionSettings
- uid: EventStore.ClientAPI.IEventStoreConnection.Settings*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnection.Settings
  name: Settings
  nameWithType: IEventStoreConnection.Settings
  fullName: EventStore.ClientAPI.IEventStoreConnection.Settings

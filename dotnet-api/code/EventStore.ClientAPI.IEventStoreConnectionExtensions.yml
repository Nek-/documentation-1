### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions
  commentId: T:EventStore.ClientAPI.IEventStoreConnectionExtensions
  id: IEventStoreConnectionExtensions
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  - EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  - EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  - EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  - EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection,System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  langs:
  - csharp
  - vb
  name: IEventStoreConnectionExtensions
  nameWithType: IEventStoreConnectionExtensions
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: IEventStoreConnectionExtensions
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
    startLine: 13
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nExtensions for <xref href=\"EventStore.ClientAPI.IEventStoreConnection\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static class IEventStoreConnectionExtensions
    content.vb: Public Module IEventStoreConnectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  id: SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  isExtensionMethod: true
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  langs:
  - csharp
  - vb
  name: SubscribeToStreamAsync(IEventStoreConnection, String, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamAsync(IEventStoreConnection, String, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection, System.String, System.Boolean, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SubscribeToStreamAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
    startLine: 33
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously subscribes to a single event stream. New events\nwritten to the stream while the subscription is active will be\npushed to the client.\n"
  example: []
  syntax:
    content: public static Task<EventStoreSubscription> SubscribeToStreamAsync(this IEventStoreConnection target, string stream, bool resolveLinkTos, Action<EventStoreSubscription, ResolvedEvent> eventAppeared, Action<EventStoreSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null)
    parameters:
    - id: target
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The connection to subscribe to
    - id: stream
      type: System.String
      description: The stream to subscribe to
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve Link events automatically
    - id: eventAppeared
      type: System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent}
      description: An action invoked when a new event is received over the subscription
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStoreSubscription}
      description: An <xref href="EventStore.ClientAPI.EventStoreSubscription" data-throw-if-not-resolved="false"></xref> representing the subscription
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeToStreamAsync(target As IEventStoreConnection, stream As String, resolveLinkTos As Boolean, eventAppeared As Action(Of EventStoreSubscription, ResolvedEvent), subscriptionDropped As Action(Of EventStoreSubscription, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing) As Task(Of EventStoreSubscription)
  overload: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync*
  nameWithType.vb: IEventStoreConnectionExtensions.SubscribeToStreamAsync(IEventStoreConnection, String, Boolean, Action(Of EventStoreSubscription, ResolvedEvent), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync(EventStore.ClientAPI.IEventStoreConnection, System.String, System.Boolean, System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToStreamAsync(IEventStoreConnection, String, Boolean, Action(Of EventStoreSubscription, ResolvedEvent), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  id: SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection,System.String,System.Nullable{System.Int64},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  isExtensionMethod: true
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  langs:
  - csharp
  - vb
  name: SubscribeToStreamFrom(IEventStoreConnection, String, Nullable<Int64>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamFrom(IEventStoreConnection, String, Nullable<Int64>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection, System.String, System.Nullable<System.Int64>, EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SubscribeToStreamFrom
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
    startLine: 79
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscribes to a single event stream. Existing events from\nlastCheckpoint onwards are read from the stream\nand presented to the user of <xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref>\nas if they had been pushed.\n\nOnce the end of the stream is read the subscription is\ntransparently (to the user) switched to push new events as\nthey are written.\n\nThe action liveProcessingStarted is called when the\n<xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref> switches from the reading\nphase to the live subscription phase.\n"
  example: []
  syntax:
    content: public static EventStoreStreamCatchUpSubscription SubscribeToStreamFrom(this IEventStoreConnection target, string stream, long? lastCheckpoint, CatchUpSubscriptionSettings settings, Action<EventStoreCatchUpSubscription, ResolvedEvent> eventAppeared, Action<EventStoreCatchUpSubscription> liveProcessingStarted = null, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null)
    parameters:
    - id: target
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The connection to subscribe to
    - id: stream
      type: System.String
      description: The stream to subscribe to
    - id: lastCheckpoint
      type: System.Nullable{System.Int64}
      description: >-
        The event number from which to start.


        To receive all events in the stream, use <xref href="EventStore.ClientAPI.StreamCheckpoint.StreamStart" data-throw-if-not-resolved="false"></xref>.

        If events have already been received and resubscription from the same point

        is desired, use the event number of the last event processed which

        appeared on the subscription.


        NOTE: Using <xref href="EventStore.ClientAPI.StreamPosition.Start" data-throw-if-not-resolved="false"></xref> here will result in missing

        the first event in the stream.
    - id: settings
      type: EventStore.ClientAPI.CatchUpSubscriptionSettings
      description: The <xref href="EventStore.ClientAPI.CatchUpSubscriptionSettings" data-throw-if-not-resolved="false"></xref> for the subscription
    - id: eventAppeared
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent}
      description: An action invoked when a new event is received over the subscription
    - id: liveProcessingStarted
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription}
      description: An action invoked when the subscription switches to newly-pushed events
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation
    return:
      type: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
      description: An <xref href="EventStore.ClientAPI.EventStoreSubscription" data-throw-if-not-resolved="false"></xref> representing the subscription
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeToStreamFrom(target As IEventStoreConnection, stream As String, lastCheckpoint As Long?, settings As CatchUpSubscriptionSettings, eventAppeared As Action(Of EventStoreCatchUpSubscription, ResolvedEvent), liveProcessingStarted As Action(Of EventStoreCatchUpSubscription) = Nothing, subscriptionDropped As Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing) As EventStoreStreamCatchUpSubscription
  overload: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom*
  nameWithType.vb: IEventStoreConnectionExtensions.SubscribeToStreamFrom(IEventStoreConnection, String, Nullable(Of Int64), CatchUpSubscriptionSettings, Action(Of EventStoreCatchUpSubscription, ResolvedEvent), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom(EventStore.ClientAPI.IEventStoreConnection, System.String, System.Nullable(Of System.Int64), EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToStreamFrom(IEventStoreConnection, String, Nullable(Of Int64), CatchUpSubscriptionSettings, Action(Of EventStoreCatchUpSubscription, ResolvedEvent), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  id: SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  isExtensionMethod: true
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  langs:
  - csharp
  - vb
  name: SubscribeToAllAsync(IEventStoreConnection, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnectionExtensions.SubscribeToAllAsync(IEventStoreConnection, Boolean, Action<EventStoreSubscription, ResolvedEvent>, Action<EventStoreSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SubscribeToAllAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
    startLine: 109
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nAsynchronously subscribes to all events in the Event Store. New\nevents written to the stream while the subscription is active\nwill be pushed to the client.\n"
  example: []
  syntax:
    content: public static Task<EventStoreSubscription> SubscribeToAllAsync(this IEventStoreConnection target, bool resolveLinkTos, Action<EventStoreSubscription, ResolvedEvent> eventAppeared, Action<EventStoreSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null)
    parameters:
    - id: target
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The connection to subscribe to
    - id: resolveLinkTos
      type: System.Boolean
      description: Whether to resolve Link events automatically
    - id: eventAppeared
      type: System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent}
      description: An action invoked when a new event is received over the subscription
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStoreSubscription}
      description: An <xref href="EventStore.ClientAPI.EventStoreSubscription" data-throw-if-not-resolved="false"></xref> representing the subscription
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeToAllAsync(target As IEventStoreConnection, resolveLinkTos As Boolean, eventAppeared As Action(Of EventStoreSubscription, ResolvedEvent), subscriptionDropped As Action(Of EventStoreSubscription, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing) As Task(Of EventStoreSubscription)
  overload: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync*
  nameWithType.vb: IEventStoreConnectionExtensions.SubscribeToAllAsync(IEventStoreConnection, Boolean, Action(Of EventStoreSubscription, ResolvedEvent), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync(EventStore.ClientAPI.IEventStoreConnection, System.Boolean, System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToAllAsync(IEventStoreConnection, Boolean, Action(Of EventStoreSubscription, ResolvedEvent), Action(Of EventStoreSubscription, SubscriptionDropReason, Exception), UserCredentials)
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  id: ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  langs:
  - csharp
  - vb
  name: ConnectToPersistentSubscription(IEventStoreConnection, String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription(IEventStoreConnection, String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ConnectToPersistentSubscription
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
    startLine: 141
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscribes to a persistent subscription(competing consumer) on event store\n"
  remarks: >
    This will connect you to a persistent subscription group for a stream. The subscription group

    must first be created with CreatePersistentSubscriptionAsync many connections

    can connect to the same group and they will be treated as competing consumers within the group.

    If one connection dies work will be balanced across the rest of the consumers in the group. If

    you attempt to connect to a group that does not exist you will be given an exception.
  example: []
  syntax:
    content: public static EventStorePersistentSubscriptionBase ConnectToPersistentSubscription(this IEventStoreConnection target, string stream, string groupName, Action<EventStorePersistentSubscriptionBase, ResolvedEvent> eventAppeared, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null, int bufferSize = 10, bool autoAck = true)
    parameters:
    - id: target
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The connection to subscribe to
    - id: stream
      type: System.String
      description: The stream to subscribe to
    - id: groupName
      type: System.String
      description: The subscription group to connect to
    - id: eventAppeared
      type: System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent}
      description: An action invoked when a new event is received over the subscription
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation
    - id: bufferSize
      type: System.Int32
      description: The buffer size to use for the persistent subscription
    - id: autoAck
      type: System.Boolean
      description: >-
        Whether the subscription should automatically acknowledge messages processed.

        If not set the receiver is required to explicitly acknowledge messages through the subscription.
    return:
      type: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
      description: An <xref href="EventStore.ClientAPI.EventStorePersistentSubscriptionBase" data-throw-if-not-resolved="false"></xref> representing the subscription
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConnectToPersistentSubscription(target As IEventStoreConnection, stream As String, groupName As String, eventAppeared As Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), subscriptionDropped As Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing, bufferSize As Integer = 10, autoAck As Boolean = True) As EventStorePersistentSubscriptionBase
  overload: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription*
  nameWithType.vb: IEventStoreConnectionExtensions.ConnectToPersistentSubscription(IEventStoreConnection, String, String, Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscription(IEventStoreConnection, String, String, Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  id: ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  langs:
  - csharp
  - vb
  name: ConnectToPersistentSubscription(IEventStoreConnection, String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription(IEventStoreConnection, String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Func<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ConnectToPersistentSubscription
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
    startLine: 179
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscribes to a persistent subscription(competing consumer) on event store\n"
  remarks: >
    This will connect you to a persistent subscription group for a stream. The subscription group

    must first be created with CreatePersistentSubscriptionAsync many connections

    can connect to the same group and they will be treated as competing consumers within the group.

    If one connection dies work will be balanced across the rest of the consumers in the group. If

    you attempt to connect to a group that does not exist you will be given an exception.
  example: []
  syntax:
    content: public static EventStorePersistentSubscriptionBase ConnectToPersistentSubscription(this IEventStoreConnection target, string stream, string groupName, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task> eventAppeared, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null, int bufferSize = 10, bool autoAck = true)
    parameters:
    - id: target
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The connection to subscribe to
    - id: stream
      type: System.String
      description: The stream to subscribe to
    - id: groupName
      type: System.String
      description: The subscription group to connect to
    - id: eventAppeared
      type: System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
      description: An action invoked when a new event is received over the subscription
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation
    - id: bufferSize
      type: System.Int32
      description: The buffer size to use for the persistent subscription
    - id: autoAck
      type: System.Boolean
      description: >-
        Whether the subscription should automatically acknowledge messages processed.

        If not set the receiver is required to explicitly acknowledge messages through the subscription.
    return:
      type: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
      description: An <xref href="EventStore.ClientAPI.EventStorePersistentSubscriptionBase" data-throw-if-not-resolved="false"></xref> representing the subscription
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConnectToPersistentSubscription(target As IEventStoreConnection, stream As String, groupName As String, eventAppeared As Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), subscriptionDropped As Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing, bufferSize As Integer = 10, autoAck As Boolean = True) As EventStorePersistentSubscriptionBase
  overload: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription*
  nameWithType.vb: IEventStoreConnectionExtensions.ConnectToPersistentSubscription(IEventStoreConnection, String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Func(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscription(IEventStoreConnection, String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  id: ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  langs:
  - csharp
  - vb
  name: ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Action<EventStorePersistentSubscriptionBase, ResolvedEvent>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ConnectToPersistentSubscriptionAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
    startLine: 217
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscribes to a persistent subscription(competing consumer) on event store\n"
  remarks: >
    This will connect you to a persistent subscription group for a stream. The subscription group

    must first be created with CreatePersistentSubscriptionAsync many connections

    can connect to the same group and they will be treated as competing consumers within the group.

    If one connection dies work will be balanced across the rest of the consumers in the group. If

    you attempt to connect to a group that does not exist you will be given an exception.
  example: []
  syntax:
    content: public static Task<EventStorePersistentSubscriptionBase> ConnectToPersistentSubscriptionAsync(this IEventStoreConnection target, string stream, string groupName, Action<EventStorePersistentSubscriptionBase, ResolvedEvent> eventAppeared, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null, int bufferSize = 10, bool autoAck = true)
    parameters:
    - id: target
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The connection to subscribe to
    - id: stream
      type: System.String
      description: The stream to subscribe to
    - id: groupName
      type: System.String
      description: The subscription group to connect to
    - id: eventAppeared
      type: System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent}
      description: An action invoked when a new event is received over the subscription
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation
    - id: bufferSize
      type: System.Int32
      description: The buffer size to use for the persistent subscription
    - id: autoAck
      type: System.Boolean
      description: >-
        Whether the subscription should automatically acknowledge messages processed.

        If not set the receiver is required to explicitly acknowledge messages through the subscription.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStorePersistentSubscriptionBase}
      description: An <xref href="EventStore.ClientAPI.EventStorePersistentSubscriptionBase" data-throw-if-not-resolved="false"></xref> representing the subscription
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConnectToPersistentSubscriptionAsync(target As IEventStoreConnection, stream As String, groupName As String, eventAppeared As Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), subscriptionDropped As Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing, bufferSize As Integer = 10, autoAck As Boolean = True) As Task(Of EventStorePersistentSubscriptionBase)
  overload: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync*
  nameWithType.vb: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  id: ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection,System.String,System.String,System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  langs:
  - csharp
  - vb
  name: ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>, UserCredentials, Int32, Boolean)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Func<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>, System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ConnectToPersistentSubscriptionAsync
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
    startLine: 255
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscribes to a persistent subscription(competing consumer) on event store\n"
  remarks: >
    This will connect you to a persistent subscription group for a stream. The subscription group

    must first be created with CreatePersistentSubscriptionAsync many connections

    can connect to the same group and they will be treated as competing consumers within the group.

    If one connection dies work will be balanced across the rest of the consumers in the group. If

    you attempt to connect to a group that does not exist you will be given an exception.
  example: []
  syntax:
    content: public static Task<EventStorePersistentSubscriptionBase> ConnectToPersistentSubscriptionAsync(this IEventStoreConnection target, string stream, string groupName, Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task> eventAppeared, Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null, int bufferSize = 10, bool autoAck = true)
    parameters:
    - id: target
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The connection to subscribe to
    - id: stream
      type: System.String
      description: The stream to subscribe to
    - id: groupName
      type: System.String
      description: The subscription group to connect to
    - id: eventAppeared
      type: System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
      description: An action invoked when a new event is received over the subscription
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation
    - id: bufferSize
      type: System.Int32
      description: The buffer size to use for the persistent subscription
    - id: autoAck
      type: System.Boolean
      description: >-
        Whether the subscription should automatically acknowledge messages processed.

        If not set the receiver is required to explicitly acknowledge messages through the subscription.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStorePersistentSubscriptionBase}
      description: An <xref href="EventStore.ClientAPI.EventStorePersistentSubscriptionBase" data-throw-if-not-resolved="false"></xref> representing the subscription
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConnectToPersistentSubscriptionAsync(target As IEventStoreConnection, stream As String, groupName As String, eventAppeared As Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), subscriptionDropped As Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing, bufferSize As Integer = 10, autoAck As Boolean = True) As Task(Of EventStorePersistentSubscriptionBase)
  overload: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync*
  nameWithType.vb: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync(EventStore.ClientAPI.IEventStoreConnection, System.String, System.String, System.Func(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task), System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials, System.Int32, System.Boolean)
  name.vb: ConnectToPersistentSubscriptionAsync(IEventStoreConnection, String, String, Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task), Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception), UserCredentials, Int32, Boolean)
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection,System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection,System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  id: SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection,System.Nullable{EventStore.ClientAPI.Position},EventStore.ClientAPI.CatchUpSubscriptionSettings,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)
  isExtensionMethod: true
  parent: EventStore.ClientAPI.IEventStoreConnectionExtensions
  langs:
  - csharp
  - vb
  name: SubscribeToAllFrom(IEventStoreConnection, Nullable<Position>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  nameWithType: IEventStoreConnectionExtensions.SubscribeToAllFrom(IEventStoreConnection, Nullable<Position>, CatchUpSubscriptionSettings, Action<EventStoreCatchUpSubscription, ResolvedEvent>, Action<EventStoreCatchUpSubscription>, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>, UserCredentials)
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection, System.Nullable<EventStore.ClientAPI.Position>, EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>, System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SubscribeToAllFrom
    path: ../EventStore/src/EventStore.ClientAPI/IEventStoreConnectionExtensions.cs
    startLine: 303
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscribes to a all events. Existing events from lastCheckpoint\nonwards are read from the Event Store and presented to the user of\n<xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref> as if they had been pushed.\n\nOnce the end of the stream is read the subscription is\ntransparently (to the user) switched to push new events as\nthey are written.\n\nThe action liveProcessingStarted is called when the\n<xref href=\"EventStore.ClientAPI.EventStoreCatchUpSubscription\" data-throw-if-not-resolved=\"false\"></xref> switches from the reading\nphase to the live subscription phase.\n"
  example: []
  syntax:
    content: public static EventStoreAllCatchUpSubscription SubscribeToAllFrom(this IEventStoreConnection target, Position? lastCheckpoint, CatchUpSubscriptionSettings settings, Action<EventStoreCatchUpSubscription, ResolvedEvent> eventAppeared, Action<EventStoreCatchUpSubscription> liveProcessingStarted = null, Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception> subscriptionDropped = null, UserCredentials userCredentials = null)
    parameters:
    - id: target
      type: EventStore.ClientAPI.IEventStoreConnection
      description: The connection to subscribe to
    - id: lastCheckpoint
      type: System.Nullable{EventStore.ClientAPI.Position}
      description: >-
        The position from which to start.


        To receive all events in the database, use <xref href="EventStore.ClientAPI.AllCheckpoint.AllStart" data-throw-if-not-resolved="false"></xref>.

        If events have already been received and resubscription from the same point

        is desired, use the position representing the last event processed which

        appeared on the subscription.


        NOTE: Using <xref href="EventStore.ClientAPI.Position.Start" data-throw-if-not-resolved="false"></xref> here will result in missing

        the first event in the stream.
    - id: settings
      type: EventStore.ClientAPI.CatchUpSubscriptionSettings
      description: The <xref href="EventStore.ClientAPI.CatchUpSubscriptionSettings" data-throw-if-not-resolved="false"></xref> for the subscription
    - id: eventAppeared
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent}
      description: An action invoked when a new event is received over the subscription
    - id: liveProcessingStarted
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription}
      description: An action invoked when the subscription switches to newly-pushed events
    - id: subscriptionDropped
      type: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
      description: An action invoked if the subscription is dropped
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: User credentials to use for the operation
    return:
      type: EventStore.ClientAPI.EventStoreAllCatchUpSubscription
      description: An <xref href="EventStore.ClientAPI.EventStoreSubscription" data-throw-if-not-resolved="false"></xref> representing the subscription
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeToAllFrom(target As IEventStoreConnection, lastCheckpoint As Position?, settings As CatchUpSubscriptionSettings, eventAppeared As Action(Of EventStoreCatchUpSubscription, ResolvedEvent), liveProcessingStarted As Action(Of EventStoreCatchUpSubscription) = Nothing, subscriptionDropped As Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception) = Nothing, userCredentials As UserCredentials = Nothing) As EventStoreAllCatchUpSubscription
  overload: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom*
  nameWithType.vb: IEventStoreConnectionExtensions.SubscribeToAllFrom(IEventStoreConnection, Nullable(Of Position), CatchUpSubscriptionSettings, Action(Of EventStoreCatchUpSubscription, ResolvedEvent), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom(EventStore.ClientAPI.IEventStoreConnection, System.Nullable(Of EventStore.ClientAPI.Position), EventStore.ClientAPI.CatchUpSubscriptionSettings, System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription), System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: SubscribeToAllFrom(IEventStoreConnection, Nullable(Of Position), CatchUpSubscriptionSettings, Action(Of EventStoreCatchUpSubscription, ResolvedEvent), Action(Of EventStoreCatchUpSubscription), Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception), UserCredentials)
references:
- uid: EventStore.ClientAPI.IEventStoreConnection
  commentId: T:EventStore.ClientAPI.IEventStoreConnection
  parent: EventStore.ClientAPI
  name: IEventStoreConnection
  nameWithType: IEventStoreConnection
  fullName: EventStore.ClientAPI.IEventStoreConnection
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.ClientAPI.EventStoreSubscription
  commentId: T:EventStore.ClientAPI.EventStoreSubscription
  parent: EventStore.ClientAPI
  name: EventStoreSubscription
  nameWithType: EventStoreSubscription
  fullName: EventStore.ClientAPI.EventStoreSubscription
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync
  name: SubscribeToStreamAsync
  nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamAsync
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent}
  commentId: T:System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent}
  parent: System
  definition: System.Action`2
  name: Action<EventStoreSubscription, ResolvedEvent>
  nameWithType: Action<EventStoreSubscription, ResolvedEvent>
  fullName: System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent>
  nameWithType.vb: Action(Of EventStoreSubscription, ResolvedEvent)
  fullName.vb: System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.ResolvedEvent)
  name.vb: Action(Of EventStoreSubscription, ResolvedEvent)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
  commentId: T:System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
  parent: System
  definition: System.Action`3
  name: Action<EventStoreSubscription, SubscriptionDropReason, Exception>
  nameWithType: Action<EventStoreSubscription, SubscriptionDropReason, Exception>
  fullName: System.Action<EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>
  nameWithType.vb: Action(Of EventStoreSubscription, SubscriptionDropReason, Exception)
  fullName.vb: System.Action(Of EventStore.ClientAPI.EventStoreSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception)
  name.vb: Action(Of EventStoreSubscription, SubscriptionDropReason, Exception)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.SystemData.UserCredentials
  commentId: T:EventStore.ClientAPI.SystemData.UserCredentials
  parent: EventStore.ClientAPI.SystemData
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.ClientAPI.SystemData.UserCredentials
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStoreSubscription}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.EventStoreSubscription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EventStoreSubscription>
  nameWithType: Task<EventStoreSubscription>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.EventStoreSubscription>
  nameWithType.vb: Task(Of EventStoreSubscription)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.EventStoreSubscription)
  name.vb: Task(Of EventStoreSubscription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreSubscription
    name: EventStoreSubscription
    nameWithType: EventStoreSubscription
    fullName: EventStore.ClientAPI.EventStoreSubscription
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`3
  commentId: T:System.Action`3
  isExternal: true
  name: Action<T1, T2, T3>
  nameWithType: Action<T1, T2, T3>
  fullName: System.Action<T1, T2, T3>
  nameWithType.vb: Action(Of T1, T2, T3)
  fullName.vb: System.Action(Of T1, T2, T3)
  name.vb: Action(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.SystemData
  commentId: N:EventStore.ClientAPI.SystemData
  name: EventStore.ClientAPI.SystemData
  nameWithType: EventStore.ClientAPI.SystemData
  fullName: EventStore.ClientAPI.SystemData
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreCatchUpSubscription
  parent: EventStore.ClientAPI
  name: EventStoreCatchUpSubscription
  nameWithType: EventStoreCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
- uid: EventStore.ClientAPI.StreamCheckpoint.StreamStart
  commentId: F:EventStore.ClientAPI.StreamCheckpoint.StreamStart
  isExternal: true
- uid: EventStore.ClientAPI.StreamPosition.Start
  commentId: F:EventStore.ClientAPI.StreamPosition.Start
  isExternal: true
- uid: EventStore.ClientAPI.CatchUpSubscriptionSettings
  commentId: T:EventStore.ClientAPI.CatchUpSubscriptionSettings
  parent: EventStore.ClientAPI
  name: CatchUpSubscriptionSettings
  nameWithType: CatchUpSubscriptionSettings
  fullName: EventStore.ClientAPI.CatchUpSubscriptionSettings
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom
  name: SubscribeToStreamFrom
  nameWithType: IEventStoreConnectionExtensions.SubscribeToStreamFrom
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToStreamFrom
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent}
  commentId: T:System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent}
  parent: System
  definition: System.Action`2
  name: Action<EventStoreCatchUpSubscription, ResolvedEvent>
  nameWithType: Action<EventStoreCatchUpSubscription, ResolvedEvent>
  fullName: System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent>
  nameWithType.vb: Action(Of EventStoreCatchUpSubscription, ResolvedEvent)
  fullName.vb: System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.ResolvedEvent)
  name.vb: Action(Of EventStoreCatchUpSubscription, ResolvedEvent)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription}
  commentId: T:System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription}
  parent: System
  definition: System.Action`1
  name: Action<EventStoreCatchUpSubscription>
  nameWithType: Action<EventStoreCatchUpSubscription>
  fullName: System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription>
  nameWithType.vb: Action(Of EventStoreCatchUpSubscription)
  fullName.vb: System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription)
  name.vb: Action(Of EventStoreCatchUpSubscription)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
  commentId: T:System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
  parent: System
  definition: System.Action`3
  name: Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>
  nameWithType: Action<EventStoreCatchUpSubscription, SubscriptionDropReason, Exception>
  fullName: System.Action<EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>
  nameWithType.vb: Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception)
  fullName.vb: System.Action(Of EventStore.ClientAPI.EventStoreCatchUpSubscription, EventStore.ClientAPI.SubscriptionDropReason, System.Exception)
  name.vb: Action(Of EventStoreCatchUpSubscription, SubscriptionDropReason, Exception)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStoreCatchUpSubscription
    name: EventStoreCatchUpSubscription
    nameWithType: EventStoreCatchUpSubscription
    fullName: EventStore.ClientAPI.EventStoreCatchUpSubscription
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
  parent: EventStore.ClientAPI
  name: EventStoreStreamCatchUpSubscription
  nameWithType: EventStoreStreamCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreStreamCatchUpSubscription
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync
  name: SubscribeToAllAsync
  nameWithType: IEventStoreConnectionExtensions.SubscribeToAllAsync
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllAsync
- uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  commentId: T:EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  parent: EventStore.ClientAPI
  name: EventStorePersistentSubscriptionBase
  nameWithType: EventStorePersistentSubscriptionBase
  fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription
  name: ConnectToPersistentSubscription
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscription
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscription
- uid: System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent}
  commentId: T:System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent}
  parent: System
  definition: System.Action`2
  name: Action<EventStorePersistentSubscriptionBase, ResolvedEvent>
  nameWithType: Action<EventStorePersistentSubscriptionBase, ResolvedEvent>
  fullName: System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent>
  nameWithType.vb: Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent)
  fullName.vb: System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent)
  name.vb: Action(Of EventStorePersistentSubscriptionBase, ResolvedEvent)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
  commentId: T:System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception}
  parent: System
  definition: System.Action`3
  name: Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>
  nameWithType: Action<EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception>
  fullName: System.Action<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception>
  nameWithType.vb: Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception)
  fullName.vb: System.Action(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.SubscriptionDropReason, System.Exception)
  name.vb: Action(Of EventStorePersistentSubscriptionBase, SubscriptionDropReason, Exception)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.SubscriptionDropReason
    name: SubscriptionDropReason
    nameWithType: SubscriptionDropReason
    fullName: EventStore.ClientAPI.SubscriptionDropReason
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
  commentId: T:System.Func{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>
  nameWithType: Func<EventStorePersistentSubscriptionBase, ResolvedEvent, Task>
  fullName: System.Func<EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task)
  fullName.vb: System.Func(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase, EventStore.ClientAPI.ResolvedEvent, System.Threading.Tasks.Task)
  name.vb: Func(Of EventStorePersistentSubscriptionBase, ResolvedEvent, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.ClientAPI.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.ClientAPI.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
  name: ConnectToPersistentSubscriptionAsync
  nameWithType: IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.ConnectToPersistentSubscriptionAsync
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.EventStorePersistentSubscriptionBase}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.EventStorePersistentSubscriptionBase}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EventStorePersistentSubscriptionBase>
  nameWithType: Task<EventStorePersistentSubscriptionBase>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.EventStorePersistentSubscriptionBase>
  nameWithType.vb: Task(Of EventStorePersistentSubscriptionBase)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.EventStorePersistentSubscriptionBase)
  name.vb: Task(Of EventStorePersistentSubscriptionBase)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
    name: EventStorePersistentSubscriptionBase
    nameWithType: EventStorePersistentSubscriptionBase
    fullName: EventStore.ClientAPI.EventStorePersistentSubscriptionBase
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.AllCheckpoint.AllStart
  commentId: F:EventStore.ClientAPI.AllCheckpoint.AllStart
  isExternal: true
- uid: EventStore.ClientAPI.Position.Start
  commentId: F:EventStore.ClientAPI.Position.Start
  isExternal: true
- uid: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom*
  commentId: Overload:EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom
  name: SubscribeToAllFrom
  nameWithType: IEventStoreConnectionExtensions.SubscribeToAllFrom
  fullName: EventStore.ClientAPI.IEventStoreConnectionExtensions.SubscribeToAllFrom
- uid: System.Nullable{EventStore.ClientAPI.Position}
  commentId: T:System.Nullable{EventStore.ClientAPI.Position}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Position>
  nameWithType: Nullable<Position>
  fullName: System.Nullable<EventStore.ClientAPI.Position>
  nameWithType.vb: Nullable(Of Position)
  fullName.vb: System.Nullable(Of EventStore.ClientAPI.Position)
  name.vb: Nullable(Of Position)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.EventStoreAllCatchUpSubscription
  commentId: T:EventStore.ClientAPI.EventStoreAllCatchUpSubscription
  parent: EventStore.ClientAPI
  name: EventStoreAllCatchUpSubscription
  nameWithType: EventStoreAllCatchUpSubscription
  fullName: EventStore.ClientAPI.EventStoreAllCatchUpSubscription

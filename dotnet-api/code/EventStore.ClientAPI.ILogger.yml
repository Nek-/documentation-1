### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.ILogger
  commentId: T:EventStore.ClientAPI.ILogger
  id: ILogger
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.ILogger.Debug(System.Exception,System.String,System.Object[])
  - EventStore.ClientAPI.ILogger.Debug(System.String,System.Object[])
  - EventStore.ClientAPI.ILogger.Error(System.Exception,System.String,System.Object[])
  - EventStore.ClientAPI.ILogger.Error(System.String,System.Object[])
  - EventStore.ClientAPI.ILogger.Info(System.Exception,System.String,System.Object[])
  - EventStore.ClientAPI.ILogger.Info(System.String,System.Object[])
  langs:
  - csharp
  - vb
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.ClientAPI.ILogger
  type: Interface
  source:
    id: ILogger
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ILogger.cs
    startLine: 10
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSimple abstraction of a logger.\n"
  remarks: "\nYou can pass your own logging abstractions into the Event Store Client API. Just pass \nin your own implementation of <xref href=\"EventStore.ClientAPI.ILogger\" data-throw-if-not-resolved=\"false\"></xref> when constructing your client connection.\n"
  example: []
  syntax:
    content: public interface ILogger
    content.vb: Public Interface ILogger
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EventStore.ClientAPI.ILogger.Error(System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.ILogger.Error(System.String,System.Object[])
  id: Error(System.String,System.Object[])
  parent: EventStore.ClientAPI.ILogger
  langs:
  - csharp
  - vb
  name: Error(String, Object[])
  nameWithType: ILogger.Error(String, Object[])
  fullName: EventStore.ClientAPI.ILogger.Error(System.String, System.Object[])
  type: Method
  source:
    id: Error
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ILogger.cs
    startLine: 16
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWrites an error to the logger\n"
  example: []
  syntax:
    content: void Error(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
      description: Format string for the log message.
    - id: args
      type: System.Object[]
      description: Arguments to be inserted into the format string.
    content.vb: Sub Error(format As String, ParamArray args As Object())
  overload: EventStore.ClientAPI.ILogger.Error*
  nameWithType.vb: ILogger.Error(String, Object())
  fullName.vb: EventStore.ClientAPI.ILogger.Error(System.String, System.Object())
  name.vb: Error(String, Object())
- uid: EventStore.ClientAPI.ILogger.Error(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.ILogger.Error(System.Exception,System.String,System.Object[])
  id: Error(System.Exception,System.String,System.Object[])
  parent: EventStore.ClientAPI.ILogger
  langs:
  - csharp
  - vb
  name: Error(Exception, String, Object[])
  nameWithType: ILogger.Error(Exception, String, Object[])
  fullName: EventStore.ClientAPI.ILogger.Error(System.Exception, System.String, System.Object[])
  type: Method
  source:
    id: Error
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ILogger.cs
    startLine: 24
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWrites an error to the logger\n"
  example: []
  syntax:
    content: void Error(Exception ex, string format, params object[] args)
    parameters:
    - id: ex
      type: System.Exception
      description: A thrown exception.
    - id: format
      type: System.String
      description: Format string for the log message.
    - id: args
      type: System.Object[]
      description: Arguments to be inserted into the format string.
    content.vb: Sub Error(ex As Exception, format As String, ParamArray args As Object())
  overload: EventStore.ClientAPI.ILogger.Error*
  nameWithType.vb: ILogger.Error(Exception, String, Object())
  fullName.vb: EventStore.ClientAPI.ILogger.Error(System.Exception, System.String, System.Object())
  name.vb: Error(Exception, String, Object())
- uid: EventStore.ClientAPI.ILogger.Info(System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.ILogger.Info(System.String,System.Object[])
  id: Info(System.String,System.Object[])
  parent: EventStore.ClientAPI.ILogger
  langs:
  - csharp
  - vb
  name: Info(String, Object[])
  nameWithType: ILogger.Info(String, Object[])
  fullName: EventStore.ClientAPI.ILogger.Info(System.String, System.Object[])
  type: Method
  source:
    id: Info
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ILogger.cs
    startLine: 31
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWrites an information message to the logger\n"
  example: []
  syntax:
    content: void Info(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
      description: Format string for the log message.
    - id: args
      type: System.Object[]
      description: Arguments to be inserted into the format string.
    content.vb: Sub Info(format As String, ParamArray args As Object())
  overload: EventStore.ClientAPI.ILogger.Info*
  nameWithType.vb: ILogger.Info(String, Object())
  fullName.vb: EventStore.ClientAPI.ILogger.Info(System.String, System.Object())
  name.vb: Info(String, Object())
- uid: EventStore.ClientAPI.ILogger.Info(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.ILogger.Info(System.Exception,System.String,System.Object[])
  id: Info(System.Exception,System.String,System.Object[])
  parent: EventStore.ClientAPI.ILogger
  langs:
  - csharp
  - vb
  name: Info(Exception, String, Object[])
  nameWithType: ILogger.Info(Exception, String, Object[])
  fullName: EventStore.ClientAPI.ILogger.Info(System.Exception, System.String, System.Object[])
  type: Method
  source:
    id: Info
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ILogger.cs
    startLine: 39
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWrites an information message to the logger\n"
  example: []
  syntax:
    content: void Info(Exception ex, string format, params object[] args)
    parameters:
    - id: ex
      type: System.Exception
      description: A thrown exception.
    - id: format
      type: System.String
      description: Format string for the log message.
    - id: args
      type: System.Object[]
      description: Arguments to be inserted into the format string.
    content.vb: Sub Info(ex As Exception, format As String, ParamArray args As Object())
  overload: EventStore.ClientAPI.ILogger.Info*
  nameWithType.vb: ILogger.Info(Exception, String, Object())
  fullName.vb: EventStore.ClientAPI.ILogger.Info(System.Exception, System.String, System.Object())
  name.vb: Info(Exception, String, Object())
- uid: EventStore.ClientAPI.ILogger.Debug(System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.ILogger.Debug(System.String,System.Object[])
  id: Debug(System.String,System.Object[])
  parent: EventStore.ClientAPI.ILogger
  langs:
  - csharp
  - vb
  name: Debug(String, Object[])
  nameWithType: ILogger.Debug(String, Object[])
  fullName: EventStore.ClientAPI.ILogger.Debug(System.String, System.Object[])
  type: Method
  source:
    id: Debug
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ILogger.cs
    startLine: 46
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWrites a debug message to the logger\n"
  example: []
  syntax:
    content: void Debug(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
      description: Format string for the log message.
    - id: args
      type: System.Object[]
      description: Arguments to be inserted into the format string.
    content.vb: Sub Debug(format As String, ParamArray args As Object())
  overload: EventStore.ClientAPI.ILogger.Debug*
  nameWithType.vb: ILogger.Debug(String, Object())
  fullName.vb: EventStore.ClientAPI.ILogger.Debug(System.String, System.Object())
  name.vb: Debug(String, Object())
- uid: EventStore.ClientAPI.ILogger.Debug(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.ClientAPI.ILogger.Debug(System.Exception,System.String,System.Object[])
  id: Debug(System.Exception,System.String,System.Object[])
  parent: EventStore.ClientAPI.ILogger
  langs:
  - csharp
  - vb
  name: Debug(Exception, String, Object[])
  nameWithType: ILogger.Debug(Exception, String, Object[])
  fullName: EventStore.ClientAPI.ILogger.Debug(System.Exception, System.String, System.Object[])
  type: Method
  source:
    id: Debug
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ILogger.cs
    startLine: 54
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nWrites a debug message to the logger\n"
  example: []
  syntax:
    content: void Debug(Exception ex, string format, params object[] args)
    parameters:
    - id: ex
      type: System.Exception
      description: A thrown exception.
    - id: format
      type: System.String
      description: Format string for the log message.
    - id: args
      type: System.Object[]
      description: Arguments to be inserted into the format string.
    content.vb: Sub Debug(ex As Exception, format As String, ParamArray args As Object())
  overload: EventStore.ClientAPI.ILogger.Debug*
  nameWithType.vb: ILogger.Debug(Exception, String, Object())
  fullName.vb: EventStore.ClientAPI.ILogger.Debug(System.Exception, System.String, System.Object())
  name.vb: Debug(Exception, String, Object())
references:
- uid: EventStore.ClientAPI.ILogger
  commentId: T:EventStore.ClientAPI.ILogger
  parent: EventStore.ClientAPI
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.ClientAPI.ILogger
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: EventStore.ClientAPI.ILogger.Error*
  commentId: Overload:EventStore.ClientAPI.ILogger.Error
  name: Error
  nameWithType: ILogger.Error
  fullName: EventStore.ClientAPI.ILogger.Error
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: EventStore.ClientAPI.ILogger.Info*
  commentId: Overload:EventStore.ClientAPI.ILogger.Info
  name: Info
  nameWithType: ILogger.Info
  fullName: EventStore.ClientAPI.ILogger.Info
- uid: EventStore.ClientAPI.ILogger.Debug*
  commentId: Overload:EventStore.ClientAPI.ILogger.Debug
  name: Debug
  nameWithType: ILogger.Debug
  fullName: EventStore.ClientAPI.ILogger.Debug

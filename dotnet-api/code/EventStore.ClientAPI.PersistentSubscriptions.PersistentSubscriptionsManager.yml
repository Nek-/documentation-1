### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager
  commentId: T:EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager
  id: PersistentSubscriptionsManager
  parent: EventStore.ClientAPI.PersistentSubscriptions
  children:
  - EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.#ctor(EventStore.ClientAPI.ILogger,EndPoint,TimeSpan,System.String)
  - EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.Describe(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.List(EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.List(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.ReplayParkedMessages(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  langs:
  - csharp
  - vb
  name: PersistentSubscriptionsManager
  nameWithType: PersistentSubscriptionsManager
  fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager
  type: Class
  source:
    id: PersistentSubscriptionsManager
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/PersistentSubscriptions/PersistentSubscriptionsManager.cs
    startLine: 13
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.PersistentSubscriptions
  summary: "\nAPI for managing persistent subscriptions in Event Store through C# code. Communicates\nwith Event Store over the RESTful API.\n"
  example: []
  syntax:
    content: 'public class PersistentSubscriptionsManager : object'
    content.vb: >-
      Public Class PersistentSubscriptionsManager
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.#ctor(EventStore.ClientAPI.ILogger,EndPoint,TimeSpan,System.String)
  commentId: M:EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.#ctor(EventStore.ClientAPI.ILogger,EndPoint,TimeSpan,System.String)
  id: '#ctor(EventStore.ClientAPI.ILogger,EndPoint,TimeSpan,System.String)'
  parent: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager
  langs:
  - csharp
  - vb
  name: PersistentSubscriptionsManager(ILogger, EndPoint, TimeSpan, String)
  nameWithType: PersistentSubscriptionsManager.PersistentSubscriptionsManager(ILogger, EndPoint, TimeSpan, String)
  fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.PersistentSubscriptionsManager(EventStore.ClientAPI.ILogger, EndPoint, TimeSpan, System.String)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/PersistentSubscriptions/PersistentSubscriptionsManager.cs
    startLine: 25
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.PersistentSubscriptions
  summary: "\nCreates a new instance of <xref href=\"EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public PersistentSubscriptionsManager(ILogger log, EndPoint httpEndPoint, TimeSpan operationTimeout, string httpSchema = null)
    parameters:
    - id: log
      type: EventStore.ClientAPI.ILogger
      description: An instance of <xref href="EventStore.ClientAPI.ILogger" data-throw-if-not-resolved="false"></xref> to use for logging.
    - id: httpEndPoint
      type: EndPoint
      description: HTTP endpoint of an Event Store server.
    - id: operationTimeout
      type: TimeSpan
      description: ''
    - id: httpSchema
      type: System.String
      description: HTTP endpoint schema http|https.
    content.vb: Public Sub New(log As ILogger, httpEndPoint As EndPoint, operationTimeout As TimeSpan, httpSchema As String = Nothing)
  overload: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.Describe(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.Describe(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: Describe(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager
  langs:
  - csharp
  - vb
  name: Describe(String, String, UserCredentials)
  nameWithType: PersistentSubscriptionsManager.Describe(String, String, UserCredentials)
  fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.Describe(System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: Describe
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/PersistentSubscriptions/PersistentSubscriptionsManager.cs
    startLine: 42
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.PersistentSubscriptions
  summary: "\nGets the details of the persistent subscription <code data-dev-comment-type=\"paramref\" class=\"paramref\">subscriptionName</code> on <code data-dev-comment-type=\"paramref\" class=\"paramref\">stream</code>.\n"
  example: []
  syntax:
    content: public Task<PersistentSubscriptionDetails> Describe(string stream, string subscriptionName, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: ''
    - id: subscriptionName
      type: System.String
      description: ''
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to read from the subscriptions endpoint
    return:
      type: Task{EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails}
      description: A PersistentSubscriptionDetails object representing the persistent subscription <code data-dev-comment-type="paramref" class="paramref">subscriptionName</code> on <code data-dev-comment-type="paramref" class="paramref">stream</code>.
    content.vb: Public Function Describe(stream As String, subscriptionName As String, userCredentials As UserCredentials = Nothing) As Task(Of PersistentSubscriptionDetails)
  overload: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.Describe*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.ReplayParkedMessages(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.ReplayParkedMessages(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: ReplayParkedMessages(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager
  langs:
  - csharp
  - vb
  name: ReplayParkedMessages(String, String, UserCredentials)
  nameWithType: PersistentSubscriptionsManager.ReplayParkedMessages(String, String, UserCredentials)
  fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.ReplayParkedMessages(System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: ReplayParkedMessages
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/PersistentSubscriptions/PersistentSubscriptionsManager.cs
    startLine: 56
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.PersistentSubscriptions
  summary: "\nReplays all parked messages for a particular persistent subscription <code data-dev-comment-type=\"paramref\" class=\"paramref\">subscriptionName</code> on <code data-dev-comment-type=\"paramref\" class=\"paramref\">stream</code>. \n"
  example: []
  syntax:
    content: public Task ReplayParkedMessages(string stream, string subscriptionName, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: ''
    - id: subscriptionName
      type: System.String
      description: ''
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to replay parked messages.
    return:
      type: Task
      description: A task representing the operation.
    content.vb: Public Function ReplayParkedMessages(stream As String, subscriptionName As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.ReplayParkedMessages*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.List(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.List(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: List(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager
  langs:
  - csharp
  - vb
  name: List(String, UserCredentials)
  nameWithType: PersistentSubscriptionsManager.List(String, UserCredentials)
  fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.List(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: List
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/PersistentSubscriptions/PersistentSubscriptionsManager.cs
    startLine: 69
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.PersistentSubscriptions
  summary: "\nAsynchronously lists all persistent subscriptions subscribed to <code data-dev-comment-type=\"paramref\" class=\"paramref\">stream</code>.\n"
  example: []
  syntax:
    content: public Task<List<PersistentSubscriptionDetails>> List(string stream, UserCredentials userCredentials = null)
    parameters:
    - id: stream
      type: System.String
      description: ''
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{List{EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails}}
      description: List of all the PersistentSubscriptionDetails items containing persistent subscription details on <code data-dev-comment-type="paramref" class="paramref">stream</code>.
    content.vb: Public Function List(stream As String, userCredentials As UserCredentials = Nothing) As Task(Of List(Of PersistentSubscriptionDetails))
  overload: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.List*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.List(EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.List(EventStore.ClientAPI.SystemData.UserCredentials)
  id: List(EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager
  langs:
  - csharp
  - vb
  name: List(UserCredentials)
  nameWithType: PersistentSubscriptionsManager.List(UserCredentials)
  fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.List(EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: List
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/PersistentSubscriptions/PersistentSubscriptionsManager.cs
    startLine: 80
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.PersistentSubscriptions
  summary: "\nAsynchronously lists all persistent subscriptions.\n"
  example: []
  syntax:
    content: public Task<List<PersistentSubscriptionDetails>> List(UserCredentials userCredentials = null)
    parameters:
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{List{EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails}}
      description: List of all the PersistentSubscriptionDetails items containing persistent subscription details.
    content.vb: Public Function List(userCredentials As UserCredentials = Nothing) As Task(Of List(Of PersistentSubscriptionDetails))
  overload: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.List*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI.PersistentSubscriptions
  commentId: N:EventStore.ClientAPI.PersistentSubscriptions
  name: EventStore.ClientAPI.PersistentSubscriptions
  nameWithType: EventStore.ClientAPI.PersistentSubscriptions
  fullName: EventStore.ClientAPI.PersistentSubscriptions
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager
  commentId: T:EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager
  name: PersistentSubscriptionsManager
  nameWithType: PersistentSubscriptionsManager
  fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager
- uid: EventStore.ClientAPI.ILogger
  commentId: T:EventStore.ClientAPI.ILogger
  parent: EventStore.ClientAPI
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.ClientAPI.ILogger
- uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.#ctor*
  commentId: Overload:EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.#ctor
  name: PersistentSubscriptionsManager
  nameWithType: PersistentSubscriptionsManager.PersistentSubscriptionsManager
  fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.PersistentSubscriptionsManager
- uid: EndPoint
  isExternal: true
  name: EndPoint
  nameWithType: EndPoint
  fullName: EndPoint
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.Describe*
  commentId: Overload:EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.Describe
  name: Describe
  nameWithType: PersistentSubscriptionsManager.Describe
  fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.Describe
- uid: EventStore.ClientAPI.SystemData.UserCredentials
  commentId: T:EventStore.ClientAPI.SystemData.UserCredentials
  parent: EventStore.ClientAPI.SystemData
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.ClientAPI.SystemData.UserCredentials
- uid: Task{EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails}
  commentId: '!:Task{EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails}'
  definition: Task`1
  name: Task<PersistentSubscriptionDetails>
  nameWithType: Task<PersistentSubscriptionDetails>
  fullName: Task<EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails>
  nameWithType.vb: Task(Of PersistentSubscriptionDetails)
  fullName.vb: Task(Of EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails)
  name.vb: Task(Of PersistentSubscriptionDetails)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails
    name: PersistentSubscriptionDetails
    nameWithType: PersistentSubscriptionDetails
    fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails
    name: PersistentSubscriptionDetails
    nameWithType: PersistentSubscriptionDetails
    fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.SystemData
  commentId: N:EventStore.ClientAPI.SystemData
  name: EventStore.ClientAPI.SystemData
  nameWithType: EventStore.ClientAPI.SystemData
  fullName: EventStore.ClientAPI.SystemData
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.ReplayParkedMessages*
  commentId: Overload:EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.ReplayParkedMessages
  name: ReplayParkedMessages
  nameWithType: PersistentSubscriptionsManager.ReplayParkedMessages
  fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.ReplayParkedMessages
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.List*
  commentId: Overload:EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.List
  name: List
  nameWithType: PersistentSubscriptionsManager.List
  fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionsManager.List
- uid: Task{List{EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails}}
  commentId: '!:Task{List{EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails}}'
  definition: Task`1
  name: Task<List<PersistentSubscriptionDetails>>
  nameWithType: Task<List<PersistentSubscriptionDetails>>
  fullName: Task<List<EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails>>
  nameWithType.vb: Task(Of List(Of PersistentSubscriptionDetails))
  fullName.vb: Task(Of List(Of EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails))
  name.vb: Task(Of List(Of PersistentSubscriptionDetails))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails
    name: PersistentSubscriptionDetails
    nameWithType: PersistentSubscriptionDetails
    fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails
    name: PersistentSubscriptionDetails
    nameWithType: PersistentSubscriptionDetails
    fullName: EventStore.ClientAPI.PersistentSubscriptions.PersistentSubscriptionDetails
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )

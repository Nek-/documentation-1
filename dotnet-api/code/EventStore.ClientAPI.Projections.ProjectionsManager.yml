### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.Projections.ProjectionsManager
  commentId: T:EventStore.ClientAPI.Projections.ProjectionsManager
  id: ProjectionsManager
  parent: EventStore.ClientAPI.Projections
  children:
  - EventStore.ClientAPI.Projections.ProjectionsManager.#ctor(EventStore.ClientAPI.ILogger,System.Net.EndPoint,System.TimeSpan,System.String)
  - EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String,System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetConfigAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.ResetAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.UpdateConfigAsync(System.String,EventStore.ClientAPI.Projections.ProjectionConfig,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String,System.String,System.Nullable{System.Boolean},EventStore.ClientAPI.SystemData.UserCredentials)
  langs:
  - csharp
  - vb
  name: ProjectionsManager
  nameWithType: ProjectionsManager
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager
  type: Class
  source:
    id: ProjectionsManager
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 13
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAPI for managing projections in the Event Store through C# code. Communicates\nwith the Event Store over the RESTful API.\n"
  example: []
  syntax:
    content: public class ProjectionsManager
    content.vb: Public Class ProjectionsManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.#ctor(EventStore.ClientAPI.ILogger,System.Net.EndPoint,System.TimeSpan,System.String)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.#ctor(EventStore.ClientAPI.ILogger,System.Net.EndPoint,System.TimeSpan,System.String)
  id: '#ctor(EventStore.ClientAPI.ILogger,System.Net.EndPoint,System.TimeSpan,System.String)'
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: ProjectionsManager(ILogger, EndPoint, TimeSpan, String)
  nameWithType: ProjectionsManager.ProjectionsManager(ILogger, EndPoint, TimeSpan, String)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ProjectionsManager(EventStore.ClientAPI.ILogger, System.Net.EndPoint, System.TimeSpan, System.String)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 25
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nCreates a new instance of <xref href=\"EventStore.ClientAPI.Projections.ProjectionsManager\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ProjectionsManager(ILogger log, EndPoint httpEndPoint, TimeSpan operationTimeout, string httpSchema = "http")
    parameters:
    - id: log
      type: EventStore.ClientAPI.ILogger
      description: An instance of <xref href="EventStore.ClientAPI.ILogger" data-throw-if-not-resolved="false"></xref> to use for logging.
    - id: httpEndPoint
      type: System.Net.EndPoint
      description: HTTP endpoint of an Event Store server.
    - id: operationTimeout
      type: System.TimeSpan
      description: ''
    - id: httpSchema
      type: System.String
      description: HTTP endpoint schema http|https.
    content.vb: Public Sub New(log As ILogger, httpEndPoint As EndPoint, operationTimeout As TimeSpan, httpSchema As String = "http")
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: EnableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: EnableAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.EnableAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: EnableAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 41
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously enables a projection \n"
  example: []
  syntax:
    content: public Task EnableAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to enable a projection
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the operation.
    content.vb: Public Function EnableAsync(name As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: DisableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: DisableAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.DisableAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: DisableAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 52
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously aborts and disables a projection without writing a checkpoint.\n"
  example: []
  syntax:
    content: public Task DisableAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to disable a projection.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the operation.
    content.vb: Public Function DisableAsync(name As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: AbortAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: AbortAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.AbortAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: AbortAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 63
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously disables a projection.\n"
  example: []
  syntax:
    content: public Task AbortAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to disable a projection.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the operation.
    content.vb: Public Function AbortAsync(name As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: CreateOneTimeAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: CreateOneTimeAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.CreateOneTimeAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: CreateOneTimeAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 73
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously creates a one-time query.\n"
  example: []
  syntax:
    content: public Task CreateOneTimeAsync(string query, UserCredentials userCredentials = null)
    parameters:
    - id: query
      type: System.String
      description: The JavaScript source code for the query.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to create a query.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function CreateOneTimeAsync(query As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: CreateTransientAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: CreateTransientAsync(String, String, UserCredentials)
  nameWithType: ProjectionsManager.CreateTransientAsync(String, String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync(System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: CreateTransientAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 84
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously creates a one-time query.\n"
  example: []
  syntax:
    content: public Task CreateTransientAsync(string name, string query, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: A name for the query.
    - id: query
      type: System.String
      description: The JavaScript source code for the query.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to create a query.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function CreateTransientAsync(name As String, query As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: CreateContinuousAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: CreateContinuousAsync(String, String, UserCredentials)
  nameWithType: ProjectionsManager.CreateContinuousAsync(String, String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: CreateContinuousAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 96
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously creates a continuous projection.\n"
  example: []
  syntax:
    content: public Task CreateContinuousAsync(string name, string query, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: query
      type: System.String
      description: The JavaScript source code for the query.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to create a query.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function CreateContinuousAsync(name As String, query As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String,System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String,System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  id: CreateContinuousAsync(System.String,System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: CreateContinuousAsync(String, String, Boolean, UserCredentials)
  nameWithType: ProjectionsManager.CreateContinuousAsync(String, String, Boolean, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String, System.String, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: CreateContinuousAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 107
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously creates a continuous projection.\n"
  example: []
  syntax:
    content: public Task CreateContinuousAsync(string name, string query, bool trackEmittedStreams, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: query
      type: System.String
      description: The JavaScript source code for the query.
    - id: trackEmittedStreams
      type: System.Boolean
      description: Whether the streams emitted by this projection should be tracked.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to create a query.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function CreateContinuousAsync(name As String, query As String, trackEmittedStreams As Boolean, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  id: ListAllAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: ListAllAsync(UserCredentials)
  nameWithType: ProjectionsManager.ListAllAsync(UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: ListAllAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 121
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously lists this status of all projections.\n"
  example: []
  syntax:
    content: public Task<List<ProjectionDetails>> ListAllAsync(UserCredentials userCredentials = null)
    parameters:
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{EventStore.ClientAPI.Projections.ProjectionDetails}}
      description: List of all ProjectionDetails items containing projection statuses.
    content.vb: Public Function ListAllAsync(userCredentials As UserCredentials = Nothing) As Task(Of List(Of ProjectionDetails))
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  id: ListOneTimeAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: ListOneTimeAsync(UserCredentials)
  nameWithType: ProjectionsManager.ListOneTimeAsync(UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: ListOneTimeAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 130
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously lists this status of all one-time projections.\n"
  example: []
  syntax:
    content: public Task<List<ProjectionDetails>> ListOneTimeAsync(UserCredentials userCredentials = null)
    parameters:
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{EventStore.ClientAPI.Projections.ProjectionDetails}}
      description: List of one-time ProjectionDetails items containing projection statuses.
    content.vb: Public Function ListOneTimeAsync(userCredentials As UserCredentials = Nothing) As Task(Of List(Of ProjectionDetails))
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  id: ListContinuousAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: ListContinuousAsync(UserCredentials)
  nameWithType: ProjectionsManager.ListContinuousAsync(UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: ListContinuousAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 139
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nSynchronously lists this status of all continuous projections.\n"
  example: []
  syntax:
    content: public Task<List<ProjectionDetails>> ListContinuousAsync(UserCredentials userCredentials = null)
    parameters:
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{EventStore.ClientAPI.Projections.ProjectionDetails}}
      description: List of continuous ProjectionDetails items containing projection statuses.
    content.vb: Public Function ListContinuousAsync(userCredentials As UserCredentials = Nothing) As Task(Of List(Of ProjectionDetails))
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetStatusAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetStatusAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.GetStatusAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: GetStatusAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 149
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the status of a projection.\n"
  example: []
  syntax:
    content: public Task<string> GetStatusAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: String of JSON containing projection status.
    content.vb: Public Function GetStatusAsync(name As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetStateAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetStateAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.GetStateAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: GetStateAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 160
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the state of a projection.\n"
  example: []
  syntax:
    content: public Task<string> GetStateAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: String of JSON containing projection state.
    content.vb: Public Function GetStateAsync(name As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetPartitionStateAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetPartitionStateAsync(String, String, UserCredentials)
  nameWithType: ProjectionsManager.GetPartitionStateAsync(String, String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync(System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: GetPartitionStateAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 172
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the state of a projection for a specified partition.\n"
  example: []
  syntax:
    content: public Task<string> GetPartitionStateAsync(string name, string partitionId, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: partitionId
      type: System.String
      description: The id of the partition.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: String of JSON containing projection state.
    content.vb: Public Function GetPartitionStateAsync(name As String, partitionId As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetResultAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetResultAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.GetResultAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: GetResultAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 185
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the state of a projection.\n"
  example: []
  syntax:
    content: public Task<string> GetResultAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: String of JSON containing projection state.
    content.vb: Public Function GetResultAsync(name As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetPartitionResultAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetPartitionResultAsync(String, String, UserCredentials)
  nameWithType: ProjectionsManager.GetPartitionResultAsync(String, String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync(System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: GetPartitionResultAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 197
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the state of a projection for a specified partition.\n"
  example: []
  syntax:
    content: public Task<string> GetPartitionResultAsync(string name, string partitionId, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: partitionId
      type: System.String
      description: The id of the partition.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: String of JSON containing projection state.
    content.vb: Public Function GetPartitionResultAsync(name As String, partitionId As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetStatisticsAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetStatisticsAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.GetStatisticsAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: GetStatisticsAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 210
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the statistics of a projection.\n"
  example: []
  syntax:
    content: public Task<string> GetStatisticsAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: String of JSON containing projection statistics.
    content.vb: Public Function GetStatisticsAsync(name As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetQueryAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetQueryAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.GetQueryAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: GetQueryAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 221
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the status of a query.\n"
  example: []
  syntax:
    content: public Task<string> GetQueryAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the query.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: String of JSON containing query status.
    content.vb: Public Function GetQueryAsync(name As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: UpdateQueryAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: UpdateQueryAsync(String, String, UserCredentials)
  nameWithType: ProjectionsManager.UpdateQueryAsync(String, String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: UpdateQueryAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 232
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously updates the definition of a query.\n"
  example: []
  syntax:
    content: public Task UpdateQueryAsync(string name, string query, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the query.
    - id: query
      type: System.String
      description: The JavaScript source code of the query.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function UpdateQueryAsync(name As String, query As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String,System.String,System.Nullable{System.Boolean},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String,System.String,System.Nullable{System.Boolean},EventStore.ClientAPI.SystemData.UserCredentials)
  id: UpdateQueryAsync(System.String,System.String,System.Nullable{System.Boolean},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: UpdateQueryAsync(String, String, Nullable<Boolean>, UserCredentials)
  nameWithType: ProjectionsManager.UpdateQueryAsync(String, String, Nullable<Boolean>, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String, System.String, System.Nullable<System.Boolean>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: UpdateQueryAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 246
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously updates the definition of a query.\n"
  example: []
  syntax:
    content: public Task UpdateQueryAsync(string name, string query, bool? emitEnabled = default(bool? ), UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the query.
    - id: query
      type: System.String
      description: The JavaScript source code of the query.
    - id: emitEnabled
      type: System.Nullable{System.Boolean}
      description: Allow projection to send events to other streams
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function UpdateQueryAsync(name As String, query As String, emitEnabled As Boolean? = Nothing, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync*
  nameWithType.vb: ProjectionsManager.UpdateQueryAsync(String, String, Nullable(Of Boolean), UserCredentials)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String, System.String, System.Nullable(Of System.Boolean), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: UpdateQueryAsync(String, String, Nullable(Of Boolean), UserCredentials)
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: DeleteAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: DeleteAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.DeleteAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: DeleteAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 261
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously deletes a projection \n"
  example: []
  syntax:
    content: public Task DeleteAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to delete a projection
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the operation.
    content.vb: Public Function DeleteAsync(name As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  id: DeleteAsync(System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: DeleteAsync(String, Boolean, UserCredentials)
  nameWithType: ProjectionsManager.DeleteAsync(String, Boolean, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: DeleteAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 272
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously deletes a projection \n"
  example: []
  syntax:
    content: public Task DeleteAsync(string name, bool deleteEmittedStreams, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: deleteEmittedStreams
      type: System.Boolean
      description: Whether to delete the streams that were emitted by this projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to delete a projection
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the operation.
    content.vb: Public Function DeleteAsync(name As String, deleteEmittedStreams As Boolean, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ResetAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.ResetAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: ResetAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: ResetAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.ResetAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ResetAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: ResetAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 283
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously resets a projection\n"
  example: []
  syntax:
    content: public Task ResetAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to delete a projection
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the operation.
    content.vb: Public Function ResetAsync(name As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.ResetAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetConfigAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetConfigAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetConfigAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetConfigAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.GetConfigAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetConfigAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: GetConfigAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 294
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the projection config.\n"
  example: []
  syntax:
    content: public Task<ProjectionConfig> GetConfigAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task{EventStore.ClientAPI.Projections.ProjectionConfig}
      description: String of JSON containing projection config.
    content.vb: Public Function GetConfigAsync(name As String, userCredentials As UserCredentials = Nothing) As Task(Of ProjectionConfig)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetConfigAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateConfigAsync(System.String,EventStore.ClientAPI.Projections.ProjectionConfig,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.UpdateConfigAsync(System.String,EventStore.ClientAPI.Projections.ProjectionConfig,EventStore.ClientAPI.SystemData.UserCredentials)
  id: UpdateConfigAsync(System.String,EventStore.ClientAPI.Projections.ProjectionConfig,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: UpdateConfigAsync(String, ProjectionConfig, UserCredentials)
  nameWithType: ProjectionsManager.UpdateConfigAsync(String, ProjectionConfig, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateConfigAsync(System.String, EventStore.ClientAPI.Projections.ProjectionConfig, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: UpdateConfigAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 305
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously updates the projection config.\n"
  example: []
  syntax:
    content: public Task UpdateConfigAsync(string name, ProjectionConfig config, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: config
      type: EventStore.ClientAPI.Projections.ProjectionConfig
      description: The projection configuration.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function UpdateConfigAsync(name As String, config As ProjectionConfig, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateConfigAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI.Projections
  commentId: N:EventStore.ClientAPI.Projections
  name: EventStore.ClientAPI.Projections
  nameWithType: EventStore.ClientAPI.Projections
  fullName: EventStore.ClientAPI.Projections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.ClientAPI.Projections.ProjectionsManager
  commentId: T:EventStore.ClientAPI.Projections.ProjectionsManager
  name: ProjectionsManager
  nameWithType: ProjectionsManager
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager
- uid: EventStore.ClientAPI.ILogger
  commentId: T:EventStore.ClientAPI.ILogger
  parent: EventStore.ClientAPI
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.ClientAPI.ILogger
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.#ctor*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.#ctor
  name: ProjectionsManager
  nameWithType: ProjectionsManager.ProjectionsManager
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ProjectionsManager
- uid: System.Net.EndPoint
  commentId: T:System.Net.EndPoint
  parent: System.Net
  isExternal: true
  name: EndPoint
  nameWithType: EndPoint
  fullName: System.Net.EndPoint
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.Net
  commentId: N:System.Net
  isExternal: true
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync
  name: EnableAsync
  nameWithType: ProjectionsManager.EnableAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync
- uid: EventStore.ClientAPI.SystemData.UserCredentials
  commentId: T:EventStore.ClientAPI.SystemData.UserCredentials
  parent: EventStore.ClientAPI.SystemData
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.ClientAPI.SystemData.UserCredentials
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: EventStore.ClientAPI.SystemData
  commentId: N:EventStore.ClientAPI.SystemData
  name: EventStore.ClientAPI.SystemData
  nameWithType: EventStore.ClientAPI.SystemData
  fullName: EventStore.ClientAPI.SystemData
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync
  name: DisableAsync
  nameWithType: ProjectionsManager.DisableAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync
  name: AbortAsync
  nameWithType: ProjectionsManager.AbortAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync
  name: CreateOneTimeAsync
  nameWithType: ProjectionsManager.CreateOneTimeAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync
  name: CreateTransientAsync
  nameWithType: ProjectionsManager.CreateTransientAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync
  name: CreateContinuousAsync
  nameWithType: ProjectionsManager.CreateContinuousAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync
  name: ListAllAsync
  nameWithType: ProjectionsManager.ListAllAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{EventStore.ClientAPI.Projections.ProjectionDetails}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{EventStore.ClientAPI.Projections.ProjectionDetails}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<ProjectionDetails>>
  nameWithType: Task<List<ProjectionDetails>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<EventStore.ClientAPI.Projections.ProjectionDetails>>
  nameWithType.vb: Task(Of List(Of ProjectionDetails))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of EventStore.ClientAPI.Projections.ProjectionDetails))
  name.vb: Task(Of List(Of ProjectionDetails))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.Projections.ProjectionDetails
    name: ProjectionDetails
    nameWithType: ProjectionDetails
    fullName: EventStore.ClientAPI.Projections.ProjectionDetails
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.Projections.ProjectionDetails
    name: ProjectionDetails
    nameWithType: ProjectionDetails
    fullName: EventStore.ClientAPI.Projections.ProjectionDetails
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync
  name: ListOneTimeAsync
  nameWithType: ProjectionsManager.ListOneTimeAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync
  name: ListContinuousAsync
  nameWithType: ProjectionsManager.ListContinuousAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync
  name: GetStatusAsync
  nameWithType: ProjectionsManager.GetStatusAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync
  name: GetStateAsync
  nameWithType: ProjectionsManager.GetStateAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync
  name: GetPartitionStateAsync
  nameWithType: ProjectionsManager.GetPartitionStateAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync
  name: GetResultAsync
  nameWithType: ProjectionsManager.GetResultAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync
  name: GetPartitionResultAsync
  nameWithType: ProjectionsManager.GetPartitionResultAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync
  name: GetStatisticsAsync
  nameWithType: ProjectionsManager.GetStatisticsAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync
  name: GetQueryAsync
  nameWithType: ProjectionsManager.GetQueryAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync
  name: UpdateQueryAsync
  nameWithType: ProjectionsManager.UpdateQueryAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync
  name: DeleteAsync
  nameWithType: ProjectionsManager.DeleteAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ResetAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.ResetAsync
  name: ResetAsync
  nameWithType: ProjectionsManager.ResetAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ResetAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetConfigAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetConfigAsync
  name: GetConfigAsync
  nameWithType: ProjectionsManager.GetConfigAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetConfigAsync
- uid: System.Threading.Tasks.Task{EventStore.ClientAPI.Projections.ProjectionConfig}
  commentId: T:System.Threading.Tasks.Task{EventStore.ClientAPI.Projections.ProjectionConfig}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ProjectionConfig>
  nameWithType: Task<ProjectionConfig>
  fullName: System.Threading.Tasks.Task<EventStore.ClientAPI.Projections.ProjectionConfig>
  nameWithType.vb: Task(Of ProjectionConfig)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.ClientAPI.Projections.ProjectionConfig)
  name.vb: Task(Of ProjectionConfig)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.Projections.ProjectionConfig
    name: ProjectionConfig
    nameWithType: ProjectionConfig
    fullName: EventStore.ClientAPI.Projections.ProjectionConfig
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.Projections.ProjectionConfig
    name: ProjectionConfig
    nameWithType: ProjectionConfig
    fullName: EventStore.ClientAPI.Projections.ProjectionConfig
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateConfigAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.UpdateConfigAsync
  name: UpdateConfigAsync
  nameWithType: ProjectionsManager.UpdateConfigAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateConfigAsync
- uid: EventStore.ClientAPI.Projections.ProjectionConfig
  commentId: T:EventStore.ClientAPI.Projections.ProjectionConfig
  parent: EventStore.ClientAPI.Projections
  name: ProjectionConfig
  nameWithType: ProjectionConfig
  fullName: EventStore.ClientAPI.Projections.ProjectionConfig

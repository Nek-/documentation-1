### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.Projections.ProjectionsManager
  commentId: T:EventStore.ClientAPI.Projections.ProjectionsManager
  id: ProjectionsManager
  parent: EventStore.ClientAPI.Projections
  children:
  - EventStore.ClientAPI.Projections.ProjectionsManager.#ctor(EventStore.ClientAPI.ILogger,EndPoint,TimeSpan,System.String)
  - EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String,System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  - EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String,System.String,System.Nullable{System.Boolean},EventStore.ClientAPI.SystemData.UserCredentials)
  langs:
  - csharp
  - vb
  name: ProjectionsManager
  nameWithType: ProjectionsManager
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager
  type: Class
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ProjectionsManager
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 14
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAPI for managing projections in the Event Store through C# code. Communicates\nwith the Event Store over the RESTful API.\n"
  example: []
  syntax:
    content: 'public class ProjectionsManager : object'
    content.vb: >-
      Public Class ProjectionsManager
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.ClientAPI.Projections.ProjectionsManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.Projections.ProjectionsManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.#ctor(EventStore.ClientAPI.ILogger,EndPoint,TimeSpan,System.String)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.#ctor(EventStore.ClientAPI.ILogger,EndPoint,TimeSpan,System.String)
  id: '#ctor(EventStore.ClientAPI.ILogger,EndPoint,TimeSpan,System.String)'
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: ProjectionsManager(ILogger, EndPoint, TimeSpan, String)
  nameWithType: ProjectionsManager.ProjectionsManager(ILogger, EndPoint, TimeSpan, String)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ProjectionsManager(EventStore.ClientAPI.ILogger, EndPoint, TimeSpan, System.String)
  type: Constructor
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 27
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nCreates a new instance of <xref href=\"EventStore.ClientAPI.Projections.ProjectionsManager\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ProjectionsManager(ILogger log, EndPoint httpEndPoint, TimeSpan operationTimeout, string httpSchema = null)
    parameters:
    - id: log
      type: EventStore.ClientAPI.ILogger
      description: An instance of <xref href="EventStore.ClientAPI.ILogger" data-throw-if-not-resolved="false"></xref> to use for logging.
    - id: httpEndPoint
      type: EndPoint
      description: HTTP endpoint of an Event Store server.
    - id: operationTimeout
      type: TimeSpan
      description: ''
    - id: httpSchema
      type: System.String
      description: HTTP endpoint schema http|https.
    content.vb: Public Sub New(log As ILogger, httpEndPoint As EndPoint, operationTimeout As TimeSpan, httpSchema As String = Nothing)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: EnableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: EnableAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.EnableAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: EnableAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 43
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously enables a projection \n"
  example: []
  syntax:
    content: public Task EnableAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to enable a projection
    return:
      type: Task
      description: A task representing the operation.
    content.vb: Public Function EnableAsync(name As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: DisableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: DisableAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.DisableAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: DisableAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 55
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously aborts and disables a projection without writing a checkpoint.\n"
  example: []
  syntax:
    content: public Task DisableAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to disable a projection.
    return:
      type: Task
      description: A task representing the operation.
    content.vb: Public Function DisableAsync(name As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: AbortAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: AbortAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.AbortAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: AbortAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 67
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously disables a projection.\n"
  example: []
  syntax:
    content: public Task AbortAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to disable a projection.
    return:
      type: Task
      description: A task representing the operation.
    content.vb: Public Function AbortAsync(name As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: CreateOneTimeAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: CreateOneTimeAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.CreateOneTimeAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: CreateOneTimeAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 78
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously creates a one-time query.\n"
  example: []
  syntax:
    content: public Task CreateOneTimeAsync(string query, UserCredentials userCredentials = null)
    parameters:
    - id: query
      type: System.String
      description: The JavaScript source code for the query.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to create a query.
    return:
      type: Task
    content.vb: Public Function CreateOneTimeAsync(query As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: CreateTransientAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: CreateTransientAsync(String, String, UserCredentials)
  nameWithType: ProjectionsManager.CreateTransientAsync(String, String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync(System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: CreateTransientAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 90
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously creates a one-time query.\n"
  example: []
  syntax:
    content: public Task CreateTransientAsync(string name, string query, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: A name for the query.
    - id: query
      type: System.String
      description: The JavaScript source code for the query.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to create a query.
    return:
      type: Task
    content.vb: Public Function CreateTransientAsync(name As String, query As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: CreateContinuousAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: CreateContinuousAsync(String, String, UserCredentials)
  nameWithType: ProjectionsManager.CreateContinuousAsync(String, String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: CreateContinuousAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 103
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously creates a continuous projection.\n"
  example: []
  syntax:
    content: public Task CreateContinuousAsync(string name, string query, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: query
      type: System.String
      description: The JavaScript source code for the query.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to create a query.
    return:
      type: Task
    content.vb: Public Function CreateContinuousAsync(name As String, query As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String,System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String,System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  id: CreateContinuousAsync(System.String,System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: CreateContinuousAsync(String, String, Boolean, UserCredentials)
  nameWithType: ProjectionsManager.CreateContinuousAsync(String, String, Boolean, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String, System.String, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: CreateContinuousAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 115
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously creates a continuous projection.\n"
  example: []
  syntax:
    content: public Task CreateContinuousAsync(string name, string query, bool trackEmittedStreams, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: query
      type: System.String
      description: The JavaScript source code for the query.
    - id: trackEmittedStreams
      type: System.Boolean
      description: Whether the streams emitted by this projection should be tracked.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to create a query.
    return:
      type: Task
    content.vb: Public Function CreateContinuousAsync(name As String, query As String, trackEmittedStreams As Boolean, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  id: ListAllAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: ListAllAsStringAsync(UserCredentials)
  nameWithType: ProjectionsManager.ListAllAsStringAsync(UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ListAllAsStringAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 128
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously lists this status of all projections.\n"
  example: []
  syntax:
    content: public Task<string> ListAllAsStringAsync(UserCredentials userCredentials = null)
    parameters:
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{System.String}
      description: String of JSON containing projection statuses.
    content.vb: Public Function ListAllAsStringAsync(userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsStringAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  id: ListAllAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: ListAllAsync(UserCredentials)
  nameWithType: ProjectionsManager.ListAllAsync(UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ListAllAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 139
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously lists this status of all projections.\n"
  example: []
  syntax:
    content: public Task<List<ProjectionDetails>> ListAllAsync(UserCredentials userCredentials = null)
    parameters:
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{List{EventStore.ClientAPI.Projections.ProjectionDetails}}
      description: List of all ProjectionDetails items containing projection statuses.
    content.vb: Public Function ListAllAsync(userCredentials As UserCredentials = Nothing) As Task(Of List(Of ProjectionDetails))
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  id: ListOneTimeAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: ListOneTimeAsStringAsync(UserCredentials)
  nameWithType: ProjectionsManager.ListOneTimeAsStringAsync(UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ListOneTimeAsStringAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 149
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously lists this status of all one-time projections.\n"
  example: []
  syntax:
    content: public Task<string> ListOneTimeAsStringAsync(UserCredentials userCredentials = null)
    parameters:
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{System.String}
      description: String of JSON containing projection statuses.
    content.vb: Public Function ListOneTimeAsStringAsync(userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsStringAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  id: ListOneTimeAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: ListOneTimeAsync(UserCredentials)
  nameWithType: ProjectionsManager.ListOneTimeAsync(UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ListOneTimeAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 160
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously lists this status of all one-time projections.\n"
  example: []
  syntax:
    content: public Task<List<ProjectionDetails>> ListOneTimeAsync(UserCredentials userCredentials = null)
    parameters:
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{List{EventStore.ClientAPI.Projections.ProjectionDetails}}
      description: List of one-time ProjectionDetails items containing projection statuses.
    content.vb: Public Function ListOneTimeAsync(userCredentials As UserCredentials = Nothing) As Task(Of List(Of ProjectionDetails))
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  id: ListContinuousAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: ListContinuousAsStringAsync(UserCredentials)
  nameWithType: ProjectionsManager.ListContinuousAsStringAsync(UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ListContinuousAsStringAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 170
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nSynchronously lists this status of all continuous projections.\n"
  example: []
  syntax:
    content: public Task<string> ListContinuousAsStringAsync(UserCredentials userCredentials = null)
    parameters:
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{System.String}
      description: String of JSON containing projection statuses.
    content.vb: Public Function ListContinuousAsStringAsync(userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsStringAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  id: ListContinuousAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: ListContinuousAsync(UserCredentials)
  nameWithType: ProjectionsManager.ListContinuousAsync(UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync(EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ListContinuousAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 181
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nSynchronously lists this status of all continuous projections.\n"
  example: []
  syntax:
    content: public Task<List<ProjectionDetails>> ListContinuousAsync(UserCredentials userCredentials = null)
    parameters:
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{List{EventStore.ClientAPI.Projections.ProjectionDetails}}
      description: List of continuous ProjectionDetails items containing projection statuses.
    content.vb: Public Function ListContinuousAsync(userCredentials As UserCredentials = Nothing) As Task(Of List(Of ProjectionDetails))
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetStatusAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetStatusAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.GetStatusAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: GetStatusAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 192
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the status of a projection.\n"
  example: []
  syntax:
    content: public Task<string> GetStatusAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{System.String}
      description: String of JSON containing projection status.
    content.vb: Public Function GetStatusAsync(name As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetStateAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetStateAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.GetStateAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: GetStateAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 204
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the state of a projection.\n"
  example: []
  syntax:
    content: public Task<string> GetStateAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{System.String}
      description: String of JSON containing projection state.
    content.vb: Public Function GetStateAsync(name As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetPartitionStateAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetPartitionStateAsync(String, String, UserCredentials)
  nameWithType: ProjectionsManager.GetPartitionStateAsync(String, String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync(System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: GetPartitionStateAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 217
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the state of a projection for a specified partition.\n"
  example: []
  syntax:
    content: public Task<string> GetPartitionStateAsync(string name, string partitionId, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: partitionId
      type: System.String
      description: The id of the partition.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{System.String}
      description: String of JSON containing projection state.
    content.vb: Public Function GetPartitionStateAsync(name As String, partitionId As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetResultAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetResultAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.GetResultAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: GetResultAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 230
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the state of a projection.\n"
  example: []
  syntax:
    content: public Task<string> GetResultAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{System.String}
      description: String of JSON containing projection state.
    content.vb: Public Function GetResultAsync(name As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetPartitionResultAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetPartitionResultAsync(String, String, UserCredentials)
  nameWithType: ProjectionsManager.GetPartitionResultAsync(String, String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync(System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: GetPartitionResultAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 243
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the state of a projection for a specified partition.\n"
  example: []
  syntax:
    content: public Task<string> GetPartitionResultAsync(string name, string partitionId, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: partitionId
      type: System.String
      description: The id of the partition.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{System.String}
      description: String of JSON containing projection state.
    content.vb: Public Function GetPartitionResultAsync(name As String, partitionId As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetStatisticsAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetStatisticsAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.GetStatisticsAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: GetStatisticsAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 256
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the statistics of a projection.\n"
  example: []
  syntax:
    content: public Task<string> GetStatisticsAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{System.String}
      description: String of JSON containing projection statistics.
    content.vb: Public Function GetStatisticsAsync(name As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: GetQueryAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: GetQueryAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.GetQueryAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: GetQueryAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 268
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously gets the status of a query.\n"
  example: []
  syntax:
    content: public Task<string> GetQueryAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the query.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task{System.String}
      description: String of JSON containing query status.
    content.vb: Public Function GetQueryAsync(name As String, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: UpdateQueryAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: UpdateQueryAsync(String, String, UserCredentials)
  nameWithType: ProjectionsManager.UpdateQueryAsync(String, String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: UpdateQueryAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 280
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously updates the definition of a query.\n"
  example: []
  syntax:
    content: public Task UpdateQueryAsync(string name, string query, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the query.
    - id: query
      type: System.String
      description: The JavaScript source code of the query.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task
    content.vb: Public Function UpdateQueryAsync(name As String, query As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String,System.String,System.Nullable{System.Boolean},EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String,System.String,System.Nullable{System.Boolean},EventStore.ClientAPI.SystemData.UserCredentials)
  id: UpdateQueryAsync(System.String,System.String,System.Nullable{System.Boolean},EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: UpdateQueryAsync(String, String, Nullable<Boolean>, UserCredentials)
  nameWithType: ProjectionsManager.UpdateQueryAsync(String, String, Nullable<Boolean>, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String, System.String, System.Nullable<System.Boolean>, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: UpdateQueryAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 295
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously updates the definition of a query.\n"
  example: []
  syntax:
    content: public Task UpdateQueryAsync(string name, string query, bool? emitEnabled = null, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the query.
    - id: query
      type: System.String
      description: The JavaScript source code of the query.
    - id: emitEnabled
      type: System.Nullable{System.Boolean}
      description: Allow projection to send events to other streams
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for the operation.
    return:
      type: Task
    content.vb: Public Function UpdateQueryAsync(name As String, query As String, emitEnabled As Boolean? = Nothing, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync*
  nameWithType.vb: ProjectionsManager.UpdateQueryAsync(String, String, Nullable(Of Boolean), UserCredentials)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String, System.String, System.Nullable(Of System.Boolean), EventStore.ClientAPI.SystemData.UserCredentials)
  name.vb: UpdateQueryAsync(String, String, Nullable(Of Boolean), UserCredentials)
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  id: DeleteAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: DeleteAsync(String, UserCredentials)
  nameWithType: ProjectionsManager.DeleteAsync(String, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: DeleteAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 310
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously deletes a projection \n"
  example: []
  syntax:
    content: public Task DeleteAsync(string name, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to delete a projection
    return:
      type: Task
      description: A task representing the operation.
    content.vb: Public Function DeleteAsync(name As String, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  id: DeleteAsync(System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.ProjectionsManager
  langs:
  - csharp
  - vb
  name: DeleteAsync(String, Boolean, UserCredentials)
  nameWithType: ProjectionsManager.DeleteAsync(String, Boolean, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String, System.Boolean, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    remote:
      path: src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: DeleteAsync
    path: ../EventStore/src/EventStore.ClientAPI/Projections/ProjectionsManager.cs
    startLine: 322
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously deletes a projection \n"
  example: []
  syntax:
    content: public Task DeleteAsync(string name, bool deleteEmittedStreams, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the projection.
    - id: deleteEmittedStreams
      type: System.Boolean
      description: Whether to delete the streams that were emitted by this projection.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to delete a projection
    return:
      type: Task
      description: A task representing the operation.
    content.vb: Public Function DeleteAsync(name As String, deleteEmittedStreams As Boolean, userCredentials As UserCredentials = Nothing) As Task
  overload: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI.Projections
  commentId: N:EventStore.ClientAPI.Projections
  name: EventStore.ClientAPI.Projections
  nameWithType: EventStore.ClientAPI.Projections
  fullName: EventStore.ClientAPI.Projections
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ProjectionsManager>()
  nameWithType: ProtobufExtensions.Serialize<ProjectionsManager>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.Projections.ProjectionsManager>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ProjectionsManager)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.Projections.ProjectionsManager)()
  name.vb: Serialize(Of ProjectionsManager)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ProjectionsManager>
    nameWithType: ProtobufExtensions.Serialize<ProjectionsManager>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.Projections.ProjectionsManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ProjectionsManager)
    nameWithType: ProtobufExtensions.Serialize(Of ProjectionsManager)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.Projections.ProjectionsManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ProjectionsManager>()
  nameWithType: ProtobufExtensions.SerializeToArray<ProjectionsManager>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.Projections.ProjectionsManager>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ProjectionsManager)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.Projections.ProjectionsManager)()
  name.vb: SerializeToArray(Of ProjectionsManager)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ProjectionsManager>
    nameWithType: ProtobufExtensions.SerializeToArray<ProjectionsManager>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.Projections.ProjectionsManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ProjectionsManager)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ProjectionsManager)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.Projections.ProjectionsManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.ClientAPI.Projections.ProjectionsManager
  commentId: T:EventStore.ClientAPI.Projections.ProjectionsManager
  name: ProjectionsManager
  nameWithType: ProjectionsManager
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager
- uid: EventStore.ClientAPI.ILogger
  commentId: T:EventStore.ClientAPI.ILogger
  parent: EventStore.ClientAPI
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.ClientAPI.ILogger
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.#ctor*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.#ctor
  name: ProjectionsManager
  nameWithType: ProjectionsManager.ProjectionsManager
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ProjectionsManager
- uid: EndPoint
  isExternal: true
  name: EndPoint
  nameWithType: EndPoint
  fullName: EndPoint
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync
  name: EnableAsync
  nameWithType: ProjectionsManager.EnableAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync
- uid: EventStore.ClientAPI.SystemData.UserCredentials
  commentId: T:EventStore.ClientAPI.SystemData.UserCredentials
  parent: EventStore.ClientAPI.SystemData
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.ClientAPI.SystemData.UserCredentials
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: EventStore.ClientAPI.SystemData
  commentId: N:EventStore.ClientAPI.SystemData
  name: EventStore.ClientAPI.SystemData
  nameWithType: EventStore.ClientAPI.SystemData
  fullName: EventStore.ClientAPI.SystemData
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync
  name: DisableAsync
  nameWithType: ProjectionsManager.DisableAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync
  name: AbortAsync
  nameWithType: ProjectionsManager.AbortAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync
  name: CreateOneTimeAsync
  nameWithType: ProjectionsManager.CreateOneTimeAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync
  name: CreateTransientAsync
  nameWithType: ProjectionsManager.CreateTransientAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync
  name: CreateContinuousAsync
  nameWithType: ProjectionsManager.CreateContinuousAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsStringAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsStringAsync
  name: ListAllAsStringAsync
  nameWithType: ProjectionsManager.ListAllAsStringAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsStringAsync
- uid: Task{System.String}
  commentId: '!:Task{System.String}'
  definition: Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync
  name: ListAllAsync
  nameWithType: ProjectionsManager.ListAllAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync
- uid: Task{List{EventStore.ClientAPI.Projections.ProjectionDetails}}
  commentId: '!:Task{List{EventStore.ClientAPI.Projections.ProjectionDetails}}'
  definition: Task`1
  name: Task<List<ProjectionDetails>>
  nameWithType: Task<List<ProjectionDetails>>
  fullName: Task<List<EventStore.ClientAPI.Projections.ProjectionDetails>>
  nameWithType.vb: Task(Of List(Of ProjectionDetails))
  fullName.vb: Task(Of List(Of EventStore.ClientAPI.Projections.ProjectionDetails))
  name.vb: Task(Of List(Of ProjectionDetails))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.Projections.ProjectionDetails
    name: ProjectionDetails
    nameWithType: ProjectionDetails
    fullName: EventStore.ClientAPI.Projections.ProjectionDetails
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.Projections.ProjectionDetails
    name: ProjectionDetails
    nameWithType: ProjectionDetails
    fullName: EventStore.ClientAPI.Projections.ProjectionDetails
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsStringAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsStringAsync
  name: ListOneTimeAsStringAsync
  nameWithType: ProjectionsManager.ListOneTimeAsStringAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsStringAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync
  name: ListOneTimeAsync
  nameWithType: ProjectionsManager.ListOneTimeAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsStringAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsStringAsync
  name: ListContinuousAsStringAsync
  nameWithType: ProjectionsManager.ListContinuousAsStringAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsStringAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync
  name: ListContinuousAsync
  nameWithType: ProjectionsManager.ListContinuousAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync
  name: GetStatusAsync
  nameWithType: ProjectionsManager.GetStatusAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync
  name: GetStateAsync
  nameWithType: ProjectionsManager.GetStateAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync
  name: GetPartitionStateAsync
  nameWithType: ProjectionsManager.GetPartitionStateAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync
  name: GetResultAsync
  nameWithType: ProjectionsManager.GetResultAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync
  name: GetPartitionResultAsync
  nameWithType: ProjectionsManager.GetPartitionResultAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync
  name: GetStatisticsAsync
  nameWithType: ProjectionsManager.GetStatisticsAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync
  name: GetQueryAsync
  nameWithType: ProjectionsManager.GetQueryAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync
  name: UpdateQueryAsync
  nameWithType: ProjectionsManager.UpdateQueryAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync
- uid: System.Nullable{System.Boolean}
  commentId: '!:System.Nullable{System.Boolean}'
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync
  name: DeleteAsync
  nameWithType: ProjectionsManager.DeleteAsync
  fullName: EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync

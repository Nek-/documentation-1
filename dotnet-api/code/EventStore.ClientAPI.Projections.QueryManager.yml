### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.Projections.QueryManager
  commentId: T:EventStore.ClientAPI.Projections.QueryManager
  id: QueryManager
  parent: EventStore.ClientAPI.Projections
  children:
  - EventStore.ClientAPI.Projections.QueryManager.#ctor(EventStore.ClientAPI.ILogger,EndPoint,TimeSpan,TimeSpan,EventStore.ClientAPI.Transport.Http.IHttpClient)
  - EventStore.ClientAPI.Projections.QueryManager.ExecuteAsync(System.String,System.String,TimeSpan,TimeSpan,EventStore.ClientAPI.SystemData.UserCredentials)
  langs:
  - csharp
  - vb
  name: QueryManager
  nameWithType: QueryManager
  fullName: EventStore.ClientAPI.Projections.QueryManager
  type: Class
  source:
    id: QueryManager
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/QueryManager.cs
    startLine: 14
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAPI for executing queries in the Event Store through C# code. Communicates\nwith the Event Store over the RESTful API.\n"
  example: []
  syntax:
    content: 'public class QueryManager : object'
    content.vb: >-
      Public Class QueryManager
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.ClientAPI.Projections.QueryManager.#ctor(EventStore.ClientAPI.ILogger,EndPoint,TimeSpan,TimeSpan,EventStore.ClientAPI.Transport.Http.IHttpClient)
  commentId: M:EventStore.ClientAPI.Projections.QueryManager.#ctor(EventStore.ClientAPI.ILogger,EndPoint,TimeSpan,TimeSpan,EventStore.ClientAPI.Transport.Http.IHttpClient)
  id: '#ctor(EventStore.ClientAPI.ILogger,EndPoint,TimeSpan,TimeSpan,EventStore.ClientAPI.Transport.Http.IHttpClient)'
  parent: EventStore.ClientAPI.Projections.QueryManager
  langs:
  - csharp
  - vb
  name: QueryManager(ILogger, EndPoint, TimeSpan, TimeSpan, IHttpClient)
  nameWithType: QueryManager.QueryManager(ILogger, EndPoint, TimeSpan, TimeSpan, IHttpClient)
  fullName: EventStore.ClientAPI.Projections.QueryManager.QueryManager(EventStore.ClientAPI.ILogger, EndPoint, TimeSpan, TimeSpan, EventStore.ClientAPI.Transport.Http.IHttpClient)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/QueryManager.cs
    startLine: 26
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nCreates a new instance of <xref href=\"EventStore.ClientAPI.Projections.QueryManager\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public QueryManager(ILogger log, EndPoint httpEndPoint, TimeSpan projectionOperationTimeout, TimeSpan queryTimeout, IHttpClient client = null)
    parameters:
    - id: log
      type: EventStore.ClientAPI.ILogger
      description: An instance of <xref href="EventStore.ClientAPI.ILogger" data-throw-if-not-resolved="false"></xref> to use for logging.
    - id: httpEndPoint
      type: EndPoint
      description: HTTP endpoint of an Event Store server.
    - id: projectionOperationTimeout
      type: TimeSpan
      description: Timeout of projection API operations
    - id: queryTimeout
      type: TimeSpan
      description: Timeout of query execution
    - id: client
      type: EventStore.ClientAPI.Transport.Http.IHttpClient
      description: Overrideable HTTP Client Handler
    content.vb: Public Sub New(log As ILogger, httpEndPoint As EndPoint, projectionOperationTimeout As TimeSpan, queryTimeout As TimeSpan, client As IHttpClient = Nothing)
  overload: EventStore.ClientAPI.Projections.QueryManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.ClientAPI.Projections.QueryManager.ExecuteAsync(System.String,System.String,TimeSpan,TimeSpan,EventStore.ClientAPI.SystemData.UserCredentials)
  commentId: M:EventStore.ClientAPI.Projections.QueryManager.ExecuteAsync(System.String,System.String,TimeSpan,TimeSpan,EventStore.ClientAPI.SystemData.UserCredentials)
  id: ExecuteAsync(System.String,System.String,TimeSpan,TimeSpan,EventStore.ClientAPI.SystemData.UserCredentials)
  parent: EventStore.ClientAPI.Projections.QueryManager
  langs:
  - csharp
  - vb
  name: ExecuteAsync(String, String, TimeSpan, TimeSpan, UserCredentials)
  nameWithType: QueryManager.ExecuteAsync(String, String, TimeSpan, TimeSpan, UserCredentials)
  fullName: EventStore.ClientAPI.Projections.QueryManager.ExecuteAsync(System.String, System.String, TimeSpan, TimeSpan, EventStore.ClientAPI.SystemData.UserCredentials)
  type: Method
  source:
    id: ExecuteAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Projections/QueryManager.cs
    startLine: 44
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Projections
  summary: "\nAsynchronously executes a query.\n"
  remarks: "\nCreates a new transient projection and polls its status until it is Completed.\n"
  example: []
  syntax:
    content: public Task<string> ExecuteAsync(string name, string query, TimeSpan initialPollingDelay, TimeSpan maximumPollingDelay, UserCredentials userCredentials = null)
    parameters:
    - id: name
      type: System.String
      description: A name for the query.
    - id: query
      type: System.String
      description: The JavaScript source code for the query.
    - id: initialPollingDelay
      type: TimeSpan
      description: Initial time to wait between polling for projection status.
    - id: maximumPollingDelay
      type: TimeSpan
      description: Maximum time to wait between polling for projection status.
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
      description: Credentials for a user with permission to create a query.
    return:
      type: Task{System.String}
      description: String of JSON containing query result.
    content.vb: Public Function ExecuteAsync(name As String, query As String, initialPollingDelay As TimeSpan, maximumPollingDelay As TimeSpan, userCredentials As UserCredentials = Nothing) As Task(Of String)
  overload: EventStore.ClientAPI.Projections.QueryManager.ExecuteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.ClientAPI.Projections
  commentId: N:EventStore.ClientAPI.Projections
  name: EventStore.ClientAPI.Projections
  nameWithType: EventStore.ClientAPI.Projections
  fullName: EventStore.ClientAPI.Projections
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.ClientAPI.Projections.QueryManager
  commentId: T:EventStore.ClientAPI.Projections.QueryManager
  name: QueryManager
  nameWithType: QueryManager
  fullName: EventStore.ClientAPI.Projections.QueryManager
- uid: EventStore.ClientAPI.ILogger
  commentId: T:EventStore.ClientAPI.ILogger
  parent: EventStore.ClientAPI
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.ClientAPI.ILogger
- uid: EventStore.ClientAPI.Projections.QueryManager.#ctor*
  commentId: Overload:EventStore.ClientAPI.Projections.QueryManager.#ctor
  name: QueryManager
  nameWithType: QueryManager.QueryManager
  fullName: EventStore.ClientAPI.Projections.QueryManager.QueryManager
- uid: EndPoint
  isExternal: true
  name: EndPoint
  nameWithType: EndPoint
  fullName: EndPoint
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: EventStore.ClientAPI.Transport.Http.IHttpClient
  commentId: T:EventStore.ClientAPI.Transport.Http.IHttpClient
  parent: EventStore.ClientAPI.Transport.Http
  name: IHttpClient
  nameWithType: IHttpClient
  fullName: EventStore.ClientAPI.Transport.Http.IHttpClient
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: EventStore.ClientAPI.Transport.Http
  commentId: N:EventStore.ClientAPI.Transport.Http
  name: EventStore.ClientAPI.Transport.Http
  nameWithType: EventStore.ClientAPI.Transport.Http
  fullName: EventStore.ClientAPI.Transport.Http
- uid: EventStore.ClientAPI.Projections.QueryManager.ExecuteAsync*
  commentId: Overload:EventStore.ClientAPI.Projections.QueryManager.ExecuteAsync
  name: ExecuteAsync
  nameWithType: QueryManager.ExecuteAsync
  fullName: EventStore.ClientAPI.Projections.QueryManager.ExecuteAsync
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.ClientAPI.SystemData.UserCredentials
  commentId: T:EventStore.ClientAPI.SystemData.UserCredentials
  parent: EventStore.ClientAPI.SystemData
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.ClientAPI.SystemData.UserCredentials
- uid: Task{System.String}
  commentId: '!:Task{System.String}'
  definition: Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.SystemData
  commentId: N:EventStore.ClientAPI.SystemData
  name: EventStore.ClientAPI.SystemData
  nameWithType: EventStore.ClientAPI.SystemData
  fullName: EventStore.ClientAPI.SystemData
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.ResolvedEvent
  commentId: T:EventStore.ClientAPI.ResolvedEvent
  id: ResolvedEvent
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.ResolvedEvent.Event
  - EventStore.ClientAPI.ResolvedEvent.IsResolved
  - EventStore.ClientAPI.ResolvedEvent.Link
  - EventStore.ClientAPI.ResolvedEvent.OriginalEvent
  - EventStore.ClientAPI.ResolvedEvent.OriginalEventNumber
  - EventStore.ClientAPI.ResolvedEvent.OriginalPosition
  - EventStore.ClientAPI.ResolvedEvent.OriginalStreamId
  langs:
  - csharp
  - vb
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.ClientAPI.ResolvedEvent
  type: Struct
  source:
    id: ResolvedEvent
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ResolvedEvent.cs
    startLine: 7
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nA structure representing a single event or an resolved link event.\n"
  example: []
  syntax:
    content: 'public struct ResolvedEvent : IResolvedEvent'
    content.vb: >-
      Public Structure ResolvedEvent

          Implements IResolvedEvent
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - EventStore.ClientAPI.ResolvedEvent.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: EventStore.ClientAPI.ResolvedEvent.Event
  commentId: F:EventStore.ClientAPI.ResolvedEvent.Event
  id: Event
  parent: EventStore.ClientAPI.ResolvedEvent
  langs:
  - csharp
  - vb
  name: Event
  nameWithType: ResolvedEvent.Event
  fullName: EventStore.ClientAPI.ResolvedEvent.Event
  type: Field
  source:
    id: Event
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ResolvedEvent.cs
    startLine: 12
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe event, or the resolved link event if this <xref href=\"EventStore.ClientAPI.ResolvedEvent\" data-throw-if-not-resolved=\"false\"></xref> is\na link event.\n"
  example: []
  syntax:
    content: public readonly RecordedEvent Event
    return:
      type: EventStore.ClientAPI.RecordedEvent
    content.vb: Public ReadOnly Event As RecordedEvent
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ResolvedEvent.Link
  commentId: F:EventStore.ClientAPI.ResolvedEvent.Link
  id: Link
  parent: EventStore.ClientAPI.ResolvedEvent
  langs:
  - csharp
  - vb
  name: Link
  nameWithType: ResolvedEvent.Link
  fullName: EventStore.ClientAPI.ResolvedEvent.Link
  type: Field
  source:
    id: Link
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ResolvedEvent.cs
    startLine: 17
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe link event if this <xref href=\"EventStore.ClientAPI.ResolvedEvent\" data-throw-if-not-resolved=\"false\"></xref> is a link event.\n"
  example: []
  syntax:
    content: public readonly RecordedEvent Link
    return:
      type: EventStore.ClientAPI.RecordedEvent
    content.vb: Public ReadOnly Link As RecordedEvent
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ResolvedEvent.OriginalEvent
  commentId: P:EventStore.ClientAPI.ResolvedEvent.OriginalEvent
  id: OriginalEvent
  parent: EventStore.ClientAPI.ResolvedEvent
  langs:
  - csharp
  - vb
  name: OriginalEvent
  nameWithType: ResolvedEvent.OriginalEvent
  fullName: EventStore.ClientAPI.ResolvedEvent.OriginalEvent
  type: Property
  source:
    id: OriginalEvent
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ResolvedEvent.cs
    startLine: 26
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nReturns the event that was read or which triggered the subscription.\n\nIf this <xref href=\"EventStore.ClientAPI.ResolvedEvent\" data-throw-if-not-resolved=\"false\"></xref> represents a link event, the Link\nwill be the <xref href=\"EventStore.ClientAPI.ResolvedEvent.OriginalEvent\" data-throw-if-not-resolved=\"false\"></xref>, otherwise it will be the\nevent.\n"
  example: []
  syntax:
    content: public RecordedEvent OriginalEvent { get; }
    parameters: []
    return:
      type: EventStore.ClientAPI.RecordedEvent
    content.vb: Public ReadOnly Property OriginalEvent As RecordedEvent
  overload: EventStore.ClientAPI.ResolvedEvent.OriginalEvent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ResolvedEvent.IsResolved
  commentId: P:EventStore.ClientAPI.ResolvedEvent.IsResolved
  id: IsResolved
  parent: EventStore.ClientAPI.ResolvedEvent
  langs:
  - csharp
  - vb
  name: IsResolved
  nameWithType: ResolvedEvent.IsResolved
  fullName: EventStore.ClientAPI.ResolvedEvent.IsResolved
  type: Property
  source:
    id: IsResolved
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ResolvedEvent.cs
    startLine: 34
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nIndicates whether this <xref href=\"EventStore.ClientAPI.ResolvedEvent\" data-throw-if-not-resolved=\"false\"></xref> is a resolved link\nevent.\n"
  example: []
  syntax:
    content: public bool IsResolved { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsResolved As Boolean
  overload: EventStore.ClientAPI.ResolvedEvent.IsResolved*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ResolvedEvent.OriginalPosition
  commentId: F:EventStore.ClientAPI.ResolvedEvent.OriginalPosition
  id: OriginalPosition
  parent: EventStore.ClientAPI.ResolvedEvent
  langs:
  - csharp
  - vb
  name: OriginalPosition
  nameWithType: ResolvedEvent.OriginalPosition
  fullName: EventStore.ClientAPI.ResolvedEvent.OriginalPosition
  type: Field
  source:
    id: OriginalPosition
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ResolvedEvent.cs
    startLine: 41
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe logical position of the <xref href=\"EventStore.ClientAPI.ResolvedEvent.OriginalEvent\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly Position? OriginalPosition
    return:
      type: System.Nullable{EventStore.ClientAPI.Position}
    content.vb: Public ReadOnly OriginalPosition As Position?
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ResolvedEvent.OriginalStreamId
  commentId: P:EventStore.ClientAPI.ResolvedEvent.OriginalStreamId
  id: OriginalStreamId
  parent: EventStore.ClientAPI.ResolvedEvent
  langs:
  - csharp
  - vb
  name: OriginalStreamId
  nameWithType: ResolvedEvent.OriginalStreamId
  fullName: EventStore.ClientAPI.ResolvedEvent.OriginalStreamId
  type: Property
  source:
    id: OriginalStreamId
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ResolvedEvent.cs
    startLine: 46
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe stream name of the <xref href=\"EventStore.ClientAPI.ResolvedEvent.OriginalEvent\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string OriginalStreamId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property OriginalStreamId As String
  overload: EventStore.ClientAPI.ResolvedEvent.OriginalStreamId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.ClientAPI.ResolvedEvent.OriginalEventNumber
  commentId: P:EventStore.ClientAPI.ResolvedEvent.OriginalEventNumber
  id: OriginalEventNumber
  parent: EventStore.ClientAPI.ResolvedEvent
  langs:
  - csharp
  - vb
  name: OriginalEventNumber
  nameWithType: ResolvedEvent.OriginalEventNumber
  fullName: EventStore.ClientAPI.ResolvedEvent.OriginalEventNumber
  type: Property
  source:
    id: OriginalEventNumber
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/ResolvedEvent.cs
    startLine: 53
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe event number in the stream of the <xref href=\"EventStore.ClientAPI.ResolvedEvent.OriginalEvent\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public long OriginalEventNumber { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property OriginalEventNumber As Long
  overload: EventStore.ClientAPI.ResolvedEvent.OriginalEventNumber*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ResolvedEvent.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  parent: EventStore.Projections.Core.Utils.EnumExtensions
  definition: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<ResolvedEvent>()
  nameWithType: EnumExtensions.EnumValueName<ResolvedEvent>()
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.ClientAPI.ResolvedEvent>()
  nameWithType.vb: EnumExtensions.EnumValueName(Of ResolvedEvent)()
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.ClientAPI.ResolvedEvent)()
  name.vb: EnumValueName(Of ResolvedEvent)()
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName<ResolvedEvent>
    nameWithType: EnumExtensions.EnumValueName<ResolvedEvent>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.ClientAPI.ResolvedEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName(Of ResolvedEvent)
    nameWithType: EnumExtensions.EnumValueName(Of ResolvedEvent)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.ClientAPI.ResolvedEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<T>(T)
  nameWithType: EnumExtensions.EnumValueName<T>(T)
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>(T)
  nameWithType.vb: EnumExtensions.EnumValueName(Of T)(T)
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)(T)
  name.vb: EnumValueName(Of T)(T)
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName<T>
    nameWithType: EnumExtensions.EnumValueName<T>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName(Of T)
    nameWithType: EnumExtensions.EnumValueName(Of T)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions
  commentId: T:EventStore.Projections.Core.Utils.EnumExtensions
  parent: EventStore.Projections.Core.Utils
  name: EnumExtensions
  nameWithType: EnumExtensions
  fullName: EventStore.Projections.Core.Utils.EnumExtensions
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Projections.Core.Utils
  commentId: N:EventStore.Projections.Core.Utils
  name: EventStore.Projections.Core.Utils
  nameWithType: EventStore.Projections.Core.Utils
  fullName: EventStore.Projections.Core.Utils
- uid: EventStore.ClientAPI.ResolvedEvent
  commentId: T:EventStore.ClientAPI.ResolvedEvent
  parent: EventStore.ClientAPI
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.ClientAPI.ResolvedEvent
- uid: EventStore.ClientAPI.RecordedEvent
  commentId: T:EventStore.ClientAPI.RecordedEvent
  parent: EventStore.ClientAPI
  name: RecordedEvent
  nameWithType: RecordedEvent
  fullName: EventStore.ClientAPI.RecordedEvent
- uid: EventStore.ClientAPI.ResolvedEvent.OriginalEvent
  commentId: P:EventStore.ClientAPI.ResolvedEvent.OriginalEvent
  isExternal: true
- uid: EventStore.ClientAPI.ResolvedEvent.OriginalEvent*
  commentId: Overload:EventStore.ClientAPI.ResolvedEvent.OriginalEvent
  name: OriginalEvent
  nameWithType: ResolvedEvent.OriginalEvent
  fullName: EventStore.ClientAPI.ResolvedEvent.OriginalEvent
- uid: EventStore.ClientAPI.ResolvedEvent.IsResolved*
  commentId: Overload:EventStore.ClientAPI.ResolvedEvent.IsResolved
  name: IsResolved
  nameWithType: ResolvedEvent.IsResolved
  fullName: EventStore.ClientAPI.ResolvedEvent.IsResolved
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Nullable{EventStore.ClientAPI.Position}
  commentId: T:System.Nullable{EventStore.ClientAPI.Position}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Position>
  nameWithType: Nullable<Position>
  fullName: System.Nullable<EventStore.ClientAPI.Position>
  nameWithType.vb: Nullable(Of Position)
  fullName.vb: System.Nullable(Of EventStore.ClientAPI.Position)
  name.vb: Nullable(Of Position)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.Position
    name: Position
    nameWithType: Position
    fullName: EventStore.ClientAPI.Position
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.ResolvedEvent.OriginalStreamId*
  commentId: Overload:EventStore.ClientAPI.ResolvedEvent.OriginalStreamId
  name: OriginalStreamId
  nameWithType: ResolvedEvent.OriginalStreamId
  fullName: EventStore.ClientAPI.ResolvedEvent.OriginalStreamId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.ClientAPI.ResolvedEvent.OriginalEventNumber*
  commentId: Overload:EventStore.ClientAPI.ResolvedEvent.OriginalEventNumber
  name: OriginalEventNumber
  nameWithType: ResolvedEvent.OriginalEventNumber
  fullName: EventStore.ClientAPI.ResolvedEvent.OriginalEventNumber
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64

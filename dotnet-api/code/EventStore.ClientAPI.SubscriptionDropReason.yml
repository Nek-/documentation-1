### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.SubscriptionDropReason
  commentId: T:EventStore.ClientAPI.SubscriptionDropReason
  id: SubscriptionDropReason
  parent: EventStore.ClientAPI
  children:
  - EventStore.ClientAPI.SubscriptionDropReason.AccessDenied
  - EventStore.ClientAPI.SubscriptionDropReason.CatchUpError
  - EventStore.ClientAPI.SubscriptionDropReason.ConnectionClosed
  - EventStore.ClientAPI.SubscriptionDropReason.EventHandlerException
  - EventStore.ClientAPI.SubscriptionDropReason.MaxSubscribersReached
  - EventStore.ClientAPI.SubscriptionDropReason.NotAuthenticated
  - EventStore.ClientAPI.SubscriptionDropReason.NotFound
  - EventStore.ClientAPI.SubscriptionDropReason.PersistentSubscriptionDeleted
  - EventStore.ClientAPI.SubscriptionDropReason.ProcessingQueueOverflow
  - EventStore.ClientAPI.SubscriptionDropReason.ServerError
  - EventStore.ClientAPI.SubscriptionDropReason.SubscribingError
  - EventStore.ClientAPI.SubscriptionDropReason.Unknown
  - EventStore.ClientAPI.SubscriptionDropReason.UserInitiated
  langs:
  - csharp
  - vb
  name: SubscriptionDropReason
  nameWithType: SubscriptionDropReason
  fullName: EventStore.ClientAPI.SubscriptionDropReason
  type: Enum
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: SubscriptionDropReason
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 5
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nRepresents the reason subscription drop happened\n"
  example: []
  syntax:
    content: 'public enum SubscriptionDropReason : int'
    content.vb: Public Enum SubscriptionDropReason As Integer
  extensionMethods:
  - EventStore.ClientAPI.SubscriptionDropReason.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  - EventStore.ClientAPI.SubscriptionDropReason.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.ClientAPI.SubscriptionDropReason.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: EventStore.ClientAPI.SubscriptionDropReason.UserInitiated
  commentId: F:EventStore.ClientAPI.SubscriptionDropReason.UserInitiated
  id: UserInitiated
  parent: EventStore.ClientAPI.SubscriptionDropReason
  langs:
  - csharp
  - vb
  name: UserInitiated
  nameWithType: SubscriptionDropReason.UserInitiated
  fullName: EventStore.ClientAPI.SubscriptionDropReason.UserInitiated
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: UserInitiated
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 10
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscription dropped because the client called Close.\n"
  example: []
  syntax:
    content: UserInitiated = 0
    return:
      type: EventStore.ClientAPI.SubscriptionDropReason
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.SubscriptionDropReason.NotAuthenticated
  commentId: F:EventStore.ClientAPI.SubscriptionDropReason.NotAuthenticated
  id: NotAuthenticated
  parent: EventStore.ClientAPI.SubscriptionDropReason
  langs:
  - csharp
  - vb
  name: NotAuthenticated
  nameWithType: SubscriptionDropReason.NotAuthenticated
  fullName: EventStore.ClientAPI.SubscriptionDropReason.NotAuthenticated
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: NotAuthenticated
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 14
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscription dropped because the client is not authenticated.\n"
  example: []
  syntax:
    content: NotAuthenticated = 1
    return:
      type: EventStore.ClientAPI.SubscriptionDropReason
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.SubscriptionDropReason.AccessDenied
  commentId: F:EventStore.ClientAPI.SubscriptionDropReason.AccessDenied
  id: AccessDenied
  parent: EventStore.ClientAPI.SubscriptionDropReason
  langs:
  - csharp
  - vb
  name: AccessDenied
  nameWithType: SubscriptionDropReason.AccessDenied
  fullName: EventStore.ClientAPI.SubscriptionDropReason.AccessDenied
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: AccessDenied
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 18
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscription dropped because access to the stream was denied.\n"
  example: []
  syntax:
    content: AccessDenied = 2
    return:
      type: EventStore.ClientAPI.SubscriptionDropReason
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.SubscriptionDropReason.SubscribingError
  commentId: F:EventStore.ClientAPI.SubscriptionDropReason.SubscribingError
  id: SubscribingError
  parent: EventStore.ClientAPI.SubscriptionDropReason
  langs:
  - csharp
  - vb
  name: SubscribingError
  nameWithType: SubscriptionDropReason.SubscribingError
  fullName: EventStore.ClientAPI.SubscriptionDropReason.SubscribingError
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: SubscribingError
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 22
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscription dropped because of an error in the subscription phase.\n"
  example: []
  syntax:
    content: SubscribingError = 3
    return:
      type: EventStore.ClientAPI.SubscriptionDropReason
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.SubscriptionDropReason.ServerError
  commentId: F:EventStore.ClientAPI.SubscriptionDropReason.ServerError
  id: ServerError
  parent: EventStore.ClientAPI.SubscriptionDropReason
  langs:
  - csharp
  - vb
  name: ServerError
  nameWithType: SubscriptionDropReason.ServerError
  fullName: EventStore.ClientAPI.SubscriptionDropReason.ServerError
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ServerError
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 26
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscription dropped because of a server error.\n"
  example: []
  syntax:
    content: ServerError = 4
    return:
      type: EventStore.ClientAPI.SubscriptionDropReason
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.SubscriptionDropReason.ConnectionClosed
  commentId: F:EventStore.ClientAPI.SubscriptionDropReason.ConnectionClosed
  id: ConnectionClosed
  parent: EventStore.ClientAPI.SubscriptionDropReason
  langs:
  - csharp
  - vb
  name: ConnectionClosed
  nameWithType: SubscriptionDropReason.ConnectionClosed
  fullName: EventStore.ClientAPI.SubscriptionDropReason.ConnectionClosed
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ConnectionClosed
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 30
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscription dropped because the connection was closed.\n"
  example: []
  syntax:
    content: ConnectionClosed = 5
    return:
      type: EventStore.ClientAPI.SubscriptionDropReason
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.SubscriptionDropReason.CatchUpError
  commentId: F:EventStore.ClientAPI.SubscriptionDropReason.CatchUpError
  id: CatchUpError
  parent: EventStore.ClientAPI.SubscriptionDropReason
  langs:
  - csharp
  - vb
  name: CatchUpError
  nameWithType: SubscriptionDropReason.CatchUpError
  fullName: EventStore.ClientAPI.SubscriptionDropReason.CatchUpError
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: CatchUpError
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 35
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscription dropped because of an error during the catch-up phase.\n"
  example: []
  syntax:
    content: CatchUpError = 6
    return:
      type: EventStore.ClientAPI.SubscriptionDropReason
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.SubscriptionDropReason.ProcessingQueueOverflow
  commentId: F:EventStore.ClientAPI.SubscriptionDropReason.ProcessingQueueOverflow
  id: ProcessingQueueOverflow
  parent: EventStore.ClientAPI.SubscriptionDropReason
  langs:
  - csharp
  - vb
  name: ProcessingQueueOverflow
  nameWithType: SubscriptionDropReason.ProcessingQueueOverflow
  fullName: EventStore.ClientAPI.SubscriptionDropReason.ProcessingQueueOverflow
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ProcessingQueueOverflow
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 39
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscription dropped because it&apos;s queue overflowed.\n"
  example: []
  syntax:
    content: ProcessingQueueOverflow = 7
    return:
      type: EventStore.ClientAPI.SubscriptionDropReason
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.SubscriptionDropReason.EventHandlerException
  commentId: F:EventStore.ClientAPI.SubscriptionDropReason.EventHandlerException
  id: EventHandlerException
  parent: EventStore.ClientAPI.SubscriptionDropReason
  langs:
  - csharp
  - vb
  name: EventHandlerException
  nameWithType: SubscriptionDropReason.EventHandlerException
  fullName: EventStore.ClientAPI.SubscriptionDropReason.EventHandlerException
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: EventHandlerException
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 43
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscription dropped because an exception was thrown by a handler.\n"
  example: []
  syntax:
    content: EventHandlerException = 8
    return:
      type: EventStore.ClientAPI.SubscriptionDropReason
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.SubscriptionDropReason.MaxSubscribersReached
  commentId: F:EventStore.ClientAPI.SubscriptionDropReason.MaxSubscribersReached
  id: MaxSubscribersReached
  parent: EventStore.ClientAPI.SubscriptionDropReason
  langs:
  - csharp
  - vb
  name: MaxSubscribersReached
  nameWithType: SubscriptionDropReason.MaxSubscribersReached
  fullName: EventStore.ClientAPI.SubscriptionDropReason.MaxSubscribersReached
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: MaxSubscribersReached
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 48
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe maximum number of subscribers for the persistent subscription has been reached\n"
  example: []
  syntax:
    content: MaxSubscribersReached = 9
    return:
      type: EventStore.ClientAPI.SubscriptionDropReason
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.SubscriptionDropReason.PersistentSubscriptionDeleted
  commentId: F:EventStore.ClientAPI.SubscriptionDropReason.PersistentSubscriptionDeleted
  id: PersistentSubscriptionDeleted
  parent: EventStore.ClientAPI.SubscriptionDropReason
  langs:
  - csharp
  - vb
  name: PersistentSubscriptionDeleted
  nameWithType: SubscriptionDropReason.PersistentSubscriptionDeleted
  fullName: EventStore.ClientAPI.SubscriptionDropReason.PersistentSubscriptionDeleted
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: PersistentSubscriptionDeleted
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 53
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nThe persistent subscription has been deleted\n"
  example: []
  syntax:
    content: PersistentSubscriptionDeleted = 10
    return:
      type: EventStore.ClientAPI.SubscriptionDropReason
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.SubscriptionDropReason.Unknown
  commentId: F:EventStore.ClientAPI.SubscriptionDropReason.Unknown
  id: Unknown
  parent: EventStore.ClientAPI.SubscriptionDropReason
  langs:
  - csharp
  - vb
  name: Unknown
  nameWithType: SubscriptionDropReason.Unknown
  fullName: EventStore.ClientAPI.SubscriptionDropReason.Unknown
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Unknown
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 57
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nSubscription was dropped for an unknown reason.\n"
  example: []
  syntax:
    content: Unknown = null
    return:
      type: EventStore.ClientAPI.SubscriptionDropReason
    content.vb: Unknown = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.ClientAPI.SubscriptionDropReason.NotFound
  commentId: F:EventStore.ClientAPI.SubscriptionDropReason.NotFound
  id: NotFound
  parent: EventStore.ClientAPI.SubscriptionDropReason
  langs:
  - csharp
  - vb
  name: NotFound
  nameWithType: SubscriptionDropReason.NotFound
  fullName: EventStore.ClientAPI.SubscriptionDropReason.NotFound
  type: Field
  source:
    remote:
      path: src/EventStore.ClientAPI/SubscriptionDropReason.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: NotFound
    path: ../EventStore/src/EventStore.ClientAPI/SubscriptionDropReason.cs
    startLine: 62
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI
  summary: "\nTarget of persistent subscription was not found. Needs to be created first\n"
  example: []
  syntax:
    content: NotFound = null
    return:
      type: EventStore.ClientAPI.SubscriptionDropReason
    content.vb: NotFound = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: EventStore.ClientAPI
  commentId: N:EventStore.ClientAPI
  name: EventStore.ClientAPI
  nameWithType: EventStore.ClientAPI
  fullName: EventStore.ClientAPI
- uid: EventStore.ClientAPI.SubscriptionDropReason.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  parent: EventStore.Projections.Core.Utils.EnumExtensions
  definition: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<SubscriptionDropReason>()
  nameWithType: EnumExtensions.EnumValueName<SubscriptionDropReason>()
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.ClientAPI.SubscriptionDropReason>()
  nameWithType.vb: EnumExtensions.EnumValueName(Of SubscriptionDropReason)()
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.ClientAPI.SubscriptionDropReason)()
  name.vb: EnumValueName(Of SubscriptionDropReason)()
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName<SubscriptionDropReason>
    nameWithType: EnumExtensions.EnumValueName<SubscriptionDropReason>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.ClientAPI.SubscriptionDropReason>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName(Of SubscriptionDropReason)
    nameWithType: EnumExtensions.EnumValueName(Of SubscriptionDropReason)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.ClientAPI.SubscriptionDropReason)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.SubscriptionDropReason.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<SubscriptionDropReason>()
  nameWithType: ProtobufExtensions.Serialize<SubscriptionDropReason>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.SubscriptionDropReason>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of SubscriptionDropReason)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.SubscriptionDropReason)()
  name.vb: Serialize(Of SubscriptionDropReason)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<SubscriptionDropReason>
    nameWithType: ProtobufExtensions.Serialize<SubscriptionDropReason>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.ClientAPI.SubscriptionDropReason>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of SubscriptionDropReason)
    nameWithType: ProtobufExtensions.Serialize(Of SubscriptionDropReason)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.ClientAPI.SubscriptionDropReason)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.SubscriptionDropReason.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<SubscriptionDropReason>()
  nameWithType: ProtobufExtensions.SerializeToArray<SubscriptionDropReason>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.SubscriptionDropReason>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of SubscriptionDropReason)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.SubscriptionDropReason)()
  name.vb: SerializeToArray(Of SubscriptionDropReason)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<SubscriptionDropReason>
    nameWithType: ProtobufExtensions.SerializeToArray<SubscriptionDropReason>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.ClientAPI.SubscriptionDropReason>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of SubscriptionDropReason)
    nameWithType: ProtobufExtensions.SerializeToArray(Of SubscriptionDropReason)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.ClientAPI.SubscriptionDropReason)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<T>(T)
  nameWithType: EnumExtensions.EnumValueName<T>(T)
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>(T)
  nameWithType.vb: EnumExtensions.EnumValueName(Of T)(T)
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)(T)
  name.vb: EnumValueName(Of T)(T)
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName<T>
    nameWithType: EnumExtensions.EnumValueName<T>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName(Of T)
    nameWithType: EnumExtensions.EnumValueName(Of T)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions
  commentId: T:EventStore.Projections.Core.Utils.EnumExtensions
  parent: EventStore.Projections.Core.Utils
  name: EnumExtensions
  nameWithType: EnumExtensions
  fullName: EventStore.Projections.Core.Utils.EnumExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils
  commentId: N:EventStore.Projections.Core.Utils
  name: EventStore.Projections.Core.Utils
  nameWithType: EventStore.Projections.Core.Utils
  fullName: EventStore.Projections.Core.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.ClientAPI.SubscriptionDropReason
  commentId: T:EventStore.ClientAPI.SubscriptionDropReason
  parent: EventStore.ClientAPI
  name: SubscriptionDropReason
  nameWithType: SubscriptionDropReason
  fullName: EventStore.ClientAPI.SubscriptionDropReason

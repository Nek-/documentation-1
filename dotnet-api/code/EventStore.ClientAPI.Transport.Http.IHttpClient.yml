### YamlMime:ManagedReference
items:
- uid: EventStore.ClientAPI.Transport.Http.IHttpClient
  commentId: T:EventStore.ClientAPI.Transport.Http.IHttpClient
  id: IHttpClient
  parent: EventStore.ClientAPI.Transport.Http
  children:
  - EventStore.ClientAPI.Transport.Http.IHttpClient.Delete(System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception})
  - EventStore.ClientAPI.Transport.Http.IHttpClient.Get(System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception},System.String)
  - EventStore.ClientAPI.Transport.Http.IHttpClient.Post(System.String,System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception})
  - EventStore.ClientAPI.Transport.Http.IHttpClient.Put(System.String,System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception})
  langs:
  - csharp
  - vb
  name: IHttpClient
  nameWithType: IHttpClient
  fullName: EventStore.ClientAPI.Transport.Http.IHttpClient
  type: Interface
  source:
    id: IHttpClient
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Transport.Http/IHttpClient.cs
    startLine: 5
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Transport.Http
  syntax:
    content: public interface IHttpClient
    content.vb: Public Interface IHttpClient
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EventStore.ClientAPI.Transport.Http.IHttpClient.Get(System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception},System.String)
  commentId: M:EventStore.ClientAPI.Transport.Http.IHttpClient.Get(System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception},System.String)
  id: Get(System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception},System.String)
  parent: EventStore.ClientAPI.Transport.Http.IHttpClient
  langs:
  - csharp
  - vb
  name: Get(String, UserCredentials, Action<HttpResponse>, Action<Exception>, String)
  nameWithType: IHttpClient.Get(String, UserCredentials, Action<HttpResponse>, Action<Exception>, String)
  fullName: EventStore.ClientAPI.Transport.Http.IHttpClient.Get(System.String, EventStore.ClientAPI.SystemData.UserCredentials, System.Action<EventStore.ClientAPI.Transport.Http.HttpResponse>, System.Action<System.Exception>, System.String)
  type: Method
  source:
    id: Get
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Transport.Http/IHttpClient.cs
    startLine: 6
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Transport.Http
  syntax:
    content: void Get(string url, UserCredentials userCredentials, Action<HttpResponse> onSuccess, Action<Exception> onException, string hostHeader = "")
    parameters:
    - id: url
      type: System.String
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
    - id: onSuccess
      type: System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse}
    - id: onException
      type: System.Action{System.Exception}
    - id: hostHeader
      type: System.String
    content.vb: Sub Get(url As String, userCredentials As UserCredentials, onSuccess As Action(Of HttpResponse), onException As Action(Of Exception), hostHeader As String = "")
  overload: EventStore.ClientAPI.Transport.Http.IHttpClient.Get*
  nameWithType.vb: IHttpClient.Get(String, UserCredentials, Action(Of HttpResponse), Action(Of Exception), String)
  fullName.vb: EventStore.ClientAPI.Transport.Http.IHttpClient.Get(System.String, EventStore.ClientAPI.SystemData.UserCredentials, System.Action(Of EventStore.ClientAPI.Transport.Http.HttpResponse), System.Action(Of System.Exception), System.String)
  name.vb: Get(String, UserCredentials, Action(Of HttpResponse), Action(Of Exception), String)
- uid: EventStore.ClientAPI.Transport.Http.IHttpClient.Post(System.String,System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception})
  commentId: M:EventStore.ClientAPI.Transport.Http.IHttpClient.Post(System.String,System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception})
  id: Post(System.String,System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception})
  parent: EventStore.ClientAPI.Transport.Http.IHttpClient
  langs:
  - csharp
  - vb
  name: Post(String, String, String, UserCredentials, Action<HttpResponse>, Action<Exception>)
  nameWithType: IHttpClient.Post(String, String, String, UserCredentials, Action<HttpResponse>, Action<Exception>)
  fullName: EventStore.ClientAPI.Transport.Http.IHttpClient.Post(System.String, System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials, System.Action<EventStore.ClientAPI.Transport.Http.HttpResponse>, System.Action<System.Exception>)
  type: Method
  source:
    id: Post
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Transport.Http/IHttpClient.cs
    startLine: 10
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Transport.Http
  syntax:
    content: void Post(string url, string body, string contentType, UserCredentials userCredentials, Action<HttpResponse> onSuccess, Action<Exception> onException)
    parameters:
    - id: url
      type: System.String
    - id: body
      type: System.String
    - id: contentType
      type: System.String
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
    - id: onSuccess
      type: System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse}
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Sub Post(url As String, body As String, contentType As String, userCredentials As UserCredentials, onSuccess As Action(Of HttpResponse), onException As Action(Of Exception))
  overload: EventStore.ClientAPI.Transport.Http.IHttpClient.Post*
  nameWithType.vb: IHttpClient.Post(String, String, String, UserCredentials, Action(Of HttpResponse), Action(Of Exception))
  fullName.vb: EventStore.ClientAPI.Transport.Http.IHttpClient.Post(System.String, System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials, System.Action(Of EventStore.ClientAPI.Transport.Http.HttpResponse), System.Action(Of System.Exception))
  name.vb: Post(String, String, String, UserCredentials, Action(Of HttpResponse), Action(Of Exception))
- uid: EventStore.ClientAPI.Transport.Http.IHttpClient.Delete(System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception})
  commentId: M:EventStore.ClientAPI.Transport.Http.IHttpClient.Delete(System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception})
  id: Delete(System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception})
  parent: EventStore.ClientAPI.Transport.Http.IHttpClient
  langs:
  - csharp
  - vb
  name: Delete(String, UserCredentials, Action<HttpResponse>, Action<Exception>)
  nameWithType: IHttpClient.Delete(String, UserCredentials, Action<HttpResponse>, Action<Exception>)
  fullName: EventStore.ClientAPI.Transport.Http.IHttpClient.Delete(System.String, EventStore.ClientAPI.SystemData.UserCredentials, System.Action<EventStore.ClientAPI.Transport.Http.HttpResponse>, System.Action<System.Exception>)
  type: Method
  source:
    id: Delete
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Transport.Http/IHttpClient.cs
    startLine: 13
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Transport.Http
  syntax:
    content: void Delete(string url, UserCredentials userCredentials, Action<HttpResponse> onSuccess, Action<Exception> onException)
    parameters:
    - id: url
      type: System.String
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
    - id: onSuccess
      type: System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse}
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Sub Delete(url As String, userCredentials As UserCredentials, onSuccess As Action(Of HttpResponse), onException As Action(Of Exception))
  overload: EventStore.ClientAPI.Transport.Http.IHttpClient.Delete*
  nameWithType.vb: IHttpClient.Delete(String, UserCredentials, Action(Of HttpResponse), Action(Of Exception))
  fullName.vb: EventStore.ClientAPI.Transport.Http.IHttpClient.Delete(System.String, EventStore.ClientAPI.SystemData.UserCredentials, System.Action(Of EventStore.ClientAPI.Transport.Http.HttpResponse), System.Action(Of System.Exception))
  name.vb: Delete(String, UserCredentials, Action(Of HttpResponse), Action(Of Exception))
- uid: EventStore.ClientAPI.Transport.Http.IHttpClient.Put(System.String,System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception})
  commentId: M:EventStore.ClientAPI.Transport.Http.IHttpClient.Put(System.String,System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception})
  id: Put(System.String,System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse},System.Action{System.Exception})
  parent: EventStore.ClientAPI.Transport.Http.IHttpClient
  langs:
  - csharp
  - vb
  name: Put(String, String, String, UserCredentials, Action<HttpResponse>, Action<Exception>)
  nameWithType: IHttpClient.Put(String, String, String, UserCredentials, Action<HttpResponse>, Action<Exception>)
  fullName: EventStore.ClientAPI.Transport.Http.IHttpClient.Put(System.String, System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials, System.Action<EventStore.ClientAPI.Transport.Http.HttpResponse>, System.Action<System.Exception>)
  type: Method
  source:
    id: Put
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.ClientAPI/Transport.Http/IHttpClient.cs
    startLine: 16
  assemblies:
  - EventStore.ClientAPI
  namespace: EventStore.ClientAPI.Transport.Http
  syntax:
    content: void Put(string url, string body, string contentType, UserCredentials userCredentials, Action<HttpResponse> onSuccess, Action<Exception> onException)
    parameters:
    - id: url
      type: System.String
    - id: body
      type: System.String
    - id: contentType
      type: System.String
    - id: userCredentials
      type: EventStore.ClientAPI.SystemData.UserCredentials
    - id: onSuccess
      type: System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse}
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Sub Put(url As String, body As String, contentType As String, userCredentials As UserCredentials, onSuccess As Action(Of HttpResponse), onException As Action(Of Exception))
  overload: EventStore.ClientAPI.Transport.Http.IHttpClient.Put*
  nameWithType.vb: IHttpClient.Put(String, String, String, UserCredentials, Action(Of HttpResponse), Action(Of Exception))
  fullName.vb: EventStore.ClientAPI.Transport.Http.IHttpClient.Put(System.String, System.String, System.String, EventStore.ClientAPI.SystemData.UserCredentials, System.Action(Of EventStore.ClientAPI.Transport.Http.HttpResponse), System.Action(Of System.Exception))
  name.vb: Put(String, String, String, UserCredentials, Action(Of HttpResponse), Action(Of Exception))
references:
- uid: EventStore.ClientAPI.Transport.Http
  commentId: N:EventStore.ClientAPI.Transport.Http
  name: EventStore.ClientAPI.Transport.Http
  nameWithType: EventStore.ClientAPI.Transport.Http
  fullName: EventStore.ClientAPI.Transport.Http
- uid: EventStore.ClientAPI.Transport.Http.IHttpClient.Get*
  commentId: Overload:EventStore.ClientAPI.Transport.Http.IHttpClient.Get
  name: Get
  nameWithType: IHttpClient.Get
  fullName: EventStore.ClientAPI.Transport.Http.IHttpClient.Get
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.ClientAPI.SystemData.UserCredentials
  commentId: T:EventStore.ClientAPI.SystemData.UserCredentials
  parent: EventStore.ClientAPI.SystemData
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.ClientAPI.SystemData.UserCredentials
- uid: System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse}
  commentId: T:System.Action{EventStore.ClientAPI.Transport.Http.HttpResponse}
  parent: System
  definition: System.Action`1
  name: Action<HttpResponse>
  nameWithType: Action<HttpResponse>
  fullName: System.Action<EventStore.ClientAPI.Transport.Http.HttpResponse>
  nameWithType.vb: Action(Of HttpResponse)
  fullName.vb: System.Action(Of EventStore.ClientAPI.Transport.Http.HttpResponse)
  name.vb: Action(Of HttpResponse)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.ClientAPI.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.ClientAPI.Transport.Http.HttpResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.ClientAPI.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.ClientAPI.Transport.Http.HttpResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.ClientAPI.SystemData
  commentId: N:EventStore.ClientAPI.SystemData
  name: EventStore.ClientAPI.SystemData
  nameWithType: EventStore.ClientAPI.SystemData
  fullName: EventStore.ClientAPI.SystemData
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.ClientAPI.Transport.Http.IHttpClient.Post*
  commentId: Overload:EventStore.ClientAPI.Transport.Http.IHttpClient.Post
  name: Post
  nameWithType: IHttpClient.Post
  fullName: EventStore.ClientAPI.Transport.Http.IHttpClient.Post
- uid: EventStore.ClientAPI.Transport.Http.IHttpClient.Delete*
  commentId: Overload:EventStore.ClientAPI.Transport.Http.IHttpClient.Delete
  name: Delete
  nameWithType: IHttpClient.Delete
  fullName: EventStore.ClientAPI.Transport.Http.IHttpClient.Delete
- uid: EventStore.ClientAPI.Transport.Http.IHttpClient.Put*
  commentId: Overload:EventStore.ClientAPI.Transport.Http.IHttpClient.Put
  name: Put
  nameWithType: IHttpClient.Put
  fullName: EventStore.ClientAPI.Transport.Http.IHttpClient.Put

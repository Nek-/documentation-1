### YamlMime:ManagedReference
items:
- uid: EventStore.Common.Log.ConsoleLogger
  commentId: T:EventStore.Common.Log.ConsoleLogger
  id: ConsoleLogger
  parent: EventStore.Common.Log
  children:
  - EventStore.Common.Log.ConsoleLogger.Debug(System.String,System.Object[])
  - EventStore.Common.Log.ConsoleLogger.DebugException(System.Exception,System.String,System.Object[])
  - EventStore.Common.Log.ConsoleLogger.Error(System.String,System.Object[])
  - EventStore.Common.Log.ConsoleLogger.ErrorException(System.Exception,System.String,System.Object[])
  - EventStore.Common.Log.ConsoleLogger.Fatal(System.String,System.Object[])
  - EventStore.Common.Log.ConsoleLogger.FatalException(System.Exception,System.String,System.Object[])
  - EventStore.Common.Log.ConsoleLogger.Flush(System.Nullable{System.TimeSpan})
  - EventStore.Common.Log.ConsoleLogger.Info(System.String,System.Object[])
  - EventStore.Common.Log.ConsoleLogger.InfoException(System.Exception,System.String,System.Object[])
  - EventStore.Common.Log.ConsoleLogger.Trace(System.String,System.Object[])
  - EventStore.Common.Log.ConsoleLogger.TraceException(System.Exception,System.String,System.Object[])
  - EventStore.Common.Log.ConsoleLogger.Warn(System.String,System.Object[])
  - EventStore.Common.Log.ConsoleLogger.WarnException(System.Exception,System.String,System.Object[])
  langs:
  - csharp
  - vb
  name: ConsoleLogger
  nameWithType: ConsoleLogger
  fullName: EventStore.Common.Log.ConsoleLogger
  type: Class
  source:
    id: ConsoleLogger
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 6
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: 'public class ConsoleLogger : ILogger'
    content.vb: >-
      Public Class ConsoleLogger
          Implements ILogger
  inheritance:
  - System.Object
  implements:
  - EventStore.Common.Log.ILogger
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Common.Log.ConsoleLogger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Common.Log.ConsoleLogger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Common.Log.ConsoleLogger.Flush(System.Nullable{System.TimeSpan})
  commentId: M:EventStore.Common.Log.ConsoleLogger.Flush(System.Nullable{System.TimeSpan})
  id: Flush(System.Nullable{System.TimeSpan})
  parent: EventStore.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Flush(Nullable<TimeSpan>)
  nameWithType: ConsoleLogger.Flush(Nullable<TimeSpan>)
  fullName: EventStore.Common.Log.ConsoleLogger.Flush(System.Nullable<System.TimeSpan>)
  type: Method
  source:
    id: Flush
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 7
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Flush(TimeSpan? maxTimeToWait = default(TimeSpan? ))
    parameters:
    - id: maxTimeToWait
      type: System.Nullable{System.TimeSpan}
    content.vb: Public Sub Flush(maxTimeToWait As TimeSpan? = Nothing)
  overload: EventStore.Common.Log.ConsoleLogger.Flush*
  implements:
  - EventStore.Common.Log.ILogger.Flush(System.Nullable{System.TimeSpan})
  nameWithType.vb: ConsoleLogger.Flush(Nullable(Of TimeSpan))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.ConsoleLogger.Flush(System.Nullable(Of System.TimeSpan))
  name.vb: Flush(Nullable(Of TimeSpan))
- uid: EventStore.Common.Log.ConsoleLogger.Fatal(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ConsoleLogger.Fatal(System.String,System.Object[])
  id: Fatal(System.String,System.Object[])
  parent: EventStore.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Fatal(String, Object[])
  nameWithType: ConsoleLogger.Fatal(String, Object[])
  fullName: EventStore.Common.Log.ConsoleLogger.Fatal(System.String, System.Object[])
  type: Method
  source:
    id: Fatal
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 10
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Fatal(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub Fatal(format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.ConsoleLogger.Fatal*
  implements:
  - EventStore.Common.Log.ILogger.Fatal(System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.Fatal(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.ConsoleLogger.Fatal(System.String, System.Object())
  name.vb: Fatal(String, Object())
- uid: EventStore.Common.Log.ConsoleLogger.Error(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ConsoleLogger.Error(System.String,System.Object[])
  id: Error(System.String,System.Object[])
  parent: EventStore.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Error(String, Object[])
  nameWithType: ConsoleLogger.Error(String, Object[])
  fullName: EventStore.Common.Log.ConsoleLogger.Error(System.String, System.Object[])
  type: Method
  source:
    id: Error
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 14
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Error(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub Error(format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.ConsoleLogger.Error*
  implements:
  - EventStore.Common.Log.ILogger.Error(System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.Error(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.ConsoleLogger.Error(System.String, System.Object())
  name.vb: Error(String, Object())
- uid: EventStore.Common.Log.ConsoleLogger.Info(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ConsoleLogger.Info(System.String,System.Object[])
  id: Info(System.String,System.Object[])
  parent: EventStore.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Info(String, Object[])
  nameWithType: ConsoleLogger.Info(String, Object[])
  fullName: EventStore.Common.Log.ConsoleLogger.Info(System.String, System.Object[])
  type: Method
  source:
    id: Info
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 18
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Info(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub Info(format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.ConsoleLogger.Info*
  implements:
  - EventStore.Common.Log.ILogger.Info(System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.Info(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.ConsoleLogger.Info(System.String, System.Object())
  name.vb: Info(String, Object())
- uid: EventStore.Common.Log.ConsoleLogger.Debug(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ConsoleLogger.Debug(System.String,System.Object[])
  id: Debug(System.String,System.Object[])
  parent: EventStore.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Debug(String, Object[])
  nameWithType: ConsoleLogger.Debug(String, Object[])
  fullName: EventStore.Common.Log.ConsoleLogger.Debug(System.String, System.Object[])
  type: Method
  source:
    id: Debug
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 22
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Debug(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub Debug(format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.ConsoleLogger.Debug*
  implements:
  - EventStore.Common.Log.ILogger.Debug(System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.Debug(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.ConsoleLogger.Debug(System.String, System.Object())
  name.vb: Debug(String, Object())
- uid: EventStore.Common.Log.ConsoleLogger.Warn(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ConsoleLogger.Warn(System.String,System.Object[])
  id: Warn(System.String,System.Object[])
  parent: EventStore.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Warn(String, Object[])
  nameWithType: ConsoleLogger.Warn(String, Object[])
  fullName: EventStore.Common.Log.ConsoleLogger.Warn(System.String, System.Object[])
  type: Method
  source:
    id: Warn
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 26
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Warn(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub Warn(format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.ConsoleLogger.Warn*
  implements:
  - EventStore.Common.Log.ILogger.Warn(System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.Warn(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.ConsoleLogger.Warn(System.String, System.Object())
  name.vb: Warn(String, Object())
- uid: EventStore.Common.Log.ConsoleLogger.Trace(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ConsoleLogger.Trace(System.String,System.Object[])
  id: Trace(System.String,System.Object[])
  parent: EventStore.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Trace(String, Object[])
  nameWithType: ConsoleLogger.Trace(String, Object[])
  fullName: EventStore.Common.Log.ConsoleLogger.Trace(System.String, System.Object[])
  type: Method
  source:
    id: Trace
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 30
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Trace(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub Trace(format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.ConsoleLogger.Trace*
  implements:
  - EventStore.Common.Log.ILogger.Trace(System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.Trace(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.ConsoleLogger.Trace(System.String, System.Object())
  name.vb: Trace(String, Object())
- uid: EventStore.Common.Log.ConsoleLogger.FatalException(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ConsoleLogger.FatalException(System.Exception,System.String,System.Object[])
  id: FatalException(System.Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: FatalException(Exception, String, Object[])
  nameWithType: ConsoleLogger.FatalException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ConsoleLogger.FatalException(System.Exception, System.String, System.Object[])
  type: Method
  source:
    id: FatalException
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 34
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void FatalException(Exception exc, string format, params object[] args)
    parameters:
    - id: exc
      type: System.Exception
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub FatalException(exc As Exception, format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.ConsoleLogger.FatalException*
  implements:
  - EventStore.Common.Log.ILogger.FatalException(System.Exception,System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.FatalException(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.ConsoleLogger.FatalException(System.Exception, System.String, System.Object())
  name.vb: FatalException(Exception, String, Object())
- uid: EventStore.Common.Log.ConsoleLogger.ErrorException(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ConsoleLogger.ErrorException(System.Exception,System.String,System.Object[])
  id: ErrorException(System.Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: ErrorException(Exception, String, Object[])
  nameWithType: ConsoleLogger.ErrorException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ConsoleLogger.ErrorException(System.Exception, System.String, System.Object[])
  type: Method
  source:
    id: ErrorException
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 38
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void ErrorException(Exception exc, string format, params object[] args)
    parameters:
    - id: exc
      type: System.Exception
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub ErrorException(exc As Exception, format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.ConsoleLogger.ErrorException*
  implements:
  - EventStore.Common.Log.ILogger.ErrorException(System.Exception,System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.ErrorException(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.ConsoleLogger.ErrorException(System.Exception, System.String, System.Object())
  name.vb: ErrorException(Exception, String, Object())
- uid: EventStore.Common.Log.ConsoleLogger.InfoException(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ConsoleLogger.InfoException(System.Exception,System.String,System.Object[])
  id: InfoException(System.Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: InfoException(Exception, String, Object[])
  nameWithType: ConsoleLogger.InfoException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ConsoleLogger.InfoException(System.Exception, System.String, System.Object[])
  type: Method
  source:
    id: InfoException
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 42
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void InfoException(Exception exc, string format, params object[] args)
    parameters:
    - id: exc
      type: System.Exception
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub InfoException(exc As Exception, format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.ConsoleLogger.InfoException*
  implements:
  - EventStore.Common.Log.ILogger.InfoException(System.Exception,System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.InfoException(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.ConsoleLogger.InfoException(System.Exception, System.String, System.Object())
  name.vb: InfoException(Exception, String, Object())
- uid: EventStore.Common.Log.ConsoleLogger.DebugException(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ConsoleLogger.DebugException(System.Exception,System.String,System.Object[])
  id: DebugException(System.Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: DebugException(Exception, String, Object[])
  nameWithType: ConsoleLogger.DebugException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ConsoleLogger.DebugException(System.Exception, System.String, System.Object[])
  type: Method
  source:
    id: DebugException
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 46
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void DebugException(Exception exc, string format, params object[] args)
    parameters:
    - id: exc
      type: System.Exception
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub DebugException(exc As Exception, format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.ConsoleLogger.DebugException*
  implements:
  - EventStore.Common.Log.ILogger.DebugException(System.Exception,System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.DebugException(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.ConsoleLogger.DebugException(System.Exception, System.String, System.Object())
  name.vb: DebugException(Exception, String, Object())
- uid: EventStore.Common.Log.ConsoleLogger.WarnException(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ConsoleLogger.WarnException(System.Exception,System.String,System.Object[])
  id: WarnException(System.Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: WarnException(Exception, String, Object[])
  nameWithType: ConsoleLogger.WarnException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ConsoleLogger.WarnException(System.Exception, System.String, System.Object[])
  type: Method
  source:
    id: WarnException
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 50
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void WarnException(Exception exc, string format, params object[] args)
    parameters:
    - id: exc
      type: System.Exception
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub WarnException(exc As Exception, format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.ConsoleLogger.WarnException*
  implements:
  - EventStore.Common.Log.ILogger.WarnException(System.Exception,System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.WarnException(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.ConsoleLogger.WarnException(System.Exception, System.String, System.Object())
  name.vb: WarnException(Exception, String, Object())
- uid: EventStore.Common.Log.ConsoleLogger.TraceException(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ConsoleLogger.TraceException(System.Exception,System.String,System.Object[])
  id: TraceException(System.Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ConsoleLogger
  langs:
  - csharp
  - vb
  name: TraceException(Exception, String, Object[])
  nameWithType: ConsoleLogger.TraceException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ConsoleLogger.TraceException(System.Exception, System.String, System.Object[])
  type: Method
  source:
    id: TraceException
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Log/ConsoleLogger.cs
    startLine: 54
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void TraceException(Exception exc, string format, params object[] args)
    parameters:
    - id: exc
      type: System.Exception
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub TraceException(exc As Exception, format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.ConsoleLogger.TraceException*
  implements:
  - EventStore.Common.Log.ILogger.TraceException(System.Exception,System.String,System.Object[])
  nameWithType.vb: ConsoleLogger.TraceException(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.ConsoleLogger.TraceException(System.Exception, System.String, System.Object())
  name.vb: TraceException(Exception, String, Object())
references:
- uid: EventStore.Common.Log
  commentId: N:EventStore.Common.Log
  name: EventStore.Common.Log
  nameWithType: EventStore.Common.Log
  fullName: EventStore.Common.Log
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Common.Log.ILogger
  commentId: T:EventStore.Common.Log.ILogger
  parent: EventStore.Common.Log
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.Common.Log.ILogger
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.ConsoleLogger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ConsoleLogger>()
  nameWithType: ProtobufExtensions.Serialize<ConsoleLogger>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Common.Log.ConsoleLogger>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ConsoleLogger)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Common.Log.ConsoleLogger)()
  name.vb: Serialize(Of ConsoleLogger)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ConsoleLogger>
    nameWithType: ProtobufExtensions.Serialize<ConsoleLogger>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Common.Log.ConsoleLogger>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ConsoleLogger)
    nameWithType: ProtobufExtensions.Serialize(Of ConsoleLogger)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Common.Log.ConsoleLogger)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.ConsoleLogger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ConsoleLogger>()
  nameWithType: ProtobufExtensions.SerializeToArray<ConsoleLogger>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Common.Log.ConsoleLogger>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ConsoleLogger)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Common.Log.ConsoleLogger)()
  name.vb: SerializeToArray(Of ConsoleLogger)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ConsoleLogger>
    nameWithType: ProtobufExtensions.SerializeToArray<ConsoleLogger>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Common.Log.ConsoleLogger>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ConsoleLogger)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ConsoleLogger)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Common.Log.ConsoleLogger)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Common.Log.ConsoleLogger.Flush*
  commentId: Overload:EventStore.Common.Log.ConsoleLogger.Flush
  name: Flush
  nameWithType: ConsoleLogger.Flush
  fullName: EventStore.Common.Log.ConsoleLogger.Flush
- uid: EventStore.Common.Log.ILogger.Flush(System.Nullable{System.TimeSpan})
  commentId: M:EventStore.Common.Log.ILogger.Flush(System.Nullable{System.TimeSpan})
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Flush(Nullable<TimeSpan>)
  nameWithType: ILogger.Flush(Nullable<TimeSpan>)
  fullName: EventStore.Common.Log.ILogger.Flush(System.Nullable<System.TimeSpan>)
  nameWithType.vb: ILogger.Flush(Nullable(Of TimeSpan))
  fullName.vb: EventStore.Common.Log.ILogger.Flush(System.Nullable(Of System.TimeSpan))
  name.vb: Flush(Nullable(Of TimeSpan))
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Flush(System.Nullable{System.TimeSpan})
    name: Flush
    nameWithType: ILogger.Flush
    fullName: EventStore.Common.Log.ILogger.Flush
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Flush(System.Nullable{System.TimeSpan})
    name: Flush
    nameWithType: ILogger.Flush
    fullName: EventStore.Common.Log.ILogger.Flush
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.ConsoleLogger.Fatal*
  commentId: Overload:EventStore.Common.Log.ConsoleLogger.Fatal
  name: Fatal
  nameWithType: ConsoleLogger.Fatal
  fullName: EventStore.Common.Log.ConsoleLogger.Fatal
- uid: EventStore.Common.Log.ILogger.Fatal(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.Fatal(System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Fatal(String, Object[])
  nameWithType: ILogger.Fatal(String, Object[])
  fullName: EventStore.Common.Log.ILogger.Fatal(System.String, System.Object[])
  nameWithType.vb: ILogger.Fatal(String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.Fatal(System.String, System.Object())
  name.vb: Fatal(String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Fatal(System.String,System.Object[])
    name: Fatal
    nameWithType: ILogger.Fatal
    fullName: EventStore.Common.Log.ILogger.Fatal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Fatal(System.String,System.Object[])
    name: Fatal
    nameWithType: ILogger.Fatal
    fullName: EventStore.Common.Log.ILogger.Fatal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Common.Log.ConsoleLogger.Error*
  commentId: Overload:EventStore.Common.Log.ConsoleLogger.Error
  name: Error
  nameWithType: ConsoleLogger.Error
  fullName: EventStore.Common.Log.ConsoleLogger.Error
- uid: EventStore.Common.Log.ILogger.Error(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.Error(System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Error(String, Object[])
  nameWithType: ILogger.Error(String, Object[])
  fullName: EventStore.Common.Log.ILogger.Error(System.String, System.Object[])
  nameWithType.vb: ILogger.Error(String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.Error(System.String, System.Object())
  name.vb: Error(String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Error(System.String,System.Object[])
    name: Error
    nameWithType: ILogger.Error
    fullName: EventStore.Common.Log.ILogger.Error
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Error(System.String,System.Object[])
    name: Error
    nameWithType: ILogger.Error
    fullName: EventStore.Common.Log.ILogger.Error
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.ConsoleLogger.Info*
  commentId: Overload:EventStore.Common.Log.ConsoleLogger.Info
  name: Info
  nameWithType: ConsoleLogger.Info
  fullName: EventStore.Common.Log.ConsoleLogger.Info
- uid: EventStore.Common.Log.ILogger.Info(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.Info(System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Info(String, Object[])
  nameWithType: ILogger.Info(String, Object[])
  fullName: EventStore.Common.Log.ILogger.Info(System.String, System.Object[])
  nameWithType.vb: ILogger.Info(String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.Info(System.String, System.Object())
  name.vb: Info(String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Info(System.String,System.Object[])
    name: Info
    nameWithType: ILogger.Info
    fullName: EventStore.Common.Log.ILogger.Info
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Info(System.String,System.Object[])
    name: Info
    nameWithType: ILogger.Info
    fullName: EventStore.Common.Log.ILogger.Info
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.ConsoleLogger.Debug*
  commentId: Overload:EventStore.Common.Log.ConsoleLogger.Debug
  name: Debug
  nameWithType: ConsoleLogger.Debug
  fullName: EventStore.Common.Log.ConsoleLogger.Debug
- uid: EventStore.Common.Log.ILogger.Debug(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.Debug(System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Debug(String, Object[])
  nameWithType: ILogger.Debug(String, Object[])
  fullName: EventStore.Common.Log.ILogger.Debug(System.String, System.Object[])
  nameWithType.vb: ILogger.Debug(String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.Debug(System.String, System.Object())
  name.vb: Debug(String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Debug(System.String,System.Object[])
    name: Debug
    nameWithType: ILogger.Debug
    fullName: EventStore.Common.Log.ILogger.Debug
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Debug(System.String,System.Object[])
    name: Debug
    nameWithType: ILogger.Debug
    fullName: EventStore.Common.Log.ILogger.Debug
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.ConsoleLogger.Warn*
  commentId: Overload:EventStore.Common.Log.ConsoleLogger.Warn
  name: Warn
  nameWithType: ConsoleLogger.Warn
  fullName: EventStore.Common.Log.ConsoleLogger.Warn
- uid: EventStore.Common.Log.ILogger.Warn(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.Warn(System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Warn(String, Object[])
  nameWithType: ILogger.Warn(String, Object[])
  fullName: EventStore.Common.Log.ILogger.Warn(System.String, System.Object[])
  nameWithType.vb: ILogger.Warn(String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.Warn(System.String, System.Object())
  name.vb: Warn(String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Warn(System.String,System.Object[])
    name: Warn
    nameWithType: ILogger.Warn
    fullName: EventStore.Common.Log.ILogger.Warn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Warn(System.String,System.Object[])
    name: Warn
    nameWithType: ILogger.Warn
    fullName: EventStore.Common.Log.ILogger.Warn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.ConsoleLogger.Trace*
  commentId: Overload:EventStore.Common.Log.ConsoleLogger.Trace
  name: Trace
  nameWithType: ConsoleLogger.Trace
  fullName: EventStore.Common.Log.ConsoleLogger.Trace
- uid: EventStore.Common.Log.ILogger.Trace(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.Trace(System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Trace(String, Object[])
  nameWithType: ILogger.Trace(String, Object[])
  fullName: EventStore.Common.Log.ILogger.Trace(System.String, System.Object[])
  nameWithType.vb: ILogger.Trace(String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.Trace(System.String, System.Object())
  name.vb: Trace(String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Trace(System.String,System.Object[])
    name: Trace
    nameWithType: ILogger.Trace
    fullName: EventStore.Common.Log.ILogger.Trace
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Trace(System.String,System.Object[])
    name: Trace
    nameWithType: ILogger.Trace
    fullName: EventStore.Common.Log.ILogger.Trace
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.ConsoleLogger.FatalException*
  commentId: Overload:EventStore.Common.Log.ConsoleLogger.FatalException
  name: FatalException
  nameWithType: ConsoleLogger.FatalException
  fullName: EventStore.Common.Log.ConsoleLogger.FatalException
- uid: EventStore.Common.Log.ILogger.FatalException(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.FatalException(System.Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: FatalException(Exception, String, Object[])
  nameWithType: ILogger.FatalException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ILogger.FatalException(System.Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.FatalException(Exception, String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.FatalException(System.Exception, System.String, System.Object())
  name.vb: FatalException(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.FatalException(System.Exception,System.String,System.Object[])
    name: FatalException
    nameWithType: ILogger.FatalException
    fullName: EventStore.Common.Log.ILogger.FatalException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.FatalException(System.Exception,System.String,System.Object[])
    name: FatalException
    nameWithType: ILogger.FatalException
    fullName: EventStore.Common.Log.ILogger.FatalException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: EventStore.Common.Log.ConsoleLogger.ErrorException*
  commentId: Overload:EventStore.Common.Log.ConsoleLogger.ErrorException
  name: ErrorException
  nameWithType: ConsoleLogger.ErrorException
  fullName: EventStore.Common.Log.ConsoleLogger.ErrorException
- uid: EventStore.Common.Log.ILogger.ErrorException(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.ErrorException(System.Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: ErrorException(Exception, String, Object[])
  nameWithType: ILogger.ErrorException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ILogger.ErrorException(System.Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.ErrorException(Exception, String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.ErrorException(System.Exception, System.String, System.Object())
  name.vb: ErrorException(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.ErrorException(System.Exception,System.String,System.Object[])
    name: ErrorException
    nameWithType: ILogger.ErrorException
    fullName: EventStore.Common.Log.ILogger.ErrorException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.ErrorException(System.Exception,System.String,System.Object[])
    name: ErrorException
    nameWithType: ILogger.ErrorException
    fullName: EventStore.Common.Log.ILogger.ErrorException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.ConsoleLogger.InfoException*
  commentId: Overload:EventStore.Common.Log.ConsoleLogger.InfoException
  name: InfoException
  nameWithType: ConsoleLogger.InfoException
  fullName: EventStore.Common.Log.ConsoleLogger.InfoException
- uid: EventStore.Common.Log.ILogger.InfoException(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.InfoException(System.Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: InfoException(Exception, String, Object[])
  nameWithType: ILogger.InfoException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ILogger.InfoException(System.Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.InfoException(Exception, String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.InfoException(System.Exception, System.String, System.Object())
  name.vb: InfoException(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.InfoException(System.Exception,System.String,System.Object[])
    name: InfoException
    nameWithType: ILogger.InfoException
    fullName: EventStore.Common.Log.ILogger.InfoException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.InfoException(System.Exception,System.String,System.Object[])
    name: InfoException
    nameWithType: ILogger.InfoException
    fullName: EventStore.Common.Log.ILogger.InfoException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.ConsoleLogger.DebugException*
  commentId: Overload:EventStore.Common.Log.ConsoleLogger.DebugException
  name: DebugException
  nameWithType: ConsoleLogger.DebugException
  fullName: EventStore.Common.Log.ConsoleLogger.DebugException
- uid: EventStore.Common.Log.ILogger.DebugException(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.DebugException(System.Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: DebugException(Exception, String, Object[])
  nameWithType: ILogger.DebugException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ILogger.DebugException(System.Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.DebugException(Exception, String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.DebugException(System.Exception, System.String, System.Object())
  name.vb: DebugException(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.DebugException(System.Exception,System.String,System.Object[])
    name: DebugException
    nameWithType: ILogger.DebugException
    fullName: EventStore.Common.Log.ILogger.DebugException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.DebugException(System.Exception,System.String,System.Object[])
    name: DebugException
    nameWithType: ILogger.DebugException
    fullName: EventStore.Common.Log.ILogger.DebugException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.ConsoleLogger.WarnException*
  commentId: Overload:EventStore.Common.Log.ConsoleLogger.WarnException
  name: WarnException
  nameWithType: ConsoleLogger.WarnException
  fullName: EventStore.Common.Log.ConsoleLogger.WarnException
- uid: EventStore.Common.Log.ILogger.WarnException(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.WarnException(System.Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: WarnException(Exception, String, Object[])
  nameWithType: ILogger.WarnException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ILogger.WarnException(System.Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.WarnException(Exception, String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.WarnException(System.Exception, System.String, System.Object())
  name.vb: WarnException(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.WarnException(System.Exception,System.String,System.Object[])
    name: WarnException
    nameWithType: ILogger.WarnException
    fullName: EventStore.Common.Log.ILogger.WarnException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.WarnException(System.Exception,System.String,System.Object[])
    name: WarnException
    nameWithType: ILogger.WarnException
    fullName: EventStore.Common.Log.ILogger.WarnException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.ConsoleLogger.TraceException*
  commentId: Overload:EventStore.Common.Log.ConsoleLogger.TraceException
  name: TraceException
  nameWithType: ConsoleLogger.TraceException
  fullName: EventStore.Common.Log.ConsoleLogger.TraceException
- uid: EventStore.Common.Log.ILogger.TraceException(System.Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.TraceException(System.Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: TraceException(Exception, String, Object[])
  nameWithType: ILogger.TraceException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ILogger.TraceException(System.Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.TraceException(Exception, String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.TraceException(System.Exception, System.String, System.Object())
  name.vb: TraceException(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.TraceException(System.Exception,System.String,System.Object[])
    name: TraceException
    nameWithType: ILogger.TraceException
    fullName: EventStore.Common.Log.ILogger.TraceException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.TraceException(System.Exception,System.String,System.Object[])
    name: TraceException
    nameWithType: ILogger.TraceException
    fullName: EventStore.Common.Log.ILogger.TraceException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )

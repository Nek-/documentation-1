### YamlMime:ManagedReference
items:
- uid: EventStore.Common.Log.LogManager
  commentId: T:EventStore.Common.Log.LogManager
  id: LogManager
  parent: EventStore.Common.Log
  children:
  - EventStore.Common.Log.LogManager.Finish
  - EventStore.Common.Log.LogManager.GetLogger(System.String)
  - EventStore.Common.Log.LogManager.GetLoggerFor(Type)
  - EventStore.Common.Log.LogManager.GetLoggerFor``1
  - EventStore.Common.Log.LogManager.Init(System.String,System.String,System.String)
  - EventStore.Common.Log.LogManager.Initialized
  - EventStore.Common.Log.LogManager.LogsDirectory
  - EventStore.Common.Log.LogManager.SetLogFactory(Func{System.String,EventStore.Common.Log.ILogger})
  langs:
  - csharp
  - vb
  name: LogManager
  nameWithType: LogManager
  fullName: EventStore.Common.Log.LogManager
  type: Class
  source:
    remote:
      path: src/EventStore.Common/Log/LogManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: LogManager
    path: ../EventStore/src/EventStore.Common/Log/LogManager.cs
    startLine: 7
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: 'public static class LogManager : object'
    content.vb: >-
      Public Module LogManager
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Common.Log.LogManager.LogsDirectory
  commentId: P:EventStore.Common.Log.LogManager.LogsDirectory
  id: LogsDirectory
  parent: EventStore.Common.Log.LogManager
  langs:
  - csharp
  - vb
  name: LogsDirectory
  nameWithType: LogManager.LogsDirectory
  fullName: EventStore.Common.Log.LogManager.LogsDirectory
  type: Property
  source:
    remote:
      path: src/EventStore.Common/Log/LogManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: LogsDirectory
    path: ../EventStore/src/EventStore.Common/Log/LogManager.cs
    startLine: 9
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public static string LogsDirectory { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property LogsDirectory As String
  overload: EventStore.Common.Log.LogManager.LogsDirectory*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Log.LogManager.Initialized
  commentId: P:EventStore.Common.Log.LogManager.Initialized
  id: Initialized
  parent: EventStore.Common.Log.LogManager
  langs:
  - csharp
  - vb
  name: Initialized
  nameWithType: LogManager.Initialized
  fullName: EventStore.Common.Log.LogManager.Initialized
  type: Property
  source:
    remote:
      path: src/EventStore.Common/Log/LogManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Initialized
    path: ../EventStore/src/EventStore.Common/Log/LogManager.cs
    startLine: 19
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public static bool Initialized { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property Initialized As Boolean
  overload: EventStore.Common.Log.LogManager.Initialized*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Log.LogManager.GetLoggerFor(Type)
  commentId: M:EventStore.Common.Log.LogManager.GetLoggerFor(Type)
  id: GetLoggerFor(Type)
  parent: EventStore.Common.Log.LogManager
  langs:
  - csharp
  - vb
  name: GetLoggerFor(Type)
  nameWithType: LogManager.GetLoggerFor(Type)
  fullName: EventStore.Common.Log.LogManager.GetLoggerFor(Type)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/LogManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: GetLoggerFor
    path: ../EventStore/src/EventStore.Common/Log/LogManager.cs
    startLine: 41
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public static ILogger GetLoggerFor(Type type)
    parameters:
    - id: type
      type: Type
    return:
      type: EventStore.Common.Log.ILogger
    content.vb: Public Shared Function GetLoggerFor(type As Type) As ILogger
  overload: EventStore.Common.Log.LogManager.GetLoggerFor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Log.LogManager.GetLoggerFor``1
  commentId: M:EventStore.Common.Log.LogManager.GetLoggerFor``1
  id: GetLoggerFor``1
  parent: EventStore.Common.Log.LogManager
  langs:
  - csharp
  - vb
  name: GetLoggerFor<T>()
  nameWithType: LogManager.GetLoggerFor<T>()
  fullName: EventStore.Common.Log.LogManager.GetLoggerFor<T>()
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/LogManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: GetLoggerFor
    path: ../EventStore/src/EventStore.Common/Log/LogManager.cs
    startLine: 46
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public static ILogger GetLoggerFor<T>()
    typeParameters:
    - id: T
    return:
      type: EventStore.Common.Log.ILogger
    content.vb: Public Shared Function GetLoggerFor(Of T) As ILogger
  overload: EventStore.Common.Log.LogManager.GetLoggerFor*
  nameWithType.vb: LogManager.GetLoggerFor(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Log.LogManager.GetLoggerFor(Of T)()
  name.vb: GetLoggerFor(Of T)()
- uid: EventStore.Common.Log.LogManager.GetLogger(System.String)
  commentId: M:EventStore.Common.Log.LogManager.GetLogger(System.String)
  id: GetLogger(System.String)
  parent: EventStore.Common.Log.LogManager
  langs:
  - csharp
  - vb
  name: GetLogger(String)
  nameWithType: LogManager.GetLogger(String)
  fullName: EventStore.Common.Log.LogManager.GetLogger(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/LogManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: GetLogger
    path: ../EventStore/src/EventStore.Common/Log/LogManager.cs
    startLine: 51
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public static ILogger GetLogger(string logName)
    parameters:
    - id: logName
      type: System.String
    return:
      type: EventStore.Common.Log.ILogger
    content.vb: Public Shared Function GetLogger(logName As String) As ILogger
  overload: EventStore.Common.Log.LogManager.GetLogger*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Log.LogManager.Init(System.String,System.String,System.String)
  commentId: M:EventStore.Common.Log.LogManager.Init(System.String,System.String,System.String)
  id: Init(System.String,System.String,System.String)
  parent: EventStore.Common.Log.LogManager
  langs:
  - csharp
  - vb
  name: Init(String, String, String)
  nameWithType: LogManager.Init(String, String, String)
  fullName: EventStore.Common.Log.LogManager.Init(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/LogManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Init
    path: ../EventStore/src/EventStore.Common/Log/LogManager.cs
    startLine: 56
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public static void Init(string componentName, string logsDirectory, string configurationDirectory)
    parameters:
    - id: componentName
      type: System.String
    - id: logsDirectory
      type: System.String
    - id: configurationDirectory
      type: System.String
    content.vb: Public Shared Sub Init(componentName As String, logsDirectory As String, configurationDirectory As String)
  overload: EventStore.Common.Log.LogManager.Init*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Log.LogManager.Finish
  commentId: M:EventStore.Common.Log.LogManager.Finish
  id: Finish
  parent: EventStore.Common.Log.LogManager
  langs:
  - csharp
  - vb
  name: Finish()
  nameWithType: LogManager.Finish()
  fullName: EventStore.Common.Log.LogManager.Finish()
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/LogManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Finish
    path: ../EventStore/src/EventStore.Common/Log/LogManager.cs
    startLine: 113
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public static void Finish()
    content.vb: Public Shared Sub Finish
  overload: EventStore.Common.Log.LogManager.Finish*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Log.LogManager.SetLogFactory(Func{System.String,EventStore.Common.Log.ILogger})
  commentId: M:EventStore.Common.Log.LogManager.SetLogFactory(Func{System.String,EventStore.Common.Log.ILogger})
  id: SetLogFactory(Func{System.String,EventStore.Common.Log.ILogger})
  parent: EventStore.Common.Log.LogManager
  langs:
  - csharp
  - vb
  name: SetLogFactory(Func<String, ILogger>)
  nameWithType: LogManager.SetLogFactory(Func<String, ILogger>)
  fullName: EventStore.Common.Log.LogManager.SetLogFactory(Func<System.String, EventStore.Common.Log.ILogger>)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/LogManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: SetLogFactory
    path: ../EventStore/src/EventStore.Common/Log/LogManager.cs
    startLine: 126
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public static void SetLogFactory(Func<string, ILogger> factory)
    parameters:
    - id: factory
      type: Func{System.String,EventStore.Common.Log.ILogger}
    content.vb: Public Shared Sub SetLogFactory(factory As Func(Of String, ILogger))
  overload: EventStore.Common.Log.LogManager.SetLogFactory*
  nameWithType.vb: LogManager.SetLogFactory(Func(Of String, ILogger))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Log.LogManager.SetLogFactory(Func(Of System.String, EventStore.Common.Log.ILogger))
  name.vb: SetLogFactory(Func(Of String, ILogger))
references:
- uid: EventStore.Common.Log
  commentId: N:EventStore.Common.Log
  name: EventStore.Common.Log
  nameWithType: EventStore.Common.Log
  fullName: EventStore.Common.Log
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Common.Log.LogManager.LogsDirectory*
  commentId: Overload:EventStore.Common.Log.LogManager.LogsDirectory
  name: LogsDirectory
  nameWithType: LogManager.LogsDirectory
  fullName: EventStore.Common.Log.LogManager.LogsDirectory
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Common.Log.LogManager.Initialized*
  commentId: Overload:EventStore.Common.Log.LogManager.Initialized
  name: Initialized
  nameWithType: LogManager.Initialized
  fullName: EventStore.Common.Log.LogManager.Initialized
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Common.Log.LogManager.GetLoggerFor*
  commentId: Overload:EventStore.Common.Log.LogManager.GetLoggerFor
  name: GetLoggerFor
  nameWithType: LogManager.GetLoggerFor
  fullName: EventStore.Common.Log.LogManager.GetLoggerFor
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: EventStore.Common.Log.ILogger
  commentId: T:EventStore.Common.Log.ILogger
  parent: EventStore.Common.Log
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.Common.Log.ILogger
- uid: EventStore.Common.Log.LogManager.GetLogger*
  commentId: Overload:EventStore.Common.Log.LogManager.GetLogger
  name: GetLogger
  nameWithType: LogManager.GetLogger
  fullName: EventStore.Common.Log.LogManager.GetLogger
- uid: EventStore.Common.Log.LogManager.Init*
  commentId: Overload:EventStore.Common.Log.LogManager.Init
  name: Init
  nameWithType: LogManager.Init
  fullName: EventStore.Common.Log.LogManager.Init
- uid: EventStore.Common.Log.LogManager.Finish*
  commentId: Overload:EventStore.Common.Log.LogManager.Finish
  name: Finish
  nameWithType: LogManager.Finish
  fullName: EventStore.Common.Log.LogManager.Finish
- uid: EventStore.Common.Log.LogManager.SetLogFactory*
  commentId: Overload:EventStore.Common.Log.LogManager.SetLogFactory
  name: SetLogFactory
  nameWithType: LogManager.SetLogFactory
  fullName: EventStore.Common.Log.LogManager.SetLogFactory
- uid: Func{System.String,EventStore.Common.Log.ILogger}
  commentId: '!:Func{System.String,EventStore.Common.Log.ILogger}'
  definition: Func`2
  name: Func<String, ILogger>
  nameWithType: Func<String, ILogger>
  fullName: Func<System.String, EventStore.Common.Log.ILogger>
  nameWithType.vb: Func(Of String, ILogger)
  fullName.vb: Func(Of System.String, EventStore.Common.Log.ILogger)
  name.vb: Func(Of String, ILogger)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Common.Log.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: EventStore.Common.Log.ILogger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Common.Log.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: EventStore.Common.Log.ILogger
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

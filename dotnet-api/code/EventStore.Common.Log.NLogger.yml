### YamlMime:ManagedReference
items:
- uid: EventStore.Common.Log.NLogger
  commentId: T:EventStore.Common.Log.NLogger
  id: NLogger
  parent: EventStore.Common.Log
  children:
  - EventStore.Common.Log.NLogger.#ctor(System.String)
  - EventStore.Common.Log.NLogger.Debug(System.String,System.Object[])
  - EventStore.Common.Log.NLogger.DebugException(Exception,System.String,System.Object[])
  - EventStore.Common.Log.NLogger.Error(System.String,System.Object[])
  - EventStore.Common.Log.NLogger.ErrorException(Exception,System.String,System.Object[])
  - EventStore.Common.Log.NLogger.Fatal(System.String,System.Object[])
  - EventStore.Common.Log.NLogger.FatalException(Exception,System.String,System.Object[])
  - EventStore.Common.Log.NLogger.Flush(System.Nullable{TimeSpan})
  - EventStore.Common.Log.NLogger.FlushLog(System.Nullable{TimeSpan})
  - EventStore.Common.Log.NLogger.Info(System.String,System.Object[])
  - EventStore.Common.Log.NLogger.InfoException(Exception,System.String,System.Object[])
  - EventStore.Common.Log.NLogger.Trace(System.String,System.Object[])
  - EventStore.Common.Log.NLogger.TraceException(Exception,System.String,System.Object[])
  - EventStore.Common.Log.NLogger.Warn(System.String,System.Object[])
  - EventStore.Common.Log.NLogger.WarnException(Exception,System.String,System.Object[])
  langs:
  - csharp
  - vb
  name: NLogger
  nameWithType: NLogger
  fullName: EventStore.Common.Log.NLogger
  type: Class
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: NLogger
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 30
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: 'public class NLogger : object, ILogger'
    content.vb: >-
      Public Class NLogger
          Inherits Object
          Implements ILogger
  inheritance:
  - System.Object
  implements:
  - EventStore.Common.Log.ILogger
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Common.Log.NLogger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Common.Log.NLogger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Common.Log.NLogger.#ctor(System.String)
  commentId: M:EventStore.Common.Log.NLogger.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: NLogger(String)
  nameWithType: NLogger.NLogger(String)
  fullName: EventStore.Common.Log.NLogger.NLogger(System.String)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 34
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public NLogger(string name)
    parameters:
    - id: name
      type: System.String
    content.vb: Public Sub New(name As String)
  overload: EventStore.Common.Log.NLogger.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Common.Log.NLogger.Flush(System.Nullable{TimeSpan})
  commentId: M:EventStore.Common.Log.NLogger.Flush(System.Nullable{TimeSpan})
  id: Flush(System.Nullable{TimeSpan})
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: Flush(Nullable<TimeSpan>)
  nameWithType: NLogger.Flush(Nullable<TimeSpan>)
  fullName: EventStore.Common.Log.NLogger.Flush(System.Nullable<TimeSpan>)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Flush
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 39
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Flush(TimeSpan? maxTimeToWait = null)
    parameters:
    - id: maxTimeToWait
      type: System.Nullable{TimeSpan}
    content.vb: Public Sub Flush(maxTimeToWait As TimeSpan? = Nothing)
  overload: EventStore.Common.Log.NLogger.Flush*
  implements:
  - EventStore.Common.Log.ILogger.Flush(System.Nullable{TimeSpan})
  nameWithType.vb: NLogger.Flush(Nullable(Of TimeSpan))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.NLogger.Flush(System.Nullable(Of TimeSpan))
  name.vb: Flush(Nullable(Of TimeSpan))
- uid: EventStore.Common.Log.NLogger.Fatal(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.NLogger.Fatal(System.String,System.Object[])
  id: Fatal(System.String,System.Object[])
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: Fatal(String, Object[])
  nameWithType: NLogger.Fatal(String, Object[])
  fullName: EventStore.Common.Log.NLogger.Fatal(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Fatal
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 44
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Fatal(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub Fatal(format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.NLogger.Fatal*
  implements:
  - EventStore.Common.Log.ILogger.Fatal(System.String,System.Object[])
  nameWithType.vb: NLogger.Fatal(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.NLogger.Fatal(System.String, System.Object())
  name.vb: Fatal(String, Object())
- uid: EventStore.Common.Log.NLogger.Error(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.NLogger.Error(System.String,System.Object[])
  id: Error(System.String,System.Object[])
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: Error(String, Object[])
  nameWithType: NLogger.Error(String, Object[])
  fullName: EventStore.Common.Log.NLogger.Error(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Error
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 49
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Error(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub Error(format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.NLogger.Error*
  implements:
  - EventStore.Common.Log.ILogger.Error(System.String,System.Object[])
  nameWithType.vb: NLogger.Error(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.NLogger.Error(System.String, System.Object())
  name.vb: Error(String, Object())
- uid: EventStore.Common.Log.NLogger.Info(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.NLogger.Info(System.String,System.Object[])
  id: Info(System.String,System.Object[])
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: Info(String, Object[])
  nameWithType: NLogger.Info(String, Object[])
  fullName: EventStore.Common.Log.NLogger.Info(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Info
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 54
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Info(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub Info(format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.NLogger.Info*
  implements:
  - EventStore.Common.Log.ILogger.Info(System.String,System.Object[])
  nameWithType.vb: NLogger.Info(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.NLogger.Info(System.String, System.Object())
  name.vb: Info(String, Object())
- uid: EventStore.Common.Log.NLogger.Debug(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.NLogger.Debug(System.String,System.Object[])
  id: Debug(System.String,System.Object[])
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: Debug(String, Object[])
  nameWithType: NLogger.Debug(String, Object[])
  fullName: EventStore.Common.Log.NLogger.Debug(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Debug
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 59
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Debug(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub Debug(format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.NLogger.Debug*
  implements:
  - EventStore.Common.Log.ILogger.Debug(System.String,System.Object[])
  nameWithType.vb: NLogger.Debug(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.NLogger.Debug(System.String, System.Object())
  name.vb: Debug(String, Object())
- uid: EventStore.Common.Log.NLogger.Warn(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.NLogger.Warn(System.String,System.Object[])
  id: Warn(System.String,System.Object[])
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: Warn(String, Object[])
  nameWithType: NLogger.Warn(String, Object[])
  fullName: EventStore.Common.Log.NLogger.Warn(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Warn
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 64
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Warn(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub Warn(format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.NLogger.Warn*
  implements:
  - EventStore.Common.Log.ILogger.Warn(System.String,System.Object[])
  nameWithType.vb: NLogger.Warn(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.NLogger.Warn(System.String, System.Object())
  name.vb: Warn(String, Object())
- uid: EventStore.Common.Log.NLogger.Trace(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.NLogger.Trace(System.String,System.Object[])
  id: Trace(System.String,System.Object[])
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: Trace(String, Object[])
  nameWithType: NLogger.Trace(String, Object[])
  fullName: EventStore.Common.Log.NLogger.Trace(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Trace
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 69
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void Trace(string format, params object[] args)
    parameters:
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub Trace(format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.NLogger.Trace*
  implements:
  - EventStore.Common.Log.ILogger.Trace(System.String,System.Object[])
  nameWithType.vb: NLogger.Trace(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.NLogger.Trace(System.String, System.Object())
  name.vb: Trace(String, Object())
- uid: EventStore.Common.Log.NLogger.FatalException(Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.NLogger.FatalException(Exception,System.String,System.Object[])
  id: FatalException(Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: FatalException(Exception, String, Object[])
  nameWithType: NLogger.FatalException(Exception, String, Object[])
  fullName: EventStore.Common.Log.NLogger.FatalException(Exception, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: FatalException
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 74
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void FatalException(Exception exc, string format, params object[] args)
    parameters:
    - id: exc
      type: Exception
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub FatalException(exc As Exception, format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.NLogger.FatalException*
  implements:
  - EventStore.Common.Log.ILogger.FatalException(Exception,System.String,System.Object[])
  nameWithType.vb: NLogger.FatalException(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.NLogger.FatalException(Exception, System.String, System.Object())
  name.vb: FatalException(Exception, String, Object())
- uid: EventStore.Common.Log.NLogger.ErrorException(Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.NLogger.ErrorException(Exception,System.String,System.Object[])
  id: ErrorException(Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: ErrorException(Exception, String, Object[])
  nameWithType: NLogger.ErrorException(Exception, String, Object[])
  fullName: EventStore.Common.Log.NLogger.ErrorException(Exception, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ErrorException
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 79
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void ErrorException(Exception exc, string format, params object[] args)
    parameters:
    - id: exc
      type: Exception
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub ErrorException(exc As Exception, format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.NLogger.ErrorException*
  implements:
  - EventStore.Common.Log.ILogger.ErrorException(Exception,System.String,System.Object[])
  nameWithType.vb: NLogger.ErrorException(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.NLogger.ErrorException(Exception, System.String, System.Object())
  name.vb: ErrorException(Exception, String, Object())
- uid: EventStore.Common.Log.NLogger.InfoException(Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.NLogger.InfoException(Exception,System.String,System.Object[])
  id: InfoException(Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: InfoException(Exception, String, Object[])
  nameWithType: NLogger.InfoException(Exception, String, Object[])
  fullName: EventStore.Common.Log.NLogger.InfoException(Exception, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: InfoException
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 84
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void InfoException(Exception exc, string format, params object[] args)
    parameters:
    - id: exc
      type: Exception
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub InfoException(exc As Exception, format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.NLogger.InfoException*
  implements:
  - EventStore.Common.Log.ILogger.InfoException(Exception,System.String,System.Object[])
  nameWithType.vb: NLogger.InfoException(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.NLogger.InfoException(Exception, System.String, System.Object())
  name.vb: InfoException(Exception, String, Object())
- uid: EventStore.Common.Log.NLogger.DebugException(Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.NLogger.DebugException(Exception,System.String,System.Object[])
  id: DebugException(Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: DebugException(Exception, String, Object[])
  nameWithType: NLogger.DebugException(Exception, String, Object[])
  fullName: EventStore.Common.Log.NLogger.DebugException(Exception, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: DebugException
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 89
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void DebugException(Exception exc, string format, params object[] args)
    parameters:
    - id: exc
      type: Exception
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub DebugException(exc As Exception, format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.NLogger.DebugException*
  implements:
  - EventStore.Common.Log.ILogger.DebugException(Exception,System.String,System.Object[])
  nameWithType.vb: NLogger.DebugException(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.NLogger.DebugException(Exception, System.String, System.Object())
  name.vb: DebugException(Exception, String, Object())
- uid: EventStore.Common.Log.NLogger.WarnException(Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.NLogger.WarnException(Exception,System.String,System.Object[])
  id: WarnException(Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: WarnException(Exception, String, Object[])
  nameWithType: NLogger.WarnException(Exception, String, Object[])
  fullName: EventStore.Common.Log.NLogger.WarnException(Exception, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: WarnException
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 94
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void WarnException(Exception exc, string format, params object[] args)
    parameters:
    - id: exc
      type: Exception
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub WarnException(exc As Exception, format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.NLogger.WarnException*
  implements:
  - EventStore.Common.Log.ILogger.WarnException(Exception,System.String,System.Object[])
  nameWithType.vb: NLogger.WarnException(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.NLogger.WarnException(Exception, System.String, System.Object())
  name.vb: WarnException(Exception, String, Object())
- uid: EventStore.Common.Log.NLogger.TraceException(Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.NLogger.TraceException(Exception,System.String,System.Object[])
  id: TraceException(Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: TraceException(Exception, String, Object[])
  nameWithType: NLogger.TraceException(Exception, String, Object[])
  fullName: EventStore.Common.Log.NLogger.TraceException(Exception, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TraceException
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 99
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public void TraceException(Exception exc, string format, params object[] args)
    parameters:
    - id: exc
      type: Exception
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub TraceException(exc As Exception, format As String, ParamArray args As Object())
  overload: EventStore.Common.Log.NLogger.TraceException*
  implements:
  - EventStore.Common.Log.ILogger.TraceException(Exception,System.String,System.Object[])
  nameWithType.vb: NLogger.TraceException(Exception, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Log.NLogger.TraceException(Exception, System.String, System.Object())
  name.vb: TraceException(Exception, String, Object())
- uid: EventStore.Common.Log.NLogger.FlushLog(System.Nullable{TimeSpan})
  commentId: M:EventStore.Common.Log.NLogger.FlushLog(System.Nullable{TimeSpan})
  id: FlushLog(System.Nullable{TimeSpan})
  parent: EventStore.Common.Log.NLogger
  langs:
  - csharp
  - vb
  name: FlushLog(Nullable<TimeSpan>)
  nameWithType: NLogger.FlushLog(Nullable<TimeSpan>)
  fullName: EventStore.Common.Log.NLogger.FlushLog(System.Nullable<TimeSpan>)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Log/NLogger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: FlushLog
    path: ../EventStore/src/EventStore.Common/Log/NLogger.cs
    startLine: 104
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Log
  syntax:
    content: public static void FlushLog(TimeSpan? maxTimeToWait = null)
    parameters:
    - id: maxTimeToWait
      type: System.Nullable{TimeSpan}
    content.vb: Public Shared Sub FlushLog(maxTimeToWait As TimeSpan? = Nothing)
  overload: EventStore.Common.Log.NLogger.FlushLog*
  nameWithType.vb: NLogger.FlushLog(Nullable(Of TimeSpan))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Log.NLogger.FlushLog(System.Nullable(Of TimeSpan))
  name.vb: FlushLog(Nullable(Of TimeSpan))
references:
- uid: EventStore.Common.Log
  commentId: N:EventStore.Common.Log
  name: EventStore.Common.Log
  nameWithType: EventStore.Common.Log
  fullName: EventStore.Common.Log
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Common.Log.ILogger
  commentId: T:EventStore.Common.Log.ILogger
  parent: EventStore.Common.Log
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.Common.Log.ILogger
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.NLogger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<NLogger>()
  nameWithType: ProtobufExtensions.Serialize<NLogger>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Common.Log.NLogger>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of NLogger)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Common.Log.NLogger)()
  name.vb: Serialize(Of NLogger)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<NLogger>
    nameWithType: ProtobufExtensions.Serialize<NLogger>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Common.Log.NLogger>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of NLogger)
    nameWithType: ProtobufExtensions.Serialize(Of NLogger)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Common.Log.NLogger)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.NLogger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<NLogger>()
  nameWithType: ProtobufExtensions.SerializeToArray<NLogger>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Common.Log.NLogger>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of NLogger)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Common.Log.NLogger)()
  name.vb: SerializeToArray(Of NLogger)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<NLogger>
    nameWithType: ProtobufExtensions.SerializeToArray<NLogger>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Common.Log.NLogger>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of NLogger)
    nameWithType: ProtobufExtensions.SerializeToArray(Of NLogger)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Common.Log.NLogger)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Common.Log.NLogger.#ctor*
  commentId: Overload:EventStore.Common.Log.NLogger.#ctor
  name: NLogger
  nameWithType: NLogger.NLogger
  fullName: EventStore.Common.Log.NLogger.NLogger
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Common.Log.NLogger.Flush*
  commentId: Overload:EventStore.Common.Log.NLogger.Flush
  name: Flush
  nameWithType: NLogger.Flush
  fullName: EventStore.Common.Log.NLogger.Flush
- uid: EventStore.Common.Log.ILogger.Flush(System.Nullable{TimeSpan})
  commentId: M:EventStore.Common.Log.ILogger.Flush(System.Nullable{TimeSpan})
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Flush(Nullable<TimeSpan>)
  nameWithType: ILogger.Flush(Nullable<TimeSpan>)
  fullName: EventStore.Common.Log.ILogger.Flush(System.Nullable<TimeSpan>)
  nameWithType.vb: ILogger.Flush(Nullable(Of TimeSpan))
  fullName.vb: EventStore.Common.Log.ILogger.Flush(System.Nullable(Of TimeSpan))
  name.vb: Flush(Nullable(Of TimeSpan))
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Flush(System.Nullable{TimeSpan})
    name: Flush
    nameWithType: ILogger.Flush
    fullName: EventStore.Common.Log.ILogger.Flush
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Flush(System.Nullable{TimeSpan})
    name: Flush
    nameWithType: ILogger.Flush
    fullName: EventStore.Common.Log.ILogger.Flush
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{TimeSpan}
  commentId: '!:System.Nullable{TimeSpan}'
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.NLogger.Fatal*
  commentId: Overload:EventStore.Common.Log.NLogger.Fatal
  name: Fatal
  nameWithType: NLogger.Fatal
  fullName: EventStore.Common.Log.NLogger.Fatal
- uid: EventStore.Common.Log.ILogger.Fatal(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.Fatal(System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Fatal(String, Object[])
  nameWithType: ILogger.Fatal(String, Object[])
  fullName: EventStore.Common.Log.ILogger.Fatal(System.String, System.Object[])
  nameWithType.vb: ILogger.Fatal(String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.Fatal(System.String, System.Object())
  name.vb: Fatal(String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Fatal(System.String,System.Object[])
    name: Fatal
    nameWithType: ILogger.Fatal
    fullName: EventStore.Common.Log.ILogger.Fatal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Fatal(System.String,System.Object[])
    name: Fatal
    nameWithType: ILogger.Fatal
    fullName: EventStore.Common.Log.ILogger.Fatal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Common.Log.NLogger.Error*
  commentId: Overload:EventStore.Common.Log.NLogger.Error
  name: Error
  nameWithType: NLogger.Error
  fullName: EventStore.Common.Log.NLogger.Error
- uid: EventStore.Common.Log.ILogger.Error(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.Error(System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Error(String, Object[])
  nameWithType: ILogger.Error(String, Object[])
  fullName: EventStore.Common.Log.ILogger.Error(System.String, System.Object[])
  nameWithType.vb: ILogger.Error(String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.Error(System.String, System.Object())
  name.vb: Error(String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Error(System.String,System.Object[])
    name: Error
    nameWithType: ILogger.Error
    fullName: EventStore.Common.Log.ILogger.Error
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Error(System.String,System.Object[])
    name: Error
    nameWithType: ILogger.Error
    fullName: EventStore.Common.Log.ILogger.Error
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.NLogger.Info*
  commentId: Overload:EventStore.Common.Log.NLogger.Info
  name: Info
  nameWithType: NLogger.Info
  fullName: EventStore.Common.Log.NLogger.Info
- uid: EventStore.Common.Log.ILogger.Info(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.Info(System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Info(String, Object[])
  nameWithType: ILogger.Info(String, Object[])
  fullName: EventStore.Common.Log.ILogger.Info(System.String, System.Object[])
  nameWithType.vb: ILogger.Info(String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.Info(System.String, System.Object())
  name.vb: Info(String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Info(System.String,System.Object[])
    name: Info
    nameWithType: ILogger.Info
    fullName: EventStore.Common.Log.ILogger.Info
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Info(System.String,System.Object[])
    name: Info
    nameWithType: ILogger.Info
    fullName: EventStore.Common.Log.ILogger.Info
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.NLogger.Debug*
  commentId: Overload:EventStore.Common.Log.NLogger.Debug
  name: Debug
  nameWithType: NLogger.Debug
  fullName: EventStore.Common.Log.NLogger.Debug
- uid: EventStore.Common.Log.ILogger.Debug(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.Debug(System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Debug(String, Object[])
  nameWithType: ILogger.Debug(String, Object[])
  fullName: EventStore.Common.Log.ILogger.Debug(System.String, System.Object[])
  nameWithType.vb: ILogger.Debug(String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.Debug(System.String, System.Object())
  name.vb: Debug(String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Debug(System.String,System.Object[])
    name: Debug
    nameWithType: ILogger.Debug
    fullName: EventStore.Common.Log.ILogger.Debug
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Debug(System.String,System.Object[])
    name: Debug
    nameWithType: ILogger.Debug
    fullName: EventStore.Common.Log.ILogger.Debug
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.NLogger.Warn*
  commentId: Overload:EventStore.Common.Log.NLogger.Warn
  name: Warn
  nameWithType: NLogger.Warn
  fullName: EventStore.Common.Log.NLogger.Warn
- uid: EventStore.Common.Log.ILogger.Warn(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.Warn(System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Warn(String, Object[])
  nameWithType: ILogger.Warn(String, Object[])
  fullName: EventStore.Common.Log.ILogger.Warn(System.String, System.Object[])
  nameWithType.vb: ILogger.Warn(String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.Warn(System.String, System.Object())
  name.vb: Warn(String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Warn(System.String,System.Object[])
    name: Warn
    nameWithType: ILogger.Warn
    fullName: EventStore.Common.Log.ILogger.Warn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Warn(System.String,System.Object[])
    name: Warn
    nameWithType: ILogger.Warn
    fullName: EventStore.Common.Log.ILogger.Warn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.NLogger.Trace*
  commentId: Overload:EventStore.Common.Log.NLogger.Trace
  name: Trace
  nameWithType: NLogger.Trace
  fullName: EventStore.Common.Log.NLogger.Trace
- uid: EventStore.Common.Log.ILogger.Trace(System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.Trace(System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: Trace(String, Object[])
  nameWithType: ILogger.Trace(String, Object[])
  fullName: EventStore.Common.Log.ILogger.Trace(System.String, System.Object[])
  nameWithType.vb: ILogger.Trace(String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.Trace(System.String, System.Object())
  name.vb: Trace(String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.Trace(System.String,System.Object[])
    name: Trace
    nameWithType: ILogger.Trace
    fullName: EventStore.Common.Log.ILogger.Trace
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.Trace(System.String,System.Object[])
    name: Trace
    nameWithType: ILogger.Trace
    fullName: EventStore.Common.Log.ILogger.Trace
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.NLogger.FatalException*
  commentId: Overload:EventStore.Common.Log.NLogger.FatalException
  name: FatalException
  nameWithType: NLogger.FatalException
  fullName: EventStore.Common.Log.NLogger.FatalException
- uid: EventStore.Common.Log.ILogger.FatalException(Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.FatalException(Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: FatalException(Exception, String, Object[])
  nameWithType: ILogger.FatalException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ILogger.FatalException(Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.FatalException(Exception, String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.FatalException(Exception, System.String, System.Object())
  name.vb: FatalException(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.FatalException(Exception,System.String,System.Object[])
    name: FatalException
    nameWithType: ILogger.FatalException
    fullName: EventStore.Common.Log.ILogger.FatalException
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.FatalException(Exception,System.String,System.Object[])
    name: FatalException
    nameWithType: ILogger.FatalException
    fullName: EventStore.Common.Log.ILogger.FatalException
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: EventStore.Common.Log.NLogger.ErrorException*
  commentId: Overload:EventStore.Common.Log.NLogger.ErrorException
  name: ErrorException
  nameWithType: NLogger.ErrorException
  fullName: EventStore.Common.Log.NLogger.ErrorException
- uid: EventStore.Common.Log.ILogger.ErrorException(Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.ErrorException(Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: ErrorException(Exception, String, Object[])
  nameWithType: ILogger.ErrorException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ILogger.ErrorException(Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.ErrorException(Exception, String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.ErrorException(Exception, System.String, System.Object())
  name.vb: ErrorException(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.ErrorException(Exception,System.String,System.Object[])
    name: ErrorException
    nameWithType: ILogger.ErrorException
    fullName: EventStore.Common.Log.ILogger.ErrorException
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.ErrorException(Exception,System.String,System.Object[])
    name: ErrorException
    nameWithType: ILogger.ErrorException
    fullName: EventStore.Common.Log.ILogger.ErrorException
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.NLogger.InfoException*
  commentId: Overload:EventStore.Common.Log.NLogger.InfoException
  name: InfoException
  nameWithType: NLogger.InfoException
  fullName: EventStore.Common.Log.NLogger.InfoException
- uid: EventStore.Common.Log.ILogger.InfoException(Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.InfoException(Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: InfoException(Exception, String, Object[])
  nameWithType: ILogger.InfoException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ILogger.InfoException(Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.InfoException(Exception, String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.InfoException(Exception, System.String, System.Object())
  name.vb: InfoException(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.InfoException(Exception,System.String,System.Object[])
    name: InfoException
    nameWithType: ILogger.InfoException
    fullName: EventStore.Common.Log.ILogger.InfoException
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.InfoException(Exception,System.String,System.Object[])
    name: InfoException
    nameWithType: ILogger.InfoException
    fullName: EventStore.Common.Log.ILogger.InfoException
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.NLogger.DebugException*
  commentId: Overload:EventStore.Common.Log.NLogger.DebugException
  name: DebugException
  nameWithType: NLogger.DebugException
  fullName: EventStore.Common.Log.NLogger.DebugException
- uid: EventStore.Common.Log.ILogger.DebugException(Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.DebugException(Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: DebugException(Exception, String, Object[])
  nameWithType: ILogger.DebugException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ILogger.DebugException(Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.DebugException(Exception, String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.DebugException(Exception, System.String, System.Object())
  name.vb: DebugException(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.DebugException(Exception,System.String,System.Object[])
    name: DebugException
    nameWithType: ILogger.DebugException
    fullName: EventStore.Common.Log.ILogger.DebugException
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.DebugException(Exception,System.String,System.Object[])
    name: DebugException
    nameWithType: ILogger.DebugException
    fullName: EventStore.Common.Log.ILogger.DebugException
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.NLogger.WarnException*
  commentId: Overload:EventStore.Common.Log.NLogger.WarnException
  name: WarnException
  nameWithType: NLogger.WarnException
  fullName: EventStore.Common.Log.NLogger.WarnException
- uid: EventStore.Common.Log.ILogger.WarnException(Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.WarnException(Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: WarnException(Exception, String, Object[])
  nameWithType: ILogger.WarnException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ILogger.WarnException(Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.WarnException(Exception, String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.WarnException(Exception, System.String, System.Object())
  name.vb: WarnException(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.WarnException(Exception,System.String,System.Object[])
    name: WarnException
    nameWithType: ILogger.WarnException
    fullName: EventStore.Common.Log.ILogger.WarnException
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.WarnException(Exception,System.String,System.Object[])
    name: WarnException
    nameWithType: ILogger.WarnException
    fullName: EventStore.Common.Log.ILogger.WarnException
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.NLogger.TraceException*
  commentId: Overload:EventStore.Common.Log.NLogger.TraceException
  name: TraceException
  nameWithType: NLogger.TraceException
  fullName: EventStore.Common.Log.NLogger.TraceException
- uid: EventStore.Common.Log.ILogger.TraceException(Exception,System.String,System.Object[])
  commentId: M:EventStore.Common.Log.ILogger.TraceException(Exception,System.String,System.Object[])
  parent: EventStore.Common.Log.ILogger
  isExternal: true
  name: TraceException(Exception, String, Object[])
  nameWithType: ILogger.TraceException(Exception, String, Object[])
  fullName: EventStore.Common.Log.ILogger.TraceException(Exception, System.String, System.Object[])
  nameWithType.vb: ILogger.TraceException(Exception, String, Object())
  fullName.vb: EventStore.Common.Log.ILogger.TraceException(Exception, System.String, System.Object())
  name.vb: TraceException(Exception, String, Object())
  spec.csharp:
  - uid: EventStore.Common.Log.ILogger.TraceException(Exception,System.String,System.Object[])
    name: TraceException
    nameWithType: ILogger.TraceException
    fullName: EventStore.Common.Log.ILogger.TraceException
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Log.ILogger.TraceException(Exception,System.String,System.Object[])
    name: TraceException
    nameWithType: ILogger.TraceException
    fullName: EventStore.Common.Log.ILogger.TraceException
  - name: (
    nameWithType: (
    fullName: (
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Log.NLogger.FlushLog*
  commentId: Overload:EventStore.Common.Log.NLogger.FlushLog
  name: FlushLog
  nameWithType: NLogger.FlushLog
  fullName: EventStore.Common.Log.NLogger.FlushLog

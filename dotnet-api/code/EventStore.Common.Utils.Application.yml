### YamlMime:ManagedReference
items:
- uid: EventStore.Common.Utils.Application
  commentId: T:EventStore.Common.Utils.Application
  id: Application
  parent: EventStore.Common.Utils
  children:
  - EventStore.Common.Utils.Application.AddDefines(IEnumerable{System.String})
  - EventStore.Common.Utils.Application.AdditionalCommitChecks
  - EventStore.Common.Utils.Application.AlwaysKeepScavenged
  - EventStore.Common.Utils.Application.DisableMergeChunks
  - EventStore.Common.Utils.Application.DoNotTimeoutRequests
  - EventStore.Common.Utils.Application.DumpStatistics
  - EventStore.Common.Utils.Application.Exit(EventStore.Common.Utils.ExitCode,System.String)
  - EventStore.Common.Utils.Application.Exit(System.Int32,System.String)
  - EventStore.Common.Utils.Application.ExitSilent(System.Int32,System.String)
  - EventStore.Common.Utils.Application.InfiniteMetastreams
  - EventStore.Common.Utils.Application.IsDefined(System.String)
  - EventStore.Common.Utils.Application.Log
  - EventStore.Common.Utils.Application.RegisterExitAction(Action{System.Int32})
  langs:
  - csharp
  - vb
  name: Application
  nameWithType: Application
  fullName: EventStore.Common.Utils.Application
  type: Class
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Application
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 11
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: 'public class Application : object'
    content.vb: >-
      Public Class Application
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Common.Utils.Application.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Common.Utils.Application.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Common.Utils.Application.AdditionalCommitChecks
  commentId: F:EventStore.Common.Utils.Application.AdditionalCommitChecks
  id: AdditionalCommitChecks
  parent: EventStore.Common.Utils.Application
  langs:
  - csharp
  - vb
  name: AdditionalCommitChecks
  nameWithType: Application.AdditionalCommitChecks
  fullName: EventStore.Common.Utils.Application.AdditionalCommitChecks
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AdditionalCommitChecks
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 12
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public const string AdditionalCommitChecks = null
    return:
      type: System.String
    content.vb: Public Const AdditionalCommitChecks As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Common.Utils.Application.InfiniteMetastreams
  commentId: F:EventStore.Common.Utils.Application.InfiniteMetastreams
  id: InfiniteMetastreams
  parent: EventStore.Common.Utils.Application
  langs:
  - csharp
  - vb
  name: InfiniteMetastreams
  nameWithType: Application.InfiniteMetastreams
  fullName: EventStore.Common.Utils.Application.InfiniteMetastreams
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: InfiniteMetastreams
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 13
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public const string InfiniteMetastreams = null
    return:
      type: System.String
    content.vb: Public Const InfiniteMetastreams As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Common.Utils.Application.DumpStatistics
  commentId: F:EventStore.Common.Utils.Application.DumpStatistics
  id: DumpStatistics
  parent: EventStore.Common.Utils.Application
  langs:
  - csharp
  - vb
  name: DumpStatistics
  nameWithType: Application.DumpStatistics
  fullName: EventStore.Common.Utils.Application.DumpStatistics
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: DumpStatistics
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 14
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public const string DumpStatistics = null
    return:
      type: System.String
    content.vb: Public Const DumpStatistics As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Common.Utils.Application.DoNotTimeoutRequests
  commentId: F:EventStore.Common.Utils.Application.DoNotTimeoutRequests
  id: DoNotTimeoutRequests
  parent: EventStore.Common.Utils.Application
  langs:
  - csharp
  - vb
  name: DoNotTimeoutRequests
  nameWithType: Application.DoNotTimeoutRequests
  fullName: EventStore.Common.Utils.Application.DoNotTimeoutRequests
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: DoNotTimeoutRequests
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 15
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public const string DoNotTimeoutRequests = null
    return:
      type: System.String
    content.vb: Public Const DoNotTimeoutRequests As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Common.Utils.Application.AlwaysKeepScavenged
  commentId: F:EventStore.Common.Utils.Application.AlwaysKeepScavenged
  id: AlwaysKeepScavenged
  parent: EventStore.Common.Utils.Application
  langs:
  - csharp
  - vb
  name: AlwaysKeepScavenged
  nameWithType: Application.AlwaysKeepScavenged
  fullName: EventStore.Common.Utils.Application.AlwaysKeepScavenged
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AlwaysKeepScavenged
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 16
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public const string AlwaysKeepScavenged = null
    return:
      type: System.String
    content.vb: Public Const AlwaysKeepScavenged As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Common.Utils.Application.DisableMergeChunks
  commentId: F:EventStore.Common.Utils.Application.DisableMergeChunks
  id: DisableMergeChunks
  parent: EventStore.Common.Utils.Application
  langs:
  - csharp
  - vb
  name: DisableMergeChunks
  nameWithType: Application.DisableMergeChunks
  fullName: EventStore.Common.Utils.Application.DisableMergeChunks
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: DisableMergeChunks
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 17
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public const string DisableMergeChunks = null
    return:
      type: System.String
    content.vb: Public Const DisableMergeChunks As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Common.Utils.Application.Log
  commentId: F:EventStore.Common.Utils.Application.Log
  id: Log
  parent: EventStore.Common.Utils.Application
  langs:
  - csharp
  - vb
  name: Log
  nameWithType: Application.Log
  fullName: EventStore.Common.Utils.Application.Log
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Log
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 19
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: protected static readonly ILogger Log
    return:
      type: EventStore.Common.Log.ILogger
    content.vb: Protected Shared ReadOnly Log As ILogger
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Application.RegisterExitAction(Action{System.Int32})
  commentId: M:EventStore.Common.Utils.Application.RegisterExitAction(Action{System.Int32})
  id: RegisterExitAction(Action{System.Int32})
  parent: EventStore.Common.Utils.Application
  langs:
  - csharp
  - vb
  name: RegisterExitAction(Action<Int32>)
  nameWithType: Application.RegisterExitAction(Action<Int32>)
  fullName: EventStore.Common.Utils.Application.RegisterExitAction(Action<System.Int32>)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: RegisterExitAction
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 26
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static void RegisterExitAction(Action<int> exitAction)
    parameters:
    - id: exitAction
      type: Action{System.Int32}
    content.vb: Public Shared Sub RegisterExitAction(exitAction As Action(Of Integer))
  overload: EventStore.Common.Utils.Application.RegisterExitAction*
  nameWithType.vb: Application.RegisterExitAction(Action(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.Application.RegisterExitAction(Action(Of System.Int32))
  name.vb: RegisterExitAction(Action(Of Int32))
- uid: EventStore.Common.Utils.Application.ExitSilent(System.Int32,System.String)
  commentId: M:EventStore.Common.Utils.Application.ExitSilent(System.Int32,System.String)
  id: ExitSilent(System.Int32,System.String)
  parent: EventStore.Common.Utils.Application
  langs:
  - csharp
  - vb
  name: ExitSilent(Int32, String)
  nameWithType: Application.ExitSilent(Int32, String)
  fullName: EventStore.Common.Utils.Application.ExitSilent(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ExitSilent
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 32
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static void ExitSilent(int exitCode, string reason)
    parameters:
    - id: exitCode
      type: System.Int32
    - id: reason
      type: System.String
    content.vb: Public Shared Sub ExitSilent(exitCode As Integer, reason As String)
  overload: EventStore.Common.Utils.Application.ExitSilent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Utils.Application.Exit(EventStore.Common.Utils.ExitCode,System.String)
  commentId: M:EventStore.Common.Utils.Application.Exit(EventStore.Common.Utils.ExitCode,System.String)
  id: Exit(EventStore.Common.Utils.ExitCode,System.String)
  parent: EventStore.Common.Utils.Application
  langs:
  - csharp
  - vb
  name: Exit(ExitCode, String)
  nameWithType: Application.Exit(ExitCode, String)
  fullName: EventStore.Common.Utils.Application.Exit(EventStore.Common.Utils.ExitCode, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Exit
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 36
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static void Exit(ExitCode exitCode, string reason)
    parameters:
    - id: exitCode
      type: EventStore.Common.Utils.ExitCode
    - id: reason
      type: System.String
    content.vb: Public Shared Sub Exit(exitCode As ExitCode, reason As String)
  overload: EventStore.Common.Utils.Application.Exit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Utils.Application.Exit(System.Int32,System.String)
  commentId: M:EventStore.Common.Utils.Application.Exit(System.Int32,System.String)
  id: Exit(System.Int32,System.String)
  parent: EventStore.Common.Utils.Application
  langs:
  - csharp
  - vb
  name: Exit(Int32, String)
  nameWithType: Application.Exit(Int32, String)
  fullName: EventStore.Common.Utils.Application.Exit(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Exit
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 40
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static void Exit(int exitCode, string reason)
    parameters:
    - id: exitCode
      type: System.Int32
    - id: reason
      type: System.String
    content.vb: Public Shared Sub Exit(exitCode As Integer, reason As String)
  overload: EventStore.Common.Utils.Application.Exit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Utils.Application.AddDefines(IEnumerable{System.String})
  commentId: M:EventStore.Common.Utils.Application.AddDefines(IEnumerable{System.String})
  id: AddDefines(IEnumerable{System.String})
  parent: EventStore.Common.Utils.Application
  langs:
  - csharp
  - vb
  name: AddDefines(IEnumerable<String>)
  nameWithType: Application.AddDefines(IEnumerable<String>)
  fullName: EventStore.Common.Utils.Application.AddDefines(IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AddDefines
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 64
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static void AddDefines(IEnumerable<string> defines)
    parameters:
    - id: defines
      type: IEnumerable{System.String}
    content.vb: Public Shared Sub AddDefines(defines As IEnumerable(Of String))
  overload: EventStore.Common.Utils.Application.AddDefines*
  nameWithType.vb: Application.AddDefines(IEnumerable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.Application.AddDefines(IEnumerable(Of System.String))
  name.vb: AddDefines(IEnumerable(Of String))
- uid: EventStore.Common.Utils.Application.IsDefined(System.String)
  commentId: M:EventStore.Common.Utils.Application.IsDefined(System.String)
  id: IsDefined(System.String)
  parent: EventStore.Common.Utils.Application
  langs:
  - csharp
  - vb
  name: IsDefined(String)
  nameWithType: Application.IsDefined(String)
  fullName: EventStore.Common.Utils.Application.IsDefined(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/Application.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: IsDefined
    path: ../EventStore/src/EventStore.Common/Utils/Application.cs
    startLine: 70
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static bool IsDefined(string define)
    parameters:
    - id: define
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsDefined(define As String) As Boolean
  overload: EventStore.Common.Utils.Application.IsDefined*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Application.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<Application>()
  nameWithType: ProtobufExtensions.Serialize<Application>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Common.Utils.Application>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of Application)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Common.Utils.Application)()
  name.vb: Serialize(Of Application)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<Application>
    nameWithType: ProtobufExtensions.Serialize<Application>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Common.Utils.Application>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of Application)
    nameWithType: ProtobufExtensions.Serialize(Of Application)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Common.Utils.Application)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Application.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<Application>()
  nameWithType: ProtobufExtensions.SerializeToArray<Application>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Common.Utils.Application>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of Application)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Common.Utils.Application)()
  name.vb: SerializeToArray(Of Application)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<Application>
    nameWithType: ProtobufExtensions.SerializeToArray<Application>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Common.Utils.Application>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of Application)
    nameWithType: ProtobufExtensions.SerializeToArray(Of Application)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Common.Utils.Application)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Common.Log.ILogger
  commentId: T:EventStore.Common.Log.ILogger
  parent: EventStore.Common.Log
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.Common.Log.ILogger
- uid: EventStore.Common.Log
  commentId: N:EventStore.Common.Log
  name: EventStore.Common.Log
  nameWithType: EventStore.Common.Log
  fullName: EventStore.Common.Log
- uid: EventStore.Common.Utils.Application.RegisterExitAction*
  commentId: Overload:EventStore.Common.Utils.Application.RegisterExitAction
  name: RegisterExitAction
  nameWithType: Application.RegisterExitAction
  fullName: EventStore.Common.Utils.Application.RegisterExitAction
- uid: Action{System.Int32}
  commentId: '!:Action{System.Int32}'
  definition: Action`1
  name: Action<Int32>
  nameWithType: Action<Int32>
  fullName: Action<System.Int32>
  nameWithType.vb: Action(Of Int32)
  fullName.vb: Action(Of System.Int32)
  name.vb: Action(Of Int32)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Application.ExitSilent*
  commentId: Overload:EventStore.Common.Utils.Application.ExitSilent
  name: ExitSilent
  nameWithType: Application.ExitSilent
  fullName: EventStore.Common.Utils.Application.ExitSilent
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Common.Utils.Application.Exit*
  commentId: Overload:EventStore.Common.Utils.Application.Exit
  name: Exit
  nameWithType: Application.Exit
  fullName: EventStore.Common.Utils.Application.Exit
- uid: EventStore.Common.Utils.ExitCode
  commentId: T:EventStore.Common.Utils.ExitCode
  parent: EventStore.Common.Utils
  name: ExitCode
  nameWithType: ExitCode
  fullName: EventStore.Common.Utils.ExitCode
- uid: EventStore.Common.Utils.Application.AddDefines*
  commentId: Overload:EventStore.Common.Utils.Application.AddDefines
  name: AddDefines
  nameWithType: Application.AddDefines
  fullName: EventStore.Common.Utils.Application.AddDefines
- uid: IEnumerable{System.String}
  commentId: '!:IEnumerable{System.String}'
  definition: IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Application.IsDefined*
  commentId: Overload:EventStore.Common.Utils.Application.IsDefined
  name: IsDefined
  nameWithType: Application.IsDefined
  fullName: EventStore.Common.Utils.Application.IsDefined
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean

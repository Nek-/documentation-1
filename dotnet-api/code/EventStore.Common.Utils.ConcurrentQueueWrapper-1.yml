### YamlMime:ManagedReference
items:
- uid: EventStore.Common.Utils.ConcurrentQueueWrapper`1
  commentId: T:EventStore.Common.Utils.ConcurrentQueueWrapper`1
  id: ConcurrentQueueWrapper`1
  parent: EventStore.Common.Utils
  children:
  - EventStore.Common.Utils.ConcurrentQueueWrapper`1.Count
  - EventStore.Common.Utils.ConcurrentQueueWrapper`1.Enqueue(`0)
  - EventStore.Common.Utils.ConcurrentQueueWrapper`1.IsEmpty
  - EventStore.Common.Utils.ConcurrentQueueWrapper`1.TryDequeue(`0@)
  langs:
  - csharp
  - vb
  name: ConcurrentQueueWrapper<T>
  nameWithType: ConcurrentQueueWrapper<T>
  fullName: EventStore.Common.Utils.ConcurrentQueueWrapper<T>
  type: Class
  source:
    remote:
      path: src/EventStore.Common/Utils/ConcurrentQueueWrapper.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ConcurrentQueueWrapper
    path: ../EventStore/src/EventStore.Common/Utils/ConcurrentQueueWrapper.cs
    startLine: 8
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: 'public class ConcurrentQueueWrapper<T> : ConcurrentQueue<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class ConcurrentQueueWrapper(Of T)
          Inherits ConcurrentQueue(Of T)
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Common.Utils.ConcurrentQueueWrapper`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Common.Utils.ConcurrentQueueWrapper`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  nameWithType.vb: ConcurrentQueueWrapper(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: EventStore.Common.Utils.ConcurrentQueueWrapper(Of T)
  name.vb: ConcurrentQueueWrapper(Of T)
- uid: EventStore.Common.Utils.ConcurrentQueueWrapper`1.IsEmpty
  commentId: P:EventStore.Common.Utils.ConcurrentQueueWrapper`1.IsEmpty
  id: IsEmpty
  parent: EventStore.Common.Utils.ConcurrentQueueWrapper`1
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: ConcurrentQueueWrapper<T>.IsEmpty
  fullName: EventStore.Common.Utils.ConcurrentQueueWrapper<T>.IsEmpty
  type: Property
  source:
    remote:
      path: src/EventStore.Common/Utils/ConcurrentQueueWrapper.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: IsEmpty
    path: ../EventStore/src/EventStore.Common/Utils/ConcurrentQueueWrapper.cs
    startLine: 11
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: EventStore.Common.Utils.ConcurrentQueueWrapper`1.IsEmpty*
  nameWithType.vb: ConcurrentQueueWrapper(Of T).IsEmpty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: EventStore.Common.Utils.ConcurrentQueueWrapper(Of T).IsEmpty
- uid: EventStore.Common.Utils.ConcurrentQueueWrapper`1.Count
  commentId: P:EventStore.Common.Utils.ConcurrentQueueWrapper`1.Count
  id: Count
  parent: EventStore.Common.Utils.ConcurrentQueueWrapper`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ConcurrentQueueWrapper<T>.Count
  fullName: EventStore.Common.Utils.ConcurrentQueueWrapper<T>.Count
  type: Property
  source:
    remote:
      path: src/EventStore.Common/Utils/ConcurrentQueueWrapper.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Count
    path: ../EventStore/src/EventStore.Common/Utils/ConcurrentQueueWrapper.cs
    startLine: 15
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: EventStore.Common.Utils.ConcurrentQueueWrapper`1.Count*
  nameWithType.vb: ConcurrentQueueWrapper(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: EventStore.Common.Utils.ConcurrentQueueWrapper(Of T).Count
- uid: EventStore.Common.Utils.ConcurrentQueueWrapper`1.TryDequeue(`0@)
  commentId: M:EventStore.Common.Utils.ConcurrentQueueWrapper`1.TryDequeue(`0@)
  id: TryDequeue(`0@)
  parent: EventStore.Common.Utils.ConcurrentQueueWrapper`1
  langs:
  - csharp
  - vb
  name: TryDequeue(out T)
  nameWithType: ConcurrentQueueWrapper<T>.TryDequeue(out T)
  fullName: EventStore.Common.Utils.ConcurrentQueueWrapper<T>.TryDequeue(out T)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/ConcurrentQueueWrapper.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TryDequeue
    path: ../EventStore/src/EventStore.Common/Utils/ConcurrentQueueWrapper.cs
    startLine: 21
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public bool TryDequeue(out T result)
    parameters:
    - id: result
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function TryDequeue(ByRef result As T) As Boolean
  overload: EventStore.Common.Utils.ConcurrentQueueWrapper`1.TryDequeue*
  nameWithType.vb: ConcurrentQueueWrapper(Of T).TryDequeue(ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Utils.ConcurrentQueueWrapper(Of T).TryDequeue(ByRef T)
  name.vb: TryDequeue(ByRef T)
- uid: EventStore.Common.Utils.ConcurrentQueueWrapper`1.Enqueue(`0)
  commentId: M:EventStore.Common.Utils.ConcurrentQueueWrapper`1.Enqueue(`0)
  id: Enqueue(`0)
  parent: EventStore.Common.Utils.ConcurrentQueueWrapper`1
  langs:
  - csharp
  - vb
  name: Enqueue(T)
  nameWithType: ConcurrentQueueWrapper<T>.Enqueue(T)
  fullName: EventStore.Common.Utils.ConcurrentQueueWrapper<T>.Enqueue(T)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/ConcurrentQueueWrapper.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Enqueue
    path: ../EventStore/src/EventStore.Common/Utils/ConcurrentQueueWrapper.cs
    startLine: 30
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public void Enqueue(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Public Sub Enqueue(item As T)
  overload: EventStore.Common.Utils.ConcurrentQueueWrapper`1.Enqueue*
  nameWithType.vb: ConcurrentQueueWrapper(Of T).Enqueue(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Common.Utils.ConcurrentQueueWrapper(Of T).Enqueue(T)
references:
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.ConcurrentQueueWrapper`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ConcurrentQueueWrapper<T>>()
  nameWithType: ProtobufExtensions.Serialize<ConcurrentQueueWrapper<T>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Common.Utils.ConcurrentQueueWrapper<T>>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ConcurrentQueueWrapper(Of T))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Common.Utils.ConcurrentQueueWrapper(Of T))()
  name.vb: Serialize(Of ConcurrentQueueWrapper(Of T))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ConcurrentQueueWrapper<T>>
    nameWithType: ProtobufExtensions.Serialize<ConcurrentQueueWrapper<T>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Common.Utils.ConcurrentQueueWrapper<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ConcurrentQueueWrapper(Of T))
    nameWithType: ProtobufExtensions.Serialize(Of ConcurrentQueueWrapper(Of T))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Common.Utils.ConcurrentQueueWrapper(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.ConcurrentQueueWrapper`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ConcurrentQueueWrapper<T>>()
  nameWithType: ProtobufExtensions.SerializeToArray<ConcurrentQueueWrapper<T>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Common.Utils.ConcurrentQueueWrapper<T>>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ConcurrentQueueWrapper(Of T))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Common.Utils.ConcurrentQueueWrapper(Of T))()
  name.vb: SerializeToArray(Of ConcurrentQueueWrapper(Of T))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ConcurrentQueueWrapper<T>>
    nameWithType: ProtobufExtensions.SerializeToArray<ConcurrentQueueWrapper<T>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Common.Utils.ConcurrentQueueWrapper<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ConcurrentQueueWrapper(Of T))
    nameWithType: ProtobufExtensions.SerializeToArray(Of ConcurrentQueueWrapper(Of T))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Common.Utils.ConcurrentQueueWrapper(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Common.Utils.ConcurrentQueueWrapper`1.IsEmpty*
  commentId: Overload:EventStore.Common.Utils.ConcurrentQueueWrapper`1.IsEmpty
  name: IsEmpty
  nameWithType: ConcurrentQueueWrapper<T>.IsEmpty
  fullName: EventStore.Common.Utils.ConcurrentQueueWrapper<T>.IsEmpty
  nameWithType.vb: ConcurrentQueueWrapper(Of T).IsEmpty
  fullName.vb: EventStore.Common.Utils.ConcurrentQueueWrapper(Of T).IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Common.Utils.ConcurrentQueueWrapper`1.Count*
  commentId: Overload:EventStore.Common.Utils.ConcurrentQueueWrapper`1.Count
  name: Count
  nameWithType: ConcurrentQueueWrapper<T>.Count
  fullName: EventStore.Common.Utils.ConcurrentQueueWrapper<T>.Count
  nameWithType.vb: ConcurrentQueueWrapper(Of T).Count
  fullName.vb: EventStore.Common.Utils.ConcurrentQueueWrapper(Of T).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Common.Utils.ConcurrentQueueWrapper`1.TryDequeue*
  commentId: Overload:EventStore.Common.Utils.ConcurrentQueueWrapper`1.TryDequeue
  name: TryDequeue
  nameWithType: ConcurrentQueueWrapper<T>.TryDequeue
  fullName: EventStore.Common.Utils.ConcurrentQueueWrapper<T>.TryDequeue
  nameWithType.vb: ConcurrentQueueWrapper(Of T).TryDequeue
  fullName.vb: EventStore.Common.Utils.ConcurrentQueueWrapper(Of T).TryDequeue
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Common.Utils.ConcurrentQueueWrapper`1.Enqueue*
  commentId: Overload:EventStore.Common.Utils.ConcurrentQueueWrapper`1.Enqueue
  name: Enqueue
  nameWithType: ConcurrentQueueWrapper<T>.Enqueue
  fullName: EventStore.Common.Utils.ConcurrentQueueWrapper<T>.Enqueue
  nameWithType.vb: ConcurrentQueueWrapper(Of T).Enqueue
  fullName.vb: EventStore.Common.Utils.ConcurrentQueueWrapper(Of T).Enqueue

### YamlMime:ManagedReference
items:
- uid: EventStore.Common.Utils.EnumerableExtensions
  commentId: T:EventStore.Common.Utils.EnumerableExtensions
  id: EnumerableExtensions
  parent: EventStore.Common.Utils
  children:
  - EventStore.Common.Utils.EnumerableExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  - EventStore.Common.Utils.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  - EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})
  - EventStore.Common.Utils.EnumerableExtensions.Safe``1(System.Collections.Generic.IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: EventStore.Common.Utils.EnumerableExtensions
  type: Class
  source:
    id: EnumerableExtensions
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/EnumerableExtensions.cs
    startLine: 6
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static class EnumerableExtensions
    content.vb: Public Module EnumerableExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Common.Utils.EnumerableExtensions.Safe``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:EventStore.Common.Utils.EnumerableExtensions.Safe``1(System.Collections.Generic.IEnumerable{``0})
  id: Safe``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: EventStore.Common.Utils.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Safe<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.Safe<T>(IEnumerable<T>)
  fullName: EventStore.Common.Utils.EnumerableExtensions.Safe<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: Safe
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/EnumerableExtensions.cs
    startLine: 7
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static IEnumerable<T> Safe<T>(this IEnumerable<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Safe(Of T)(collection As IEnumerable(Of T)) As IEnumerable(Of T)
  overload: EventStore.Common.Utils.EnumerableExtensions.Safe*
  nameWithType.vb: EnumerableExtensions.Safe(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.EnumerableExtensions.Safe(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Safe(Of T)(IEnumerable(Of T))
- uid: EventStore.Common.Utils.EnumerableExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  commentId: M:EventStore.Common.Utils.EnumerableExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  id: Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  isExtensionMethod: true
  parent: EventStore.Common.Utils.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Contains<T>(IEnumerable<T>, Predicate<T>)
  nameWithType: EnumerableExtensions.Contains<T>(IEnumerable<T>, Predicate<T>)
  fullName: EventStore.Common.Utils.EnumerableExtensions.Contains<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)
  type: Method
  source:
    id: Contains
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/EnumerableExtensions.cs
    startLine: 11
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static bool Contains<T>(this IEnumerable<T> collection, Predicate<T> condition)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: condition
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T)(collection As IEnumerable(Of T), condition As Predicate(Of T)) As Boolean
  overload: EventStore.Common.Utils.EnumerableExtensions.Contains*
  nameWithType.vb: EnumerableExtensions.Contains(Of T)(IEnumerable(Of T), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.EnumerableExtensions.Contains(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))
  name.vb: Contains(Of T)(IEnumerable(Of T), Predicate(Of T))
- uid: EventStore.Common.Utils.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:EventStore.Common.Utils.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  id: IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: EventStore.Common.Utils.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: IsEmpty<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.IsEmpty<T>(IEnumerable<T>)
  fullName: EventStore.Common.Utils.EnumerableExtensions.IsEmpty<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: IsEmpty
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/EnumerableExtensions.cs
    startLine: 15
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static bool IsEmpty<T>(this IEnumerable<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsEmpty(Of T)(collection As IEnumerable(Of T)) As Boolean
  overload: EventStore.Common.Utils.EnumerableExtensions.IsEmpty*
  nameWithType.vb: EnumerableExtensions.IsEmpty(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.EnumerableExtensions.IsEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsEmpty(Of T)(IEnumerable(Of T))
- uid: EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})
  id: IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: EventStore.Common.Utils.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: IsNotEmpty<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.IsNotEmpty<T>(IEnumerable<T>)
  fullName: EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: IsNotEmpty
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/EnumerableExtensions.cs
    startLine: 24
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static bool IsNotEmpty<T>(this IEnumerable<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNotEmpty(Of T)(collection As IEnumerable(Of T)) As Boolean
  overload: EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty*
  nameWithType.vb: EnumerableExtensions.IsNotEmpty(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsNotEmpty(Of T)(IEnumerable(Of T))
references:
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.EnumerableExtensions.Safe*
  commentId: Overload:EventStore.Common.Utils.EnumerableExtensions.Safe
  name: Safe
  nameWithType: EnumerableExtensions.Safe
  fullName: EventStore.Common.Utils.EnumerableExtensions.Safe
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EventStore.Common.Utils.EnumerableExtensions.Contains*
  commentId: Overload:EventStore.Common.Utils.EnumerableExtensions.Contains
  name: Contains
  nameWithType: EnumerableExtensions.Contains
  fullName: EventStore.Common.Utils.EnumerableExtensions.Contains
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{``0}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.EnumerableExtensions.IsEmpty*
  commentId: Overload:EventStore.Common.Utils.EnumerableExtensions.IsEmpty
  name: IsEmpty
  nameWithType: EnumerableExtensions.IsEmpty
  fullName: EventStore.Common.Utils.EnumerableExtensions.IsEmpty
- uid: EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty*
  commentId: Overload:EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty
  name: IsNotEmpty
  nameWithType: EnumerableExtensions.IsNotEmpty
  fullName: EventStore.Common.Utils.EnumerableExtensions.IsNotEmpty

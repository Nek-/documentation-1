### YamlMime:ManagedReference
items:
- uid: EventStore.Common.Utils.Helper
  commentId: T:EventStore.Common.Utils.Helper
  id: Helper
  parent: EventStore.Common.Utils
  children:
  - EventStore.Common.Utils.Helper.EatException(Action)
  - EventStore.Common.Utils.Helper.EatException``1(Func{``0},``0)
  - EventStore.Common.Utils.Helper.FormatBinaryDump(ArraySegment{System.Byte})
  - EventStore.Common.Utils.Helper.FormatBinaryDump(System.Byte[])
  - EventStore.Common.Utils.Helper.GetDefaultLogsDir
  - EventStore.Common.Utils.Helper.UTF8NoBom
  langs:
  - csharp
  - vb
  name: Helper
  nameWithType: Helper
  fullName: EventStore.Common.Utils.Helper
  type: Class
  source:
    remote:
      path: src/EventStore.Common/Utils/Helper.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Helper
    path: ../EventStore/src/EventStore.Common/Utils/Helper.cs
    startLine: 7
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: 'public static class Helper : object'
    content.vb: >-
      Public Module Helper
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Common.Utils.Helper.UTF8NoBom
  commentId: F:EventStore.Common.Utils.Helper.UTF8NoBom
  id: UTF8NoBom
  parent: EventStore.Common.Utils.Helper
  langs:
  - csharp
  - vb
  name: UTF8NoBom
  nameWithType: Helper.UTF8NoBom
  fullName: EventStore.Common.Utils.Helper.UTF8NoBom
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Helper.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: UTF8NoBom
    path: ../EventStore/src/EventStore.Common/Utils/Helper.cs
    startLine: 9
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly UTF8Encoding UTF8NoBom
    return:
      type: UTF8Encoding
    content.vb: Public Shared ReadOnly UTF8NoBom As UTF8Encoding
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Helper.EatException(Action)
  commentId: M:EventStore.Common.Utils.Helper.EatException(Action)
  id: EatException(Action)
  parent: EventStore.Common.Utils.Helper
  langs:
  - csharp
  - vb
  name: EatException(Action)
  nameWithType: Helper.EatException(Action)
  fullName: EventStore.Common.Utils.Helper.EatException(Action)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/Helper.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EatException
    path: ../EventStore/src/EventStore.Common/Utils/Helper.cs
    startLine: 11
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static void EatException(Action action)
    parameters:
    - id: action
      type: Action
    content.vb: Public Shared Sub EatException(action As Action)
  overload: EventStore.Common.Utils.Helper.EatException*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Utils.Helper.EatException``1(Func{``0},``0)
  commentId: M:EventStore.Common.Utils.Helper.EatException``1(Func{``0},``0)
  id: EatException``1(Func{``0},``0)
  parent: EventStore.Common.Utils.Helper
  langs:
  - csharp
  - vb
  name: EatException<T>(Func<T>, T)
  nameWithType: Helper.EatException<T>(Func<T>, T)
  fullName: EventStore.Common.Utils.Helper.EatException<T>(Func<T>, T)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/Helper.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EatException
    path: ../EventStore/src/EventStore.Common/Utils/Helper.cs
    startLine: 22
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static T EatException<T>(Func<T> action, T defaultValue = null)
    parameters:
    - id: action
      type: Func{{T}}
    - id: defaultValue
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function EatException(Of T)(action As Func(Of T), defaultValue As T = Nothing) As T
  overload: EventStore.Common.Utils.Helper.EatException*
  nameWithType.vb: Helper.EatException(Of T)(Func(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.Helper.EatException(Of T)(Func(Of T), T)
  name.vb: EatException(Of T)(Func(Of T), T)
- uid: EventStore.Common.Utils.Helper.GetDefaultLogsDir
  commentId: M:EventStore.Common.Utils.Helper.GetDefaultLogsDir
  id: GetDefaultLogsDir
  parent: EventStore.Common.Utils.Helper
  langs:
  - csharp
  - vb
  name: GetDefaultLogsDir()
  nameWithType: Helper.GetDefaultLogsDir()
  fullName: EventStore.Common.Utils.Helper.GetDefaultLogsDir()
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/Helper.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetDefaultLogsDir
    path: ../EventStore/src/EventStore.Common/Utils/Helper.cs
    startLine: 34
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static string GetDefaultLogsDir()
    return:
      type: System.String
    content.vb: Public Shared Function GetDefaultLogsDir As String
  overload: EventStore.Common.Utils.Helper.GetDefaultLogsDir*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Utils.Helper.FormatBinaryDump(System.Byte[])
  commentId: M:EventStore.Common.Utils.Helper.FormatBinaryDump(System.Byte[])
  id: FormatBinaryDump(System.Byte[])
  parent: EventStore.Common.Utils.Helper
  langs:
  - csharp
  - vb
  name: FormatBinaryDump(Byte[])
  nameWithType: Helper.FormatBinaryDump(Byte[])
  fullName: EventStore.Common.Utils.Helper.FormatBinaryDump(System.Byte[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/Helper.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: FormatBinaryDump
    path: ../EventStore/src/EventStore.Common/Utils/Helper.cs
    startLine: 39
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static string FormatBinaryDump(byte[] logBulk)
    parameters:
    - id: logBulk
      type: System.Byte[]
    return:
      type: System.String
    content.vb: Public Shared Function FormatBinaryDump(logBulk As Byte()) As String
  overload: EventStore.Common.Utils.Helper.FormatBinaryDump*
  nameWithType.vb: Helper.FormatBinaryDump(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.Helper.FormatBinaryDump(System.Byte())
  name.vb: FormatBinaryDump(Byte())
- uid: EventStore.Common.Utils.Helper.FormatBinaryDump(ArraySegment{System.Byte})
  commentId: M:EventStore.Common.Utils.Helper.FormatBinaryDump(ArraySegment{System.Byte})
  id: FormatBinaryDump(ArraySegment{System.Byte})
  parent: EventStore.Common.Utils.Helper
  langs:
  - csharp
  - vb
  name: FormatBinaryDump(ArraySegment<Byte>)
  nameWithType: Helper.FormatBinaryDump(ArraySegment<Byte>)
  fullName: EventStore.Common.Utils.Helper.FormatBinaryDump(ArraySegment<System.Byte>)
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/Helper.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: FormatBinaryDump
    path: ../EventStore/src/EventStore.Common/Utils/Helper.cs
    startLine: 44
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static string FormatBinaryDump(ArraySegment<byte> logBulk)
    parameters:
    - id: logBulk
      type: ArraySegment{System.Byte}
    return:
      type: System.String
    content.vb: Public Shared Function FormatBinaryDump(logBulk As ArraySegment(Of Byte)) As String
  overload: EventStore.Common.Utils.Helper.FormatBinaryDump*
  nameWithType.vb: Helper.FormatBinaryDump(ArraySegment(Of Byte))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.Helper.FormatBinaryDump(ArraySegment(Of System.Byte))
  name.vb: FormatBinaryDump(ArraySegment(Of Byte))
references:
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UTF8Encoding
  commentId: '!:UTF8Encoding'
  isExternal: true
  name: UTF8Encoding
  nameWithType: UTF8Encoding
  fullName: UTF8Encoding
- uid: EventStore.Common.Utils.Helper.EatException*
  commentId: Overload:EventStore.Common.Utils.Helper.EatException
  name: EatException
  nameWithType: Helper.EatException
  fullName: EventStore.Common.Utils.Helper.EatException
- uid: Action
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: Action
- uid: Func{{T}}
  commentId: '!:Func{``0}'
  definition: Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: Func<T>
  nameWithType.vb: Func(Of T)
  fullName.vb: Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Common.Utils.Helper.GetDefaultLogsDir*
  commentId: Overload:EventStore.Common.Utils.Helper.GetDefaultLogsDir
  name: GetDefaultLogsDir
  nameWithType: Helper.GetDefaultLogsDir
  fullName: EventStore.Common.Utils.Helper.GetDefaultLogsDir
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Common.Utils.Helper.FormatBinaryDump*
  commentId: Overload:EventStore.Common.Utils.Helper.FormatBinaryDump
  name: FormatBinaryDump
  nameWithType: Helper.FormatBinaryDump
  fullName: EventStore.Common.Utils.Helper.FormatBinaryDump
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: ArraySegment{System.Byte}
  commentId: '!:ArraySegment{System.Byte}'
  definition: ArraySegment`1
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: ArraySegment<System.Byte>
  nameWithType.vb: ArraySegment(Of Byte)
  fullName.vb: ArraySegment(Of System.Byte)
  name.vb: ArraySegment(Of Byte)
  spec.csharp:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ArraySegment`1
  isExternal: true
  name: ArraySegment<>
  nameWithType: ArraySegment<>
  fullName: ArraySegment<>
  nameWithType.vb: ArraySegment(Of )
  fullName.vb: ArraySegment(Of )
  name.vb: ArraySegment(Of )
  spec.csharp:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

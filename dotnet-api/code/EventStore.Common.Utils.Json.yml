### YamlMime:ManagedReference
items:
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  id: Json
  parent: EventStore.Common.Utils
  children:
  - EventStore.Common.Utils.Json.DeserializeObject(Newtonsoft.Json.Linq.JObject,System.Type,Newtonsoft.Json.JsonConverter[])
  - EventStore.Common.Utils.Json.DeserializeObject(Newtonsoft.Json.Linq.JObject,System.Type,Newtonsoft.Json.JsonSerializerSettings)
  - EventStore.Common.Utils.Json.IsValidJson(System.Byte[])
  - EventStore.Common.Utils.Json.JsonSettings
  - EventStore.Common.Utils.Json.ParseJson``1(System.Byte[])
  - EventStore.Common.Utils.Json.ParseJson``1(System.String)
  - EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  - EventStore.Common.Utils.Json.ToJson(System.Object)
  - EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  - EventStore.Common.Utils.Json.ToXmlDocument(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)
  langs:
  - csharp
  - vb
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
  type: Class
  source:
    id: Json
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/Json.cs
    startLine: 12
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static class Json
    content.vb: Public Module Json
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Common.Utils.Json.JsonSettings
  commentId: F:EventStore.Common.Utils.Json.JsonSettings
  id: JsonSettings
  parent: EventStore.Common.Utils.Json
  langs:
  - csharp
  - vb
  name: JsonSettings
  nameWithType: Json.JsonSettings
  fullName: EventStore.Common.Utils.Json.JsonSettings
  type: Field
  source:
    id: JsonSettings
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/Json.cs
    startLine: 13
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly JsonSerializerSettings JsonSettings
    return:
      type: Newtonsoft.Json.JsonSerializerSettings
    content.vb: Public Shared ReadOnly JsonSettings As JsonSerializerSettings
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  id: ToJsonBytes(System.Object)
  isExtensionMethod: true
  parent: EventStore.Common.Utils.Json
  langs:
  - csharp
  - vb
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  type: Method
  source:
    id: ToJsonBytes
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/Json.cs
    startLine: 23
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static byte[] ToJsonBytes(this object source)
    parameters:
    - id: source
      type: System.Object
    return:
      type: System.Byte[]
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToJsonBytes(source As Object) As Byte()
  overload: EventStore.Common.Utils.Json.ToJsonBytes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  id: ToJson(System.Object)
  isExtensionMethod: true
  parent: EventStore.Common.Utils.Json
  langs:
  - csharp
  - vb
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  type: Method
  source:
    id: ToJson
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/Json.cs
    startLine: 28
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static string ToJson(this object source)
    parameters:
    - id: source
      type: System.Object
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToJson(source As Object) As String
  overload: EventStore.Common.Utils.Json.ToJson*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  id: ToCanonicalJson(System.Object)
  isExtensionMethod: true
  parent: EventStore.Common.Utils.Json
  langs:
  - csharp
  - vb
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  type: Method
  source:
    id: ToCanonicalJson
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/Json.cs
    startLine: 33
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static string ToCanonicalJson(this object source)
    parameters:
    - id: source
      type: System.Object
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCanonicalJson(source As Object) As String
  overload: EventStore.Common.Utils.Json.ToCanonicalJson*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Utils.Json.ParseJson``1(System.String)
  commentId: M:EventStore.Common.Utils.Json.ParseJson``1(System.String)
  id: ParseJson``1(System.String)
  isExtensionMethod: true
  parent: EventStore.Common.Utils.Json
  langs:
  - csharp
  - vb
  name: ParseJson<T>(String)
  nameWithType: Json.ParseJson<T>(String)
  fullName: EventStore.Common.Utils.Json.ParseJson<T>(System.String)
  type: Method
  source:
    id: ParseJson
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/Json.cs
    startLine: 38
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static T ParseJson<T>(this string json)
    parameters:
    - id: json
      type: System.String
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ParseJson(Of T)(json As String) As T
  overload: EventStore.Common.Utils.Json.ParseJson*
  nameWithType.vb: Json.ParseJson(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.Json.ParseJson(Of T)(System.String)
  name.vb: ParseJson(Of T)(String)
- uid: EventStore.Common.Utils.Json.ParseJson``1(System.Byte[])
  commentId: M:EventStore.Common.Utils.Json.ParseJson``1(System.Byte[])
  id: ParseJson``1(System.Byte[])
  isExtensionMethod: true
  parent: EventStore.Common.Utils.Json
  langs:
  - csharp
  - vb
  name: ParseJson<T>(Byte[])
  nameWithType: Json.ParseJson<T>(Byte[])
  fullName: EventStore.Common.Utils.Json.ParseJson<T>(System.Byte[])
  type: Method
  source:
    id: ParseJson
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/Json.cs
    startLine: 43
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static T ParseJson<T>(this byte[] json)
    parameters:
    - id: json
      type: System.Byte[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ParseJson(Of T)(json As Byte()) As T
  overload: EventStore.Common.Utils.Json.ParseJson*
  nameWithType.vb: Json.ParseJson(Of T)(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.Json.ParseJson(Of T)(System.Byte())
  name.vb: ParseJson(Of T)(Byte())
- uid: EventStore.Common.Utils.Json.DeserializeObject(Newtonsoft.Json.Linq.JObject,System.Type,Newtonsoft.Json.JsonSerializerSettings)
  commentId: M:EventStore.Common.Utils.Json.DeserializeObject(Newtonsoft.Json.Linq.JObject,System.Type,Newtonsoft.Json.JsonSerializerSettings)
  id: DeserializeObject(Newtonsoft.Json.Linq.JObject,System.Type,Newtonsoft.Json.JsonSerializerSettings)
  parent: EventStore.Common.Utils.Json
  langs:
  - csharp
  - vb
  name: DeserializeObject(JObject, Type, JsonSerializerSettings)
  nameWithType: Json.DeserializeObject(JObject, Type, JsonSerializerSettings)
  fullName: EventStore.Common.Utils.Json.DeserializeObject(Newtonsoft.Json.Linq.JObject, System.Type, Newtonsoft.Json.JsonSerializerSettings)
  type: Method
  source:
    id: DeserializeObject
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/Json.cs
    startLine: 48
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static object DeserializeObject(JObject value, Type type, JsonSerializerSettings settings)
    parameters:
    - id: value
      type: Newtonsoft.Json.Linq.JObject
    - id: type
      type: System.Type
    - id: settings
      type: Newtonsoft.Json.JsonSerializerSettings
    return:
      type: System.Object
    content.vb: Public Shared Function DeserializeObject(value As JObject, type As Type, settings As JsonSerializerSettings) As Object
  overload: EventStore.Common.Utils.Json.DeserializeObject*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Utils.Json.DeserializeObject(Newtonsoft.Json.Linq.JObject,System.Type,Newtonsoft.Json.JsonConverter[])
  commentId: M:EventStore.Common.Utils.Json.DeserializeObject(Newtonsoft.Json.Linq.JObject,System.Type,Newtonsoft.Json.JsonConverter[])
  id: DeserializeObject(Newtonsoft.Json.Linq.JObject,System.Type,Newtonsoft.Json.JsonConverter[])
  parent: EventStore.Common.Utils.Json
  langs:
  - csharp
  - vb
  name: DeserializeObject(JObject, Type, JsonConverter[])
  nameWithType: Json.DeserializeObject(JObject, Type, JsonConverter[])
  fullName: EventStore.Common.Utils.Json.DeserializeObject(Newtonsoft.Json.Linq.JObject, System.Type, Newtonsoft.Json.JsonConverter[])
  type: Method
  source:
    id: DeserializeObject
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/Json.cs
    startLine: 53
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static object DeserializeObject(JObject value, Type type, params JsonConverter[] converters)
    parameters:
    - id: value
      type: Newtonsoft.Json.Linq.JObject
    - id: type
      type: System.Type
    - id: converters
      type: Newtonsoft.Json.JsonConverter[]
    return:
      type: System.Object
    content.vb: Public Shared Function DeserializeObject(value As JObject, type As Type, ParamArray converters As JsonConverter()) As Object
  overload: EventStore.Common.Utils.Json.DeserializeObject*
  nameWithType.vb: Json.DeserializeObject(JObject, Type, JsonConverter())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.Json.DeserializeObject(Newtonsoft.Json.Linq.JObject, System.Type, Newtonsoft.Json.JsonConverter())
  name.vb: DeserializeObject(JObject, Type, JsonConverter())
- uid: EventStore.Common.Utils.Json.ToXmlDocument(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)
  commentId: M:EventStore.Common.Utils.Json.ToXmlDocument(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)
  id: ToXmlDocument(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)
  isExtensionMethod: true
  parent: EventStore.Common.Utils.Json
  langs:
  - csharp
  - vb
  name: ToXmlDocument(JObject, String, Boolean)
  nameWithType: Json.ToXmlDocument(JObject, String, Boolean)
  fullName: EventStore.Common.Utils.Json.ToXmlDocument(Newtonsoft.Json.Linq.JObject, System.String, System.Boolean)
  type: Method
  source:
    id: ToXmlDocument
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/Json.cs
    startLine: 60
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static XmlDocument ToXmlDocument(this JObject value, string deserializeRootElementName, bool writeArrayAttribute)
    parameters:
    - id: value
      type: Newtonsoft.Json.Linq.JObject
    - id: deserializeRootElementName
      type: System.String
    - id: writeArrayAttribute
      type: System.Boolean
    return:
      type: System.Xml.XmlDocument
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToXmlDocument(value As JObject, deserializeRootElementName As String, writeArrayAttribute As Boolean) As XmlDocument
  overload: EventStore.Common.Utils.Json.ToXmlDocument*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Common.Utils.Json.IsValidJson(System.Byte[])
  commentId: M:EventStore.Common.Utils.Json.IsValidJson(System.Byte[])
  id: IsValidJson(System.Byte[])
  isExtensionMethod: true
  parent: EventStore.Common.Utils.Json
  langs:
  - csharp
  - vb
  name: IsValidJson(Byte[])
  nameWithType: Json.IsValidJson(Byte[])
  fullName: EventStore.Common.Utils.Json.IsValidJson(System.Byte[])
  type: Method
  source:
    id: IsValidJson
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Common/Utils/Json.cs
    startLine: 70
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static bool IsValidJson(this byte[] value)
    parameters:
    - id: value
      type: System.Byte[]
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsValidJson(value As Byte()) As Boolean
  overload: EventStore.Common.Utils.Json.IsValidJson*
  nameWithType.vb: Json.IsValidJson(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.Json.IsValidJson(System.Byte())
  name.vb: IsValidJson(Byte())
references:
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Newtonsoft.Json.JsonSerializerSettings
  commentId: T:Newtonsoft.Json.JsonSerializerSettings
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializerSettings
  nameWithType: JsonSerializerSettings
  fullName: Newtonsoft.Json.JsonSerializerSettings
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: EventStore.Common.Utils.Json.ToJsonBytes*
  commentId: Overload:EventStore.Common.Utils.Json.ToJsonBytes
  name: ToJsonBytes
  nameWithType: Json.ToJsonBytes
  fullName: EventStore.Common.Utils.Json.ToJsonBytes
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Common.Utils.Json.ToJson*
  commentId: Overload:EventStore.Common.Utils.Json.ToJson
  name: ToJson
  nameWithType: Json.ToJson
  fullName: EventStore.Common.Utils.Json.ToJson
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Common.Utils.Json.ToCanonicalJson*
  commentId: Overload:EventStore.Common.Utils.Json.ToCanonicalJson
  name: ToCanonicalJson
  nameWithType: Json.ToCanonicalJson
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson
- uid: EventStore.Common.Utils.Json.ParseJson*
  commentId: Overload:EventStore.Common.Utils.Json.ParseJson
  name: ParseJson
  nameWithType: Json.ParseJson
  fullName: EventStore.Common.Utils.Json.ParseJson
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Common.Utils.Json.DeserializeObject*
  commentId: Overload:EventStore.Common.Utils.Json.DeserializeObject
  name: DeserializeObject
  nameWithType: Json.DeserializeObject
  fullName: EventStore.Common.Utils.Json.DeserializeObject
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: Newtonsoft.Json.JsonConverter[]
  isExternal: true
  name: JsonConverter[]
  nameWithType: JsonConverter[]
  fullName: Newtonsoft.Json.JsonConverter[]
  nameWithType.vb: JsonConverter()
  fullName.vb: Newtonsoft.Json.JsonConverter()
  name.vb: JsonConverter()
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter
    name: JsonConverter
    nameWithType: JsonConverter
    fullName: Newtonsoft.Json.JsonConverter
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter
    name: JsonConverter
    nameWithType: JsonConverter
    fullName: Newtonsoft.Json.JsonConverter
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Common.Utils.Json.ToXmlDocument*
  commentId: Overload:EventStore.Common.Utils.Json.ToXmlDocument
  name: ToXmlDocument
  nameWithType: Json.ToXmlDocument
  fullName: EventStore.Common.Utils.Json.ToXmlDocument
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  parent: System.Xml
  isExternal: true
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: EventStore.Common.Utils.Json.IsValidJson*
  commentId: Overload:EventStore.Common.Utils.Json.IsValidJson
  name: IsValidJson
  nameWithType: Json.IsValidJson
  fullName: EventStore.Common.Utils.Json.IsValidJson

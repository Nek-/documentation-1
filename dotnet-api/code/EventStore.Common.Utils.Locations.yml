### YamlMime:ManagedReference
items:
- uid: EventStore.Common.Utils.Locations
  commentId: T:EventStore.Common.Utils.Locations
  id: Locations
  parent: EventStore.Common.Utils
  children:
  - EventStore.Common.Utils.Locations.ApplicationDirectory
  - EventStore.Common.Utils.Locations.DefaultConfigurationDirectory
  - EventStore.Common.Utils.Locations.DefaultContentDirectory
  - EventStore.Common.Utils.Locations.DefaultDataDirectory
  - EventStore.Common.Utils.Locations.DefaultLogDirectory
  - EventStore.Common.Utils.Locations.DefaultTestClientLogDirectory
  - EventStore.Common.Utils.Locations.FallbackDefaultDataDirectory
  - EventStore.Common.Utils.Locations.GetPrecededLocation(System.String[])
  - EventStore.Common.Utils.Locations.PluginsDirectory
  - EventStore.Common.Utils.Locations.PreludeDirectory
  - EventStore.Common.Utils.Locations.PreludeResourcesPath
  - EventStore.Common.Utils.Locations.ProjectionsDirectory
  - EventStore.Common.Utils.Locations.WebContentDirectory
  langs:
  - csharp
  - vb
  name: Locations
  nameWithType: Locations
  fullName: EventStore.Common.Utils.Locations
  type: Class
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Locations
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 5
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: 'public class Locations : object'
    content.vb: >-
      Public Class Locations
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Common.Utils.Locations.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Common.Utils.Locations.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Common.Utils.Locations.ApplicationDirectory
  commentId: F:EventStore.Common.Utils.Locations.ApplicationDirectory
  id: ApplicationDirectory
  parent: EventStore.Common.Utils.Locations
  langs:
  - csharp
  - vb
  name: ApplicationDirectory
  nameWithType: Locations.ApplicationDirectory
  fullName: EventStore.Common.Utils.Locations.ApplicationDirectory
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ApplicationDirectory
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 6
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly string ApplicationDirectory
    return:
      type: System.String
    content.vb: Public Shared ReadOnly ApplicationDirectory As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Locations.WebContentDirectory
  commentId: F:EventStore.Common.Utils.Locations.WebContentDirectory
  id: WebContentDirectory
  parent: EventStore.Common.Utils.Locations
  langs:
  - csharp
  - vb
  name: WebContentDirectory
  nameWithType: Locations.WebContentDirectory
  fullName: EventStore.Common.Utils.Locations.WebContentDirectory
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: WebContentDirectory
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 7
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly string WebContentDirectory
    return:
      type: System.String
    content.vb: Public Shared ReadOnly WebContentDirectory As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Locations.ProjectionsDirectory
  commentId: F:EventStore.Common.Utils.Locations.ProjectionsDirectory
  id: ProjectionsDirectory
  parent: EventStore.Common.Utils.Locations
  langs:
  - csharp
  - vb
  name: ProjectionsDirectory
  nameWithType: Locations.ProjectionsDirectory
  fullName: EventStore.Common.Utils.Locations.ProjectionsDirectory
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ProjectionsDirectory
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 8
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly string ProjectionsDirectory
    return:
      type: System.String
    content.vb: Public Shared ReadOnly ProjectionsDirectory As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Locations.PreludeDirectory
  commentId: F:EventStore.Common.Utils.Locations.PreludeDirectory
  id: PreludeDirectory
  parent: EventStore.Common.Utils.Locations
  langs:
  - csharp
  - vb
  name: PreludeDirectory
  nameWithType: Locations.PreludeDirectory
  fullName: EventStore.Common.Utils.Locations.PreludeDirectory
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: PreludeDirectory
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 9
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly string PreludeDirectory
    return:
      type: System.String
    content.vb: Public Shared ReadOnly PreludeDirectory As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Locations.PreludeResourcesPath
  commentId: F:EventStore.Common.Utils.Locations.PreludeResourcesPath
  id: PreludeResourcesPath
  parent: EventStore.Common.Utils.Locations
  langs:
  - csharp
  - vb
  name: PreludeResourcesPath
  nameWithType: Locations.PreludeResourcesPath
  fullName: EventStore.Common.Utils.Locations.PreludeResourcesPath
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: PreludeResourcesPath
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 10
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly string PreludeResourcesPath
    return:
      type: System.String
    content.vb: Public Shared ReadOnly PreludeResourcesPath As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Locations.PluginsDirectory
  commentId: F:EventStore.Common.Utils.Locations.PluginsDirectory
  id: PluginsDirectory
  parent: EventStore.Common.Utils.Locations
  langs:
  - csharp
  - vb
  name: PluginsDirectory
  nameWithType: Locations.PluginsDirectory
  fullName: EventStore.Common.Utils.Locations.PluginsDirectory
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: PluginsDirectory
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 11
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly string PluginsDirectory
    return:
      type: System.String
    content.vb: Public Shared ReadOnly PluginsDirectory As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Locations.DefaultContentDirectory
  commentId: F:EventStore.Common.Utils.Locations.DefaultContentDirectory
  id: DefaultContentDirectory
  parent: EventStore.Common.Utils.Locations
  langs:
  - csharp
  - vb
  name: DefaultContentDirectory
  nameWithType: Locations.DefaultContentDirectory
  fullName: EventStore.Common.Utils.Locations.DefaultContentDirectory
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: DefaultContentDirectory
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 12
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly string DefaultContentDirectory
    return:
      type: System.String
    content.vb: Public Shared ReadOnly DefaultContentDirectory As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Locations.DefaultConfigurationDirectory
  commentId: F:EventStore.Common.Utils.Locations.DefaultConfigurationDirectory
  id: DefaultConfigurationDirectory
  parent: EventStore.Common.Utils.Locations
  langs:
  - csharp
  - vb
  name: DefaultConfigurationDirectory
  nameWithType: Locations.DefaultConfigurationDirectory
  fullName: EventStore.Common.Utils.Locations.DefaultConfigurationDirectory
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: DefaultConfigurationDirectory
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 13
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly string DefaultConfigurationDirectory
    return:
      type: System.String
    content.vb: Public Shared ReadOnly DefaultConfigurationDirectory As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Locations.DefaultDataDirectory
  commentId: F:EventStore.Common.Utils.Locations.DefaultDataDirectory
  id: DefaultDataDirectory
  parent: EventStore.Common.Utils.Locations
  langs:
  - csharp
  - vb
  name: DefaultDataDirectory
  nameWithType: Locations.DefaultDataDirectory
  fullName: EventStore.Common.Utils.Locations.DefaultDataDirectory
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: DefaultDataDirectory
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 14
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly string DefaultDataDirectory
    return:
      type: System.String
    content.vb: Public Shared ReadOnly DefaultDataDirectory As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Locations.DefaultLogDirectory
  commentId: F:EventStore.Common.Utils.Locations.DefaultLogDirectory
  id: DefaultLogDirectory
  parent: EventStore.Common.Utils.Locations
  langs:
  - csharp
  - vb
  name: DefaultLogDirectory
  nameWithType: Locations.DefaultLogDirectory
  fullName: EventStore.Common.Utils.Locations.DefaultLogDirectory
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: DefaultLogDirectory
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 15
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly string DefaultLogDirectory
    return:
      type: System.String
    content.vb: Public Shared ReadOnly DefaultLogDirectory As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Locations.DefaultTestClientLogDirectory
  commentId: F:EventStore.Common.Utils.Locations.DefaultTestClientLogDirectory
  id: DefaultTestClientLogDirectory
  parent: EventStore.Common.Utils.Locations
  langs:
  - csharp
  - vb
  name: DefaultTestClientLogDirectory
  nameWithType: Locations.DefaultTestClientLogDirectory
  fullName: EventStore.Common.Utils.Locations.DefaultTestClientLogDirectory
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: DefaultTestClientLogDirectory
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 16
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly string DefaultTestClientLogDirectory
    return:
      type: System.String
    content.vb: Public Shared ReadOnly DefaultTestClientLogDirectory As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Locations.FallbackDefaultDataDirectory
  commentId: F:EventStore.Common.Utils.Locations.FallbackDefaultDataDirectory
  id: FallbackDefaultDataDirectory
  parent: EventStore.Common.Utils.Locations
  langs:
  - csharp
  - vb
  name: FallbackDefaultDataDirectory
  nameWithType: Locations.FallbackDefaultDataDirectory
  fullName: EventStore.Common.Utils.Locations.FallbackDefaultDataDirectory
  type: Field
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: FallbackDefaultDataDirectory
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 17
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  syntax:
    content: public static readonly string FallbackDefaultDataDirectory
    return:
      type: System.String
    content.vb: Public Shared ReadOnly FallbackDefaultDataDirectory As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Common.Utils.Locations.GetPrecededLocation(System.String[])
  commentId: M:EventStore.Common.Utils.Locations.GetPrecededLocation(System.String[])
  id: GetPrecededLocation(System.String[])
  parent: EventStore.Common.Utils.Locations
  langs:
  - csharp
  - vb
  name: GetPrecededLocation(String[])
  nameWithType: Locations.GetPrecededLocation(String[])
  fullName: EventStore.Common.Utils.Locations.GetPrecededLocation(System.String[])
  type: Method
  source:
    remote:
      path: src/EventStore.Common/Utils/Locations.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetPrecededLocation
    path: ../EventStore/src/EventStore.Common/Utils/Locations.cs
    startLine: 76
  assemblies:
  - EventStore.Common
  namespace: EventStore.Common.Utils
  summary: "\nReturns the preceded location by checking the existence of the directory.\nThe local directory should be the first priority as the first element followed by\nthe global default location as last element.\n"
  example: []
  syntax:
    content: public static string GetPrecededLocation(params string[] locations)
    parameters:
    - id: locations
      type: System.String[]
      description: the locations ordered by prioity starting with the preceded location
    return:
      type: System.String
      description: the preceded location
    content.vb: Public Shared Function GetPrecededLocation(ParamArray locations As String()) As String
  overload: EventStore.Common.Utils.Locations.GetPrecededLocation*
  nameWithType.vb: Locations.GetPrecededLocation(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Common.Utils.Locations.GetPrecededLocation(System.String())
  name.vb: GetPrecededLocation(String())
references:
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Locations.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<Locations>()
  nameWithType: ProtobufExtensions.Serialize<Locations>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Common.Utils.Locations>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of Locations)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Common.Utils.Locations)()
  name.vb: Serialize(Of Locations)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<Locations>
    nameWithType: ProtobufExtensions.Serialize<Locations>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Common.Utils.Locations>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of Locations)
    nameWithType: ProtobufExtensions.Serialize(Of Locations)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Common.Utils.Locations)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Locations.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<Locations>()
  nameWithType: ProtobufExtensions.SerializeToArray<Locations>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Common.Utils.Locations>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of Locations)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Common.Utils.Locations)()
  name.vb: SerializeToArray(Of Locations)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<Locations>
    nameWithType: ProtobufExtensions.SerializeToArray<Locations>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Common.Utils.Locations>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of Locations)
    nameWithType: ProtobufExtensions.SerializeToArray(Of Locations)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Common.Utils.Locations)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Common.Utils.Locations.GetPrecededLocation*
  commentId: Overload:EventStore.Common.Utils.Locations.GetPrecededLocation
  name: GetPrecededLocation
  nameWithType: Locations.GetPrecededLocation
  fullName: EventStore.Common.Utils.Locations.GetPrecededLocation
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()

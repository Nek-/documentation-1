### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Bus.MultiQueuedHandler
  commentId: T:EventStore.Core.Bus.MultiQueuedHandler
  id: MultiQueuedHandler
  parent: EventStore.Core.Bus
  children:
  - EventStore.Core.Bus.MultiQueuedHandler.#ctor(EventStore.Core.Bus.IQueuedHandler[],System.Func{EventStore.Core.Messaging.Message,System.Int32})
  - EventStore.Core.Bus.MultiQueuedHandler.#ctor(EventStore.Core.Bus.QueuedHandler[])
  - EventStore.Core.Bus.MultiQueuedHandler.#ctor(System.Int32,System.Func{System.Int32,EventStore.Core.Bus.IQueuedHandler},System.Func{EventStore.Core.Messaging.Message,System.Int32})
  - EventStore.Core.Bus.MultiQueuedHandler.Handle(EventStore.Core.Messaging.Message)
  - EventStore.Core.Bus.MultiQueuedHandler.Publish(EventStore.Core.Messaging.Message)
  - EventStore.Core.Bus.MultiQueuedHandler.PublishToAll(EventStore.Core.Messaging.Message)
  - EventStore.Core.Bus.MultiQueuedHandler.Queues
  - EventStore.Core.Bus.MultiQueuedHandler.Start
  - EventStore.Core.Bus.MultiQueuedHandler.Stop
  langs:
  - csharp
  - vb
  name: MultiQueuedHandler
  nameWithType: MultiQueuedHandler
  fullName: EventStore.Core.Bus.MultiQueuedHandler
  type: Class
  source:
    id: MultiQueuedHandler
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Bus/MultiQueuedHandler.cs
    startLine: 9
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: 'public class MultiQueuedHandler : IHandle<Message>, IPublisher, IThreadSafePublisher'
    content.vb: >-
      Public Class MultiQueuedHandler
          Implements IHandle(Of Message), IPublisher, IThreadSafePublisher
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}
  - EventStore.Core.Bus.IPublisher
  - EventStore.Core.Bus.IThreadSafePublisher
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}.EventStore.Core.Bus.HandleExtensions.WidenFrom``2
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}.EventStore.Core.Bus.HandleExtensions.NarrowTo``2
  - EventStore.Core.Bus.MultiQueuedHandler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Bus.MultiQueuedHandler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Bus.MultiQueuedHandler.Queues
  commentId: F:EventStore.Core.Bus.MultiQueuedHandler.Queues
  id: Queues
  parent: EventStore.Core.Bus.MultiQueuedHandler
  langs:
  - csharp
  - vb
  name: Queues
  nameWithType: MultiQueuedHandler.Queues
  fullName: EventStore.Core.Bus.MultiQueuedHandler.Queues
  type: Field
  source:
    id: Queues
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Bus/MultiQueuedHandler.cs
    startLine: 10
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: public readonly IQueuedHandler[] Queues
    return:
      type: EventStore.Core.Bus.IQueuedHandler[]
    content.vb: Public ReadOnly Queues As IQueuedHandler()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Bus.MultiQueuedHandler.#ctor(System.Int32,System.Func{System.Int32,EventStore.Core.Bus.IQueuedHandler},System.Func{EventStore.Core.Messaging.Message,System.Int32})
  commentId: M:EventStore.Core.Bus.MultiQueuedHandler.#ctor(System.Int32,System.Func{System.Int32,EventStore.Core.Bus.IQueuedHandler},System.Func{EventStore.Core.Messaging.Message,System.Int32})
  id: '#ctor(System.Int32,System.Func{System.Int32,EventStore.Core.Bus.IQueuedHandler},System.Func{EventStore.Core.Messaging.Message,System.Int32})'
  parent: EventStore.Core.Bus.MultiQueuedHandler
  langs:
  - csharp
  - vb
  name: MultiQueuedHandler(Int32, Func<Int32, IQueuedHandler>, Func<Message, Int32>)
  nameWithType: MultiQueuedHandler.MultiQueuedHandler(Int32, Func<Int32, IQueuedHandler>, Func<Message, Int32>)
  fullName: EventStore.Core.Bus.MultiQueuedHandler.MultiQueuedHandler(System.Int32, System.Func<System.Int32, EventStore.Core.Bus.IQueuedHandler>, System.Func<EventStore.Core.Messaging.Message, System.Int32>)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Bus/MultiQueuedHandler.cs
    startLine: 15
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: public MultiQueuedHandler(int queueCount, Func<int, IQueuedHandler> queueFactory, Func<Message, int> queueHash = null)
    parameters:
    - id: queueCount
      type: System.Int32
    - id: queueFactory
      type: System.Func{System.Int32,EventStore.Core.Bus.IQueuedHandler}
    - id: queueHash
      type: System.Func{EventStore.Core.Messaging.Message,System.Int32}
    content.vb: Public Sub New(queueCount As Integer, queueFactory As Func(Of Integer, IQueuedHandler), queueHash As Func(Of Message, Integer) = Nothing)
  overload: EventStore.Core.Bus.MultiQueuedHandler.#ctor*
  nameWithType.vb: MultiQueuedHandler.MultiQueuedHandler(Int32, Func(Of Int32, IQueuedHandler), Func(Of Message, Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Bus.MultiQueuedHandler.MultiQueuedHandler(System.Int32, System.Func(Of System.Int32, EventStore.Core.Bus.IQueuedHandler), System.Func(Of EventStore.Core.Messaging.Message, System.Int32))
  name.vb: MultiQueuedHandler(Int32, Func(Of Int32, IQueuedHandler), Func(Of Message, Int32))
- uid: EventStore.Core.Bus.MultiQueuedHandler.#ctor(EventStore.Core.Bus.QueuedHandler[])
  commentId: M:EventStore.Core.Bus.MultiQueuedHandler.#ctor(EventStore.Core.Bus.QueuedHandler[])
  id: '#ctor(EventStore.Core.Bus.QueuedHandler[])'
  parent: EventStore.Core.Bus.MultiQueuedHandler
  langs:
  - csharp
  - vb
  name: MultiQueuedHandler(QueuedHandler[])
  nameWithType: MultiQueuedHandler.MultiQueuedHandler(QueuedHandler[])
  fullName: EventStore.Core.Bus.MultiQueuedHandler.MultiQueuedHandler(EventStore.Core.Bus.QueuedHandler[])
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Bus/MultiQueuedHandler.cs
    startLine: 30
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: public MultiQueuedHandler(params QueuedHandler[] queues)
    parameters:
    - id: queues
      type: EventStore.Core.Bus.QueuedHandler[]
    content.vb: Public Sub New(ParamArray queues As QueuedHandler())
  overload: EventStore.Core.Bus.MultiQueuedHandler.#ctor*
  nameWithType.vb: MultiQueuedHandler.MultiQueuedHandler(QueuedHandler())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Bus.MultiQueuedHandler.MultiQueuedHandler(EventStore.Core.Bus.QueuedHandler())
  name.vb: MultiQueuedHandler(QueuedHandler())
- uid: EventStore.Core.Bus.MultiQueuedHandler.#ctor(EventStore.Core.Bus.IQueuedHandler[],System.Func{EventStore.Core.Messaging.Message,System.Int32})
  commentId: M:EventStore.Core.Bus.MultiQueuedHandler.#ctor(EventStore.Core.Bus.IQueuedHandler[],System.Func{EventStore.Core.Messaging.Message,System.Int32})
  id: '#ctor(EventStore.Core.Bus.IQueuedHandler[],System.Func{EventStore.Core.Messaging.Message,System.Int32})'
  parent: EventStore.Core.Bus.MultiQueuedHandler
  langs:
  - csharp
  - vb
  name: MultiQueuedHandler(IQueuedHandler[], Func<Message, Int32>)
  nameWithType: MultiQueuedHandler.MultiQueuedHandler(IQueuedHandler[], Func<Message, Int32>)
  fullName: EventStore.Core.Bus.MultiQueuedHandler.MultiQueuedHandler(EventStore.Core.Bus.IQueuedHandler[], System.Func<EventStore.Core.Messaging.Message, System.Int32>)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Bus/MultiQueuedHandler.cs
    startLine: 34
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: public MultiQueuedHandler(IQueuedHandler[] queues, Func<Message, int> queueHash)
    parameters:
    - id: queues
      type: EventStore.Core.Bus.IQueuedHandler[]
    - id: queueHash
      type: System.Func{EventStore.Core.Messaging.Message,System.Int32}
    content.vb: Public Sub New(queues As IQueuedHandler(), queueHash As Func(Of Message, Integer))
  overload: EventStore.Core.Bus.MultiQueuedHandler.#ctor*
  nameWithType.vb: MultiQueuedHandler.MultiQueuedHandler(IQueuedHandler(), Func(Of Message, Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Bus.MultiQueuedHandler.MultiQueuedHandler(EventStore.Core.Bus.IQueuedHandler(), System.Func(Of EventStore.Core.Messaging.Message, System.Int32))
  name.vb: MultiQueuedHandler(IQueuedHandler(), Func(Of Message, Int32))
- uid: EventStore.Core.Bus.MultiQueuedHandler.Start
  commentId: M:EventStore.Core.Bus.MultiQueuedHandler.Start
  id: Start
  parent: EventStore.Core.Bus.MultiQueuedHandler
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: MultiQueuedHandler.Start()
  fullName: EventStore.Core.Bus.MultiQueuedHandler.Start()
  type: Method
  source:
    id: Start
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Bus/MultiQueuedHandler.cs
    startLine: 46
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: public IEnumerable<Task> Start()
    return:
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
    content.vb: Public Function Start As IEnumerable(Of Task)
  overload: EventStore.Core.Bus.MultiQueuedHandler.Start*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Bus.MultiQueuedHandler.Stop
  commentId: M:EventStore.Core.Bus.MultiQueuedHandler.Stop
  id: Stop
  parent: EventStore.Core.Bus.MultiQueuedHandler
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: MultiQueuedHandler.Stop()
  fullName: EventStore.Core.Bus.MultiQueuedHandler.Stop()
  type: Method
  source:
    id: Stop
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Bus/MultiQueuedHandler.cs
    startLine: 55
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  overload: EventStore.Core.Bus.MultiQueuedHandler.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Bus.MultiQueuedHandler.Handle(EventStore.Core.Messaging.Message)
  commentId: M:EventStore.Core.Bus.MultiQueuedHandler.Handle(EventStore.Core.Messaging.Message)
  id: Handle(EventStore.Core.Messaging.Message)
  parent: EventStore.Core.Bus.MultiQueuedHandler
  langs:
  - csharp
  - vb
  name: Handle(Message)
  nameWithType: MultiQueuedHandler.Handle(Message)
  fullName: EventStore.Core.Bus.MultiQueuedHandler.Handle(EventStore.Core.Messaging.Message)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Bus/MultiQueuedHandler.cs
    startLine: 65
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: public void Handle(Message message)
    parameters:
    - id: message
      type: EventStore.Core.Messaging.Message
    content.vb: Public Sub Handle(message As Message)
  overload: EventStore.Core.Bus.MultiQueuedHandler.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}.Handle(EventStore.Core.Messaging.Message)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Bus.MultiQueuedHandler.Publish(EventStore.Core.Messaging.Message)
  commentId: M:EventStore.Core.Bus.MultiQueuedHandler.Publish(EventStore.Core.Messaging.Message)
  id: Publish(EventStore.Core.Messaging.Message)
  parent: EventStore.Core.Bus.MultiQueuedHandler
  langs:
  - csharp
  - vb
  name: Publish(Message)
  nameWithType: MultiQueuedHandler.Publish(Message)
  fullName: EventStore.Core.Bus.MultiQueuedHandler.Publish(EventStore.Core.Messaging.Message)
  type: Method
  source:
    id: Publish
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Bus/MultiQueuedHandler.cs
    startLine: 69
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: public void Publish(Message message)
    parameters:
    - id: message
      type: EventStore.Core.Messaging.Message
    content.vb: Public Sub Publish(message As Message)
  overload: EventStore.Core.Bus.MultiQueuedHandler.Publish*
  implements:
  - EventStore.Core.Bus.IPublisher.Publish(EventStore.Core.Messaging.Message)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Bus.MultiQueuedHandler.PublishToAll(EventStore.Core.Messaging.Message)
  commentId: M:EventStore.Core.Bus.MultiQueuedHandler.PublishToAll(EventStore.Core.Messaging.Message)
  id: PublishToAll(EventStore.Core.Messaging.Message)
  parent: EventStore.Core.Bus.MultiQueuedHandler
  langs:
  - csharp
  - vb
  name: PublishToAll(Message)
  nameWithType: MultiQueuedHandler.PublishToAll(Message)
  fullName: EventStore.Core.Bus.MultiQueuedHandler.PublishToAll(EventStore.Core.Messaging.Message)
  type: Method
  source:
    id: PublishToAll
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Bus/MultiQueuedHandler.cs
    startLine: 76
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: public void PublishToAll(Message message)
    parameters:
    - id: message
      type: EventStore.Core.Messaging.Message
    content.vb: Public Sub PublishToAll(message As Message)
  overload: EventStore.Core.Bus.MultiQueuedHandler.PublishToAll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<Message>
  nameWithType: IHandle<Message>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>
  nameWithType.vb: IHandle(Of Message)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messaging.Message)
  name.vb: IHandle(Of Message)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.Bus.IThreadSafePublisher
  commentId: T:EventStore.Core.Bus.IThreadSafePublisher
  parent: EventStore.Core.Bus
  name: IThreadSafePublisher
  nameWithType: IThreadSafePublisher
  fullName: EventStore.Core.Bus.IThreadSafePublisher
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}.EventStore.Core.Bus.HandleExtensions.WidenFrom``2
  commentId: M:EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
  parent: EventStore.Core.Bus.HandleExtensions
  definition: EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
  name: WidenFrom<TInput, Message>()
  nameWithType: HandleExtensions.WidenFrom<TInput, Message>()
  fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom<TInput, EventStore.Core.Messaging.Message>()
  nameWithType.vb: HandleExtensions.WidenFrom(Of TInput, Message)()
  fullName.vb: EventStore.Core.Bus.HandleExtensions.WidenFrom(Of TInput, EventStore.Core.Messaging.Message)()
  name.vb: WidenFrom(Of TInput, Message)()
  spec.csharp:
  - uid: EventStore.Core.Bus.HandleExtensions.WidenFrom``2
    name: WidenFrom<TInput, Message>
    nameWithType: HandleExtensions.WidenFrom<TInput, Message>
    fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom<TInput, EventStore.Core.Messaging.Message>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.HandleExtensions.WidenFrom``2
    name: WidenFrom(Of TInput, Message)
    nameWithType: HandleExtensions.WidenFrom(Of TInput, Message)
    fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom(Of TInput, EventStore.Core.Messaging.Message)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}.EventStore.Core.Bus.HandleExtensions.NarrowTo``2
  commentId: M:EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
  parent: EventStore.Core.Bus.HandleExtensions
  definition: EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
  name: NarrowTo<TInput, Message>()
  nameWithType: HandleExtensions.NarrowTo<TInput, Message>()
  fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo<TInput, EventStore.Core.Messaging.Message>()
  nameWithType.vb: HandleExtensions.NarrowTo(Of TInput, Message)()
  fullName.vb: EventStore.Core.Bus.HandleExtensions.NarrowTo(Of TInput, EventStore.Core.Messaging.Message)()
  name.vb: NarrowTo(Of TInput, Message)()
  spec.csharp:
  - uid: EventStore.Core.Bus.HandleExtensions.NarrowTo``2
    name: NarrowTo<TInput, Message>
    nameWithType: HandleExtensions.NarrowTo<TInput, Message>
    fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo<TInput, EventStore.Core.Messaging.Message>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.HandleExtensions.NarrowTo``2
    name: NarrowTo(Of TInput, Message)
    nameWithType: HandleExtensions.NarrowTo(Of TInput, Message)
    fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo(Of TInput, EventStore.Core.Messaging.Message)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.MultiQueuedHandler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<MultiQueuedHandler>()
  nameWithType: ProtobufExtensions.Serialize<MultiQueuedHandler>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Bus.MultiQueuedHandler>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of MultiQueuedHandler)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Bus.MultiQueuedHandler)()
  name.vb: Serialize(Of MultiQueuedHandler)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<MultiQueuedHandler>
    nameWithType: ProtobufExtensions.Serialize<MultiQueuedHandler>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Bus.MultiQueuedHandler>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of MultiQueuedHandler)
    nameWithType: ProtobufExtensions.Serialize(Of MultiQueuedHandler)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Bus.MultiQueuedHandler)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.MultiQueuedHandler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<MultiQueuedHandler>()
  nameWithType: ProtobufExtensions.SerializeToArray<MultiQueuedHandler>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Bus.MultiQueuedHandler>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of MultiQueuedHandler)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Bus.MultiQueuedHandler)()
  name.vb: SerializeToArray(Of MultiQueuedHandler)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<MultiQueuedHandler>
    nameWithType: ProtobufExtensions.SerializeToArray<MultiQueuedHandler>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Bus.MultiQueuedHandler>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of MultiQueuedHandler)
    nameWithType: ProtobufExtensions.SerializeToArray(Of MultiQueuedHandler)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Bus.MultiQueuedHandler)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
  commentId: M:EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
  name: WidenFrom<TInput, TOutput>(IHandle<TOutput>)
  nameWithType: HandleExtensions.WidenFrom<TInput, TOutput>(IHandle<TOutput>)
  fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom<TInput, TOutput>(EventStore.Core.Bus.IHandle<TOutput>)
  nameWithType.vb: HandleExtensions.WidenFrom(Of TInput, TOutput)(IHandle(Of TOutput))
  fullName.vb: EventStore.Core.Bus.HandleExtensions.WidenFrom(Of TInput, TOutput)(EventStore.Core.Bus.IHandle(Of TOutput))
  name.vb: WidenFrom(Of TInput, TOutput)(IHandle(Of TOutput))
  spec.csharp:
  - uid: EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
    name: WidenFrom<TInput, TOutput>
    nameWithType: HandleExtensions.WidenFrom<TInput, TOutput>
    fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom<TInput, TOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
    name: WidenFrom(Of TInput, TOutput)
    nameWithType: HandleExtensions.WidenFrom(Of TInput, TOutput)
    fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom(Of TInput, TOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.HandleExtensions
  commentId: T:EventStore.Core.Bus.HandleExtensions
  parent: EventStore.Core.Bus
  name: HandleExtensions
  nameWithType: HandleExtensions
  fullName: EventStore.Core.Bus.HandleExtensions
- uid: EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
  commentId: M:EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
  name: NarrowTo<TInput, TOutput>(IHandle<TOutput>)
  nameWithType: HandleExtensions.NarrowTo<TInput, TOutput>(IHandle<TOutput>)
  fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo<TInput, TOutput>(EventStore.Core.Bus.IHandle<TOutput>)
  nameWithType.vb: HandleExtensions.NarrowTo(Of TInput, TOutput)(IHandle(Of TOutput))
  fullName.vb: EventStore.Core.Bus.HandleExtensions.NarrowTo(Of TInput, TOutput)(EventStore.Core.Bus.IHandle(Of TOutput))
  name.vb: NarrowTo(Of TInput, TOutput)(IHandle(Of TOutput))
  spec.csharp:
  - uid: EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
    name: NarrowTo<TInput, TOutput>
    nameWithType: HandleExtensions.NarrowTo<TInput, TOutput>
    fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo<TInput, TOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
    name: NarrowTo(Of TInput, TOutput)
    nameWithType: HandleExtensions.NarrowTo(Of TInput, TOutput)
    fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo(Of TInput, TOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Bus.IQueuedHandler[]
  isExternal: true
  name: IQueuedHandler[]
  nameWithType: IQueuedHandler[]
  fullName: EventStore.Core.Bus.IQueuedHandler[]
  nameWithType.vb: IQueuedHandler()
  fullName.vb: EventStore.Core.Bus.IQueuedHandler()
  name.vb: IQueuedHandler()
  spec.csharp:
  - uid: EventStore.Core.Bus.IQueuedHandler
    name: IQueuedHandler
    nameWithType: IQueuedHandler
    fullName: EventStore.Core.Bus.IQueuedHandler
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Bus.IQueuedHandler
    name: IQueuedHandler
    nameWithType: IQueuedHandler
    fullName: EventStore.Core.Bus.IQueuedHandler
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Bus.MultiQueuedHandler.#ctor*
  commentId: Overload:EventStore.Core.Bus.MultiQueuedHandler.#ctor
  name: MultiQueuedHandler
  nameWithType: MultiQueuedHandler.MultiQueuedHandler
  fullName: EventStore.Core.Bus.MultiQueuedHandler.MultiQueuedHandler
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Func{System.Int32,EventStore.Core.Bus.IQueuedHandler}
  commentId: T:System.Func{System.Int32,EventStore.Core.Bus.IQueuedHandler}
  parent: System
  definition: System.Func`2
  name: Func<Int32, IQueuedHandler>
  nameWithType: Func<Int32, IQueuedHandler>
  fullName: System.Func<System.Int32, EventStore.Core.Bus.IQueuedHandler>
  nameWithType.vb: Func(Of Int32, IQueuedHandler)
  fullName.vb: System.Func(Of System.Int32, EventStore.Core.Bus.IQueuedHandler)
  name.vb: Func(Of Int32, IQueuedHandler)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Bus.IQueuedHandler
    name: IQueuedHandler
    nameWithType: IQueuedHandler
    fullName: EventStore.Core.Bus.IQueuedHandler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Bus.IQueuedHandler
    name: IQueuedHandler
    nameWithType: IQueuedHandler
    fullName: EventStore.Core.Bus.IQueuedHandler
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{EventStore.Core.Messaging.Message,System.Int32}
  commentId: T:System.Func{EventStore.Core.Messaging.Message,System.Int32}
  parent: System
  definition: System.Func`2
  name: Func<Message, Int32>
  nameWithType: Func<Message, Int32>
  fullName: System.Func<EventStore.Core.Messaging.Message, System.Int32>
  nameWithType.vb: Func(Of Message, Int32)
  fullName.vb: System.Func(Of EventStore.Core.Messaging.Message, System.Int32)
  name.vb: Func(Of Message, Int32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.QueuedHandler[]
  isExternal: true
  name: QueuedHandler[]
  nameWithType: QueuedHandler[]
  fullName: EventStore.Core.Bus.QueuedHandler[]
  nameWithType.vb: QueuedHandler()
  fullName.vb: EventStore.Core.Bus.QueuedHandler()
  name.vb: QueuedHandler()
  spec.csharp:
  - uid: EventStore.Core.Bus.QueuedHandler
    name: QueuedHandler
    nameWithType: QueuedHandler
    fullName: EventStore.Core.Bus.QueuedHandler
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Bus.QueuedHandler
    name: QueuedHandler
    nameWithType: QueuedHandler
    fullName: EventStore.Core.Bus.QueuedHandler
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Bus.MultiQueuedHandler.Start*
  commentId: Overload:EventStore.Core.Bus.MultiQueuedHandler.Start
  name: Start
  nameWithType: MultiQueuedHandler.Start
  fullName: EventStore.Core.Bus.MultiQueuedHandler.Start
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  commentId: T:System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Task>
  nameWithType: IEnumerable<Task>
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>
  nameWithType.vb: IEnumerable(Of Task)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task)
  name.vb: IEnumerable(Of Task)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EventStore.Core.Bus.MultiQueuedHandler.Stop*
  commentId: Overload:EventStore.Core.Bus.MultiQueuedHandler.Stop
  name: Stop
  nameWithType: MultiQueuedHandler.Stop
  fullName: EventStore.Core.Bus.MultiQueuedHandler.Stop
- uid: EventStore.Core.Bus.MultiQueuedHandler.Handle*
  commentId: Overload:EventStore.Core.Bus.MultiQueuedHandler.Handle
  name: Handle
  nameWithType: MultiQueuedHandler.Handle
  fullName: EventStore.Core.Bus.MultiQueuedHandler.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}.Handle(EventStore.Core.Messaging.Message)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}.Handle(EventStore.Core.Messaging.Message)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messaging.Message}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(Message)
  nameWithType: IHandle<Message>.Handle(Message)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>.Handle(EventStore.Core.Messaging.Message)
  nameWithType.vb: IHandle(Of Message).Handle(Message)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messaging.Message).Handle(EventStore.Core.Messaging.Message)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<Message>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messaging.Message>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of Message).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messaging.Message).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Core.Bus.MultiQueuedHandler.Publish*
  commentId: Overload:EventStore.Core.Bus.MultiQueuedHandler.Publish
  name: Publish
  nameWithType: MultiQueuedHandler.Publish
  fullName: EventStore.Core.Bus.MultiQueuedHandler.Publish
- uid: EventStore.Core.Bus.IPublisher.Publish(EventStore.Core.Messaging.Message)
  commentId: M:EventStore.Core.Bus.IPublisher.Publish(EventStore.Core.Messaging.Message)
  parent: EventStore.Core.Bus.IPublisher
  name: Publish(Message)
  nameWithType: IPublisher.Publish(Message)
  fullName: EventStore.Core.Bus.IPublisher.Publish(EventStore.Core.Messaging.Message)
  spec.csharp:
  - uid: EventStore.Core.Bus.IPublisher.Publish(EventStore.Core.Messaging.Message)
    name: Publish
    nameWithType: IPublisher.Publish
    fullName: EventStore.Core.Bus.IPublisher.Publish
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IPublisher.Publish(EventStore.Core.Messaging.Message)
    name: Publish
    nameWithType: IPublisher.Publish
    fullName: EventStore.Core.Bus.IPublisher.Publish
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.MultiQueuedHandler.PublishToAll*
  commentId: Overload:EventStore.Core.Bus.MultiQueuedHandler.PublishToAll
  name: PublishToAll
  nameWithType: MultiQueuedHandler.PublishToAll
  fullName: EventStore.Core.Bus.MultiQueuedHandler.PublishToAll

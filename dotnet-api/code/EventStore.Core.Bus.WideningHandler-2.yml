### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Bus.WideningHandler`2
  commentId: T:EventStore.Core.Bus.WideningHandler`2
  id: WideningHandler`2
  parent: EventStore.Core.Bus
  children:
  - EventStore.Core.Bus.WideningHandler`2.#ctor(EventStore.Core.Bus.IHandle{`1})
  - EventStore.Core.Bus.WideningHandler`2.Handle(`0)
  - EventStore.Core.Bus.WideningHandler`2.ToString
  langs:
  - csharp
  - vb
  name: WideningHandler<TInput, TOutput>
  nameWithType: WideningHandler<TInput, TOutput>
  fullName: EventStore.Core.Bus.WideningHandler<TInput, TOutput>
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Bus/WideningHandler.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: WideningHandler
    path: ../EventStore/src/EventStore.Core/Bus/WideningHandler.cs
    startLine: 4
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: 'public class WideningHandler<TInput, TOutput> : object, IHandle<TInput> where TInput : TOutput where TOutput : Message'
    typeParameters:
    - id: TInput
    - id: TOutput
    content.vb: >-
      Public Class WideningHandler(Of TInput As TOutput, TOutput As Message)
          Inherits Object
          Implements IHandle(Of TInput)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{{TInput}}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Bus.WideningHandler`2.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Bus.WideningHandler`2.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  nameWithType.vb: WideningHandler(Of TInput, TOutput)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: EventStore.Core.Bus.WideningHandler(Of TInput, TOutput)
  name.vb: WideningHandler(Of TInput, TOutput)
- uid: EventStore.Core.Bus.WideningHandler`2.#ctor(EventStore.Core.Bus.IHandle{`1})
  commentId: M:EventStore.Core.Bus.WideningHandler`2.#ctor(EventStore.Core.Bus.IHandle{`1})
  id: '#ctor(EventStore.Core.Bus.IHandle{`1})'
  parent: EventStore.Core.Bus.WideningHandler`2
  langs:
  - csharp
  - vb
  name: WideningHandler(IHandle<TOutput>)
  nameWithType: WideningHandler<TInput, TOutput>.WideningHandler(IHandle<TOutput>)
  fullName: EventStore.Core.Bus.WideningHandler<TInput, TOutput>.WideningHandler(EventStore.Core.Bus.IHandle<TOutput>)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Bus/WideningHandler.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Bus/WideningHandler.cs
    startLine: 10
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: public WideningHandler(IHandle<TOutput> handler)
    parameters:
    - id: handler
      type: EventStore.Core.Bus.IHandle{{TOutput}}
    content.vb: Public Sub New(handler As IHandle(Of TOutput))
  overload: EventStore.Core.Bus.WideningHandler`2.#ctor*
  nameWithType.vb: WideningHandler(Of TInput, TOutput).WideningHandler(IHandle(Of TOutput))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Bus.WideningHandler(Of TInput, TOutput).WideningHandler(EventStore.Core.Bus.IHandle(Of TOutput))
  name.vb: WideningHandler(IHandle(Of TOutput))
- uid: EventStore.Core.Bus.WideningHandler`2.Handle(`0)
  commentId: M:EventStore.Core.Bus.WideningHandler`2.Handle(`0)
  id: Handle(`0)
  parent: EventStore.Core.Bus.WideningHandler`2
  langs:
  - csharp
  - vb
  name: Handle(TInput)
  nameWithType: WideningHandler<TInput, TOutput>.Handle(TInput)
  fullName: EventStore.Core.Bus.WideningHandler<TInput, TOutput>.Handle(TInput)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Bus/WideningHandler.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Bus/WideningHandler.cs
    startLine: 15
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: public void Handle(TInput message)
    parameters:
    - id: message
      type: '{TInput}'
    content.vb: Public Sub Handle(message As TInput)
  overload: EventStore.Core.Bus.WideningHandler`2.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{{TInput}}.Handle({TInput})
  nameWithType.vb: WideningHandler(Of TInput, TOutput).Handle(TInput)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Bus.WideningHandler(Of TInput, TOutput).Handle(TInput)
- uid: EventStore.Core.Bus.WideningHandler`2.ToString
  commentId: M:EventStore.Core.Bus.WideningHandler`2.ToString
  id: ToString
  parent: EventStore.Core.Bus.WideningHandler`2
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: WideningHandler<TInput, TOutput>.ToString()
  fullName: EventStore.Core.Bus.WideningHandler<TInput, TOutput>.ToString()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Bus/WideningHandler.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ToString
    path: ../EventStore/src/EventStore.Core/Bus/WideningHandler.cs
    startLine: 20
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Bus
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: EventStore.Core.Bus.WideningHandler`2.ToString*
  nameWithType.vb: WideningHandler(Of TInput, TOutput).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: EventStore.Core.Bus.WideningHandler(Of TInput, TOutput).ToString()
references:
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{{TInput}}
  commentId: T:EventStore.Core.Bus.IHandle{`0}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<TInput>
  nameWithType: IHandle<TInput>
  fullName: EventStore.Core.Bus.IHandle<TInput>
  nameWithType.vb: IHandle(Of TInput)
  fullName.vb: EventStore.Core.Bus.IHandle(Of TInput)
  name.vb: IHandle(Of TInput)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.WideningHandler`2.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<WideningHandler<TInput, TOutput>>()
  nameWithType: ProtobufExtensions.Serialize<WideningHandler<TInput, TOutput>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Bus.WideningHandler<TInput, TOutput>>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of WideningHandler(Of TInput, TOutput))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Bus.WideningHandler(Of TInput, TOutput))()
  name.vb: Serialize(Of WideningHandler(Of TInput, TOutput))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<WideningHandler<TInput, TOutput>>
    nameWithType: ProtobufExtensions.Serialize<WideningHandler<TInput, TOutput>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Bus.WideningHandler<TInput, TOutput>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of WideningHandler(Of TInput, TOutput))
    nameWithType: ProtobufExtensions.Serialize(Of WideningHandler(Of TInput, TOutput))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Bus.WideningHandler(Of TInput, TOutput))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.WideningHandler`2.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<WideningHandler<TInput, TOutput>>()
  nameWithType: ProtobufExtensions.SerializeToArray<WideningHandler<TInput, TOutput>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Bus.WideningHandler<TInput, TOutput>>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of WideningHandler(Of TInput, TOutput))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Bus.WideningHandler(Of TInput, TOutput))()
  name.vb: SerializeToArray(Of WideningHandler(Of TInput, TOutput))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<WideningHandler<TInput, TOutput>>
    nameWithType: ProtobufExtensions.SerializeToArray<WideningHandler<TInput, TOutput>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Bus.WideningHandler<TInput, TOutput>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of WideningHandler(Of TInput, TOutput))
    nameWithType: ProtobufExtensions.SerializeToArray(Of WideningHandler(Of TInput, TOutput))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Bus.WideningHandler(Of TInput, TOutput))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Bus.WideningHandler`2.#ctor*
  commentId: Overload:EventStore.Core.Bus.WideningHandler`2.#ctor
  name: WideningHandler
  nameWithType: WideningHandler<TInput, TOutput>.WideningHandler
  fullName: EventStore.Core.Bus.WideningHandler<TInput, TOutput>.WideningHandler
  nameWithType.vb: WideningHandler(Of TInput, TOutput).WideningHandler
  fullName.vb: EventStore.Core.Bus.WideningHandler(Of TInput, TOutput).WideningHandler
- uid: EventStore.Core.Bus.IHandle{{TOutput}}
  commentId: T:EventStore.Core.Bus.IHandle{`1}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<TOutput>
  nameWithType: IHandle<TOutput>
  fullName: EventStore.Core.Bus.IHandle<TOutput>
  nameWithType.vb: IHandle(Of TOutput)
  fullName.vb: EventStore.Core.Bus.IHandle(Of TOutput)
  name.vb: IHandle(Of TOutput)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.WideningHandler`2.Handle*
  commentId: Overload:EventStore.Core.Bus.WideningHandler`2.Handle
  name: Handle
  nameWithType: WideningHandler<TInput, TOutput>.Handle
  fullName: EventStore.Core.Bus.WideningHandler<TInput, TOutput>.Handle
  nameWithType.vb: WideningHandler(Of TInput, TOutput).Handle
  fullName.vb: EventStore.Core.Bus.WideningHandler(Of TInput, TOutput).Handle
- uid: EventStore.Core.Bus.IHandle{{TInput}}.Handle({TInput})
  commentId: M:EventStore.Core.Bus.IHandle{`0}.Handle(`0)
  parent: EventStore.Core.Bus.IHandle{{TInput}}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(TInput)
  nameWithType: IHandle<TInput>.Handle(TInput)
  fullName: EventStore.Core.Bus.IHandle<TInput>.Handle(TInput)
  nameWithType.vb: IHandle(Of TInput).Handle(TInput)
  fullName.vb: EventStore.Core.Bus.IHandle(Of TInput).Handle(TInput)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<TInput>.Handle
    fullName: EventStore.Core.Bus.IHandle<TInput>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of TInput).Handle
    fullName: EventStore.Core.Bus.IHandle(Of TInput).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TInput}'
  commentId: '!:TInput'
  definition: TInput
  name: TInput
  nameWithType: TInput
  fullName: TInput
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TInput
  name: TInput
  nameWithType: TInput
  fullName: TInput
- uid: EventStore.Core.Bus.WideningHandler`2.ToString*
  commentId: Overload:EventStore.Core.Bus.WideningHandler`2.ToString
  name: ToString
  nameWithType: WideningHandler<TInput, TOutput>.ToString
  fullName: EventStore.Core.Bus.WideningHandler<TInput, TOutput>.ToString
  nameWithType.vb: WideningHandler(Of TInput, TOutput).ToString
  fullName.vb: EventStore.Core.Bus.WideningHandler(Of TInput, TOutput).ToString
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.ClusterVNode
  commentId: T:EventStore.Core.ClusterVNode
  id: ClusterVNode
  parent: EventStore.Core
  children:
  - EventStore.Core.ClusterVNode.#ctor(EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Cluster.Settings.ClusterVNodeSettings,EventStore.Core.Services.Gossip.IGossipSeedSource,EventStore.Core.Services.Transport.Http.Controllers.InfoController,EventStore.Core.ISubsystem[])
  - EventStore.Core.ClusterVNode.AddTask(System.Threading.Tasks.Task)
  - EventStore.Core.ClusterVNode.AddTasks(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - EventStore.Core.ClusterVNode.ExternalHttpService
  - EventStore.Core.ClusterVNode.Handle(EventStore.Core.Messages.SystemMessage.BecomeShutdown)
  - EventStore.Core.ClusterVNode.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  - EventStore.Core.ClusterVNode.InternalAuthenticationProvider
  - EventStore.Core.ClusterVNode.InternalHttpService
  - EventStore.Core.ClusterVNode.MainBus
  - EventStore.Core.ClusterVNode.MainQueue
  - EventStore.Core.ClusterVNode.NetworkSendService
  - EventStore.Core.ClusterVNode.NodeStatusChanged
  - EventStore.Core.ClusterVNode.OnNodeStatusChanged(EventStore.Core.VNodeStatusChangeArgs)
  - EventStore.Core.ClusterVNode.Start
  - EventStore.Core.ClusterVNode.StartAndWaitUntilReady
  - EventStore.Core.ClusterVNode.Stop
  - EventStore.Core.ClusterVNode.Stop(System.TimeSpan,System.Boolean,System.Boolean)
  - EventStore.Core.ClusterVNode.StopNonblocking(System.Boolean,System.Boolean)
  - EventStore.Core.ClusterVNode.Tasks
  - EventStore.Core.ClusterVNode.TimerService
  - EventStore.Core.ClusterVNode.ToString
  langs:
  - csharp
  - vb
  name: ClusterVNode
  nameWithType: ClusterVNode
  fullName: EventStore.Core.ClusterVNode
  type: Class
  source:
    id: ClusterVNode
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 42
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: 'public class ClusterVNode : IHandle<SystemMessage.StateChangeMessage>, IHandle<SystemMessage.BecomeShutdown>'
    content.vb: >-
      Public Class ClusterVNode
          Implements IHandle(Of SystemMessage.StateChangeMessage), IHandle(Of SystemMessage.BecomeShutdown)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShutdown}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.ClusterVNode.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.ClusterVNode.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.ClusterVNode.MainQueue
  commentId: P:EventStore.Core.ClusterVNode.MainQueue
  id: MainQueue
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: MainQueue
  nameWithType: ClusterVNode.MainQueue
  fullName: EventStore.Core.ClusterVNode.MainQueue
  type: Property
  source:
    id: MainQueue
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 47
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public IQueuedHandler MainQueue { get; }
    parameters: []
    return:
      type: EventStore.Core.Bus.IQueuedHandler
    content.vb: Public ReadOnly Property MainQueue As IQueuedHandler
  overload: EventStore.Core.ClusterVNode.MainQueue*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.ClusterVNode.MainBus
  commentId: P:EventStore.Core.ClusterVNode.MainBus
  id: MainBus
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: MainBus
  nameWithType: ClusterVNode.MainBus
  fullName: EventStore.Core.ClusterVNode.MainBus
  type: Property
  source:
    id: MainBus
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 51
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public ISubscriber MainBus { get; }
    parameters: []
    return:
      type: EventStore.Core.Bus.ISubscriber
    content.vb: Public ReadOnly Property MainBus As ISubscriber
  overload: EventStore.Core.ClusterVNode.MainBus*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.ClusterVNode.InternalHttpService
  commentId: P:EventStore.Core.ClusterVNode.InternalHttpService
  id: InternalHttpService
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: InternalHttpService
  nameWithType: ClusterVNode.InternalHttpService
  fullName: EventStore.Core.ClusterVNode.InternalHttpService
  type: Property
  source:
    id: InternalHttpService
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 55
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public HttpService InternalHttpService { get; }
    parameters: []
    return:
      type: EventStore.Core.Services.Transport.Http.HttpService
    content.vb: Public ReadOnly Property InternalHttpService As HttpService
  overload: EventStore.Core.ClusterVNode.InternalHttpService*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.ClusterVNode.ExternalHttpService
  commentId: P:EventStore.Core.ClusterVNode.ExternalHttpService
  id: ExternalHttpService
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: ExternalHttpService
  nameWithType: ClusterVNode.ExternalHttpService
  fullName: EventStore.Core.ClusterVNode.ExternalHttpService
  type: Property
  source:
    id: ExternalHttpService
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 59
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public HttpService ExternalHttpService { get; }
    parameters: []
    return:
      type: EventStore.Core.Services.Transport.Http.HttpService
    content.vb: Public ReadOnly Property ExternalHttpService As HttpService
  overload: EventStore.Core.ClusterVNode.ExternalHttpService*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.ClusterVNode.TimerService
  commentId: P:EventStore.Core.ClusterVNode.TimerService
  id: TimerService
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: TimerService
  nameWithType: ClusterVNode.TimerService
  fullName: EventStore.Core.ClusterVNode.TimerService
  type: Property
  source:
    id: TimerService
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 63
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public TimerService TimerService { get; }
    parameters: []
    return:
      type: EventStore.Core.Services.TimerService.TimerService
    content.vb: Public ReadOnly Property TimerService As TimerService
  overload: EventStore.Core.ClusterVNode.TimerService*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.ClusterVNode.NetworkSendService
  commentId: P:EventStore.Core.ClusterVNode.NetworkSendService
  id: NetworkSendService
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: NetworkSendService
  nameWithType: ClusterVNode.NetworkSendService
  fullName: EventStore.Core.ClusterVNode.NetworkSendService
  type: Property
  source:
    id: NetworkSendService
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 67
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public IPublisher NetworkSendService { get; }
    parameters: []
    return:
      type: EventStore.Core.Bus.IPublisher
    content.vb: Public ReadOnly Property NetworkSendService As IPublisher
  overload: EventStore.Core.ClusterVNode.NetworkSendService*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.ClusterVNode.InternalAuthenticationProvider
  commentId: P:EventStore.Core.ClusterVNode.InternalAuthenticationProvider
  id: InternalAuthenticationProvider
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: InternalAuthenticationProvider
  nameWithType: ClusterVNode.InternalAuthenticationProvider
  fullName: EventStore.Core.ClusterVNode.InternalAuthenticationProvider
  type: Property
  source:
    id: InternalAuthenticationProvider
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 71
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public IAuthenticationProvider InternalAuthenticationProvider { get; }
    parameters: []
    return:
      type: EventStore.Core.Authentication.IAuthenticationProvider
    content.vb: Public ReadOnly Property InternalAuthenticationProvider As IAuthenticationProvider
  overload: EventStore.Core.ClusterVNode.InternalAuthenticationProvider*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.ClusterVNode.NodeStatusChanged
  commentId: E:EventStore.Core.ClusterVNode.NodeStatusChanged
  id: NodeStatusChanged
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: NodeStatusChanged
  nameWithType: ClusterVNode.NodeStatusChanged
  fullName: EventStore.Core.ClusterVNode.NodeStatusChanged
  type: Event
  source:
    id: NodeStatusChanged
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 95
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public event EventHandler<VNodeStatusChangeArgs> NodeStatusChanged
    return:
      type: System.EventHandler{EventStore.Core.VNodeStatusChangeArgs}
    content.vb: Public Event NodeStatusChanged As EventHandler(Of VNodeStatusChangeArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.ClusterVNode.Tasks
  commentId: P:EventStore.Core.ClusterVNode.Tasks
  id: Tasks
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: Tasks
  nameWithType: ClusterVNode.Tasks
  fullName: EventStore.Core.ClusterVNode.Tasks
  type: Property
  source:
    id: Tasks
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 97
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public IEnumerable<Task> Tasks { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
    content.vb: Public ReadOnly Property Tasks As IEnumerable(Of Task)
  overload: EventStore.Core.ClusterVNode.Tasks*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.ClusterVNode.OnNodeStatusChanged(EventStore.Core.VNodeStatusChangeArgs)
  commentId: M:EventStore.Core.ClusterVNode.OnNodeStatusChanged(EventStore.Core.VNodeStatusChangeArgs)
  id: OnNodeStatusChanged(EventStore.Core.VNodeStatusChangeArgs)
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: OnNodeStatusChanged(VNodeStatusChangeArgs)
  nameWithType: ClusterVNode.OnNodeStatusChanged(VNodeStatusChangeArgs)
  fullName: EventStore.Core.ClusterVNode.OnNodeStatusChanged(EventStore.Core.VNodeStatusChangeArgs)
  type: Method
  source:
    id: OnNodeStatusChanged
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 105
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: protected virtual void OnNodeStatusChanged(VNodeStatusChangeArgs e)
    parameters:
    - id: e
      type: EventStore.Core.VNodeStatusChangeArgs
    content.vb: Protected Overridable Sub OnNodeStatusChanged(e As VNodeStatusChangeArgs)
  overload: EventStore.Core.ClusterVNode.OnNodeStatusChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: EventStore.Core.ClusterVNode.#ctor(EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Cluster.Settings.ClusterVNodeSettings,EventStore.Core.Services.Gossip.IGossipSeedSource,EventStore.Core.Services.Transport.Http.Controllers.InfoController,EventStore.Core.ISubsystem[])
  commentId: M:EventStore.Core.ClusterVNode.#ctor(EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Cluster.Settings.ClusterVNodeSettings,EventStore.Core.Services.Gossip.IGossipSeedSource,EventStore.Core.Services.Transport.Http.Controllers.InfoController,EventStore.Core.ISubsystem[])
  id: '#ctor(EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Cluster.Settings.ClusterVNodeSettings,EventStore.Core.Services.Gossip.IGossipSeedSource,EventStore.Core.Services.Transport.Http.Controllers.InfoController,EventStore.Core.ISubsystem[])'
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: ClusterVNode(TFChunkDb, ClusterVNodeSettings, IGossipSeedSource, InfoController, ISubsystem[])
  nameWithType: ClusterVNode.ClusterVNode(TFChunkDb, ClusterVNodeSettings, IGossipSeedSource, InfoController, ISubsystem[])
  fullName: EventStore.Core.ClusterVNode.ClusterVNode(EventStore.Core.TransactionLog.Chunks.TFChunkDb, EventStore.Core.Cluster.Settings.ClusterVNodeSettings, EventStore.Core.Services.Gossip.IGossipSeedSource, EventStore.Core.Services.Transport.Http.Controllers.InfoController, EventStore.Core.ISubsystem[])
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 111
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public ClusterVNode(TFChunkDb db, ClusterVNodeSettings vNodeSettings, IGossipSeedSource gossipSeedSource, InfoController infoController, params ISubsystem[] subsystems)
    parameters:
    - id: db
      type: EventStore.Core.TransactionLog.Chunks.TFChunkDb
    - id: vNodeSettings
      type: EventStore.Core.Cluster.Settings.ClusterVNodeSettings
    - id: gossipSeedSource
      type: EventStore.Core.Services.Gossip.IGossipSeedSource
    - id: infoController
      type: EventStore.Core.Services.Transport.Http.Controllers.InfoController
    - id: subsystems
      type: EventStore.Core.ISubsystem[]
    content.vb: Public Sub New(db As TFChunkDb, vNodeSettings As ClusterVNodeSettings, gossipSeedSource As IGossipSeedSource, infoController As InfoController, ParamArray subsystems As ISubsystem())
  overload: EventStore.Core.ClusterVNode.#ctor*
  nameWithType.vb: ClusterVNode.ClusterVNode(TFChunkDb, ClusterVNodeSettings, IGossipSeedSource, InfoController, ISubsystem())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.ClusterVNode.ClusterVNode(EventStore.Core.TransactionLog.Chunks.TFChunkDb, EventStore.Core.Cluster.Settings.ClusterVNodeSettings, EventStore.Core.Services.Gossip.IGossipSeedSource, EventStore.Core.Services.Transport.Http.Controllers.InfoController, EventStore.Core.ISubsystem())
  name.vb: ClusterVNode(TFChunkDb, ClusterVNodeSettings, IGossipSeedSource, InfoController, ISubsystem())
- uid: EventStore.Core.ClusterVNode.Start
  commentId: M:EventStore.Core.ClusterVNode.Start
  id: Start
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: ClusterVNode.Start()
  fullName: EventStore.Core.ClusterVNode.Start()
  type: Method
  source:
    id: Start
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 649
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  overload: EventStore.Core.ClusterVNode.Start*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.ClusterVNode.StopNonblocking(System.Boolean,System.Boolean)
  commentId: M:EventStore.Core.ClusterVNode.StopNonblocking(System.Boolean,System.Boolean)
  id: StopNonblocking(System.Boolean,System.Boolean)
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: StopNonblocking(Boolean, Boolean)
  nameWithType: ClusterVNode.StopNonblocking(Boolean, Boolean)
  fullName: EventStore.Core.ClusterVNode.StopNonblocking(System.Boolean, System.Boolean)
  type: Method
  source:
    id: StopNonblocking
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 653
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public void StopNonblocking(bool exitProcess, bool shutdownHttp)
    parameters:
    - id: exitProcess
      type: System.Boolean
    - id: shutdownHttp
      type: System.Boolean
    content.vb: Public Sub StopNonblocking(exitProcess As Boolean, shutdownHttp As Boolean)
  overload: EventStore.Core.ClusterVNode.StopNonblocking*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.ClusterVNode.Stop
  commentId: M:EventStore.Core.ClusterVNode.Stop
  id: Stop
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: ClusterVNode.Stop()
  fullName: EventStore.Core.ClusterVNode.Stop()
  type: Method
  source:
    id: Stop
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 661
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public bool Stop()
    return:
      type: System.Boolean
    content.vb: Public Function Stop As Boolean
  overload: EventStore.Core.ClusterVNode.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.ClusterVNode.Stop(System.TimeSpan,System.Boolean,System.Boolean)
  commentId: M:EventStore.Core.ClusterVNode.Stop(System.TimeSpan,System.Boolean,System.Boolean)
  id: Stop(System.TimeSpan,System.Boolean,System.Boolean)
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: Stop(TimeSpan, Boolean, Boolean)
  nameWithType: ClusterVNode.Stop(TimeSpan, Boolean, Boolean)
  fullName: EventStore.Core.ClusterVNode.Stop(System.TimeSpan, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Stop
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 665
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public bool Stop(TimeSpan timeout, bool exitProcess, bool shutdownHttp)
    parameters:
    - id: timeout
      type: System.TimeSpan
    - id: exitProcess
      type: System.Boolean
    - id: shutdownHttp
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Public Function Stop(timeout As TimeSpan, exitProcess As Boolean, shutdownHttp As Boolean) As Boolean
  overload: EventStore.Core.ClusterVNode.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.ClusterVNode.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.ClusterVNode.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  id: Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: ClusterVNode.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.ClusterVNode.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 670
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public void Handle(SystemMessage.StateChangeMessage message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    content.vb: Public Sub Handle(message As SystemMessage.StateChangeMessage)
  overload: EventStore.Core.ClusterVNode.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.ClusterVNode.Handle(EventStore.Core.Messages.SystemMessage.BecomeShutdown)
  commentId: M:EventStore.Core.ClusterVNode.Handle(EventStore.Core.Messages.SystemMessage.BecomeShutdown)
  id: Handle(EventStore.Core.Messages.SystemMessage.BecomeShutdown)
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.BecomeShutdown)
  nameWithType: ClusterVNode.Handle(SystemMessage.BecomeShutdown)
  fullName: EventStore.Core.ClusterVNode.Handle(EventStore.Core.Messages.SystemMessage.BecomeShutdown)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 674
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public void Handle(SystemMessage.BecomeShutdown message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.BecomeShutdown
    content.vb: Public Sub Handle(message As SystemMessage.BecomeShutdown)
  overload: EventStore.Core.ClusterVNode.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShutdown}.Handle(EventStore.Core.Messages.SystemMessage.BecomeShutdown)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.ClusterVNode.AddTasks(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  commentId: M:EventStore.Core.ClusterVNode.AddTasks(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  id: AddTasks(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: AddTasks(IEnumerable<Task>)
  nameWithType: ClusterVNode.AddTasks(IEnumerable<Task>)
  fullName: EventStore.Core.ClusterVNode.AddTasks(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: AddTasks
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 678
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public void AddTasks(IEnumerable<Task> tasks)
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
    content.vb: Public Sub AddTasks(tasks As IEnumerable(Of Task))
  overload: EventStore.Core.ClusterVNode.AddTasks*
  nameWithType.vb: ClusterVNode.AddTasks(IEnumerable(Of Task))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.ClusterVNode.AddTasks(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task))
  name.vb: AddTasks(IEnumerable(Of Task))
- uid: EventStore.Core.ClusterVNode.AddTask(System.Threading.Tasks.Task)
  commentId: M:EventStore.Core.ClusterVNode.AddTask(System.Threading.Tasks.Task)
  id: AddTask(System.Threading.Tasks.Task)
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: AddTask(Task)
  nameWithType: ClusterVNode.AddTask(Task)
  fullName: EventStore.Core.ClusterVNode.AddTask(System.Threading.Tasks.Task)
  type: Method
  source:
    id: AddTask
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 686
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public void AddTask(Task task)
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
    content.vb: Public Sub AddTask(task As Task)
  overload: EventStore.Core.ClusterVNode.AddTask*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.ClusterVNode.StartAndWaitUntilReady
  commentId: M:EventStore.Core.ClusterVNode.StartAndWaitUntilReady
  id: StartAndWaitUntilReady
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: StartAndWaitUntilReady()
  nameWithType: ClusterVNode.StartAndWaitUntilReady()
  fullName: EventStore.Core.ClusterVNode.StartAndWaitUntilReady()
  type: Method
  source:
    id: StartAndWaitUntilReady
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 707
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public Task<ClusterVNode> StartAndWaitUntilReady()
    return:
      type: System.Threading.Tasks.Task{EventStore.Core.ClusterVNode}
    content.vb: Public Function StartAndWaitUntilReady As Task(Of ClusterVNode)
  overload: EventStore.Core.ClusterVNode.StartAndWaitUntilReady*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.ClusterVNode.ToString
  commentId: M:EventStore.Core.ClusterVNode.ToString
  id: ToString
  parent: EventStore.Core.ClusterVNode
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ClusterVNode.ToString()
  fullName: EventStore.Core.ClusterVNode.ToString()
  type: Method
  source:
    id: ToString
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/ClusterVNode.cs
    startLine: 718
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: EventStore.Core.ClusterVNode.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: EventStore.Core
  commentId: N:EventStore.Core
  name: EventStore.Core
  nameWithType: EventStore.Core
  fullName: EventStore.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.StateChangeMessage>
  nameWithType: IHandle<SystemMessage.StateChangeMessage>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  name.vb: IHandle(Of SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShutdown}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShutdown}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.BecomeShutdown>
  nameWithType: IHandle<SystemMessage.BecomeShutdown>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.BecomeShutdown>
  nameWithType.vb: IHandle(Of SystemMessage.BecomeShutdown)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.BecomeShutdown)
  name.vb: IHandle(Of SystemMessage.BecomeShutdown)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.BecomeShutdown
    name: SystemMessage.BecomeShutdown
    nameWithType: SystemMessage.BecomeShutdown
    fullName: EventStore.Core.Messages.SystemMessage.BecomeShutdown
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.BecomeShutdown
    name: SystemMessage.BecomeShutdown
    nameWithType: SystemMessage.BecomeShutdown
    fullName: EventStore.Core.Messages.SystemMessage.BecomeShutdown
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ClusterVNode.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ClusterVNode>()
  nameWithType: ProtobufExtensions.Serialize<ClusterVNode>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.ClusterVNode>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ClusterVNode)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.ClusterVNode)()
  name.vb: Serialize(Of ClusterVNode)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ClusterVNode>
    nameWithType: ProtobufExtensions.Serialize<ClusterVNode>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.ClusterVNode>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ClusterVNode)
    nameWithType: ProtobufExtensions.Serialize(Of ClusterVNode)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.ClusterVNode)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ClusterVNode.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ClusterVNode>()
  nameWithType: ProtobufExtensions.SerializeToArray<ClusterVNode>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.ClusterVNode>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ClusterVNode)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.ClusterVNode)()
  name.vb: SerializeToArray(Of ClusterVNode)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ClusterVNode>
    nameWithType: ProtobufExtensions.SerializeToArray<ClusterVNode>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.ClusterVNode>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ClusterVNode)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ClusterVNode)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.ClusterVNode)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.ClusterVNode.MainQueue*
  commentId: Overload:EventStore.Core.ClusterVNode.MainQueue
  name: MainQueue
  nameWithType: ClusterVNode.MainQueue
  fullName: EventStore.Core.ClusterVNode.MainQueue
- uid: EventStore.Core.Bus.IQueuedHandler
  commentId: T:EventStore.Core.Bus.IQueuedHandler
  parent: EventStore.Core.Bus
  name: IQueuedHandler
  nameWithType: IQueuedHandler
  fullName: EventStore.Core.Bus.IQueuedHandler
- uid: EventStore.Core.ClusterVNode.MainBus*
  commentId: Overload:EventStore.Core.ClusterVNode.MainBus
  name: MainBus
  nameWithType: ClusterVNode.MainBus
  fullName: EventStore.Core.ClusterVNode.MainBus
- uid: EventStore.Core.Bus.ISubscriber
  commentId: T:EventStore.Core.Bus.ISubscriber
  parent: EventStore.Core.Bus
  name: ISubscriber
  nameWithType: ISubscriber
  fullName: EventStore.Core.Bus.ISubscriber
- uid: EventStore.Core.ClusterVNode.InternalHttpService*
  commentId: Overload:EventStore.Core.ClusterVNode.InternalHttpService
  name: InternalHttpService
  nameWithType: ClusterVNode.InternalHttpService
  fullName: EventStore.Core.ClusterVNode.InternalHttpService
- uid: EventStore.Core.Services.Transport.Http.HttpService
  commentId: T:EventStore.Core.Services.Transport.Http.HttpService
  parent: EventStore.Core.Services.Transport.Http
  name: HttpService
  nameWithType: HttpService
  fullName: EventStore.Core.Services.Transport.Http.HttpService
- uid: EventStore.Core.Services.Transport.Http
  commentId: N:EventStore.Core.Services.Transport.Http
  name: EventStore.Core.Services.Transport.Http
  nameWithType: EventStore.Core.Services.Transport.Http
  fullName: EventStore.Core.Services.Transport.Http
- uid: EventStore.Core.ClusterVNode.ExternalHttpService*
  commentId: Overload:EventStore.Core.ClusterVNode.ExternalHttpService
  name: ExternalHttpService
  nameWithType: ClusterVNode.ExternalHttpService
  fullName: EventStore.Core.ClusterVNode.ExternalHttpService
- uid: EventStore.Core.ClusterVNode.TimerService*
  commentId: Overload:EventStore.Core.ClusterVNode.TimerService
  name: TimerService
  nameWithType: ClusterVNode.TimerService
  fullName: EventStore.Core.ClusterVNode.TimerService
- uid: EventStore.Core.Services.TimerService.TimerService
  commentId: T:EventStore.Core.Services.TimerService.TimerService
  parent: EventStore.Core.Services.TimerService
  name: TimerService
  nameWithType: TimerService
  fullName: EventStore.Core.Services.TimerService.TimerService
- uid: EventStore.Core.Services.TimerService
  commentId: N:EventStore.Core.Services.TimerService
  name: EventStore.Core.Services.TimerService
  nameWithType: EventStore.Core.Services.TimerService
  fullName: EventStore.Core.Services.TimerService
- uid: EventStore.Core.ClusterVNode.NetworkSendService*
  commentId: Overload:EventStore.Core.ClusterVNode.NetworkSendService
  name: NetworkSendService
  nameWithType: ClusterVNode.NetworkSendService
  fullName: EventStore.Core.ClusterVNode.NetworkSendService
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.ClusterVNode.InternalAuthenticationProvider*
  commentId: Overload:EventStore.Core.ClusterVNode.InternalAuthenticationProvider
  name: InternalAuthenticationProvider
  nameWithType: ClusterVNode.InternalAuthenticationProvider
  fullName: EventStore.Core.ClusterVNode.InternalAuthenticationProvider
- uid: EventStore.Core.Authentication.IAuthenticationProvider
  commentId: T:EventStore.Core.Authentication.IAuthenticationProvider
  parent: EventStore.Core.Authentication
  name: IAuthenticationProvider
  nameWithType: IAuthenticationProvider
  fullName: EventStore.Core.Authentication.IAuthenticationProvider
- uid: EventStore.Core.Authentication
  commentId: N:EventStore.Core.Authentication
  name: EventStore.Core.Authentication
  nameWithType: EventStore.Core.Authentication
  fullName: EventStore.Core.Authentication
- uid: System.EventHandler{EventStore.Core.VNodeStatusChangeArgs}
  commentId: T:System.EventHandler{EventStore.Core.VNodeStatusChangeArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<VNodeStatusChangeArgs>
  nameWithType: EventHandler<VNodeStatusChangeArgs>
  fullName: System.EventHandler<EventStore.Core.VNodeStatusChangeArgs>
  nameWithType.vb: EventHandler(Of VNodeStatusChangeArgs)
  fullName.vb: System.EventHandler(Of EventStore.Core.VNodeStatusChangeArgs)
  name.vb: EventHandler(Of VNodeStatusChangeArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.VNodeStatusChangeArgs
    name: VNodeStatusChangeArgs
    nameWithType: VNodeStatusChangeArgs
    fullName: EventStore.Core.VNodeStatusChangeArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.VNodeStatusChangeArgs
    name: VNodeStatusChangeArgs
    nameWithType: VNodeStatusChangeArgs
    fullName: EventStore.Core.VNodeStatusChangeArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ClusterVNode.Tasks*
  commentId: Overload:EventStore.Core.ClusterVNode.Tasks
  name: Tasks
  nameWithType: ClusterVNode.Tasks
  fullName: EventStore.Core.ClusterVNode.Tasks
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  commentId: T:System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Task>
  nameWithType: IEnumerable<Task>
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>
  nameWithType.vb: IEnumerable(Of Task)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task)
  name.vb: IEnumerable(Of Task)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EventStore.Core.ClusterVNode.OnNodeStatusChanged*
  commentId: Overload:EventStore.Core.ClusterVNode.OnNodeStatusChanged
  name: OnNodeStatusChanged
  nameWithType: ClusterVNode.OnNodeStatusChanged
  fullName: EventStore.Core.ClusterVNode.OnNodeStatusChanged
- uid: EventStore.Core.VNodeStatusChangeArgs
  commentId: T:EventStore.Core.VNodeStatusChangeArgs
  parent: EventStore.Core
  name: VNodeStatusChangeArgs
  nameWithType: VNodeStatusChangeArgs
  fullName: EventStore.Core.VNodeStatusChangeArgs
- uid: EventStore.Core.ClusterVNode.#ctor*
  commentId: Overload:EventStore.Core.ClusterVNode.#ctor
  name: ClusterVNode
  nameWithType: ClusterVNode.ClusterVNode
  fullName: EventStore.Core.ClusterVNode.ClusterVNode
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkDb
  commentId: T:EventStore.Core.TransactionLog.Chunks.TFChunkDb
  parent: EventStore.Core.TransactionLog.Chunks
  name: TFChunkDb
  nameWithType: TFChunkDb
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkDb
- uid: EventStore.Core.Cluster.Settings.ClusterVNodeSettings
  commentId: T:EventStore.Core.Cluster.Settings.ClusterVNodeSettings
  parent: EventStore.Core.Cluster.Settings
  name: ClusterVNodeSettings
  nameWithType: ClusterVNodeSettings
  fullName: EventStore.Core.Cluster.Settings.ClusterVNodeSettings
- uid: EventStore.Core.Services.Gossip.IGossipSeedSource
  commentId: T:EventStore.Core.Services.Gossip.IGossipSeedSource
  parent: EventStore.Core.Services.Gossip
  name: IGossipSeedSource
  nameWithType: IGossipSeedSource
  fullName: EventStore.Core.Services.Gossip.IGossipSeedSource
- uid: EventStore.Core.Services.Transport.Http.Controllers.InfoController
  commentId: T:EventStore.Core.Services.Transport.Http.Controllers.InfoController
  parent: EventStore.Core.Services.Transport.Http.Controllers
  name: InfoController
  nameWithType: InfoController
  fullName: EventStore.Core.Services.Transport.Http.Controllers.InfoController
- uid: EventStore.Core.ISubsystem[]
  isExternal: true
  name: ISubsystem[]
  nameWithType: ISubsystem[]
  fullName: EventStore.Core.ISubsystem[]
  nameWithType.vb: ISubsystem()
  fullName.vb: EventStore.Core.ISubsystem()
  name.vb: ISubsystem()
  spec.csharp:
  - uid: EventStore.Core.ISubsystem
    name: ISubsystem
    nameWithType: ISubsystem
    fullName: EventStore.Core.ISubsystem
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.ISubsystem
    name: ISubsystem
    nameWithType: ISubsystem
    fullName: EventStore.Core.ISubsystem
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.TransactionLog.Chunks
  commentId: N:EventStore.Core.TransactionLog.Chunks
  name: EventStore.Core.TransactionLog.Chunks
  nameWithType: EventStore.Core.TransactionLog.Chunks
  fullName: EventStore.Core.TransactionLog.Chunks
- uid: EventStore.Core.Cluster.Settings
  commentId: N:EventStore.Core.Cluster.Settings
  name: EventStore.Core.Cluster.Settings
  nameWithType: EventStore.Core.Cluster.Settings
  fullName: EventStore.Core.Cluster.Settings
- uid: EventStore.Core.Services.Gossip
  commentId: N:EventStore.Core.Services.Gossip
  name: EventStore.Core.Services.Gossip
  nameWithType: EventStore.Core.Services.Gossip
  fullName: EventStore.Core.Services.Gossip
- uid: EventStore.Core.Services.Transport.Http.Controllers
  commentId: N:EventStore.Core.Services.Transport.Http.Controllers
  name: EventStore.Core.Services.Transport.Http.Controllers
  nameWithType: EventStore.Core.Services.Transport.Http.Controllers
  fullName: EventStore.Core.Services.Transport.Http.Controllers
- uid: EventStore.Core.ClusterVNode.Start*
  commentId: Overload:EventStore.Core.ClusterVNode.Start
  name: Start
  nameWithType: ClusterVNode.Start
  fullName: EventStore.Core.ClusterVNode.Start
- uid: EventStore.Core.ClusterVNode.StopNonblocking*
  commentId: Overload:EventStore.Core.ClusterVNode.StopNonblocking
  name: StopNonblocking
  nameWithType: ClusterVNode.StopNonblocking
  fullName: EventStore.Core.ClusterVNode.StopNonblocking
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.ClusterVNode.Stop*
  commentId: Overload:EventStore.Core.ClusterVNode.Stop
  name: Stop
  nameWithType: ClusterVNode.Stop
  fullName: EventStore.Core.ClusterVNode.Stop
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: EventStore.Core.ClusterVNode.Handle*
  commentId: Overload:EventStore.Core.ClusterVNode.Handle
  name: Handle
  nameWithType: ClusterVNode.Handle
  fullName: EventStore.Core.ClusterVNode.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: IHandle<SystemMessage.StateChangeMessage>.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage).Handle(SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage).Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.StateChangeMessage>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.StateChangeMessage).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  commentId: T:EventStore.Core.Messages.SystemMessage.StateChangeMessage
  parent: EventStore.Core.Messages
  name: SystemMessage.StateChangeMessage
  nameWithType: SystemMessage.StateChangeMessage
  fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShutdown}.Handle(EventStore.Core.Messages.SystemMessage.BecomeShutdown)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShutdown}.Handle(EventStore.Core.Messages.SystemMessage.BecomeShutdown)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShutdown}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.BecomeShutdown)
  nameWithType: IHandle<SystemMessage.BecomeShutdown>.Handle(SystemMessage.BecomeShutdown)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.BecomeShutdown>.Handle(EventStore.Core.Messages.SystemMessage.BecomeShutdown)
  nameWithType.vb: IHandle(Of SystemMessage.BecomeShutdown).Handle(SystemMessage.BecomeShutdown)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.BecomeShutdown).Handle(EventStore.Core.Messages.SystemMessage.BecomeShutdown)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.BecomeShutdown>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.BecomeShutdown>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.BecomeShutdown
    name: SystemMessage.BecomeShutdown
    nameWithType: SystemMessage.BecomeShutdown
    fullName: EventStore.Core.Messages.SystemMessage.BecomeShutdown
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.BecomeShutdown).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.BecomeShutdown).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.BecomeShutdown
    name: SystemMessage.BecomeShutdown
    nameWithType: SystemMessage.BecomeShutdown
    fullName: EventStore.Core.Messages.SystemMessage.BecomeShutdown
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.BecomeShutdown
  commentId: T:EventStore.Core.Messages.SystemMessage.BecomeShutdown
  parent: EventStore.Core.Messages
  name: SystemMessage.BecomeShutdown
  nameWithType: SystemMessage.BecomeShutdown
  fullName: EventStore.Core.Messages.SystemMessage.BecomeShutdown
- uid: EventStore.Core.ClusterVNode.AddTasks*
  commentId: Overload:EventStore.Core.ClusterVNode.AddTasks
  name: AddTasks
  nameWithType: ClusterVNode.AddTasks
  fullName: EventStore.Core.ClusterVNode.AddTasks
- uid: EventStore.Core.ClusterVNode.AddTask*
  commentId: Overload:EventStore.Core.ClusterVNode.AddTask
  name: AddTask
  nameWithType: ClusterVNode.AddTask
  fullName: EventStore.Core.ClusterVNode.AddTask
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: EventStore.Core.ClusterVNode.StartAndWaitUntilReady*
  commentId: Overload:EventStore.Core.ClusterVNode.StartAndWaitUntilReady
  name: StartAndWaitUntilReady
  nameWithType: ClusterVNode.StartAndWaitUntilReady
  fullName: EventStore.Core.ClusterVNode.StartAndWaitUntilReady
- uid: System.Threading.Tasks.Task{EventStore.Core.ClusterVNode}
  commentId: T:System.Threading.Tasks.Task{EventStore.Core.ClusterVNode}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ClusterVNode>
  nameWithType: Task<ClusterVNode>
  fullName: System.Threading.Tasks.Task<EventStore.Core.ClusterVNode>
  nameWithType.vb: Task(Of ClusterVNode)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.Core.ClusterVNode)
  name.vb: Task(Of ClusterVNode)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.ClusterVNode
    name: ClusterVNode
    nameWithType: ClusterVNode
    fullName: EventStore.Core.ClusterVNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.ClusterVNode
    name: ClusterVNode
    nameWithType: ClusterVNode
    fullName: EventStore.Core.ClusterVNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ClusterVNode.ToString*
  commentId: Overload:EventStore.Core.ClusterVNode.ToString
  name: ToString
  nameWithType: ClusterVNode.ToString
  fullName: EventStore.Core.ClusterVNode.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String

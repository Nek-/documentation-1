### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Data.ResolvedEvent
  commentId: T:EventStore.Core.Data.ResolvedEvent
  id: ResolvedEvent
  parent: EventStore.Core.Data
  children:
  - EventStore.Core.Data.ResolvedEvent.EmptyArray
  - EventStore.Core.Data.ResolvedEvent.EmptyEvent
  - EventStore.Core.Data.ResolvedEvent.Event
  - EventStore.Core.Data.ResolvedEvent.ForFailedResolvedLink(EventStore.Core.Data.EventRecord,EventStore.Core.Data.ReadEventResult,System.Nullable{System.Int64})
  - EventStore.Core.Data.ResolvedEvent.ForResolvedLink(EventStore.Core.Data.EventRecord,EventStore.Core.Data.EventRecord,System.Nullable{System.Int64})
  - EventStore.Core.Data.ResolvedEvent.ForUnresolvedEvent(EventStore.Core.Data.EventRecord,System.Nullable{System.Int64})
  - EventStore.Core.Data.ResolvedEvent.Link
  - EventStore.Core.Data.ResolvedEvent.OriginalEvent
  - EventStore.Core.Data.ResolvedEvent.OriginalEventNumber
  - EventStore.Core.Data.ResolvedEvent.OriginalPosition
  - EventStore.Core.Data.ResolvedEvent.OriginalStreamId
  - EventStore.Core.Data.ResolvedEvent.ResolveResult
  - EventStore.Core.Data.ResolvedEvent.WithoutPosition
  langs:
  - csharp
  - vb
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.Core.Data.ResolvedEvent
  type: Struct
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ResolvedEvent
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 2
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public struct ResolvedEvent
    content.vb: Public Structure ResolvedEvent
  extensionMethods:
  - EventStore.Core.Data.ResolvedEvent.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  - EventStore.Core.Data.ResolvedEvent.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Data.ResolvedEvent.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: EventStore.Core.Data.ResolvedEvent.EmptyArray
  commentId: F:EventStore.Core.Data.ResolvedEvent.EmptyArray
  id: EmptyArray
  parent: EventStore.Core.Data.ResolvedEvent
  langs:
  - csharp
  - vb
  name: EmptyArray
  nameWithType: ResolvedEvent.EmptyArray
  fullName: EventStore.Core.Data.ResolvedEvent.EmptyArray
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EmptyArray
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 4
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public static readonly ResolvedEvent[] EmptyArray
    return:
      type: EventStore.Core.Data.ResolvedEvent[]
    content.vb: Public Shared ReadOnly EmptyArray As ResolvedEvent()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Core.Data.ResolvedEvent.EmptyEvent
  commentId: F:EventStore.Core.Data.ResolvedEvent.EmptyEvent
  id: EmptyEvent
  parent: EventStore.Core.Data.ResolvedEvent
  langs:
  - csharp
  - vb
  name: EmptyEvent
  nameWithType: ResolvedEvent.EmptyEvent
  fullName: EventStore.Core.Data.ResolvedEvent.EmptyEvent
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EmptyEvent
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 5
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public static readonly ResolvedEvent EmptyEvent
    return:
      type: EventStore.Core.Data.ResolvedEvent
    content.vb: Public Shared ReadOnly EmptyEvent As ResolvedEvent
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Core.Data.ResolvedEvent.Event
  commentId: F:EventStore.Core.Data.ResolvedEvent.Event
  id: Event
  parent: EventStore.Core.Data.ResolvedEvent
  langs:
  - csharp
  - vb
  name: Event
  nameWithType: ResolvedEvent.Event
  fullName: EventStore.Core.Data.ResolvedEvent.Event
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Event
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 7
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public readonly EventRecord Event
    return:
      type: EventStore.Core.Data.EventRecord
    content.vb: Public ReadOnly Event As EventRecord
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Data.ResolvedEvent.Link
  commentId: F:EventStore.Core.Data.ResolvedEvent.Link
  id: Link
  parent: EventStore.Core.Data.ResolvedEvent
  langs:
  - csharp
  - vb
  name: Link
  nameWithType: ResolvedEvent.Link
  fullName: EventStore.Core.Data.ResolvedEvent.Link
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Link
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public readonly EventRecord Link
    return:
      type: EventStore.Core.Data.EventRecord
    content.vb: Public ReadOnly Link As EventRecord
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Data.ResolvedEvent.OriginalEvent
  commentId: P:EventStore.Core.Data.ResolvedEvent.OriginalEvent
  id: OriginalEvent
  parent: EventStore.Core.Data.ResolvedEvent
  langs:
  - csharp
  - vb
  name: OriginalEvent
  nameWithType: ResolvedEvent.OriginalEvent
  fullName: EventStore.Core.Data.ResolvedEvent.OriginalEvent
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: OriginalEvent
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 9
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public EventRecord OriginalEvent { get; }
    parameters: []
    return:
      type: EventStore.Core.Data.EventRecord
    content.vb: Public ReadOnly Property OriginalEvent As EventRecord
  overload: EventStore.Core.Data.ResolvedEvent.OriginalEvent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Data.ResolvedEvent.OriginalPosition
  commentId: F:EventStore.Core.Data.ResolvedEvent.OriginalPosition
  id: OriginalPosition
  parent: EventStore.Core.Data.ResolvedEvent
  langs:
  - csharp
  - vb
  name: OriginalPosition
  nameWithType: ResolvedEvent.OriginalPosition
  fullName: EventStore.Core.Data.ResolvedEvent.OriginalPosition
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: OriginalPosition
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 14
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  summary: "\nPosition of the OriginalEvent (unresolved link or event) if available\n"
  example: []
  syntax:
    content: public readonly TFPos? OriginalPosition
    return:
      type: System.Nullable{EventStore.Core.Data.TFPos}
    content.vb: Public ReadOnly OriginalPosition As TFPos?
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Data.ResolvedEvent.ResolveResult
  commentId: F:EventStore.Core.Data.ResolvedEvent.ResolveResult
  id: ResolveResult
  parent: EventStore.Core.Data.ResolvedEvent
  langs:
  - csharp
  - vb
  name: ResolveResult
  nameWithType: ResolvedEvent.ResolveResult
  fullName: EventStore.Core.Data.ResolvedEvent.ResolveResult
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ResolveResult
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 16
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public readonly ReadEventResult ResolveResult
    return:
      type: EventStore.Core.Data.ReadEventResult
    content.vb: Public ReadOnly ResolveResult As ReadEventResult
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Data.ResolvedEvent.OriginalStreamId
  commentId: P:EventStore.Core.Data.ResolvedEvent.OriginalStreamId
  id: OriginalStreamId
  parent: EventStore.Core.Data.ResolvedEvent
  langs:
  - csharp
  - vb
  name: OriginalStreamId
  nameWithType: ResolvedEvent.OriginalStreamId
  fullName: EventStore.Core.Data.ResolvedEvent.OriginalStreamId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: OriginalStreamId
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 18
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public string OriginalStreamId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property OriginalStreamId As String
  overload: EventStore.Core.Data.ResolvedEvent.OriginalStreamId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Data.ResolvedEvent.OriginalEventNumber
  commentId: P:EventStore.Core.Data.ResolvedEvent.OriginalEventNumber
  id: OriginalEventNumber
  parent: EventStore.Core.Data.ResolvedEvent
  langs:
  - csharp
  - vb
  name: OriginalEventNumber
  nameWithType: ResolvedEvent.OriginalEventNumber
  fullName: EventStore.Core.Data.ResolvedEvent.OriginalEventNumber
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: OriginalEventNumber
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 19
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public long OriginalEventNumber { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property OriginalEventNumber As Long
  overload: EventStore.Core.Data.ResolvedEvent.OriginalEventNumber*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Data.ResolvedEvent.ForUnresolvedEvent(EventStore.Core.Data.EventRecord,System.Nullable{System.Int64})
  commentId: M:EventStore.Core.Data.ResolvedEvent.ForUnresolvedEvent(EventStore.Core.Data.EventRecord,System.Nullable{System.Int64})
  id: ForUnresolvedEvent(EventStore.Core.Data.EventRecord,System.Nullable{System.Int64})
  parent: EventStore.Core.Data.ResolvedEvent
  langs:
  - csharp
  - vb
  name: ForUnresolvedEvent(EventRecord, Nullable<Int64>)
  nameWithType: ResolvedEvent.ForUnresolvedEvent(EventRecord, Nullable<Int64>)
  fullName: EventStore.Core.Data.ResolvedEvent.ForUnresolvedEvent(EventStore.Core.Data.EventRecord, System.Nullable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ForUnresolvedEvent
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 38
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public static ResolvedEvent ForUnresolvedEvent(EventRecord event, long? commitPosition = null)
    parameters:
    - id: event
      type: EventStore.Core.Data.EventRecord
    - id: commitPosition
      type: System.Nullable{System.Int64}
    return:
      type: EventStore.Core.Data.ResolvedEvent
    content.vb: Public Shared Function ForUnresolvedEvent(event As EventRecord, commitPosition As Long? = Nothing) As ResolvedEvent
  overload: EventStore.Core.Data.ResolvedEvent.ForUnresolvedEvent*
  nameWithType.vb: ResolvedEvent.ForUnresolvedEvent(EventRecord, Nullable(Of Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Data.ResolvedEvent.ForUnresolvedEvent(EventStore.Core.Data.EventRecord, System.Nullable(Of System.Int64))
  name.vb: ForUnresolvedEvent(EventRecord, Nullable(Of Int64))
- uid: EventStore.Core.Data.ResolvedEvent.ForResolvedLink(EventStore.Core.Data.EventRecord,EventStore.Core.Data.EventRecord,System.Nullable{System.Int64})
  commentId: M:EventStore.Core.Data.ResolvedEvent.ForResolvedLink(EventStore.Core.Data.EventRecord,EventStore.Core.Data.EventRecord,System.Nullable{System.Int64})
  id: ForResolvedLink(EventStore.Core.Data.EventRecord,EventStore.Core.Data.EventRecord,System.Nullable{System.Int64})
  parent: EventStore.Core.Data.ResolvedEvent
  langs:
  - csharp
  - vb
  name: ForResolvedLink(EventRecord, EventRecord, Nullable<Int64>)
  nameWithType: ResolvedEvent.ForResolvedLink(EventRecord, EventRecord, Nullable<Int64>)
  fullName: EventStore.Core.Data.ResolvedEvent.ForResolvedLink(EventStore.Core.Data.EventRecord, EventStore.Core.Data.EventRecord, System.Nullable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ForResolvedLink
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 43
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public static ResolvedEvent ForResolvedLink(EventRecord event, EventRecord link, long? commitPosition = null)
    parameters:
    - id: event
      type: EventStore.Core.Data.EventRecord
    - id: link
      type: EventStore.Core.Data.EventRecord
    - id: commitPosition
      type: System.Nullable{System.Int64}
    return:
      type: EventStore.Core.Data.ResolvedEvent
    content.vb: Public Shared Function ForResolvedLink(event As EventRecord, link As EventRecord, commitPosition As Long? = Nothing) As ResolvedEvent
  overload: EventStore.Core.Data.ResolvedEvent.ForResolvedLink*
  nameWithType.vb: ResolvedEvent.ForResolvedLink(EventRecord, EventRecord, Nullable(Of Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Data.ResolvedEvent.ForResolvedLink(EventStore.Core.Data.EventRecord, EventStore.Core.Data.EventRecord, System.Nullable(Of System.Int64))
  name.vb: ForResolvedLink(EventRecord, EventRecord, Nullable(Of Int64))
- uid: EventStore.Core.Data.ResolvedEvent.ForFailedResolvedLink(EventStore.Core.Data.EventRecord,EventStore.Core.Data.ReadEventResult,System.Nullable{System.Int64})
  commentId: M:EventStore.Core.Data.ResolvedEvent.ForFailedResolvedLink(EventStore.Core.Data.EventRecord,EventStore.Core.Data.ReadEventResult,System.Nullable{System.Int64})
  id: ForFailedResolvedLink(EventStore.Core.Data.EventRecord,EventStore.Core.Data.ReadEventResult,System.Nullable{System.Int64})
  parent: EventStore.Core.Data.ResolvedEvent
  langs:
  - csharp
  - vb
  name: ForFailedResolvedLink(EventRecord, ReadEventResult, Nullable<Int64>)
  nameWithType: ResolvedEvent.ForFailedResolvedLink(EventRecord, ReadEventResult, Nullable<Int64>)
  fullName: EventStore.Core.Data.ResolvedEvent.ForFailedResolvedLink(EventStore.Core.Data.EventRecord, EventStore.Core.Data.ReadEventResult, System.Nullable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ForFailedResolvedLink
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 48
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public static ResolvedEvent ForFailedResolvedLink(EventRecord link, ReadEventResult resolveResult, long? commitPosition = null)
    parameters:
    - id: link
      type: EventStore.Core.Data.EventRecord
    - id: resolveResult
      type: EventStore.Core.Data.ReadEventResult
    - id: commitPosition
      type: System.Nullable{System.Int64}
    return:
      type: EventStore.Core.Data.ResolvedEvent
    content.vb: Public Shared Function ForFailedResolvedLink(link As EventRecord, resolveResult As ReadEventResult, commitPosition As Long? = Nothing) As ResolvedEvent
  overload: EventStore.Core.Data.ResolvedEvent.ForFailedResolvedLink*
  nameWithType.vb: ResolvedEvent.ForFailedResolvedLink(EventRecord, ReadEventResult, Nullable(Of Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Data.ResolvedEvent.ForFailedResolvedLink(EventStore.Core.Data.EventRecord, EventStore.Core.Data.ReadEventResult, System.Nullable(Of System.Int64))
  name.vb: ForFailedResolvedLink(EventRecord, ReadEventResult, Nullable(Of Int64))
- uid: EventStore.Core.Data.ResolvedEvent.WithoutPosition
  commentId: M:EventStore.Core.Data.ResolvedEvent.WithoutPosition
  id: WithoutPosition
  parent: EventStore.Core.Data.ResolvedEvent
  langs:
  - csharp
  - vb
  name: WithoutPosition()
  nameWithType: ResolvedEvent.WithoutPosition()
  fullName: EventStore.Core.Data.ResolvedEvent.WithoutPosition()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Data/ResolvedEvent.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: WithoutPosition
    path: ../EventStore/src/EventStore.Core/Data/ResolvedEvent.cs
    startLine: 53
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Data
  syntax:
    content: public ResolvedEvent WithoutPosition()
    return:
      type: EventStore.Core.Data.ResolvedEvent
    content.vb: Public Function WithoutPosition As ResolvedEvent
  overload: EventStore.Core.Data.ResolvedEvent.WithoutPosition*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: EventStore.Core.Data.ResolvedEvent.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  parent: EventStore.Projections.Core.Utils.EnumExtensions
  definition: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<ResolvedEvent>()
  nameWithType: EnumExtensions.EnumValueName<ResolvedEvent>()
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.Core.Data.ResolvedEvent>()
  nameWithType.vb: EnumExtensions.EnumValueName(Of ResolvedEvent)()
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.Core.Data.ResolvedEvent)()
  name.vb: EnumValueName(Of ResolvedEvent)()
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName<ResolvedEvent>
    nameWithType: EnumExtensions.EnumValueName<ResolvedEvent>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.Core.Data.ResolvedEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName(Of ResolvedEvent)
    nameWithType: EnumExtensions.EnumValueName(Of ResolvedEvent)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.Core.Data.ResolvedEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Data.ResolvedEvent.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ResolvedEvent>()
  nameWithType: ProtobufExtensions.Serialize<ResolvedEvent>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Data.ResolvedEvent>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ResolvedEvent)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Data.ResolvedEvent)()
  name.vb: Serialize(Of ResolvedEvent)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ResolvedEvent>
    nameWithType: ProtobufExtensions.Serialize<ResolvedEvent>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Data.ResolvedEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ResolvedEvent)
    nameWithType: ProtobufExtensions.Serialize(Of ResolvedEvent)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Data.ResolvedEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Data.ResolvedEvent.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ResolvedEvent>()
  nameWithType: ProtobufExtensions.SerializeToArray<ResolvedEvent>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Data.ResolvedEvent>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ResolvedEvent)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Data.ResolvedEvent)()
  name.vb: SerializeToArray(Of ResolvedEvent)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ResolvedEvent>
    nameWithType: ProtobufExtensions.SerializeToArray<ResolvedEvent>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Data.ResolvedEvent>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ResolvedEvent)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ResolvedEvent)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Data.ResolvedEvent)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<T>(T)
  nameWithType: EnumExtensions.EnumValueName<T>(T)
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>(T)
  nameWithType.vb: EnumExtensions.EnumValueName(Of T)(T)
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)(T)
  name.vb: EnumValueName(Of T)(T)
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName<T>
    nameWithType: EnumExtensions.EnumValueName<T>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName(Of T)
    nameWithType: EnumExtensions.EnumValueName(Of T)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions
  commentId: T:EventStore.Projections.Core.Utils.EnumExtensions
  parent: EventStore.Projections.Core.Utils
  name: EnumExtensions
  nameWithType: EnumExtensions
  fullName: EventStore.Projections.Core.Utils.EnumExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils
  commentId: N:EventStore.Projections.Core.Utils
  name: EventStore.Projections.Core.Utils
  nameWithType: EventStore.Projections.Core.Utils
  fullName: EventStore.Projections.Core.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Data.ResolvedEvent[]
  isExternal: true
  name: ResolvedEvent[]
  nameWithType: ResolvedEvent[]
  fullName: EventStore.Core.Data.ResolvedEvent[]
  nameWithType.vb: ResolvedEvent()
  fullName.vb: EventStore.Core.Data.ResolvedEvent()
  name.vb: ResolvedEvent()
  spec.csharp:
  - uid: EventStore.Core.Data.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.Core.Data.ResolvedEvent
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Data.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.Core.Data.ResolvedEvent
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Data.ResolvedEvent
  commentId: T:EventStore.Core.Data.ResolvedEvent
  parent: EventStore.Core.Data
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.Core.Data.ResolvedEvent
- uid: EventStore.Core.Data.EventRecord
  commentId: T:EventStore.Core.Data.EventRecord
  parent: EventStore.Core.Data
  name: EventRecord
  nameWithType: EventRecord
  fullName: EventStore.Core.Data.EventRecord
- uid: EventStore.Core.Data.ResolvedEvent.OriginalEvent*
  commentId: Overload:EventStore.Core.Data.ResolvedEvent.OriginalEvent
  name: OriginalEvent
  nameWithType: ResolvedEvent.OriginalEvent
  fullName: EventStore.Core.Data.ResolvedEvent.OriginalEvent
- uid: System.Nullable{EventStore.Core.Data.TFPos}
  commentId: '!:System.Nullable{EventStore.Core.Data.TFPos}'
  definition: System.Nullable`1
  name: Nullable<TFPos>
  nameWithType: Nullable<TFPos>
  fullName: System.Nullable<EventStore.Core.Data.TFPos>
  nameWithType.vb: Nullable(Of TFPos)
  fullName.vb: System.Nullable(Of EventStore.Core.Data.TFPos)
  name.vb: Nullable(Of TFPos)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Data.TFPos
    name: TFPos
    nameWithType: TFPos
    fullName: EventStore.Core.Data.TFPos
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Data.TFPos
    name: TFPos
    nameWithType: TFPos
    fullName: EventStore.Core.Data.TFPos
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Data.ReadEventResult
  commentId: T:EventStore.Core.Data.ReadEventResult
  parent: EventStore.Core.Data
  name: ReadEventResult
  nameWithType: ReadEventResult
  fullName: EventStore.Core.Data.ReadEventResult
- uid: EventStore.Core.Data.ResolvedEvent.OriginalStreamId*
  commentId: Overload:EventStore.Core.Data.ResolvedEvent.OriginalStreamId
  name: OriginalStreamId
  nameWithType: ResolvedEvent.OriginalStreamId
  fullName: EventStore.Core.Data.ResolvedEvent.OriginalStreamId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Data.ResolvedEvent.OriginalEventNumber*
  commentId: Overload:EventStore.Core.Data.ResolvedEvent.OriginalEventNumber
  name: OriginalEventNumber
  nameWithType: ResolvedEvent.OriginalEventNumber
  fullName: EventStore.Core.Data.ResolvedEvent.OriginalEventNumber
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Data.ResolvedEvent.ForUnresolvedEvent*
  commentId: Overload:EventStore.Core.Data.ResolvedEvent.ForUnresolvedEvent
  name: ForUnresolvedEvent
  nameWithType: ResolvedEvent.ForUnresolvedEvent
  fullName: EventStore.Core.Data.ResolvedEvent.ForUnresolvedEvent
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Data.ResolvedEvent.ForResolvedLink*
  commentId: Overload:EventStore.Core.Data.ResolvedEvent.ForResolvedLink
  name: ForResolvedLink
  nameWithType: ResolvedEvent.ForResolvedLink
  fullName: EventStore.Core.Data.ResolvedEvent.ForResolvedLink
- uid: EventStore.Core.Data.ResolvedEvent.ForFailedResolvedLink*
  commentId: Overload:EventStore.Core.Data.ResolvedEvent.ForFailedResolvedLink
  name: ForFailedResolvedLink
  nameWithType: ResolvedEvent.ForFailedResolvedLink
  fullName: EventStore.Core.Data.ResolvedEvent.ForFailedResolvedLink
- uid: EventStore.Core.Data.ResolvedEvent.WithoutPosition*
  commentId: Overload:EventStore.Core.Data.ResolvedEvent.WithoutPosition
  name: WithoutPosition
  nameWithType: ResolvedEvent.WithoutPosition
  fullName: EventStore.Core.Data.ResolvedEvent.WithoutPosition

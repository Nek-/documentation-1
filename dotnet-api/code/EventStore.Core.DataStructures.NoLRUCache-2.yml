### YamlMime:ManagedReference
items:
- uid: EventStore.Core.DataStructures.NoLRUCache`2
  commentId: T:EventStore.Core.DataStructures.NoLRUCache`2
  id: NoLRUCache`2
  parent: EventStore.Core.DataStructures
  children:
  - EventStore.Core.DataStructures.NoLRUCache`2.Put(`0,`1)
  - EventStore.Core.DataStructures.NoLRUCache`2.Put``1(`0,``0,Func{`0,``0,`1},Func{`0,`1,``0,`1})
  - EventStore.Core.DataStructures.NoLRUCache`2.TryGet(`0,`1@)
  langs:
  - csharp
  - vb
  name: NoLRUCache<TKey, TValue>
  nameWithType: NoLRUCache<TKey, TValue>
  fullName: EventStore.Core.DataStructures.NoLRUCache<TKey, TValue>
  type: Class
  source:
    remote:
      path: src/EventStore.Core/DataStructures/NoLRUCache.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: NoLRUCache
    path: ../EventStore/src/EventStore.Core/DataStructures/NoLRUCache.cs
    startLine: 4
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: 'public class NoLRUCache<TKey, TValue> : object, ILRUCache<TKey, TValue>'
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      Public Class NoLRUCache(Of TKey, TValue)
          Inherits Object
          Implements ILRUCache(Of TKey, TValue)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.DataStructures.ILRUCache{{TKey},{TValue}}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.DataStructures.NoLRUCache`2.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.DataStructures.NoLRUCache`2.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  nameWithType.vb: NoLRUCache(Of TKey, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: EventStore.Core.DataStructures.NoLRUCache(Of TKey, TValue)
  name.vb: NoLRUCache(Of TKey, TValue)
- uid: EventStore.Core.DataStructures.NoLRUCache`2.TryGet(`0,`1@)
  commentId: M:EventStore.Core.DataStructures.NoLRUCache`2.TryGet(`0,`1@)
  id: TryGet(`0,`1@)
  parent: EventStore.Core.DataStructures.NoLRUCache`2
  langs:
  - csharp
  - vb
  name: TryGet(TKey, out TValue)
  nameWithType: NoLRUCache<TKey, TValue>.TryGet(TKey, out TValue)
  fullName: EventStore.Core.DataStructures.NoLRUCache<TKey, TValue>.TryGet(TKey, out TValue)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/DataStructures/NoLRUCache.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: TryGet
    path: ../EventStore/src/EventStore.Core/DataStructures/NoLRUCache.cs
    startLine: 6
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public bool TryGet(TKey key, out TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function TryGet(key As TKey, ByRef value As TValue) As Boolean
  overload: EventStore.Core.DataStructures.NoLRUCache`2.TryGet*
  implements:
  - EventStore.Core.DataStructures.ILRUCache{{TKey},{TValue}}.TryGet({TKey},{TValue}@)
  nameWithType.vb: NoLRUCache(Of TKey, TValue).TryGet(TKey, ByRef TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.DataStructures.NoLRUCache(Of TKey, TValue).TryGet(TKey, ByRef TValue)
  name.vb: TryGet(TKey, ByRef TValue)
- uid: EventStore.Core.DataStructures.NoLRUCache`2.Put(`0,`1)
  commentId: M:EventStore.Core.DataStructures.NoLRUCache`2.Put(`0,`1)
  id: Put(`0,`1)
  parent: EventStore.Core.DataStructures.NoLRUCache`2
  langs:
  - csharp
  - vb
  name: Put(TKey, TValue)
  nameWithType: NoLRUCache<TKey, TValue>.Put(TKey, TValue)
  fullName: EventStore.Core.DataStructures.NoLRUCache<TKey, TValue>.Put(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/DataStructures/NoLRUCache.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Put
    path: ../EventStore/src/EventStore.Core/DataStructures/NoLRUCache.cs
    startLine: 12
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public TValue Put(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: '{TValue}'
    content.vb: Public Function Put(key As TKey, value As TValue) As TValue
  overload: EventStore.Core.DataStructures.NoLRUCache`2.Put*
  implements:
  - EventStore.Core.DataStructures.ILRUCache{{TKey},{TValue}}.Put({TKey},{TValue})
  nameWithType.vb: NoLRUCache(Of TKey, TValue).Put(TKey, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.DataStructures.NoLRUCache(Of TKey, TValue).Put(TKey, TValue)
- uid: EventStore.Core.DataStructures.NoLRUCache`2.Put``1(`0,``0,Func{`0,``0,`1},Func{`0,`1,``0,`1})
  commentId: M:EventStore.Core.DataStructures.NoLRUCache`2.Put``1(`0,``0,Func{`0,``0,`1},Func{`0,`1,``0,`1})
  id: Put``1(`0,``0,Func{`0,``0,`1},Func{`0,`1,``0,`1})
  parent: EventStore.Core.DataStructures.NoLRUCache`2
  langs:
  - csharp
  - vb
  name: Put<T>(TKey, T, Func<TKey, T, TValue>, Func<TKey, TValue, T, TValue>)
  nameWithType: NoLRUCache<TKey, TValue>.Put<T>(TKey, T, Func<TKey, T, TValue>, Func<TKey, TValue, T, TValue>)
  fullName: EventStore.Core.DataStructures.NoLRUCache<TKey, TValue>.Put<T>(TKey, T, Func<TKey, T, TValue>, Func<TKey, TValue, T, TValue>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/DataStructures/NoLRUCache.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Put
    path: ../EventStore/src/EventStore.Core/DataStructures/NoLRUCache.cs
    startLine: 17
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public TValue Put<T>(TKey key, T userData, Func<TKey, T, TValue> addFactory, Func<TKey, TValue, T, TValue> updateFactory)
    parameters:
    - id: key
      type: '{TKey}'
    - id: userData
      type: '{T}'
    - id: addFactory
      type: Func{{TKey},{T},{TValue}}
    - id: updateFactory
      type: Func{{TKey},{TValue},{T},{TValue}}
    typeParameters:
    - id: T
    return:
      type: '{TValue}'
    content.vb: Public Function Put(Of T)(key As TKey, userData As T, addFactory As Func(Of TKey, T, TValue), updateFactory As Func(Of TKey, TValue, T, TValue)) As TValue
  overload: EventStore.Core.DataStructures.NoLRUCache`2.Put*
  implements:
  - EventStore.Core.DataStructures.ILRUCache{{TKey},{TValue}}.Put``1({TKey},{T},Func{{TKey},{T},{TValue}},Func{{TKey},{TValue},{T},{TValue}})
  nameWithType.vb: NoLRUCache(Of TKey, TValue).Put(Of T)(TKey, T, Func(Of TKey, T, TValue), Func(Of TKey, TValue, T, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.DataStructures.NoLRUCache(Of TKey, TValue).Put(Of T)(TKey, T, Func(Of TKey, T, TValue), Func(Of TKey, TValue, T, TValue))
  name.vb: Put(Of T)(TKey, T, Func(Of TKey, T, TValue), Func(Of TKey, TValue, T, TValue))
references:
- uid: EventStore.Core.DataStructures
  commentId: N:EventStore.Core.DataStructures
  name: EventStore.Core.DataStructures
  nameWithType: EventStore.Core.DataStructures
  fullName: EventStore.Core.DataStructures
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.DataStructures.ILRUCache{{TKey},{TValue}}
  commentId: T:EventStore.Core.DataStructures.ILRUCache{`0,`1}
  parent: EventStore.Core.DataStructures
  definition: EventStore.Core.DataStructures.ILRUCache`2
  name: ILRUCache<TKey, TValue>
  nameWithType: ILRUCache<TKey, TValue>
  fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>
  nameWithType.vb: ILRUCache(Of TKey, TValue)
  fullName.vb: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue)
  name.vb: ILRUCache(Of TKey, TValue)
  spec.csharp:
  - uid: EventStore.Core.DataStructures.ILRUCache`2
    name: ILRUCache
    nameWithType: ILRUCache
    fullName: EventStore.Core.DataStructures.ILRUCache
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.DataStructures.ILRUCache`2
    name: ILRUCache
    nameWithType: ILRUCache
    fullName: EventStore.Core.DataStructures.ILRUCache
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.DataStructures.NoLRUCache`2.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<NoLRUCache<TKey, TValue>>()
  nameWithType: ProtobufExtensions.Serialize<NoLRUCache<TKey, TValue>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.DataStructures.NoLRUCache<TKey, TValue>>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of NoLRUCache(Of TKey, TValue))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.DataStructures.NoLRUCache(Of TKey, TValue))()
  name.vb: Serialize(Of NoLRUCache(Of TKey, TValue))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<NoLRUCache<TKey, TValue>>
    nameWithType: ProtobufExtensions.Serialize<NoLRUCache<TKey, TValue>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.DataStructures.NoLRUCache<TKey, TValue>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of NoLRUCache(Of TKey, TValue))
    nameWithType: ProtobufExtensions.Serialize(Of NoLRUCache(Of TKey, TValue))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.DataStructures.NoLRUCache(Of TKey, TValue))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.DataStructures.NoLRUCache`2.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<NoLRUCache<TKey, TValue>>()
  nameWithType: ProtobufExtensions.SerializeToArray<NoLRUCache<TKey, TValue>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.DataStructures.NoLRUCache<TKey, TValue>>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of NoLRUCache(Of TKey, TValue))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.DataStructures.NoLRUCache(Of TKey, TValue))()
  name.vb: SerializeToArray(Of NoLRUCache(Of TKey, TValue))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<NoLRUCache<TKey, TValue>>
    nameWithType: ProtobufExtensions.SerializeToArray<NoLRUCache<TKey, TValue>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.DataStructures.NoLRUCache<TKey, TValue>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of NoLRUCache(Of TKey, TValue))
    nameWithType: ProtobufExtensions.SerializeToArray(Of NoLRUCache(Of TKey, TValue))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.DataStructures.NoLRUCache(Of TKey, TValue))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.DataStructures.ILRUCache`2
  commentId: T:EventStore.Core.DataStructures.ILRUCache`2
  name: ILRUCache<TKey, TValue>
  nameWithType: ILRUCache<TKey, TValue>
  fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>
  nameWithType.vb: ILRUCache(Of TKey, TValue)
  fullName.vb: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue)
  name.vb: ILRUCache(Of TKey, TValue)
  spec.csharp:
  - uid: EventStore.Core.DataStructures.ILRUCache`2
    name: ILRUCache
    nameWithType: ILRUCache
    fullName: EventStore.Core.DataStructures.ILRUCache
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.DataStructures.ILRUCache`2
    name: ILRUCache
    nameWithType: ILRUCache
    fullName: EventStore.Core.DataStructures.ILRUCache
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.DataStructures.NoLRUCache`2.TryGet*
  commentId: Overload:EventStore.Core.DataStructures.NoLRUCache`2.TryGet
  name: TryGet
  nameWithType: NoLRUCache<TKey, TValue>.TryGet
  fullName: EventStore.Core.DataStructures.NoLRUCache<TKey, TValue>.TryGet
  nameWithType.vb: NoLRUCache(Of TKey, TValue).TryGet
  fullName.vb: EventStore.Core.DataStructures.NoLRUCache(Of TKey, TValue).TryGet
- uid: EventStore.Core.DataStructures.ILRUCache{{TKey},{TValue}}.TryGet({TKey},{TValue}@)
  commentId: M:EventStore.Core.DataStructures.ILRUCache{`0,`1}.TryGet(`0,`1@)
  parent: EventStore.Core.DataStructures.ILRUCache{{TKey},{TValue}}
  definition: EventStore.Core.DataStructures.ILRUCache`2.TryGet(`0,`1@)
  name: TryGet(TKey, TValue)
  nameWithType: ILRUCache<TKey, TValue>.TryGet(TKey, TValue)
  fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>.TryGet(TKey, TValue)
  nameWithType.vb: ILRUCache(Of TKey, TValue).TryGet(TKey, TValue)
  fullName.vb: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue).TryGet(TKey, TValue)
  spec.csharp:
  - uid: EventStore.Core.DataStructures.ILRUCache`2.TryGet(`0,`1@)
    name: TryGet
    nameWithType: ILRUCache<TKey, TValue>.TryGet
    fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>.TryGet
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.DataStructures.ILRUCache`2.TryGet(`0,`1@)
    name: TryGet
    nameWithType: ILRUCache(Of TKey, TValue).TryGet
    fullName: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue).TryGet
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.DataStructures.ILRUCache`2.TryGet(`0,`1@)
  commentId: M:EventStore.Core.DataStructures.ILRUCache`2.TryGet(`0,`1@)
  name: TryGet(TKey, TValue)
  nameWithType: ILRUCache<TKey, TValue>.TryGet(TKey, TValue)
  fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>.TryGet(TKey, TValue)
  nameWithType.vb: ILRUCache(Of TKey, TValue).TryGet(TKey, TValue)
  fullName.vb: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue).TryGet(TKey, TValue)
  spec.csharp:
  - uid: EventStore.Core.DataStructures.ILRUCache`2.TryGet(`0,`1@)
    name: TryGet
    nameWithType: ILRUCache<TKey, TValue>.TryGet
    fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>.TryGet
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.DataStructures.ILRUCache`2.TryGet(`0,`1@)
    name: TryGet
    nameWithType: ILRUCache(Of TKey, TValue).TryGet
    fullName: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue).TryGet
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: EventStore.Core.DataStructures.NoLRUCache`2.Put*
  commentId: Overload:EventStore.Core.DataStructures.NoLRUCache`2.Put
  name: Put
  nameWithType: NoLRUCache<TKey, TValue>.Put
  fullName: EventStore.Core.DataStructures.NoLRUCache<TKey, TValue>.Put
  nameWithType.vb: NoLRUCache(Of TKey, TValue).Put
  fullName.vb: EventStore.Core.DataStructures.NoLRUCache(Of TKey, TValue).Put
- uid: EventStore.Core.DataStructures.ILRUCache{{TKey},{TValue}}.Put({TKey},{TValue})
  commentId: M:EventStore.Core.DataStructures.ILRUCache{`0,`1}.Put(`0,`1)
  parent: EventStore.Core.DataStructures.ILRUCache{{TKey},{TValue}}
  definition: EventStore.Core.DataStructures.ILRUCache`2.Put(`0,`1)
  name: Put(TKey, TValue)
  nameWithType: ILRUCache<TKey, TValue>.Put(TKey, TValue)
  fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>.Put(TKey, TValue)
  nameWithType.vb: ILRUCache(Of TKey, TValue).Put(TKey, TValue)
  fullName.vb: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue).Put(TKey, TValue)
  spec.csharp:
  - uid: EventStore.Core.DataStructures.ILRUCache`2.Put(`0,`1)
    name: Put
    nameWithType: ILRUCache<TKey, TValue>.Put
    fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>.Put
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.DataStructures.ILRUCache`2.Put(`0,`1)
    name: Put
    nameWithType: ILRUCache(Of TKey, TValue).Put
    fullName: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue).Put
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.DataStructures.ILRUCache`2.Put(`0,`1)
  commentId: M:EventStore.Core.DataStructures.ILRUCache`2.Put(`0,`1)
  name: Put(TKey, TValue)
  nameWithType: ILRUCache<TKey, TValue>.Put(TKey, TValue)
  fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>.Put(TKey, TValue)
  nameWithType.vb: ILRUCache(Of TKey, TValue).Put(TKey, TValue)
  fullName.vb: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue).Put(TKey, TValue)
  spec.csharp:
  - uid: EventStore.Core.DataStructures.ILRUCache`2.Put(`0,`1)
    name: Put
    nameWithType: ILRUCache<TKey, TValue>.Put
    fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>.Put
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.DataStructures.ILRUCache`2.Put(`0,`1)
    name: Put
    nameWithType: ILRUCache(Of TKey, TValue).Put
    fullName: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue).Put
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.DataStructures.ILRUCache{{TKey},{TValue}}.Put``1({TKey},{T},Func{{TKey},{T},{TValue}},Func{{TKey},{TValue},{T},{TValue}})
  commentId: M:EventStore.Core.DataStructures.ILRUCache{`0,`1}.Put``1(`0,``0,Func{`0,``0,`1},Func{`0,`1,``0,`1})
  parent: EventStore.Core.DataStructures.ILRUCache{{TKey},{TValue}}
  definition: EventStore.Core.DataStructures.ILRUCache`2.Put``1(`0,``0,Func{`0,``0,`1},Func{`0,`1,``0,`1})
  name: Put<T>(TKey, T, Func<TKey, T, TValue>, Func<TKey, TValue, T, TValue>)
  nameWithType: ILRUCache<TKey, TValue>.Put<T>(TKey, T, Func<TKey, T, TValue>, Func<TKey, TValue, T, TValue>)
  fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>.Put<T>(TKey, T, Func<TKey, T, TValue>, Func<TKey, TValue, T, TValue>)
  nameWithType.vb: ILRUCache(Of TKey, TValue).Put(Of T)(TKey, T, Func(Of TKey, T, TValue), Func(Of TKey, TValue, T, TValue))
  fullName.vb: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue).Put(Of T)(TKey, T, Func(Of TKey, T, TValue), Func(Of TKey, TValue, T, TValue))
  name.vb: Put(Of T)(TKey, T, Func(Of TKey, T, TValue), Func(Of TKey, TValue, T, TValue))
  spec.csharp:
  - uid: EventStore.Core.DataStructures.ILRUCache`2.Put``1(`0,``0,Func{`0,``0,`1},Func{`0,`1,``0,`1})
    name: Put<T>
    nameWithType: ILRUCache<TKey, TValue>.Put<T>
    fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>.Put<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.DataStructures.ILRUCache`2.Put``1(`0,``0,Func{`0,``0,`1},Func{`0,`1,``0,`1})
    name: Put(Of T)
    nameWithType: ILRUCache(Of TKey, TValue).Put(Of T)
    fullName: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue).Put(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Func{{TKey},{T},{TValue}}
  commentId: '!:Func{`0,``0,`1}'
  definition: Func`3
  name: Func<TKey, T, TValue>
  nameWithType: Func<TKey, T, TValue>
  fullName: Func<TKey, T, TValue>
  nameWithType.vb: Func(Of TKey, T, TValue)
  fullName.vb: Func(Of TKey, T, TValue)
  name.vb: Func(Of TKey, T, TValue)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{{TKey},{TValue},{T},{TValue}}
  commentId: '!:Func{`0,`1,``0,`1}'
  definition: Func`4
  name: Func<TKey, TValue, T, TValue>
  nameWithType: Func<TKey, TValue, T, TValue>
  fullName: Func<TKey, TValue, T, TValue>
  nameWithType.vb: Func(Of TKey, TValue, T, TValue)
  fullName.vb: Func(Of TKey, TValue, T, TValue)
  name.vb: Func(Of TKey, TValue, T, TValue)
  spec.csharp:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.DataStructures.ILRUCache`2.Put``1(`0,``0,Func{`0,``0,`1},Func{`0,`1,``0,`1})
  commentId: M:EventStore.Core.DataStructures.ILRUCache`2.Put``1(`0,``0,Func{`0,``0,`1},Func{`0,`1,``0,`1})
  isExternal: true
  name: Put<T>(TKey, T, Func<TKey, T, TValue>, Func<TKey, TValue, T, TValue>)
  nameWithType: ILRUCache<TKey, TValue>.Put<T>(TKey, T, Func<TKey, T, TValue>, Func<TKey, TValue, T, TValue>)
  fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>.Put<T>(TKey, T, Func<TKey, T, TValue>, Func<TKey, TValue, T, TValue>)
  nameWithType.vb: ILRUCache(Of TKey, TValue).Put(Of T)(TKey, T, Func(Of TKey, T, TValue), Func(Of TKey, TValue, T, TValue))
  fullName.vb: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue).Put(Of T)(TKey, T, Func(Of TKey, T, TValue), Func(Of TKey, TValue, T, TValue))
  name.vb: Put(Of T)(TKey, T, Func(Of TKey, T, TValue), Func(Of TKey, TValue, T, TValue))
  spec.csharp:
  - uid: EventStore.Core.DataStructures.ILRUCache`2.Put``1(`0,``0,Func{`0,``0,`1},Func{`0,`1,``0,`1})
    name: Put<T>
    nameWithType: ILRUCache<TKey, TValue>.Put<T>
    fullName: EventStore.Core.DataStructures.ILRUCache<TKey, TValue>.Put<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.DataStructures.ILRUCache`2.Put``1(`0,``0,Func{`0,``0,`1},Func{`0,`1,``0,`1})
    name: Put(Of T)
    nameWithType: ILRUCache(Of TKey, TValue).Put(Of T)
    fullName: EventStore.Core.DataStructures.ILRUCache(Of TKey, TValue).Put(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`4
  isExternal: true
  name: Func<, , , >
  nameWithType: Func<, , , >
  fullName: Func<, , , >
  nameWithType.vb: Func(Of , , , )
  fullName.vb: Func(Of , , , )
  name.vb: Func(Of , , , )
  spec.csharp:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

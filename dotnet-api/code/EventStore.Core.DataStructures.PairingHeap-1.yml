### YamlMime:ManagedReference
items:
- uid: EventStore.Core.DataStructures.PairingHeap`1
  commentId: T:EventStore.Core.DataStructures.PairingHeap`1
  id: PairingHeap`1
  parent: EventStore.Core.DataStructures
  children:
  - EventStore.Core.DataStructures.PairingHeap`1.#ctor
  - EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Collections.Generic.IComparer{`0})
  - EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  - EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,`0,System.Boolean})
  - EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Func{`0,`0,System.Boolean})
  - EventStore.Core.DataStructures.PairingHeap`1.Add(`0)
  - EventStore.Core.DataStructures.PairingHeap`1.Count
  - EventStore.Core.DataStructures.PairingHeap`1.DeleteMin
  - EventStore.Core.DataStructures.PairingHeap`1.FindMin
  langs:
  - csharp
  - vb
  name: PairingHeap<T>
  nameWithType: PairingHeap<T>
  fullName: EventStore.Core.DataStructures.PairingHeap<T>
  type: Class
  source:
    id: PairingHeap
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/DataStructures/PairingHeap.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public class PairingHeap<T>
    typeParameters:
    - id: T
    content.vb: Public Class PairingHeap(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.DataStructures.PairingHeap`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.DataStructures.PairingHeap`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  nameWithType.vb: PairingHeap(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T)
  name.vb: PairingHeap(Of T)
- uid: EventStore.Core.DataStructures.PairingHeap`1.Count
  commentId: P:EventStore.Core.DataStructures.PairingHeap`1.Count
  id: Count
  parent: EventStore.Core.DataStructures.PairingHeap`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: PairingHeap<T>.Count
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.Count
  type: Property
  source:
    id: Count
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/DataStructures/PairingHeap.cs
    startLine: 12
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: EventStore.Core.DataStructures.PairingHeap`1.Count*
  nameWithType.vb: PairingHeap(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).Count
- uid: EventStore.Core.DataStructures.PairingHeap`1.#ctor
  commentId: M:EventStore.Core.DataStructures.PairingHeap`1.#ctor
  id: '#ctor'
  parent: EventStore.Core.DataStructures.PairingHeap`1
  langs:
  - csharp
  - vb
  name: PairingHeap()
  nameWithType: PairingHeap<T>.PairingHeap()
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.PairingHeap()
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/DataStructures/PairingHeap.cs
    startLine: 20
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public PairingHeap()
    content.vb: Public Sub New
  overload: EventStore.Core.DataStructures.PairingHeap`1.#ctor*
  nameWithType.vb: PairingHeap(Of T).PairingHeap()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).PairingHeap()
- uid: EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Collections.Generic.IComparer{`0})
  commentId: M:EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IComparer{`0})'
  parent: EventStore.Core.DataStructures.PairingHeap`1
  langs:
  - csharp
  - vb
  name: PairingHeap(IComparer<T>)
  nameWithType: PairingHeap<T>.PairingHeap(IComparer<T>)
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.PairingHeap(System.Collections.Generic.IComparer<T>)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/DataStructures/PairingHeap.cs
    startLine: 23
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public PairingHeap(IComparer<T> comparer)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
    content.vb: Public Sub New(comparer As IComparer(Of T))
  overload: EventStore.Core.DataStructures.PairingHeap`1.#ctor*
  nameWithType.vb: PairingHeap(Of T).PairingHeap(IComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).PairingHeap(System.Collections.Generic.IComparer(Of T))
  name.vb: PairingHeap(IComparer(Of T))
- uid: EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Func{`0,`0,System.Boolean})
  commentId: M:EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Func{`0,`0,System.Boolean})
  id: '#ctor(System.Func{`0,`0,System.Boolean})'
  parent: EventStore.Core.DataStructures.PairingHeap`1
  langs:
  - csharp
  - vb
  name: PairingHeap(Func<T, T, Boolean>)
  nameWithType: PairingHeap<T>.PairingHeap(Func<T, T, Boolean>)
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.PairingHeap(System.Func<T, T, System.Boolean>)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/DataStructures/PairingHeap.cs
    startLine: 28
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public PairingHeap(Func<T, T, bool> compare)
    parameters:
    - id: compare
      type: System.Func{{T},{T},System.Boolean}
    content.vb: Public Sub New(compare As Func(Of T, T, Boolean))
  overload: EventStore.Core.DataStructures.PairingHeap`1.#ctor*
  nameWithType.vb: PairingHeap(Of T).PairingHeap(Func(Of T, T, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).PairingHeap(System.Func(Of T, T, System.Boolean))
  name.vb: PairingHeap(Func(Of T, T, Boolean))
- uid: EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: EventStore.Core.DataStructures.PairingHeap`1
  langs:
  - csharp
  - vb
  name: PairingHeap(IEnumerable<T>)
  nameWithType: PairingHeap<T>.PairingHeap(IEnumerable<T>)
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.PairingHeap(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/DataStructures/PairingHeap.cs
    startLine: 33
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public PairingHeap(IEnumerable<T> items)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Sub New(items As IEnumerable(Of T))
  overload: EventStore.Core.DataStructures.PairingHeap`1.#ctor*
  nameWithType.vb: PairingHeap(Of T).PairingHeap(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).PairingHeap(System.Collections.Generic.IEnumerable(Of T))
  name.vb: PairingHeap(IEnumerable(Of T))
- uid: EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,`0,System.Boolean})
  commentId: M:EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,`0,System.Boolean})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,`0,System.Boolean})'
  parent: EventStore.Core.DataStructures.PairingHeap`1
  langs:
  - csharp
  - vb
  name: PairingHeap(IEnumerable<T>, Func<T, T, Boolean>)
  nameWithType: PairingHeap<T>.PairingHeap(IEnumerable<T>, Func<T, T, Boolean>)
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.PairingHeap(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, System.Boolean>)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/DataStructures/PairingHeap.cs
    startLine: 36
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public PairingHeap(IEnumerable<T> items, Func<T, T, bool> compare)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: compare
      type: System.Func{{T},{T},System.Boolean}
    content.vb: Public Sub New(items As IEnumerable(Of T), compare As Func(Of T, T, Boolean))
  overload: EventStore.Core.DataStructures.PairingHeap`1.#ctor*
  nameWithType.vb: PairingHeap(Of T).PairingHeap(IEnumerable(Of T), Func(Of T, T, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).PairingHeap(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, System.Boolean))
  name.vb: PairingHeap(IEnumerable(Of T), Func(Of T, T, Boolean))
- uid: EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  commentId: M:EventStore.Core.DataStructures.PairingHeap`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})'
  parent: EventStore.Core.DataStructures.PairingHeap`1
  langs:
  - csharp
  - vb
  name: PairingHeap(IEnumerable<T>, IComparer<T>)
  nameWithType: PairingHeap<T>.PairingHeap(IEnumerable<T>, IComparer<T>)
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.PairingHeap(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IComparer<T>)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/DataStructures/PairingHeap.cs
    startLine: 51
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public PairingHeap(IEnumerable<T> items, IComparer<T> comparer)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
    content.vb: Public Sub New(items As IEnumerable(Of T), comparer As IComparer(Of T))
  overload: EventStore.Core.DataStructures.PairingHeap`1.#ctor*
  nameWithType.vb: PairingHeap(Of T).PairingHeap(IEnumerable(Of T), IComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).PairingHeap(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IComparer(Of T))
  name.vb: PairingHeap(IEnumerable(Of T), IComparer(Of T))
- uid: EventStore.Core.DataStructures.PairingHeap`1.Add(`0)
  commentId: M:EventStore.Core.DataStructures.PairingHeap`1.Add(`0)
  id: Add(`0)
  parent: EventStore.Core.DataStructures.PairingHeap`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: PairingHeap<T>.Add(T)
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.Add(T)
  type: Method
  source:
    id: Add
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/DataStructures/PairingHeap.cs
    startLine: 62
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public void Add(T x)
    parameters:
    - id: x
      type: '{T}'
    content.vb: Public Sub Add(x As T)
  overload: EventStore.Core.DataStructures.PairingHeap`1.Add*
  nameWithType.vb: PairingHeap(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).Add(T)
- uid: EventStore.Core.DataStructures.PairingHeap`1.FindMin
  commentId: M:EventStore.Core.DataStructures.PairingHeap`1.FindMin
  id: FindMin
  parent: EventStore.Core.DataStructures.PairingHeap`1
  langs:
  - csharp
  - vb
  name: FindMin()
  nameWithType: PairingHeap<T>.FindMin()
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.FindMin()
  type: Method
  source:
    id: FindMin
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/DataStructures/PairingHeap.cs
    startLine: 73
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public T FindMin()
    return:
      type: '{T}'
    content.vb: Public Function FindMin As T
  overload: EventStore.Core.DataStructures.PairingHeap`1.FindMin*
  nameWithType.vb: PairingHeap(Of T).FindMin()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).FindMin()
- uid: EventStore.Core.DataStructures.PairingHeap`1.DeleteMin
  commentId: M:EventStore.Core.DataStructures.PairingHeap`1.DeleteMin
  id: DeleteMin
  parent: EventStore.Core.DataStructures.PairingHeap`1
  langs:
  - csharp
  - vb
  name: DeleteMin()
  nameWithType: PairingHeap<T>.DeleteMin()
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.DeleteMin()
  type: Method
  source:
    id: DeleteMin
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/DataStructures/PairingHeap.cs
    startLine: 79
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.DataStructures
  syntax:
    content: public T DeleteMin()
    return:
      type: '{T}'
    content.vb: Public Function DeleteMin As T
  overload: EventStore.Core.DataStructures.PairingHeap`1.DeleteMin*
  nameWithType.vb: PairingHeap(Of T).DeleteMin()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).DeleteMin()
references:
- uid: EventStore.Core.DataStructures
  commentId: N:EventStore.Core.DataStructures
  name: EventStore.Core.DataStructures
  nameWithType: EventStore.Core.DataStructures
  fullName: EventStore.Core.DataStructures
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.DataStructures.PairingHeap`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<PairingHeap<T>>()
  nameWithType: ProtobufExtensions.Serialize<PairingHeap<T>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.DataStructures.PairingHeap<T>>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of PairingHeap(Of T))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.DataStructures.PairingHeap(Of T))()
  name.vb: Serialize(Of PairingHeap(Of T))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<PairingHeap<T>>
    nameWithType: ProtobufExtensions.Serialize<PairingHeap<T>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.DataStructures.PairingHeap<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of PairingHeap(Of T))
    nameWithType: ProtobufExtensions.Serialize(Of PairingHeap(Of T))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.DataStructures.PairingHeap(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.DataStructures.PairingHeap`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<PairingHeap<T>>()
  nameWithType: ProtobufExtensions.SerializeToArray<PairingHeap<T>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.DataStructures.PairingHeap<T>>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of PairingHeap(Of T))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.DataStructures.PairingHeap(Of T))()
  name.vb: SerializeToArray(Of PairingHeap(Of T))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<PairingHeap<T>>
    nameWithType: ProtobufExtensions.SerializeToArray<PairingHeap<T>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.DataStructures.PairingHeap<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of PairingHeap(Of T))
    nameWithType: ProtobufExtensions.SerializeToArray(Of PairingHeap(Of T))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.DataStructures.PairingHeap(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.DataStructures.PairingHeap`1.Count*
  commentId: Overload:EventStore.Core.DataStructures.PairingHeap`1.Count
  name: Count
  nameWithType: PairingHeap<T>.Count
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.Count
  nameWithType.vb: PairingHeap(Of T).Count
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.DataStructures.PairingHeap`1.#ctor*
  commentId: Overload:EventStore.Core.DataStructures.PairingHeap`1.#ctor
  name: PairingHeap
  nameWithType: PairingHeap<T>.PairingHeap
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.PairingHeap
  nameWithType.vb: PairingHeap(Of T).PairingHeap
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).PairingHeap
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: T:System.Collections.Generic.IComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func{{T},{T},System.Boolean}
  commentId: T:System.Func{`0,`0,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<T, T, Boolean>
  nameWithType: Func<T, T, Boolean>
  fullName: System.Func<T, T, System.Boolean>
  nameWithType.vb: Func(Of T, T, Boolean)
  fullName.vb: System.Func(Of T, T, System.Boolean)
  name.vb: Func(Of T, T, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.DataStructures.PairingHeap`1.Add*
  commentId: Overload:EventStore.Core.DataStructures.PairingHeap`1.Add
  name: Add
  nameWithType: PairingHeap<T>.Add
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.Add
  nameWithType.vb: PairingHeap(Of T).Add
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).Add
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Core.DataStructures.PairingHeap`1.FindMin*
  commentId: Overload:EventStore.Core.DataStructures.PairingHeap`1.FindMin
  name: FindMin
  nameWithType: PairingHeap<T>.FindMin
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.FindMin
  nameWithType.vb: PairingHeap(Of T).FindMin
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).FindMin
- uid: EventStore.Core.DataStructures.PairingHeap`1.DeleteMin*
  commentId: Overload:EventStore.Core.DataStructures.PairingHeap`1.DeleteMin
  name: DeleteMin
  nameWithType: PairingHeap<T>.DeleteMin
  fullName: EventStore.Core.DataStructures.PairingHeap<T>.DeleteMin
  nameWithType.vb: PairingHeap(Of T).DeleteMin
  fullName.vb: EventStore.Core.DataStructures.PairingHeap(Of T).DeleteMin

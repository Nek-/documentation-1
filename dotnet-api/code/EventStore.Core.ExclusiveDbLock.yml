### YamlMime:ManagedReference
items:
- uid: EventStore.Core.ExclusiveDbLock
  commentId: T:EventStore.Core.ExclusiveDbLock
  id: ExclusiveDbLock
  parent: EventStore.Core
  children:
  - EventStore.Core.ExclusiveDbLock.#ctor(System.String)
  - EventStore.Core.ExclusiveDbLock.Acquire
  - EventStore.Core.ExclusiveDbLock.IsAcquired
  - EventStore.Core.ExclusiveDbLock.MutexName
  - EventStore.Core.ExclusiveDbLock.Release
  langs:
  - csharp
  - vb
  name: ExclusiveDbLock
  nameWithType: ExclusiveDbLock
  fullName: EventStore.Core.ExclusiveDbLock
  type: Class
  source:
    remote:
      path: src/EventStore.Core/ExclusiveDbLock.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ExclusiveDbLock
    path: ../EventStore/src/EventStore.Core/ExclusiveDbLock.cs
    startLine: 10
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: 'public class ExclusiveDbLock : object'
    content.vb: >-
      Public Class ExclusiveDbLock
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.ExclusiveDbLock.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.ExclusiveDbLock.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.ExclusiveDbLock.MutexName
  commentId: F:EventStore.Core.ExclusiveDbLock.MutexName
  id: MutexName
  parent: EventStore.Core.ExclusiveDbLock
  langs:
  - csharp
  - vb
  name: MutexName
  nameWithType: ExclusiveDbLock.MutexName
  fullName: EventStore.Core.ExclusiveDbLock.MutexName
  type: Field
  source:
    remote:
      path: src/EventStore.Core/ExclusiveDbLock.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: MutexName
    path: ../EventStore/src/EventStore.Core/ExclusiveDbLock.cs
    startLine: 14
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public readonly string MutexName
    return:
      type: System.String
    content.vb: Public ReadOnly MutexName As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.ExclusiveDbLock.IsAcquired
  commentId: P:EventStore.Core.ExclusiveDbLock.IsAcquired
  id: IsAcquired
  parent: EventStore.Core.ExclusiveDbLock
  langs:
  - csharp
  - vb
  name: IsAcquired
  nameWithType: ExclusiveDbLock.IsAcquired
  fullName: EventStore.Core.ExclusiveDbLock.IsAcquired
  type: Property
  source:
    remote:
      path: src/EventStore.Core/ExclusiveDbLock.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: IsAcquired
    path: ../EventStore/src/EventStore.Core/ExclusiveDbLock.cs
    startLine: 15
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public bool IsAcquired { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAcquired As Boolean
  overload: EventStore.Core.ExclusiveDbLock.IsAcquired*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.ExclusiveDbLock.#ctor(System.String)
  commentId: M:EventStore.Core.ExclusiveDbLock.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: EventStore.Core.ExclusiveDbLock
  langs:
  - csharp
  - vb
  name: ExclusiveDbLock(String)
  nameWithType: ExclusiveDbLock.ExclusiveDbLock(String)
  fullName: EventStore.Core.ExclusiveDbLock.ExclusiveDbLock(System.String)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/ExclusiveDbLock.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/ExclusiveDbLock.cs
    startLine: 20
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public ExclusiveDbLock(string dbPath)
    parameters:
    - id: dbPath
      type: System.String
    content.vb: Public Sub New(dbPath As String)
  overload: EventStore.Core.ExclusiveDbLock.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.ExclusiveDbLock.Acquire
  commentId: M:EventStore.Core.ExclusiveDbLock.Acquire
  id: Acquire
  parent: EventStore.Core.ExclusiveDbLock
  langs:
  - csharp
  - vb
  name: Acquire()
  nameWithType: ExclusiveDbLock.Acquire()
  fullName: EventStore.Core.ExclusiveDbLock.Acquire()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/ExclusiveDbLock.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Acquire
    path: ../EventStore/src/EventStore.Core/ExclusiveDbLock.cs
    startLine: 27
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public bool Acquire()
    return:
      type: System.Boolean
    content.vb: Public Function Acquire As Boolean
  overload: EventStore.Core.ExclusiveDbLock.Acquire*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.ExclusiveDbLock.Release
  commentId: M:EventStore.Core.ExclusiveDbLock.Release
  id: Release
  parent: EventStore.Core.ExclusiveDbLock
  langs:
  - csharp
  - vb
  name: Release()
  nameWithType: ExclusiveDbLock.Release()
  fullName: EventStore.Core.ExclusiveDbLock.Release()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/ExclusiveDbLock.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Release
    path: ../EventStore/src/EventStore.Core/ExclusiveDbLock.cs
    startLine: 54
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core
  syntax:
    content: public void Release()
    content.vb: Public Sub Release
  overload: EventStore.Core.ExclusiveDbLock.Release*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core
  commentId: N:EventStore.Core
  name: EventStore.Core
  nameWithType: EventStore.Core
  fullName: EventStore.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ExclusiveDbLock.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ExclusiveDbLock>()
  nameWithType: ProtobufExtensions.Serialize<ExclusiveDbLock>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.ExclusiveDbLock>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ExclusiveDbLock)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.ExclusiveDbLock)()
  name.vb: Serialize(Of ExclusiveDbLock)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ExclusiveDbLock>
    nameWithType: ProtobufExtensions.Serialize<ExclusiveDbLock>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.ExclusiveDbLock>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ExclusiveDbLock)
    nameWithType: ProtobufExtensions.Serialize(Of ExclusiveDbLock)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.ExclusiveDbLock)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.ExclusiveDbLock.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ExclusiveDbLock>()
  nameWithType: ProtobufExtensions.SerializeToArray<ExclusiveDbLock>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.ExclusiveDbLock>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ExclusiveDbLock)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.ExclusiveDbLock)()
  name.vb: SerializeToArray(Of ExclusiveDbLock)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ExclusiveDbLock>
    nameWithType: ProtobufExtensions.SerializeToArray<ExclusiveDbLock>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.ExclusiveDbLock>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ExclusiveDbLock)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ExclusiveDbLock)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.ExclusiveDbLock)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.ExclusiveDbLock.IsAcquired*
  commentId: Overload:EventStore.Core.ExclusiveDbLock.IsAcquired
  name: IsAcquired
  nameWithType: ExclusiveDbLock.IsAcquired
  fullName: EventStore.Core.ExclusiveDbLock.IsAcquired
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.ExclusiveDbLock.#ctor*
  commentId: Overload:EventStore.Core.ExclusiveDbLock.#ctor
  name: ExclusiveDbLock
  nameWithType: ExclusiveDbLock.ExclusiveDbLock
  fullName: EventStore.Core.ExclusiveDbLock.ExclusiveDbLock
- uid: EventStore.Core.ExclusiveDbLock.Acquire*
  commentId: Overload:EventStore.Core.ExclusiveDbLock.Acquire
  name: Acquire
  nameWithType: ExclusiveDbLock.Acquire
  fullName: EventStore.Core.ExclusiveDbLock.Acquire
- uid: EventStore.Core.ExclusiveDbLock.Release*
  commentId: Overload:EventStore.Core.ExclusiveDbLock.Release
  name: Release
  nameWithType: ExclusiveDbLock.Release
  fullName: EventStore.Core.ExclusiveDbLock.Release

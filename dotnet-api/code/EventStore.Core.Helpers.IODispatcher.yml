### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Helpers.IODispatcher
  commentId: T:EventStore.Core.Helpers.IODispatcher
  id: IODispatcher
  parent: EventStore.Core.Helpers
  children:
  - EventStore.Core.Helpers.IODispatcher.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Messaging.IEnvelope)
  - EventStore.Core.Helpers.IODispatcher.Awaker
  - EventStore.Core.Helpers.IODispatcher.BackwardReader
  - EventStore.Core.Helpers.IODispatcher.ConfigureStreamAndWriteEvents(System.String,System.Int64,System.Lazy{EventStore.Core.Data.StreamMetadata},EventStore.Core.Data.Event[],System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  - EventStore.Core.Helpers.IODispatcher.Delay(System.TimeSpan,System.Action,System.Nullable{System.Guid})
  - EventStore.Core.Helpers.IODispatcher.DeleteStream(System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  - EventStore.Core.Helpers.IODispatcher.ForwardReader
  - EventStore.Core.Helpers.IODispatcher.Handle(EventStore.Core.Helpers.IODispatcherDelayedMessage)
  - EventStore.Core.Helpers.IODispatcher.QueueWriteEvents(System.Guid,System.String,System.Int64,EventStore.Core.Data.Event[],System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  - EventStore.Core.Helpers.IODispatcher.ReadBackward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action,System.Guid)
  - EventStore.Core.Helpers.IODispatcher.ReadBackward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Nullable{System.Guid})
  - EventStore.Core.Helpers.IODispatcher.ReadForward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action,System.Guid)
  - EventStore.Core.Helpers.IODispatcher.ReadForward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Nullable{System.Guid})
  - EventStore.Core.Helpers.IODispatcher.ReadTimeoutMs
  - EventStore.Core.Helpers.IODispatcher.StreamDeleter
  - EventStore.Core.Helpers.IODispatcher.SubscribeAwake(System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  - EventStore.Core.Helpers.IODispatcher.UnsubscribeAwake(System.Guid)
  - EventStore.Core.Helpers.IODispatcher.UpdateStreamAcl(System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  - EventStore.Core.Helpers.IODispatcher.WriteEvent(System.String,System.Int64,EventStore.Core.Data.Event,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  - EventStore.Core.Helpers.IODispatcher.WriteEvents(System.String,System.Int64,EventStore.Core.Data.Event[],System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  - EventStore.Core.Helpers.IODispatcher.Writer
  langs:
  - csharp
  - vb
  name: IODispatcher
  nameWithType: IODispatcher
  fullName: EventStore.Core.Helpers.IODispatcher
  type: Class
  source:
    id: IODispatcher
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 12
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: 'public sealed class IODispatcher : IHandle<IODispatcherDelayedMessage>'
    content.vb: >-
      Public NotInheritable Class IODispatcher
          Implements IHandle(Of IODispatcherDelayedMessage)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Helpers.IODispatcherDelayedMessage}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Bus.IHandle{EventStore.Core.Helpers.IODispatcherDelayedMessage}.EventStore.Core.Bus.HandleExtensions.WidenFrom``2
  - EventStore.Core.Bus.IHandle{EventStore.Core.Helpers.IODispatcherDelayedMessage}.EventStore.Core.Bus.HandleExtensions.NarrowTo``2
  - EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
  - EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
  - EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  - EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  - EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  - EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  - EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
  - EventStore.Core.Helpers.IODispatcher.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Helpers.IODispatcher.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: EventStore.Core.Helpers.IODispatcher.ReadTimeoutMs
  commentId: F:EventStore.Core.Helpers.IODispatcher.ReadTimeoutMs
  id: ReadTimeoutMs
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: ReadTimeoutMs
  nameWithType: IODispatcher.ReadTimeoutMs
  fullName: EventStore.Core.Helpers.IODispatcher.ReadTimeoutMs
  type: Field
  source:
    id: ReadTimeoutMs
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 13
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public const int ReadTimeoutMs = 10000
    return:
      type: System.Int32
    content.vb: Public Const ReadTimeoutMs As Integer = 10000
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Helpers.IODispatcher.ForwardReader
  commentId: F:EventStore.Core.Helpers.IODispatcher.ForwardReader
  id: ForwardReader
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: ForwardReader
  nameWithType: IODispatcher.ForwardReader
  fullName: EventStore.Core.Helpers.IODispatcher.ForwardReader
  type: Field
  source:
    id: ForwardReader
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 24
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public readonly RequestResponseDispatcher<ClientMessage.ReadStreamEventsForward, ClientMessage.ReadStreamEventsForwardCompleted> ForwardReader
    return:
      type: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward,EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted}
    content.vb: Public ReadOnly ForwardReader As RequestResponseDispatcher(Of ClientMessage.ReadStreamEventsForward, ClientMessage.ReadStreamEventsForwardCompleted)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Helpers.IODispatcher.BackwardReader
  commentId: F:EventStore.Core.Helpers.IODispatcher.BackwardReader
  id: BackwardReader
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: BackwardReader
  nameWithType: IODispatcher.BackwardReader
  fullName: EventStore.Core.Helpers.IODispatcher.BackwardReader
  type: Field
  source:
    id: BackwardReader
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 28
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public readonly RequestResponseDispatcher<ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted> BackwardReader
    return:
      type: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward,EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted}
    content.vb: Public ReadOnly BackwardReader As RequestResponseDispatcher(Of ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Helpers.IODispatcher.Writer
  commentId: F:EventStore.Core.Helpers.IODispatcher.Writer
  id: Writer
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: Writer
  nameWithType: IODispatcher.Writer
  fullName: EventStore.Core.Helpers.IODispatcher.Writer
  type: Field
  source:
    id: Writer
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 30
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public readonly RequestResponseDispatcher<ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted> Writer
    return:
      type: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.WriteEvents,EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
    content.vb: Public ReadOnly Writer As RequestResponseDispatcher(Of ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Helpers.IODispatcher.StreamDeleter
  commentId: F:EventStore.Core.Helpers.IODispatcher.StreamDeleter
  id: StreamDeleter
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: StreamDeleter
  nameWithType: IODispatcher.StreamDeleter
  fullName: EventStore.Core.Helpers.IODispatcher.StreamDeleter
  type: Field
  source:
    id: StreamDeleter
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 33
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public readonly RequestResponseDispatcher<ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted> StreamDeleter
    return:
      type: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.DeleteStream,EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted}
    content.vb: Public ReadOnly StreamDeleter As RequestResponseDispatcher(Of ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Helpers.IODispatcher.Awaker
  commentId: F:EventStore.Core.Helpers.IODispatcher.Awaker
  id: Awaker
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: Awaker
  nameWithType: IODispatcher.Awaker
  fullName: EventStore.Core.Helpers.IODispatcher.Awaker
  type: Field
  source:
    id: Awaker
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 36
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public readonly RequestResponseDispatcher<AwakeServiceMessage.SubscribeAwake, IODispatcherDelayedMessage> Awaker
    return:
      type: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake,EventStore.Core.Helpers.IODispatcherDelayedMessage}
    content.vb: Public ReadOnly Awaker As RequestResponseDispatcher(Of AwakeServiceMessage.SubscribeAwake, IODispatcherDelayedMessage)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Helpers.IODispatcher.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Messaging.IEnvelope)
  commentId: M:EventStore.Core.Helpers.IODispatcher.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Messaging.IEnvelope)
  id: '#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Messaging.IEnvelope)'
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: IODispatcher(IPublisher, IEnvelope)
  nameWithType: IODispatcher.IODispatcher(IPublisher, IEnvelope)
  fullName: EventStore.Core.Helpers.IODispatcher.IODispatcher(EventStore.Core.Bus.IPublisher, EventStore.Core.Messaging.IEnvelope)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 38
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public IODispatcher(IPublisher publisher, IEnvelope envelope)
    parameters:
    - id: publisher
      type: EventStore.Core.Bus.IPublisher
    - id: envelope
      type: EventStore.Core.Messaging.IEnvelope
    content.vb: Public Sub New(publisher As IPublisher, envelope As IEnvelope)
  overload: EventStore.Core.Helpers.IODispatcher.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Helpers.IODispatcher.ReadBackward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Nullable{System.Guid})
  commentId: M:EventStore.Core.Helpers.IODispatcher.ReadBackward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Nullable{System.Guid})
  id: ReadBackward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Nullable{System.Guid})
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: ReadBackward(String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsBackwardCompleted>, Nullable<Guid>)
  nameWithType: IODispatcher.ReadBackward(String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsBackwardCompleted>, Nullable<Guid>)
  fullName: EventStore.Core.Helpers.IODispatcher.ReadBackward(System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted>, System.Nullable<System.Guid>)
  type: Method
  source:
    id: ReadBackward
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 78
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public Guid ReadBackward(string streamId, long fromEventNumber, int maxCount, bool resolveLinks, IPrincipal principal, Action<ClientMessage.ReadStreamEventsBackwardCompleted> action, Guid? corrId = default(Guid? ))
    parameters:
    - id: streamId
      type: System.String
    - id: fromEventNumber
      type: System.Int64
    - id: maxCount
      type: System.Int32
    - id: resolveLinks
      type: System.Boolean
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: action
      type: System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted}
    - id: corrId
      type: System.Nullable{System.Guid}
    return:
      type: System.Guid
    content.vb: Public Function ReadBackward(streamId As String, fromEventNumber As Long, maxCount As Integer, resolveLinks As Boolean, principal As IPrincipal, action As Action(Of ClientMessage.ReadStreamEventsBackwardCompleted), corrId As Guid? = Nothing) As Guid
  overload: EventStore.Core.Helpers.IODispatcher.ReadBackward*
  nameWithType.vb: IODispatcher.ReadBackward(String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsBackwardCompleted), Nullable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Helpers.IODispatcher.ReadBackward(System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted), System.Nullable(Of System.Guid))
  name.vb: ReadBackward(String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsBackwardCompleted), Nullable(Of Guid))
- uid: EventStore.Core.Helpers.IODispatcher.ReadBackward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action,System.Guid)
  commentId: M:EventStore.Core.Helpers.IODispatcher.ReadBackward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action,System.Guid)
  id: ReadBackward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action,System.Guid)
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: ReadBackward(String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsBackwardCompleted>, Action, Guid)
  nameWithType: IODispatcher.ReadBackward(String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsBackwardCompleted>, Action, Guid)
  fullName: EventStore.Core.Helpers.IODispatcher.ReadBackward(System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted>, System.Action, System.Guid)
  type: Method
  source:
    id: ReadBackward
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 104
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public Guid ReadBackward(string streamId, long fromEventNumber, int maxCount, bool resolveLinks, IPrincipal principal, Action<ClientMessage.ReadStreamEventsBackwardCompleted> action, Action timeoutAction, Guid corrId)
    parameters:
    - id: streamId
      type: System.String
    - id: fromEventNumber
      type: System.Int64
    - id: maxCount
      type: System.Int32
    - id: resolveLinks
      type: System.Boolean
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: action
      type: System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted}
    - id: timeoutAction
      type: System.Action
    - id: corrId
      type: System.Guid
    return:
      type: System.Guid
    content.vb: Public Function ReadBackward(streamId As String, fromEventNumber As Long, maxCount As Integer, resolveLinks As Boolean, principal As IPrincipal, action As Action(Of ClientMessage.ReadStreamEventsBackwardCompleted), timeoutAction As Action, corrId As Guid) As Guid
  overload: EventStore.Core.Helpers.IODispatcher.ReadBackward*
  nameWithType.vb: IODispatcher.ReadBackward(String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsBackwardCompleted), Action, Guid)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Helpers.IODispatcher.ReadBackward(System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted), System.Action, System.Guid)
  name.vb: ReadBackward(String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsBackwardCompleted), Action, Guid)
- uid: EventStore.Core.Helpers.IODispatcher.ReadForward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Nullable{System.Guid})
  commentId: M:EventStore.Core.Helpers.IODispatcher.ReadForward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Nullable{System.Guid})
  id: ReadForward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Nullable{System.Guid})
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: ReadForward(String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsForwardCompleted>, Nullable<Guid>)
  nameWithType: IODispatcher.ReadForward(String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsForwardCompleted>, Nullable<Guid>)
  fullName: EventStore.Core.Helpers.IODispatcher.ReadForward(System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted>, System.Nullable<System.Guid>)
  type: Method
  source:
    id: ReadForward
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 141
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public Guid ReadForward(string streamId, long fromEventNumber, int maxCount, bool resolveLinks, IPrincipal principal, Action<ClientMessage.ReadStreamEventsForwardCompleted> action, Guid? corrId = default(Guid? ))
    parameters:
    - id: streamId
      type: System.String
    - id: fromEventNumber
      type: System.Int64
    - id: maxCount
      type: System.Int32
    - id: resolveLinks
      type: System.Boolean
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: action
      type: System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted}
    - id: corrId
      type: System.Nullable{System.Guid}
    return:
      type: System.Guid
    content.vb: Public Function ReadForward(streamId As String, fromEventNumber As Long, maxCount As Integer, resolveLinks As Boolean, principal As IPrincipal, action As Action(Of ClientMessage.ReadStreamEventsForwardCompleted), corrId As Guid? = Nothing) As Guid
  overload: EventStore.Core.Helpers.IODispatcher.ReadForward*
  nameWithType.vb: IODispatcher.ReadForward(String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsForwardCompleted), Nullable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Helpers.IODispatcher.ReadForward(System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted), System.Nullable(Of System.Guid))
  name.vb: ReadForward(String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsForwardCompleted), Nullable(Of Guid))
- uid: EventStore.Core.Helpers.IODispatcher.ReadForward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action,System.Guid)
  commentId: M:EventStore.Core.Helpers.IODispatcher.ReadForward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action,System.Guid)
  id: ReadForward(System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action,System.Guid)
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: ReadForward(String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsForwardCompleted>, Action, Guid)
  nameWithType: IODispatcher.ReadForward(String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsForwardCompleted>, Action, Guid)
  fullName: EventStore.Core.Helpers.IODispatcher.ReadForward(System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted>, System.Action, System.Guid)
  type: Method
  source:
    id: ReadForward
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 167
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public Guid ReadForward(string streamId, long fromEventNumber, int maxCount, bool resolveLinks, IPrincipal principal, Action<ClientMessage.ReadStreamEventsForwardCompleted> action, Action timeoutAction, Guid corrId)
    parameters:
    - id: streamId
      type: System.String
    - id: fromEventNumber
      type: System.Int64
    - id: maxCount
      type: System.Int32
    - id: resolveLinks
      type: System.Boolean
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: action
      type: System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted}
    - id: timeoutAction
      type: System.Action
    - id: corrId
      type: System.Guid
    return:
      type: System.Guid
    content.vb: Public Function ReadForward(streamId As String, fromEventNumber As Long, maxCount As Integer, resolveLinks As Boolean, principal As IPrincipal, action As Action(Of ClientMessage.ReadStreamEventsForwardCompleted), timeoutAction As Action, corrId As Guid) As Guid
  overload: EventStore.Core.Helpers.IODispatcher.ReadForward*
  nameWithType.vb: IODispatcher.ReadForward(String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsForwardCompleted), Action, Guid)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Helpers.IODispatcher.ReadForward(System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted), System.Action, System.Guid)
  name.vb: ReadForward(String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsForwardCompleted), Action, Guid)
- uid: EventStore.Core.Helpers.IODispatcher.ConfigureStreamAndWriteEvents(System.String,System.Int64,System.Lazy{EventStore.Core.Data.StreamMetadata},EventStore.Core.Data.Event[],System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcher.ConfigureStreamAndWriteEvents(System.String,System.Int64,System.Lazy{EventStore.Core.Data.StreamMetadata},EventStore.Core.Data.Event[],System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  id: ConfigureStreamAndWriteEvents(System.String,System.Int64,System.Lazy{EventStore.Core.Data.StreamMetadata},EventStore.Core.Data.Event[],System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: ConfigureStreamAndWriteEvents(String, Int64, Lazy<StreamMetadata>, Event[], IPrincipal, Action<ClientMessage.WriteEventsCompleted>)
  nameWithType: IODispatcher.ConfigureStreamAndWriteEvents(String, Int64, Lazy<StreamMetadata>, Event[], IPrincipal, Action<ClientMessage.WriteEventsCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcher.ConfigureStreamAndWriteEvents(System.String, System.Int64, System.Lazy<EventStore.Core.Data.StreamMetadata>, EventStore.Core.Data.Event[], System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>)
  type: Method
  source:
    id: ConfigureStreamAndWriteEvents
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 203
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public void ConfigureStreamAndWriteEvents(string streamId, long expectedVersion, Lazy<StreamMetadata> streamMetadata, Event[] events, IPrincipal principal, Action<ClientMessage.WriteEventsCompleted> action)
    parameters:
    - id: streamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: streamMetadata
      type: System.Lazy{EventStore.Core.Data.StreamMetadata}
    - id: events
      type: EventStore.Core.Data.Event[]
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: action
      type: System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
    content.vb: Public Sub ConfigureStreamAndWriteEvents(streamId As String, expectedVersion As Long, streamMetadata As Lazy(Of StreamMetadata), events As  Event (), principal As IPrincipal, action As Action(Of ClientMessage.WriteEventsCompleted))
  overload: EventStore.Core.Helpers.IODispatcher.ConfigureStreamAndWriteEvents*
  nameWithType.vb: IODispatcher.ConfigureStreamAndWriteEvents(String, Int64, Lazy(Of StreamMetadata), Event(), IPrincipal, Action(Of ClientMessage.WriteEventsCompleted))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Helpers.IODispatcher.ConfigureStreamAndWriteEvents(System.String, System.Int64, System.Lazy(Of EventStore.Core.Data.StreamMetadata), EventStore.Core.Data.Event(), System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted))
  name.vb: ConfigureStreamAndWriteEvents(String, Int64, Lazy(Of StreamMetadata), Event(), IPrincipal, Action(Of ClientMessage.WriteEventsCompleted))
- uid: EventStore.Core.Helpers.IODispatcher.WriteEvents(System.String,System.Int64,EventStore.Core.Data.Event[],System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcher.WriteEvents(System.String,System.Int64,EventStore.Core.Data.Event[],System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  id: WriteEvents(System.String,System.Int64,EventStore.Core.Data.Event[],System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: WriteEvents(String, Int64, Event[], IPrincipal, Action<ClientMessage.WriteEventsCompleted>)
  nameWithType: IODispatcher.WriteEvents(String, Int64, Event[], IPrincipal, Action<ClientMessage.WriteEventsCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcher.WriteEvents(System.String, System.Int64, EventStore.Core.Data.Event[], System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>)
  type: Method
  source:
    id: WriteEvents
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 254
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public Guid WriteEvents(string streamId, long expectedVersion, Event[] events, IPrincipal principal, Action<ClientMessage.WriteEventsCompleted> action)
    parameters:
    - id: streamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: events
      type: EventStore.Core.Data.Event[]
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: action
      type: System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
    return:
      type: System.Guid
    content.vb: Public Function WriteEvents(streamId As String, expectedVersion As Long, events As  Event (), principal As IPrincipal, action As Action(Of ClientMessage.WriteEventsCompleted)) As Guid
  overload: EventStore.Core.Helpers.IODispatcher.WriteEvents*
  nameWithType.vb: IODispatcher.WriteEvents(String, Int64, Event(), IPrincipal, Action(Of ClientMessage.WriteEventsCompleted))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Helpers.IODispatcher.WriteEvents(System.String, System.Int64, EventStore.Core.Data.Event(), System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted))
  name.vb: WriteEvents(String, Int64, Event(), IPrincipal, Action(Of ClientMessage.WriteEventsCompleted))
- uid: EventStore.Core.Helpers.IODispatcher.QueueWriteEvents(System.Guid,System.String,System.Int64,EventStore.Core.Data.Event[],System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcher.QueueWriteEvents(System.Guid,System.String,System.Int64,EventStore.Core.Data.Event[],System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  id: QueueWriteEvents(System.Guid,System.String,System.Int64,EventStore.Core.Data.Event[],System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: QueueWriteEvents(Guid, String, Int64, Event[], IPrincipal, Action<ClientMessage.WriteEventsCompleted>)
  nameWithType: IODispatcher.QueueWriteEvents(Guid, String, Int64, Event[], IPrincipal, Action<ClientMessage.WriteEventsCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcher.QueueWriteEvents(System.Guid, System.String, System.Int64, EventStore.Core.Data.Event[], System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>)
  type: Method
  source:
    id: QueueWriteEvents
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 382
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public Guid QueueWriteEvents(Guid key, string streamId, long expectedVersion, Event[] events, IPrincipal principal, Action<ClientMessage.WriteEventsCompleted> action)
    parameters:
    - id: key
      type: System.Guid
    - id: streamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: events
      type: EventStore.Core.Data.Event[]
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: action
      type: System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
    return:
      type: System.Guid
    content.vb: Public Function QueueWriteEvents(key As Guid, streamId As String, expectedVersion As Long, events As  Event (), principal As IPrincipal, action As Action(Of ClientMessage.WriteEventsCompleted)) As Guid
  overload: EventStore.Core.Helpers.IODispatcher.QueueWriteEvents*
  nameWithType.vb: IODispatcher.QueueWriteEvents(Guid, String, Int64, Event(), IPrincipal, Action(Of ClientMessage.WriteEventsCompleted))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Helpers.IODispatcher.QueueWriteEvents(System.Guid, System.String, System.Int64, EventStore.Core.Data.Event(), System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted))
  name.vb: QueueWriteEvents(Guid, String, Int64, Event(), IPrincipal, Action(Of ClientMessage.WriteEventsCompleted))
- uid: EventStore.Core.Helpers.IODispatcher.WriteEvent(System.String,System.Int64,EventStore.Core.Data.Event,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcher.WriteEvent(System.String,System.Int64,EventStore.Core.Data.Event,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  id: WriteEvent(System.String,System.Int64,EventStore.Core.Data.Event,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: WriteEvent(String, Int64, Event, IPrincipal, Action<ClientMessage.WriteEventsCompleted>)
  nameWithType: IODispatcher.WriteEvent(String, Int64, Event, IPrincipal, Action<ClientMessage.WriteEventsCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcher.WriteEvent(System.String, System.Int64, EventStore.Core.Data.Event, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>)
  type: Method
  source:
    id: WriteEvent
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 425
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public Guid WriteEvent(string streamId, long expectedVersion, Event event, IPrincipal principal, Action<ClientMessage.WriteEventsCompleted> action)
    parameters:
    - id: streamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: event
      type: EventStore.Core.Data.Event
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: action
      type: System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
    return:
      type: System.Guid
    content.vb: Public Function WriteEvent(streamId As String, expectedVersion As Long, event As  Event, principal As IPrincipal, action As Action(Of ClientMessage.WriteEventsCompleted)) As Guid
  overload: EventStore.Core.Helpers.IODispatcher.WriteEvent*
  nameWithType.vb: IODispatcher.WriteEvent(String, Int64, Event, IPrincipal, Action(Of ClientMessage.WriteEventsCompleted))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Helpers.IODispatcher.WriteEvent(System.String, System.Int64, EventStore.Core.Data.Event, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted))
  name.vb: WriteEvent(String, Int64, Event, IPrincipal, Action(Of ClientMessage.WriteEventsCompleted))
- uid: EventStore.Core.Helpers.IODispatcher.DeleteStream(System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcher.DeleteStream(System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  id: DeleteStream(System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: DeleteStream(String, Int64, Boolean, IPrincipal, Action<ClientMessage.DeleteStreamCompleted>)
  nameWithType: IODispatcher.DeleteStream(String, Int64, Boolean, IPrincipal, Action<ClientMessage.DeleteStreamCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcher.DeleteStream(System.String, System.Int64, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted>)
  type: Method
  source:
    id: DeleteStream
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 446
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public Guid DeleteStream(string streamId, long expectedVersion, bool hardDelete, IPrincipal principal, Action<ClientMessage.DeleteStreamCompleted> action)
    parameters:
    - id: streamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: hardDelete
      type: System.Boolean
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: action
      type: System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted}
    return:
      type: System.Guid
    content.vb: Public Function DeleteStream(streamId As String, expectedVersion As Long, hardDelete As Boolean, principal As IPrincipal, action As Action(Of ClientMessage.DeleteStreamCompleted)) As Guid
  overload: EventStore.Core.Helpers.IODispatcher.DeleteStream*
  nameWithType.vb: IODispatcher.DeleteStream(String, Int64, Boolean, IPrincipal, Action(Of ClientMessage.DeleteStreamCompleted))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Helpers.IODispatcher.DeleteStream(System.String, System.Int64, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted))
  name.vb: DeleteStream(String, Int64, Boolean, IPrincipal, Action(Of ClientMessage.DeleteStreamCompleted))
- uid: EventStore.Core.Helpers.IODispatcher.SubscribeAwake(System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  commentId: M:EventStore.Core.Helpers.IODispatcher.SubscribeAwake(System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  id: SubscribeAwake(System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: SubscribeAwake(String, TFPos, Action<IODispatcherDelayedMessage>, Nullable<Guid>)
  nameWithType: IODispatcher.SubscribeAwake(String, TFPos, Action<IODispatcherDelayedMessage>, Nullable<Guid>)
  fullName: EventStore.Core.Helpers.IODispatcher.SubscribeAwake(System.String, EventStore.Core.Data.TFPos, System.Action<EventStore.Core.Helpers.IODispatcherDelayedMessage>, System.Nullable<System.Guid>)
  type: Method
  source:
    id: SubscribeAwake
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 466
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public void SubscribeAwake(string streamId, TFPos from, Action<IODispatcherDelayedMessage> action, Guid? correlationId = default(Guid? ))
    parameters:
    - id: streamId
      type: System.String
    - id: from
      type: EventStore.Core.Data.TFPos
    - id: action
      type: System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage}
    - id: correlationId
      type: System.Nullable{System.Guid}
    content.vb: Public Sub SubscribeAwake(streamId As String, from As TFPos, action As Action(Of IODispatcherDelayedMessage), correlationId As Guid? = Nothing)
  overload: EventStore.Core.Helpers.IODispatcher.SubscribeAwake*
  nameWithType.vb: IODispatcher.SubscribeAwake(String, TFPos, Action(Of IODispatcherDelayedMessage), Nullable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Helpers.IODispatcher.SubscribeAwake(System.String, EventStore.Core.Data.TFPos, System.Action(Of EventStore.Core.Helpers.IODispatcherDelayedMessage), System.Nullable(Of System.Guid))
  name.vb: SubscribeAwake(String, TFPos, Action(Of IODispatcherDelayedMessage), Nullable(Of Guid))
- uid: EventStore.Core.Helpers.IODispatcher.UnsubscribeAwake(System.Guid)
  commentId: M:EventStore.Core.Helpers.IODispatcher.UnsubscribeAwake(System.Guid)
  id: UnsubscribeAwake(System.Guid)
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: UnsubscribeAwake(Guid)
  nameWithType: IODispatcher.UnsubscribeAwake(Guid)
  fullName: EventStore.Core.Helpers.IODispatcher.UnsubscribeAwake(System.Guid)
  type: Method
  source:
    id: UnsubscribeAwake
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 482
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public void UnsubscribeAwake(Guid correlationId)
    parameters:
    - id: correlationId
      type: System.Guid
    content.vb: Public Sub UnsubscribeAwake(correlationId As Guid)
  overload: EventStore.Core.Helpers.IODispatcher.UnsubscribeAwake*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Helpers.IODispatcher.UpdateStreamAcl(System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcher.UpdateStreamAcl(System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  id: UpdateStreamAcl(System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: UpdateStreamAcl(String, Int64, IPrincipal, StreamMetadata, Action<ClientMessage.WriteEventsCompleted>)
  nameWithType: IODispatcher.UpdateStreamAcl(String, Int64, IPrincipal, StreamMetadata, Action<ClientMessage.WriteEventsCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcher.UpdateStreamAcl(System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.StreamMetadata, System.Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>)
  type: Method
  source:
    id: UpdateStreamAcl
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 486
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public void UpdateStreamAcl(string streamId, long expectedVersion, IPrincipal principal, StreamMetadata metadata, Action<ClientMessage.WriteEventsCompleted> completed)
    parameters:
    - id: streamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: metadata
      type: EventStore.Core.Data.StreamMetadata
    - id: completed
      type: System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
    content.vb: Public Sub UpdateStreamAcl(streamId As String, expectedVersion As Long, principal As IPrincipal, metadata As StreamMetadata, completed As Action(Of ClientMessage.WriteEventsCompleted))
  overload: EventStore.Core.Helpers.IODispatcher.UpdateStreamAcl*
  nameWithType.vb: IODispatcher.UpdateStreamAcl(String, Int64, IPrincipal, StreamMetadata, Action(Of ClientMessage.WriteEventsCompleted))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Helpers.IODispatcher.UpdateStreamAcl(System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.StreamMetadata, System.Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted))
  name.vb: UpdateStreamAcl(String, Int64, IPrincipal, StreamMetadata, Action(Of ClientMessage.WriteEventsCompleted))
- uid: EventStore.Core.Helpers.IODispatcher.Delay(System.TimeSpan,System.Action,System.Nullable{System.Guid})
  commentId: M:EventStore.Core.Helpers.IODispatcher.Delay(System.TimeSpan,System.Action,System.Nullable{System.Guid})
  id: Delay(System.TimeSpan,System.Action,System.Nullable{System.Guid})
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: Delay(TimeSpan, Action, Nullable<Guid>)
  nameWithType: IODispatcher.Delay(TimeSpan, Action, Nullable<Guid>)
  fullName: EventStore.Core.Helpers.IODispatcher.Delay(System.TimeSpan, System.Action, System.Nullable<System.Guid>)
  type: Method
  source:
    id: Delay
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 500
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public void Delay(TimeSpan delay, Action action, Guid? _messageCorrelationId = default(Guid? ))
    parameters:
    - id: delay
      type: System.TimeSpan
    - id: action
      type: System.Action
    - id: _messageCorrelationId
      type: System.Nullable{System.Guid}
    content.vb: Public Sub Delay(delay As TimeSpan, action As Action, _messageCorrelationId As Guid? = Nothing)
  overload: EventStore.Core.Helpers.IODispatcher.Delay*
  nameWithType.vb: IODispatcher.Delay(TimeSpan, Action, Nullable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Helpers.IODispatcher.Delay(System.TimeSpan, System.Action, System.Nullable(Of System.Guid))
  name.vb: Delay(TimeSpan, Action, Nullable(Of Guid))
- uid: EventStore.Core.Helpers.IODispatcher.Handle(EventStore.Core.Helpers.IODispatcherDelayedMessage)
  commentId: M:EventStore.Core.Helpers.IODispatcher.Handle(EventStore.Core.Helpers.IODispatcherDelayedMessage)
  id: Handle(EventStore.Core.Helpers.IODispatcherDelayedMessage)
  parent: EventStore.Core.Helpers.IODispatcher
  langs:
  - csharp
  - vb
  name: Handle(IODispatcherDelayedMessage)
  nameWithType: IODispatcher.Handle(IODispatcherDelayedMessage)
  fullName: EventStore.Core.Helpers.IODispatcher.Handle(EventStore.Core.Helpers.IODispatcherDelayedMessage)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcher.cs
    startLine: 508
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public void Handle(IODispatcherDelayedMessage message)
    parameters:
    - id: message
      type: EventStore.Core.Helpers.IODispatcherDelayedMessage
    content.vb: Public Sub Handle(message As IODispatcherDelayedMessage)
  overload: EventStore.Core.Helpers.IODispatcher.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Helpers.IODispatcherDelayedMessage}.Handle(EventStore.Core.Helpers.IODispatcherDelayedMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Helpers
  commentId: N:EventStore.Core.Helpers
  name: EventStore.Core.Helpers
  nameWithType: EventStore.Core.Helpers
  fullName: EventStore.Core.Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Helpers.IODispatcherDelayedMessage}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Helpers.IODispatcherDelayedMessage}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<IODispatcherDelayedMessage>
  nameWithType: IHandle<IODispatcherDelayedMessage>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Helpers.IODispatcherDelayedMessage>
  nameWithType.vb: IHandle(Of IODispatcherDelayedMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Helpers.IODispatcherDelayedMessage)
  name.vb: IHandle(Of IODispatcherDelayedMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Helpers.IODispatcherDelayedMessage}.EventStore.Core.Bus.HandleExtensions.WidenFrom``2
  commentId: M:EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
  parent: EventStore.Core.Bus.HandleExtensions
  definition: EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
  name: WidenFrom<TInput, IODispatcherDelayedMessage>()
  nameWithType: HandleExtensions.WidenFrom<TInput, IODispatcherDelayedMessage>()
  fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom<TInput, EventStore.Core.Helpers.IODispatcherDelayedMessage>()
  nameWithType.vb: HandleExtensions.WidenFrom(Of TInput, IODispatcherDelayedMessage)()
  fullName.vb: EventStore.Core.Bus.HandleExtensions.WidenFrom(Of TInput, EventStore.Core.Helpers.IODispatcherDelayedMessage)()
  name.vb: WidenFrom(Of TInput, IODispatcherDelayedMessage)()
  spec.csharp:
  - uid: EventStore.Core.Bus.HandleExtensions.WidenFrom``2
    name: WidenFrom<TInput, IODispatcherDelayedMessage>
    nameWithType: HandleExtensions.WidenFrom<TInput, IODispatcherDelayedMessage>
    fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom<TInput, EventStore.Core.Helpers.IODispatcherDelayedMessage>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.HandleExtensions.WidenFrom``2
    name: WidenFrom(Of TInput, IODispatcherDelayedMessage)
    nameWithType: HandleExtensions.WidenFrom(Of TInput, IODispatcherDelayedMessage)
    fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom(Of TInput, EventStore.Core.Helpers.IODispatcherDelayedMessage)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Helpers.IODispatcherDelayedMessage}.EventStore.Core.Bus.HandleExtensions.NarrowTo``2
  commentId: M:EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
  parent: EventStore.Core.Bus.HandleExtensions
  definition: EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
  name: NarrowTo<TInput, IODispatcherDelayedMessage>()
  nameWithType: HandleExtensions.NarrowTo<TInput, IODispatcherDelayedMessage>()
  fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo<TInput, EventStore.Core.Helpers.IODispatcherDelayedMessage>()
  nameWithType.vb: HandleExtensions.NarrowTo(Of TInput, IODispatcherDelayedMessage)()
  fullName.vb: EventStore.Core.Bus.HandleExtensions.NarrowTo(Of TInput, EventStore.Core.Helpers.IODispatcherDelayedMessage)()
  name.vb: NarrowTo(Of TInput, IODispatcherDelayedMessage)()
  spec.csharp:
  - uid: EventStore.Core.Bus.HandleExtensions.NarrowTo``2
    name: NarrowTo<TInput, IODispatcherDelayedMessage>
    nameWithType: HandleExtensions.NarrowTo<TInput, IODispatcherDelayedMessage>
    fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo<TInput, EventStore.Core.Helpers.IODispatcherDelayedMessage>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.HandleExtensions.NarrowTo``2
    name: NarrowTo(Of TInput, IODispatcherDelayedMessage)
    nameWithType: HandleExtensions.NarrowTo(Of TInput, IODispatcherDelayedMessage)
    fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo(Of TInput, EventStore.Core.Helpers.IODispatcherDelayedMessage)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
  parent: EventStore.Core.Helpers.IODispatcherAsync
  definition: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
  name: BeginReadForward(IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsForwardCompleted>, Action)
  nameWithType: IODispatcherAsync.BeginReadForward(IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsForwardCompleted>, Action)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted>, System.Action)
  nameWithType.vb: IODispatcherAsync.BeginReadForward(IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsForwardCompleted), Action)
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted), System.Action)
  name.vb: BeginReadForward(IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsForwardCompleted), Action)
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
    name: BeginReadForward
    nameWithType: IODispatcherAsync.BeginReadForward
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
    name: ClientMessage.ReadStreamEventsForwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsForwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
    name: BeginReadForward
    nameWithType: IODispatcherAsync.BeginReadForward
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
    name: ClientMessage.ReadStreamEventsForwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsForwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
  parent: EventStore.Core.Helpers.IODispatcherAsync
  definition: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
  name: BeginReadBackward(IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsBackwardCompleted>, Action)
  nameWithType: IODispatcherAsync.BeginReadBackward(IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsBackwardCompleted>, Action)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted>, System.Action)
  nameWithType.vb: IODispatcherAsync.BeginReadBackward(IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsBackwardCompleted), Action)
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted), System.Action)
  name.vb: BeginReadBackward(IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsBackwardCompleted), Action)
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
    name: BeginReadBackward
    nameWithType: IODispatcherAsync.BeginReadBackward
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
    name: ClientMessage.ReadStreamEventsBackwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
    name: BeginReadBackward
    nameWithType: IODispatcherAsync.BeginReadBackward
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
    name: ClientMessage.ReadStreamEventsBackwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  parent: EventStore.Core.Helpers.IODispatcherAsync
  definition: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  name: BeginWriteEvents(IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, Event[], Action<ClientMessage.WriteEventsCompleted>)
  nameWithType: IODispatcherAsync.BeginWriteEvents(IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, Event[], Action<ClientMessage.WriteEventsCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.Event[], System.Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>)
  nameWithType.vb: IODispatcherAsync.BeginWriteEvents(IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, Event(), Action(Of ClientMessage.WriteEventsCompleted))
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.Event(), System.Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted))
  name.vb: BeginWriteEvents(IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, Event(), Action(Of ClientMessage.WriteEventsCompleted))
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
    name: BeginWriteEvents
    nameWithType: IODispatcherAsync.BeginWriteEvents
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
    name: BeginWriteEvents
    nameWithType: IODispatcherAsync.BeginWriteEvents
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  parent: EventStore.Core.Helpers.IODispatcherAsync
  definition: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  name: BeginDeleteStream(IODispatcherAsync.CancellationScope, String, Int64, Boolean, IPrincipal, Action<ClientMessage.DeleteStreamCompleted>)
  nameWithType: IODispatcherAsync.BeginDeleteStream(IODispatcherAsync.CancellationScope, String, Int64, Boolean, IPrincipal, Action<ClientMessage.DeleteStreamCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted>)
  nameWithType.vb: IODispatcherAsync.BeginDeleteStream(IODispatcherAsync.CancellationScope, String, Int64, Boolean, IPrincipal, Action(Of ClientMessage.DeleteStreamCompleted))
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted))
  name.vb: BeginDeleteStream(IODispatcherAsync.CancellationScope, String, Int64, Boolean, IPrincipal, Action(Of ClientMessage.DeleteStreamCompleted))
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
    name: BeginDeleteStream
    nameWithType: IODispatcherAsync.BeginDeleteStream
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
    name: ClientMessage.DeleteStreamCompleted
    nameWithType: ClientMessage.DeleteStreamCompleted
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
    name: BeginDeleteStream
    nameWithType: IODispatcherAsync.BeginDeleteStream
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
    name: ClientMessage.DeleteStreamCompleted
    nameWithType: ClientMessage.DeleteStreamCompleted
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  parent: EventStore.Core.Helpers.IODispatcherAsync
  definition: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  name: BeginSubscribeAwake(IODispatcherAsync.CancellationScope, String, TFPos, Action<IODispatcherDelayedMessage>, Nullable<Guid>)
  nameWithType: IODispatcherAsync.BeginSubscribeAwake(IODispatcherAsync.CancellationScope, String, TFPos, Action<IODispatcherDelayedMessage>, Nullable<Guid>)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, EventStore.Core.Data.TFPos, System.Action<EventStore.Core.Helpers.IODispatcherDelayedMessage>, System.Nullable<System.Guid>)
  nameWithType.vb: IODispatcherAsync.BeginSubscribeAwake(IODispatcherAsync.CancellationScope, String, TFPos, Action(Of IODispatcherDelayedMessage), Nullable(Of Guid))
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, EventStore.Core.Data.TFPos, System.Action(Of EventStore.Core.Helpers.IODispatcherDelayedMessage), System.Nullable(Of System.Guid))
  name.vb: BeginSubscribeAwake(IODispatcherAsync.CancellationScope, String, TFPos, Action(Of IODispatcherDelayedMessage), Nullable(Of Guid))
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
    name: BeginSubscribeAwake
    nameWithType: IODispatcherAsync.BeginSubscribeAwake
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.TFPos
    name: TFPos
    nameWithType: TFPos
    fullName: EventStore.Core.Data.TFPos
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
    name: BeginSubscribeAwake
    nameWithType: IODispatcherAsync.BeginSubscribeAwake
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.TFPos
    name: TFPos
    nameWithType: TFPos
    fullName: EventStore.Core.Data.TFPos
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  parent: EventStore.Core.Helpers.IODispatcherAsync
  definition: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  name: BeginUpdateStreamAcl(IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, StreamMetadata, Action<ClientMessage.WriteEventsCompleted>)
  nameWithType: IODispatcherAsync.BeginUpdateStreamAcl(IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, StreamMetadata, Action<ClientMessage.WriteEventsCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.StreamMetadata, System.Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>)
  nameWithType.vb: IODispatcherAsync.BeginUpdateStreamAcl(IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, StreamMetadata, Action(Of ClientMessage.WriteEventsCompleted))
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.StreamMetadata, System.Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted))
  name.vb: BeginUpdateStreamAcl(IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, StreamMetadata, Action(Of ClientMessage.WriteEventsCompleted))
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
    name: BeginUpdateStreamAcl
    nameWithType: IODispatcherAsync.BeginUpdateStreamAcl
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.StreamMetadata
    name: StreamMetadata
    nameWithType: StreamMetadata
    fullName: EventStore.Core.Data.StreamMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
    name: BeginUpdateStreamAcl
    nameWithType: IODispatcherAsync.BeginUpdateStreamAcl
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.StreamMetadata
    name: StreamMetadata
    nameWithType: StreamMetadata
    fullName: EventStore.Core.Data.StreamMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
  parent: EventStore.Core.Helpers.IODispatcherAsync
  definition: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
  name: BeginDelay(IODispatcherAsync.CancellationScope, TimeSpan, Action)
  nameWithType: IODispatcherAsync.BeginDelay(IODispatcherAsync.CancellationScope, TimeSpan, Action)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.TimeSpan, System.Action)
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
    name: BeginDelay
    nameWithType: IODispatcherAsync.BeginDelay
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
    name: BeginDelay
    nameWithType: IODispatcherAsync.BeginDelay
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<IODispatcher>()
  nameWithType: ProtobufExtensions.Serialize<IODispatcher>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Helpers.IODispatcher>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of IODispatcher)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Helpers.IODispatcher)()
  name.vb: Serialize(Of IODispatcher)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<IODispatcher>
    nameWithType: ProtobufExtensions.Serialize<IODispatcher>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Helpers.IODispatcher>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of IODispatcher)
    nameWithType: ProtobufExtensions.Serialize(Of IODispatcher)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Helpers.IODispatcher)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<IODispatcher>()
  nameWithType: ProtobufExtensions.SerializeToArray<IODispatcher>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Helpers.IODispatcher>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of IODispatcher)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Helpers.IODispatcher)()
  name.vb: SerializeToArray(Of IODispatcher)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<IODispatcher>
    nameWithType: ProtobufExtensions.SerializeToArray<IODispatcher>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Helpers.IODispatcher>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of IODispatcher)
    nameWithType: ProtobufExtensions.SerializeToArray(Of IODispatcher)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Helpers.IODispatcher)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
  commentId: M:EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
  name: WidenFrom<TInput, TOutput>(IHandle<TOutput>)
  nameWithType: HandleExtensions.WidenFrom<TInput, TOutput>(IHandle<TOutput>)
  fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom<TInput, TOutput>(EventStore.Core.Bus.IHandle<TOutput>)
  nameWithType.vb: HandleExtensions.WidenFrom(Of TInput, TOutput)(IHandle(Of TOutput))
  fullName.vb: EventStore.Core.Bus.HandleExtensions.WidenFrom(Of TInput, TOutput)(EventStore.Core.Bus.IHandle(Of TOutput))
  name.vb: WidenFrom(Of TInput, TOutput)(IHandle(Of TOutput))
  spec.csharp:
  - uid: EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
    name: WidenFrom<TInput, TOutput>
    nameWithType: HandleExtensions.WidenFrom<TInput, TOutput>
    fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom<TInput, TOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.HandleExtensions.WidenFrom``2(EventStore.Core.Bus.IHandle{``1})
    name: WidenFrom(Of TInput, TOutput)
    nameWithType: HandleExtensions.WidenFrom(Of TInput, TOutput)
    fullName: EventStore.Core.Bus.HandleExtensions.WidenFrom(Of TInput, TOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.HandleExtensions
  commentId: T:EventStore.Core.Bus.HandleExtensions
  parent: EventStore.Core.Bus
  name: HandleExtensions
  nameWithType: HandleExtensions
  fullName: EventStore.Core.Bus.HandleExtensions
- uid: EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
  commentId: M:EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
  name: NarrowTo<TInput, TOutput>(IHandle<TOutput>)
  nameWithType: HandleExtensions.NarrowTo<TInput, TOutput>(IHandle<TOutput>)
  fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo<TInput, TOutput>(EventStore.Core.Bus.IHandle<TOutput>)
  nameWithType.vb: HandleExtensions.NarrowTo(Of TInput, TOutput)(IHandle(Of TOutput))
  fullName.vb: EventStore.Core.Bus.HandleExtensions.NarrowTo(Of TInput, TOutput)(EventStore.Core.Bus.IHandle(Of TOutput))
  name.vb: NarrowTo(Of TInput, TOutput)(IHandle(Of TOutput))
  spec.csharp:
  - uid: EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
    name: NarrowTo<TInput, TOutput>
    nameWithType: HandleExtensions.NarrowTo<TInput, TOutput>
    fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo<TInput, TOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.HandleExtensions.NarrowTo``2(EventStore.Core.Bus.IHandle{``1})
    name: NarrowTo(Of TInput, TOutput)
    nameWithType: HandleExtensions.NarrowTo(Of TInput, TOutput)
    fullName: EventStore.Core.Bus.HandleExtensions.NarrowTo(Of TInput, TOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
  isExternal: true
  name: BeginReadForward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsForwardCompleted>, Action)
  nameWithType: IODispatcherAsync.BeginReadForward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsForwardCompleted>, Action)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted>, System.Action)
  nameWithType.vb: IODispatcherAsync.BeginReadForward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsForwardCompleted), Action)
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted), System.Action)
  name.vb: BeginReadForward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsForwardCompleted), Action)
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
    name: BeginReadForward
    nameWithType: IODispatcherAsync.BeginReadForward
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
    name: ClientMessage.ReadStreamEventsForwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsForwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
    name: BeginReadForward
    nameWithType: IODispatcherAsync.BeginReadForward
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
    name: ClientMessage.ReadStreamEventsForwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsForwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcherAsync
  commentId: T:EventStore.Core.Helpers.IODispatcherAsync
  parent: EventStore.Core.Helpers
  name: IODispatcherAsync
  nameWithType: IODispatcherAsync
  fullName: EventStore.Core.Helpers.IODispatcherAsync
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
  isExternal: true
  name: BeginReadBackward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsBackwardCompleted>, Action)
  nameWithType: IODispatcherAsync.BeginReadBackward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsBackwardCompleted>, Action)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted>, System.Action)
  nameWithType.vb: IODispatcherAsync.BeginReadBackward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsBackwardCompleted), Action)
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted), System.Action)
  name.vb: BeginReadBackward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsBackwardCompleted), Action)
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
    name: BeginReadBackward
    nameWithType: IODispatcherAsync.BeginReadBackward
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
    name: ClientMessage.ReadStreamEventsBackwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
    name: BeginReadBackward
    nameWithType: IODispatcherAsync.BeginReadBackward
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
    name: ClientMessage.ReadStreamEventsBackwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  isExternal: true
  name: BeginWriteEvents(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, Event[], Action<ClientMessage.WriteEventsCompleted>)
  nameWithType: IODispatcherAsync.BeginWriteEvents(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, Event[], Action<ClientMessage.WriteEventsCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.Event[], System.Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>)
  nameWithType.vb: IODispatcherAsync.BeginWriteEvents(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, Event(), Action(Of ClientMessage.WriteEventsCompleted))
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.Event(), System.Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted))
  name.vb: BeginWriteEvents(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, Event(), Action(Of ClientMessage.WriteEventsCompleted))
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
    name: BeginWriteEvents
    nameWithType: IODispatcherAsync.BeginWriteEvents
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
    name: BeginWriteEvents
    nameWithType: IODispatcherAsync.BeginWriteEvents
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  isExternal: true
  name: BeginDeleteStream(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Boolean, IPrincipal, Action<ClientMessage.DeleteStreamCompleted>)
  nameWithType: IODispatcherAsync.BeginDeleteStream(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Boolean, IPrincipal, Action<ClientMessage.DeleteStreamCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted>)
  nameWithType.vb: IODispatcherAsync.BeginDeleteStream(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Boolean, IPrincipal, Action(Of ClientMessage.DeleteStreamCompleted))
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted))
  name.vb: BeginDeleteStream(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Boolean, IPrincipal, Action(Of ClientMessage.DeleteStreamCompleted))
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
    name: BeginDeleteStream
    nameWithType: IODispatcherAsync.BeginDeleteStream
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
    name: ClientMessage.DeleteStreamCompleted
    nameWithType: ClientMessage.DeleteStreamCompleted
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
    name: BeginDeleteStream
    nameWithType: IODispatcherAsync.BeginDeleteStream
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
    name: ClientMessage.DeleteStreamCompleted
    nameWithType: ClientMessage.DeleteStreamCompleted
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  isExternal: true
  name: BeginSubscribeAwake(IODispatcher, IODispatcherAsync.CancellationScope, String, TFPos, Action<IODispatcherDelayedMessage>, Nullable<Guid>)
  nameWithType: IODispatcherAsync.BeginSubscribeAwake(IODispatcher, IODispatcherAsync.CancellationScope, String, TFPos, Action<IODispatcherDelayedMessage>, Nullable<Guid>)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, EventStore.Core.Data.TFPos, System.Action<EventStore.Core.Helpers.IODispatcherDelayedMessage>, System.Nullable<System.Guid>)
  nameWithType.vb: IODispatcherAsync.BeginSubscribeAwake(IODispatcher, IODispatcherAsync.CancellationScope, String, TFPos, Action(Of IODispatcherDelayedMessage), Nullable(Of Guid))
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, EventStore.Core.Data.TFPos, System.Action(Of EventStore.Core.Helpers.IODispatcherDelayedMessage), System.Nullable(Of System.Guid))
  name.vb: BeginSubscribeAwake(IODispatcher, IODispatcherAsync.CancellationScope, String, TFPos, Action(Of IODispatcherDelayedMessage), Nullable(Of Guid))
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
    name: BeginSubscribeAwake
    nameWithType: IODispatcherAsync.BeginSubscribeAwake
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.TFPos
    name: TFPos
    nameWithType: TFPos
    fullName: EventStore.Core.Data.TFPos
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
    name: BeginSubscribeAwake
    nameWithType: IODispatcherAsync.BeginSubscribeAwake
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.TFPos
    name: TFPos
    nameWithType: TFPos
    fullName: EventStore.Core.Data.TFPos
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  isExternal: true
  name: BeginUpdateStreamAcl(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, StreamMetadata, Action<ClientMessage.WriteEventsCompleted>)
  nameWithType: IODispatcherAsync.BeginUpdateStreamAcl(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, StreamMetadata, Action<ClientMessage.WriteEventsCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.StreamMetadata, System.Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>)
  nameWithType.vb: IODispatcherAsync.BeginUpdateStreamAcl(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, StreamMetadata, Action(Of ClientMessage.WriteEventsCompleted))
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.StreamMetadata, System.Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted))
  name.vb: BeginUpdateStreamAcl(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, StreamMetadata, Action(Of ClientMessage.WriteEventsCompleted))
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
    name: BeginUpdateStreamAcl
    nameWithType: IODispatcherAsync.BeginUpdateStreamAcl
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.StreamMetadata
    name: StreamMetadata
    nameWithType: StreamMetadata
    fullName: EventStore.Core.Data.StreamMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
    name: BeginUpdateStreamAcl
    nameWithType: IODispatcherAsync.BeginUpdateStreamAcl
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.StreamMetadata
    name: StreamMetadata
    nameWithType: StreamMetadata
    fullName: EventStore.Core.Data.StreamMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
  isExternal: true
  name: BeginDelay(IODispatcher, IODispatcherAsync.CancellationScope, TimeSpan, Action)
  nameWithType: IODispatcherAsync.BeginDelay(IODispatcher, IODispatcherAsync.CancellationScope, TimeSpan, Action)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.TimeSpan, System.Action)
  spec.csharp:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
    name: BeginDelay
    nameWithType: IODispatcherAsync.BeginDelay
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
    name: BeginDelay
    nameWithType: IODispatcherAsync.BeginDelay
    fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcher
    name: IODispatcher
    nameWithType: IODispatcher
    fullName: EventStore.Core.Helpers.IODispatcher
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    name: IODispatcherAsync.CancellationScope
    nameWithType: IODispatcherAsync.CancellationScope
    fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward,EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted}
  commentId: T:EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward,EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted}
  parent: EventStore.Core.Messaging
  definition: EventStore.Core.Messaging.RequestResponseDispatcher`2
  name: RequestResponseDispatcher<ClientMessage.ReadStreamEventsForward, ClientMessage.ReadStreamEventsForwardCompleted>
  nameWithType: RequestResponseDispatcher<ClientMessage.ReadStreamEventsForward, ClientMessage.ReadStreamEventsForwardCompleted>
  fullName: EventStore.Core.Messaging.RequestResponseDispatcher<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward, EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted>
  nameWithType.vb: RequestResponseDispatcher(Of ClientMessage.ReadStreamEventsForward, ClientMessage.ReadStreamEventsForwardCompleted)
  fullName.vb: EventStore.Core.Messaging.RequestResponseDispatcher(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward, EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted)
  name.vb: RequestResponseDispatcher(Of ClientMessage.ReadStreamEventsForward, ClientMessage.ReadStreamEventsForwardCompleted)
  spec.csharp:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
    name: ClientMessage.ReadStreamEventsForwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsForwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
    name: ClientMessage.ReadStreamEventsForwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsForwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
  commentId: T:EventStore.Core.Messaging.RequestResponseDispatcher`2
  name: RequestResponseDispatcher<TRequest, TResponse>
  nameWithType: RequestResponseDispatcher<TRequest, TResponse>
  fullName: EventStore.Core.Messaging.RequestResponseDispatcher<TRequest, TResponse>
  nameWithType.vb: RequestResponseDispatcher(Of TRequest, TResponse)
  fullName.vb: EventStore.Core.Messaging.RequestResponseDispatcher(Of TRequest, TResponse)
  name.vb: RequestResponseDispatcher(Of TRequest, TResponse)
  spec.csharp:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward,EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted}
  commentId: T:EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward,EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted}
  parent: EventStore.Core.Messaging
  definition: EventStore.Core.Messaging.RequestResponseDispatcher`2
  name: RequestResponseDispatcher<ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted>
  nameWithType: RequestResponseDispatcher<ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted>
  fullName: EventStore.Core.Messaging.RequestResponseDispatcher<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward, EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted>
  nameWithType.vb: RequestResponseDispatcher(Of ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted)
  fullName.vb: EventStore.Core.Messaging.RequestResponseDispatcher(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward, EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted)
  name.vb: RequestResponseDispatcher(Of ClientMessage.ReadStreamEventsBackward, ClientMessage.ReadStreamEventsBackwardCompleted)
  spec.csharp:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
    name: ClientMessage.ReadStreamEventsBackwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
    name: ClientMessage.ReadStreamEventsBackwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.WriteEvents,EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
  commentId: T:EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.WriteEvents,EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
  parent: EventStore.Core.Messaging
  definition: EventStore.Core.Messaging.RequestResponseDispatcher`2
  name: RequestResponseDispatcher<ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted>
  nameWithType: RequestResponseDispatcher<ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted>
  fullName: EventStore.Core.Messaging.RequestResponseDispatcher<EventStore.Core.Messages.ClientMessage.WriteEvents, EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>
  nameWithType.vb: RequestResponseDispatcher(Of ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted)
  fullName.vb: EventStore.Core.Messaging.RequestResponseDispatcher(Of EventStore.Core.Messages.ClientMessage.WriteEvents, EventStore.Core.Messages.ClientMessage.WriteEventsCompleted)
  name.vb: RequestResponseDispatcher(Of ClientMessage.WriteEvents, ClientMessage.WriteEventsCompleted)
  spec.csharp:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.DeleteStream,EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted}
  commentId: T:EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Messages.ClientMessage.DeleteStream,EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted}
  parent: EventStore.Core.Messaging
  definition: EventStore.Core.Messaging.RequestResponseDispatcher`2
  name: RequestResponseDispatcher<ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted>
  nameWithType: RequestResponseDispatcher<ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted>
  fullName: EventStore.Core.Messaging.RequestResponseDispatcher<EventStore.Core.Messages.ClientMessage.DeleteStream, EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted>
  nameWithType.vb: RequestResponseDispatcher(Of ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted)
  fullName.vb: EventStore.Core.Messaging.RequestResponseDispatcher(Of EventStore.Core.Messages.ClientMessage.DeleteStream, EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted)
  name.vb: RequestResponseDispatcher(Of ClientMessage.DeleteStream, ClientMessage.DeleteStreamCompleted)
  spec.csharp:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStream
    name: ClientMessage.DeleteStream
    nameWithType: ClientMessage.DeleteStream
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
    name: ClientMessage.DeleteStreamCompleted
    nameWithType: ClientMessage.DeleteStreamCompleted
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStream
    name: ClientMessage.DeleteStream
    nameWithType: ClientMessage.DeleteStream
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
    name: ClientMessage.DeleteStreamCompleted
    nameWithType: ClientMessage.DeleteStreamCompleted
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake,EventStore.Core.Helpers.IODispatcherDelayedMessage}
  commentId: T:EventStore.Core.Messaging.RequestResponseDispatcher{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake,EventStore.Core.Helpers.IODispatcherDelayedMessage}
  parent: EventStore.Core.Messaging
  definition: EventStore.Core.Messaging.RequestResponseDispatcher`2
  name: RequestResponseDispatcher<AwakeServiceMessage.SubscribeAwake, IODispatcherDelayedMessage>
  nameWithType: RequestResponseDispatcher<AwakeServiceMessage.SubscribeAwake, IODispatcherDelayedMessage>
  fullName: EventStore.Core.Messaging.RequestResponseDispatcher<EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake, EventStore.Core.Helpers.IODispatcherDelayedMessage>
  nameWithType.vb: RequestResponseDispatcher(Of AwakeServiceMessage.SubscribeAwake, IODispatcherDelayedMessage)
  fullName.vb: EventStore.Core.Messaging.RequestResponseDispatcher(Of EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake, EventStore.Core.Helpers.IODispatcherDelayedMessage)
  name.vb: RequestResponseDispatcher(Of AwakeServiceMessage.SubscribeAwake, IODispatcherDelayedMessage)
  spec.csharp:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
    name: AwakeServiceMessage.SubscribeAwake
    nameWithType: AwakeServiceMessage.SubscribeAwake
    fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Messaging.RequestResponseDispatcher`2
    name: RequestResponseDispatcher
    nameWithType: RequestResponseDispatcher
    fullName: EventStore.Core.Messaging.RequestResponseDispatcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
    name: AwakeServiceMessage.SubscribeAwake
    nameWithType: AwakeServiceMessage.SubscribeAwake
    fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.#ctor*
  commentId: Overload:EventStore.Core.Helpers.IODispatcher.#ctor
  name: IODispatcher
  nameWithType: IODispatcher.IODispatcher
  fullName: EventStore.Core.Helpers.IODispatcher.IODispatcher
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.Messaging.IEnvelope
  commentId: T:EventStore.Core.Messaging.IEnvelope
  parent: EventStore.Core.Messaging
  name: IEnvelope
  nameWithType: IEnvelope
  fullName: EventStore.Core.Messaging.IEnvelope
- uid: EventStore.Core.Helpers.IODispatcher.ReadBackward*
  commentId: Overload:EventStore.Core.Helpers.IODispatcher.ReadBackward
  name: ReadBackward
  nameWithType: IODispatcher.ReadBackward
  fullName: EventStore.Core.Helpers.IODispatcher.ReadBackward
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.IPrincipal
  commentId: T:System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted}
  commentId: T:System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted}
  parent: System
  definition: System.Action`1
  name: Action<ClientMessage.ReadStreamEventsBackwardCompleted>
  nameWithType: Action<ClientMessage.ReadStreamEventsBackwardCompleted>
  fullName: System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted>
  nameWithType.vb: Action(Of ClientMessage.ReadStreamEventsBackwardCompleted)
  fullName.vb: System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted)
  name.vb: Action(Of ClientMessage.ReadStreamEventsBackwardCompleted)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
    name: ClientMessage.ReadStreamEventsBackwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
    name: ClientMessage.ReadStreamEventsBackwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Guid}
  commentId: T:System.Nullable{System.Guid}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Guid>
  nameWithType: Nullable<Guid>
  fullName: System.Nullable<System.Guid>
  nameWithType.vb: Nullable(Of Guid)
  fullName.vb: System.Nullable(Of System.Guid)
  name.vb: Nullable(Of Guid)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Security.Principal
  commentId: N:System.Security.Principal
  isExternal: true
  name: System.Security.Principal
  nameWithType: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: EventStore.Core.Helpers.IODispatcher.ReadForward*
  commentId: Overload:EventStore.Core.Helpers.IODispatcher.ReadForward
  name: ReadForward
  nameWithType: IODispatcher.ReadForward
  fullName: EventStore.Core.Helpers.IODispatcher.ReadForward
- uid: System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted}
  commentId: T:System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted}
  parent: System
  definition: System.Action`1
  name: Action<ClientMessage.ReadStreamEventsForwardCompleted>
  nameWithType: Action<ClientMessage.ReadStreamEventsForwardCompleted>
  fullName: System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted>
  nameWithType.vb: Action(Of ClientMessage.ReadStreamEventsForwardCompleted)
  fullName.vb: System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted)
  name.vb: Action(Of ClientMessage.ReadStreamEventsForwardCompleted)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
    name: ClientMessage.ReadStreamEventsForwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsForwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
    name: ClientMessage.ReadStreamEventsForwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsForwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.ConfigureStreamAndWriteEvents*
  commentId: Overload:EventStore.Core.Helpers.IODispatcher.ConfigureStreamAndWriteEvents
  name: ConfigureStreamAndWriteEvents
  nameWithType: IODispatcher.ConfigureStreamAndWriteEvents
  fullName: EventStore.Core.Helpers.IODispatcher.ConfigureStreamAndWriteEvents
- uid: System.Lazy{EventStore.Core.Data.StreamMetadata}
  commentId: T:System.Lazy{EventStore.Core.Data.StreamMetadata}
  parent: System
  definition: System.Lazy`1
  name: Lazy<StreamMetadata>
  nameWithType: Lazy<StreamMetadata>
  fullName: System.Lazy<EventStore.Core.Data.StreamMetadata>
  nameWithType.vb: Lazy(Of StreamMetadata)
  fullName.vb: System.Lazy(Of EventStore.Core.Data.StreamMetadata)
  name.vb: Lazy(Of StreamMetadata)
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Data.StreamMetadata
    name: StreamMetadata
    nameWithType: StreamMetadata
    fullName: EventStore.Core.Data.StreamMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Data.StreamMetadata
    name: StreamMetadata
    nameWithType: StreamMetadata
    fullName: EventStore.Core.Data.StreamMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Data.Event[]
  isExternal: true
  name: Event[]
  nameWithType: Event[]
  fullName: EventStore.Core.Data.Event[]
  nameWithType.vb: Event()
  fullName.vb: EventStore.Core.Data.Event()
  name.vb: Event()
  spec.csharp:
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
  commentId: T:System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
  parent: System
  definition: System.Action`1
  name: Action<ClientMessage.WriteEventsCompleted>
  nameWithType: Action<ClientMessage.WriteEventsCompleted>
  fullName: System.Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>
  nameWithType.vb: Action(Of ClientMessage.WriteEventsCompleted)
  fullName.vb: System.Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted)
  name.vb: Action(Of ClientMessage.WriteEventsCompleted)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Lazy`1
  commentId: T:System.Lazy`1
  isExternal: true
  name: Lazy<T>
  nameWithType: Lazy<T>
  fullName: System.Lazy<T>
  nameWithType.vb: Lazy(Of T)
  fullName.vb: System.Lazy(Of T)
  name.vb: Lazy(Of T)
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.WriteEvents*
  commentId: Overload:EventStore.Core.Helpers.IODispatcher.WriteEvents
  name: WriteEvents
  nameWithType: IODispatcher.WriteEvents
  fullName: EventStore.Core.Helpers.IODispatcher.WriteEvents
- uid: EventStore.Core.Helpers.IODispatcher.QueueWriteEvents*
  commentId: Overload:EventStore.Core.Helpers.IODispatcher.QueueWriteEvents
  name: QueueWriteEvents
  nameWithType: IODispatcher.QueueWriteEvents
  fullName: EventStore.Core.Helpers.IODispatcher.QueueWriteEvents
- uid: EventStore.Core.Helpers.IODispatcher.WriteEvent*
  commentId: Overload:EventStore.Core.Helpers.IODispatcher.WriteEvent
  name: WriteEvent
  nameWithType: IODispatcher.WriteEvent
  fullName: EventStore.Core.Helpers.IODispatcher.WriteEvent
- uid: EventStore.Core.Data.Event
  commentId: T:EventStore.Core.Data.Event
  parent: EventStore.Core.Data
  name: Event
  nameWithType: Event
  fullName: EventStore.Core.Data.Event
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: EventStore.Core.Helpers.IODispatcher.DeleteStream*
  commentId: Overload:EventStore.Core.Helpers.IODispatcher.DeleteStream
  name: DeleteStream
  nameWithType: IODispatcher.DeleteStream
  fullName: EventStore.Core.Helpers.IODispatcher.DeleteStream
- uid: System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted}
  commentId: T:System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted}
  parent: System
  definition: System.Action`1
  name: Action<ClientMessage.DeleteStreamCompleted>
  nameWithType: Action<ClientMessage.DeleteStreamCompleted>
  fullName: System.Action<EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted>
  nameWithType.vb: Action(Of ClientMessage.DeleteStreamCompleted)
  fullName.vb: System.Action(Of EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted)
  name.vb: Action(Of ClientMessage.DeleteStreamCompleted)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
    name: ClientMessage.DeleteStreamCompleted
    nameWithType: ClientMessage.DeleteStreamCompleted
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
    name: ClientMessage.DeleteStreamCompleted
    nameWithType: ClientMessage.DeleteStreamCompleted
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.SubscribeAwake*
  commentId: Overload:EventStore.Core.Helpers.IODispatcher.SubscribeAwake
  name: SubscribeAwake
  nameWithType: IODispatcher.SubscribeAwake
  fullName: EventStore.Core.Helpers.IODispatcher.SubscribeAwake
- uid: EventStore.Core.Data.TFPos
  commentId: T:EventStore.Core.Data.TFPos
  parent: EventStore.Core.Data
  name: TFPos
  nameWithType: TFPos
  fullName: EventStore.Core.Data.TFPos
- uid: System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage}
  commentId: T:System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage}
  parent: System
  definition: System.Action`1
  name: Action<IODispatcherDelayedMessage>
  nameWithType: Action<IODispatcherDelayedMessage>
  fullName: System.Action<EventStore.Core.Helpers.IODispatcherDelayedMessage>
  nameWithType.vb: Action(Of IODispatcherDelayedMessage)
  fullName.vb: System.Action(Of EventStore.Core.Helpers.IODispatcherDelayedMessage)
  name.vb: Action(Of IODispatcherDelayedMessage)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcher.UnsubscribeAwake*
  commentId: Overload:EventStore.Core.Helpers.IODispatcher.UnsubscribeAwake
  name: UnsubscribeAwake
  nameWithType: IODispatcher.UnsubscribeAwake
  fullName: EventStore.Core.Helpers.IODispatcher.UnsubscribeAwake
- uid: EventStore.Core.Helpers.IODispatcher.UpdateStreamAcl*
  commentId: Overload:EventStore.Core.Helpers.IODispatcher.UpdateStreamAcl
  name: UpdateStreamAcl
  nameWithType: IODispatcher.UpdateStreamAcl
  fullName: EventStore.Core.Helpers.IODispatcher.UpdateStreamAcl
- uid: EventStore.Core.Data.StreamMetadata
  commentId: T:EventStore.Core.Data.StreamMetadata
  parent: EventStore.Core.Data
  name: StreamMetadata
  nameWithType: StreamMetadata
  fullName: EventStore.Core.Data.StreamMetadata
- uid: EventStore.Core.Helpers.IODispatcher.Delay*
  commentId: Overload:EventStore.Core.Helpers.IODispatcher.Delay
  name: Delay
  nameWithType: IODispatcher.Delay
  fullName: EventStore.Core.Helpers.IODispatcher.Delay
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: EventStore.Core.Helpers.IODispatcher.Handle*
  commentId: Overload:EventStore.Core.Helpers.IODispatcher.Handle
  name: Handle
  nameWithType: IODispatcher.Handle
  fullName: EventStore.Core.Helpers.IODispatcher.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Helpers.IODispatcherDelayedMessage}.Handle(EventStore.Core.Helpers.IODispatcherDelayedMessage)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Helpers.IODispatcherDelayedMessage}.Handle(EventStore.Core.Helpers.IODispatcherDelayedMessage)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Helpers.IODispatcherDelayedMessage}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(IODispatcherDelayedMessage)
  nameWithType: IHandle<IODispatcherDelayedMessage>.Handle(IODispatcherDelayedMessage)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Helpers.IODispatcherDelayedMessage>.Handle(EventStore.Core.Helpers.IODispatcherDelayedMessage)
  nameWithType.vb: IHandle(Of IODispatcherDelayedMessage).Handle(IODispatcherDelayedMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Helpers.IODispatcherDelayedMessage).Handle(EventStore.Core.Helpers.IODispatcherDelayedMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<IODispatcherDelayedMessage>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Helpers.IODispatcherDelayedMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of IODispatcherDelayedMessage).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Helpers.IODispatcherDelayedMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
  commentId: T:EventStore.Core.Helpers.IODispatcherDelayedMessage
  parent: EventStore.Core.Helpers
  name: IODispatcherDelayedMessage
  nameWithType: IODispatcherDelayedMessage
  fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Helpers.IODispatcherAsync
  commentId: T:EventStore.Core.Helpers.IODispatcherAsync
  id: IODispatcherAsync
  parent: EventStore.Core.Helpers
  children:
  - EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
  - EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  - EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
  - EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
  - EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  - EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  - EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  - EventStore.Core.Helpers.IODispatcherAsync.Run(EventStore.Core.Helpers.IODispatcherAsync.Step)
  - EventStore.Core.Helpers.IODispatcherAsync.Run(System.Collections.Generic.IEnumerable{EventStore.Core.Helpers.IODispatcherAsync.Step})
  langs:
  - csharp
  - vb
  name: IODispatcherAsync
  nameWithType: IODispatcherAsync
  fullName: EventStore.Core.Helpers.IODispatcherAsync
  type: Class
  source:
    id: IODispatcherAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcherAsync.cs
    startLine: 11
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public static class IODispatcherAsync
    content.vb: Public Module IODispatcherAsync
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Core.Helpers.IODispatcherAsync.Run(System.Collections.Generic.IEnumerable{EventStore.Core.Helpers.IODispatcherAsync.Step})
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.Run(System.Collections.Generic.IEnumerable{EventStore.Core.Helpers.IODispatcherAsync.Step})
  id: Run(System.Collections.Generic.IEnumerable{EventStore.Core.Helpers.IODispatcherAsync.Step})
  isExtensionMethod: true
  parent: EventStore.Core.Helpers.IODispatcherAsync
  langs:
  - csharp
  - vb
  name: Run(IEnumerable<IODispatcherAsync.Step>)
  nameWithType: IODispatcherAsync.Run(IEnumerable<IODispatcherAsync.Step>)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.Run(System.Collections.Generic.IEnumerable<EventStore.Core.Helpers.IODispatcherAsync.Step>)
  type: Method
  source:
    id: Run
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcherAsync.cs
    startLine: 33
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public static void Run(this IEnumerable<IODispatcherAsync.Step> actions)
    parameters:
    - id: actions
      type: System.Collections.Generic.IEnumerable{EventStore.Core.Helpers.IODispatcherAsync.Step}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Run(actions As IEnumerable(Of IODispatcherAsync.Step))
  overload: EventStore.Core.Helpers.IODispatcherAsync.Run*
  nameWithType.vb: IODispatcherAsync.Run(IEnumerable(Of IODispatcherAsync.Step))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.Run(System.Collections.Generic.IEnumerable(Of EventStore.Core.Helpers.IODispatcherAsync.Step))
  name.vb: Run(IEnumerable(Of IODispatcherAsync.Step))
- uid: EventStore.Core.Helpers.IODispatcherAsync.Run(EventStore.Core.Helpers.IODispatcherAsync.Step)
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.Run(EventStore.Core.Helpers.IODispatcherAsync.Step)
  id: Run(EventStore.Core.Helpers.IODispatcherAsync.Step)
  isExtensionMethod: true
  parent: EventStore.Core.Helpers.IODispatcherAsync
  langs:
  - csharp
  - vb
  name: Run(IODispatcherAsync.Step)
  nameWithType: IODispatcherAsync.Run(IODispatcherAsync.Step)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.Run(EventStore.Core.Helpers.IODispatcherAsync.Step)
  type: Method
  source:
    id: Run
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcherAsync.cs
    startLine: 38
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public static void Run(this IODispatcherAsync.Step action)
    parameters:
    - id: action
      type: EventStore.Core.Helpers.IODispatcherAsync.Step
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Run(action As IODispatcherAsync.Step)
  overload: EventStore.Core.Helpers.IODispatcherAsync.Run*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
  id: BeginReadForward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted},System.Action)
  isExtensionMethod: true
  parent: EventStore.Core.Helpers.IODispatcherAsync
  langs:
  - csharp
  - vb
  name: BeginReadForward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsForwardCompleted>, Action)
  nameWithType: IODispatcherAsync.BeginReadForward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsForwardCompleted>, Action)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted>, System.Action)
  type: Method
  source:
    id: BeginReadForward
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcherAsync.cs
    startLine: 42
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public static IODispatcherAsync.Step BeginReadForward(this IODispatcher ioDispatcher, IODispatcherAsync.CancellationScope cancellationScope, string streamId, long fromEventNumber, int maxCount, bool resolveLinks, IPrincipal principal, Action<ClientMessage.ReadStreamEventsForwardCompleted> handler, Action timeoutHandler)
    parameters:
    - id: ioDispatcher
      type: EventStore.Core.Helpers.IODispatcher
    - id: cancellationScope
      type: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    - id: streamId
      type: System.String
    - id: fromEventNumber
      type: System.Int64
    - id: maxCount
      type: System.Int32
    - id: resolveLinks
      type: System.Boolean
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: handler
      type: System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted}
    - id: timeoutHandler
      type: System.Action
    return:
      type: EventStore.Core.Helpers.IODispatcherAsync.Step
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BeginReadForward(ioDispatcher As IODispatcher, cancellationScope As IODispatcherAsync.CancellationScope, streamId As String, fromEventNumber As Long, maxCount As Integer, resolveLinks As Boolean, principal As IPrincipal, handler As Action(Of ClientMessage.ReadStreamEventsForwardCompleted), timeoutHandler As Action) As IODispatcherAsync.Step
  overload: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward*
  nameWithType.vb: IODispatcherAsync.BeginReadForward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsForwardCompleted), Action)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted), System.Action)
  name.vb: BeginReadForward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsForwardCompleted), Action)
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
  id: BeginReadBackward(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Int32,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted},System.Action)
  isExtensionMethod: true
  parent: EventStore.Core.Helpers.IODispatcherAsync
  langs:
  - csharp
  - vb
  name: BeginReadBackward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsBackwardCompleted>, Action)
  nameWithType: IODispatcherAsync.BeginReadBackward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action<ClientMessage.ReadStreamEventsBackwardCompleted>, Action)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted>, System.Action)
  type: Method
  source:
    id: BeginReadBackward
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcherAsync.cs
    startLine: 76
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public static IODispatcherAsync.Step BeginReadBackward(this IODispatcher ioDispatcher, IODispatcherAsync.CancellationScope cancellationScope, string streamId, long fromEventNumber, int maxCount, bool resolveLinks, IPrincipal principal, Action<ClientMessage.ReadStreamEventsBackwardCompleted> handler, Action timeoutHandler)
    parameters:
    - id: ioDispatcher
      type: EventStore.Core.Helpers.IODispatcher
    - id: cancellationScope
      type: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    - id: streamId
      type: System.String
    - id: fromEventNumber
      type: System.Int64
    - id: maxCount
      type: System.Int32
    - id: resolveLinks
      type: System.Boolean
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: handler
      type: System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted}
    - id: timeoutHandler
      type: System.Action
    return:
      type: EventStore.Core.Helpers.IODispatcherAsync.Step
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BeginReadBackward(ioDispatcher As IODispatcher, cancellationScope As IODispatcherAsync.CancellationScope, streamId As String, fromEventNumber As Long, maxCount As Integer, resolveLinks As Boolean, principal As IPrincipal, handler As Action(Of ClientMessage.ReadStreamEventsBackwardCompleted), timeoutHandler As Action) As IODispatcherAsync.Step
  overload: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward*
  nameWithType.vb: IODispatcherAsync.BeginReadBackward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsBackwardCompleted), Action)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Int32, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted), System.Action)
  name.vb: BeginReadBackward(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Int32, Boolean, IPrincipal, Action(Of ClientMessage.ReadStreamEventsBackwardCompleted), Action)
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  id: BeginWriteEvents(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.Event[],System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  isExtensionMethod: true
  parent: EventStore.Core.Helpers.IODispatcherAsync
  langs:
  - csharp
  - vb
  name: BeginWriteEvents(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, Event[], Action<ClientMessage.WriteEventsCompleted>)
  nameWithType: IODispatcherAsync.BeginWriteEvents(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, Event[], Action<ClientMessage.WriteEventsCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.Event[], System.Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>)
  type: Method
  source:
    id: BeginWriteEvents
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcherAsync.cs
    startLine: 110
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public static IODispatcherAsync.Step BeginWriteEvents(this IODispatcher ioDispatcher, IODispatcherAsync.CancellationScope cancellationScope, string streamId, long expectedVersion, IPrincipal principal, Event[] events, Action<ClientMessage.WriteEventsCompleted> handler)
    parameters:
    - id: ioDispatcher
      type: EventStore.Core.Helpers.IODispatcher
    - id: cancellationScope
      type: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    - id: streamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: events
      type: EventStore.Core.Data.Event[]
    - id: handler
      type: System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
    return:
      type: EventStore.Core.Helpers.IODispatcherAsync.Step
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BeginWriteEvents(ioDispatcher As IODispatcher, cancellationScope As IODispatcherAsync.CancellationScope, streamId As String, expectedVersion As Long, principal As IPrincipal, events As  Event (), handler As Action(Of ClientMessage.WriteEventsCompleted)) As IODispatcherAsync.Step
  overload: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents*
  nameWithType.vb: IODispatcherAsync.BeginWriteEvents(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, Event(), Action(Of ClientMessage.WriteEventsCompleted))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.Event(), System.Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted))
  name.vb: BeginWriteEvents(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, Event(), Action(Of ClientMessage.WriteEventsCompleted))
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  id: BeginDeleteStream(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Boolean,System.Security.Principal.IPrincipal,System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted})
  isExtensionMethod: true
  parent: EventStore.Core.Helpers.IODispatcherAsync
  langs:
  - csharp
  - vb
  name: BeginDeleteStream(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Boolean, IPrincipal, Action<ClientMessage.DeleteStreamCompleted>)
  nameWithType: IODispatcherAsync.BeginDeleteStream(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Boolean, IPrincipal, Action<ClientMessage.DeleteStreamCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Boolean, System.Security.Principal.IPrincipal, System.Action<EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted>)
  type: Method
  source:
    id: BeginDeleteStream
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcherAsync.cs
    startLine: 124
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public static IODispatcherAsync.Step BeginDeleteStream(this IODispatcher ioDispatcher, IODispatcherAsync.CancellationScope cancellationScope, string streamId, long expectedVersion, bool hardDelete, IPrincipal principal, Action<ClientMessage.DeleteStreamCompleted> handler)
    parameters:
    - id: ioDispatcher
      type: EventStore.Core.Helpers.IODispatcher
    - id: cancellationScope
      type: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    - id: streamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: hardDelete
      type: System.Boolean
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: handler
      type: System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted}
    return:
      type: EventStore.Core.Helpers.IODispatcherAsync.Step
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BeginDeleteStream(ioDispatcher As IODispatcher, cancellationScope As IODispatcherAsync.CancellationScope, streamId As String, expectedVersion As Long, hardDelete As Boolean, principal As IPrincipal, handler As Action(Of ClientMessage.DeleteStreamCompleted)) As IODispatcherAsync.Step
  overload: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream*
  nameWithType.vb: IODispatcherAsync.BeginDeleteStream(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Boolean, IPrincipal, Action(Of ClientMessage.DeleteStreamCompleted))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Boolean, System.Security.Principal.IPrincipal, System.Action(Of EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted))
  name.vb: BeginDeleteStream(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, Boolean, IPrincipal, Action(Of ClientMessage.DeleteStreamCompleted))
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  id: BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,EventStore.Core.Data.TFPos,System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage},System.Nullable{System.Guid})
  isExtensionMethod: true
  parent: EventStore.Core.Helpers.IODispatcherAsync
  langs:
  - csharp
  - vb
  name: BeginSubscribeAwake(IODispatcher, IODispatcherAsync.CancellationScope, String, TFPos, Action<IODispatcherDelayedMessage>, Nullable<Guid>)
  nameWithType: IODispatcherAsync.BeginSubscribeAwake(IODispatcher, IODispatcherAsync.CancellationScope, String, TFPos, Action<IODispatcherDelayedMessage>, Nullable<Guid>)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, EventStore.Core.Data.TFPos, System.Action<EventStore.Core.Helpers.IODispatcherDelayedMessage>, System.Nullable<System.Guid>)
  type: Method
  source:
    id: BeginSubscribeAwake
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcherAsync.cs
    startLine: 145
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public static IODispatcherAsync.Step BeginSubscribeAwake(this IODispatcher ioDispatcher, IODispatcherAsync.CancellationScope cancellationScope, string streamId, TFPos from, Action<IODispatcherDelayedMessage> handler, Guid? correlationId = default(Guid? ))
    parameters:
    - id: ioDispatcher
      type: EventStore.Core.Helpers.IODispatcher
    - id: cancellationScope
      type: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    - id: streamId
      type: System.String
    - id: from
      type: EventStore.Core.Data.TFPos
    - id: handler
      type: System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage}
    - id: correlationId
      type: System.Nullable{System.Guid}
    return:
      type: EventStore.Core.Helpers.IODispatcherAsync.Step
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BeginSubscribeAwake(ioDispatcher As IODispatcher, cancellationScope As IODispatcherAsync.CancellationScope, streamId As String, from As TFPos, handler As Action(Of IODispatcherDelayedMessage), correlationId As Guid? = Nothing) As IODispatcherAsync.Step
  overload: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake*
  nameWithType.vb: IODispatcherAsync.BeginSubscribeAwake(IODispatcher, IODispatcherAsync.CancellationScope, String, TFPos, Action(Of IODispatcherDelayedMessage), Nullable(Of Guid))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, EventStore.Core.Data.TFPos, System.Action(Of EventStore.Core.Helpers.IODispatcherDelayedMessage), System.Nullable(Of System.Guid))
  name.vb: BeginSubscribeAwake(IODispatcher, IODispatcherAsync.CancellationScope, String, TFPos, Action(Of IODispatcherDelayedMessage), Nullable(Of Guid))
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  id: BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.String,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Data.StreamMetadata,System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  isExtensionMethod: true
  parent: EventStore.Core.Helpers.IODispatcherAsync
  langs:
  - csharp
  - vb
  name: BeginUpdateStreamAcl(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, StreamMetadata, Action<ClientMessage.WriteEventsCompleted>)
  nameWithType: IODispatcherAsync.BeginUpdateStreamAcl(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, StreamMetadata, Action<ClientMessage.WriteEventsCompleted>)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.StreamMetadata, System.Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>)
  type: Method
  source:
    id: BeginUpdateStreamAcl
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcherAsync.cs
    startLine: 163
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public static IODispatcherAsync.Step BeginUpdateStreamAcl(this IODispatcher ioDispatcher, IODispatcherAsync.CancellationScope cancellationScope, string streamId, long expectedVersion, IPrincipal principal, StreamMetadata metadata, Action<ClientMessage.WriteEventsCompleted> handler)
    parameters:
    - id: ioDispatcher
      type: EventStore.Core.Helpers.IODispatcher
    - id: cancellationScope
      type: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    - id: streamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: principal
      type: System.Security.Principal.IPrincipal
    - id: metadata
      type: EventStore.Core.Data.StreamMetadata
    - id: handler
      type: System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
    return:
      type: EventStore.Core.Helpers.IODispatcherAsync.Step
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BeginUpdateStreamAcl(ioDispatcher As IODispatcher, cancellationScope As IODispatcherAsync.CancellationScope, streamId As String, expectedVersion As Long, principal As IPrincipal, metadata As StreamMetadata, handler As Action(Of ClientMessage.WriteEventsCompleted)) As IODispatcherAsync.Step
  overload: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl*
  nameWithType.vb: IODispatcherAsync.BeginUpdateStreamAcl(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, StreamMetadata, Action(Of ClientMessage.WriteEventsCompleted))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.String, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Data.StreamMetadata, System.Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted))
  name.vb: BeginUpdateStreamAcl(IODispatcher, IODispatcherAsync.CancellationScope, String, Int64, IPrincipal, StreamMetadata, Action(Of ClientMessage.WriteEventsCompleted))
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
  commentId: M:EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
  id: BeginDelay(EventStore.Core.Helpers.IODispatcher,EventStore.Core.Helpers.IODispatcherAsync.CancellationScope,System.TimeSpan,System.Action)
  isExtensionMethod: true
  parent: EventStore.Core.Helpers.IODispatcherAsync
  langs:
  - csharp
  - vb
  name: BeginDelay(IODispatcher, IODispatcherAsync.CancellationScope, TimeSpan, Action)
  nameWithType: IODispatcherAsync.BeginDelay(IODispatcher, IODispatcherAsync.CancellationScope, TimeSpan, Action)
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay(EventStore.Core.Helpers.IODispatcher, EventStore.Core.Helpers.IODispatcherAsync.CancellationScope, System.TimeSpan, System.Action)
  type: Method
  source:
    id: BeginDelay
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Helpers/IODispatcherAsync.cs
    startLine: 184
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Helpers
  syntax:
    content: public static IODispatcherAsync.Step BeginDelay(this IODispatcher ioDispatcher, IODispatcherAsync.CancellationScope cancellationScope, TimeSpan timeout, Action handler)
    parameters:
    - id: ioDispatcher
      type: EventStore.Core.Helpers.IODispatcher
    - id: cancellationScope
      type: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
    - id: timeout
      type: System.TimeSpan
    - id: handler
      type: System.Action
    return:
      type: EventStore.Core.Helpers.IODispatcherAsync.Step
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BeginDelay(ioDispatcher As IODispatcher, cancellationScope As IODispatcherAsync.CancellationScope, timeout As TimeSpan, handler As Action) As IODispatcherAsync.Step
  overload: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EventStore.Core.Helpers
  commentId: N:EventStore.Core.Helpers
  name: EventStore.Core.Helpers
  nameWithType: EventStore.Core.Helpers
  fullName: EventStore.Core.Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Helpers.IODispatcherAsync.Run*
  commentId: Overload:EventStore.Core.Helpers.IODispatcherAsync.Run
  name: Run
  nameWithType: IODispatcherAsync.Run
  fullName: EventStore.Core.Helpers.IODispatcherAsync.Run
- uid: System.Collections.Generic.IEnumerable{EventStore.Core.Helpers.IODispatcherAsync.Step}
  commentId: T:System.Collections.Generic.IEnumerable{EventStore.Core.Helpers.IODispatcherAsync.Step}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IODispatcherAsync.Step>
  nameWithType: IEnumerable<IODispatcherAsync.Step>
  fullName: System.Collections.Generic.IEnumerable<EventStore.Core.Helpers.IODispatcherAsync.Step>
  nameWithType.vb: IEnumerable(Of IODispatcherAsync.Step)
  fullName.vb: System.Collections.Generic.IEnumerable(Of EventStore.Core.Helpers.IODispatcherAsync.Step)
  name.vb: IEnumerable(Of IODispatcherAsync.Step)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Helpers.IODispatcherAsync.Step
    name: IODispatcherAsync.Step
    nameWithType: IODispatcherAsync.Step
    fullName: EventStore.Core.Helpers.IODispatcherAsync.Step
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Helpers.IODispatcherAsync.Step
    name: IODispatcherAsync.Step
    nameWithType: IODispatcherAsync.Step
    fullName: EventStore.Core.Helpers.IODispatcherAsync.Step
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EventStore.Core.Helpers.IODispatcherAsync.Step
  commentId: T:EventStore.Core.Helpers.IODispatcherAsync.Step
  parent: EventStore.Core.Helpers
  name: IODispatcherAsync.Step
  nameWithType: IODispatcherAsync.Step
  fullName: EventStore.Core.Helpers.IODispatcherAsync.Step
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward*
  commentId: Overload:EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward
  name: BeginReadForward
  nameWithType: IODispatcherAsync.BeginReadForward
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadForward
- uid: EventStore.Core.Helpers.IODispatcher
  commentId: T:EventStore.Core.Helpers.IODispatcher
  parent: EventStore.Core.Helpers
  name: IODispatcher
  nameWithType: IODispatcher
  fullName: EventStore.Core.Helpers.IODispatcher
- uid: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  commentId: T:EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
  parent: EventStore.Core.Helpers
  name: IODispatcherAsync.CancellationScope
  nameWithType: IODispatcherAsync.CancellationScope
  fullName: EventStore.Core.Helpers.IODispatcherAsync.CancellationScope
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.IPrincipal
  commentId: T:System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted}
  commentId: T:System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted}
  parent: System
  definition: System.Action`1
  name: Action<ClientMessage.ReadStreamEventsForwardCompleted>
  nameWithType: Action<ClientMessage.ReadStreamEventsForwardCompleted>
  fullName: System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted>
  nameWithType.vb: Action(Of ClientMessage.ReadStreamEventsForwardCompleted)
  fullName.vb: System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted)
  name.vb: Action(Of ClientMessage.ReadStreamEventsForwardCompleted)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
    name: ClientMessage.ReadStreamEventsForwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsForwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
    name: ClientMessage.ReadStreamEventsForwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsForwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForwardCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Security.Principal
  commentId: N:System.Security.Principal
  isExternal: true
  name: System.Security.Principal
  nameWithType: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward*
  commentId: Overload:EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward
  name: BeginReadBackward
  nameWithType: IODispatcherAsync.BeginReadBackward
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginReadBackward
- uid: System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted}
  commentId: T:System.Action{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted}
  parent: System
  definition: System.Action`1
  name: Action<ClientMessage.ReadStreamEventsBackwardCompleted>
  nameWithType: Action<ClientMessage.ReadStreamEventsBackwardCompleted>
  fullName: System.Action<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted>
  nameWithType.vb: Action(Of ClientMessage.ReadStreamEventsBackwardCompleted)
  fullName.vb: System.Action(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted)
  name.vb: Action(Of ClientMessage.ReadStreamEventsBackwardCompleted)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
    name: ClientMessage.ReadStreamEventsBackwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
    name: ClientMessage.ReadStreamEventsBackwardCompleted
    nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents*
  commentId: Overload:EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents
  name: BeginWriteEvents
  nameWithType: IODispatcherAsync.BeginWriteEvents
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginWriteEvents
- uid: EventStore.Core.Data.Event[]
  isExternal: true
  name: Event[]
  nameWithType: Event[]
  fullName: EventStore.Core.Data.Event[]
  nameWithType.vb: Event()
  fullName.vb: EventStore.Core.Data.Event()
  name.vb: Event()
  spec.csharp:
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
  commentId: T:System.Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
  parent: System
  definition: System.Action`1
  name: Action<ClientMessage.WriteEventsCompleted>
  nameWithType: Action<ClientMessage.WriteEventsCompleted>
  fullName: System.Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>
  nameWithType.vb: Action(Of ClientMessage.WriteEventsCompleted)
  fullName.vb: System.Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted)
  name.vb: Action(Of ClientMessage.WriteEventsCompleted)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream*
  commentId: Overload:EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream
  name: BeginDeleteStream
  nameWithType: IODispatcherAsync.BeginDeleteStream
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDeleteStream
- uid: System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted}
  commentId: T:System.Action{EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted}
  parent: System
  definition: System.Action`1
  name: Action<ClientMessage.DeleteStreamCompleted>
  nameWithType: Action<ClientMessage.DeleteStreamCompleted>
  fullName: System.Action<EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted>
  nameWithType.vb: Action(Of ClientMessage.DeleteStreamCompleted)
  fullName.vb: System.Action(Of EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted)
  name.vb: Action(Of ClientMessage.DeleteStreamCompleted)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
    name: ClientMessage.DeleteStreamCompleted
    nameWithType: ClientMessage.DeleteStreamCompleted
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
    name: ClientMessage.DeleteStreamCompleted
    nameWithType: ClientMessage.DeleteStreamCompleted
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStreamCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake*
  commentId: Overload:EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake
  name: BeginSubscribeAwake
  nameWithType: IODispatcherAsync.BeginSubscribeAwake
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginSubscribeAwake
- uid: EventStore.Core.Data.TFPos
  commentId: T:EventStore.Core.Data.TFPos
  parent: EventStore.Core.Data
  name: TFPos
  nameWithType: TFPos
  fullName: EventStore.Core.Data.TFPos
- uid: System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage}
  commentId: T:System.Action{EventStore.Core.Helpers.IODispatcherDelayedMessage}
  parent: System
  definition: System.Action`1
  name: Action<IODispatcherDelayedMessage>
  nameWithType: Action<IODispatcherDelayedMessage>
  fullName: System.Action<EventStore.Core.Helpers.IODispatcherDelayedMessage>
  nameWithType.vb: Action(Of IODispatcherDelayedMessage)
  fullName.vb: System.Action(Of EventStore.Core.Helpers.IODispatcherDelayedMessage)
  name.vb: Action(Of IODispatcherDelayedMessage)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Helpers.IODispatcherDelayedMessage
    name: IODispatcherDelayedMessage
    nameWithType: IODispatcherDelayedMessage
    fullName: EventStore.Core.Helpers.IODispatcherDelayedMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Guid}
  commentId: T:System.Nullable{System.Guid}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Guid>
  nameWithType: Nullable<Guid>
  fullName: System.Nullable<System.Guid>
  nameWithType.vb: Nullable(Of Guid)
  fullName.vb: System.Nullable(Of System.Guid)
  name.vb: Nullable(Of Guid)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl*
  commentId: Overload:EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl
  name: BeginUpdateStreamAcl
  nameWithType: IODispatcherAsync.BeginUpdateStreamAcl
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginUpdateStreamAcl
- uid: EventStore.Core.Data.StreamMetadata
  commentId: T:EventStore.Core.Data.StreamMetadata
  parent: EventStore.Core.Data
  name: StreamMetadata
  nameWithType: StreamMetadata
  fullName: EventStore.Core.Data.StreamMetadata
- uid: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay*
  commentId: Overload:EventStore.Core.Helpers.IODispatcherAsync.BeginDelay
  name: BeginDelay
  nameWithType: IODispatcherAsync.BeginDelay
  fullName: EventStore.Core.Helpers.IODispatcherAsync.BeginDelay
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Index.ISearchTable
  commentId: T:EventStore.Core.Index.ISearchTable
  id: ISearchTable
  parent: EventStore.Core.Index
  children:
  - EventStore.Core.Index.ISearchTable.Count
  - EventStore.Core.Index.ISearchTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  - EventStore.Core.Index.ISearchTable.Id
  - EventStore.Core.Index.ISearchTable.IterateAllInOrder
  - EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  - EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  - EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  - EventStore.Core.Index.ISearchTable.Version
  langs:
  - csharp
  - vb
  name: ISearchTable
  nameWithType: ISearchTable
  fullName: EventStore.Core.Index.ISearchTable
  type: Interface
  source:
    remote:
      path: src/EventStore.Core/Index/ISearchTable.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ISearchTable
    path: ../EventStore/src/EventStore.Core/Index/ISearchTable.cs
    startLine: 5
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public interface ISearchTable
    content.vb: Public Interface ISearchTable
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Index.ISearchTable.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Index.ISearchTable.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EventStore.Core.Index.ISearchTable.Id
  commentId: P:EventStore.Core.Index.ISearchTable.Id
  id: Id
  parent: EventStore.Core.Index.ISearchTable
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ISearchTable.Id
  fullName: EventStore.Core.Index.ISearchTable.Id
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Index/ISearchTable.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Id
    path: ../EventStore/src/EventStore.Core/Index/ISearchTable.cs
    startLine: 7
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: Guid Id { get; }
    parameters: []
    return:
      type: Guid
    content.vb: ReadOnly Property Id As Guid
  overload: EventStore.Core.Index.ISearchTable.Id*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Core.Index.ISearchTable.Count
  commentId: P:EventStore.Core.Index.ISearchTable.Count
  id: Count
  parent: EventStore.Core.Index.ISearchTable
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ISearchTable.Count
  fullName: EventStore.Core.Index.ISearchTable.Count
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Index/ISearchTable.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Count
    path: ../EventStore/src/EventStore.Core/Index/ISearchTable.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: long Count { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: ReadOnly Property Count As Long
  overload: EventStore.Core.Index.ISearchTable.Count*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Core.Index.ISearchTable.Version
  commentId: P:EventStore.Core.Index.ISearchTable.Version
  id: Version
  parent: EventStore.Core.Index.ISearchTable
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: ISearchTable.Version
  fullName: EventStore.Core.Index.ISearchTable.Version
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Index/ISearchTable.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Version
    path: ../EventStore/src/EventStore.Core/Index/ISearchTable.cs
    startLine: 9
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: byte Version { get; }
    parameters: []
    return:
      type: System.Byte
    content.vb: ReadOnly Property Version As Byte
  overload: EventStore.Core.Index.ISearchTable.Version*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  commentId: M:EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  id: TryGetOneValue(System.UInt64,System.Int64,System.Int64@)
  parent: EventStore.Core.Index.ISearchTable
  langs:
  - csharp
  - vb
  name: TryGetOneValue(UInt64, Int64, out Int64)
  nameWithType: ISearchTable.TryGetOneValue(UInt64, Int64, out Int64)
  fullName: EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64, System.Int64, out System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/ISearchTable.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TryGetOneValue
    path: ../EventStore/src/EventStore.Core/Index/ISearchTable.cs
    startLine: 11
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: bool TryGetOneValue(ulong stream, long number, out long position)
    parameters:
    - id: stream
      type: System.UInt64
    - id: number
      type: System.Int64
    - id: position
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: Function TryGetOneValue(stream As ULong, number As Long, ByRef position As Long) As Boolean
  overload: EventStore.Core.Index.ISearchTable.TryGetOneValue*
  nameWithType.vb: ISearchTable.TryGetOneValue(UInt64, Int64, ByRef Int64)
  fullName.vb: EventStore.Core.Index.ISearchTable.TryGetOneValue(System.UInt64, System.Int64, ByRef System.Int64)
  name.vb: TryGetOneValue(UInt64, Int64, ByRef Int64)
- uid: EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  id: TryGetLatestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.ISearchTable
  langs:
  - csharp
  - vb
  name: TryGetLatestEntry(UInt64, out IndexEntry)
  nameWithType: ISearchTable.TryGetLatestEntry(UInt64, out IndexEntry)
  fullName: EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64, out EventStore.Core.Index.IndexEntry)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/ISearchTable.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TryGetLatestEntry
    path: ../EventStore/src/EventStore.Core/Index/ISearchTable.cs
    startLine: 12
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: bool TryGetLatestEntry(ulong stream, out IndexEntry entry)
    parameters:
    - id: stream
      type: System.UInt64
    - id: entry
      type: EventStore.Core.Index.IndexEntry
    return:
      type: System.Boolean
    content.vb: Function TryGetLatestEntry(stream As ULong, ByRef entry As IndexEntry) As Boolean
  overload: EventStore.Core.Index.ISearchTable.TryGetLatestEntry*
  nameWithType.vb: ISearchTable.TryGetLatestEntry(UInt64, ByRef IndexEntry)
  fullName.vb: EventStore.Core.Index.ISearchTable.TryGetLatestEntry(System.UInt64, ByRef EventStore.Core.Index.IndexEntry)
  name.vb: TryGetLatestEntry(UInt64, ByRef IndexEntry)
- uid: EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  id: TryGetOldestEntry(System.UInt64,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.ISearchTable
  langs:
  - csharp
  - vb
  name: TryGetOldestEntry(UInt64, out IndexEntry)
  nameWithType: ISearchTable.TryGetOldestEntry(UInt64, out IndexEntry)
  fullName: EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64, out EventStore.Core.Index.IndexEntry)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/ISearchTable.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TryGetOldestEntry
    path: ../EventStore/src/EventStore.Core/Index/ISearchTable.cs
    startLine: 13
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: bool TryGetOldestEntry(ulong stream, out IndexEntry entry)
    parameters:
    - id: stream
      type: System.UInt64
    - id: entry
      type: EventStore.Core.Index.IndexEntry
    return:
      type: System.Boolean
    content.vb: Function TryGetOldestEntry(stream As ULong, ByRef entry As IndexEntry) As Boolean
  overload: EventStore.Core.Index.ISearchTable.TryGetOldestEntry*
  nameWithType.vb: ISearchTable.TryGetOldestEntry(UInt64, ByRef IndexEntry)
  fullName.vb: EventStore.Core.Index.ISearchTable.TryGetOldestEntry(System.UInt64, ByRef EventStore.Core.Index.IndexEntry)
  name.vb: TryGetOldestEntry(UInt64, ByRef IndexEntry)
- uid: EventStore.Core.Index.ISearchTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  commentId: M:EventStore.Core.Index.ISearchTable.GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  id: GetRange(System.UInt64,System.Int64,System.Int64,System.Nullable{System.Int32})
  parent: EventStore.Core.Index.ISearchTable
  langs:
  - csharp
  - vb
  name: GetRange(UInt64, Int64, Int64, Nullable<Int32>)
  nameWithType: ISearchTable.GetRange(UInt64, Int64, Int64, Nullable<Int32>)
  fullName: EventStore.Core.Index.ISearchTable.GetRange(System.UInt64, System.Int64, System.Int64, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/ISearchTable.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetRange
    path: ../EventStore/src/EventStore.Core/Index/ISearchTable.cs
    startLine: 14
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: IEnumerable<IndexEntry> GetRange(ulong stream, long startNumber, long endNumber, int? limit = null)
    parameters:
    - id: stream
      type: System.UInt64
    - id: startNumber
      type: System.Int64
    - id: endNumber
      type: System.Int64
    - id: limit
      type: System.Nullable{System.Int32}
    return:
      type: IEnumerable{EventStore.Core.Index.IndexEntry}
    content.vb: Function GetRange(stream As ULong, startNumber As Long, endNumber As Long, limit As Integer? = Nothing) As IEnumerable(Of IndexEntry)
  overload: EventStore.Core.Index.ISearchTable.GetRange*
  nameWithType.vb: ISearchTable.GetRange(UInt64, Int64, Int64, Nullable(Of Int32))
  fullName.vb: EventStore.Core.Index.ISearchTable.GetRange(System.UInt64, System.Int64, System.Int64, System.Nullable(Of System.Int32))
  name.vb: GetRange(UInt64, Int64, Int64, Nullable(Of Int32))
- uid: EventStore.Core.Index.ISearchTable.IterateAllInOrder
  commentId: M:EventStore.Core.Index.ISearchTable.IterateAllInOrder
  id: IterateAllInOrder
  parent: EventStore.Core.Index.ISearchTable
  langs:
  - csharp
  - vb
  name: IterateAllInOrder()
  nameWithType: ISearchTable.IterateAllInOrder()
  fullName: EventStore.Core.Index.ISearchTable.IterateAllInOrder()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Index/ISearchTable.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: IterateAllInOrder
    path: ../EventStore/src/EventStore.Core/Index/ISearchTable.cs
    startLine: 15
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: IEnumerable<IndexEntry> IterateAllInOrder()
    return:
      type: IEnumerable{EventStore.Core.Index.IndexEntry}
    content.vb: Function IterateAllInOrder As IEnumerable(Of IndexEntry)
  overload: EventStore.Core.Index.ISearchTable.IterateAllInOrder*
references:
- uid: EventStore.Core.Index
  commentId: N:EventStore.Core.Index
  name: EventStore.Core.Index
  nameWithType: EventStore.Core.Index
  fullName: EventStore.Core.Index
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.ISearchTable.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ISearchTable>()
  nameWithType: ProtobufExtensions.Serialize<ISearchTable>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Index.ISearchTable>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ISearchTable)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Index.ISearchTable)()
  name.vb: Serialize(Of ISearchTable)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ISearchTable>
    nameWithType: ProtobufExtensions.Serialize<ISearchTable>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Index.ISearchTable>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ISearchTable)
    nameWithType: ProtobufExtensions.Serialize(Of ISearchTable)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Index.ISearchTable)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.ISearchTable.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ISearchTable>()
  nameWithType: ProtobufExtensions.SerializeToArray<ISearchTable>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Index.ISearchTable>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ISearchTable)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Index.ISearchTable)()
  name.vb: SerializeToArray(Of ISearchTable)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ISearchTable>
    nameWithType: ProtobufExtensions.SerializeToArray<ISearchTable>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Index.ISearchTable>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ISearchTable)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ISearchTable)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Index.ISearchTable)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Index.ISearchTable.Id*
  commentId: Overload:EventStore.Core.Index.ISearchTable.Id
  name: Id
  nameWithType: ISearchTable.Id
  fullName: EventStore.Core.Index.ISearchTable.Id
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: EventStore.Core.Index.ISearchTable.Count*
  commentId: Overload:EventStore.Core.Index.ISearchTable.Count
  name: Count
  nameWithType: ISearchTable.Count
  fullName: EventStore.Core.Index.ISearchTable.Count
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Index.ISearchTable.Version*
  commentId: Overload:EventStore.Core.Index.ISearchTable.Version
  name: Version
  nameWithType: ISearchTable.Version
  fullName: EventStore.Core.Index.ISearchTable.Version
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: EventStore.Core.Index.ISearchTable.TryGetOneValue*
  commentId: Overload:EventStore.Core.Index.ISearchTable.TryGetOneValue
  name: TryGetOneValue
  nameWithType: ISearchTable.TryGetOneValue
  fullName: EventStore.Core.Index.ISearchTable.TryGetOneValue
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Index.ISearchTable.TryGetLatestEntry*
  commentId: Overload:EventStore.Core.Index.ISearchTable.TryGetLatestEntry
  name: TryGetLatestEntry
  nameWithType: ISearchTable.TryGetLatestEntry
  fullName: EventStore.Core.Index.ISearchTable.TryGetLatestEntry
- uid: EventStore.Core.Index.IndexEntry
  commentId: T:EventStore.Core.Index.IndexEntry
  parent: EventStore.Core.Index
  name: IndexEntry
  nameWithType: IndexEntry
  fullName: EventStore.Core.Index.IndexEntry
- uid: EventStore.Core.Index.ISearchTable.TryGetOldestEntry*
  commentId: Overload:EventStore.Core.Index.ISearchTable.TryGetOldestEntry
  name: TryGetOldestEntry
  nameWithType: ISearchTable.TryGetOldestEntry
  fullName: EventStore.Core.Index.ISearchTable.TryGetOldestEntry
- uid: EventStore.Core.Index.ISearchTable.GetRange*
  commentId: Overload:EventStore.Core.Index.ISearchTable.GetRange
  name: GetRange
  nameWithType: ISearchTable.GetRange
  fullName: EventStore.Core.Index.ISearchTable.GetRange
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{EventStore.Core.Index.IndexEntry}
  commentId: '!:IEnumerable{EventStore.Core.Index.IndexEntry}'
  definition: IEnumerable`1
  name: IEnumerable<IndexEntry>
  nameWithType: IEnumerable<IndexEntry>
  fullName: IEnumerable<EventStore.Core.Index.IndexEntry>
  nameWithType.vb: IEnumerable(Of IndexEntry)
  fullName.vb: IEnumerable(Of EventStore.Core.Index.IndexEntry)
  name.vb: IEnumerable(Of IndexEntry)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.ISearchTable.IterateAllInOrder*
  commentId: Overload:EventStore.Core.Index.ISearchTable.IterateAllInOrder
  name: IterateAllInOrder
  nameWithType: ISearchTable.IterateAllInOrder
  fullName: EventStore.Core.Index.ISearchTable.IterateAllInOrder

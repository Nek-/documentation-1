### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Index.IndexMap
  commentId: T:EventStore.Core.Index.IndexMap
  id: IndexMap
  parent: EventStore.Core.Index
  children:
  - EventStore.Core.Index.IndexMap.AddPTable(EventStore.Core.Index.PTable,System.Int64,System.Int64,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Int32,System.Boolean)
  - EventStore.Core.Index.IndexMap.AddPTableForAutomaticMerge(EventStore.Core.Index.PTable,System.Int64,System.Int64,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Boolean)
  - EventStore.Core.Index.IndexMap.AddPTableForManualMerge(System.Int64,System.Int64,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Boolean)
  - EventStore.Core.Index.IndexMap.CommitCheckpoint
  - EventStore.Core.Index.IndexMap.CreateEmpty(System.Int32,System.Int32)
  - EventStore.Core.Index.IndexMap.Dispose(System.TimeSpan)
  - EventStore.Core.Index.IndexMap.FromFile(System.String,System.Int32,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Int32)
  - EventStore.Core.Index.IndexMap.GetAllFilenames
  - EventStore.Core.Index.IndexMap.GetTableForManualMerge
  - EventStore.Core.Index.IndexMap.IndexMapVersion
  - EventStore.Core.Index.IndexMap.InOrder
  - EventStore.Core.Index.IndexMap.InReverseOrder
  - EventStore.Core.Index.IndexMap.PrepareCheckpoint
  - EventStore.Core.Index.IndexMap.SaveToFile(System.String)
  - EventStore.Core.Index.IndexMap.Scavenge(System.Guid,System.Threading.CancellationToken,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Boolean)
  - EventStore.Core.Index.IndexMap.Version
  langs:
  - csharp
  - vb
  name: IndexMap
  nameWithType: IndexMap
  fullName: EventStore.Core.Index.IndexMap
  type: Class
  source:
    id: IndexMap
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 13
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public class IndexMap
    content.vb: Public Class IndexMap
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Index.IndexMap.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Index.IndexMap.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Index.IndexMap.IndexMapVersion
  commentId: F:EventStore.Core.Index.IndexMap.IndexMapVersion
  id: IndexMapVersion
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: IndexMapVersion
  nameWithType: IndexMap.IndexMapVersion
  fullName: EventStore.Core.Index.IndexMap.IndexMapVersion
  type: Field
  source:
    id: IndexMapVersion
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 16
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public const int IndexMapVersion = 2
    return:
      type: System.Int32
    content.vb: Public Const IndexMapVersion As Integer = 2
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Index.IndexMap.Version
  commentId: F:EventStore.Core.Index.IndexMap.Version
  id: Version
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: IndexMap.Version
  fullName: EventStore.Core.Index.IndexMap.Version
  type: Field
  source:
    id: Version
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 18
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public readonly int Version
    return:
      type: System.Int32
    content.vb: Public ReadOnly Version As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Index.IndexMap.PrepareCheckpoint
  commentId: F:EventStore.Core.Index.IndexMap.PrepareCheckpoint
  id: PrepareCheckpoint
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: PrepareCheckpoint
  nameWithType: IndexMap.PrepareCheckpoint
  fullName: EventStore.Core.Index.IndexMap.PrepareCheckpoint
  type: Field
  source:
    id: PrepareCheckpoint
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 20
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public readonly long PrepareCheckpoint
    return:
      type: System.Int64
    content.vb: Public ReadOnly PrepareCheckpoint As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Index.IndexMap.CommitCheckpoint
  commentId: F:EventStore.Core.Index.IndexMap.CommitCheckpoint
  id: CommitCheckpoint
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: CommitCheckpoint
  nameWithType: IndexMap.CommitCheckpoint
  fullName: EventStore.Core.Index.IndexMap.CommitCheckpoint
  type: Field
  source:
    id: CommitCheckpoint
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 21
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public readonly long CommitCheckpoint
    return:
      type: System.Int64
    content.vb: Public ReadOnly CommitCheckpoint As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Index.IndexMap.InOrder
  commentId: M:EventStore.Core.Index.IndexMap.InOrder
  id: InOrder
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: InOrder()
  nameWithType: IndexMap.InOrder()
  fullName: EventStore.Core.Index.IndexMap.InOrder()
  type: Method
  source:
    id: InOrder
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 81
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public IEnumerable<PTable> InOrder()
    return:
      type: System.Collections.Generic.IEnumerable{EventStore.Core.Index.PTable}
    content.vb: Public Function InOrder As IEnumerable(Of PTable)
  overload: EventStore.Core.Index.IndexMap.InOrder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.IndexMap.InReverseOrder
  commentId: M:EventStore.Core.Index.IndexMap.InReverseOrder
  id: InReverseOrder
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: InReverseOrder()
  nameWithType: IndexMap.InReverseOrder()
  fullName: EventStore.Core.Index.IndexMap.InReverseOrder()
  type: Method
  source:
    id: InReverseOrder
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 92
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public IEnumerable<PTable> InReverseOrder()
    return:
      type: System.Collections.Generic.IEnumerable{EventStore.Core.Index.PTable}
    content.vb: Public Function InReverseOrder As IEnumerable(Of PTable)
  overload: EventStore.Core.Index.IndexMap.InReverseOrder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.IndexMap.GetAllFilenames
  commentId: M:EventStore.Core.Index.IndexMap.GetAllFilenames
  id: GetAllFilenames
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: GetAllFilenames()
  nameWithType: IndexMap.GetAllFilenames()
  fullName: EventStore.Core.Index.IndexMap.GetAllFilenames()
  type: Method
  source:
    id: GetAllFilenames
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 103
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public IEnumerable<string> GetAllFilenames()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Function GetAllFilenames As IEnumerable(Of String)
  overload: EventStore.Core.Index.IndexMap.GetAllFilenames*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.IndexMap.CreateEmpty(System.Int32,System.Int32)
  commentId: M:EventStore.Core.Index.IndexMap.CreateEmpty(System.Int32,System.Int32)
  id: CreateEmpty(System.Int32,System.Int32)
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: CreateEmpty(Int32, Int32)
  nameWithType: IndexMap.CreateEmpty(Int32, Int32)
  fullName: EventStore.Core.Index.IndexMap.CreateEmpty(System.Int32, System.Int32)
  type: Method
  source:
    id: CreateEmpty
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 109
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public static IndexMap CreateEmpty(int maxTablesPerLevel, int maxTableLevelsForAutomaticMerge)
    parameters:
    - id: maxTablesPerLevel
      type: System.Int32
    - id: maxTableLevelsForAutomaticMerge
      type: System.Int32
    return:
      type: EventStore.Core.Index.IndexMap
    content.vb: Public Shared Function CreateEmpty(maxTablesPerLevel As Integer, maxTableLevelsForAutomaticMerge As Integer) As IndexMap
  overload: EventStore.Core.Index.IndexMap.CreateEmpty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.Index.IndexMap.FromFile(System.String,System.Int32,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Int32)
  commentId: M:EventStore.Core.Index.IndexMap.FromFile(System.String,System.Int32,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Int32)
  id: FromFile(System.String,System.Int32,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Int32)
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: FromFile(String, Int32, Boolean, Int32, Boolean, Int32, Int32)
  nameWithType: IndexMap.FromFile(String, Int32, Boolean, Int32, Boolean, Int32, Int32)
  fullName: EventStore.Core.Index.IndexMap.FromFile(System.String, System.Int32, System.Boolean, System.Int32, System.Boolean, System.Int32, System.Int32)
  type: Method
  source:
    id: FromFile
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 114
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public static IndexMap FromFile(string filename, int maxTablesPerLevel, bool loadPTables, int cacheDepth, bool skipIndexVerify, int threads, int maxAutoMergeLevel)
    parameters:
    - id: filename
      type: System.String
    - id: maxTablesPerLevel
      type: System.Int32
    - id: loadPTables
      type: System.Boolean
    - id: cacheDepth
      type: System.Int32
    - id: skipIndexVerify
      type: System.Boolean
    - id: threads
      type: System.Int32
    - id: maxAutoMergeLevel
      type: System.Int32
    return:
      type: EventStore.Core.Index.IndexMap
    content.vb: Public Shared Function FromFile(filename As String, maxTablesPerLevel As Integer, loadPTables As Boolean, cacheDepth As Integer, skipIndexVerify As Boolean, threads As Integer, maxAutoMergeLevel As Integer) As IndexMap
  overload: EventStore.Core.Index.IndexMap.FromFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.Index.IndexMap.SaveToFile(System.String)
  commentId: M:EventStore.Core.Index.IndexMap.SaveToFile(System.String)
  id: SaveToFile(System.String)
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: SaveToFile(String)
  nameWithType: IndexMap.SaveToFile(String)
  fullName: EventStore.Core.Index.IndexMap.SaveToFile(System.String)
  type: Method
  source:
    id: SaveToFile
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 307
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public void SaveToFile(string filename)
    parameters:
    - id: filename
      type: System.String
    content.vb: Public Sub SaveToFile(filename As String)
  overload: EventStore.Core.Index.IndexMap.SaveToFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.IndexMap.GetTableForManualMerge
  commentId: M:EventStore.Core.Index.IndexMap.GetTableForManualMerge
  id: GetTableForManualMerge
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: GetTableForManualMerge()
  nameWithType: IndexMap.GetTableForManualMerge()
  fullName: EventStore.Core.Index.IndexMap.GetTableForManualMerge()
  type: Method
  source:
    id: GetTableForManualMerge
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 369
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public Tuple<int, PTable> GetTableForManualMerge()
    return:
      type: System.Tuple{System.Int32,EventStore.Core.Index.PTable}
    content.vb: Public Function GetTableForManualMerge As Tuple(Of Integer, PTable)
  overload: EventStore.Core.Index.IndexMap.GetTableForManualMerge*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.IndexMap.AddPTable(EventStore.Core.Index.PTable,System.Int64,System.Int64,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Int32,System.Boolean)
  commentId: M:EventStore.Core.Index.IndexMap.AddPTable(EventStore.Core.Index.PTable,System.Int64,System.Int64,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Int32,System.Boolean)
  id: AddPTable(EventStore.Core.Index.PTable,System.Int64,System.Int64,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Int32,System.Boolean)
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: AddPTable(PTable, Int64, Int64, Func<String, UInt64, UInt64>, Func<IndexEntry, Boolean>, Func<IndexEntry, Tuple<String, Boolean>>, IIndexFilenameProvider, Byte, Int32, Int32, Boolean)
  nameWithType: IndexMap.AddPTable(PTable, Int64, Int64, Func<String, UInt64, UInt64>, Func<IndexEntry, Boolean>, Func<IndexEntry, Tuple<String, Boolean>>, IIndexFilenameProvider, Byte, Int32, Int32, Boolean)
  fullName: EventStore.Core.Index.IndexMap.AddPTable(EventStore.Core.Index.PTable, System.Int64, System.Int64, System.Func<System.String, System.UInt64, System.UInt64>, System.Func<EventStore.Core.Index.IndexEntry, System.Boolean>, System.Func<EventStore.Core.Index.IndexEntry, System.Tuple<System.String, System.Boolean>>, EventStore.Core.Index.IIndexFilenameProvider, System.Byte, System.Int32, System.Int32, System.Boolean)
  type: Method
  source:
    id: AddPTable
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 393
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public MergeResult AddPTable(PTable tableToAdd, long prepareCheckpoint, long commitCheckpoint, Func<string, ulong, ulong> upgradeHash, Func<IndexEntry, bool> existsAt, Func<IndexEntry, Tuple<string, bool>> recordExistsAt, IIndexFilenameProvider filenameProvider, byte version, int level, int indexCacheDepth = 16, bool skipIndexVerify = false)
    parameters:
    - id: tableToAdd
      type: EventStore.Core.Index.PTable
    - id: prepareCheckpoint
      type: System.Int64
    - id: commitCheckpoint
      type: System.Int64
    - id: upgradeHash
      type: System.Func{System.String,System.UInt64,System.UInt64}
    - id: existsAt
      type: System.Func{EventStore.Core.Index.IndexEntry,System.Boolean}
    - id: recordExistsAt
      type: System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}}
    - id: filenameProvider
      type: EventStore.Core.Index.IIndexFilenameProvider
    - id: version
      type: System.Byte
    - id: level
      type: System.Int32
    - id: indexCacheDepth
      type: System.Int32
    - id: skipIndexVerify
      type: System.Boolean
    return:
      type: EventStore.Core.Index.MergeResult
    content.vb: Public Function AddPTable(tableToAdd As PTable, prepareCheckpoint As Long, commitCheckpoint As Long, upgradeHash As Func(Of String, ULong, ULong), existsAt As Func(Of IndexEntry, Boolean), recordExistsAt As Func(Of IndexEntry, Tuple(Of String, Boolean)), filenameProvider As IIndexFilenameProvider, version As Byte, level As Integer, indexCacheDepth As Integer = 16, skipIndexVerify As Boolean = False) As MergeResult
  overload: EventStore.Core.Index.IndexMap.AddPTable*
  nameWithType.vb: IndexMap.AddPTable(PTable, Int64, Int64, Func(Of String, UInt64, UInt64), Func(Of IndexEntry, Boolean), Func(Of IndexEntry, Tuple(Of String, Boolean)), IIndexFilenameProvider, Byte, Int32, Int32, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.IndexMap.AddPTable(EventStore.Core.Index.PTable, System.Int64, System.Int64, System.Func(Of System.String, System.UInt64, System.UInt64), System.Func(Of EventStore.Core.Index.IndexEntry, System.Boolean), System.Func(Of EventStore.Core.Index.IndexEntry, System.Tuple(Of System.String, System.Boolean)), EventStore.Core.Index.IIndexFilenameProvider, System.Byte, System.Int32, System.Int32, System.Boolean)
  name.vb: AddPTable(PTable, Int64, Int64, Func(Of String, UInt64, UInt64), Func(Of IndexEntry, Boolean), Func(Of IndexEntry, Tuple(Of String, Boolean)), IIndexFilenameProvider, Byte, Int32, Int32, Boolean)
- uid: EventStore.Core.Index.IndexMap.AddPTableForAutomaticMerge(EventStore.Core.Index.PTable,System.Int64,System.Int64,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Boolean)
  commentId: M:EventStore.Core.Index.IndexMap.AddPTableForAutomaticMerge(EventStore.Core.Index.PTable,System.Int64,System.Int64,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Boolean)
  id: AddPTableForAutomaticMerge(EventStore.Core.Index.PTable,System.Int64,System.Int64,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Boolean)
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: AddPTableForAutomaticMerge(PTable, Int64, Int64, Func<String, UInt64, UInt64>, Func<IndexEntry, Boolean>, Func<IndexEntry, Tuple<String, Boolean>>, IIndexFilenameProvider, Byte, Int32, Boolean)
  nameWithType: IndexMap.AddPTableForAutomaticMerge(PTable, Int64, Int64, Func<String, UInt64, UInt64>, Func<IndexEntry, Boolean>, Func<IndexEntry, Tuple<String, Boolean>>, IIndexFilenameProvider, Byte, Int32, Boolean)
  fullName: EventStore.Core.Index.IndexMap.AddPTableForAutomaticMerge(EventStore.Core.Index.PTable, System.Int64, System.Int64, System.Func<System.String, System.UInt64, System.UInt64>, System.Func<EventStore.Core.Index.IndexEntry, System.Boolean>, System.Func<EventStore.Core.Index.IndexEntry, System.Tuple<System.String, System.Boolean>>, EventStore.Core.Index.IIndexFilenameProvider, System.Byte, System.Int32, System.Boolean)
  type: Method
  source:
    id: AddPTableForAutomaticMerge
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 431
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public MergeResult AddPTableForAutomaticMerge(PTable tableToAdd, long prepareCheckpoint, long commitCheckpoint, Func<string, ulong, ulong> upgradeHash, Func<IndexEntry, bool> existsAt, Func<IndexEntry, Tuple<string, bool>> recordExistsAt, IIndexFilenameProvider filenameProvider, byte version, int indexCacheDepth = 16, bool skipIndexVerify = false)
    parameters:
    - id: tableToAdd
      type: EventStore.Core.Index.PTable
    - id: prepareCheckpoint
      type: System.Int64
    - id: commitCheckpoint
      type: System.Int64
    - id: upgradeHash
      type: System.Func{System.String,System.UInt64,System.UInt64}
    - id: existsAt
      type: System.Func{EventStore.Core.Index.IndexEntry,System.Boolean}
    - id: recordExistsAt
      type: System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}}
    - id: filenameProvider
      type: EventStore.Core.Index.IIndexFilenameProvider
    - id: version
      type: System.Byte
    - id: indexCacheDepth
      type: System.Int32
    - id: skipIndexVerify
      type: System.Boolean
    return:
      type: EventStore.Core.Index.MergeResult
    content.vb: Public Function AddPTableForAutomaticMerge(tableToAdd As PTable, prepareCheckpoint As Long, commitCheckpoint As Long, upgradeHash As Func(Of String, ULong, ULong), existsAt As Func(Of IndexEntry, Boolean), recordExistsAt As Func(Of IndexEntry, Tuple(Of String, Boolean)), filenameProvider As IIndexFilenameProvider, version As Byte, indexCacheDepth As Integer = 16, skipIndexVerify As Boolean = False) As MergeResult
  overload: EventStore.Core.Index.IndexMap.AddPTableForAutomaticMerge*
  nameWithType.vb: IndexMap.AddPTableForAutomaticMerge(PTable, Int64, Int64, Func(Of String, UInt64, UInt64), Func(Of IndexEntry, Boolean), Func(Of IndexEntry, Tuple(Of String, Boolean)), IIndexFilenameProvider, Byte, Int32, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.IndexMap.AddPTableForAutomaticMerge(EventStore.Core.Index.PTable, System.Int64, System.Int64, System.Func(Of System.String, System.UInt64, System.UInt64), System.Func(Of EventStore.Core.Index.IndexEntry, System.Boolean), System.Func(Of EventStore.Core.Index.IndexEntry, System.Tuple(Of System.String, System.Boolean)), EventStore.Core.Index.IIndexFilenameProvider, System.Byte, System.Int32, System.Boolean)
  name.vb: AddPTableForAutomaticMerge(PTable, Int64, Int64, Func(Of String, UInt64, UInt64), Func(Of IndexEntry, Boolean), Func(Of IndexEntry, Tuple(Of String, Boolean)), IIndexFilenameProvider, Byte, Int32, Boolean)
- uid: EventStore.Core.Index.IndexMap.AddPTableForManualMerge(System.Int64,System.Int64,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Boolean)
  commentId: M:EventStore.Core.Index.IndexMap.AddPTableForManualMerge(System.Int64,System.Int64,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Boolean)
  id: AddPTableForManualMerge(System.Int64,System.Int64,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Boolean)
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: AddPTableForManualMerge(Int64, Int64, Func<String, UInt64, UInt64>, Func<IndexEntry, Boolean>, Func<IndexEntry, Tuple<String, Boolean>>, IIndexFilenameProvider, Byte, Int32, Boolean)
  nameWithType: IndexMap.AddPTableForManualMerge(Int64, Int64, Func<String, UInt64, UInt64>, Func<IndexEntry, Boolean>, Func<IndexEntry, Tuple<String, Boolean>>, IIndexFilenameProvider, Byte, Int32, Boolean)
  fullName: EventStore.Core.Index.IndexMap.AddPTableForManualMerge(System.Int64, System.Int64, System.Func<System.String, System.UInt64, System.UInt64>, System.Func<EventStore.Core.Index.IndexEntry, System.Boolean>, System.Func<EventStore.Core.Index.IndexEntry, System.Tuple<System.String, System.Boolean>>, EventStore.Core.Index.IIndexFilenameProvider, System.Byte, System.Int32, System.Boolean)
  type: Method
  source:
    id: AddPTableForManualMerge
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 466
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public MergeResult AddPTableForManualMerge(long prepareCheckpoint, long commitCheckpoint, Func<string, ulong, ulong> upgradeHash, Func<IndexEntry, bool> existsAt, Func<IndexEntry, Tuple<string, bool>> recordExistsAt, IIndexFilenameProvider filenameProvider, byte version, int indexCacheDepth = 16, bool skipIndexVerify = false)
    parameters:
    - id: prepareCheckpoint
      type: System.Int64
    - id: commitCheckpoint
      type: System.Int64
    - id: upgradeHash
      type: System.Func{System.String,System.UInt64,System.UInt64}
    - id: existsAt
      type: System.Func{EventStore.Core.Index.IndexEntry,System.Boolean}
    - id: recordExistsAt
      type: System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}}
    - id: filenameProvider
      type: EventStore.Core.Index.IIndexFilenameProvider
    - id: version
      type: System.Byte
    - id: indexCacheDepth
      type: System.Int32
    - id: skipIndexVerify
      type: System.Boolean
    return:
      type: EventStore.Core.Index.MergeResult
    content.vb: Public Function AddPTableForManualMerge(prepareCheckpoint As Long, commitCheckpoint As Long, upgradeHash As Func(Of String, ULong, ULong), existsAt As Func(Of IndexEntry, Boolean), recordExistsAt As Func(Of IndexEntry, Tuple(Of String, Boolean)), filenameProvider As IIndexFilenameProvider, version As Byte, indexCacheDepth As Integer = 16, skipIndexVerify As Boolean = False) As MergeResult
  overload: EventStore.Core.Index.IndexMap.AddPTableForManualMerge*
  nameWithType.vb: IndexMap.AddPTableForManualMerge(Int64, Int64, Func(Of String, UInt64, UInt64), Func(Of IndexEntry, Boolean), Func(Of IndexEntry, Tuple(Of String, Boolean)), IIndexFilenameProvider, Byte, Int32, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.IndexMap.AddPTableForManualMerge(System.Int64, System.Int64, System.Func(Of System.String, System.UInt64, System.UInt64), System.Func(Of EventStore.Core.Index.IndexEntry, System.Boolean), System.Func(Of EventStore.Core.Index.IndexEntry, System.Tuple(Of System.String, System.Boolean)), EventStore.Core.Index.IIndexFilenameProvider, System.Byte, System.Int32, System.Boolean)
  name.vb: AddPTableForManualMerge(Int64, Int64, Func(Of String, UInt64, UInt64), Func(Of IndexEntry, Boolean), Func(Of IndexEntry, Tuple(Of String, Boolean)), IIndexFilenameProvider, Byte, Int32, Boolean)
- uid: EventStore.Core.Index.IndexMap.Scavenge(System.Guid,System.Threading.CancellationToken,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Boolean)
  commentId: M:EventStore.Core.Index.IndexMap.Scavenge(System.Guid,System.Threading.CancellationToken,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Boolean)
  id: Scavenge(System.Guid,System.Threading.CancellationToken,System.Func{System.String,System.UInt64,System.UInt64},System.Func{EventStore.Core.Index.IndexEntry,System.Boolean},System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}},EventStore.Core.Index.IIndexFilenameProvider,System.Byte,System.Int32,System.Boolean)
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: Scavenge(Guid, CancellationToken, Func<String, UInt64, UInt64>, Func<IndexEntry, Boolean>, Func<IndexEntry, Tuple<String, Boolean>>, IIndexFilenameProvider, Byte, Int32, Boolean)
  nameWithType: IndexMap.Scavenge(Guid, CancellationToken, Func<String, UInt64, UInt64>, Func<IndexEntry, Boolean>, Func<IndexEntry, Tuple<String, Boolean>>, IIndexFilenameProvider, Byte, Int32, Boolean)
  fullName: EventStore.Core.Index.IndexMap.Scavenge(System.Guid, System.Threading.CancellationToken, System.Func<System.String, System.UInt64, System.UInt64>, System.Func<EventStore.Core.Index.IndexEntry, System.Boolean>, System.Func<EventStore.Core.Index.IndexEntry, System.Tuple<System.String, System.Boolean>>, EventStore.Core.Index.IIndexFilenameProvider, System.Byte, System.Int32, System.Boolean)
  type: Method
  source:
    id: Scavenge
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 506
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public ScavengeResult Scavenge(Guid toScavenge, CancellationToken ct, Func<string, ulong, ulong> upgradeHash, Func<IndexEntry, bool> existsAt, Func<IndexEntry, Tuple<string, bool>> recordExistsAt, IIndexFilenameProvider filenameProvider, byte version, int indexCacheDepth = 16, bool skipIndexVerify = false)
    parameters:
    - id: toScavenge
      type: System.Guid
    - id: ct
      type: System.Threading.CancellationToken
    - id: upgradeHash
      type: System.Func{System.String,System.UInt64,System.UInt64}
    - id: existsAt
      type: System.Func{EventStore.Core.Index.IndexEntry,System.Boolean}
    - id: recordExistsAt
      type: System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}}
    - id: filenameProvider
      type: EventStore.Core.Index.IIndexFilenameProvider
    - id: version
      type: System.Byte
    - id: indexCacheDepth
      type: System.Int32
    - id: skipIndexVerify
      type: System.Boolean
    return:
      type: EventStore.Core.Index.ScavengeResult
    content.vb: Public Function Scavenge(toScavenge As Guid, ct As CancellationToken, upgradeHash As Func(Of String, ULong, ULong), existsAt As Func(Of IndexEntry, Boolean), recordExistsAt As Func(Of IndexEntry, Tuple(Of String, Boolean)), filenameProvider As IIndexFilenameProvider, version As Byte, indexCacheDepth As Integer = 16, skipIndexVerify As Boolean = False) As ScavengeResult
  overload: EventStore.Core.Index.IndexMap.Scavenge*
  nameWithType.vb: IndexMap.Scavenge(Guid, CancellationToken, Func(Of String, UInt64, UInt64), Func(Of IndexEntry, Boolean), Func(Of IndexEntry, Tuple(Of String, Boolean)), IIndexFilenameProvider, Byte, Int32, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.IndexMap.Scavenge(System.Guid, System.Threading.CancellationToken, System.Func(Of System.String, System.UInt64, System.UInt64), System.Func(Of EventStore.Core.Index.IndexEntry, System.Boolean), System.Func(Of EventStore.Core.Index.IndexEntry, System.Tuple(Of System.String, System.Boolean)), EventStore.Core.Index.IIndexFilenameProvider, System.Byte, System.Int32, System.Boolean)
  name.vb: Scavenge(Guid, CancellationToken, Func(Of String, UInt64, UInt64), Func(Of IndexEntry, Boolean), Func(Of IndexEntry, Tuple(Of String, Boolean)), IIndexFilenameProvider, Byte, Int32, Boolean)
- uid: EventStore.Core.Index.IndexMap.Dispose(System.TimeSpan)
  commentId: M:EventStore.Core.Index.IndexMap.Dispose(System.TimeSpan)
  id: Dispose(System.TimeSpan)
  parent: EventStore.Core.Index.IndexMap
  langs:
  - csharp
  - vb
  name: Dispose(TimeSpan)
  nameWithType: IndexMap.Dispose(TimeSpan)
  fullName: EventStore.Core.Index.IndexMap.Dispose(System.TimeSpan)
  type: Method
  source:
    id: Dispose
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/IndexMap.cs
    startLine: 542
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public void Dispose(TimeSpan timeout)
    parameters:
    - id: timeout
      type: System.TimeSpan
    content.vb: Public Sub Dispose(timeout As TimeSpan)
  overload: EventStore.Core.Index.IndexMap.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Index
  commentId: N:EventStore.Core.Index
  name: EventStore.Core.Index
  nameWithType: EventStore.Core.Index
  fullName: EventStore.Core.Index
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IndexMap.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<IndexMap>()
  nameWithType: ProtobufExtensions.Serialize<IndexMap>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Index.IndexMap>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of IndexMap)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Index.IndexMap)()
  name.vb: Serialize(Of IndexMap)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<IndexMap>
    nameWithType: ProtobufExtensions.Serialize<IndexMap>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Index.IndexMap>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of IndexMap)
    nameWithType: ProtobufExtensions.Serialize(Of IndexMap)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Index.IndexMap)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IndexMap.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<IndexMap>()
  nameWithType: ProtobufExtensions.SerializeToArray<IndexMap>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Index.IndexMap>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of IndexMap)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Index.IndexMap)()
  name.vb: SerializeToArray(Of IndexMap)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<IndexMap>
    nameWithType: ProtobufExtensions.SerializeToArray<IndexMap>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Index.IndexMap>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of IndexMap)
    nameWithType: ProtobufExtensions.SerializeToArray(Of IndexMap)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Index.IndexMap)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Index.IndexMap.InOrder*
  commentId: Overload:EventStore.Core.Index.IndexMap.InOrder
  name: InOrder
  nameWithType: IndexMap.InOrder
  fullName: EventStore.Core.Index.IndexMap.InOrder
- uid: System.Collections.Generic.IEnumerable{EventStore.Core.Index.PTable}
  commentId: T:System.Collections.Generic.IEnumerable{EventStore.Core.Index.PTable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PTable>
  nameWithType: IEnumerable<PTable>
  fullName: System.Collections.Generic.IEnumerable<EventStore.Core.Index.PTable>
  nameWithType.vb: IEnumerable(Of PTable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of EventStore.Core.Index.PTable)
  name.vb: IEnumerable(Of PTable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.PTable
    name: PTable
    nameWithType: PTable
    fullName: EventStore.Core.Index.PTable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.PTable
    name: PTable
    nameWithType: PTable
    fullName: EventStore.Core.Index.PTable
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EventStore.Core.Index.IndexMap.InReverseOrder*
  commentId: Overload:EventStore.Core.Index.IndexMap.InReverseOrder
  name: InReverseOrder
  nameWithType: IndexMap.InReverseOrder
  fullName: EventStore.Core.Index.IndexMap.InReverseOrder
- uid: EventStore.Core.Index.IndexMap.GetAllFilenames*
  commentId: Overload:EventStore.Core.Index.IndexMap.GetAllFilenames
  name: GetAllFilenames
  nameWithType: IndexMap.GetAllFilenames
  fullName: EventStore.Core.Index.IndexMap.GetAllFilenames
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IndexMap.CreateEmpty*
  commentId: Overload:EventStore.Core.Index.IndexMap.CreateEmpty
  name: CreateEmpty
  nameWithType: IndexMap.CreateEmpty
  fullName: EventStore.Core.Index.IndexMap.CreateEmpty
- uid: EventStore.Core.Index.IndexMap
  commentId: T:EventStore.Core.Index.IndexMap
  parent: EventStore.Core.Index
  name: IndexMap
  nameWithType: IndexMap
  fullName: EventStore.Core.Index.IndexMap
- uid: EventStore.Core.Index.IndexMap.FromFile*
  commentId: Overload:EventStore.Core.Index.IndexMap.FromFile
  name: FromFile
  nameWithType: IndexMap.FromFile
  fullName: EventStore.Core.Index.IndexMap.FromFile
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Index.IndexMap.SaveToFile*
  commentId: Overload:EventStore.Core.Index.IndexMap.SaveToFile
  name: SaveToFile
  nameWithType: IndexMap.SaveToFile
  fullName: EventStore.Core.Index.IndexMap.SaveToFile
- uid: EventStore.Core.Index.IndexMap.GetTableForManualMerge*
  commentId: Overload:EventStore.Core.Index.IndexMap.GetTableForManualMerge
  name: GetTableForManualMerge
  nameWithType: IndexMap.GetTableForManualMerge
  fullName: EventStore.Core.Index.IndexMap.GetTableForManualMerge
- uid: System.Tuple{System.Int32,EventStore.Core.Index.PTable}
  commentId: T:System.Tuple{System.Int32,EventStore.Core.Index.PTable}
  parent: System
  definition: System.Tuple`2
  name: Tuple<Int32, PTable>
  nameWithType: Tuple<Int32, PTable>
  fullName: System.Tuple<System.Int32, EventStore.Core.Index.PTable>
  nameWithType.vb: Tuple(Of Int32, PTable)
  fullName.vb: System.Tuple(Of System.Int32, EventStore.Core.Index.PTable)
  name.vb: Tuple(Of Int32, PTable)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.PTable
    name: PTable
    nameWithType: PTable
    fullName: EventStore.Core.Index.PTable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.PTable
    name: PTable
    nameWithType: PTable
    fullName: EventStore.Core.Index.PTable
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`2
  commentId: T:System.Tuple`2
  isExternal: true
  name: Tuple<T1, T2>
  nameWithType: Tuple<T1, T2>
  fullName: System.Tuple<T1, T2>
  nameWithType.vb: Tuple(Of T1, T2)
  fullName.vb: System.Tuple(Of T1, T2)
  name.vb: Tuple(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IndexMap.AddPTable*
  commentId: Overload:EventStore.Core.Index.IndexMap.AddPTable
  name: AddPTable
  nameWithType: IndexMap.AddPTable
  fullName: EventStore.Core.Index.IndexMap.AddPTable
- uid: EventStore.Core.Index.PTable
  commentId: T:EventStore.Core.Index.PTable
  parent: EventStore.Core.Index
  name: PTable
  nameWithType: PTable
  fullName: EventStore.Core.Index.PTable
- uid: System.Func{System.String,System.UInt64,System.UInt64}
  commentId: T:System.Func{System.String,System.UInt64,System.UInt64}
  parent: System
  definition: System.Func`3
  name: Func<String, UInt64, UInt64>
  nameWithType: Func<String, UInt64, UInt64>
  fullName: System.Func<System.String, System.UInt64, System.UInt64>
  nameWithType.vb: Func(Of String, UInt64, UInt64)
  fullName.vb: System.Func(Of System.String, System.UInt64, System.UInt64)
  name.vb: Func(Of String, UInt64, UInt64)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{EventStore.Core.Index.IndexEntry,System.Boolean}
  commentId: T:System.Func{EventStore.Core.Index.IndexEntry,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<IndexEntry, Boolean>
  nameWithType: Func<IndexEntry, Boolean>
  fullName: System.Func<EventStore.Core.Index.IndexEntry, System.Boolean>
  nameWithType.vb: Func(Of IndexEntry, Boolean)
  fullName.vb: System.Func(Of EventStore.Core.Index.IndexEntry, System.Boolean)
  name.vb: Func(Of IndexEntry, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}}
  commentId: T:System.Func{EventStore.Core.Index.IndexEntry,System.Tuple{System.String,System.Boolean}}
  parent: System
  definition: System.Func`2
  name: Func<IndexEntry, Tuple<String, Boolean>>
  nameWithType: Func<IndexEntry, Tuple<String, Boolean>>
  fullName: System.Func<EventStore.Core.Index.IndexEntry, System.Tuple<System.String, System.Boolean>>
  nameWithType.vb: Func(Of IndexEntry, Tuple(Of String, Boolean))
  fullName.vb: System.Func(Of EventStore.Core.Index.IndexEntry, System.Tuple(Of System.String, System.Boolean))
  name.vb: Func(Of IndexEntry, Tuple(Of String, Boolean))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IIndexFilenameProvider
  commentId: T:EventStore.Core.Index.IIndexFilenameProvider
  parent: EventStore.Core.Index
  name: IIndexFilenameProvider
  nameWithType: IIndexFilenameProvider
  fullName: EventStore.Core.Index.IIndexFilenameProvider
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: EventStore.Core.Index.MergeResult
  commentId: T:EventStore.Core.Index.MergeResult
  parent: EventStore.Core.Index
  name: MergeResult
  nameWithType: MergeResult
  fullName: EventStore.Core.Index.MergeResult
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IndexMap.AddPTableForAutomaticMerge*
  commentId: Overload:EventStore.Core.Index.IndexMap.AddPTableForAutomaticMerge
  name: AddPTableForAutomaticMerge
  nameWithType: IndexMap.AddPTableForAutomaticMerge
  fullName: EventStore.Core.Index.IndexMap.AddPTableForAutomaticMerge
- uid: EventStore.Core.Index.IndexMap.AddPTableForManualMerge*
  commentId: Overload:EventStore.Core.Index.IndexMap.AddPTableForManualMerge
  name: AddPTableForManualMerge
  nameWithType: IndexMap.AddPTableForManualMerge
  fullName: EventStore.Core.Index.IndexMap.AddPTableForManualMerge
- uid: EventStore.Core.Index.IndexMap.Scavenge*
  commentId: Overload:EventStore.Core.Index.IndexMap.Scavenge
  name: Scavenge
  nameWithType: IndexMap.Scavenge
  fullName: EventStore.Core.Index.IndexMap.Scavenge
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: EventStore.Core.Index.ScavengeResult
  commentId: T:EventStore.Core.Index.ScavengeResult
  parent: EventStore.Core.Index
  name: ScavengeResult
  nameWithType: ScavengeResult
  fullName: EventStore.Core.Index.ScavengeResult
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: EventStore.Core.Index.IndexMap.Dispose*
  commentId: Overload:EventStore.Core.Index.IndexMap.Dispose
  name: Dispose
  nameWithType: IndexMap.Dispose
  fullName: EventStore.Core.Index.IndexMap.Dispose
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Index.TableIndex
  commentId: T:EventStore.Core.Index.TableIndex
  id: TableIndex
  parent: EventStore.Core.Index
  children:
  - EventStore.Core.Index.TableIndex.#ctor(System.String,EventStore.Core.Index.Hashes.IHasher,EventStore.Core.Index.Hashes.IHasher,System.Func{EventStore.Core.Index.IMemTable},System.Func{EventStore.Core.TransactionLog.TFReaderLease},System.Byte,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)
  - EventStore.Core.Index.TableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
  - EventStore.Core.Index.TableIndex.AddEntries(System.Int64,System.Collections.Generic.IList{EventStore.Core.Index.IndexKey})
  - EventStore.Core.Index.TableIndex.Close(System.Boolean)
  - EventStore.Core.Index.TableIndex.CommitCheckpoint
  - EventStore.Core.Index.TableIndex.ForceIndexVerifyFilename
  - EventStore.Core.Index.TableIndex.GetRange(System.String,System.Int64,System.Int64,System.Nullable{System.Int32})
  - EventStore.Core.Index.TableIndex.IndexMapFilename
  - EventStore.Core.Index.TableIndex.Initialize(System.Int64)
  - EventStore.Core.Index.TableIndex.IsBackgroundTaskRunning
  - EventStore.Core.Index.TableIndex.MergeIndexes
  - EventStore.Core.Index.TableIndex.PrepareCheckpoint
  - EventStore.Core.Index.TableIndex.Scavenge(EventStore.Core.Index.IIndexScavengerLog,System.Threading.CancellationToken)
  - EventStore.Core.Index.TableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  - EventStore.Core.Index.TableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  - EventStore.Core.Index.TableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
  - EventStore.Core.Index.TableIndex.TryManualMerge
  langs:
  - csharp
  - vb
  name: TableIndex
  nameWithType: TableIndex
  fullName: EventStore.Core.Index.TableIndex
  type: Class
  source:
    id: TableIndex
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 18
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: 'public class TableIndex : ITableIndex'
    content.vb: >-
      Public Class TableIndex
          Implements ITableIndex
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Index.ITableIndex
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Index.TableIndex.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Index.TableIndex.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Index.TableIndex.IndexMapFilename
  commentId: F:EventStore.Core.Index.TableIndex.IndexMapFilename
  id: IndexMapFilename
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: IndexMapFilename
  nameWithType: TableIndex.IndexMapFilename
  fullName: EventStore.Core.Index.TableIndex.IndexMapFilename
  type: Field
  source:
    id: IndexMapFilename
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 19
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public const string IndexMapFilename = "indexmap"
    return:
      type: System.String
    content.vb: Public Const IndexMapFilename As String = "indexmap"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Index.TableIndex.CommitCheckpoint
  commentId: P:EventStore.Core.Index.TableIndex.CommitCheckpoint
  id: CommitCheckpoint
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: CommitCheckpoint
  nameWithType: TableIndex.CommitCheckpoint
  fullName: EventStore.Core.Index.TableIndex.CommitCheckpoint
  type: Property
  source:
    id: CommitCheckpoint
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 25
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public long CommitCheckpoint { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property CommitCheckpoint As Long
  overload: EventStore.Core.Index.TableIndex.CommitCheckpoint*
  implements:
  - EventStore.Core.Index.ITableIndex.CommitCheckpoint
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Index.TableIndex.PrepareCheckpoint
  commentId: P:EventStore.Core.Index.TableIndex.PrepareCheckpoint
  id: PrepareCheckpoint
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: PrepareCheckpoint
  nameWithType: TableIndex.PrepareCheckpoint
  fullName: EventStore.Core.Index.TableIndex.PrepareCheckpoint
  type: Property
  source:
    id: PrepareCheckpoint
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 29
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public long PrepareCheckpoint { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property PrepareCheckpoint As Long
  overload: EventStore.Core.Index.TableIndex.PrepareCheckpoint*
  implements:
  - EventStore.Core.Index.ITableIndex.PrepareCheckpoint
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Index.TableIndex.ForceIndexVerifyFilename
  commentId: F:EventStore.Core.Index.TableIndex.ForceIndexVerifyFilename
  id: ForceIndexVerifyFilename
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: ForceIndexVerifyFilename
  nameWithType: TableIndex.ForceIndexVerifyFilename
  fullName: EventStore.Core.Index.TableIndex.ForceIndexVerifyFilename
  type: Field
  source:
    id: ForceIndexVerifyFilename
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 60
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public const string ForceIndexVerifyFilename = ".forceverify"
    return:
      type: System.String
    content.vb: Public Const ForceIndexVerifyFilename As String = ".forceverify"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Index.TableIndex.#ctor(System.String,EventStore.Core.Index.Hashes.IHasher,EventStore.Core.Index.Hashes.IHasher,System.Func{EventStore.Core.Index.IMemTable},System.Func{EventStore.Core.TransactionLog.TFReaderLease},System.Byte,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)
  commentId: M:EventStore.Core.Index.TableIndex.#ctor(System.String,EventStore.Core.Index.Hashes.IHasher,EventStore.Core.Index.Hashes.IHasher,System.Func{EventStore.Core.Index.IMemTable},System.Func{EventStore.Core.TransactionLog.TFReaderLease},System.Byte,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)
  id: '#ctor(System.String,EventStore.Core.Index.Hashes.IHasher,EventStore.Core.Index.Hashes.IHasher,System.Func{EventStore.Core.Index.IMemTable},System.Func{EventStore.Core.TransactionLog.TFReaderLease},System.Byte,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)'
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: TableIndex(String, IHasher, IHasher, Func<IMemTable>, Func<TFReaderLease>, Byte, Int32, Int32, Int32, Boolean, Boolean, Boolean, Int32, Int32)
  nameWithType: TableIndex.TableIndex(String, IHasher, IHasher, Func<IMemTable>, Func<TFReaderLease>, Byte, Int32, Int32, Int32, Boolean, Boolean, Boolean, Int32, Int32)
  fullName: EventStore.Core.Index.TableIndex.TableIndex(System.String, EventStore.Core.Index.Hashes.IHasher, EventStore.Core.Index.Hashes.IHasher, System.Func<EventStore.Core.Index.IMemTable>, System.Func<EventStore.Core.TransactionLog.TFReaderLease>, System.Byte, System.Int32, System.Int32, System.Int32, System.Boolean, System.Boolean, System.Boolean, System.Int32, System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 63
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public TableIndex(string directory, IHasher lowHasher, IHasher highHasher, Func<IMemTable> memTableFactory, Func<TFReaderLease> tfReaderFactory, byte ptableVersion, int maxAutoMergeIndexLevel, int maxSizeForMemory = 1000000, int maxTablesPerLevel = 4, bool additionalReclaim = false, bool inMem = false, bool skipIndexVerify = false, int indexCacheDepth = 16, int initializationThreads = 1)
    parameters:
    - id: directory
      type: System.String
    - id: lowHasher
      type: EventStore.Core.Index.Hashes.IHasher
    - id: highHasher
      type: EventStore.Core.Index.Hashes.IHasher
    - id: memTableFactory
      type: System.Func{EventStore.Core.Index.IMemTable}
    - id: tfReaderFactory
      type: System.Func{EventStore.Core.TransactionLog.TFReaderLease}
    - id: ptableVersion
      type: System.Byte
    - id: maxAutoMergeIndexLevel
      type: System.Int32
    - id: maxSizeForMemory
      type: System.Int32
    - id: maxTablesPerLevel
      type: System.Int32
    - id: additionalReclaim
      type: System.Boolean
    - id: inMem
      type: System.Boolean
    - id: skipIndexVerify
      type: System.Boolean
    - id: indexCacheDepth
      type: System.Int32
    - id: initializationThreads
      type: System.Int32
    content.vb: Public Sub New(directory As String, lowHasher As IHasher, highHasher As IHasher, memTableFactory As Func(Of IMemTable), tfReaderFactory As Func(Of TFReaderLease), ptableVersion As Byte, maxAutoMergeIndexLevel As Integer, maxSizeForMemory As Integer = 1000000, maxTablesPerLevel As Integer = 4, additionalReclaim As Boolean = False, inMem As Boolean = False, skipIndexVerify As Boolean = False, indexCacheDepth As Integer = 16, initializationThreads As Integer = 1)
  overload: EventStore.Core.Index.TableIndex.#ctor*
  nameWithType.vb: TableIndex.TableIndex(String, IHasher, IHasher, Func(Of IMemTable), Func(Of TFReaderLease), Byte, Int32, Int32, Int32, Boolean, Boolean, Boolean, Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.TableIndex.TableIndex(System.String, EventStore.Core.Index.Hashes.IHasher, EventStore.Core.Index.Hashes.IHasher, System.Func(Of EventStore.Core.Index.IMemTable), System.Func(Of EventStore.Core.TransactionLog.TFReaderLease), System.Byte, System.Int32, System.Int32, System.Int32, System.Boolean, System.Boolean, System.Boolean, System.Int32, System.Int32)
  name.vb: TableIndex(String, IHasher, IHasher, Func(Of IMemTable), Func(Of TFReaderLease), Byte, Int32, Int32, Int32, Boolean, Boolean, Boolean, Int32, Int32)
- uid: EventStore.Core.Index.TableIndex.Initialize(System.Int64)
  commentId: M:EventStore.Core.Index.TableIndex.Initialize(System.Int64)
  id: Initialize(System.Int64)
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: Initialize(Int64)
  nameWithType: TableIndex.Initialize(Int64)
  fullName: EventStore.Core.Index.TableIndex.Initialize(System.Int64)
  type: Method
  source:
    id: Initialize
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 110
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public void Initialize(long chaserCheckpoint)
    parameters:
    - id: chaserCheckpoint
      type: System.Int64
    content.vb: Public Sub Initialize(chaserCheckpoint As Long)
  overload: EventStore.Core.Index.TableIndex.Initialize*
  implements:
  - EventStore.Core.Index.ITableIndex.Initialize(System.Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.TableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
  commentId: M:EventStore.Core.Index.TableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
  id: Add(System.Int64,System.String,System.Int64,System.Int64)
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: Add(Int64, String, Int64, Int64)
  nameWithType: TableIndex.Add(Int64, String, Int64, Int64)
  fullName: EventStore.Core.Index.TableIndex.Add(System.Int64, System.String, System.Int64, System.Int64)
  type: Method
  source:
    id: Add
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 199
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public void Add(long commitPos, string streamId, long version, long position)
    parameters:
    - id: commitPos
      type: System.Int64
    - id: streamId
      type: System.String
    - id: version
      type: System.Int64
    - id: position
      type: System.Int64
    content.vb: Public Sub Add(commitPos As Long, streamId As String, version As Long, position As Long)
  overload: EventStore.Core.Index.TableIndex.Add*
  implements:
  - EventStore.Core.Index.ITableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.TableIndex.AddEntries(System.Int64,System.Collections.Generic.IList{EventStore.Core.Index.IndexKey})
  commentId: M:EventStore.Core.Index.TableIndex.AddEntries(System.Int64,System.Collections.Generic.IList{EventStore.Core.Index.IndexKey})
  id: AddEntries(System.Int64,System.Collections.Generic.IList{EventStore.Core.Index.IndexKey})
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: AddEntries(Int64, IList<IndexKey>)
  nameWithType: TableIndex.AddEntries(Int64, IList<IndexKey>)
  fullName: EventStore.Core.Index.TableIndex.AddEntries(System.Int64, System.Collections.Generic.IList<EventStore.Core.Index.IndexKey>)
  type: Method
  source:
    id: AddEntries
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 207
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public void AddEntries(long commitPos, IList<IndexKey> entries)
    parameters:
    - id: commitPos
      type: System.Int64
    - id: entries
      type: System.Collections.Generic.IList{EventStore.Core.Index.IndexKey}
    content.vb: Public Sub AddEntries(commitPos As Long, entries As IList(Of IndexKey))
  overload: EventStore.Core.Index.TableIndex.AddEntries*
  implements:
  - EventStore.Core.Index.ITableIndex.AddEntries(System.Int64,System.Collections.Generic.IList{EventStore.Core.Index.IndexKey})
  nameWithType.vb: TableIndex.AddEntries(Int64, IList(Of IndexKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.TableIndex.AddEntries(System.Int64, System.Collections.Generic.IList(Of EventStore.Core.Index.IndexKey))
  name.vb: AddEntries(Int64, IList(Of IndexKey))
- uid: EventStore.Core.Index.TableIndex.MergeIndexes
  commentId: M:EventStore.Core.Index.TableIndex.MergeIndexes
  id: MergeIndexes
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: MergeIndexes()
  nameWithType: TableIndex.MergeIndexes()
  fullName: EventStore.Core.Index.TableIndex.MergeIndexes()
  type: Method
  source:
    id: MergeIndexes
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 224
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public Task MergeIndexes()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function MergeIndexes As Task
  overload: EventStore.Core.Index.TableIndex.MergeIndexes*
  implements:
  - EventStore.Core.Index.ITableIndex.MergeIndexes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.TableIndex.IsBackgroundTaskRunning
  commentId: P:EventStore.Core.Index.TableIndex.IsBackgroundTaskRunning
  id: IsBackgroundTaskRunning
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: IsBackgroundTaskRunning
  nameWithType: TableIndex.IsBackgroundTaskRunning
  fullName: EventStore.Core.Index.TableIndex.IsBackgroundTaskRunning
  type: Property
  source:
    id: IsBackgroundTaskRunning
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 229
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public bool IsBackgroundTaskRunning { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsBackgroundTaskRunning As Boolean
  overload: EventStore.Core.Index.TableIndex.IsBackgroundTaskRunning*
  implements:
  - EventStore.Core.Index.ITableIndex.IsBackgroundTaskRunning
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Index.TableIndex.TryManualMerge
  commentId: M:EventStore.Core.Index.TableIndex.TryManualMerge
  id: TryManualMerge
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: TryManualMerge()
  nameWithType: TableIndex.TryManualMerge()
  fullName: EventStore.Core.Index.TableIndex.TryManualMerge()
  type: Method
  source:
    id: TryManualMerge
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 251
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public void TryManualMerge()
    content.vb: Public Sub TryManualMerge
  overload: EventStore.Core.Index.TableIndex.TryManualMerge*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.TableIndex.Scavenge(EventStore.Core.Index.IIndexScavengerLog,System.Threading.CancellationToken)
  commentId: M:EventStore.Core.Index.TableIndex.Scavenge(EventStore.Core.Index.IIndexScavengerLog,System.Threading.CancellationToken)
  id: Scavenge(EventStore.Core.Index.IIndexScavengerLog,System.Threading.CancellationToken)
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: Scavenge(IIndexScavengerLog, CancellationToken)
  nameWithType: TableIndex.Scavenge(IIndexScavengerLog, CancellationToken)
  fullName: EventStore.Core.Index.TableIndex.Scavenge(EventStore.Core.Index.IIndexScavengerLog, System.Threading.CancellationToken)
  type: Method
  source:
    id: Scavenge
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 358
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public void Scavenge(IIndexScavengerLog log, CancellationToken ct)
    parameters:
    - id: log
      type: EventStore.Core.Index.IIndexScavengerLog
    - id: ct
      type: System.Threading.CancellationToken
    content.vb: Public Sub Scavenge(log As IIndexScavengerLog, ct As CancellationToken)
  overload: EventStore.Core.Index.TableIndex.Scavenge*
  implements:
  - EventStore.Core.Index.ITableIndex.Scavenge(EventStore.Core.Index.IIndexScavengerLog,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Index.TableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
  commentId: M:EventStore.Core.Index.TableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
  id: TryGetOneValue(System.String,System.Int64,System.Int64@)
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: TryGetOneValue(String, Int64, out Int64)
  nameWithType: TableIndex.TryGetOneValue(String, Int64, out Int64)
  fullName: EventStore.Core.Index.TableIndex.TryGetOneValue(System.String, System.Int64, out System.Int64)
  type: Method
  source:
    id: TryGetOneValue
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 479
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public bool TryGetOneValue(string streamId, long version, out long position)
    parameters:
    - id: streamId
      type: System.String
    - id: version
      type: System.Int64
    - id: position
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: Public Function TryGetOneValue(streamId As String, version As Long, ByRef position As Long) As Boolean
  overload: EventStore.Core.Index.TableIndex.TryGetOneValue*
  implements:
  - EventStore.Core.Index.ITableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
  nameWithType.vb: TableIndex.TryGetOneValue(String, Int64, ByRef Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.TableIndex.TryGetOneValue(System.String, System.Int64, ByRef System.Int64)
  name.vb: TryGetOneValue(String, Int64, ByRef Int64)
- uid: EventStore.Core.Index.TableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.TableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  id: TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: TryGetLatestEntry(String, out IndexEntry)
  nameWithType: TableIndex.TryGetLatestEntry(String, out IndexEntry)
  fullName: EventStore.Core.Index.TableIndex.TryGetLatestEntry(System.String, out EventStore.Core.Index.IndexEntry)
  type: Method
  source:
    id: TryGetLatestEntry
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 517
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public bool TryGetLatestEntry(string streamId, out IndexEntry entry)
    parameters:
    - id: streamId
      type: System.String
    - id: entry
      type: EventStore.Core.Index.IndexEntry
    return:
      type: System.Boolean
    content.vb: Public Function TryGetLatestEntry(streamId As String, ByRef entry As IndexEntry) As Boolean
  overload: EventStore.Core.Index.TableIndex.TryGetLatestEntry*
  implements:
  - EventStore.Core.Index.ITableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  nameWithType.vb: TableIndex.TryGetLatestEntry(String, ByRef IndexEntry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.TableIndex.TryGetLatestEntry(System.String, ByRef EventStore.Core.Index.IndexEntry)
  name.vb: TryGetLatestEntry(String, ByRef IndexEntry)
- uid: EventStore.Core.Index.TableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.TableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  id: TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: TryGetOldestEntry(String, out IndexEntry)
  nameWithType: TableIndex.TryGetOldestEntry(String, out IndexEntry)
  fullName: EventStore.Core.Index.TableIndex.TryGetOldestEntry(System.String, out EventStore.Core.Index.IndexEntry)
  type: Method
  source:
    id: TryGetOldestEntry
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 552
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public bool TryGetOldestEntry(string streamId, out IndexEntry entry)
    parameters:
    - id: streamId
      type: System.String
    - id: entry
      type: EventStore.Core.Index.IndexEntry
    return:
      type: System.Boolean
    content.vb: Public Function TryGetOldestEntry(streamId As String, ByRef entry As IndexEntry) As Boolean
  overload: EventStore.Core.Index.TableIndex.TryGetOldestEntry*
  implements:
  - EventStore.Core.Index.ITableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  nameWithType.vb: TableIndex.TryGetOldestEntry(String, ByRef IndexEntry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.TableIndex.TryGetOldestEntry(System.String, ByRef EventStore.Core.Index.IndexEntry)
  name.vb: TryGetOldestEntry(String, ByRef IndexEntry)
- uid: EventStore.Core.Index.TableIndex.GetRange(System.String,System.Int64,System.Int64,System.Nullable{System.Int32})
  commentId: M:EventStore.Core.Index.TableIndex.GetRange(System.String,System.Int64,System.Int64,System.Nullable{System.Int32})
  id: GetRange(System.String,System.Int64,System.Int64,System.Nullable{System.Int32})
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: GetRange(String, Int64, Int64, Nullable<Int32>)
  nameWithType: TableIndex.GetRange(String, Int64, Int64, Nullable<Int32>)
  fullName: EventStore.Core.Index.TableIndex.GetRange(System.String, System.Int64, System.Int64, System.Nullable<System.Int32>)
  type: Method
  source:
    id: GetRange
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 587
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public IEnumerable<IndexEntry> GetRange(string streamId, long startVersion, long endVersion, int? limit = default(int? ))
    parameters:
    - id: streamId
      type: System.String
    - id: startVersion
      type: System.Int64
    - id: endVersion
      type: System.Int64
    - id: limit
      type: System.Nullable{System.Int32}
    return:
      type: System.Collections.Generic.IEnumerable{EventStore.Core.Index.IndexEntry}
    content.vb: Public Function GetRange(streamId As String, startVersion As Long, endVersion As Long, limit As Integer? = Nothing) As IEnumerable(Of IndexEntry)
  overload: EventStore.Core.Index.TableIndex.GetRange*
  implements:
  - EventStore.Core.Index.ITableIndex.GetRange(System.String,System.Int64,System.Int64,System.Nullable{System.Int32})
  nameWithType.vb: TableIndex.GetRange(String, Int64, Int64, Nullable(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Index.TableIndex.GetRange(System.String, System.Int64, System.Int64, System.Nullable(Of System.Int32))
  name.vb: GetRange(String, Int64, Int64, Nullable(Of Int32))
- uid: EventStore.Core.Index.TableIndex.Close(System.Boolean)
  commentId: M:EventStore.Core.Index.TableIndex.Close(System.Boolean)
  id: Close(System.Boolean)
  parent: EventStore.Core.Index.TableIndex
  langs:
  - csharp
  - vb
  name: Close(Boolean)
  nameWithType: TableIndex.Close(Boolean)
  fullName: EventStore.Core.Index.TableIndex.Close(System.Boolean)
  type: Method
  source:
    id: Close
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Index/TableIndex.cs
    startLine: 666
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Index
  syntax:
    content: public void Close(bool removeFiles = true)
    parameters:
    - id: removeFiles
      type: System.Boolean
    content.vb: Public Sub Close(removeFiles As Boolean = True)
  overload: EventStore.Core.Index.TableIndex.Close*
  implements:
  - EventStore.Core.Index.ITableIndex.Close(System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Index
  commentId: N:EventStore.Core.Index
  name: EventStore.Core.Index
  nameWithType: EventStore.Core.Index
  fullName: EventStore.Core.Index
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Index.ITableIndex
  commentId: T:EventStore.Core.Index.ITableIndex
  parent: EventStore.Core.Index
  name: ITableIndex
  nameWithType: ITableIndex
  fullName: EventStore.Core.Index.ITableIndex
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.TableIndex.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TableIndex>()
  nameWithType: ProtobufExtensions.Serialize<TableIndex>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Index.TableIndex>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TableIndex)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Index.TableIndex)()
  name.vb: Serialize(Of TableIndex)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TableIndex>
    nameWithType: ProtobufExtensions.Serialize<TableIndex>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Index.TableIndex>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TableIndex)
    nameWithType: ProtobufExtensions.Serialize(Of TableIndex)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Index.TableIndex)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.TableIndex.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TableIndex>()
  nameWithType: ProtobufExtensions.SerializeToArray<TableIndex>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Index.TableIndex>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TableIndex)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Index.TableIndex)()
  name.vb: SerializeToArray(Of TableIndex)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TableIndex>
    nameWithType: ProtobufExtensions.SerializeToArray<TableIndex>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Index.TableIndex>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TableIndex)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TableIndex)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Index.TableIndex)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Index.TableIndex.CommitCheckpoint*
  commentId: Overload:EventStore.Core.Index.TableIndex.CommitCheckpoint
  name: CommitCheckpoint
  nameWithType: TableIndex.CommitCheckpoint
  fullName: EventStore.Core.Index.TableIndex.CommitCheckpoint
- uid: EventStore.Core.Index.ITableIndex.CommitCheckpoint
  commentId: P:EventStore.Core.Index.ITableIndex.CommitCheckpoint
  parent: EventStore.Core.Index.ITableIndex
  name: CommitCheckpoint
  nameWithType: ITableIndex.CommitCheckpoint
  fullName: EventStore.Core.Index.ITableIndex.CommitCheckpoint
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Index.TableIndex.PrepareCheckpoint*
  commentId: Overload:EventStore.Core.Index.TableIndex.PrepareCheckpoint
  name: PrepareCheckpoint
  nameWithType: TableIndex.PrepareCheckpoint
  fullName: EventStore.Core.Index.TableIndex.PrepareCheckpoint
- uid: EventStore.Core.Index.ITableIndex.PrepareCheckpoint
  commentId: P:EventStore.Core.Index.ITableIndex.PrepareCheckpoint
  parent: EventStore.Core.Index.ITableIndex
  name: PrepareCheckpoint
  nameWithType: ITableIndex.PrepareCheckpoint
  fullName: EventStore.Core.Index.ITableIndex.PrepareCheckpoint
- uid: EventStore.Core.Index.TableIndex.#ctor*
  commentId: Overload:EventStore.Core.Index.TableIndex.#ctor
  name: TableIndex
  nameWithType: TableIndex.TableIndex
  fullName: EventStore.Core.Index.TableIndex.TableIndex
- uid: EventStore.Core.Index.Hashes.IHasher
  commentId: T:EventStore.Core.Index.Hashes.IHasher
  parent: EventStore.Core.Index.Hashes
  name: IHasher
  nameWithType: IHasher
  fullName: EventStore.Core.Index.Hashes.IHasher
- uid: System.Func{EventStore.Core.Index.IMemTable}
  commentId: T:System.Func{EventStore.Core.Index.IMemTable}
  parent: System
  definition: System.Func`1
  name: Func<IMemTable>
  nameWithType: Func<IMemTable>
  fullName: System.Func<EventStore.Core.Index.IMemTable>
  nameWithType.vb: Func(Of IMemTable)
  fullName.vb: System.Func(Of EventStore.Core.Index.IMemTable)
  name.vb: Func(Of IMemTable)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IMemTable
    name: IMemTable
    nameWithType: IMemTable
    fullName: EventStore.Core.Index.IMemTable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IMemTable
    name: IMemTable
    nameWithType: IMemTable
    fullName: EventStore.Core.Index.IMemTable
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{EventStore.Core.TransactionLog.TFReaderLease}
  commentId: T:System.Func{EventStore.Core.TransactionLog.TFReaderLease}
  parent: System
  definition: System.Func`1
  name: Func<TFReaderLease>
  nameWithType: Func<TFReaderLease>
  fullName: System.Func<EventStore.Core.TransactionLog.TFReaderLease>
  nameWithType.vb: Func(Of TFReaderLease)
  fullName.vb: System.Func(Of EventStore.Core.TransactionLog.TFReaderLease)
  name.vb: Func(Of TFReaderLease)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.TransactionLog.TFReaderLease
    name: TFReaderLease
    nameWithType: TFReaderLease
    fullName: EventStore.Core.TransactionLog.TFReaderLease
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.TransactionLog.TFReaderLease
    name: TFReaderLease
    nameWithType: TFReaderLease
    fullName: EventStore.Core.TransactionLog.TFReaderLease
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Index.Hashes
  commentId: N:EventStore.Core.Index.Hashes
  name: EventStore.Core.Index.Hashes
  nameWithType: EventStore.Core.Index.Hashes
  fullName: EventStore.Core.Index.Hashes
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.TableIndex.Initialize*
  commentId: Overload:EventStore.Core.Index.TableIndex.Initialize
  name: Initialize
  nameWithType: TableIndex.Initialize
  fullName: EventStore.Core.Index.TableIndex.Initialize
- uid: EventStore.Core.Index.ITableIndex.Initialize(System.Int64)
  commentId: M:EventStore.Core.Index.ITableIndex.Initialize(System.Int64)
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: Initialize(Int64)
  nameWithType: ITableIndex.Initialize(Int64)
  fullName: EventStore.Core.Index.ITableIndex.Initialize(System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.Initialize(System.Int64)
    name: Initialize
    nameWithType: ITableIndex.Initialize
    fullName: EventStore.Core.Index.ITableIndex.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.Initialize(System.Int64)
    name: Initialize
    nameWithType: ITableIndex.Initialize
    fullName: EventStore.Core.Index.ITableIndex.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.TableIndex.Add*
  commentId: Overload:EventStore.Core.Index.TableIndex.Add
  name: Add
  nameWithType: TableIndex.Add
  fullName: EventStore.Core.Index.TableIndex.Add
- uid: EventStore.Core.Index.ITableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
  commentId: M:EventStore.Core.Index.ITableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: Add(Int64, String, Int64, Int64)
  nameWithType: ITableIndex.Add(Int64, String, Int64, Int64)
  fullName: EventStore.Core.Index.ITableIndex.Add(System.Int64, System.String, System.Int64, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
    name: Add
    nameWithType: ITableIndex.Add
    fullName: EventStore.Core.Index.ITableIndex.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.Add(System.Int64,System.String,System.Int64,System.Int64)
    name: Add
    nameWithType: ITableIndex.Add
    fullName: EventStore.Core.Index.ITableIndex.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.TableIndex.AddEntries*
  commentId: Overload:EventStore.Core.Index.TableIndex.AddEntries
  name: AddEntries
  nameWithType: TableIndex.AddEntries
  fullName: EventStore.Core.Index.TableIndex.AddEntries
- uid: EventStore.Core.Index.ITableIndex.AddEntries(System.Int64,System.Collections.Generic.IList{EventStore.Core.Index.IndexKey})
  commentId: M:EventStore.Core.Index.ITableIndex.AddEntries(System.Int64,System.Collections.Generic.IList{EventStore.Core.Index.IndexKey})
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: AddEntries(Int64, IList<IndexKey>)
  nameWithType: ITableIndex.AddEntries(Int64, IList<IndexKey>)
  fullName: EventStore.Core.Index.ITableIndex.AddEntries(System.Int64, System.Collections.Generic.IList<EventStore.Core.Index.IndexKey>)
  nameWithType.vb: ITableIndex.AddEntries(Int64, IList(Of IndexKey))
  fullName.vb: EventStore.Core.Index.ITableIndex.AddEntries(System.Int64, System.Collections.Generic.IList(Of EventStore.Core.Index.IndexKey))
  name.vb: AddEntries(Int64, IList(Of IndexKey))
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.AddEntries(System.Int64,System.Collections.Generic.IList{EventStore.Core.Index.IndexKey})
    name: AddEntries
    nameWithType: ITableIndex.AddEntries
    fullName: EventStore.Core.Index.ITableIndex.AddEntries
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexKey
    name: IndexKey
    nameWithType: IndexKey
    fullName: EventStore.Core.Index.IndexKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.AddEntries(System.Int64,System.Collections.Generic.IList{EventStore.Core.Index.IndexKey})
    name: AddEntries
    nameWithType: ITableIndex.AddEntries
    fullName: EventStore.Core.Index.ITableIndex.AddEntries
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexKey
    name: IndexKey
    nameWithType: IndexKey
    fullName: EventStore.Core.Index.IndexKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{EventStore.Core.Index.IndexKey}
  commentId: T:System.Collections.Generic.IList{EventStore.Core.Index.IndexKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IndexKey>
  nameWithType: IList<IndexKey>
  fullName: System.Collections.Generic.IList<EventStore.Core.Index.IndexKey>
  nameWithType.vb: IList(Of IndexKey)
  fullName.vb: System.Collections.Generic.IList(Of EventStore.Core.Index.IndexKey)
  name.vb: IList(Of IndexKey)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexKey
    name: IndexKey
    nameWithType: IndexKey
    fullName: EventStore.Core.Index.IndexKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexKey
    name: IndexKey
    nameWithType: IndexKey
    fullName: EventStore.Core.Index.IndexKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EventStore.Core.Index.TableIndex.MergeIndexes*
  commentId: Overload:EventStore.Core.Index.TableIndex.MergeIndexes
  name: MergeIndexes
  nameWithType: TableIndex.MergeIndexes
  fullName: EventStore.Core.Index.TableIndex.MergeIndexes
- uid: EventStore.Core.Index.ITableIndex.MergeIndexes
  commentId: M:EventStore.Core.Index.ITableIndex.MergeIndexes
  parent: EventStore.Core.Index.ITableIndex
  name: MergeIndexes()
  nameWithType: ITableIndex.MergeIndexes()
  fullName: EventStore.Core.Index.ITableIndex.MergeIndexes()
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.MergeIndexes
    name: MergeIndexes
    nameWithType: ITableIndex.MergeIndexes
    fullName: EventStore.Core.Index.ITableIndex.MergeIndexes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.MergeIndexes
    name: MergeIndexes
    nameWithType: ITableIndex.MergeIndexes
    fullName: EventStore.Core.Index.ITableIndex.MergeIndexes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: EventStore.Core.Index.TableIndex.IsBackgroundTaskRunning*
  commentId: Overload:EventStore.Core.Index.TableIndex.IsBackgroundTaskRunning
  name: IsBackgroundTaskRunning
  nameWithType: TableIndex.IsBackgroundTaskRunning
  fullName: EventStore.Core.Index.TableIndex.IsBackgroundTaskRunning
- uid: EventStore.Core.Index.ITableIndex.IsBackgroundTaskRunning
  commentId: P:EventStore.Core.Index.ITableIndex.IsBackgroundTaskRunning
  parent: EventStore.Core.Index.ITableIndex
  name: IsBackgroundTaskRunning
  nameWithType: ITableIndex.IsBackgroundTaskRunning
  fullName: EventStore.Core.Index.ITableIndex.IsBackgroundTaskRunning
- uid: EventStore.Core.Index.TableIndex.TryManualMerge*
  commentId: Overload:EventStore.Core.Index.TableIndex.TryManualMerge
  name: TryManualMerge
  nameWithType: TableIndex.TryManualMerge
  fullName: EventStore.Core.Index.TableIndex.TryManualMerge
- uid: EventStore.Core.Index.TableIndex.Scavenge*
  commentId: Overload:EventStore.Core.Index.TableIndex.Scavenge
  name: Scavenge
  nameWithType: TableIndex.Scavenge
  fullName: EventStore.Core.Index.TableIndex.Scavenge
- uid: EventStore.Core.Index.ITableIndex.Scavenge(EventStore.Core.Index.IIndexScavengerLog,System.Threading.CancellationToken)
  commentId: M:EventStore.Core.Index.ITableIndex.Scavenge(EventStore.Core.Index.IIndexScavengerLog,System.Threading.CancellationToken)
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: Scavenge(IIndexScavengerLog, CancellationToken)
  nameWithType: ITableIndex.Scavenge(IIndexScavengerLog, CancellationToken)
  fullName: EventStore.Core.Index.ITableIndex.Scavenge(EventStore.Core.Index.IIndexScavengerLog, System.Threading.CancellationToken)
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.Scavenge(EventStore.Core.Index.IIndexScavengerLog,System.Threading.CancellationToken)
    name: Scavenge
    nameWithType: ITableIndex.Scavenge
    fullName: EventStore.Core.Index.ITableIndex.Scavenge
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Index.IIndexScavengerLog
    name: IIndexScavengerLog
    nameWithType: IIndexScavengerLog
    fullName: EventStore.Core.Index.IIndexScavengerLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.Scavenge(EventStore.Core.Index.IIndexScavengerLog,System.Threading.CancellationToken)
    name: Scavenge
    nameWithType: ITableIndex.Scavenge
    fullName: EventStore.Core.Index.ITableIndex.Scavenge
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Index.IIndexScavengerLog
    name: IIndexScavengerLog
    nameWithType: IIndexScavengerLog
    fullName: EventStore.Core.Index.IIndexScavengerLog
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IIndexScavengerLog
  commentId: T:EventStore.Core.Index.IIndexScavengerLog
  parent: EventStore.Core.Index
  name: IIndexScavengerLog
  nameWithType: IIndexScavengerLog
  fullName: EventStore.Core.Index.IIndexScavengerLog
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: EventStore.Core.Index.TableIndex.TryGetOneValue*
  commentId: Overload:EventStore.Core.Index.TableIndex.TryGetOneValue
  name: TryGetOneValue
  nameWithType: TableIndex.TryGetOneValue
  fullName: EventStore.Core.Index.TableIndex.TryGetOneValue
- uid: EventStore.Core.Index.ITableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
  commentId: M:EventStore.Core.Index.ITableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: TryGetOneValue(String, Int64, Int64)
  nameWithType: ITableIndex.TryGetOneValue(String, Int64, Int64)
  fullName: EventStore.Core.Index.ITableIndex.TryGetOneValue(System.String, System.Int64, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
    name: TryGetOneValue
    nameWithType: ITableIndex.TryGetOneValue
    fullName: EventStore.Core.Index.ITableIndex.TryGetOneValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.TryGetOneValue(System.String,System.Int64,System.Int64@)
    name: TryGetOneValue
    nameWithType: ITableIndex.TryGetOneValue
    fullName: EventStore.Core.Index.ITableIndex.TryGetOneValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.TableIndex.TryGetLatestEntry*
  commentId: Overload:EventStore.Core.Index.TableIndex.TryGetLatestEntry
  name: TryGetLatestEntry
  nameWithType: TableIndex.TryGetLatestEntry
  fullName: EventStore.Core.Index.TableIndex.TryGetLatestEntry
- uid: EventStore.Core.Index.ITableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.ITableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: TryGetLatestEntry(String, IndexEntry)
  nameWithType: ITableIndex.TryGetLatestEntry(String, IndexEntry)
  fullName: EventStore.Core.Index.ITableIndex.TryGetLatestEntry(System.String, EventStore.Core.Index.IndexEntry)
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
    name: TryGetLatestEntry
    nameWithType: ITableIndex.TryGetLatestEntry
    fullName: EventStore.Core.Index.ITableIndex.TryGetLatestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.TryGetLatestEntry(System.String,EventStore.Core.Index.IndexEntry@)
    name: TryGetLatestEntry
    nameWithType: ITableIndex.TryGetLatestEntry
    fullName: EventStore.Core.Index.ITableIndex.TryGetLatestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.IndexEntry
  commentId: T:EventStore.Core.Index.IndexEntry
  parent: EventStore.Core.Index
  name: IndexEntry
  nameWithType: IndexEntry
  fullName: EventStore.Core.Index.IndexEntry
- uid: EventStore.Core.Index.TableIndex.TryGetOldestEntry*
  commentId: Overload:EventStore.Core.Index.TableIndex.TryGetOldestEntry
  name: TryGetOldestEntry
  nameWithType: TableIndex.TryGetOldestEntry
  fullName: EventStore.Core.Index.TableIndex.TryGetOldestEntry
- uid: EventStore.Core.Index.ITableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  commentId: M:EventStore.Core.Index.ITableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: TryGetOldestEntry(String, IndexEntry)
  nameWithType: ITableIndex.TryGetOldestEntry(String, IndexEntry)
  fullName: EventStore.Core.Index.ITableIndex.TryGetOldestEntry(System.String, EventStore.Core.Index.IndexEntry)
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
    name: TryGetOldestEntry
    nameWithType: ITableIndex.TryGetOldestEntry
    fullName: EventStore.Core.Index.ITableIndex.TryGetOldestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.TryGetOldestEntry(System.String,EventStore.Core.Index.IndexEntry@)
    name: TryGetOldestEntry
    nameWithType: ITableIndex.TryGetOldestEntry
    fullName: EventStore.Core.Index.ITableIndex.TryGetOldestEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.TableIndex.GetRange*
  commentId: Overload:EventStore.Core.Index.TableIndex.GetRange
  name: GetRange
  nameWithType: TableIndex.GetRange
  fullName: EventStore.Core.Index.TableIndex.GetRange
- uid: EventStore.Core.Index.ITableIndex.GetRange(System.String,System.Int64,System.Int64,System.Nullable{System.Int32})
  commentId: M:EventStore.Core.Index.ITableIndex.GetRange(System.String,System.Int64,System.Int64,System.Nullable{System.Int32})
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: GetRange(String, Int64, Int64, Nullable<Int32>)
  nameWithType: ITableIndex.GetRange(String, Int64, Int64, Nullable<Int32>)
  fullName: EventStore.Core.Index.ITableIndex.GetRange(System.String, System.Int64, System.Int64, System.Nullable<System.Int32>)
  nameWithType.vb: ITableIndex.GetRange(String, Int64, Int64, Nullable(Of Int32))
  fullName.vb: EventStore.Core.Index.ITableIndex.GetRange(System.String, System.Int64, System.Int64, System.Nullable(Of System.Int32))
  name.vb: GetRange(String, Int64, Int64, Nullable(Of Int32))
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.GetRange(System.String,System.Int64,System.Int64,System.Nullable{System.Int32})
    name: GetRange
    nameWithType: ITableIndex.GetRange
    fullName: EventStore.Core.Index.ITableIndex.GetRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.GetRange(System.String,System.Int64,System.Int64,System.Nullable{System.Int32})
    name: GetRange
    nameWithType: ITableIndex.GetRange
    fullName: EventStore.Core.Index.ITableIndex.GetRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{EventStore.Core.Index.IndexEntry}
  commentId: T:System.Collections.Generic.IEnumerable{EventStore.Core.Index.IndexEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IndexEntry>
  nameWithType: IEnumerable<IndexEntry>
  fullName: System.Collections.Generic.IEnumerable<EventStore.Core.Index.IndexEntry>
  nameWithType.vb: IEnumerable(Of IndexEntry)
  fullName.vb: System.Collections.Generic.IEnumerable(Of EventStore.Core.Index.IndexEntry)
  name.vb: IEnumerable(Of IndexEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Index.IndexEntry
    name: IndexEntry
    nameWithType: IndexEntry
    fullName: EventStore.Core.Index.IndexEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Index.TableIndex.Close*
  commentId: Overload:EventStore.Core.Index.TableIndex.Close
  name: Close
  nameWithType: TableIndex.Close
  fullName: EventStore.Core.Index.TableIndex.Close
- uid: EventStore.Core.Index.ITableIndex.Close(System.Boolean)
  commentId: M:EventStore.Core.Index.ITableIndex.Close(System.Boolean)
  parent: EventStore.Core.Index.ITableIndex
  isExternal: true
  name: Close(Boolean)
  nameWithType: ITableIndex.Close(Boolean)
  fullName: EventStore.Core.Index.ITableIndex.Close(System.Boolean)
  spec.csharp:
  - uid: EventStore.Core.Index.ITableIndex.Close(System.Boolean)
    name: Close
    nameWithType: ITableIndex.Close
    fullName: EventStore.Core.Index.ITableIndex.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Index.ITableIndex.Close(System.Boolean)
    name: Close
    nameWithType: ITableIndex.Close
    fullName: EventStore.Core.Index.ITableIndex.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )

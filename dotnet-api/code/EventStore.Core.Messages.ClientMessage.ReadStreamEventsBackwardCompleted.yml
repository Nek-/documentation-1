### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  id: ClientMessage.ReadStreamEventsBackwardCompleted
  parent: EventStore.Core.Messages
  children:
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.#ctor(Guid,System.String,System.Int64,System.Int32,EventStore.Core.Data.ReadStreamResult,EventStore.Core.Data.ResolvedEvent[],EventStore.Core.Data.StreamMetadata,System.Boolean,System.String,System.Int64,System.Int64,System.Boolean,System.Int64)
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.CorrelationId
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.Error
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.Events
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.EventStreamId
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.FromEventNumber
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.IsCachePublic
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.IsEndOfStream
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.LastEventNumber
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.MaxCount
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.MsgTypeId
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.NextEventNumber
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.Result
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.StreamMetadata
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.TfLastCommitPosition
  langs:
  - csharp
  - vb
  name: ClientMessage.ReadStreamEventsBackwardCompleted
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ReadStreamEventsBackwardCompleted
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 649
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: 'public class ReadStreamEventsBackwardCompleted : ClientMessage.ReadResponseMessage'
    content.vb: >-
      Public Class ReadStreamEventsBackwardCompleted
          Inherits ClientMessage.ReadResponseMessage
  inheritance:
  - System.Object
  - EventStore.Core.Messaging.Message
  - EventStore.Core.Messages.ClientMessage.ReadResponseMessage
  inheritedMembers:
  - EventStore.Core.Messaging.Message.NextMsgId
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.MsgTypeId
  commentId: P:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.MsgTypeId
  id: MsgTypeId
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: MsgTypeId
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.MsgTypeId
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.MsgTypeId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: MsgTypeId
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 652
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public override int MsgTypeId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overrides ReadOnly Property MsgTypeId As Integer
  overridden: EventStore.Core.Messages.ClientMessage.ReadResponseMessage.MsgTypeId
  overload: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.MsgTypeId*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.CorrelationId
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.CorrelationId
  id: CorrelationId
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: CorrelationId
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.CorrelationId
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.CorrelationId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: CorrelationId
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 654
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly Guid CorrelationId
    return:
      type: Guid
    content.vb: Public ReadOnly CorrelationId As Guid
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.EventStreamId
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.EventStreamId
  id: EventStreamId
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: EventStreamId
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.EventStreamId
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.EventStreamId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EventStreamId
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 655
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly string EventStreamId
    return:
      type: System.String
    content.vb: Public ReadOnly EventStreamId As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.FromEventNumber
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.FromEventNumber
  id: FromEventNumber
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: FromEventNumber
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.FromEventNumber
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.FromEventNumber
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: FromEventNumber
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 656
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly long FromEventNumber
    return:
      type: System.Int64
    content.vb: Public ReadOnly FromEventNumber As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.MaxCount
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.MaxCount
  id: MaxCount
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: MaxCount
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.MaxCount
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.MaxCount
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: MaxCount
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 657
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly int MaxCount
    return:
      type: System.Int32
    content.vb: Public ReadOnly MaxCount As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.Result
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.Result
  id: Result
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: Result
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.Result
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.Result
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Result
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 659
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly ReadStreamResult Result
    return:
      type: EventStore.Core.Data.ReadStreamResult
    content.vb: Public ReadOnly Result As ReadStreamResult
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.Events
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.Events
  id: Events
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: Events
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.Events
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.Events
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Events
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 660
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly ResolvedEvent[] Events
    return:
      type: EventStore.Core.Data.ResolvedEvent[]
    content.vb: Public ReadOnly Events As ResolvedEvent()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.StreamMetadata
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.StreamMetadata
  id: StreamMetadata
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: StreamMetadata
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.StreamMetadata
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.StreamMetadata
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: StreamMetadata
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 661
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly StreamMetadata StreamMetadata
    return:
      type: EventStore.Core.Data.StreamMetadata
    content.vb: Public ReadOnly StreamMetadata As StreamMetadata
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.IsCachePublic
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.IsCachePublic
  id: IsCachePublic
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: IsCachePublic
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.IsCachePublic
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.IsCachePublic
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: IsCachePublic
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 662
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly bool IsCachePublic
    return:
      type: System.Boolean
    content.vb: Public ReadOnly IsCachePublic As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.Error
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.Error
  id: Error
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.Error
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.Error
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Error
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 663
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly string Error
    return:
      type: System.String
    content.vb: Public ReadOnly Error As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.NextEventNumber
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.NextEventNumber
  id: NextEventNumber
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: NextEventNumber
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.NextEventNumber
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.NextEventNumber
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: NextEventNumber
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 664
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly long NextEventNumber
    return:
      type: System.Int64
    content.vb: Public ReadOnly NextEventNumber As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.LastEventNumber
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.LastEventNumber
  id: LastEventNumber
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: LastEventNumber
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.LastEventNumber
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.LastEventNumber
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: LastEventNumber
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 665
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly long LastEventNumber
    return:
      type: System.Int64
    content.vb: Public ReadOnly LastEventNumber As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.IsEndOfStream
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.IsEndOfStream
  id: IsEndOfStream
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: IsEndOfStream
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.IsEndOfStream
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.IsEndOfStream
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: IsEndOfStream
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 666
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly bool IsEndOfStream
    return:
      type: System.Boolean
    content.vb: Public ReadOnly IsEndOfStream As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.TfLastCommitPosition
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.TfLastCommitPosition
  id: TfLastCommitPosition
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: TfLastCommitPosition
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.TfLastCommitPosition
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.TfLastCommitPosition
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TfLastCommitPosition
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 667
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly long TfLastCommitPosition
    return:
      type: System.Int64
    content.vb: Public ReadOnly TfLastCommitPosition As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.#ctor(Guid,System.String,System.Int64,System.Int32,EventStore.Core.Data.ReadStreamResult,EventStore.Core.Data.ResolvedEvent[],EventStore.Core.Data.StreamMetadata,System.Boolean,System.String,System.Int64,System.Int64,System.Boolean,System.Int64)
  commentId: M:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.#ctor(Guid,System.String,System.Int64,System.Int32,EventStore.Core.Data.ReadStreamResult,EventStore.Core.Data.ResolvedEvent[],EventStore.Core.Data.StreamMetadata,System.Boolean,System.String,System.Int64,System.Int64,System.Boolean,System.Int64)
  id: '#ctor(Guid,System.String,System.Int64,System.Int32,EventStore.Core.Data.ReadStreamResult,EventStore.Core.Data.ResolvedEvent[],EventStore.Core.Data.StreamMetadata,System.Boolean,System.String,System.Int64,System.Int64,System.Boolean,System.Int64)'
  parent: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted
  langs:
  - csharp
  - vb
  name: ReadStreamEventsBackwardCompleted(Guid, String, Int64, Int32, ReadStreamResult, ResolvedEvent[], StreamMetadata, Boolean, String, Int64, Int64, Boolean, Int64)
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.ReadStreamEventsBackwardCompleted(Guid, String, Int64, Int32, ReadStreamResult, ResolvedEvent[], StreamMetadata, Boolean, String, Int64, Int64, Boolean, Int64)
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.ReadStreamEventsBackwardCompleted(Guid, System.String, System.Int64, System.Int32, EventStore.Core.Data.ReadStreamResult, EventStore.Core.Data.ResolvedEvent[], EventStore.Core.Data.StreamMetadata, System.Boolean, System.String, System.Int64, System.Int64, System.Boolean, System.Int64)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 669
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public ReadStreamEventsBackwardCompleted(Guid correlationId, string eventStreamId, long fromEventNumber, int maxCount, ReadStreamResult result, ResolvedEvent[] events, StreamMetadata streamMetadata, bool isCachePublic, string error, long nextEventNumber, long lastEventNumber, bool isEndOfStream, long tfLastCommitPosition)
    parameters:
    - id: correlationId
      type: Guid
    - id: eventStreamId
      type: System.String
    - id: fromEventNumber
      type: System.Int64
    - id: maxCount
      type: System.Int32
    - id: result
      type: EventStore.Core.Data.ReadStreamResult
    - id: events
      type: EventStore.Core.Data.ResolvedEvent[]
    - id: streamMetadata
      type: EventStore.Core.Data.StreamMetadata
    - id: isCachePublic
      type: System.Boolean
    - id: error
      type: System.String
    - id: nextEventNumber
      type: System.Int64
    - id: lastEventNumber
      type: System.Int64
    - id: isEndOfStream
      type: System.Boolean
    - id: tfLastCommitPosition
      type: System.Int64
    content.vb: Public Sub New(correlationId As Guid, eventStreamId As String, fromEventNumber As Long, maxCount As Integer, result As ReadStreamResult, events As ResolvedEvent(), streamMetadata As StreamMetadata, isCachePublic As Boolean, error As String, nextEventNumber As Long, lastEventNumber As Long, isEndOfStream As Boolean, tfLastCommitPosition As Long)
  overload: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.#ctor*
  nameWithType.vb: ClientMessage.ReadStreamEventsBackwardCompleted.ReadStreamEventsBackwardCompleted(Guid, String, Int64, Int32, ReadStreamResult, ResolvedEvent(), StreamMetadata, Boolean, String, Int64, Int64, Boolean, Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.ReadStreamEventsBackwardCompleted(Guid, System.String, System.Int64, System.Int32, EventStore.Core.Data.ReadStreamResult, EventStore.Core.Data.ResolvedEvent(), EventStore.Core.Data.StreamMetadata, System.Boolean, System.String, System.Int64, System.Int64, System.Boolean, System.Int64)
  name.vb: ReadStreamEventsBackwardCompleted(Guid, String, Int64, Int32, ReadStreamResult, ResolvedEvent(), StreamMetadata, Boolean, String, Int64, Int64, Boolean, Int64)
references:
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messages.ClientMessage.ReadResponseMessage
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadResponseMessage
  parent: EventStore.Core.Messages
  name: ClientMessage.ReadResponseMessage
  nameWithType: ClientMessage.ReadResponseMessage
  fullName: EventStore.Core.Messages.ClientMessage.ReadResponseMessage
- uid: EventStore.Core.Messaging.Message.NextMsgId
  commentId: F:EventStore.Core.Messaging.Message.NextMsgId
  parent: EventStore.Core.Messaging.Message
  name: NextMsgId
  nameWithType: Message.NextMsgId
  fullName: EventStore.Core.Messaging.Message.NextMsgId
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ClientMessage.ReadStreamEventsBackwardCompleted>()
  nameWithType: ProtobufExtensions.Serialize<ClientMessage.ReadStreamEventsBackwardCompleted>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ClientMessage.ReadStreamEventsBackwardCompleted)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted)()
  name.vb: Serialize(Of ClientMessage.ReadStreamEventsBackwardCompleted)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ClientMessage.ReadStreamEventsBackwardCompleted>
    nameWithType: ProtobufExtensions.Serialize<ClientMessage.ReadStreamEventsBackwardCompleted>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ClientMessage.ReadStreamEventsBackwardCompleted)
    nameWithType: ProtobufExtensions.Serialize(Of ClientMessage.ReadStreamEventsBackwardCompleted)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ClientMessage.ReadStreamEventsBackwardCompleted>()
  nameWithType: ProtobufExtensions.SerializeToArray<ClientMessage.ReadStreamEventsBackwardCompleted>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ClientMessage.ReadStreamEventsBackwardCompleted)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted)()
  name.vb: SerializeToArray(Of ClientMessage.ReadStreamEventsBackwardCompleted)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ClientMessage.ReadStreamEventsBackwardCompleted>
    nameWithType: ProtobufExtensions.SerializeToArray<ClientMessage.ReadStreamEventsBackwardCompleted>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ClientMessage.ReadStreamEventsBackwardCompleted)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ClientMessage.ReadStreamEventsBackwardCompleted)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Messages.ClientMessage.ReadResponseMessage.MsgTypeId
  commentId: P:EventStore.Core.Messages.ClientMessage.ReadResponseMessage.MsgTypeId
  parent: EventStore.Core.Messages.ClientMessage.ReadResponseMessage
  name: MsgTypeId
  nameWithType: ClientMessage.ReadResponseMessage.MsgTypeId
  fullName: EventStore.Core.Messages.ClientMessage.ReadResponseMessage.MsgTypeId
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.MsgTypeId*
  commentId: Overload:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.MsgTypeId
  name: MsgTypeId
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.MsgTypeId
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.MsgTypeId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Data.ReadStreamResult
  commentId: T:EventStore.Core.Data.ReadStreamResult
  parent: EventStore.Core.Data
  name: ReadStreamResult
  nameWithType: ReadStreamResult
  fullName: EventStore.Core.Data.ReadStreamResult
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: EventStore.Core.Data.ResolvedEvent[]
  isExternal: true
  name: ResolvedEvent[]
  nameWithType: ResolvedEvent[]
  fullName: EventStore.Core.Data.ResolvedEvent[]
  nameWithType.vb: ResolvedEvent()
  fullName.vb: EventStore.Core.Data.ResolvedEvent()
  name.vb: ResolvedEvent()
  spec.csharp:
  - uid: EventStore.Core.Data.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.Core.Data.ResolvedEvent
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Data.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.Core.Data.ResolvedEvent
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Data.StreamMetadata
  commentId: T:EventStore.Core.Data.StreamMetadata
  parent: EventStore.Core.Data
  name: StreamMetadata
  nameWithType: StreamMetadata
  fullName: EventStore.Core.Data.StreamMetadata
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.#ctor*
  commentId: Overload:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.#ctor
  name: ReadStreamEventsBackwardCompleted
  nameWithType: ClientMessage.ReadStreamEventsBackwardCompleted.ReadStreamEventsBackwardCompleted
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackwardCompleted.ReadStreamEventsBackwardCompleted

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents
  commentId: T:EventStore.Core.Messages.ClientMessage.WriteEvents
  id: ClientMessage.WriteEvents
  parent: EventStore.Core.Messages
  children:
  - EventStore.Core.Messages.ClientMessage.WriteEvents.#ctor(Guid,Guid,EventStore.Core.Messaging.IEnvelope,System.Boolean,System.String,System.Int64,EventStore.Core.Data.Event,IPrincipal,System.String,System.String)
  - EventStore.Core.Messages.ClientMessage.WriteEvents.#ctor(Guid,Guid,EventStore.Core.Messaging.IEnvelope,System.Boolean,System.String,System.Int64,EventStore.Core.Data.Event[],IPrincipal,System.String,System.String)
  - EventStore.Core.Messages.ClientMessage.WriteEvents.Events
  - EventStore.Core.Messages.ClientMessage.WriteEvents.EventStreamId
  - EventStore.Core.Messages.ClientMessage.WriteEvents.ExpectedVersion
  - EventStore.Core.Messages.ClientMessage.WriteEvents.MsgTypeId
  - EventStore.Core.Messages.ClientMessage.WriteEvents.ToString
  langs:
  - csharp
  - vb
  name: ClientMessage.WriteEvents
  nameWithType: ClientMessage.WriteEvents
  fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: WriteEvents
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 141
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: 'public class WriteEvents : ClientMessage.WriteRequestMessage'
    content.vb: >-
      Public Class WriteEvents
          Inherits ClientMessage.WriteRequestMessage
  inheritance:
  - System.Object
  - EventStore.Core.Messaging.Message
  - EventStore.Core.Messages.ClientMessage.WriteRequestMessage
  inheritedMembers:
  - EventStore.Core.Messages.ClientMessage.WriteRequestMessage.InternalCorrId
  - EventStore.Core.Messages.ClientMessage.WriteRequestMessage.CorrelationId
  - EventStore.Core.Messages.ClientMessage.WriteRequestMessage.Envelope
  - EventStore.Core.Messages.ClientMessage.WriteRequestMessage.RequireMaster
  - EventStore.Core.Messages.ClientMessage.WriteRequestMessage.User
  - EventStore.Core.Messages.ClientMessage.WriteRequestMessage.Login
  - EventStore.Core.Messages.ClientMessage.WriteRequestMessage.Password
  - EventStore.Core.Messaging.Message.NextMsgId
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Messages.ClientMessage.WriteEvents.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Messages.ClientMessage.WriteEvents.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents.MsgTypeId
  commentId: P:EventStore.Core.Messages.ClientMessage.WriteEvents.MsgTypeId
  id: MsgTypeId
  parent: EventStore.Core.Messages.ClientMessage.WriteEvents
  langs:
  - csharp
  - vb
  name: MsgTypeId
  nameWithType: ClientMessage.WriteEvents.MsgTypeId
  fullName: EventStore.Core.Messages.ClientMessage.WriteEvents.MsgTypeId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: MsgTypeId
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 144
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public override int MsgTypeId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overrides ReadOnly Property MsgTypeId As Integer
  overridden: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.MsgTypeId
  overload: EventStore.Core.Messages.ClientMessage.WriteEvents.MsgTypeId*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents.EventStreamId
  commentId: F:EventStore.Core.Messages.ClientMessage.WriteEvents.EventStreamId
  id: EventStreamId
  parent: EventStore.Core.Messages.ClientMessage.WriteEvents
  langs:
  - csharp
  - vb
  name: EventStreamId
  nameWithType: ClientMessage.WriteEvents.EventStreamId
  fullName: EventStore.Core.Messages.ClientMessage.WriteEvents.EventStreamId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EventStreamId
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 146
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly string EventStreamId
    return:
      type: System.String
    content.vb: Public ReadOnly EventStreamId As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents.ExpectedVersion
  commentId: F:EventStore.Core.Messages.ClientMessage.WriteEvents.ExpectedVersion
  id: ExpectedVersion
  parent: EventStore.Core.Messages.ClientMessage.WriteEvents
  langs:
  - csharp
  - vb
  name: ExpectedVersion
  nameWithType: ClientMessage.WriteEvents.ExpectedVersion
  fullName: EventStore.Core.Messages.ClientMessage.WriteEvents.ExpectedVersion
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ExpectedVersion
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 147
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly long ExpectedVersion
    return:
      type: System.Int64
    content.vb: Public ReadOnly ExpectedVersion As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents.Events
  commentId: F:EventStore.Core.Messages.ClientMessage.WriteEvents.Events
  id: Events
  parent: EventStore.Core.Messages.ClientMessage.WriteEvents
  langs:
  - csharp
  - vb
  name: Events
  nameWithType: ClientMessage.WriteEvents.Events
  fullName: EventStore.Core.Messages.ClientMessage.WriteEvents.Events
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Events
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 148
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly Event[] Events
    return:
      type: EventStore.Core.Data.Event[]
    content.vb: 'Public ReadOnly Events As '
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents.#ctor(Guid,Guid,EventStore.Core.Messaging.IEnvelope,System.Boolean,System.String,System.Int64,EventStore.Core.Data.Event[],IPrincipal,System.String,System.String)
  commentId: M:EventStore.Core.Messages.ClientMessage.WriteEvents.#ctor(Guid,Guid,EventStore.Core.Messaging.IEnvelope,System.Boolean,System.String,System.Int64,EventStore.Core.Data.Event[],IPrincipal,System.String,System.String)
  id: '#ctor(Guid,Guid,EventStore.Core.Messaging.IEnvelope,System.Boolean,System.String,System.Int64,EventStore.Core.Data.Event[],IPrincipal,System.String,System.String)'
  parent: EventStore.Core.Messages.ClientMessage.WriteEvents
  langs:
  - csharp
  - vb
  name: WriteEvents(Guid, Guid, IEnvelope, Boolean, String, Int64, Event[], IPrincipal, String, String)
  nameWithType: ClientMessage.WriteEvents.WriteEvents(Guid, Guid, IEnvelope, Boolean, String, Int64, Event[], IPrincipal, String, String)
  fullName: EventStore.Core.Messages.ClientMessage.WriteEvents.WriteEvents(Guid, Guid, EventStore.Core.Messaging.IEnvelope, System.Boolean, System.String, System.Int64, EventStore.Core.Data.Event[], IPrincipal, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 150
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public WriteEvents(Guid internalCorrId, Guid correlationId, IEnvelope envelope, bool requireMaster, string eventStreamId, long expectedVersion, Event[] events, IPrincipal user, string login = null, string password = null)
    parameters:
    - id: internalCorrId
      type: Guid
    - id: correlationId
      type: Guid
    - id: envelope
      type: EventStore.Core.Messaging.IEnvelope
    - id: requireMaster
      type: System.Boolean
    - id: eventStreamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: events
      type: EventStore.Core.Data.Event[]
    - id: user
      type: IPrincipal
    - id: login
      type: System.String
    - id: password
      type: System.String
    content.vb: Public Sub New(internalCorrId As Guid, correlationId As Guid, envelope As IEnvelope, requireMaster As Boolean, eventStreamId As String, expectedVersion As Long, events As  Event (), user As IPrincipal, login As String = Nothing, password As String = Nothing)
  overload: EventStore.Core.Messages.ClientMessage.WriteEvents.#ctor*
  nameWithType.vb: ClientMessage.WriteEvents.WriteEvents(Guid, Guid, IEnvelope, Boolean, String, Int64, Event(), IPrincipal, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Messages.ClientMessage.WriteEvents.WriteEvents(Guid, Guid, EventStore.Core.Messaging.IEnvelope, System.Boolean, System.String, System.Int64, EventStore.Core.Data.Event(), IPrincipal, System.String, System.String)
  name.vb: WriteEvents(Guid, Guid, IEnvelope, Boolean, String, Int64, Event(), IPrincipal, String, String)
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents.#ctor(Guid,Guid,EventStore.Core.Messaging.IEnvelope,System.Boolean,System.String,System.Int64,EventStore.Core.Data.Event,IPrincipal,System.String,System.String)
  commentId: M:EventStore.Core.Messages.ClientMessage.WriteEvents.#ctor(Guid,Guid,EventStore.Core.Messaging.IEnvelope,System.Boolean,System.String,System.Int64,EventStore.Core.Data.Event,IPrincipal,System.String,System.String)
  id: '#ctor(Guid,Guid,EventStore.Core.Messaging.IEnvelope,System.Boolean,System.String,System.Int64,EventStore.Core.Data.Event,IPrincipal,System.String,System.String)'
  parent: EventStore.Core.Messages.ClientMessage.WriteEvents
  langs:
  - csharp
  - vb
  name: WriteEvents(Guid, Guid, IEnvelope, Boolean, String, Int64, Event, IPrincipal, String, String)
  nameWithType: ClientMessage.WriteEvents.WriteEvents(Guid, Guid, IEnvelope, Boolean, String, Int64, Event, IPrincipal, String, String)
  fullName: EventStore.Core.Messages.ClientMessage.WriteEvents.WriteEvents(Guid, Guid, EventStore.Core.Messaging.IEnvelope, System.Boolean, System.String, System.Int64, EventStore.Core.Data.Event, IPrincipal, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 164
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public WriteEvents(Guid internalCorrId, Guid correlationId, IEnvelope envelope, bool requireMaster, string eventStreamId, long expectedVersion, Event event, IPrincipal user, string login = null, string password = null)
    parameters:
    - id: internalCorrId
      type: Guid
    - id: correlationId
      type: Guid
    - id: envelope
      type: EventStore.Core.Messaging.IEnvelope
    - id: requireMaster
      type: System.Boolean
    - id: eventStreamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: event
      type: EventStore.Core.Data.Event
    - id: user
      type: IPrincipal
    - id: login
      type: System.String
    - id: password
      type: System.String
    content.vb: Public Sub New(internalCorrId As Guid, correlationId As Guid, envelope As IEnvelope, requireMaster As Boolean, eventStreamId As String, expectedVersion As Long, event As  Event, user As IPrincipal, login As String = Nothing, password As String = Nothing)
  overload: EventStore.Core.Messages.ClientMessage.WriteEvents.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents.ToString
  commentId: M:EventStore.Core.Messages.ClientMessage.WriteEvents.ToString
  id: ToString
  parent: EventStore.Core.Messages.ClientMessage.WriteEvents
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ClientMessage.WriteEvents.ToString()
  fullName: EventStore.Core.Messages.ClientMessage.WriteEvents.ToString()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Messages/ClientMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ToString
    path: ../EventStore/src/EventStore.Core/Messages/ClientMessage.cs
    startLine: 172
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: EventStore.Core.Messages.ClientMessage.WriteEvents.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messages.ClientMessage.WriteRequestMessage
  commentId: T:EventStore.Core.Messages.ClientMessage.WriteRequestMessage
  parent: EventStore.Core.Messages
  name: ClientMessage.WriteRequestMessage
  nameWithType: ClientMessage.WriteRequestMessage
  fullName: EventStore.Core.Messages.ClientMessage.WriteRequestMessage
- uid: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.InternalCorrId
  commentId: F:EventStore.Core.Messages.ClientMessage.WriteRequestMessage.InternalCorrId
  parent: EventStore.Core.Messages.ClientMessage.WriteRequestMessage
  name: InternalCorrId
  nameWithType: ClientMessage.WriteRequestMessage.InternalCorrId
  fullName: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.InternalCorrId
- uid: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.CorrelationId
  commentId: F:EventStore.Core.Messages.ClientMessage.WriteRequestMessage.CorrelationId
  parent: EventStore.Core.Messages.ClientMessage.WriteRequestMessage
  name: CorrelationId
  nameWithType: ClientMessage.WriteRequestMessage.CorrelationId
  fullName: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.CorrelationId
- uid: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.Envelope
  commentId: F:EventStore.Core.Messages.ClientMessage.WriteRequestMessage.Envelope
  parent: EventStore.Core.Messages.ClientMessage.WriteRequestMessage
  name: Envelope
  nameWithType: ClientMessage.WriteRequestMessage.Envelope
  fullName: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.Envelope
- uid: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.RequireMaster
  commentId: F:EventStore.Core.Messages.ClientMessage.WriteRequestMessage.RequireMaster
  parent: EventStore.Core.Messages.ClientMessage.WriteRequestMessage
  name: RequireMaster
  nameWithType: ClientMessage.WriteRequestMessage.RequireMaster
  fullName: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.RequireMaster
- uid: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.User
  commentId: F:EventStore.Core.Messages.ClientMessage.WriteRequestMessage.User
  parent: EventStore.Core.Messages.ClientMessage.WriteRequestMessage
  name: User
  nameWithType: ClientMessage.WriteRequestMessage.User
  fullName: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.User
- uid: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.Login
  commentId: F:EventStore.Core.Messages.ClientMessage.WriteRequestMessage.Login
  parent: EventStore.Core.Messages.ClientMessage.WriteRequestMessage
  name: Login
  nameWithType: ClientMessage.WriteRequestMessage.Login
  fullName: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.Login
- uid: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.Password
  commentId: F:EventStore.Core.Messages.ClientMessage.WriteRequestMessage.Password
  parent: EventStore.Core.Messages.ClientMessage.WriteRequestMessage
  name: Password
  nameWithType: ClientMessage.WriteRequestMessage.Password
  fullName: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.Password
- uid: EventStore.Core.Messaging.Message.NextMsgId
  commentId: F:EventStore.Core.Messaging.Message.NextMsgId
  parent: EventStore.Core.Messaging.Message
  name: NextMsgId
  nameWithType: Message.NextMsgId
  fullName: EventStore.Core.Messaging.Message.NextMsgId
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ClientMessage.WriteEvents>()
  nameWithType: ProtobufExtensions.Serialize<ClientMessage.WriteEvents>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.ClientMessage.WriteEvents>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ClientMessage.WriteEvents)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.ClientMessage.WriteEvents)()
  name.vb: Serialize(Of ClientMessage.WriteEvents)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ClientMessage.WriteEvents>
    nameWithType: ProtobufExtensions.Serialize<ClientMessage.WriteEvents>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.ClientMessage.WriteEvents>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ClientMessage.WriteEvents)
    nameWithType: ProtobufExtensions.Serialize(Of ClientMessage.WriteEvents)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.ClientMessage.WriteEvents)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ClientMessage.WriteEvents>()
  nameWithType: ProtobufExtensions.SerializeToArray<ClientMessage.WriteEvents>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.ClientMessage.WriteEvents>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ClientMessage.WriteEvents)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.ClientMessage.WriteEvents)()
  name.vb: SerializeToArray(Of ClientMessage.WriteEvents)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ClientMessage.WriteEvents>
    nameWithType: ProtobufExtensions.SerializeToArray<ClientMessage.WriteEvents>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.ClientMessage.WriteEvents>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ClientMessage.WriteEvents)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ClientMessage.WriteEvents)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.ClientMessage.WriteEvents)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.MsgTypeId
  commentId: P:EventStore.Core.Messages.ClientMessage.WriteRequestMessage.MsgTypeId
  parent: EventStore.Core.Messages.ClientMessage.WriteRequestMessage
  name: MsgTypeId
  nameWithType: ClientMessage.WriteRequestMessage.MsgTypeId
  fullName: EventStore.Core.Messages.ClientMessage.WriteRequestMessage.MsgTypeId
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents.MsgTypeId*
  commentId: Overload:EventStore.Core.Messages.ClientMessage.WriteEvents.MsgTypeId
  name: MsgTypeId
  nameWithType: ClientMessage.WriteEvents.MsgTypeId
  fullName: EventStore.Core.Messages.ClientMessage.WriteEvents.MsgTypeId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Data.Event[]
  isExternal: true
  name: Event[]
  nameWithType: Event[]
  fullName: EventStore.Core.Data.Event[]
  nameWithType.vb: Event()
  fullName.vb: EventStore.Core.Data.Event()
  name.vb: Event()
  spec.csharp:
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents.#ctor*
  commentId: Overload:EventStore.Core.Messages.ClientMessage.WriteEvents.#ctor
  name: WriteEvents
  nameWithType: ClientMessage.WriteEvents.WriteEvents
  fullName: EventStore.Core.Messages.ClientMessage.WriteEvents.WriteEvents
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: EventStore.Core.Messaging.IEnvelope
  commentId: T:EventStore.Core.Messaging.IEnvelope
  parent: EventStore.Core.Messaging
  name: IEnvelope
  nameWithType: IEnvelope
  fullName: EventStore.Core.Messaging.IEnvelope
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: IPrincipal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: IPrincipal
- uid: EventStore.Core.Data.Event
  commentId: T:EventStore.Core.Data.Event
  parent: EventStore.Core.Data
  name: Event
  nameWithType: Event
  fullName: EventStore.Core.Data.Event
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents.ToString*
  commentId: Overload:EventStore.Core.Messages.ClientMessage.WriteEvents.ToString
  name: ToString
  nameWithType: ClientMessage.WriteEvents.ToString
  fullName: EventStore.Core.Messages.ClientMessage.WriteEvents.ToString

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  commentId: T:EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  id: StorageMessage.CheckStreamAccess
  parent: EventStore.Core.Messages
  children:
  - EventStore.Core.Messages.StorageMessage.CheckStreamAccess.#ctor(EventStore.Core.Messaging.IEnvelope,Guid,System.String,System.Nullable{System.Int64},EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType,IPrincipal,System.Boolean)
  - EventStore.Core.Messages.StorageMessage.CheckStreamAccess.AccessType
  - EventStore.Core.Messages.StorageMessage.CheckStreamAccess.EventStreamId
  - EventStore.Core.Messages.StorageMessage.CheckStreamAccess.MsgTypeId
  - EventStore.Core.Messages.StorageMessage.CheckStreamAccess.QueueId
  - EventStore.Core.Messages.StorageMessage.CheckStreamAccess.TransactionId
  langs:
  - csharp
  - vb
  name: StorageMessage.CheckStreamAccess
  nameWithType: StorageMessage.CheckStreamAccess
  fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: CheckStreamAccess
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 415
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: 'public class CheckStreamAccess : ClientMessage.ReadRequestMessage, IQueueAffineMessage'
    content.vb: >-
      Public Class CheckStreamAccess
          Inherits ClientMessage.ReadRequestMessage
          Implements IQueueAffineMessage
  inheritance:
  - System.Object
  - EventStore.Core.Messaging.Message
  - EventStore.Core.Messages.ClientMessage.ReadRequestMessage
  implements:
  - EventStore.Core.Messages.IQueueAffineMessage
  inheritedMembers:
  - EventStore.Core.Messages.ClientMessage.ReadRequestMessage.InternalCorrId
  - EventStore.Core.Messages.ClientMessage.ReadRequestMessage.CorrelationId
  - EventStore.Core.Messages.ClientMessage.ReadRequestMessage.Envelope
  - EventStore.Core.Messages.ClientMessage.ReadRequestMessage.User
  - EventStore.Core.Messages.ClientMessage.ReadRequestMessage.Expires
  - EventStore.Core.Messaging.Message.NextMsgId
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Messages.StorageMessage.CheckStreamAccess.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Messages.StorageMessage.CheckStreamAccess.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.MsgTypeId
  commentId: P:EventStore.Core.Messages.StorageMessage.CheckStreamAccess.MsgTypeId
  id: MsgTypeId
  parent: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  langs:
  - csharp
  - vb
  name: MsgTypeId
  nameWithType: StorageMessage.CheckStreamAccess.MsgTypeId
  fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.MsgTypeId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: MsgTypeId
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 418
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public override int MsgTypeId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overrides ReadOnly Property MsgTypeId As Integer
  overridden: EventStore.Core.Messages.ClientMessage.ReadRequestMessage.MsgTypeId
  overload: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.MsgTypeId*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.QueueId
  commentId: P:EventStore.Core.Messages.StorageMessage.CheckStreamAccess.QueueId
  id: QueueId
  parent: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  langs:
  - csharp
  - vb
  name: QueueId
  nameWithType: StorageMessage.CheckStreamAccess.QueueId
  fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.QueueId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: QueueId
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 424
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public int QueueId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property QueueId As Integer
  overload: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.QueueId*
  implements:
  - EventStore.Core.Messages.IQueueAffineMessage.QueueId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.EventStreamId
  commentId: F:EventStore.Core.Messages.StorageMessage.CheckStreamAccess.EventStreamId
  id: EventStreamId
  parent: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  langs:
  - csharp
  - vb
  name: EventStreamId
  nameWithType: StorageMessage.CheckStreamAccess.EventStreamId
  fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.EventStreamId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EventStreamId
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 428
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly string EventStreamId
    return:
      type: System.String
    content.vb: Public ReadOnly EventStreamId As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.TransactionId
  commentId: F:EventStore.Core.Messages.StorageMessage.CheckStreamAccess.TransactionId
  id: TransactionId
  parent: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  langs:
  - csharp
  - vb
  name: TransactionId
  nameWithType: StorageMessage.CheckStreamAccess.TransactionId
  fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.TransactionId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TransactionId
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 429
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly long? TransactionId
    return:
      type: System.Nullable{System.Int64}
    content.vb: Public ReadOnly TransactionId As Long?
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.AccessType
  commentId: F:EventStore.Core.Messages.StorageMessage.CheckStreamAccess.AccessType
  id: AccessType
  parent: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  langs:
  - csharp
  - vb
  name: AccessType
  nameWithType: StorageMessage.CheckStreamAccess.AccessType
  fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.AccessType
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AccessType
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 430
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly StreamAccessType AccessType
    return:
      type: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
    content.vb: Public ReadOnly AccessType As StreamAccessType
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.#ctor(EventStore.Core.Messaging.IEnvelope,Guid,System.String,System.Nullable{System.Int64},EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType,IPrincipal,System.Boolean)
  commentId: M:EventStore.Core.Messages.StorageMessage.CheckStreamAccess.#ctor(EventStore.Core.Messaging.IEnvelope,Guid,System.String,System.Nullable{System.Int64},EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType,IPrincipal,System.Boolean)
  id: '#ctor(EventStore.Core.Messaging.IEnvelope,Guid,System.String,System.Nullable{System.Int64},EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType,IPrincipal,System.Boolean)'
  parent: EventStore.Core.Messages.StorageMessage.CheckStreamAccess
  langs:
  - csharp
  - vb
  name: CheckStreamAccess(IEnvelope, Guid, String, Nullable<Int64>, StreamAccessType, IPrincipal, Boolean)
  nameWithType: StorageMessage.CheckStreamAccess.CheckStreamAccess(IEnvelope, Guid, String, Nullable<Int64>, StreamAccessType, IPrincipal, Boolean)
  fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.CheckStreamAccess(EventStore.Core.Messaging.IEnvelope, Guid, System.String, System.Nullable<System.Int64>, EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType, IPrincipal, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/StorageMessage.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/StorageMessage.cs
    startLine: 432
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public CheckStreamAccess(IEnvelope envelope, Guid correlationId, string eventStreamId, long? transactionId, StreamAccessType accessType, IPrincipal user, bool singleAffinity = false)
    parameters:
    - id: envelope
      type: EventStore.Core.Messaging.IEnvelope
    - id: correlationId
      type: Guid
    - id: eventStreamId
      type: System.String
    - id: transactionId
      type: System.Nullable{System.Int64}
    - id: accessType
      type: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
    - id: user
      type: IPrincipal
    - id: singleAffinity
      type: System.Boolean
    content.vb: Public Sub New(envelope As IEnvelope, correlationId As Guid, eventStreamId As String, transactionId As Long?, accessType As StreamAccessType, user As IPrincipal, singleAffinity As Boolean = False)
  overload: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.#ctor*
  nameWithType.vb: StorageMessage.CheckStreamAccess.CheckStreamAccess(IEnvelope, Guid, String, Nullable(Of Int64), StreamAccessType, IPrincipal, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.CheckStreamAccess(EventStore.Core.Messaging.IEnvelope, Guid, System.String, System.Nullable(Of System.Int64), EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType, IPrincipal, System.Boolean)
  name.vb: CheckStreamAccess(IEnvelope, Guid, String, Nullable(Of Int64), StreamAccessType, IPrincipal, Boolean)
references:
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messages.ClientMessage.ReadRequestMessage
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadRequestMessage
  parent: EventStore.Core.Messages
  name: ClientMessage.ReadRequestMessage
  nameWithType: ClientMessage.ReadRequestMessage
  fullName: EventStore.Core.Messages.ClientMessage.ReadRequestMessage
- uid: EventStore.Core.Messages.IQueueAffineMessage
  commentId: T:EventStore.Core.Messages.IQueueAffineMessage
  parent: EventStore.Core.Messages
  name: IQueueAffineMessage
  nameWithType: IQueueAffineMessage
  fullName: EventStore.Core.Messages.IQueueAffineMessage
- uid: EventStore.Core.Messages.ClientMessage.ReadRequestMessage.InternalCorrId
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadRequestMessage.InternalCorrId
  parent: EventStore.Core.Messages.ClientMessage.ReadRequestMessage
  name: InternalCorrId
  nameWithType: ClientMessage.ReadRequestMessage.InternalCorrId
  fullName: EventStore.Core.Messages.ClientMessage.ReadRequestMessage.InternalCorrId
- uid: EventStore.Core.Messages.ClientMessage.ReadRequestMessage.CorrelationId
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadRequestMessage.CorrelationId
  parent: EventStore.Core.Messages.ClientMessage.ReadRequestMessage
  name: CorrelationId
  nameWithType: ClientMessage.ReadRequestMessage.CorrelationId
  fullName: EventStore.Core.Messages.ClientMessage.ReadRequestMessage.CorrelationId
- uid: EventStore.Core.Messages.ClientMessage.ReadRequestMessage.Envelope
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadRequestMessage.Envelope
  parent: EventStore.Core.Messages.ClientMessage.ReadRequestMessage
  name: Envelope
  nameWithType: ClientMessage.ReadRequestMessage.Envelope
  fullName: EventStore.Core.Messages.ClientMessage.ReadRequestMessage.Envelope
- uid: EventStore.Core.Messages.ClientMessage.ReadRequestMessage.User
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadRequestMessage.User
  parent: EventStore.Core.Messages.ClientMessage.ReadRequestMessage
  name: User
  nameWithType: ClientMessage.ReadRequestMessage.User
  fullName: EventStore.Core.Messages.ClientMessage.ReadRequestMessage.User
- uid: EventStore.Core.Messages.ClientMessage.ReadRequestMessage.Expires
  commentId: F:EventStore.Core.Messages.ClientMessage.ReadRequestMessage.Expires
  parent: EventStore.Core.Messages.ClientMessage.ReadRequestMessage
  name: Expires
  nameWithType: ClientMessage.ReadRequestMessage.Expires
  fullName: EventStore.Core.Messages.ClientMessage.ReadRequestMessage.Expires
- uid: EventStore.Core.Messaging.Message.NextMsgId
  commentId: F:EventStore.Core.Messaging.Message.NextMsgId
  parent: EventStore.Core.Messaging.Message
  name: NextMsgId
  nameWithType: Message.NextMsgId
  fullName: EventStore.Core.Messaging.Message.NextMsgId
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<StorageMessage.CheckStreamAccess>()
  nameWithType: ProtobufExtensions.Serialize<StorageMessage.CheckStreamAccess>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of StorageMessage.CheckStreamAccess)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccess)()
  name.vb: Serialize(Of StorageMessage.CheckStreamAccess)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<StorageMessage.CheckStreamAccess>
    nameWithType: ProtobufExtensions.Serialize<StorageMessage.CheckStreamAccess>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of StorageMessage.CheckStreamAccess)
    nameWithType: ProtobufExtensions.Serialize(Of StorageMessage.CheckStreamAccess)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccess)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<StorageMessage.CheckStreamAccess>()
  nameWithType: ProtobufExtensions.SerializeToArray<StorageMessage.CheckStreamAccess>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of StorageMessage.CheckStreamAccess)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccess)()
  name.vb: SerializeToArray(Of StorageMessage.CheckStreamAccess)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<StorageMessage.CheckStreamAccess>
    nameWithType: ProtobufExtensions.SerializeToArray<StorageMessage.CheckStreamAccess>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.StorageMessage.CheckStreamAccess>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of StorageMessage.CheckStreamAccess)
    nameWithType: ProtobufExtensions.SerializeToArray(Of StorageMessage.CheckStreamAccess)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccess)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Messages.ClientMessage.ReadRequestMessage.MsgTypeId
  commentId: P:EventStore.Core.Messages.ClientMessage.ReadRequestMessage.MsgTypeId
  parent: EventStore.Core.Messages.ClientMessage.ReadRequestMessage
  name: MsgTypeId
  nameWithType: ClientMessage.ReadRequestMessage.MsgTypeId
  fullName: EventStore.Core.Messages.ClientMessage.ReadRequestMessage.MsgTypeId
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.MsgTypeId*
  commentId: Overload:EventStore.Core.Messages.StorageMessage.CheckStreamAccess.MsgTypeId
  name: MsgTypeId
  nameWithType: StorageMessage.CheckStreamAccess.MsgTypeId
  fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.MsgTypeId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.QueueId*
  commentId: Overload:EventStore.Core.Messages.StorageMessage.CheckStreamAccess.QueueId
  name: QueueId
  nameWithType: StorageMessage.CheckStreamAccess.QueueId
  fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.QueueId
- uid: EventStore.Core.Messages.IQueueAffineMessage.QueueId
  commentId: P:EventStore.Core.Messages.IQueueAffineMessage.QueueId
  parent: EventStore.Core.Messages.IQueueAffineMessage
  name: QueueId
  nameWithType: IQueueAffineMessage.QueueId
  fullName: EventStore.Core.Messages.IQueueAffineMessage.QueueId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
  commentId: T:EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
  parent: EventStore.Core.Services.Storage.ReaderIndex
  name: StreamAccessType
  nameWithType: StreamAccessType
  fullName: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
- uid: EventStore.Core.Services.Storage.ReaderIndex
  commentId: N:EventStore.Core.Services.Storage.ReaderIndex
  name: EventStore.Core.Services.Storage.ReaderIndex
  nameWithType: EventStore.Core.Services.Storage.ReaderIndex
  fullName: EventStore.Core.Services.Storage.ReaderIndex
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.#ctor*
  commentId: Overload:EventStore.Core.Messages.StorageMessage.CheckStreamAccess.#ctor
  name: CheckStreamAccess
  nameWithType: StorageMessage.CheckStreamAccess.CheckStreamAccess
  fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccess.CheckStreamAccess
- uid: EventStore.Core.Messaging.IEnvelope
  commentId: T:EventStore.Core.Messaging.IEnvelope
  parent: EventStore.Core.Messaging
  name: IEnvelope
  nameWithType: IEnvelope
  fullName: EventStore.Core.Messaging.IEnvelope
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: IPrincipal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: IPrincipal
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Messages.UserManagementMessage.Create
  commentId: T:EventStore.Core.Messages.UserManagementMessage.Create
  id: UserManagementMessage.Create
  parent: EventStore.Core.Messages
  children:
  - EventStore.Core.Messages.UserManagementMessage.Create.#ctor(EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,System.String[],System.String)
  - EventStore.Core.Messages.UserManagementMessage.Create.FullName
  - EventStore.Core.Messages.UserManagementMessage.Create.Groups
  - EventStore.Core.Messages.UserManagementMessage.Create.MsgTypeId
  - EventStore.Core.Messages.UserManagementMessage.Create.Password
  langs:
  - csharp
  - vb
  name: UserManagementMessage.Create
  nameWithType: UserManagementMessage.Create
  fullName: EventStore.Core.Messages.UserManagementMessage.Create
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Messages/UserManagementMessage.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Create
    path: ../EventStore/src/EventStore.Core/Messages/UserManagementMessage.cs
    startLine: 55
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: 'public sealed class Create : UserManagementMessage.UserManagementRequestMessage'
    content.vb: >-
      Public NotInheritable Class Create
          Inherits UserManagementMessage.UserManagementRequestMessage
  inheritance:
  - System.Object
  - EventStore.Core.Messaging.Message
  - EventStore.Core.Messages.UserManagementMessage.RequestMessage
  - EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage
  inheritedMembers:
  - EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage.LoginName
  - EventStore.Core.Messages.UserManagementMessage.RequestMessage.Envelope
  - EventStore.Core.Messages.UserManagementMessage.RequestMessage.Principal
  - EventStore.Core.Messaging.Message.NextMsgId
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Messages.UserManagementMessage.Create.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Messages.UserManagementMessage.Create.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: EventStore.Core.Messages.UserManagementMessage.Create.MsgTypeId
  commentId: P:EventStore.Core.Messages.UserManagementMessage.Create.MsgTypeId
  id: MsgTypeId
  parent: EventStore.Core.Messages.UserManagementMessage.Create
  langs:
  - csharp
  - vb
  name: MsgTypeId
  nameWithType: UserManagementMessage.Create.MsgTypeId
  fullName: EventStore.Core.Messages.UserManagementMessage.Create.MsgTypeId
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Messages/UserManagementMessage.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: MsgTypeId
    path: ../EventStore/src/EventStore.Core/Messages/UserManagementMessage.cs
    startLine: 58
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public override int MsgTypeId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overrides ReadOnly Property MsgTypeId As Integer
  overridden: EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage.MsgTypeId
  overload: EventStore.Core.Messages.UserManagementMessage.Create.MsgTypeId*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: EventStore.Core.Messages.UserManagementMessage.Create.FullName
  commentId: F:EventStore.Core.Messages.UserManagementMessage.Create.FullName
  id: FullName
  parent: EventStore.Core.Messages.UserManagementMessage.Create
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: UserManagementMessage.Create.FullName
  fullName: EventStore.Core.Messages.UserManagementMessage.Create.FullName
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/UserManagementMessage.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: FullName
    path: ../EventStore/src/EventStore.Core/Messages/UserManagementMessage.cs
    startLine: 60
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly string FullName
    return:
      type: System.String
    content.vb: Public ReadOnly FullName As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.UserManagementMessage.Create.Groups
  commentId: F:EventStore.Core.Messages.UserManagementMessage.Create.Groups
  id: Groups
  parent: EventStore.Core.Messages.UserManagementMessage.Create
  langs:
  - csharp
  - vb
  name: Groups
  nameWithType: UserManagementMessage.Create.Groups
  fullName: EventStore.Core.Messages.UserManagementMessage.Create.Groups
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/UserManagementMessage.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Groups
    path: ../EventStore/src/EventStore.Core/Messages/UserManagementMessage.cs
    startLine: 61
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly string[] Groups
    return:
      type: System.String[]
    content.vb: Public ReadOnly Groups As String()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.UserManagementMessage.Create.Password
  commentId: F:EventStore.Core.Messages.UserManagementMessage.Create.Password
  id: Password
  parent: EventStore.Core.Messages.UserManagementMessage.Create
  langs:
  - csharp
  - vb
  name: Password
  nameWithType: UserManagementMessage.Create.Password
  fullName: EventStore.Core.Messages.UserManagementMessage.Create.Password
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Messages/UserManagementMessage.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Password
    path: ../EventStore/src/EventStore.Core/Messages/UserManagementMessage.cs
    startLine: 62
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public readonly string Password
    return:
      type: System.String
    content.vb: Public ReadOnly Password As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Messages.UserManagementMessage.Create.#ctor(EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,System.String[],System.String)
  commentId: M:EventStore.Core.Messages.UserManagementMessage.Create.#ctor(EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,System.String[],System.String)
  id: '#ctor(EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,System.String[],System.String)'
  parent: EventStore.Core.Messages.UserManagementMessage.Create
  langs:
  - csharp
  - vb
  name: Create(IEnvelope, IPrincipal, String, String, String[], String)
  nameWithType: UserManagementMessage.Create.Create(IEnvelope, IPrincipal, String, String, String[], String)
  fullName: EventStore.Core.Messages.UserManagementMessage.Create.Create(EventStore.Core.Messaging.IEnvelope, IPrincipal, System.String, System.String, System.String[], System.String)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Messages/UserManagementMessage.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Messages/UserManagementMessage.cs
    startLine: 64
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Messages
  syntax:
    content: public Create(IEnvelope envelope, IPrincipal principal, string loginName, string fullName, string[] groups, string password)
    parameters:
    - id: envelope
      type: EventStore.Core.Messaging.IEnvelope
    - id: principal
      type: IPrincipal
    - id: loginName
      type: System.String
    - id: fullName
      type: System.String
    - id: groups
      type: System.String[]
    - id: password
      type: System.String
    content.vb: Public Sub New(envelope As IEnvelope, principal As IPrincipal, loginName As String, fullName As String, groups As String(), password As String)
  overload: EventStore.Core.Messages.UserManagementMessage.Create.#ctor*
  nameWithType.vb: UserManagementMessage.Create.Create(IEnvelope, IPrincipal, String, String, String(), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Messages.UserManagementMessage.Create.Create(EventStore.Core.Messaging.IEnvelope, IPrincipal, System.String, System.String, System.String(), System.String)
  name.vb: Create(IEnvelope, IPrincipal, String, String, String(), String)
references:
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messages.UserManagementMessage.RequestMessage
  commentId: T:EventStore.Core.Messages.UserManagementMessage.RequestMessage
  parent: EventStore.Core.Messages
  name: UserManagementMessage.RequestMessage
  nameWithType: UserManagementMessage.RequestMessage
  fullName: EventStore.Core.Messages.UserManagementMessage.RequestMessage
- uid: EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage
  commentId: T:EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage
  parent: EventStore.Core.Messages
  name: UserManagementMessage.UserManagementRequestMessage
  nameWithType: UserManagementMessage.UserManagementRequestMessage
  fullName: EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage
- uid: EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage.LoginName
  commentId: F:EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage.LoginName
  parent: EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage
  name: LoginName
  nameWithType: UserManagementMessage.UserManagementRequestMessage.LoginName
  fullName: EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage.LoginName
- uid: EventStore.Core.Messages.UserManagementMessage.RequestMessage.Envelope
  commentId: F:EventStore.Core.Messages.UserManagementMessage.RequestMessage.Envelope
  parent: EventStore.Core.Messages.UserManagementMessage.RequestMessage
  name: Envelope
  nameWithType: UserManagementMessage.RequestMessage.Envelope
  fullName: EventStore.Core.Messages.UserManagementMessage.RequestMessage.Envelope
- uid: EventStore.Core.Messages.UserManagementMessage.RequestMessage.Principal
  commentId: F:EventStore.Core.Messages.UserManagementMessage.RequestMessage.Principal
  parent: EventStore.Core.Messages.UserManagementMessage.RequestMessage
  name: Principal
  nameWithType: UserManagementMessage.RequestMessage.Principal
  fullName: EventStore.Core.Messages.UserManagementMessage.RequestMessage.Principal
- uid: EventStore.Core.Messaging.Message.NextMsgId
  commentId: F:EventStore.Core.Messaging.Message.NextMsgId
  parent: EventStore.Core.Messaging.Message
  name: NextMsgId
  nameWithType: Message.NextMsgId
  fullName: EventStore.Core.Messaging.Message.NextMsgId
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.UserManagementMessage.Create.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<UserManagementMessage.Create>()
  nameWithType: ProtobufExtensions.Serialize<UserManagementMessage.Create>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.UserManagementMessage.Create>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of UserManagementMessage.Create)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.UserManagementMessage.Create)()
  name.vb: Serialize(Of UserManagementMessage.Create)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<UserManagementMessage.Create>
    nameWithType: ProtobufExtensions.Serialize<UserManagementMessage.Create>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Messages.UserManagementMessage.Create>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of UserManagementMessage.Create)
    nameWithType: ProtobufExtensions.Serialize(Of UserManagementMessage.Create)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Messages.UserManagementMessage.Create)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.UserManagementMessage.Create.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<UserManagementMessage.Create>()
  nameWithType: ProtobufExtensions.SerializeToArray<UserManagementMessage.Create>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.UserManagementMessage.Create>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of UserManagementMessage.Create)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.UserManagementMessage.Create)()
  name.vb: SerializeToArray(Of UserManagementMessage.Create)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<UserManagementMessage.Create>
    nameWithType: ProtobufExtensions.SerializeToArray<UserManagementMessage.Create>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Messages.UserManagementMessage.Create>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of UserManagementMessage.Create)
    nameWithType: ProtobufExtensions.SerializeToArray(Of UserManagementMessage.Create)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Messages.UserManagementMessage.Create)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage.MsgTypeId
  commentId: P:EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage.MsgTypeId
  parent: EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage
  name: MsgTypeId
  nameWithType: UserManagementMessage.UserManagementRequestMessage.MsgTypeId
  fullName: EventStore.Core.Messages.UserManagementMessage.UserManagementRequestMessage.MsgTypeId
- uid: EventStore.Core.Messages.UserManagementMessage.Create.MsgTypeId*
  commentId: Overload:EventStore.Core.Messages.UserManagementMessage.Create.MsgTypeId
  name: MsgTypeId
  nameWithType: UserManagementMessage.Create.MsgTypeId
  fullName: EventStore.Core.Messages.UserManagementMessage.Create.MsgTypeId
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Messages.UserManagementMessage.Create.#ctor*
  commentId: Overload:EventStore.Core.Messages.UserManagementMessage.Create.#ctor
  name: Create
  nameWithType: UserManagementMessage.Create.Create
  fullName: EventStore.Core.Messages.UserManagementMessage.Create.Create
- uid: EventStore.Core.Messaging.IEnvelope
  commentId: T:EventStore.Core.Messaging.IEnvelope
  parent: EventStore.Core.Messaging
  name: IEnvelope
  nameWithType: IEnvelope
  fullName: EventStore.Core.Messaging.IEnvelope
- uid: IPrincipal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: IPrincipal

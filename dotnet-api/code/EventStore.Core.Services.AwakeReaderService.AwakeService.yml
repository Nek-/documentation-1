### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.AwakeReaderService.AwakeService
  commentId: T:EventStore.Core.Services.AwakeReaderService.AwakeService
  id: AwakeService
  parent: EventStore.Core.Services.AwakeReaderService
  children:
  - EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Messages.StorageMessage.EventCommitted)
  - EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord)
  - EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)
  - EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake)
  langs:
  - csharp
  - vb
  name: AwakeService
  nameWithType: AwakeService
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeService
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/AwakeReaderService/AwakeService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AwakeService
    path: ../EventStore/src/EventStore.Core/Services/AwakeReaderService/AwakeService.cs
    startLine: 7
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.AwakeReaderService
  syntax:
    content: 'public class AwakeService : object, IHandle<AwakeServiceMessage.SubscribeAwake>, IHandle<AwakeServiceMessage.UnsubscribeAwake>, IHandle<StorageMessage.EventCommitted>, IHandle<StorageMessage.TfEofAtNonCommitRecord>'
    content.vb: >-
      Public Class AwakeService
          Inherits Object
          Implements IHandle(Of AwakeServiceMessage.SubscribeAwake), IHandle(Of AwakeServiceMessage.UnsubscribeAwake), IHandle(Of StorageMessage.EventCommitted), IHandle(Of StorageMessage.TfEofAtNonCommitRecord)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.EventCommitted}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.AwakeReaderService.AwakeService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.AwakeReaderService.AwakeService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)
  commentId: M:EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)
  id: Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)
  parent: EventStore.Core.Services.AwakeReaderService.AwakeService
  langs:
  - csharp
  - vb
  name: Handle(AwakeServiceMessage.SubscribeAwake)
  nameWithType: AwakeService.Handle(AwakeServiceMessage.SubscribeAwake)
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/AwakeReaderService/AwakeService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/AwakeReaderService/AwakeService.cs
    startLine: 46
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.AwakeReaderService
  syntax:
    content: public void Handle(AwakeServiceMessage.SubscribeAwake message)
    parameters:
    - id: message
      type: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
    content.vb: Public Sub Handle(message As AwakeServiceMessage.SubscribeAwake)
  overload: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake}.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Messages.StorageMessage.EventCommitted)
  commentId: M:EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Messages.StorageMessage.EventCommitted)
  id: Handle(EventStore.Core.Messages.StorageMessage.EventCommitted)
  parent: EventStore.Core.Services.AwakeReaderService.AwakeService
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.EventCommitted)
  nameWithType: AwakeService.Handle(StorageMessage.EventCommitted)
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Messages.StorageMessage.EventCommitted)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/AwakeReaderService/AwakeService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/AwakeReaderService/AwakeService.cs
    startLine: 65
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.AwakeReaderService
  syntax:
    content: public void Handle(StorageMessage.EventCommitted message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.EventCommitted
    content.vb: Public Sub Handle(message As StorageMessage.EventCommitted)
  overload: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.EventCommitted}.Handle(EventStore.Core.Messages.StorageMessage.EventCommitted)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake)
  commentId: M:EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake)
  id: Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake)
  parent: EventStore.Core.Services.AwakeReaderService.AwakeService
  langs:
  - csharp
  - vb
  name: Handle(AwakeServiceMessage.UnsubscribeAwake)
  nameWithType: AwakeService.Handle(AwakeServiceMessage.UnsubscribeAwake)
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/AwakeReaderService/AwakeService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/AwakeReaderService/AwakeService.cs
    startLine: 102
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.AwakeReaderService
  syntax:
    content: public void Handle(AwakeServiceMessage.UnsubscribeAwake message)
    parameters:
    - id: message
      type: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake
    content.vb: Public Sub Handle(message As AwakeServiceMessage.UnsubscribeAwake)
  overload: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake}.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord)
  commentId: M:EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord)
  id: Handle(EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord)
  parent: EventStore.Core.Services.AwakeReaderService.AwakeService
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.TfEofAtNonCommitRecord)
  nameWithType: AwakeService.Handle(StorageMessage.TfEofAtNonCommitRecord)
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle(EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/AwakeReaderService/AwakeService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/AwakeReaderService/AwakeService.cs
    startLine: 111
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.AwakeReaderService
  syntax:
    content: public void Handle(StorageMessage.TfEofAtNonCommitRecord message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord
    content.vb: Public Sub Handle(message As StorageMessage.TfEofAtNonCommitRecord)
  overload: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord}.Handle(EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.AwakeReaderService
  commentId: N:EventStore.Core.Services.AwakeReaderService
  name: EventStore.Core.Services.AwakeReaderService
  nameWithType: EventStore.Core.Services.AwakeReaderService
  fullName: EventStore.Core.Services.AwakeReaderService
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<AwakeServiceMessage.SubscribeAwake>
  nameWithType: IHandle<AwakeServiceMessage.SubscribeAwake>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake>
  nameWithType.vb: IHandle(Of AwakeServiceMessage.SubscribeAwake)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)
  name.vb: IHandle(Of AwakeServiceMessage.SubscribeAwake)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
    name: AwakeServiceMessage.SubscribeAwake
    nameWithType: AwakeServiceMessage.SubscribeAwake
    fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
    name: AwakeServiceMessage.SubscribeAwake
    nameWithType: AwakeServiceMessage.SubscribeAwake
    fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<AwakeServiceMessage.UnsubscribeAwake>
  nameWithType: IHandle<AwakeServiceMessage.UnsubscribeAwake>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake>
  nameWithType.vb: IHandle(Of AwakeServiceMessage.UnsubscribeAwake)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake)
  name.vb: IHandle(Of AwakeServiceMessage.UnsubscribeAwake)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake
    name: AwakeServiceMessage.UnsubscribeAwake
    nameWithType: AwakeServiceMessage.UnsubscribeAwake
    fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake
    name: AwakeServiceMessage.UnsubscribeAwake
    nameWithType: AwakeServiceMessage.UnsubscribeAwake
    fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.EventCommitted}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.EventCommitted}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.EventCommitted>
  nameWithType: IHandle<StorageMessage.EventCommitted>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.EventCommitted>
  nameWithType.vb: IHandle(Of StorageMessage.EventCommitted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.EventCommitted)
  name.vb: IHandle(Of StorageMessage.EventCommitted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.EventCommitted
    name: StorageMessage.EventCommitted
    nameWithType: StorageMessage.EventCommitted
    fullName: EventStore.Core.Messages.StorageMessage.EventCommitted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.EventCommitted
    name: StorageMessage.EventCommitted
    nameWithType: StorageMessage.EventCommitted
    fullName: EventStore.Core.Messages.StorageMessage.EventCommitted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.TfEofAtNonCommitRecord>
  nameWithType: IHandle<StorageMessage.TfEofAtNonCommitRecord>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord>
  nameWithType.vb: IHandle(Of StorageMessage.TfEofAtNonCommitRecord)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord)
  name.vb: IHandle(Of StorageMessage.TfEofAtNonCommitRecord)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord
    name: StorageMessage.TfEofAtNonCommitRecord
    nameWithType: StorageMessage.TfEofAtNonCommitRecord
    fullName: EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord
    name: StorageMessage.TfEofAtNonCommitRecord
    nameWithType: StorageMessage.TfEofAtNonCommitRecord
    fullName: EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.AwakeReaderService.AwakeService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<AwakeService>()
  nameWithType: ProtobufExtensions.Serialize<AwakeService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.AwakeReaderService.AwakeService>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of AwakeService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.AwakeReaderService.AwakeService)()
  name.vb: Serialize(Of AwakeService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<AwakeService>
    nameWithType: ProtobufExtensions.Serialize<AwakeService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.AwakeReaderService.AwakeService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of AwakeService)
    nameWithType: ProtobufExtensions.Serialize(Of AwakeService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.AwakeReaderService.AwakeService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.AwakeReaderService.AwakeService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<AwakeService>()
  nameWithType: ProtobufExtensions.SerializeToArray<AwakeService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.AwakeReaderService.AwakeService>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of AwakeService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.AwakeReaderService.AwakeService)()
  name.vb: SerializeToArray(Of AwakeService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<AwakeService>
    nameWithType: ProtobufExtensions.SerializeToArray<AwakeService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.AwakeReaderService.AwakeService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of AwakeService)
    nameWithType: ProtobufExtensions.SerializeToArray(Of AwakeService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.AwakeReaderService.AwakeService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle*
  commentId: Overload:EventStore.Core.Services.AwakeReaderService.AwakeService.Handle
  name: Handle
  nameWithType: AwakeService.Handle
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeService.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake}.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake}.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(AwakeServiceMessage.SubscribeAwake)
  nameWithType: IHandle<AwakeServiceMessage.SubscribeAwake>.Handle(AwakeServiceMessage.SubscribeAwake)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake>.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)
  nameWithType.vb: IHandle(Of AwakeServiceMessage.SubscribeAwake).Handle(AwakeServiceMessage.SubscribeAwake)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake).Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<AwakeServiceMessage.SubscribeAwake>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
    name: AwakeServiceMessage.SubscribeAwake
    nameWithType: AwakeServiceMessage.SubscribeAwake
    fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of AwakeServiceMessage.SubscribeAwake).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
    name: AwakeServiceMessage.SubscribeAwake
    nameWithType: AwakeServiceMessage.SubscribeAwake
    fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  commentId: T:EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
  parent: EventStore.Core.Services.AwakeReaderService
  name: AwakeServiceMessage.SubscribeAwake
  nameWithType: AwakeServiceMessage.SubscribeAwake
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.SubscribeAwake
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.EventCommitted}.Handle(EventStore.Core.Messages.StorageMessage.EventCommitted)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.EventCommitted}.Handle(EventStore.Core.Messages.StorageMessage.EventCommitted)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.EventCommitted}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.EventCommitted)
  nameWithType: IHandle<StorageMessage.EventCommitted>.Handle(StorageMessage.EventCommitted)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.EventCommitted>.Handle(EventStore.Core.Messages.StorageMessage.EventCommitted)
  nameWithType.vb: IHandle(Of StorageMessage.EventCommitted).Handle(StorageMessage.EventCommitted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.EventCommitted).Handle(EventStore.Core.Messages.StorageMessage.EventCommitted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.EventCommitted>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.EventCommitted>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.EventCommitted
    name: StorageMessage.EventCommitted
    nameWithType: StorageMessage.EventCommitted
    fullName: EventStore.Core.Messages.StorageMessage.EventCommitted
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.EventCommitted).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.EventCommitted).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.EventCommitted
    name: StorageMessage.EventCommitted
    nameWithType: StorageMessage.EventCommitted
    fullName: EventStore.Core.Messages.StorageMessage.EventCommitted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.EventCommitted
  commentId: T:EventStore.Core.Messages.StorageMessage.EventCommitted
  parent: EventStore.Core.Messages
  name: StorageMessage.EventCommitted
  nameWithType: StorageMessage.EventCommitted
  fullName: EventStore.Core.Messages.StorageMessage.EventCommitted
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake}.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake}.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(AwakeServiceMessage.UnsubscribeAwake)
  nameWithType: IHandle<AwakeServiceMessage.UnsubscribeAwake>.Handle(AwakeServiceMessage.UnsubscribeAwake)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake>.Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake)
  nameWithType.vb: IHandle(Of AwakeServiceMessage.UnsubscribeAwake).Handle(AwakeServiceMessage.UnsubscribeAwake)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake).Handle(EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<AwakeServiceMessage.UnsubscribeAwake>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake
    name: AwakeServiceMessage.UnsubscribeAwake
    nameWithType: AwakeServiceMessage.UnsubscribeAwake
    fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of AwakeServiceMessage.UnsubscribeAwake).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake
    name: AwakeServiceMessage.UnsubscribeAwake
    nameWithType: AwakeServiceMessage.UnsubscribeAwake
    fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake
  commentId: T:EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake
  parent: EventStore.Core.Services.AwakeReaderService
  name: AwakeServiceMessage.UnsubscribeAwake
  nameWithType: AwakeServiceMessage.UnsubscribeAwake
  fullName: EventStore.Core.Services.AwakeReaderService.AwakeServiceMessage.UnsubscribeAwake
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord}.Handle(EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord}.Handle(EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.TfEofAtNonCommitRecord)
  nameWithType: IHandle<StorageMessage.TfEofAtNonCommitRecord>.Handle(StorageMessage.TfEofAtNonCommitRecord)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord>.Handle(EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord)
  nameWithType.vb: IHandle(Of StorageMessage.TfEofAtNonCommitRecord).Handle(StorageMessage.TfEofAtNonCommitRecord)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord).Handle(EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.TfEofAtNonCommitRecord>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord
    name: StorageMessage.TfEofAtNonCommitRecord
    nameWithType: StorageMessage.TfEofAtNonCommitRecord
    fullName: EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.TfEofAtNonCommitRecord).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord
    name: StorageMessage.TfEofAtNonCommitRecord
    nameWithType: StorageMessage.TfEofAtNonCommitRecord
    fullName: EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord
  commentId: T:EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord
  parent: EventStore.Core.Messages
  name: StorageMessage.TfEofAtNonCommitRecord
  nameWithType: StorageMessage.TfEofAtNonCommitRecord
  fullName: EventStore.Core.Messages.StorageMessage.TfEofAtNonCommitRecord

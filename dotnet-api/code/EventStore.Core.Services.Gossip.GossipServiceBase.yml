### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Gossip.GossipServiceBase
  commentId: T:EventStore.Core.Services.Gossip.GossipServiceBase
  id: GossipServiceBase
  parent: EventStore.Core.Services.Gossip
  children:
  - EventStore.Core.Services.Gossip.GossipServiceBase.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Gossip.IGossipSeedSource,EventStore.Core.Data.VNodeInfo,System.TimeSpan,System.TimeSpan)
  - EventStore.Core.Services.Gossip.GossipServiceBase.CurrentMaster
  - EventStore.Core.Services.Gossip.GossipServiceBase.CurrentRole
  - EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe
  - EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  - EventStore.Core.Services.Gossip.GossipServiceBase.NodeInfo
  langs:
  - csharp
  - vb
  name: GossipServiceBase
  nameWithType: GossipServiceBase
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase
  type: Class
  source:
    id: GossipServiceBase
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 15
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: 'public abstract class GossipServiceBase : IHandle<SystemMessage.SystemInit>, IHandle<GossipMessage.RetrieveGossipSeedSources>, IHandle<GossipMessage.GotGossipSeedSources>, IHandle<GossipMessage.Gossip>, IHandle<GossipMessage.GossipReceived>, IHandle<SystemMessage.StateChangeMessage>, IHandle<GossipMessage.GossipSendFailed>, IHandle<SystemMessage.VNodeConnectionLost>, IHandle<SystemMessage.VNodeConnectionEstablished>'
    content.vb: >-
      Public MustInherit Class GossipServiceBase
          Implements IHandle(Of SystemMessage.SystemInit), IHandle(Of GossipMessage.RetrieveGossipSeedSources), IHandle(Of GossipMessage.GotGossipSeedSources), IHandle(Of GossipMessage.Gossip), IHandle(Of GossipMessage.GossipReceived), IHandle(Of SystemMessage.StateChangeMessage), IHandle(Of GossipMessage.GossipSendFailed), IHandle(Of SystemMessage.VNodeConnectionLost), IHandle(Of SystemMessage.VNodeConnectionEstablished)
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.Core.Services.Gossip.NodeGossipService
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GotGossipSeedSources}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.Gossip}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipReceived}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipSendFailed}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionLost}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.Gossip.GossipServiceBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Gossip.GossipServiceBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.NodeInfo
  commentId: F:EventStore.Core.Services.Gossip.GossipServiceBase.NodeInfo
  id: NodeInfo
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: NodeInfo
  nameWithType: GossipServiceBase.NodeInfo
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.NodeInfo
  type: Field
  source:
    id: NodeInfo
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 30
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: protected readonly VNodeInfo NodeInfo
    return:
      type: EventStore.Core.Data.VNodeInfo
    content.vb: Protected ReadOnly NodeInfo As VNodeInfo
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.CurrentRole
  commentId: F:EventStore.Core.Services.Gossip.GossipServiceBase.CurrentRole
  id: CurrentRole
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: CurrentRole
  nameWithType: GossipServiceBase.CurrentRole
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.CurrentRole
  type: Field
  source:
    id: CurrentRole
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 31
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: protected VNodeState CurrentRole
    return:
      type: EventStore.Core.Data.VNodeState
    content.vb: Protected CurrentRole As VNodeState
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.CurrentMaster
  commentId: F:EventStore.Core.Services.Gossip.GossipServiceBase.CurrentMaster
  id: CurrentMaster
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: CurrentMaster
  nameWithType: GossipServiceBase.CurrentMaster
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.CurrentMaster
  type: Field
  source:
    id: CurrentMaster
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 32
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: protected VNodeInfo CurrentMaster
    return:
      type: EventStore.Core.Data.VNodeInfo
    content.vb: Protected CurrentMaster As VNodeInfo
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Gossip.IGossipSeedSource,EventStore.Core.Data.VNodeInfo,System.TimeSpan,System.TimeSpan)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Gossip.IGossipSeedSource,EventStore.Core.Data.VNodeInfo,System.TimeSpan,System.TimeSpan)
  id: '#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Gossip.IGossipSeedSource,EventStore.Core.Data.VNodeInfo,System.TimeSpan,System.TimeSpan)'
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: GossipServiceBase(IPublisher, IGossipSeedSource, VNodeInfo, TimeSpan, TimeSpan)
  nameWithType: GossipServiceBase.GossipServiceBase(IPublisher, IGossipSeedSource, VNodeInfo, TimeSpan, TimeSpan)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.GossipServiceBase(EventStore.Core.Bus.IPublisher, EventStore.Core.Services.Gossip.IGossipSeedSource, EventStore.Core.Data.VNodeInfo, System.TimeSpan, System.TimeSpan)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 44
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: protected GossipServiceBase(IPublisher bus, IGossipSeedSource gossipSeedSource, VNodeInfo nodeInfo, TimeSpan gossipInterval, TimeSpan allowedTimeDifference)
    parameters:
    - id: bus
      type: EventStore.Core.Bus.IPublisher
    - id: gossipSeedSource
      type: EventStore.Core.Services.Gossip.IGossipSeedSource
    - id: nodeInfo
      type: EventStore.Core.Data.VNodeInfo
    - id: gossipInterval
      type: System.TimeSpan
    - id: allowedTimeDifference
      type: System.TimeSpan
    content.vb: Protected Sub New(bus As IPublisher, gossipSeedSource As IGossipSeedSource, nodeInfo As VNodeInfo, gossipInterval As TimeSpan, allowedTimeDifference As TimeSpan)
  overload: EventStore.Core.Services.Gossip.GossipServiceBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe
  id: GetInitialMe
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: GetInitialMe()
  nameWithType: GossipServiceBase.GetInitialMe()
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe()
  type: Method
  source:
    id: GetInitialMe
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 62
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: protected abstract MemberInfo GetInitialMe()
    return:
      type: EventStore.Core.Cluster.MemberInfo
    content.vb: Protected MustOverride Function GetInitialMe As MemberInfo
  overload: EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  id: GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: GetUpdatedMe(MemberInfo)
  nameWithType: GossipServiceBase.GetUpdatedMe(MemberInfo)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  type: Method
  source:
    id: GetUpdatedMe
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 63
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: protected abstract MemberInfo GetUpdatedMe(MemberInfo me)
    parameters:
    - id: me
      type: EventStore.Core.Cluster.MemberInfo
    return:
      type: EventStore.Core.Cluster.MemberInfo
    content.vb: Protected MustOverride Function GetUpdatedMe(me As MemberInfo) As MemberInfo
  overload: EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  id: Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.SystemInit)
  nameWithType: GossipServiceBase.Handle(SystemMessage.SystemInit)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 65
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: public void Handle(SystemMessage.SystemInit message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.SystemInit
    content.vb: Public Sub Handle(message As SystemMessage.SystemInit)
  overload: EventStore.Core.Services.Gossip.GossipServiceBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  id: Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: Handle(GossipMessage.RetrieveGossipSeedSources)
  nameWithType: GossipServiceBase.Handle(GossipMessage.RetrieveGossipSeedSources)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 72
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: public void Handle(GossipMessage.RetrieveGossipSeedSources message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
    content.vb: Public Sub Handle(message As GossipMessage.RetrieveGossipSeedSources)
  overload: EventStore.Core.Services.Gossip.GossipServiceBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources}.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  id: Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: Handle(GossipMessage.GotGossipSeedSources)
  nameWithType: GossipServiceBase.Handle(GossipMessage.GotGossipSeedSources)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 94
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: public void Handle(GossipMessage.GotGossipSeedSources message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
    content.vb: Public Sub Handle(message As GossipMessage.GotGossipSeedSources)
  overload: EventStore.Core.Services.Gossip.GossipServiceBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GotGossipSeedSources}.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  id: Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: Handle(GossipMessage.Gossip)
  nameWithType: GossipServiceBase.Handle(GossipMessage.Gossip)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 107
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: public void Handle(GossipMessage.Gossip message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.GossipMessage.Gossip
    content.vb: Public Sub Handle(message As GossipMessage.Gossip)
  overload: EventStore.Core.Services.Gossip.GossipServiceBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.Gossip}.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  id: Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: Handle(GossipMessage.GossipReceived)
  nameWithType: GossipServiceBase.Handle(GossipMessage.GossipReceived)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 136
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: public void Handle(GossipMessage.GossipReceived message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.GossipMessage.GossipReceived
    content.vb: Public Sub Handle(message As GossipMessage.GossipReceived)
  overload: EventStore.Core.Services.Gossip.GossipServiceBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipReceived}.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  id: Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: GossipServiceBase.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 153
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: public void Handle(SystemMessage.StateChangeMessage message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    content.vb: Public Sub Handle(message As SystemMessage.StateChangeMessage)
  overload: EventStore.Core.Services.Gossip.GossipServiceBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  id: Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: Handle(GossipMessage.GossipSendFailed)
  nameWithType: GossipServiceBase.Handle(GossipMessage.GossipSendFailed)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 164
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: public void Handle(GossipMessage.GossipSendFailed message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.GossipMessage.GossipSendFailed
    content.vb: Public Sub Handle(message As GossipMessage.GossipSendFailed)
  overload: EventStore.Core.Services.Gossip.GossipServiceBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipSendFailed}.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  id: Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.VNodeConnectionLost)
  nameWithType: GossipServiceBase.Handle(SystemMessage.VNodeConnectionLost)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 185
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: public void Handle(SystemMessage.VNodeConnectionLost message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
    content.vb: Public Sub Handle(message As SystemMessage.VNodeConnectionLost)
  overload: EventStore.Core.Services.Gossip.GossipServiceBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionLost}.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  id: Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.VNodeConnectionEstablished)
  nameWithType: GossipServiceBase.Handle(SystemMessage.VNodeConnectionEstablished)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
    startLine: 200
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: public void Handle(SystemMessage.VNodeConnectionEstablished message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
    content.vb: Public Sub Handle(message As SystemMessage.VNodeConnectionEstablished)
  overload: EventStore.Core.Services.Gossip.GossipServiceBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished}.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.Gossip
  commentId: N:EventStore.Core.Services.Gossip
  name: EventStore.Core.Services.Gossip
  nameWithType: EventStore.Core.Services.Gossip
  fullName: EventStore.Core.Services.Gossip
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.SystemInit>
  nameWithType: IHandle<SystemMessage.SystemInit>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>
  nameWithType.vb: IHandle(Of SystemMessage.SystemInit)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SystemInit)
  name.vb: IHandle(Of SystemMessage.SystemInit)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<GossipMessage.RetrieveGossipSeedSources>
  nameWithType: IHandle<GossipMessage.RetrieveGossipSeedSources>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources>
  nameWithType.vb: IHandle(Of GossipMessage.RetrieveGossipSeedSources)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  name.vb: IHandle(Of GossipMessage.RetrieveGossipSeedSources)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
    name: GossipMessage.RetrieveGossipSeedSources
    nameWithType: GossipMessage.RetrieveGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
    name: GossipMessage.RetrieveGossipSeedSources
    nameWithType: GossipMessage.RetrieveGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GotGossipSeedSources}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GotGossipSeedSources}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<GossipMessage.GotGossipSeedSources>
  nameWithType: IHandle<GossipMessage.GotGossipSeedSources>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.GotGossipSeedSources>
  nameWithType.vb: IHandle(Of GossipMessage.GotGossipSeedSources)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  name.vb: IHandle(Of GossipMessage.GotGossipSeedSources)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
    name: GossipMessage.GotGossipSeedSources
    nameWithType: GossipMessage.GotGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
    name: GossipMessage.GotGossipSeedSources
    nameWithType: GossipMessage.GotGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.Gossip}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.Gossip}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<GossipMessage.Gossip>
  nameWithType: IHandle<GossipMessage.Gossip>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.Gossip>
  nameWithType.vb: IHandle(Of GossipMessage.Gossip)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.Gossip)
  name.vb: IHandle(Of GossipMessage.Gossip)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.GossipMessage.Gossip
    name: GossipMessage.Gossip
    nameWithType: GossipMessage.Gossip
    fullName: EventStore.Core.Messages.GossipMessage.Gossip
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.GossipMessage.Gossip
    name: GossipMessage.Gossip
    nameWithType: GossipMessage.Gossip
    fullName: EventStore.Core.Messages.GossipMessage.Gossip
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipReceived}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipReceived}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<GossipMessage.GossipReceived>
  nameWithType: IHandle<GossipMessage.GossipReceived>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.GossipReceived>
  nameWithType.vb: IHandle(Of GossipMessage.GossipReceived)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.GossipReceived)
  name.vb: IHandle(Of GossipMessage.GossipReceived)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.GossipMessage.GossipReceived
    name: GossipMessage.GossipReceived
    nameWithType: GossipMessage.GossipReceived
    fullName: EventStore.Core.Messages.GossipMessage.GossipReceived
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.GossipMessage.GossipReceived
    name: GossipMessage.GossipReceived
    nameWithType: GossipMessage.GossipReceived
    fullName: EventStore.Core.Messages.GossipMessage.GossipReceived
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.StateChangeMessage>
  nameWithType: IHandle<SystemMessage.StateChangeMessage>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  name.vb: IHandle(Of SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipSendFailed}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipSendFailed}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<GossipMessage.GossipSendFailed>
  nameWithType: IHandle<GossipMessage.GossipSendFailed>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.GossipSendFailed>
  nameWithType.vb: IHandle(Of GossipMessage.GossipSendFailed)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  name.vb: IHandle(Of GossipMessage.GossipSendFailed)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.GossipMessage.GossipSendFailed
    name: GossipMessage.GossipSendFailed
    nameWithType: GossipMessage.GossipSendFailed
    fullName: EventStore.Core.Messages.GossipMessage.GossipSendFailed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.GossipMessage.GossipSendFailed
    name: GossipMessage.GossipSendFailed
    nameWithType: GossipMessage.GossipSendFailed
    fullName: EventStore.Core.Messages.GossipMessage.GossipSendFailed
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionLost}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionLost}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.VNodeConnectionLost>
  nameWithType: IHandle<SystemMessage.VNodeConnectionLost>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.VNodeConnectionLost>
  nameWithType.vb: IHandle(Of SystemMessage.VNodeConnectionLost)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  name.vb: IHandle(Of SystemMessage.VNodeConnectionLost)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
    name: SystemMessage.VNodeConnectionLost
    nameWithType: SystemMessage.VNodeConnectionLost
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
    name: SystemMessage.VNodeConnectionLost
    nameWithType: SystemMessage.VNodeConnectionLost
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.VNodeConnectionEstablished>
  nameWithType: IHandle<SystemMessage.VNodeConnectionEstablished>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished>
  nameWithType.vb: IHandle(Of SystemMessage.VNodeConnectionEstablished)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  name.vb: IHandle(Of SystemMessage.VNodeConnectionEstablished)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
    name: SystemMessage.VNodeConnectionEstablished
    nameWithType: SystemMessage.VNodeConnectionEstablished
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
    name: SystemMessage.VNodeConnectionEstablished
    nameWithType: SystemMessage.VNodeConnectionEstablished
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<GossipServiceBase>()
  nameWithType: ProtobufExtensions.Serialize<GossipServiceBase>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Gossip.GossipServiceBase>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of GossipServiceBase)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Gossip.GossipServiceBase)()
  name.vb: Serialize(Of GossipServiceBase)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<GossipServiceBase>
    nameWithType: ProtobufExtensions.Serialize<GossipServiceBase>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Gossip.GossipServiceBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of GossipServiceBase)
    nameWithType: ProtobufExtensions.Serialize(Of GossipServiceBase)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Gossip.GossipServiceBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<GossipServiceBase>()
  nameWithType: ProtobufExtensions.SerializeToArray<GossipServiceBase>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Gossip.GossipServiceBase>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of GossipServiceBase)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Gossip.GossipServiceBase)()
  name.vb: SerializeToArray(Of GossipServiceBase)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<GossipServiceBase>
    nameWithType: ProtobufExtensions.SerializeToArray<GossipServiceBase>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Gossip.GossipServiceBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of GossipServiceBase)
    nameWithType: ProtobufExtensions.SerializeToArray(Of GossipServiceBase)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Gossip.GossipServiceBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Data.VNodeInfo
  commentId: T:EventStore.Core.Data.VNodeInfo
  parent: EventStore.Core.Data
  name: VNodeInfo
  nameWithType: VNodeInfo
  fullName: EventStore.Core.Data.VNodeInfo
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: EventStore.Core.Data.VNodeState
  commentId: T:EventStore.Core.Data.VNodeState
  parent: EventStore.Core.Data
  name: VNodeState
  nameWithType: VNodeState
  fullName: EventStore.Core.Data.VNodeState
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.#ctor*
  commentId: Overload:EventStore.Core.Services.Gossip.GossipServiceBase.#ctor
  name: GossipServiceBase
  nameWithType: GossipServiceBase.GossipServiceBase
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.GossipServiceBase
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.Services.Gossip.IGossipSeedSource
  commentId: T:EventStore.Core.Services.Gossip.IGossipSeedSource
  parent: EventStore.Core.Services.Gossip
  name: IGossipSeedSource
  nameWithType: IGossipSeedSource
  fullName: EventStore.Core.Services.Gossip.IGossipSeedSource
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe*
  commentId: Overload:EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe
  name: GetInitialMe
  nameWithType: GossipServiceBase.GetInitialMe
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe
- uid: EventStore.Core.Cluster.MemberInfo
  commentId: T:EventStore.Core.Cluster.MemberInfo
  parent: EventStore.Core.Cluster
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: EventStore.Core.Cluster.MemberInfo
- uid: EventStore.Core.Cluster
  commentId: N:EventStore.Core.Cluster
  name: EventStore.Core.Cluster
  nameWithType: EventStore.Core.Cluster
  fullName: EventStore.Core.Cluster
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe*
  commentId: Overload:EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe
  name: GetUpdatedMe
  nameWithType: GossipServiceBase.GetUpdatedMe
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle*
  commentId: Overload:EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  name: Handle
  nameWithType: GossipServiceBase.Handle
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.SystemInit)
  nameWithType: IHandle<SystemMessage.SystemInit>.Handle(SystemMessage.SystemInit)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  nameWithType.vb: IHandle(Of SystemMessage.SystemInit).Handle(SystemMessage.SystemInit)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SystemInit).Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.SystemInit>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.SystemInit).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SystemInit).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.SystemInit
  commentId: T:EventStore.Core.Messages.SystemMessage.SystemInit
  parent: EventStore.Core.Messages
  name: SystemMessage.SystemInit
  nameWithType: SystemMessage.SystemInit
  fullName: EventStore.Core.Messages.SystemMessage.SystemInit
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources}.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources}.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(GossipMessage.RetrieveGossipSeedSources)
  nameWithType: IHandle<GossipMessage.RetrieveGossipSeedSources>.Handle(GossipMessage.RetrieveGossipSeedSources)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources>.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  nameWithType.vb: IHandle(Of GossipMessage.RetrieveGossipSeedSources).Handle(GossipMessage.RetrieveGossipSeedSources)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources).Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<GossipMessage.RetrieveGossipSeedSources>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
    name: GossipMessage.RetrieveGossipSeedSources
    nameWithType: GossipMessage.RetrieveGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of GossipMessage.RetrieveGossipSeedSources).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
    name: GossipMessage.RetrieveGossipSeedSources
    nameWithType: GossipMessage.RetrieveGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
  commentId: T:EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
  parent: EventStore.Core.Messages
  name: GossipMessage.RetrieveGossipSeedSources
  nameWithType: GossipMessage.RetrieveGossipSeedSources
  fullName: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GotGossipSeedSources}.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GotGossipSeedSources}.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GotGossipSeedSources}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(GossipMessage.GotGossipSeedSources)
  nameWithType: IHandle<GossipMessage.GotGossipSeedSources>.Handle(GossipMessage.GotGossipSeedSources)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.GotGossipSeedSources>.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  nameWithType.vb: IHandle(Of GossipMessage.GotGossipSeedSources).Handle(GossipMessage.GotGossipSeedSources)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.GotGossipSeedSources).Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<GossipMessage.GotGossipSeedSources>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.GotGossipSeedSources>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
    name: GossipMessage.GotGossipSeedSources
    nameWithType: GossipMessage.GotGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of GossipMessage.GotGossipSeedSources).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.GotGossipSeedSources).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
    name: GossipMessage.GotGossipSeedSources
    nameWithType: GossipMessage.GotGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
  commentId: T:EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
  parent: EventStore.Core.Messages
  name: GossipMessage.GotGossipSeedSources
  nameWithType: GossipMessage.GotGossipSeedSources
  fullName: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.Gossip}.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.Gossip}.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.Gossip}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(GossipMessage.Gossip)
  nameWithType: IHandle<GossipMessage.Gossip>.Handle(GossipMessage.Gossip)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.Gossip>.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  nameWithType.vb: IHandle(Of GossipMessage.Gossip).Handle(GossipMessage.Gossip)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.Gossip).Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<GossipMessage.Gossip>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.Gossip>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.Gossip
    name: GossipMessage.Gossip
    nameWithType: GossipMessage.Gossip
    fullName: EventStore.Core.Messages.GossipMessage.Gossip
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of GossipMessage.Gossip).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.Gossip).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.Gossip
    name: GossipMessage.Gossip
    nameWithType: GossipMessage.Gossip
    fullName: EventStore.Core.Messages.GossipMessage.Gossip
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.GossipMessage.Gossip
  commentId: T:EventStore.Core.Messages.GossipMessage.Gossip
  parent: EventStore.Core.Messages
  name: GossipMessage.Gossip
  nameWithType: GossipMessage.Gossip
  fullName: EventStore.Core.Messages.GossipMessage.Gossip
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipReceived}.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipReceived}.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipReceived}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(GossipMessage.GossipReceived)
  nameWithType: IHandle<GossipMessage.GossipReceived>.Handle(GossipMessage.GossipReceived)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.GossipReceived>.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  nameWithType.vb: IHandle(Of GossipMessage.GossipReceived).Handle(GossipMessage.GossipReceived)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.GossipReceived).Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<GossipMessage.GossipReceived>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.GossipReceived>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.GossipReceived
    name: GossipMessage.GossipReceived
    nameWithType: GossipMessage.GossipReceived
    fullName: EventStore.Core.Messages.GossipMessage.GossipReceived
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of GossipMessage.GossipReceived).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.GossipReceived).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.GossipReceived
    name: GossipMessage.GossipReceived
    nameWithType: GossipMessage.GossipReceived
    fullName: EventStore.Core.Messages.GossipMessage.GossipReceived
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.GossipMessage.GossipReceived
  commentId: T:EventStore.Core.Messages.GossipMessage.GossipReceived
  parent: EventStore.Core.Messages
  name: GossipMessage.GossipReceived
  nameWithType: GossipMessage.GossipReceived
  fullName: EventStore.Core.Messages.GossipMessage.GossipReceived
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: IHandle<SystemMessage.StateChangeMessage>.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage).Handle(SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage).Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.StateChangeMessage>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.StateChangeMessage).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  commentId: T:EventStore.Core.Messages.SystemMessage.StateChangeMessage
  parent: EventStore.Core.Messages
  name: SystemMessage.StateChangeMessage
  nameWithType: SystemMessage.StateChangeMessage
  fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipSendFailed}.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipSendFailed}.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipSendFailed}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(GossipMessage.GossipSendFailed)
  nameWithType: IHandle<GossipMessage.GossipSendFailed>.Handle(GossipMessage.GossipSendFailed)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.GossipSendFailed>.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  nameWithType.vb: IHandle(Of GossipMessage.GossipSendFailed).Handle(GossipMessage.GossipSendFailed)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.GossipSendFailed).Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<GossipMessage.GossipSendFailed>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.GossipSendFailed>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.GossipSendFailed
    name: GossipMessage.GossipSendFailed
    nameWithType: GossipMessage.GossipSendFailed
    fullName: EventStore.Core.Messages.GossipMessage.GossipSendFailed
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of GossipMessage.GossipSendFailed).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.GossipSendFailed).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.GossipSendFailed
    name: GossipMessage.GossipSendFailed
    nameWithType: GossipMessage.GossipSendFailed
    fullName: EventStore.Core.Messages.GossipMessage.GossipSendFailed
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.GossipMessage.GossipSendFailed
  commentId: T:EventStore.Core.Messages.GossipMessage.GossipSendFailed
  parent: EventStore.Core.Messages
  name: GossipMessage.GossipSendFailed
  nameWithType: GossipMessage.GossipSendFailed
  fullName: EventStore.Core.Messages.GossipMessage.GossipSendFailed
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionLost}.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionLost}.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionLost}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.VNodeConnectionLost)
  nameWithType: IHandle<SystemMessage.VNodeConnectionLost>.Handle(SystemMessage.VNodeConnectionLost)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.VNodeConnectionLost>.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  nameWithType.vb: IHandle(Of SystemMessage.VNodeConnectionLost).Handle(SystemMessage.VNodeConnectionLost)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.VNodeConnectionLost).Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.VNodeConnectionLost>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.VNodeConnectionLost>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
    name: SystemMessage.VNodeConnectionLost
    nameWithType: SystemMessage.VNodeConnectionLost
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.VNodeConnectionLost).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.VNodeConnectionLost).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
    name: SystemMessage.VNodeConnectionLost
    nameWithType: SystemMessage.VNodeConnectionLost
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
  commentId: T:EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
  parent: EventStore.Core.Messages
  name: SystemMessage.VNodeConnectionLost
  nameWithType: SystemMessage.VNodeConnectionLost
  fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished}.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished}.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.VNodeConnectionEstablished)
  nameWithType: IHandle<SystemMessage.VNodeConnectionEstablished>.Handle(SystemMessage.VNodeConnectionEstablished)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished>.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  nameWithType.vb: IHandle(Of SystemMessage.VNodeConnectionEstablished).Handle(SystemMessage.VNodeConnectionEstablished)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished).Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.VNodeConnectionEstablished>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
    name: SystemMessage.VNodeConnectionEstablished
    nameWithType: SystemMessage.VNodeConnectionEstablished
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.VNodeConnectionEstablished).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
    name: SystemMessage.VNodeConnectionEstablished
    nameWithType: SystemMessage.VNodeConnectionEstablished
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
  commentId: T:EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
  parent: EventStore.Core.Messages
  name: SystemMessage.VNodeConnectionEstablished
  nameWithType: SystemMessage.VNodeConnectionEstablished
  fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished

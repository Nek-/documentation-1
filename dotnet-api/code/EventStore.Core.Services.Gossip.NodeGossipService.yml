### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Gossip.NodeGossipService
  commentId: T:EventStore.Core.Services.Gossip.NodeGossipService
  id: NodeGossipService
  parent: EventStore.Core.Services.Gossip
  children:
  - EventStore.Core.Services.Gossip.NodeGossipService.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Gossip.IGossipSeedSource,EventStore.Core.Data.VNodeInfo,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,EventStore.Core.Services.Storage.EpochManager.IEpochManager,Func{System.Int64},System.Int32,TimeSpan,TimeSpan)
  - EventStore.Core.Services.Gossip.NodeGossipService.GetInitialMe
  - EventStore.Core.Services.Gossip.NodeGossipService.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  langs:
  - csharp
  - vb
  name: NodeGossipService
  nameWithType: NodeGossipService
  fullName: EventStore.Core.Services.Gossip.NodeGossipService
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/Gossip/NodeGossipService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: NodeGossipService
    path: ../EventStore/src/EventStore.Core/Services/Gossip/NodeGossipService.cs
    startLine: 10
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: 'public class NodeGossipService : GossipServiceBase, IHandle<SystemMessage.SystemInit>, IHandle<GossipMessage.RetrieveGossipSeedSources>, IHandle<GossipMessage.GotGossipSeedSources>, IHandle<GossipMessage.Gossip>, IHandle<GossipMessage.GossipReceived>, IHandle<SystemMessage.StateChangeMessage>, IHandle<GossipMessage.GossipSendFailed>, IHandle<SystemMessage.VNodeConnectionLost>, IHandle<SystemMessage.VNodeConnectionEstablished>'
    content.vb: >-
      Public Class NodeGossipService
          Inherits GossipServiceBase
          Implements IHandle(Of SystemMessage.SystemInit), IHandle(Of GossipMessage.RetrieveGossipSeedSources), IHandle(Of GossipMessage.GotGossipSeedSources), IHandle(Of GossipMessage.Gossip), IHandle(Of GossipMessage.GossipReceived), IHandle(Of SystemMessage.StateChangeMessage), IHandle(Of GossipMessage.GossipSendFailed), IHandle(Of SystemMessage.VNodeConnectionLost), IHandle(Of SystemMessage.VNodeConnectionEstablished)
  inheritance:
  - System.Object
  - EventStore.Core.Services.Gossip.GossipServiceBase
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GotGossipSeedSources}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.Gossip}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipReceived}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipSendFailed}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionLost}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished}
  inheritedMembers:
  - EventStore.Core.Services.Gossip.GossipServiceBase.NodeInfo
  - EventStore.Core.Services.Gossip.GossipServiceBase.CurrentRole
  - EventStore.Core.Services.Gossip.GossipServiceBase.CurrentMaster
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  - EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.Gossip.NodeGossipService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Gossip.NodeGossipService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.Gossip.NodeGossipService.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Gossip.IGossipSeedSource,EventStore.Core.Data.VNodeInfo,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,EventStore.Core.Services.Storage.EpochManager.IEpochManager,Func{System.Int64},System.Int32,TimeSpan,TimeSpan)
  commentId: M:EventStore.Core.Services.Gossip.NodeGossipService.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Gossip.IGossipSeedSource,EventStore.Core.Data.VNodeInfo,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,EventStore.Core.Services.Storage.EpochManager.IEpochManager,Func{System.Int64},System.Int32,TimeSpan,TimeSpan)
  id: '#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Gossip.IGossipSeedSource,EventStore.Core.Data.VNodeInfo,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,EventStore.Core.Services.Storage.EpochManager.IEpochManager,Func{System.Int64},System.Int32,TimeSpan,TimeSpan)'
  parent: EventStore.Core.Services.Gossip.NodeGossipService
  langs:
  - csharp
  - vb
  name: NodeGossipService(IPublisher, IGossipSeedSource, VNodeInfo, ICheckpoint, ICheckpoint, IEpochManager, Func<Int64>, Int32, TimeSpan, TimeSpan)
  nameWithType: NodeGossipService.NodeGossipService(IPublisher, IGossipSeedSource, VNodeInfo, ICheckpoint, ICheckpoint, IEpochManager, Func<Int64>, Int32, TimeSpan, TimeSpan)
  fullName: EventStore.Core.Services.Gossip.NodeGossipService.NodeGossipService(EventStore.Core.Bus.IPublisher, EventStore.Core.Services.Gossip.IGossipSeedSource, EventStore.Core.Data.VNodeInfo, EventStore.Core.TransactionLog.Checkpoint.ICheckpoint, EventStore.Core.TransactionLog.Checkpoint.ICheckpoint, EventStore.Core.Services.Storage.EpochManager.IEpochManager, Func<System.Int64>, System.Int32, TimeSpan, TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/Gossip/NodeGossipService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/Gossip/NodeGossipService.cs
    startLine: 17
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: public NodeGossipService(IPublisher bus, IGossipSeedSource gossipSeedSource, VNodeInfo nodeInfo, ICheckpoint writerCheckpoint, ICheckpoint chaserCheckpoint, IEpochManager epochManager, Func<long> getLastCommitPosition, int nodePriority, TimeSpan interval, TimeSpan allowedTimeDifference)
    parameters:
    - id: bus
      type: EventStore.Core.Bus.IPublisher
    - id: gossipSeedSource
      type: EventStore.Core.Services.Gossip.IGossipSeedSource
    - id: nodeInfo
      type: EventStore.Core.Data.VNodeInfo
    - id: writerCheckpoint
      type: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
    - id: chaserCheckpoint
      type: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
    - id: epochManager
      type: EventStore.Core.Services.Storage.EpochManager.IEpochManager
    - id: getLastCommitPosition
      type: Func{System.Int64}
    - id: nodePriority
      type: System.Int32
    - id: interval
      type: TimeSpan
    - id: allowedTimeDifference
      type: TimeSpan
    content.vb: Public Sub New(bus As IPublisher, gossipSeedSource As IGossipSeedSource, nodeInfo As VNodeInfo, writerCheckpoint As ICheckpoint, chaserCheckpoint As ICheckpoint, epochManager As IEpochManager, getLastCommitPosition As Func(Of Long), nodePriority As Integer, interval As TimeSpan, allowedTimeDifference As TimeSpan)
  overload: EventStore.Core.Services.Gossip.NodeGossipService.#ctor*
  nameWithType.vb: NodeGossipService.NodeGossipService(IPublisher, IGossipSeedSource, VNodeInfo, ICheckpoint, ICheckpoint, IEpochManager, Func(Of Int64), Int32, TimeSpan, TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.Gossip.NodeGossipService.NodeGossipService(EventStore.Core.Bus.IPublisher, EventStore.Core.Services.Gossip.IGossipSeedSource, EventStore.Core.Data.VNodeInfo, EventStore.Core.TransactionLog.Checkpoint.ICheckpoint, EventStore.Core.TransactionLog.Checkpoint.ICheckpoint, EventStore.Core.Services.Storage.EpochManager.IEpochManager, Func(Of System.Int64), System.Int32, TimeSpan, TimeSpan)
  name.vb: NodeGossipService(IPublisher, IGossipSeedSource, VNodeInfo, ICheckpoint, ICheckpoint, IEpochManager, Func(Of Int64), Int32, TimeSpan, TimeSpan)
- uid: EventStore.Core.Services.Gossip.NodeGossipService.GetInitialMe
  commentId: M:EventStore.Core.Services.Gossip.NodeGossipService.GetInitialMe
  id: GetInitialMe
  parent: EventStore.Core.Services.Gossip.NodeGossipService
  langs:
  - csharp
  - vb
  name: GetInitialMe()
  nameWithType: NodeGossipService.GetInitialMe()
  fullName: EventStore.Core.Services.Gossip.NodeGossipService.GetInitialMe()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Gossip/NodeGossipService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetInitialMe
    path: ../EventStore/src/EventStore.Core/Services/Gossip/NodeGossipService.cs
    startLine: 40
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: protected override MemberInfo GetInitialMe()
    return:
      type: EventStore.Core.Cluster.MemberInfo
    content.vb: Protected Overrides Function GetInitialMe As MemberInfo
  overridden: EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe
  overload: EventStore.Core.Services.Gossip.NodeGossipService.GetInitialMe*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: EventStore.Core.Services.Gossip.NodeGossipService.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  commentId: M:EventStore.Core.Services.Gossip.NodeGossipService.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  id: GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  parent: EventStore.Core.Services.Gossip.NodeGossipService
  langs:
  - csharp
  - vb
  name: GetUpdatedMe(MemberInfo)
  nameWithType: NodeGossipService.GetUpdatedMe(MemberInfo)
  fullName: EventStore.Core.Services.Gossip.NodeGossipService.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Gossip/NodeGossipService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetUpdatedMe
    path: ../EventStore/src/EventStore.Core/Services/Gossip/NodeGossipService.cs
    startLine: 61
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Gossip
  syntax:
    content: protected override MemberInfo GetUpdatedMe(MemberInfo me)
    parameters:
    - id: me
      type: EventStore.Core.Cluster.MemberInfo
    return:
      type: EventStore.Core.Cluster.MemberInfo
    content.vb: Protected Overrides Function GetUpdatedMe(me As MemberInfo) As MemberInfo
  overridden: EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  overload: EventStore.Core.Services.Gossip.NodeGossipService.GetUpdatedMe*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: EventStore.Core.Services.Gossip
  commentId: N:EventStore.Core.Services.Gossip
  name: EventStore.Core.Services.Gossip
  nameWithType: EventStore.Core.Services.Gossip
  fullName: EventStore.Core.Services.Gossip
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Services.Gossip.GossipServiceBase
  commentId: T:EventStore.Core.Services.Gossip.GossipServiceBase
  parent: EventStore.Core.Services.Gossip
  name: GossipServiceBase
  nameWithType: GossipServiceBase
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemInit}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.SystemInit>
  nameWithType: IHandle<SystemMessage.SystemInit>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemInit>
  nameWithType.vb: IHandle(Of SystemMessage.SystemInit)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SystemInit)
  name.vb: IHandle(Of SystemMessage.SystemInit)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<GossipMessage.RetrieveGossipSeedSources>
  nameWithType: IHandle<GossipMessage.RetrieveGossipSeedSources>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources>
  nameWithType.vb: IHandle(Of GossipMessage.RetrieveGossipSeedSources)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  name.vb: IHandle(Of GossipMessage.RetrieveGossipSeedSources)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
    name: GossipMessage.RetrieveGossipSeedSources
    nameWithType: GossipMessage.RetrieveGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
    name: GossipMessage.RetrieveGossipSeedSources
    nameWithType: GossipMessage.RetrieveGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GotGossipSeedSources}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GotGossipSeedSources}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<GossipMessage.GotGossipSeedSources>
  nameWithType: IHandle<GossipMessage.GotGossipSeedSources>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.GotGossipSeedSources>
  nameWithType.vb: IHandle(Of GossipMessage.GotGossipSeedSources)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  name.vb: IHandle(Of GossipMessage.GotGossipSeedSources)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
    name: GossipMessage.GotGossipSeedSources
    nameWithType: GossipMessage.GotGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
    name: GossipMessage.GotGossipSeedSources
    nameWithType: GossipMessage.GotGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.Gossip}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.Gossip}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<GossipMessage.Gossip>
  nameWithType: IHandle<GossipMessage.Gossip>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.Gossip>
  nameWithType.vb: IHandle(Of GossipMessage.Gossip)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.Gossip)
  name.vb: IHandle(Of GossipMessage.Gossip)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.GossipMessage.Gossip
    name: GossipMessage.Gossip
    nameWithType: GossipMessage.Gossip
    fullName: EventStore.Core.Messages.GossipMessage.Gossip
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.GossipMessage.Gossip
    name: GossipMessage.Gossip
    nameWithType: GossipMessage.Gossip
    fullName: EventStore.Core.Messages.GossipMessage.Gossip
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipReceived}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipReceived}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<GossipMessage.GossipReceived>
  nameWithType: IHandle<GossipMessage.GossipReceived>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.GossipReceived>
  nameWithType.vb: IHandle(Of GossipMessage.GossipReceived)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.GossipReceived)
  name.vb: IHandle(Of GossipMessage.GossipReceived)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.GossipMessage.GossipReceived
    name: GossipMessage.GossipReceived
    nameWithType: GossipMessage.GossipReceived
    fullName: EventStore.Core.Messages.GossipMessage.GossipReceived
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.GossipMessage.GossipReceived
    name: GossipMessage.GossipReceived
    nameWithType: GossipMessage.GossipReceived
    fullName: EventStore.Core.Messages.GossipMessage.GossipReceived
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.StateChangeMessage>
  nameWithType: IHandle<SystemMessage.StateChangeMessage>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  name.vb: IHandle(Of SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipSendFailed}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.GossipMessage.GossipSendFailed}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<GossipMessage.GossipSendFailed>
  nameWithType: IHandle<GossipMessage.GossipSendFailed>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.GossipMessage.GossipSendFailed>
  nameWithType.vb: IHandle(Of GossipMessage.GossipSendFailed)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  name.vb: IHandle(Of GossipMessage.GossipSendFailed)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.GossipMessage.GossipSendFailed
    name: GossipMessage.GossipSendFailed
    nameWithType: GossipMessage.GossipSendFailed
    fullName: EventStore.Core.Messages.GossipMessage.GossipSendFailed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.GossipMessage.GossipSendFailed
    name: GossipMessage.GossipSendFailed
    nameWithType: GossipMessage.GossipSendFailed
    fullName: EventStore.Core.Messages.GossipMessage.GossipSendFailed
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionLost}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionLost}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.VNodeConnectionLost>
  nameWithType: IHandle<SystemMessage.VNodeConnectionLost>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.VNodeConnectionLost>
  nameWithType.vb: IHandle(Of SystemMessage.VNodeConnectionLost)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  name.vb: IHandle(Of SystemMessage.VNodeConnectionLost)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
    name: SystemMessage.VNodeConnectionLost
    nameWithType: SystemMessage.VNodeConnectionLost
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
    name: SystemMessage.VNodeConnectionLost
    nameWithType: SystemMessage.VNodeConnectionLost
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.VNodeConnectionEstablished>
  nameWithType: IHandle<SystemMessage.VNodeConnectionEstablished>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished>
  nameWithType.vb: IHandle(Of SystemMessage.VNodeConnectionEstablished)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  name.vb: IHandle(Of SystemMessage.VNodeConnectionEstablished)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
    name: SystemMessage.VNodeConnectionEstablished
    nameWithType: SystemMessage.VNodeConnectionEstablished
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
    name: SystemMessage.VNodeConnectionEstablished
    nameWithType: SystemMessage.VNodeConnectionEstablished
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.NodeInfo
  commentId: F:EventStore.Core.Services.Gossip.GossipServiceBase.NodeInfo
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: NodeInfo
  nameWithType: GossipServiceBase.NodeInfo
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.NodeInfo
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.CurrentRole
  commentId: F:EventStore.Core.Services.Gossip.GossipServiceBase.CurrentRole
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: CurrentRole
  nameWithType: GossipServiceBase.CurrentRole
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.CurrentRole
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.CurrentMaster
  commentId: F:EventStore.Core.Services.Gossip.GossipServiceBase.CurrentMaster
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: CurrentMaster
  nameWithType: GossipServiceBase.CurrentMaster
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.CurrentMaster
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: Handle(SystemMessage.SystemInit)
  nameWithType: GossipServiceBase.Handle(SystemMessage.SystemInit)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
  spec.csharp:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.SystemInit)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.SystemInit
    name: SystemMessage.SystemInit
    nameWithType: SystemMessage.SystemInit
    fullName: EventStore.Core.Messages.SystemMessage.SystemInit
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: Handle(GossipMessage.RetrieveGossipSeedSources)
  nameWithType: GossipServiceBase.Handle(GossipMessage.RetrieveGossipSeedSources)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
  spec.csharp:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
    name: GossipMessage.RetrieveGossipSeedSources
    nameWithType: GossipMessage.RetrieveGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
    name: GossipMessage.RetrieveGossipSeedSources
    nameWithType: GossipMessage.RetrieveGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.RetrieveGossipSeedSources
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: Handle(GossipMessage.GotGossipSeedSources)
  nameWithType: GossipServiceBase.Handle(GossipMessage.GotGossipSeedSources)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
  spec.csharp:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
    name: GossipMessage.GotGossipSeedSources
    nameWithType: GossipMessage.GotGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GotGossipSeedSources)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
    name: GossipMessage.GotGossipSeedSources
    nameWithType: GossipMessage.GotGossipSeedSources
    fullName: EventStore.Core.Messages.GossipMessage.GotGossipSeedSources
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: Handle(GossipMessage.Gossip)
  nameWithType: GossipServiceBase.Handle(GossipMessage.Gossip)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
  spec.csharp:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.Gossip
    name: GossipMessage.Gossip
    nameWithType: GossipMessage.Gossip
    fullName: EventStore.Core.Messages.GossipMessage.Gossip
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.Gossip)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.Gossip
    name: GossipMessage.Gossip
    nameWithType: GossipMessage.Gossip
    fullName: EventStore.Core.Messages.GossipMessage.Gossip
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: Handle(GossipMessage.GossipReceived)
  nameWithType: GossipServiceBase.Handle(GossipMessage.GossipReceived)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
  spec.csharp:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.GossipReceived
    name: GossipMessage.GossipReceived
    nameWithType: GossipMessage.GossipReceived
    fullName: EventStore.Core.Messages.GossipMessage.GossipReceived
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipReceived)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.GossipReceived
    name: GossipMessage.GossipReceived
    nameWithType: GossipMessage.GossipReceived
    fullName: EventStore.Core.Messages.GossipMessage.GossipReceived
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: GossipServiceBase.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: Handle(GossipMessage.GossipSendFailed)
  nameWithType: GossipServiceBase.Handle(GossipMessage.GossipSendFailed)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
  spec.csharp:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.GossipSendFailed
    name: GossipMessage.GossipSendFailed
    nameWithType: GossipMessage.GossipSendFailed
    fullName: EventStore.Core.Messages.GossipMessage.GossipSendFailed
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.GossipMessage.GossipSendFailed)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.GossipMessage.GossipSendFailed
    name: GossipMessage.GossipSendFailed
    nameWithType: GossipMessage.GossipSendFailed
    fullName: EventStore.Core.Messages.GossipMessage.GossipSendFailed
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: Handle(SystemMessage.VNodeConnectionLost)
  nameWithType: GossipServiceBase.Handle(SystemMessage.VNodeConnectionLost)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
  spec.csharp:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
    name: SystemMessage.VNodeConnectionLost
    nameWithType: SystemMessage.VNodeConnectionLost
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionLost)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
    name: SystemMessage.VNodeConnectionLost
    nameWithType: SystemMessage.VNodeConnectionLost
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionLost
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: Handle(SystemMessage.VNodeConnectionEstablished)
  nameWithType: GossipServiceBase.Handle(SystemMessage.VNodeConnectionEstablished)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
  spec.csharp:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
    name: SystemMessage.VNodeConnectionEstablished
    nameWithType: SystemMessage.VNodeConnectionEstablished
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.Handle(EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished)
    name: Handle
    nameWithType: GossipServiceBase.Handle
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
    name: SystemMessage.VNodeConnectionEstablished
    nameWithType: SystemMessage.VNodeConnectionEstablished
    fullName: EventStore.Core.Messages.SystemMessage.VNodeConnectionEstablished
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.NodeGossipService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<NodeGossipService>()
  nameWithType: ProtobufExtensions.Serialize<NodeGossipService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Gossip.NodeGossipService>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of NodeGossipService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Gossip.NodeGossipService)()
  name.vb: Serialize(Of NodeGossipService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<NodeGossipService>
    nameWithType: ProtobufExtensions.Serialize<NodeGossipService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Gossip.NodeGossipService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of NodeGossipService)
    nameWithType: ProtobufExtensions.Serialize(Of NodeGossipService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Gossip.NodeGossipService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.NodeGossipService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<NodeGossipService>()
  nameWithType: ProtobufExtensions.SerializeToArray<NodeGossipService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Gossip.NodeGossipService>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of NodeGossipService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Gossip.NodeGossipService)()
  name.vb: SerializeToArray(Of NodeGossipService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<NodeGossipService>
    nameWithType: ProtobufExtensions.SerializeToArray<NodeGossipService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Gossip.NodeGossipService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of NodeGossipService)
    nameWithType: ProtobufExtensions.SerializeToArray(Of NodeGossipService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Gossip.NodeGossipService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.Gossip.NodeGossipService.#ctor*
  commentId: Overload:EventStore.Core.Services.Gossip.NodeGossipService.#ctor
  name: NodeGossipService
  nameWithType: NodeGossipService.NodeGossipService
  fullName: EventStore.Core.Services.Gossip.NodeGossipService.NodeGossipService
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.Services.Gossip.IGossipSeedSource
  commentId: T:EventStore.Core.Services.Gossip.IGossipSeedSource
  parent: EventStore.Core.Services.Gossip
  name: IGossipSeedSource
  nameWithType: IGossipSeedSource
  fullName: EventStore.Core.Services.Gossip.IGossipSeedSource
- uid: EventStore.Core.Data.VNodeInfo
  commentId: T:EventStore.Core.Data.VNodeInfo
  parent: EventStore.Core.Data
  name: VNodeInfo
  nameWithType: VNodeInfo
  fullName: EventStore.Core.Data.VNodeInfo
- uid: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
  commentId: T:EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
  parent: EventStore.Core.TransactionLog.Checkpoint
  name: ICheckpoint
  nameWithType: ICheckpoint
  fullName: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
- uid: EventStore.Core.Services.Storage.EpochManager.IEpochManager
  commentId: T:EventStore.Core.Services.Storage.EpochManager.IEpochManager
  parent: EventStore.Core.Services.Storage.EpochManager
  name: IEpochManager
  nameWithType: IEpochManager
  fullName: EventStore.Core.Services.Storage.EpochManager.IEpochManager
- uid: Func{System.Int64}
  commentId: '!:Func{System.Int64}'
  definition: Func`1
  name: Func<Int64>
  nameWithType: Func<Int64>
  fullName: Func<System.Int64>
  nameWithType.vb: Func(Of Int64)
  fullName.vb: Func(Of System.Int64)
  name.vb: Func(Of Int64)
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: EventStore.Core.TransactionLog.Checkpoint
  commentId: N:EventStore.Core.TransactionLog.Checkpoint
  name: EventStore.Core.TransactionLog.Checkpoint
  nameWithType: EventStore.Core.TransactionLog.Checkpoint
  fullName: EventStore.Core.TransactionLog.Checkpoint
- uid: EventStore.Core.Services.Storage.EpochManager
  commentId: N:EventStore.Core.Services.Storage.EpochManager
  name: EventStore.Core.Services.Storage.EpochManager
  nameWithType: EventStore.Core.Services.Storage.EpochManager
  fullName: EventStore.Core.Services.Storage.EpochManager
- uid: Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: GetInitialMe()
  nameWithType: GossipServiceBase.GetInitialMe()
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe()
  spec.csharp:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe
    name: GetInitialMe
    nameWithType: GossipServiceBase.GetInitialMe
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe
    name: GetInitialMe
    nameWithType: GossipServiceBase.GetInitialMe
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.GetInitialMe
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.NodeGossipService.GetInitialMe*
  commentId: Overload:EventStore.Core.Services.Gossip.NodeGossipService.GetInitialMe
  name: GetInitialMe
  nameWithType: NodeGossipService.GetInitialMe
  fullName: EventStore.Core.Services.Gossip.NodeGossipService.GetInitialMe
- uid: EventStore.Core.Cluster.MemberInfo
  commentId: T:EventStore.Core.Cluster.MemberInfo
  parent: EventStore.Core.Cluster
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: EventStore.Core.Cluster.MemberInfo
- uid: EventStore.Core.Cluster
  commentId: N:EventStore.Core.Cluster
  name: EventStore.Core.Cluster
  nameWithType: EventStore.Core.Cluster
  fullName: EventStore.Core.Cluster
- uid: EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  commentId: M:EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  parent: EventStore.Core.Services.Gossip.GossipServiceBase
  name: GetUpdatedMe(MemberInfo)
  nameWithType: GossipServiceBase.GetUpdatedMe(MemberInfo)
  fullName: EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
  spec.csharp:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
    name: GetUpdatedMe
    nameWithType: GossipServiceBase.GetUpdatedMe
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Cluster.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: EventStore.Core.Cluster.MemberInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe(EventStore.Core.Cluster.MemberInfo)
    name: GetUpdatedMe
    nameWithType: GossipServiceBase.GetUpdatedMe
    fullName: EventStore.Core.Services.Gossip.GossipServiceBase.GetUpdatedMe
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Cluster.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: EventStore.Core.Cluster.MemberInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Gossip.NodeGossipService.GetUpdatedMe*
  commentId: Overload:EventStore.Core.Services.Gossip.NodeGossipService.GetUpdatedMe
  name: GetUpdatedMe
  nameWithType: NodeGossipService.GetUpdatedMe
  fullName: EventStore.Core.Services.Gossip.NodeGossipService.GetUpdatedMe

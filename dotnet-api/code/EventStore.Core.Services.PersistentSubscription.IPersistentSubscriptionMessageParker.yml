### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker
  commentId: T:EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker
  id: IPersistentSubscriptionMessageParker
  parent: EventStore.Core.Services.PersistentSubscription
  children:
  - EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginDelete(System.Action{EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker})
  - EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginMarkParkedMessagesReprocessed(System.Int64)
  - EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginParkMessage(EventStore.Core.Data.ResolvedEvent,System.String,System.Action{EventStore.Core.Data.ResolvedEvent,EventStore.Core.Messages.OperationResult})
  - EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginReadEndSequence(System.Action{System.Nullable{System.Int64}})
  langs:
  - csharp
  - vb
  name: IPersistentSubscriptionMessageParker
  nameWithType: IPersistentSubscriptionMessageParker
  fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker
  type: Interface
  source:
    id: IPersistentSubscriptionMessageParker
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/PersistentSubscription/IPersistentSubscriptionMessageParker.cs
    startLine: 5
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: public interface IPersistentSubscriptionMessageParker
    content.vb: Public Interface IPersistentSubscriptionMessageParker
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginParkMessage(EventStore.Core.Data.ResolvedEvent,System.String,System.Action{EventStore.Core.Data.ResolvedEvent,EventStore.Core.Messages.OperationResult})
  commentId: M:EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginParkMessage(EventStore.Core.Data.ResolvedEvent,System.String,System.Action{EventStore.Core.Data.ResolvedEvent,EventStore.Core.Messages.OperationResult})
  id: BeginParkMessage(EventStore.Core.Data.ResolvedEvent,System.String,System.Action{EventStore.Core.Data.ResolvedEvent,EventStore.Core.Messages.OperationResult})
  parent: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker
  langs:
  - csharp
  - vb
  name: BeginParkMessage(ResolvedEvent, String, Action<ResolvedEvent, OperationResult>)
  nameWithType: IPersistentSubscriptionMessageParker.BeginParkMessage(ResolvedEvent, String, Action<ResolvedEvent, OperationResult>)
  fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginParkMessage(EventStore.Core.Data.ResolvedEvent, System.String, System.Action<EventStore.Core.Data.ResolvedEvent, EventStore.Core.Messages.OperationResult>)
  type: Method
  source:
    id: BeginParkMessage
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/PersistentSubscription/IPersistentSubscriptionMessageParker.cs
    startLine: 6
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: void BeginParkMessage(ResolvedEvent ev, string reason, Action<ResolvedEvent, OperationResult> completed)
    parameters:
    - id: ev
      type: EventStore.Core.Data.ResolvedEvent
    - id: reason
      type: System.String
    - id: completed
      type: System.Action{EventStore.Core.Data.ResolvedEvent,EventStore.Core.Messages.OperationResult}
    content.vb: Sub BeginParkMessage(ev As ResolvedEvent, reason As String, completed As Action(Of ResolvedEvent, OperationResult))
  overload: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginParkMessage*
  nameWithType.vb: IPersistentSubscriptionMessageParker.BeginParkMessage(ResolvedEvent, String, Action(Of ResolvedEvent, OperationResult))
  fullName.vb: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginParkMessage(EventStore.Core.Data.ResolvedEvent, System.String, System.Action(Of EventStore.Core.Data.ResolvedEvent, EventStore.Core.Messages.OperationResult))
  name.vb: BeginParkMessage(ResolvedEvent, String, Action(Of ResolvedEvent, OperationResult))
- uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginReadEndSequence(System.Action{System.Nullable{System.Int64}})
  commentId: M:EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginReadEndSequence(System.Action{System.Nullable{System.Int64}})
  id: BeginReadEndSequence(System.Action{System.Nullable{System.Int64}})
  parent: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker
  langs:
  - csharp
  - vb
  name: BeginReadEndSequence(Action<Nullable<Int64>>)
  nameWithType: IPersistentSubscriptionMessageParker.BeginReadEndSequence(Action<Nullable<Int64>>)
  fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginReadEndSequence(System.Action<System.Nullable<System.Int64>>)
  type: Method
  source:
    id: BeginReadEndSequence
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/PersistentSubscription/IPersistentSubscriptionMessageParker.cs
    startLine: 7
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: void BeginReadEndSequence(Action<long? > completed)
    parameters:
    - id: completed
      type: System.Action{System.Nullable{System.Int64}}
    content.vb: Sub BeginReadEndSequence(completed As Action(Of Long?))
  overload: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginReadEndSequence*
  nameWithType.vb: IPersistentSubscriptionMessageParker.BeginReadEndSequence(Action(Of Nullable(Of Int64)))
  fullName.vb: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginReadEndSequence(System.Action(Of System.Nullable(Of System.Int64)))
  name.vb: BeginReadEndSequence(Action(Of Nullable(Of Int64)))
- uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginMarkParkedMessagesReprocessed(System.Int64)
  commentId: M:EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginMarkParkedMessagesReprocessed(System.Int64)
  id: BeginMarkParkedMessagesReprocessed(System.Int64)
  parent: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker
  langs:
  - csharp
  - vb
  name: BeginMarkParkedMessagesReprocessed(Int64)
  nameWithType: IPersistentSubscriptionMessageParker.BeginMarkParkedMessagesReprocessed(Int64)
  fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginMarkParkedMessagesReprocessed(System.Int64)
  type: Method
  source:
    id: BeginMarkParkedMessagesReprocessed
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/PersistentSubscription/IPersistentSubscriptionMessageParker.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: void BeginMarkParkedMessagesReprocessed(long sequence)
    parameters:
    - id: sequence
      type: System.Int64
    content.vb: Sub BeginMarkParkedMessagesReprocessed(sequence As Long)
  overload: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginMarkParkedMessagesReprocessed*
- uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginDelete(System.Action{EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker})
  commentId: M:EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginDelete(System.Action{EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker})
  id: BeginDelete(System.Action{EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker})
  parent: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker
  langs:
  - csharp
  - vb
  name: BeginDelete(Action<IPersistentSubscriptionMessageParker>)
  nameWithType: IPersistentSubscriptionMessageParker.BeginDelete(Action<IPersistentSubscriptionMessageParker>)
  fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginDelete(System.Action<EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker>)
  type: Method
  source:
    id: BeginDelete
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/PersistentSubscription/IPersistentSubscriptionMessageParker.cs
    startLine: 9
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.PersistentSubscription
  syntax:
    content: void BeginDelete(Action<IPersistentSubscriptionMessageParker> completed)
    parameters:
    - id: completed
      type: System.Action{EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker}
    content.vb: Sub BeginDelete(completed As Action(Of IPersistentSubscriptionMessageParker))
  overload: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginDelete*
  nameWithType.vb: IPersistentSubscriptionMessageParker.BeginDelete(Action(Of IPersistentSubscriptionMessageParker))
  fullName.vb: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginDelete(System.Action(Of EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker))
  name.vb: BeginDelete(Action(Of IPersistentSubscriptionMessageParker))
references:
- uid: EventStore.Core.Services.PersistentSubscription
  commentId: N:EventStore.Core.Services.PersistentSubscription
  name: EventStore.Core.Services.PersistentSubscription
  nameWithType: EventStore.Core.Services.PersistentSubscription
  fullName: EventStore.Core.Services.PersistentSubscription
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<IPersistentSubscriptionMessageParker>()
  nameWithType: ProtobufExtensions.Serialize<IPersistentSubscriptionMessageParker>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of IPersistentSubscriptionMessageParker)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker)()
  name.vb: Serialize(Of IPersistentSubscriptionMessageParker)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<IPersistentSubscriptionMessageParker>
    nameWithType: ProtobufExtensions.Serialize<IPersistentSubscriptionMessageParker>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of IPersistentSubscriptionMessageParker)
    nameWithType: ProtobufExtensions.Serialize(Of IPersistentSubscriptionMessageParker)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<IPersistentSubscriptionMessageParker>()
  nameWithType: ProtobufExtensions.SerializeToArray<IPersistentSubscriptionMessageParker>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of IPersistentSubscriptionMessageParker)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker)()
  name.vb: SerializeToArray(Of IPersistentSubscriptionMessageParker)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<IPersistentSubscriptionMessageParker>
    nameWithType: ProtobufExtensions.SerializeToArray<IPersistentSubscriptionMessageParker>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of IPersistentSubscriptionMessageParker)
    nameWithType: ProtobufExtensions.SerializeToArray(Of IPersistentSubscriptionMessageParker)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginParkMessage*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginParkMessage
  name: BeginParkMessage
  nameWithType: IPersistentSubscriptionMessageParker.BeginParkMessage
  fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginParkMessage
- uid: EventStore.Core.Data.ResolvedEvent
  commentId: T:EventStore.Core.Data.ResolvedEvent
  parent: EventStore.Core.Data
  name: ResolvedEvent
  nameWithType: ResolvedEvent
  fullName: EventStore.Core.Data.ResolvedEvent
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Action{EventStore.Core.Data.ResolvedEvent,EventStore.Core.Messages.OperationResult}
  commentId: T:System.Action{EventStore.Core.Data.ResolvedEvent,EventStore.Core.Messages.OperationResult}
  parent: System
  definition: System.Action`2
  name: Action<ResolvedEvent, OperationResult>
  nameWithType: Action<ResolvedEvent, OperationResult>
  fullName: System.Action<EventStore.Core.Data.ResolvedEvent, EventStore.Core.Messages.OperationResult>
  nameWithType.vb: Action(Of ResolvedEvent, OperationResult)
  fullName.vb: System.Action(Of EventStore.Core.Data.ResolvedEvent, EventStore.Core.Messages.OperationResult)
  name.vb: Action(Of ResolvedEvent, OperationResult)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Data.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.Core.Data.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.OperationResult
    name: OperationResult
    nameWithType: OperationResult
    fullName: EventStore.Core.Messages.OperationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Data.ResolvedEvent
    name: ResolvedEvent
    nameWithType: ResolvedEvent
    fullName: EventStore.Core.Data.ResolvedEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messages.OperationResult
    name: OperationResult
    nameWithType: OperationResult
    fullName: EventStore.Core.Messages.OperationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginReadEndSequence*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginReadEndSequence
  name: BeginReadEndSequence
  nameWithType: IPersistentSubscriptionMessageParker.BeginReadEndSequence
  fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginReadEndSequence
- uid: System.Action{System.Nullable{System.Int64}}
  commentId: T:System.Action{System.Nullable{System.Int64}}
  parent: System
  definition: System.Action`1
  name: Action<Nullable<Int64>>
  nameWithType: Action<Nullable<Int64>>
  fullName: System.Action<System.Nullable<System.Int64>>
  nameWithType.vb: Action(Of Nullable(Of Int64))
  fullName.vb: System.Action(Of System.Nullable(Of System.Int64))
  name.vb: Action(Of Nullable(Of Int64))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginMarkParkedMessagesReprocessed*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginMarkParkedMessagesReprocessed
  name: BeginMarkParkedMessagesReprocessed
  nameWithType: IPersistentSubscriptionMessageParker.BeginMarkParkedMessagesReprocessed
  fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginMarkParkedMessagesReprocessed
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginDelete*
  commentId: Overload:EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginDelete
  name: BeginDelete
  nameWithType: IPersistentSubscriptionMessageParker.BeginDelete
  fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker.BeginDelete
- uid: System.Action{EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker}
  commentId: T:System.Action{EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker}
  parent: System
  definition: System.Action`1
  name: Action<IPersistentSubscriptionMessageParker>
  nameWithType: Action<IPersistentSubscriptionMessageParker>
  fullName: System.Action<EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker>
  nameWithType.vb: Action(Of IPersistentSubscriptionMessageParker)
  fullName.vb: System.Action(Of EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker)
  name.vb: Action(Of IPersistentSubscriptionMessageParker)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker
    name: IPersistentSubscriptionMessageParker
    nameWithType: IPersistentSubscriptionMessageParker
    fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker
    name: IPersistentSubscriptionMessageParker
    nameWithType: IPersistentSubscriptionMessageParker
    fullName: EventStore.Core.Services.PersistentSubscription.IPersistentSubscriptionMessageParker
  - name: )
    nameWithType: )
    fullName: )

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Replication.MasterReplicationService
  commentId: T:EventStore.Core.Services.Replication.MasterReplicationService
  id: MasterReplicationService
  parent: EventStore.Core.Services.Replication
  children:
  - EventStore.Core.Services.Replication.MasterReplicationService.#ctor(EventStore.Core.Bus.IPublisher,Guid,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Storage.EpochManager.IEpochManager,System.Int32)
  - EventStore.Core.Services.Replication.MasterReplicationService.BulkSize
  - EventStore.Core.Services.Replication.MasterReplicationService.CloneThreshold
  - EventStore.Core.Services.Replication.MasterReplicationService.GetStatistics
  - EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.ReplicationMessage.GetReplicationStats)
  - EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck)
  - EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest)
  - EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  - EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.SystemMessage.SystemStart)
  - EventStore.Core.Services.Replication.MasterReplicationService.LagOccurencesThreshold
  - EventStore.Core.Services.Replication.MasterReplicationService.MaxQueueSize
  - EventStore.Core.Services.Replication.MasterReplicationService.Name
  - EventStore.Core.Services.Replication.MasterReplicationService.NoQuorumTimeout
  - EventStore.Core.Services.Replication.MasterReplicationService.ReplicaAckWindow
  - EventStore.Core.Services.Replication.MasterReplicationService.ReplicaSendWindow
  - EventStore.Core.Services.Replication.MasterReplicationService.RoleAssignmentsInterval
  - EventStore.Core.Services.Replication.MasterReplicationService.SlaveLagThreshold
  - EventStore.Core.Services.Replication.MasterReplicationService.Task
  langs:
  - csharp
  - vb
  name: MasterReplicationService
  nameWithType: MasterReplicationService
  fullName: EventStore.Core.Services.Replication.MasterReplicationService
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: MasterReplicationService
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 25
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: 'public class MasterReplicationService : object, IMonitoredQueue, IHandle<SystemMessage.SystemStart>, IHandle<SystemMessage.StateChangeMessage>, IHandle<ReplicationMessage.ReplicaSubscriptionRequest>, IHandle<ReplicationMessage.ReplicaLogPositionAck>, IHandle<ReplicationMessage.GetReplicationStats>'
    content.vb: >-
      Public Class MasterReplicationService
          Inherits Object
          Implements IMonitoredQueue, IHandle(Of SystemMessage.SystemStart), IHandle(Of SystemMessage.StateChangeMessage), IHandle(Of ReplicationMessage.ReplicaSubscriptionRequest), IHandle(Of ReplicationMessage.ReplicaLogPositionAck), IHandle(Of ReplicationMessage.GetReplicationStats)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IMonitoredQueue
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemStart}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.GetReplicationStats}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.Replication.MasterReplicationService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Replication.MasterReplicationService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.Replication.MasterReplicationService.MaxQueueSize
  commentId: F:EventStore.Core.Services.Replication.MasterReplicationService.MaxQueueSize
  id: MaxQueueSize
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: MaxQueueSize
  nameWithType: MasterReplicationService.MaxQueueSize
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.MaxQueueSize
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: MaxQueueSize
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 32
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public const int MaxQueueSize = null
    return:
      type: System.Int32
    content.vb: Public Const MaxQueueSize As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.Replication.MasterReplicationService.CloneThreshold
  commentId: F:EventStore.Core.Services.Replication.MasterReplicationService.CloneThreshold
  id: CloneThreshold
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: CloneThreshold
  nameWithType: MasterReplicationService.CloneThreshold
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.CloneThreshold
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: CloneThreshold
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 33
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public const int CloneThreshold = null
    return:
      type: System.Int32
    content.vb: Public Const CloneThreshold As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.Replication.MasterReplicationService.SlaveLagThreshold
  commentId: F:EventStore.Core.Services.Replication.MasterReplicationService.SlaveLagThreshold
  id: SlaveLagThreshold
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: SlaveLagThreshold
  nameWithType: MasterReplicationService.SlaveLagThreshold
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.SlaveLagThreshold
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SlaveLagThreshold
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 34
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public const int SlaveLagThreshold = null
    return:
      type: System.Int32
    content.vb: Public Const SlaveLagThreshold As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.Replication.MasterReplicationService.LagOccurencesThreshold
  commentId: F:EventStore.Core.Services.Replication.MasterReplicationService.LagOccurencesThreshold
  id: LagOccurencesThreshold
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: LagOccurencesThreshold
  nameWithType: MasterReplicationService.LagOccurencesThreshold
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.LagOccurencesThreshold
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: LagOccurencesThreshold
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 35
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public const int LagOccurencesThreshold = null
    return:
      type: System.Int32
    content.vb: Public Const LagOccurencesThreshold As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.Replication.MasterReplicationService.BulkSize
  commentId: F:EventStore.Core.Services.Replication.MasterReplicationService.BulkSize
  id: BulkSize
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: BulkSize
  nameWithType: MasterReplicationService.BulkSize
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.BulkSize
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: BulkSize
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 36
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public const int BulkSize = null
    return:
      type: System.Int32
    content.vb: Public Const BulkSize As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.Replication.MasterReplicationService.ReplicaSendWindow
  commentId: F:EventStore.Core.Services.Replication.MasterReplicationService.ReplicaSendWindow
  id: ReplicaSendWindow
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: ReplicaSendWindow
  nameWithType: MasterReplicationService.ReplicaSendWindow
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.ReplicaSendWindow
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ReplicaSendWindow
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 37
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public const int ReplicaSendWindow = null
    return:
      type: System.Int32
    content.vb: Public Const ReplicaSendWindow As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.Replication.MasterReplicationService.ReplicaAckWindow
  commentId: F:EventStore.Core.Services.Replication.MasterReplicationService.ReplicaAckWindow
  id: ReplicaAckWindow
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: ReplicaAckWindow
  nameWithType: MasterReplicationService.ReplicaAckWindow
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.ReplicaAckWindow
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ReplicaAckWindow
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 38
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public const int ReplicaAckWindow = null
    return:
      type: System.Int32
    content.vb: Public Const ReplicaAckWindow As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.Replication.MasterReplicationService.RoleAssignmentsInterval
  commentId: F:EventStore.Core.Services.Replication.MasterReplicationService.RoleAssignmentsInterval
  id: RoleAssignmentsInterval
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: RoleAssignmentsInterval
  nameWithType: MasterReplicationService.RoleAssignmentsInterval
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.RoleAssignmentsInterval
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: RoleAssignmentsInterval
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 39
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public static readonly TimeSpan RoleAssignmentsInterval
    return:
      type: TimeSpan
    content.vb: Public Shared ReadOnly RoleAssignmentsInterval As TimeSpan
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Core.Services.Replication.MasterReplicationService.NoQuorumTimeout
  commentId: F:EventStore.Core.Services.Replication.MasterReplicationService.NoQuorumTimeout
  id: NoQuorumTimeout
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: NoQuorumTimeout
  nameWithType: MasterReplicationService.NoQuorumTimeout
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.NoQuorumTimeout
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: NoQuorumTimeout
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 40
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public static readonly TimeSpan NoQuorumTimeout
    return:
      type: TimeSpan
    content.vb: Public Shared ReadOnly NoQuorumTimeout As TimeSpan
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Core.Services.Replication.MasterReplicationService.Name
  commentId: P:EventStore.Core.Services.Replication.MasterReplicationService.Name
  id: Name
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: MasterReplicationService.Name
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.Name
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Name
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 44
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: EventStore.Core.Services.Replication.MasterReplicationService.Name*
  implements:
  - EventStore.Core.Bus.IMonitoredQueue.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Replication.MasterReplicationService.Task
  commentId: P:EventStore.Core.Services.Replication.MasterReplicationService.Task
  id: Task
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: Task
  nameWithType: MasterReplicationService.Task
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.Task
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Task
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 68
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public Task Task { get; }
    parameters: []
    return:
      type: Task
    content.vb: Public ReadOnly Property Task As Task
  overload: EventStore.Core.Services.Replication.MasterReplicationService.Task*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Replication.MasterReplicationService.#ctor(EventStore.Core.Bus.IPublisher,Guid,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Storage.EpochManager.IEpochManager,System.Int32)
  commentId: M:EventStore.Core.Services.Replication.MasterReplicationService.#ctor(EventStore.Core.Bus.IPublisher,Guid,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Storage.EpochManager.IEpochManager,System.Int32)
  id: '#ctor(EventStore.Core.Bus.IPublisher,Guid,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Bus.IPublisher,EventStore.Core.Services.Storage.EpochManager.IEpochManager,System.Int32)'
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: MasterReplicationService(IPublisher, Guid, TFChunkDb, IPublisher, IEpochManager, Int32)
  nameWithType: MasterReplicationService.MasterReplicationService(IPublisher, Guid, TFChunkDb, IPublisher, IEpochManager, Int32)
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.MasterReplicationService(EventStore.Core.Bus.IPublisher, Guid, EventStore.Core.TransactionLog.Chunks.TFChunkDb, EventStore.Core.Bus.IPublisher, EventStore.Core.Services.Storage.EpochManager.IEpochManager, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 70
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public MasterReplicationService(IPublisher publisher, Guid instanceId, TFChunkDb db, IPublisher tcpSendPublisher, IEpochManager epochManager, int clusterSize)
    parameters:
    - id: publisher
      type: EventStore.Core.Bus.IPublisher
    - id: instanceId
      type: Guid
    - id: db
      type: EventStore.Core.TransactionLog.Chunks.TFChunkDb
    - id: tcpSendPublisher
      type: EventStore.Core.Bus.IPublisher
    - id: epochManager
      type: EventStore.Core.Services.Storage.EpochManager.IEpochManager
    - id: clusterSize
      type: System.Int32
    content.vb: Public Sub New(publisher As IPublisher, instanceId As Guid, db As TFChunkDb, tcpSendPublisher As IPublisher, epochManager As IEpochManager, clusterSize As Integer)
  overload: EventStore.Core.Services.Replication.MasterReplicationService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.SystemMessage.SystemStart)
  commentId: M:EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.SystemMessage.SystemStart)
  id: Handle(EventStore.Core.Messages.SystemMessage.SystemStart)
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.SystemStart)
  nameWithType: MasterReplicationService.Handle(SystemMessage.SystemStart)
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.SystemMessage.SystemStart)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 95
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public void Handle(SystemMessage.SystemStart message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.SystemStart
    content.vb: Public Sub Handle(message As SystemMessage.SystemStart)
  overload: EventStore.Core.Services.Replication.MasterReplicationService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemStart}.Handle(EventStore.Core.Messages.SystemMessage.SystemStart)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  id: Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: MasterReplicationService.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 100
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public void Handle(SystemMessage.StateChangeMessage message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    content.vb: Public Sub Handle(message As SystemMessage.StateChangeMessage)
  overload: EventStore.Core.Services.Replication.MasterReplicationService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest)
  commentId: M:EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest)
  id: Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest)
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: Handle(ReplicationMessage.ReplicaSubscriptionRequest)
  nameWithType: MasterReplicationService.Handle(ReplicationMessage.ReplicaSubscriptionRequest)
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 108
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public void Handle(ReplicationMessage.ReplicaSubscriptionRequest message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest
    content.vb: Public Sub Handle(message As ReplicationMessage.ReplicaSubscriptionRequest)
  overload: EventStore.Core.Services.Replication.MasterReplicationService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest}.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck)
  commentId: M:EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck)
  id: Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck)
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: Handle(ReplicationMessage.ReplicaLogPositionAck)
  nameWithType: MasterReplicationService.Handle(ReplicationMessage.ReplicaLogPositionAck)
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 146
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public void Handle(ReplicationMessage.ReplicaLogPositionAck message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck
    content.vb: Public Sub Handle(message As ReplicationMessage.ReplicaLogPositionAck)
  overload: EventStore.Core.Services.Replication.MasterReplicationService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck}.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.ReplicationMessage.GetReplicationStats)
  commentId: M:EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.ReplicationMessage.GetReplicationStats)
  id: Handle(EventStore.Core.Messages.ReplicationMessage.GetReplicationStats)
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: Handle(ReplicationMessage.GetReplicationStats)
  nameWithType: MasterReplicationService.Handle(ReplicationMessage.GetReplicationStats)
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.Handle(EventStore.Core.Messages.ReplicationMessage.GetReplicationStats)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 153
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public void Handle(ReplicationMessage.GetReplicationStats message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ReplicationMessage.GetReplicationStats
    content.vb: Public Sub Handle(message As ReplicationMessage.GetReplicationStats)
  overload: EventStore.Core.Services.Replication.MasterReplicationService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.GetReplicationStats}.Handle(EventStore.Core.Messages.ReplicationMessage.GetReplicationStats)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Replication.MasterReplicationService.GetStatistics
  commentId: M:EventStore.Core.Services.Replication.MasterReplicationService.GetStatistics
  id: GetStatistics
  parent: EventStore.Core.Services.Replication.MasterReplicationService
  langs:
  - csharp
  - vb
  name: GetStatistics()
  nameWithType: MasterReplicationService.GetStatistics()
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.GetStatistics()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/MasterReplicationService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetStatistics
    path: ../EventStore/src/EventStore.Core/Services/Replication/MasterReplicationService.cs
    startLine: 641
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public QueueStats GetStatistics()
    return:
      type: EventStore.Core.Services.Monitoring.Stats.QueueStats
    content.vb: Public Function GetStatistics As QueueStats
  overload: EventStore.Core.Services.Replication.MasterReplicationService.GetStatistics*
  implements:
  - EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.Replication
  commentId: N:EventStore.Core.Services.Replication
  name: EventStore.Core.Services.Replication
  nameWithType: EventStore.Core.Services.Replication
  fullName: EventStore.Core.Services.Replication
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IMonitoredQueue
  commentId: T:EventStore.Core.Bus.IMonitoredQueue
  parent: EventStore.Core.Bus
  name: IMonitoredQueue
  nameWithType: IMonitoredQueue
  fullName: EventStore.Core.Bus.IMonitoredQueue
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemStart}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemStart}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.SystemStart>
  nameWithType: IHandle<SystemMessage.SystemStart>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemStart>
  nameWithType.vb: IHandle(Of SystemMessage.SystemStart)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SystemStart)
  name.vb: IHandle(Of SystemMessage.SystemStart)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.SystemStart
    name: SystemMessage.SystemStart
    nameWithType: SystemMessage.SystemStart
    fullName: EventStore.Core.Messages.SystemMessage.SystemStart
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.SystemStart
    name: SystemMessage.SystemStart
    nameWithType: SystemMessage.SystemStart
    fullName: EventStore.Core.Messages.SystemMessage.SystemStart
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.StateChangeMessage>
  nameWithType: IHandle<SystemMessage.StateChangeMessage>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  name.vb: IHandle(Of SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ReplicationMessage.ReplicaSubscriptionRequest>
  nameWithType: IHandle<ReplicationMessage.ReplicaSubscriptionRequest>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest>
  nameWithType.vb: IHandle(Of ReplicationMessage.ReplicaSubscriptionRequest)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest)
  name.vb: IHandle(Of ReplicationMessage.ReplicaSubscriptionRequest)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest
    name: ReplicationMessage.ReplicaSubscriptionRequest
    nameWithType: ReplicationMessage.ReplicaSubscriptionRequest
    fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest
    name: ReplicationMessage.ReplicaSubscriptionRequest
    nameWithType: ReplicationMessage.ReplicaSubscriptionRequest
    fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ReplicationMessage.ReplicaLogPositionAck>
  nameWithType: IHandle<ReplicationMessage.ReplicaLogPositionAck>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck>
  nameWithType.vb: IHandle(Of ReplicationMessage.ReplicaLogPositionAck)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck)
  name.vb: IHandle(Of ReplicationMessage.ReplicaLogPositionAck)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck
    name: ReplicationMessage.ReplicaLogPositionAck
    nameWithType: ReplicationMessage.ReplicaLogPositionAck
    fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck
    name: ReplicationMessage.ReplicaLogPositionAck
    nameWithType: ReplicationMessage.ReplicaLogPositionAck
    fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.GetReplicationStats}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.GetReplicationStats}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ReplicationMessage.GetReplicationStats>
  nameWithType: IHandle<ReplicationMessage.GetReplicationStats>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.GetReplicationStats>
  nameWithType.vb: IHandle(Of ReplicationMessage.GetReplicationStats)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.GetReplicationStats)
  name.vb: IHandle(Of ReplicationMessage.GetReplicationStats)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ReplicationMessage.GetReplicationStats
    name: ReplicationMessage.GetReplicationStats
    nameWithType: ReplicationMessage.GetReplicationStats
    fullName: EventStore.Core.Messages.ReplicationMessage.GetReplicationStats
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ReplicationMessage.GetReplicationStats
    name: ReplicationMessage.GetReplicationStats
    nameWithType: ReplicationMessage.GetReplicationStats
    fullName: EventStore.Core.Messages.ReplicationMessage.GetReplicationStats
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Replication.MasterReplicationService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<MasterReplicationService>()
  nameWithType: ProtobufExtensions.Serialize<MasterReplicationService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Replication.MasterReplicationService>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of MasterReplicationService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Replication.MasterReplicationService)()
  name.vb: Serialize(Of MasterReplicationService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<MasterReplicationService>
    nameWithType: ProtobufExtensions.Serialize<MasterReplicationService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Replication.MasterReplicationService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of MasterReplicationService)
    nameWithType: ProtobufExtensions.Serialize(Of MasterReplicationService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Replication.MasterReplicationService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Replication.MasterReplicationService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<MasterReplicationService>()
  nameWithType: ProtobufExtensions.SerializeToArray<MasterReplicationService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Replication.MasterReplicationService>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of MasterReplicationService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Replication.MasterReplicationService)()
  name.vb: SerializeToArray(Of MasterReplicationService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<MasterReplicationService>
    nameWithType: ProtobufExtensions.SerializeToArray<MasterReplicationService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Replication.MasterReplicationService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of MasterReplicationService)
    nameWithType: ProtobufExtensions.SerializeToArray(Of MasterReplicationService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Replication.MasterReplicationService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: EventStore.Core.Services.Replication.MasterReplicationService.Name*
  commentId: Overload:EventStore.Core.Services.Replication.MasterReplicationService.Name
  name: Name
  nameWithType: MasterReplicationService.Name
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.Name
- uid: EventStore.Core.Bus.IMonitoredQueue.Name
  commentId: P:EventStore.Core.Bus.IMonitoredQueue.Name
  parent: EventStore.Core.Bus.IMonitoredQueue
  name: Name
  nameWithType: IMonitoredQueue.Name
  fullName: EventStore.Core.Bus.IMonitoredQueue.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Services.Replication.MasterReplicationService.Task*
  commentId: Overload:EventStore.Core.Services.Replication.MasterReplicationService.Task
  name: Task
  nameWithType: MasterReplicationService.Task
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.Task
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: EventStore.Core.Services.Replication.MasterReplicationService.#ctor*
  commentId: Overload:EventStore.Core.Services.Replication.MasterReplicationService.#ctor
  name: MasterReplicationService
  nameWithType: MasterReplicationService.MasterReplicationService
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.MasterReplicationService
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkDb
  commentId: T:EventStore.Core.TransactionLog.Chunks.TFChunkDb
  parent: EventStore.Core.TransactionLog.Chunks
  name: TFChunkDb
  nameWithType: TFChunkDb
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkDb
- uid: EventStore.Core.Services.Storage.EpochManager.IEpochManager
  commentId: T:EventStore.Core.Services.Storage.EpochManager.IEpochManager
  parent: EventStore.Core.Services.Storage.EpochManager
  name: IEpochManager
  nameWithType: IEpochManager
  fullName: EventStore.Core.Services.Storage.EpochManager.IEpochManager
- uid: EventStore.Core.TransactionLog.Chunks
  commentId: N:EventStore.Core.TransactionLog.Chunks
  name: EventStore.Core.TransactionLog.Chunks
  nameWithType: EventStore.Core.TransactionLog.Chunks
  fullName: EventStore.Core.TransactionLog.Chunks
- uid: EventStore.Core.Services.Storage.EpochManager
  commentId: N:EventStore.Core.Services.Storage.EpochManager
  name: EventStore.Core.Services.Storage.EpochManager
  nameWithType: EventStore.Core.Services.Storage.EpochManager
  fullName: EventStore.Core.Services.Storage.EpochManager
- uid: EventStore.Core.Services.Replication.MasterReplicationService.Handle*
  commentId: Overload:EventStore.Core.Services.Replication.MasterReplicationService.Handle
  name: Handle
  nameWithType: MasterReplicationService.Handle
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemStart}.Handle(EventStore.Core.Messages.SystemMessage.SystemStart)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemStart}.Handle(EventStore.Core.Messages.SystemMessage.SystemStart)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SystemStart}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.SystemStart)
  nameWithType: IHandle<SystemMessage.SystemStart>.Handle(SystemMessage.SystemStart)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemStart>.Handle(EventStore.Core.Messages.SystemMessage.SystemStart)
  nameWithType.vb: IHandle(Of SystemMessage.SystemStart).Handle(SystemMessage.SystemStart)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SystemStart).Handle(EventStore.Core.Messages.SystemMessage.SystemStart)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.SystemStart>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SystemStart>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.SystemStart
    name: SystemMessage.SystemStart
    nameWithType: SystemMessage.SystemStart
    fullName: EventStore.Core.Messages.SystemMessage.SystemStart
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.SystemStart).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SystemStart).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.SystemStart
    name: SystemMessage.SystemStart
    nameWithType: SystemMessage.SystemStart
    fullName: EventStore.Core.Messages.SystemMessage.SystemStart
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.SystemStart
  commentId: T:EventStore.Core.Messages.SystemMessage.SystemStart
  parent: EventStore.Core.Messages
  name: SystemMessage.SystemStart
  nameWithType: SystemMessage.SystemStart
  fullName: EventStore.Core.Messages.SystemMessage.SystemStart
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: IHandle<SystemMessage.StateChangeMessage>.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage).Handle(SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage).Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.StateChangeMessage>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.StateChangeMessage).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  commentId: T:EventStore.Core.Messages.SystemMessage.StateChangeMessage
  parent: EventStore.Core.Messages
  name: SystemMessage.StateChangeMessage
  nameWithType: SystemMessage.StateChangeMessage
  fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest}.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest}.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ReplicationMessage.ReplicaSubscriptionRequest)
  nameWithType: IHandle<ReplicationMessage.ReplicaSubscriptionRequest>.Handle(ReplicationMessage.ReplicaSubscriptionRequest)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest>.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest)
  nameWithType.vb: IHandle(Of ReplicationMessage.ReplicaSubscriptionRequest).Handle(ReplicationMessage.ReplicaSubscriptionRequest)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest).Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ReplicationMessage.ReplicaSubscriptionRequest>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest
    name: ReplicationMessage.ReplicaSubscriptionRequest
    nameWithType: ReplicationMessage.ReplicaSubscriptionRequest
    fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ReplicationMessage.ReplicaSubscriptionRequest).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest
    name: ReplicationMessage.ReplicaSubscriptionRequest
    nameWithType: ReplicationMessage.ReplicaSubscriptionRequest
    fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest
  commentId: T:EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest
  parent: EventStore.Core.Messages
  name: ReplicationMessage.ReplicaSubscriptionRequest
  nameWithType: ReplicationMessage.ReplicaSubscriptionRequest
  fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaSubscriptionRequest
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck}.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck}.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ReplicationMessage.ReplicaLogPositionAck)
  nameWithType: IHandle<ReplicationMessage.ReplicaLogPositionAck>.Handle(ReplicationMessage.ReplicaLogPositionAck)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck>.Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck)
  nameWithType.vb: IHandle(Of ReplicationMessage.ReplicaLogPositionAck).Handle(ReplicationMessage.ReplicaLogPositionAck)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck).Handle(EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ReplicationMessage.ReplicaLogPositionAck>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck
    name: ReplicationMessage.ReplicaLogPositionAck
    nameWithType: ReplicationMessage.ReplicaLogPositionAck
    fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ReplicationMessage.ReplicaLogPositionAck).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck
    name: ReplicationMessage.ReplicaLogPositionAck
    nameWithType: ReplicationMessage.ReplicaLogPositionAck
    fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck
  commentId: T:EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck
  parent: EventStore.Core.Messages
  name: ReplicationMessage.ReplicaLogPositionAck
  nameWithType: ReplicationMessage.ReplicaLogPositionAck
  fullName: EventStore.Core.Messages.ReplicationMessage.ReplicaLogPositionAck
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.GetReplicationStats}.Handle(EventStore.Core.Messages.ReplicationMessage.GetReplicationStats)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.GetReplicationStats}.Handle(EventStore.Core.Messages.ReplicationMessage.GetReplicationStats)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.GetReplicationStats}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ReplicationMessage.GetReplicationStats)
  nameWithType: IHandle<ReplicationMessage.GetReplicationStats>.Handle(ReplicationMessage.GetReplicationStats)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.GetReplicationStats>.Handle(EventStore.Core.Messages.ReplicationMessage.GetReplicationStats)
  nameWithType.vb: IHandle(Of ReplicationMessage.GetReplicationStats).Handle(ReplicationMessage.GetReplicationStats)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.GetReplicationStats).Handle(EventStore.Core.Messages.ReplicationMessage.GetReplicationStats)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ReplicationMessage.GetReplicationStats>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.GetReplicationStats>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.GetReplicationStats
    name: ReplicationMessage.GetReplicationStats
    nameWithType: ReplicationMessage.GetReplicationStats
    fullName: EventStore.Core.Messages.ReplicationMessage.GetReplicationStats
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ReplicationMessage.GetReplicationStats).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.GetReplicationStats).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.GetReplicationStats
    name: ReplicationMessage.GetReplicationStats
    nameWithType: ReplicationMessage.GetReplicationStats
    fullName: EventStore.Core.Messages.ReplicationMessage.GetReplicationStats
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ReplicationMessage.GetReplicationStats
  commentId: T:EventStore.Core.Messages.ReplicationMessage.GetReplicationStats
  parent: EventStore.Core.Messages
  name: ReplicationMessage.GetReplicationStats
  nameWithType: ReplicationMessage.GetReplicationStats
  fullName: EventStore.Core.Messages.ReplicationMessage.GetReplicationStats
- uid: EventStore.Core.Services.Replication.MasterReplicationService.GetStatistics*
  commentId: Overload:EventStore.Core.Services.Replication.MasterReplicationService.GetStatistics
  name: GetStatistics
  nameWithType: MasterReplicationService.GetStatistics
  fullName: EventStore.Core.Services.Replication.MasterReplicationService.GetStatistics
- uid: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  commentId: M:EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  parent: EventStore.Core.Bus.IMonitoredQueue
  name: GetStatistics()
  nameWithType: IMonitoredQueue.GetStatistics()
  fullName: EventStore.Core.Bus.IMonitoredQueue.GetStatistics()
  spec.csharp:
  - uid: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
    name: GetStatistics
    nameWithType: IMonitoredQueue.GetStatistics
    fullName: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
    name: GetStatistics
    nameWithType: IMonitoredQueue.GetStatistics
    fullName: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Monitoring.Stats.QueueStats
  commentId: T:EventStore.Core.Services.Monitoring.Stats.QueueStats
  parent: EventStore.Core.Services.Monitoring.Stats
  name: QueueStats
  nameWithType: QueueStats
  fullName: EventStore.Core.Services.Monitoring.Stats.QueueStats
- uid: EventStore.Core.Services.Monitoring.Stats
  commentId: N:EventStore.Core.Services.Monitoring.Stats
  name: EventStore.Core.Services.Monitoring.Stats
  nameWithType: EventStore.Core.Services.Monitoring.Stats
  fullName: EventStore.Core.Services.Monitoring.Stats

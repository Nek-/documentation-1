### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Replication.ReplicaService
  commentId: T:EventStore.Core.Services.Replication.ReplicaService
  id: ReplicaService
  parent: EventStore.Core.Services.Replication
  children:
  - EventStore.Core.Services.Replication.ReplicaService.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Services.Storage.EpochManager.IEpochManager,EventStore.Core.Bus.IPublisher,EventStore.Core.Authentication.IAuthenticationProvider,EventStore.Core.Data.VNodeInfo,System.Boolean,System.String,System.Boolean,TimeSpan,TimeSpan)
  - EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ClientMessage.TcpForwardMessage)
  - EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ReplicationMessage.AckLogPosition)
  - EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster)
  - EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster)
  - EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  - EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  - EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  langs:
  - csharp
  - vb
  name: ReplicaService
  nameWithType: ReplicaService
  fullName: EventStore.Core.Services.Replication.ReplicaService
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/ReplicaService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ReplicaService
    path: ../EventStore/src/EventStore.Core/Services/Replication/ReplicaService.cs
    startLine: 22
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: 'public class ReplicaService : object, IHandle<SystemMessage.StateChangeMessage>, IHandle<ReplicationMessage.ReconnectToMaster>, IHandle<ReplicationMessage.SubscribeToMaster>, IHandle<ReplicationMessage.AckLogPosition>, IHandle<StorageMessage.PrepareAck>, IHandle<StorageMessage.CommitAck>, IHandle<ClientMessage.TcpForwardMessage>'
    content.vb: >-
      Public Class ReplicaService
          Inherits Object
          Implements IHandle(Of SystemMessage.StateChangeMessage), IHandle(Of ReplicationMessage.ReconnectToMaster), IHandle(Of ReplicationMessage.SubscribeToMaster), IHandle(Of ReplicationMessage.AckLogPosition), IHandle(Of StorageMessage.PrepareAck), IHandle(Of StorageMessage.CommitAck), IHandle(Of ClientMessage.TcpForwardMessage)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.AckLogPosition}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TcpForwardMessage}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.Replication.ReplicaService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Replication.ReplicaService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.Replication.ReplicaService.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Services.Storage.EpochManager.IEpochManager,EventStore.Core.Bus.IPublisher,EventStore.Core.Authentication.IAuthenticationProvider,EventStore.Core.Data.VNodeInfo,System.Boolean,System.String,System.Boolean,TimeSpan,TimeSpan)
  commentId: M:EventStore.Core.Services.Replication.ReplicaService.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Services.Storage.EpochManager.IEpochManager,EventStore.Core.Bus.IPublisher,EventStore.Core.Authentication.IAuthenticationProvider,EventStore.Core.Data.VNodeInfo,System.Boolean,System.String,System.Boolean,TimeSpan,TimeSpan)
  id: '#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Services.Storage.EpochManager.IEpochManager,EventStore.Core.Bus.IPublisher,EventStore.Core.Authentication.IAuthenticationProvider,EventStore.Core.Data.VNodeInfo,System.Boolean,System.String,System.Boolean,TimeSpan,TimeSpan)'
  parent: EventStore.Core.Services.Replication.ReplicaService
  langs:
  - csharp
  - vb
  name: ReplicaService(IPublisher, TFChunkDb, IEpochManager, IPublisher, IAuthenticationProvider, VNodeInfo, Boolean, String, Boolean, TimeSpan, TimeSpan)
  nameWithType: ReplicaService.ReplicaService(IPublisher, TFChunkDb, IEpochManager, IPublisher, IAuthenticationProvider, VNodeInfo, Boolean, String, Boolean, TimeSpan, TimeSpan)
  fullName: EventStore.Core.Services.Replication.ReplicaService.ReplicaService(EventStore.Core.Bus.IPublisher, EventStore.Core.TransactionLog.Chunks.TFChunkDb, EventStore.Core.Services.Storage.EpochManager.IEpochManager, EventStore.Core.Bus.IPublisher, EventStore.Core.Authentication.IAuthenticationProvider, EventStore.Core.Data.VNodeInfo, System.Boolean, System.String, System.Boolean, TimeSpan, TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/ReplicaService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/Replication/ReplicaService.cs
    startLine: 51
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public ReplicaService(IPublisher publisher, TFChunkDb db, IEpochManager epochManager, IPublisher networkSendQueue, IAuthenticationProvider authProvider, VNodeInfo nodeInfo, bool useSsl, string sslTargetHost, bool sslValidateServer, TimeSpan heartbeatTimeout, TimeSpan heartbeatInterval)
    parameters:
    - id: publisher
      type: EventStore.Core.Bus.IPublisher
    - id: db
      type: EventStore.Core.TransactionLog.Chunks.TFChunkDb
    - id: epochManager
      type: EventStore.Core.Services.Storage.EpochManager.IEpochManager
    - id: networkSendQueue
      type: EventStore.Core.Bus.IPublisher
    - id: authProvider
      type: EventStore.Core.Authentication.IAuthenticationProvider
    - id: nodeInfo
      type: EventStore.Core.Data.VNodeInfo
    - id: useSsl
      type: System.Boolean
    - id: sslTargetHost
      type: System.String
    - id: sslValidateServer
      type: System.Boolean
    - id: heartbeatTimeout
      type: TimeSpan
    - id: heartbeatInterval
      type: TimeSpan
    content.vb: Public Sub New(publisher As IPublisher, db As TFChunkDb, epochManager As IEpochManager, networkSendQueue As IPublisher, authProvider As IAuthenticationProvider, nodeInfo As VNodeInfo, useSsl As Boolean, sslTargetHost As String, sslValidateServer As Boolean, heartbeatTimeout As TimeSpan, heartbeatInterval As TimeSpan)
  overload: EventStore.Core.Services.Replication.ReplicaService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  id: Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Services.Replication.ReplicaService
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: ReplicaService.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/ReplicaService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Replication/ReplicaService.cs
    startLine: 87
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public void Handle(SystemMessage.StateChangeMessage message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    content.vb: Public Sub Handle(message As SystemMessage.StateChangeMessage)
  overload: EventStore.Core.Services.Replication.ReplicaService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster)
  commentId: M:EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster)
  id: Handle(EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster)
  parent: EventStore.Core.Services.Replication.ReplicaService
  langs:
  - csharp
  - vb
  name: Handle(ReplicationMessage.ReconnectToMaster)
  nameWithType: ReplicaService.Handle(ReplicationMessage.ReconnectToMaster)
  fullName: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/ReplicaService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Replication/ReplicaService.cs
    startLine: 140
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public void Handle(ReplicationMessage.ReconnectToMaster message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster
    content.vb: Public Sub Handle(message As ReplicationMessage.ReconnectToMaster)
  overload: EventStore.Core.Services.Replication.ReplicaService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster}.Handle(EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster)
  commentId: M:EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster)
  id: Handle(EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster)
  parent: EventStore.Core.Services.Replication.ReplicaService
  langs:
  - csharp
  - vb
  name: Handle(ReplicationMessage.SubscribeToMaster)
  nameWithType: ReplicaService.Handle(ReplicationMessage.SubscribeToMaster)
  fullName: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/ReplicaService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Replication/ReplicaService.cs
    startLine: 181
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public void Handle(ReplicationMessage.SubscribeToMaster message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster
    content.vb: Public Sub Handle(message As ReplicationMessage.SubscribeToMaster)
  overload: EventStore.Core.Services.Replication.ReplicaService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster}.Handle(EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ReplicationMessage.AckLogPosition)
  commentId: M:EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ReplicationMessage.AckLogPosition)
  id: Handle(EventStore.Core.Messages.ReplicationMessage.AckLogPosition)
  parent: EventStore.Core.Services.Replication.ReplicaService
  langs:
  - csharp
  - vb
  name: Handle(ReplicationMessage.AckLogPosition)
  nameWithType: ReplicaService.Handle(ReplicationMessage.AckLogPosition)
  fullName: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ReplicationMessage.AckLogPosition)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/ReplicaService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Replication/ReplicaService.cs
    startLine: 202
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public void Handle(ReplicationMessage.AckLogPosition message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ReplicationMessage.AckLogPosition
    content.vb: Public Sub Handle(message As ReplicationMessage.AckLogPosition)
  overload: EventStore.Core.Services.Replication.ReplicaService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.AckLogPosition}.Handle(EventStore.Core.Messages.ReplicationMessage.AckLogPosition)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  commentId: M:EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  id: Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  parent: EventStore.Core.Services.Replication.ReplicaService
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.PrepareAck)
  nameWithType: ReplicaService.Handle(StorageMessage.PrepareAck)
  fullName: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/ReplicaService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Replication/ReplicaService.cs
    startLine: 209
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public void Handle(StorageMessage.PrepareAck message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.PrepareAck
    content.vb: Public Sub Handle(message As StorageMessage.PrepareAck)
  overload: EventStore.Core.Services.Replication.ReplicaService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  commentId: M:EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  id: Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  parent: EventStore.Core.Services.Replication.ReplicaService
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.CommitAck)
  nameWithType: ReplicaService.Handle(StorageMessage.CommitAck)
  fullName: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/ReplicaService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Replication/ReplicaService.cs
    startLine: 218
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public void Handle(StorageMessage.CommitAck message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.CommitAck
    content.vb: Public Sub Handle(message As StorageMessage.CommitAck)
  overload: EventStore.Core.Services.Replication.ReplicaService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ClientMessage.TcpForwardMessage)
  commentId: M:EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ClientMessage.TcpForwardMessage)
  id: Handle(EventStore.Core.Messages.ClientMessage.TcpForwardMessage)
  parent: EventStore.Core.Services.Replication.ReplicaService
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.TcpForwardMessage)
  nameWithType: ReplicaService.Handle(ClientMessage.TcpForwardMessage)
  fullName: EventStore.Core.Services.Replication.ReplicaService.Handle(EventStore.Core.Messages.ClientMessage.TcpForwardMessage)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Replication/ReplicaService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Replication/ReplicaService.cs
    startLine: 227
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Replication
  syntax:
    content: public void Handle(ClientMessage.TcpForwardMessage message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ClientMessage.TcpForwardMessage
    content.vb: Public Sub Handle(message As ClientMessage.TcpForwardMessage)
  overload: EventStore.Core.Services.Replication.ReplicaService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TcpForwardMessage}.Handle(EventStore.Core.Messages.ClientMessage.TcpForwardMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.Replication
  commentId: N:EventStore.Core.Services.Replication
  name: EventStore.Core.Services.Replication
  nameWithType: EventStore.Core.Services.Replication
  fullName: EventStore.Core.Services.Replication
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.StateChangeMessage>
  nameWithType: IHandle<SystemMessage.StateChangeMessage>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  name.vb: IHandle(Of SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ReplicationMessage.ReconnectToMaster>
  nameWithType: IHandle<ReplicationMessage.ReconnectToMaster>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster>
  nameWithType.vb: IHandle(Of ReplicationMessage.ReconnectToMaster)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster)
  name.vb: IHandle(Of ReplicationMessage.ReconnectToMaster)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster
    name: ReplicationMessage.ReconnectToMaster
    nameWithType: ReplicationMessage.ReconnectToMaster
    fullName: EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster
    name: ReplicationMessage.ReconnectToMaster
    nameWithType: ReplicationMessage.ReconnectToMaster
    fullName: EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ReplicationMessage.SubscribeToMaster>
  nameWithType: IHandle<ReplicationMessage.SubscribeToMaster>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster>
  nameWithType.vb: IHandle(Of ReplicationMessage.SubscribeToMaster)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster)
  name.vb: IHandle(Of ReplicationMessage.SubscribeToMaster)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster
    name: ReplicationMessage.SubscribeToMaster
    nameWithType: ReplicationMessage.SubscribeToMaster
    fullName: EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster
    name: ReplicationMessage.SubscribeToMaster
    nameWithType: ReplicationMessage.SubscribeToMaster
    fullName: EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.AckLogPosition}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.AckLogPosition}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ReplicationMessage.AckLogPosition>
  nameWithType: IHandle<ReplicationMessage.AckLogPosition>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.AckLogPosition>
  nameWithType.vb: IHandle(Of ReplicationMessage.AckLogPosition)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.AckLogPosition)
  name.vb: IHandle(Of ReplicationMessage.AckLogPosition)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ReplicationMessage.AckLogPosition
    name: ReplicationMessage.AckLogPosition
    nameWithType: ReplicationMessage.AckLogPosition
    fullName: EventStore.Core.Messages.ReplicationMessage.AckLogPosition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ReplicationMessage.AckLogPosition
    name: ReplicationMessage.AckLogPosition
    nameWithType: ReplicationMessage.AckLogPosition
    fullName: EventStore.Core.Messages.ReplicationMessage.AckLogPosition
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.PrepareAck>
  nameWithType: IHandle<StorageMessage.PrepareAck>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.PrepareAck>
  nameWithType.vb: IHandle(Of StorageMessage.PrepareAck)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.PrepareAck)
  name.vb: IHandle(Of StorageMessage.PrepareAck)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.CommitAck>
  nameWithType: IHandle<StorageMessage.CommitAck>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CommitAck>
  nameWithType.vb: IHandle(Of StorageMessage.CommitAck)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CommitAck)
  name.vb: IHandle(Of StorageMessage.CommitAck)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.CommitAck
    name: StorageMessage.CommitAck
    nameWithType: StorageMessage.CommitAck
    fullName: EventStore.Core.Messages.StorageMessage.CommitAck
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.CommitAck
    name: StorageMessage.CommitAck
    nameWithType: StorageMessage.CommitAck
    fullName: EventStore.Core.Messages.StorageMessage.CommitAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TcpForwardMessage}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TcpForwardMessage}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.TcpForwardMessage>
  nameWithType: IHandle<ClientMessage.TcpForwardMessage>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TcpForwardMessage>
  nameWithType.vb: IHandle(Of ClientMessage.TcpForwardMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TcpForwardMessage)
  name.vb: IHandle(Of ClientMessage.TcpForwardMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.TcpForwardMessage
    name: ClientMessage.TcpForwardMessage
    nameWithType: ClientMessage.TcpForwardMessage
    fullName: EventStore.Core.Messages.ClientMessage.TcpForwardMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.TcpForwardMessage
    name: ClientMessage.TcpForwardMessage
    nameWithType: ClientMessage.TcpForwardMessage
    fullName: EventStore.Core.Messages.ClientMessage.TcpForwardMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Replication.ReplicaService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ReplicaService>()
  nameWithType: ProtobufExtensions.Serialize<ReplicaService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Replication.ReplicaService>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ReplicaService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Replication.ReplicaService)()
  name.vb: Serialize(Of ReplicaService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ReplicaService>
    nameWithType: ProtobufExtensions.Serialize<ReplicaService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Replication.ReplicaService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ReplicaService)
    nameWithType: ProtobufExtensions.Serialize(Of ReplicaService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Replication.ReplicaService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Replication.ReplicaService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ReplicaService>()
  nameWithType: ProtobufExtensions.SerializeToArray<ReplicaService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Replication.ReplicaService>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ReplicaService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Replication.ReplicaService)()
  name.vb: SerializeToArray(Of ReplicaService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ReplicaService>
    nameWithType: ProtobufExtensions.SerializeToArray<ReplicaService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Replication.ReplicaService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ReplicaService)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ReplicaService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Replication.ReplicaService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.Replication.ReplicaService.#ctor*
  commentId: Overload:EventStore.Core.Services.Replication.ReplicaService.#ctor
  name: ReplicaService
  nameWithType: ReplicaService.ReplicaService
  fullName: EventStore.Core.Services.Replication.ReplicaService.ReplicaService
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkDb
  commentId: T:EventStore.Core.TransactionLog.Chunks.TFChunkDb
  parent: EventStore.Core.TransactionLog.Chunks
  name: TFChunkDb
  nameWithType: TFChunkDb
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkDb
- uid: EventStore.Core.Services.Storage.EpochManager.IEpochManager
  commentId: T:EventStore.Core.Services.Storage.EpochManager.IEpochManager
  parent: EventStore.Core.Services.Storage.EpochManager
  name: IEpochManager
  nameWithType: IEpochManager
  fullName: EventStore.Core.Services.Storage.EpochManager.IEpochManager
- uid: EventStore.Core.Authentication.IAuthenticationProvider
  commentId: T:EventStore.Core.Authentication.IAuthenticationProvider
  parent: EventStore.Core.Authentication
  name: IAuthenticationProvider
  nameWithType: IAuthenticationProvider
  fullName: EventStore.Core.Authentication.IAuthenticationProvider
- uid: EventStore.Core.Data.VNodeInfo
  commentId: T:EventStore.Core.Data.VNodeInfo
  parent: EventStore.Core.Data
  name: VNodeInfo
  nameWithType: VNodeInfo
  fullName: EventStore.Core.Data.VNodeInfo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: EventStore.Core.TransactionLog.Chunks
  commentId: N:EventStore.Core.TransactionLog.Chunks
  name: EventStore.Core.TransactionLog.Chunks
  nameWithType: EventStore.Core.TransactionLog.Chunks
  fullName: EventStore.Core.TransactionLog.Chunks
- uid: EventStore.Core.Services.Storage.EpochManager
  commentId: N:EventStore.Core.Services.Storage.EpochManager
  name: EventStore.Core.Services.Storage.EpochManager
  nameWithType: EventStore.Core.Services.Storage.EpochManager
  fullName: EventStore.Core.Services.Storage.EpochManager
- uid: EventStore.Core.Authentication
  commentId: N:EventStore.Core.Authentication
  name: EventStore.Core.Authentication
  nameWithType: EventStore.Core.Authentication
  fullName: EventStore.Core.Authentication
- uid: EventStore.Core.Data
  commentId: N:EventStore.Core.Data
  name: EventStore.Core.Data
  nameWithType: EventStore.Core.Data
  fullName: EventStore.Core.Data
- uid: EventStore.Core.Services.Replication.ReplicaService.Handle*
  commentId: Overload:EventStore.Core.Services.Replication.ReplicaService.Handle
  name: Handle
  nameWithType: ReplicaService.Handle
  fullName: EventStore.Core.Services.Replication.ReplicaService.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: IHandle<SystemMessage.StateChangeMessage>.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage).Handle(SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage).Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.StateChangeMessage>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.StateChangeMessage).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  commentId: T:EventStore.Core.Messages.SystemMessage.StateChangeMessage
  parent: EventStore.Core.Messages
  name: SystemMessage.StateChangeMessage
  nameWithType: SystemMessage.StateChangeMessage
  fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster}.Handle(EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster}.Handle(EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ReplicationMessage.ReconnectToMaster)
  nameWithType: IHandle<ReplicationMessage.ReconnectToMaster>.Handle(ReplicationMessage.ReconnectToMaster)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster>.Handle(EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster)
  nameWithType.vb: IHandle(Of ReplicationMessage.ReconnectToMaster).Handle(ReplicationMessage.ReconnectToMaster)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster).Handle(EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ReplicationMessage.ReconnectToMaster>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster
    name: ReplicationMessage.ReconnectToMaster
    nameWithType: ReplicationMessage.ReconnectToMaster
    fullName: EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ReplicationMessage.ReconnectToMaster).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster
    name: ReplicationMessage.ReconnectToMaster
    nameWithType: ReplicationMessage.ReconnectToMaster
    fullName: EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster
  commentId: T:EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster
  parent: EventStore.Core.Messages
  name: ReplicationMessage.ReconnectToMaster
  nameWithType: ReplicationMessage.ReconnectToMaster
  fullName: EventStore.Core.Messages.ReplicationMessage.ReconnectToMaster
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster}.Handle(EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster}.Handle(EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ReplicationMessage.SubscribeToMaster)
  nameWithType: IHandle<ReplicationMessage.SubscribeToMaster>.Handle(ReplicationMessage.SubscribeToMaster)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster>.Handle(EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster)
  nameWithType.vb: IHandle(Of ReplicationMessage.SubscribeToMaster).Handle(ReplicationMessage.SubscribeToMaster)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster).Handle(EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ReplicationMessage.SubscribeToMaster>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster
    name: ReplicationMessage.SubscribeToMaster
    nameWithType: ReplicationMessage.SubscribeToMaster
    fullName: EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ReplicationMessage.SubscribeToMaster).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster
    name: ReplicationMessage.SubscribeToMaster
    nameWithType: ReplicationMessage.SubscribeToMaster
    fullName: EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster
  commentId: T:EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster
  parent: EventStore.Core.Messages
  name: ReplicationMessage.SubscribeToMaster
  nameWithType: ReplicationMessage.SubscribeToMaster
  fullName: EventStore.Core.Messages.ReplicationMessage.SubscribeToMaster
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.AckLogPosition}.Handle(EventStore.Core.Messages.ReplicationMessage.AckLogPosition)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.AckLogPosition}.Handle(EventStore.Core.Messages.ReplicationMessage.AckLogPosition)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ReplicationMessage.AckLogPosition}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ReplicationMessage.AckLogPosition)
  nameWithType: IHandle<ReplicationMessage.AckLogPosition>.Handle(ReplicationMessage.AckLogPosition)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.AckLogPosition>.Handle(EventStore.Core.Messages.ReplicationMessage.AckLogPosition)
  nameWithType.vb: IHandle(Of ReplicationMessage.AckLogPosition).Handle(ReplicationMessage.AckLogPosition)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.AckLogPosition).Handle(EventStore.Core.Messages.ReplicationMessage.AckLogPosition)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ReplicationMessage.AckLogPosition>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ReplicationMessage.AckLogPosition>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.AckLogPosition
    name: ReplicationMessage.AckLogPosition
    nameWithType: ReplicationMessage.AckLogPosition
    fullName: EventStore.Core.Messages.ReplicationMessage.AckLogPosition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ReplicationMessage.AckLogPosition).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ReplicationMessage.AckLogPosition).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ReplicationMessage.AckLogPosition
    name: ReplicationMessage.AckLogPosition
    nameWithType: ReplicationMessage.AckLogPosition
    fullName: EventStore.Core.Messages.ReplicationMessage.AckLogPosition
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ReplicationMessage.AckLogPosition
  commentId: T:EventStore.Core.Messages.ReplicationMessage.AckLogPosition
  parent: EventStore.Core.Messages
  name: ReplicationMessage.AckLogPosition
  nameWithType: ReplicationMessage.AckLogPosition
  fullName: EventStore.Core.Messages.ReplicationMessage.AckLogPosition
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.PrepareAck)
  nameWithType: IHandle<StorageMessage.PrepareAck>.Handle(StorageMessage.PrepareAck)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.PrepareAck>.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  nameWithType.vb: IHandle(Of StorageMessage.PrepareAck).Handle(StorageMessage.PrepareAck)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.PrepareAck).Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.PrepareAck>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.PrepareAck>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.PrepareAck).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.PrepareAck).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.PrepareAck
  commentId: T:EventStore.Core.Messages.StorageMessage.PrepareAck
  parent: EventStore.Core.Messages
  name: StorageMessage.PrepareAck
  nameWithType: StorageMessage.PrepareAck
  fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.CommitAck)
  nameWithType: IHandle<StorageMessage.CommitAck>.Handle(StorageMessage.CommitAck)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CommitAck>.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  nameWithType.vb: IHandle(Of StorageMessage.CommitAck).Handle(StorageMessage.CommitAck)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CommitAck).Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.CommitAck>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CommitAck>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CommitAck
    name: StorageMessage.CommitAck
    nameWithType: StorageMessage.CommitAck
    fullName: EventStore.Core.Messages.StorageMessage.CommitAck
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.CommitAck).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CommitAck).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CommitAck
    name: StorageMessage.CommitAck
    nameWithType: StorageMessage.CommitAck
    fullName: EventStore.Core.Messages.StorageMessage.CommitAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.CommitAck
  commentId: T:EventStore.Core.Messages.StorageMessage.CommitAck
  parent: EventStore.Core.Messages
  name: StorageMessage.CommitAck
  nameWithType: StorageMessage.CommitAck
  fullName: EventStore.Core.Messages.StorageMessage.CommitAck
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TcpForwardMessage}.Handle(EventStore.Core.Messages.ClientMessage.TcpForwardMessage)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TcpForwardMessage}.Handle(EventStore.Core.Messages.ClientMessage.TcpForwardMessage)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TcpForwardMessage}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.TcpForwardMessage)
  nameWithType: IHandle<ClientMessage.TcpForwardMessage>.Handle(ClientMessage.TcpForwardMessage)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TcpForwardMessage>.Handle(EventStore.Core.Messages.ClientMessage.TcpForwardMessage)
  nameWithType.vb: IHandle(Of ClientMessage.TcpForwardMessage).Handle(ClientMessage.TcpForwardMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TcpForwardMessage).Handle(EventStore.Core.Messages.ClientMessage.TcpForwardMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.TcpForwardMessage>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TcpForwardMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TcpForwardMessage
    name: ClientMessage.TcpForwardMessage
    nameWithType: ClientMessage.TcpForwardMessage
    fullName: EventStore.Core.Messages.ClientMessage.TcpForwardMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.TcpForwardMessage).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TcpForwardMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TcpForwardMessage
    name: ClientMessage.TcpForwardMessage
    nameWithType: ClientMessage.TcpForwardMessage
    fullName: EventStore.Core.Messages.ClientMessage.TcpForwardMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.TcpForwardMessage
  commentId: T:EventStore.Core.Messages.ClientMessage.TcpForwardMessage
  parent: EventStore.Core.Messages
  name: ClientMessage.TcpForwardMessage
  nameWithType: ClientMessage.TcpForwardMessage
  fullName: EventStore.Core.Messages.ClientMessage.TcpForwardMessage

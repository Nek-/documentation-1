### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager
  commentId: T:EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager
  id: SingleAckRequestManager
  parent: EventStore.Core.Services.RequestManager.Managers
  children:
  - EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.#ctor(EventStore.Core.Bus.IPublisher,TimeSpan,System.Boolean)
  - EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  - EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  - EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  - EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.InvalidTransaction)
  - EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  - EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  - EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  - EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  langs:
  - csharp
  - vb
  name: SingleAckRequestManager
  nameWithType: SingleAckRequestManager
  fullName: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: SingleAckRequestManager
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
    startLine: 11
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: 'public class SingleAckRequestManager : object, IRequestManager, IHandle<ClientMessage.TransactionStart>, IHandle<ClientMessage.TransactionWrite>, IHandle<StorageMessage.CheckStreamAccessCompleted>, IHandle<StorageMessage.PrepareAck>, IHandle<StorageMessage.WrongExpectedVersion>, IHandle<StorageMessage.InvalidTransaction>, IHandle<StorageMessage.StreamDeleted>, IHandle<StorageMessage.RequestManagerTimerTick>'
    content.vb: >-
      Public Class SingleAckRequestManager
          Inherits Object
          Implements IRequestManager, IHandle(Of ClientMessage.TransactionStart), IHandle(Of ClientMessage.TransactionWrite), IHandle(Of StorageMessage.CheckStreamAccessCompleted), IHandle(Of StorageMessage.PrepareAck), IHandle(Of StorageMessage.WrongExpectedVersion), IHandle(Of StorageMessage.InvalidTransaction), IHandle(Of StorageMessage.StreamDeleted), IHandle(Of StorageMessage.RequestManagerTimerTick)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Services.RequestManager.IRequestManager
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.InvalidTransaction}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.#ctor(EventStore.Core.Bus.IPublisher,TimeSpan,System.Boolean)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.#ctor(EventStore.Core.Bus.IPublisher,TimeSpan,System.Boolean)
  id: '#ctor(EventStore.Core.Bus.IPublisher,TimeSpan,System.Boolean)'
  parent: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager
  langs:
  - csharp
  - vb
  name: SingleAckRequestManager(IPublisher, TimeSpan, Boolean)
  nameWithType: SingleAckRequestManager.SingleAckRequestManager(IPublisher, TimeSpan, Boolean)
  fullName: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.SingleAckRequestManager(EventStore.Core.Bus.IPublisher, TimeSpan, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
    startLine: 38
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public SingleAckRequestManager(IPublisher bus, TimeSpan prepareTimeout, bool betterOrdering)
    parameters:
    - id: bus
      type: EventStore.Core.Bus.IPublisher
    - id: prepareTimeout
      type: TimeSpan
    - id: betterOrdering
      type: System.Boolean
    content.vb: Public Sub New(bus As IPublisher, prepareTimeout As TimeSpan, betterOrdering As Boolean)
  overload: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  id: Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  parent: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.TransactionStart)
  nameWithType: SingleAckRequestManager.Handle(ClientMessage.TransactionStart)
  fullName: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
    startLine: 48
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(ClientMessage.TransactionStart request)
    parameters:
    - id: request
      type: EventStore.Core.Messages.ClientMessage.TransactionStart
    content.vb: Public Sub Handle(request As ClientMessage.TransactionStart)
  overload: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  id: Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  parent: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.CheckStreamAccessCompleted)
  nameWithType: SingleAckRequestManager.Handle(StorageMessage.CheckStreamAccessCompleted)
  fullName: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
    startLine: 68
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(StorageMessage.CheckStreamAccessCompleted message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    content.vb: Public Sub Handle(message As StorageMessage.CheckStreamAccessCompleted)
  overload: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  id: Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  parent: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.TransactionWrite)
  nameWithType: SingleAckRequestManager.Handle(ClientMessage.TransactionWrite)
  fullName: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
    startLine: 86
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(ClientMessage.TransactionWrite request)
    parameters:
    - id: request
      type: EventStore.Core.Messages.ClientMessage.TransactionWrite
    content.vb: Public Sub Handle(request As ClientMessage.TransactionWrite)
  overload: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  id: Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  parent: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.PrepareAck)
  nameWithType: SingleAckRequestManager.Handle(StorageMessage.PrepareAck)
  fullName: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
    startLine: 103
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(StorageMessage.PrepareAck message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.PrepareAck
    content.vb: Public Sub Handle(message As StorageMessage.PrepareAck)
  overload: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  id: Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  parent: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.WrongExpectedVersion)
  nameWithType: SingleAckRequestManager.Handle(StorageMessage.WrongExpectedVersion)
  fullName: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
    startLine: 114
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(StorageMessage.WrongExpectedVersion message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    content.vb: Public Sub Handle(message As StorageMessage.WrongExpectedVersion)
  overload: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.InvalidTransaction)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.InvalidTransaction)
  id: Handle(EventStore.Core.Messages.StorageMessage.InvalidTransaction)
  parent: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.InvalidTransaction)
  nameWithType: SingleAckRequestManager.Handle(StorageMessage.InvalidTransaction)
  fullName: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.InvalidTransaction)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
    startLine: 119
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(StorageMessage.InvalidTransaction message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.InvalidTransaction
    content.vb: Public Sub Handle(message As StorageMessage.InvalidTransaction)
  overload: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.InvalidTransaction}.Handle(EventStore.Core.Messages.StorageMessage.InvalidTransaction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  id: Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  parent: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.StreamDeleted)
  nameWithType: SingleAckRequestManager.Handle(StorageMessage.StreamDeleted)
  fullName: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
    startLine: 124
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(StorageMessage.StreamDeleted message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.StreamDeleted
    content.vb: Public Sub Handle(message As StorageMessage.StreamDeleted)
  overload: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  id: Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  parent: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.RequestManagerTimerTick)
  nameWithType: SingleAckRequestManager.Handle(StorageMessage.RequestManagerTimerTick)
  fullName: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/RequestManager/Managers/SingleAckRequestManager.cs
    startLine: 129
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(StorageMessage.RequestManagerTimerTick message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    content.vb: Public Sub Handle(message As StorageMessage.RequestManagerTimerTick)
  overload: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.RequestManager.Managers
  commentId: N:EventStore.Core.Services.RequestManager.Managers
  name: EventStore.Core.Services.RequestManager.Managers
  nameWithType: EventStore.Core.Services.RequestManager.Managers
  fullName: EventStore.Core.Services.RequestManager.Managers
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Services.RequestManager.IRequestManager
  commentId: T:EventStore.Core.Services.RequestManager.IRequestManager
  parent: EventStore.Core.Services.RequestManager
  name: IRequestManager
  nameWithType: IRequestManager
  fullName: EventStore.Core.Services.RequestManager.IRequestManager
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.TransactionStart>
  nameWithType: IHandle<ClientMessage.TransactionStart>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionStart>
  nameWithType.vb: IHandle(Of ClientMessage.TransactionStart)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionStart)
  name.vb: IHandle(Of ClientMessage.TransactionStart)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.TransactionStart
    name: ClientMessage.TransactionStart
    nameWithType: ClientMessage.TransactionStart
    fullName: EventStore.Core.Messages.ClientMessage.TransactionStart
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.TransactionStart
    name: ClientMessage.TransactionStart
    nameWithType: ClientMessage.TransactionStart
    fullName: EventStore.Core.Messages.ClientMessage.TransactionStart
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.TransactionWrite>
  nameWithType: IHandle<ClientMessage.TransactionWrite>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionWrite>
  nameWithType.vb: IHandle(Of ClientMessage.TransactionWrite)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionWrite)
  name.vb: IHandle(Of ClientMessage.TransactionWrite)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.TransactionWrite
    name: ClientMessage.TransactionWrite
    nameWithType: ClientMessage.TransactionWrite
    fullName: EventStore.Core.Messages.ClientMessage.TransactionWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.TransactionWrite
    name: ClientMessage.TransactionWrite
    nameWithType: ClientMessage.TransactionWrite
    fullName: EventStore.Core.Messages.ClientMessage.TransactionWrite
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.CheckStreamAccessCompleted>
  nameWithType: IHandle<StorageMessage.CheckStreamAccessCompleted>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted>
  nameWithType.vb: IHandle(Of StorageMessage.CheckStreamAccessCompleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  name.vb: IHandle(Of StorageMessage.CheckStreamAccessCompleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    name: StorageMessage.CheckStreamAccessCompleted
    nameWithType: StorageMessage.CheckStreamAccessCompleted
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    name: StorageMessage.CheckStreamAccessCompleted
    nameWithType: StorageMessage.CheckStreamAccessCompleted
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.PrepareAck>
  nameWithType: IHandle<StorageMessage.PrepareAck>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.PrepareAck>
  nameWithType.vb: IHandle(Of StorageMessage.PrepareAck)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.PrepareAck)
  name.vb: IHandle(Of StorageMessage.PrepareAck)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.WrongExpectedVersion>
  nameWithType: IHandle<StorageMessage.WrongExpectedVersion>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WrongExpectedVersion>
  nameWithType.vb: IHandle(Of StorageMessage.WrongExpectedVersion)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  name.vb: IHandle(Of StorageMessage.WrongExpectedVersion)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    name: StorageMessage.WrongExpectedVersion
    nameWithType: StorageMessage.WrongExpectedVersion
    fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    name: StorageMessage.WrongExpectedVersion
    nameWithType: StorageMessage.WrongExpectedVersion
    fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.InvalidTransaction}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.InvalidTransaction}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.InvalidTransaction>
  nameWithType: IHandle<StorageMessage.InvalidTransaction>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.InvalidTransaction>
  nameWithType.vb: IHandle(Of StorageMessage.InvalidTransaction)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.InvalidTransaction)
  name.vb: IHandle(Of StorageMessage.InvalidTransaction)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.InvalidTransaction
    name: StorageMessage.InvalidTransaction
    nameWithType: StorageMessage.InvalidTransaction
    fullName: EventStore.Core.Messages.StorageMessage.InvalidTransaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.InvalidTransaction
    name: StorageMessage.InvalidTransaction
    nameWithType: StorageMessage.InvalidTransaction
    fullName: EventStore.Core.Messages.StorageMessage.InvalidTransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.StreamDeleted>
  nameWithType: IHandle<StorageMessage.StreamDeleted>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.StreamDeleted>
  nameWithType.vb: IHandle(Of StorageMessage.StreamDeleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.StreamDeleted)
  name.vb: IHandle(Of StorageMessage.StreamDeleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
    name: StorageMessage.StreamDeleted
    nameWithType: StorageMessage.StreamDeleted
    fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
    name: StorageMessage.StreamDeleted
    nameWithType: StorageMessage.StreamDeleted
    fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.RequestManagerTimerTick>
  nameWithType: IHandle<StorageMessage.RequestManagerTimerTick>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick>
  nameWithType.vb: IHandle(Of StorageMessage.RequestManagerTimerTick)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  name.vb: IHandle(Of StorageMessage.RequestManagerTimerTick)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    name: StorageMessage.RequestManagerTimerTick
    nameWithType: StorageMessage.RequestManagerTimerTick
    fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    name: StorageMessage.RequestManagerTimerTick
    nameWithType: StorageMessage.RequestManagerTimerTick
    fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<SingleAckRequestManager>()
  nameWithType: ProtobufExtensions.Serialize<SingleAckRequestManager>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of SingleAckRequestManager)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager)()
  name.vb: Serialize(Of SingleAckRequestManager)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<SingleAckRequestManager>
    nameWithType: ProtobufExtensions.Serialize<SingleAckRequestManager>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of SingleAckRequestManager)
    nameWithType: ProtobufExtensions.Serialize(Of SingleAckRequestManager)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<SingleAckRequestManager>()
  nameWithType: ProtobufExtensions.SerializeToArray<SingleAckRequestManager>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of SingleAckRequestManager)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager)()
  name.vb: SerializeToArray(Of SingleAckRequestManager)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<SingleAckRequestManager>
    nameWithType: ProtobufExtensions.SerializeToArray<SingleAckRequestManager>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of SingleAckRequestManager)
    nameWithType: ProtobufExtensions.SerializeToArray(Of SingleAckRequestManager)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager
  commentId: N:EventStore.Core.Services.RequestManager
  name: EventStore.Core.Services.RequestManager
  nameWithType: EventStore.Core.Services.RequestManager
  fullName: EventStore.Core.Services.RequestManager
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.#ctor*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.#ctor
  name: SingleAckRequestManager
  nameWithType: SingleAckRequestManager.SingleAckRequestManager
  fullName: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.SingleAckRequestManager
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle
  name: Handle
  nameWithType: SingleAckRequestManager.Handle
  fullName: EventStore.Core.Services.RequestManager.Managers.SingleAckRequestManager.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionStart}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.TransactionStart)
  nameWithType: IHandle<ClientMessage.TransactionStart>.Handle(ClientMessage.TransactionStart)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionStart>.Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  nameWithType.vb: IHandle(Of ClientMessage.TransactionStart).Handle(ClientMessage.TransactionStart)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionStart).Handle(EventStore.Core.Messages.ClientMessage.TransactionStart)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.TransactionStart>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionStart>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TransactionStart
    name: ClientMessage.TransactionStart
    nameWithType: ClientMessage.TransactionStart
    fullName: EventStore.Core.Messages.ClientMessage.TransactionStart
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.TransactionStart).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionStart).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TransactionStart
    name: ClientMessage.TransactionStart
    nameWithType: ClientMessage.TransactionStart
    fullName: EventStore.Core.Messages.ClientMessage.TransactionStart
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.TransactionStart
  commentId: T:EventStore.Core.Messages.ClientMessage.TransactionStart
  parent: EventStore.Core.Messages
  name: ClientMessage.TransactionStart
  nameWithType: ClientMessage.TransactionStart
  fullName: EventStore.Core.Messages.ClientMessage.TransactionStart
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.CheckStreamAccessCompleted)
  nameWithType: IHandle<StorageMessage.CheckStreamAccessCompleted>.Handle(StorageMessage.CheckStreamAccessCompleted)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted>.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  nameWithType.vb: IHandle(Of StorageMessage.CheckStreamAccessCompleted).Handle(StorageMessage.CheckStreamAccessCompleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted).Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.CheckStreamAccessCompleted>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    name: StorageMessage.CheckStreamAccessCompleted
    nameWithType: StorageMessage.CheckStreamAccessCompleted
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.CheckStreamAccessCompleted).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    name: StorageMessage.CheckStreamAccessCompleted
    nameWithType: StorageMessage.CheckStreamAccessCompleted
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  commentId: T:EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  parent: EventStore.Core.Messages
  name: StorageMessage.CheckStreamAccessCompleted
  nameWithType: StorageMessage.CheckStreamAccessCompleted
  fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.TransactionWrite}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.TransactionWrite)
  nameWithType: IHandle<ClientMessage.TransactionWrite>.Handle(ClientMessage.TransactionWrite)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionWrite>.Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  nameWithType.vb: IHandle(Of ClientMessage.TransactionWrite).Handle(ClientMessage.TransactionWrite)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionWrite).Handle(EventStore.Core.Messages.ClientMessage.TransactionWrite)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.TransactionWrite>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.TransactionWrite>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TransactionWrite
    name: ClientMessage.TransactionWrite
    nameWithType: ClientMessage.TransactionWrite
    fullName: EventStore.Core.Messages.ClientMessage.TransactionWrite
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.TransactionWrite).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.TransactionWrite).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.TransactionWrite
    name: ClientMessage.TransactionWrite
    nameWithType: ClientMessage.TransactionWrite
    fullName: EventStore.Core.Messages.ClientMessage.TransactionWrite
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.TransactionWrite
  commentId: T:EventStore.Core.Messages.ClientMessage.TransactionWrite
  parent: EventStore.Core.Messages
  name: ClientMessage.TransactionWrite
  nameWithType: ClientMessage.TransactionWrite
  fullName: EventStore.Core.Messages.ClientMessage.TransactionWrite
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.PrepareAck)
  nameWithType: IHandle<StorageMessage.PrepareAck>.Handle(StorageMessage.PrepareAck)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.PrepareAck>.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  nameWithType.vb: IHandle(Of StorageMessage.PrepareAck).Handle(StorageMessage.PrepareAck)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.PrepareAck).Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.PrepareAck>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.PrepareAck>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.PrepareAck).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.PrepareAck).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.PrepareAck
  commentId: T:EventStore.Core.Messages.StorageMessage.PrepareAck
  parent: EventStore.Core.Messages
  name: StorageMessage.PrepareAck
  nameWithType: StorageMessage.PrepareAck
  fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.WrongExpectedVersion)
  nameWithType: IHandle<StorageMessage.WrongExpectedVersion>.Handle(StorageMessage.WrongExpectedVersion)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WrongExpectedVersion>.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  nameWithType.vb: IHandle(Of StorageMessage.WrongExpectedVersion).Handle(StorageMessage.WrongExpectedVersion)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.WrongExpectedVersion).Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.WrongExpectedVersion>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WrongExpectedVersion>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    name: StorageMessage.WrongExpectedVersion
    nameWithType: StorageMessage.WrongExpectedVersion
    fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.WrongExpectedVersion).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.WrongExpectedVersion).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    name: StorageMessage.WrongExpectedVersion
    nameWithType: StorageMessage.WrongExpectedVersion
    fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  commentId: T:EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  parent: EventStore.Core.Messages
  name: StorageMessage.WrongExpectedVersion
  nameWithType: StorageMessage.WrongExpectedVersion
  fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.InvalidTransaction}.Handle(EventStore.Core.Messages.StorageMessage.InvalidTransaction)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.InvalidTransaction}.Handle(EventStore.Core.Messages.StorageMessage.InvalidTransaction)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.InvalidTransaction}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.InvalidTransaction)
  nameWithType: IHandle<StorageMessage.InvalidTransaction>.Handle(StorageMessage.InvalidTransaction)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.InvalidTransaction>.Handle(EventStore.Core.Messages.StorageMessage.InvalidTransaction)
  nameWithType.vb: IHandle(Of StorageMessage.InvalidTransaction).Handle(StorageMessage.InvalidTransaction)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.InvalidTransaction).Handle(EventStore.Core.Messages.StorageMessage.InvalidTransaction)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.InvalidTransaction>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.InvalidTransaction>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.InvalidTransaction
    name: StorageMessage.InvalidTransaction
    nameWithType: StorageMessage.InvalidTransaction
    fullName: EventStore.Core.Messages.StorageMessage.InvalidTransaction
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.InvalidTransaction).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.InvalidTransaction).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.InvalidTransaction
    name: StorageMessage.InvalidTransaction
    nameWithType: StorageMessage.InvalidTransaction
    fullName: EventStore.Core.Messages.StorageMessage.InvalidTransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.InvalidTransaction
  commentId: T:EventStore.Core.Messages.StorageMessage.InvalidTransaction
  parent: EventStore.Core.Messages
  name: StorageMessage.InvalidTransaction
  nameWithType: StorageMessage.InvalidTransaction
  fullName: EventStore.Core.Messages.StorageMessage.InvalidTransaction
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.StreamDeleted)
  nameWithType: IHandle<StorageMessage.StreamDeleted>.Handle(StorageMessage.StreamDeleted)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.StreamDeleted>.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  nameWithType.vb: IHandle(Of StorageMessage.StreamDeleted).Handle(StorageMessage.StreamDeleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.StreamDeleted).Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.StreamDeleted>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.StreamDeleted>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
    name: StorageMessage.StreamDeleted
    nameWithType: StorageMessage.StreamDeleted
    fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.StreamDeleted).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.StreamDeleted).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
    name: StorageMessage.StreamDeleted
    nameWithType: StorageMessage.StreamDeleted
    fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
  commentId: T:EventStore.Core.Messages.StorageMessage.StreamDeleted
  parent: EventStore.Core.Messages
  name: StorageMessage.StreamDeleted
  nameWithType: StorageMessage.StreamDeleted
  fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.RequestManagerTimerTick)
  nameWithType: IHandle<StorageMessage.RequestManagerTimerTick>.Handle(StorageMessage.RequestManagerTimerTick)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick>.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  nameWithType.vb: IHandle(Of StorageMessage.RequestManagerTimerTick).Handle(StorageMessage.RequestManagerTimerTick)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick).Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.RequestManagerTimerTick>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    name: StorageMessage.RequestManagerTimerTick
    nameWithType: StorageMessage.RequestManagerTimerTick
    fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.RequestManagerTimerTick).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    name: StorageMessage.RequestManagerTimerTick
    nameWithType: StorageMessage.RequestManagerTimerTick
    fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  commentId: T:EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  parent: EventStore.Core.Messages
  name: StorageMessage.RequestManagerTimerTick
  nameWithType: StorageMessage.RequestManagerTimerTick
  fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  commentId: T:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  id: TwoPhaseRequestManagerBase
  parent: EventStore.Core.Services.RequestManager.Managers
  children:
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.#ctor(EventStore.Core.Bus.IPublisher,System.Int32,System.TimeSpan,System.TimeSpan,System.Boolean)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ClientCorrId
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CommitTimeout
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest(EventStore.Core.Messages.OperationResult,System.String,System.Int64)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest(System.Int64,System.Int64,System.Int64,System.Int64)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase(EventStore.Core.Messaging.IEnvelope,System.Guid,System.Guid,System.String,System.Security.Principal.IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase(EventStore.Core.Messaging.IEnvelope,System.Guid,System.Guid,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.NextTimeoutTime
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted(System.Guid)
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PrepareTimeout
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PublishEnvelope
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Publisher
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ResponseEnvelope
  langs:
  - csharp
  - vb
  name: TwoPhaseRequestManagerBase
  nameWithType: TwoPhaseRequestManagerBase
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  type: Class
  source:
    id: TwoPhaseRequestManagerBase
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 12
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: 'public abstract class TwoPhaseRequestManagerBase : IRequestManager, IHandle<StorageMessage.CheckStreamAccessCompleted>, IHandle<StorageMessage.AlreadyCommitted>, IHandle<StorageMessage.PrepareAck>, IHandle<StorageMessage.CommitReplicated>, IHandle<StorageMessage.WrongExpectedVersion>, IHandle<StorageMessage.StreamDeleted>, IHandle<StorageMessage.RequestManagerTimerTick>'
    content.vb: >-
      Public MustInherit Class TwoPhaseRequestManagerBase
          Implements IRequestManager, IHandle(Of StorageMessage.CheckStreamAccessCompleted), IHandle(Of StorageMessage.AlreadyCommitted), IHandle(Of StorageMessage.PrepareAck), IHandle(Of StorageMessage.CommitReplicated), IHandle(Of StorageMessage.WrongExpectedVersion), IHandle(Of StorageMessage.StreamDeleted), IHandle(Of StorageMessage.RequestManagerTimerTick)
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.Core.Services.RequestManager.Managers.DeleteStreamTwoPhaseRequestManager
  - EventStore.Core.Services.RequestManager.Managers.TransactionCommitTwoPhaseRequestManager
  - EventStore.Core.Services.RequestManager.Managers.WriteStreamTwoPhaseRequestManager
  implements:
  - EventStore.Core.Services.RequestManager.IRequestManager
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.AlreadyCommitted}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitReplicated}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Publisher
  commentId: F:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Publisher
  id: Publisher
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: Publisher
  nameWithType: TwoPhaseRequestManagerBase.Publisher
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Publisher
  type: Field
  source:
    id: Publisher
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 23
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected readonly IPublisher Publisher
    return:
      type: EventStore.Core.Bus.IPublisher
    content.vb: Protected ReadOnly Publisher As IPublisher
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PublishEnvelope
  commentId: F:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PublishEnvelope
  id: PublishEnvelope
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: PublishEnvelope
  nameWithType: TwoPhaseRequestManagerBase.PublishEnvelope
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PublishEnvelope
  type: Field
  source:
    id: PublishEnvelope
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 24
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected readonly IEnvelope PublishEnvelope
    return:
      type: EventStore.Core.Messaging.IEnvelope
    content.vb: Protected ReadOnly PublishEnvelope As IEnvelope
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ResponseEnvelope
  commentId: P:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ResponseEnvelope
  id: ResponseEnvelope
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: ResponseEnvelope
  nameWithType: TwoPhaseRequestManagerBase.ResponseEnvelope
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ResponseEnvelope
  type: Property
  source:
    id: ResponseEnvelope
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 26
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected IEnvelope ResponseEnvelope { get; }
    parameters: []
    return:
      type: EventStore.Core.Messaging.IEnvelope
    content.vb: Protected ReadOnly Property ResponseEnvelope As IEnvelope
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ResponseEnvelope*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ClientCorrId
  commentId: P:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ClientCorrId
  id: ClientCorrId
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: ClientCorrId
  nameWithType: TwoPhaseRequestManagerBase.ClientCorrId
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ClientCorrId
  type: Property
  source:
    id: ClientCorrId
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 30
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected Guid ClientCorrId { get; }
    parameters: []
    return:
      type: System.Guid
    content.vb: Protected ReadOnly Property ClientCorrId As Guid
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ClientCorrId*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.NextTimeoutTime
  commentId: P:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.NextTimeoutTime
  id: NextTimeoutTime
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: NextTimeoutTime
  nameWithType: TwoPhaseRequestManagerBase.NextTimeoutTime
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.NextTimeoutTime
  type: Property
  source:
    id: NextTimeoutTime
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 34
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected DateTime NextTimeoutTime { get; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Protected ReadOnly Property NextTimeoutTime As Date
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.NextTimeoutTime*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PrepareTimeout
  commentId: F:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PrepareTimeout
  id: PrepareTimeout
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: PrepareTimeout
  nameWithType: TwoPhaseRequestManagerBase.PrepareTimeout
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.PrepareTimeout
  type: Field
  source:
    id: PrepareTimeout
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 38
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected readonly TimeSpan PrepareTimeout
    return:
      type: System.TimeSpan
    content.vb: Protected ReadOnly PrepareTimeout As TimeSpan
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CommitTimeout
  commentId: F:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CommitTimeout
  id: CommitTimeout
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: CommitTimeout
  nameWithType: TwoPhaseRequestManagerBase.CommitTimeout
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CommitTimeout
  type: Field
  source:
    id: CommitTimeout
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 39
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected readonly TimeSpan CommitTimeout
    return:
      type: System.TimeSpan
    content.vb: Protected ReadOnly CommitTimeout As TimeSpan
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.#ctor(EventStore.Core.Bus.IPublisher,System.Int32,System.TimeSpan,System.TimeSpan,System.Boolean)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.#ctor(EventStore.Core.Bus.IPublisher,System.Int32,System.TimeSpan,System.TimeSpan,System.Boolean)
  id: '#ctor(EventStore.Core.Bus.IPublisher,System.Int32,System.TimeSpan,System.TimeSpan,System.Boolean)'
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: TwoPhaseRequestManagerBase(IPublisher, Int32, TimeSpan, TimeSpan, Boolean)
  nameWithType: TwoPhaseRequestManagerBase.TwoPhaseRequestManagerBase(IPublisher, Int32, TimeSpan, TimeSpan, Boolean)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.TwoPhaseRequestManagerBase(EventStore.Core.Bus.IPublisher, System.Int32, System.TimeSpan, System.TimeSpan, System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 52
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected TwoPhaseRequestManagerBase(IPublisher publisher, int prepareCount, TimeSpan prepareTimeout, TimeSpan commitTimeout, bool betterOrdering)
    parameters:
    - id: publisher
      type: EventStore.Core.Bus.IPublisher
    - id: prepareCount
      type: System.Int32
    - id: prepareTimeout
      type: System.TimeSpan
    - id: commitTimeout
      type: System.TimeSpan
    - id: betterOrdering
      type: System.Boolean
    content.vb: Protected Sub New(publisher As IPublisher, prepareCount As Integer, prepareTimeout As TimeSpan, commitTimeout As TimeSpan, betterOrdering As Boolean)
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted(System.Guid)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted(System.Guid)
  id: OnSecurityAccessGranted(System.Guid)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: OnSecurityAccessGranted(Guid)
  nameWithType: TwoPhaseRequestManagerBase.OnSecurityAccessGranted(Guid)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted(System.Guid)
  type: Method
  source:
    id: OnSecurityAccessGranted
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 70
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected abstract void OnSecurityAccessGranted(Guid internalCorrId)
    parameters:
    - id: internalCorrId
      type: System.Guid
    content.vb: Protected MustOverride Sub OnSecurityAccessGranted(internalCorrId As Guid)
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase(EventStore.Core.Messaging.IEnvelope,System.Guid,System.Guid,System.String,System.Security.Principal.IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase(EventStore.Core.Messaging.IEnvelope,System.Guid,System.Guid,System.String,System.Security.Principal.IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  id: InitNoPreparePhase(EventStore.Core.Messaging.IEnvelope,System.Guid,System.Guid,System.String,System.Security.Principal.IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: InitNoPreparePhase(IEnvelope, Guid, Guid, String, IPrincipal, StreamAccessType)
  nameWithType: TwoPhaseRequestManagerBase.InitNoPreparePhase(IEnvelope, Guid, Guid, String, IPrincipal, StreamAccessType)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase(EventStore.Core.Messaging.IEnvelope, System.Guid, System.Guid, System.String, System.Security.Principal.IPrincipal, EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  type: Method
  source:
    id: InitNoPreparePhase
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 72
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected void InitNoPreparePhase(IEnvelope responseEnvelope, Guid internalCorrId, Guid clientCorrId, string eventStreamId, IPrincipal user, StreamAccessType accessType)
    parameters:
    - id: responseEnvelope
      type: EventStore.Core.Messaging.IEnvelope
    - id: internalCorrId
      type: System.Guid
    - id: clientCorrId
      type: System.Guid
    - id: eventStreamId
      type: System.String
    - id: user
      type: System.Security.Principal.IPrincipal
    - id: accessType
      type: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
    content.vb: Protected Sub InitNoPreparePhase(responseEnvelope As IEnvelope, internalCorrId As Guid, clientCorrId As Guid, eventStreamId As String, user As IPrincipal, accessType As StreamAccessType)
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase(EventStore.Core.Messaging.IEnvelope,System.Guid,System.Guid,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase(EventStore.Core.Messaging.IEnvelope,System.Guid,System.Guid,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  id: InitTwoPhase(EventStore.Core.Messaging.IEnvelope,System.Guid,System.Guid,System.Int64,System.Security.Principal.IPrincipal,EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: InitTwoPhase(IEnvelope, Guid, Guid, Int64, IPrincipal, StreamAccessType)
  nameWithType: TwoPhaseRequestManagerBase.InitTwoPhase(IEnvelope, Guid, Guid, Int64, IPrincipal, StreamAccessType)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase(EventStore.Core.Messaging.IEnvelope, System.Guid, System.Guid, System.Int64, System.Security.Principal.IPrincipal, EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType)
  type: Method
  source:
    id: InitTwoPhase
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 89
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected void InitTwoPhase(IEnvelope responseEnvelope, Guid internalCorrId, Guid clientCorrId, long transactionId, IPrincipal user, StreamAccessType accessType)
    parameters:
    - id: responseEnvelope
      type: EventStore.Core.Messaging.IEnvelope
    - id: internalCorrId
      type: System.Guid
    - id: clientCorrId
      type: System.Guid
    - id: transactionId
      type: System.Int64
    - id: user
      type: System.Security.Principal.IPrincipal
    - id: accessType
      type: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
    content.vb: Protected Sub InitTwoPhase(responseEnvelope As IEnvelope, internalCorrId As Guid, clientCorrId As Guid, transactionId As Long, user As IPrincipal, accessType As StreamAccessType)
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  id: Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.CheckStreamAccessCompleted)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.CheckStreamAccessCompleted)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 107
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(StorageMessage.CheckStreamAccessCompleted message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    content.vb: Public Sub Handle(message As StorageMessage.CheckStreamAccessCompleted)
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  id: Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.WrongExpectedVersion)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.WrongExpectedVersion)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 114
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(StorageMessage.WrongExpectedVersion message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    content.vb: Public Sub Handle(message As StorageMessage.WrongExpectedVersion)
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  id: Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.StreamDeleted)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.StreamDeleted)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 122
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(StorageMessage.StreamDeleted message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.StreamDeleted
    content.vb: Public Sub Handle(message As StorageMessage.StreamDeleted)
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  id: Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.RequestManagerTimerTick)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.RequestManagerTimerTick)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 129
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(StorageMessage.RequestManagerTimerTick message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    content.vb: Public Sub Handle(message As StorageMessage.RequestManagerTimerTick)
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  id: Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.AlreadyCommitted)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.AlreadyCommitted)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 139
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(StorageMessage.AlreadyCommitted message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
    content.vb: Public Sub Handle(message As StorageMessage.AlreadyCommitted)
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.AlreadyCommitted}.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  id: Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.PrepareAck)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.PrepareAck)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 146
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(StorageMessage.PrepareAck message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.PrepareAck
    content.vb: Public Sub Handle(message As StorageMessage.PrepareAck)
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  id: Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.CommitReplicated)
  nameWithType: TwoPhaseRequestManagerBase.Handle(StorageMessage.CommitReplicated)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 163
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: public void Handle(StorageMessage.CommitReplicated message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.CommitReplicated
    content.vb: Public Sub Handle(message As StorageMessage.CommitReplicated)
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitReplicated}.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest(System.Int64,System.Int64,System.Int64,System.Int64)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest(System.Int64,System.Int64,System.Int64,System.Int64)
  id: CompleteSuccessRequest(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: CompleteSuccessRequest(Int64, Int64, Int64, Int64)
  nameWithType: TwoPhaseRequestManagerBase.CompleteSuccessRequest(Int64, Int64, Int64, Int64)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest(System.Int64, System.Int64, System.Int64, System.Int64)
  type: Method
  source:
    id: CompleteSuccessRequest
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 171
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected virtual void CompleteSuccessRequest(long firstEventNumber, long lastEventNumber, long preparePosition, long commitPosition)
    parameters:
    - id: firstEventNumber
      type: System.Int64
    - id: lastEventNumber
      type: System.Int64
    - id: preparePosition
      type: System.Int64
    - id: commitPosition
      type: System.Int64
    content.vb: Protected Overridable Sub CompleteSuccessRequest(firstEventNumber As Long, lastEventNumber As Long, preparePosition As Long, commitPosition As Long)
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest(EventStore.Core.Messages.OperationResult,System.String,System.Int64)
  commentId: M:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest(EventStore.Core.Messages.OperationResult,System.String,System.Int64)
  id: CompleteFailedRequest(EventStore.Core.Messages.OperationResult,System.String,System.Int64)
  parent: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase
  langs:
  - csharp
  - vb
  name: CompleteFailedRequest(OperationResult, String, Int64)
  nameWithType: TwoPhaseRequestManagerBase.CompleteFailedRequest(OperationResult, String, Int64)
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest(EventStore.Core.Messages.OperationResult, System.String, System.Int64)
  type: Method
  source:
    id: CompleteFailedRequest
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/RequestManager/Managers/TwoPhaseRequestManagerBase.cs
    startLine: 177
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.RequestManager.Managers
  syntax:
    content: protected virtual void CompleteFailedRequest(OperationResult result, string error, long currentVersion = -1L)
    parameters:
    - id: result
      type: EventStore.Core.Messages.OperationResult
    - id: error
      type: System.String
    - id: currentVersion
      type: System.Int64
    content.vb: Protected Overridable Sub CompleteFailedRequest(result As OperationResult, error As String, currentVersion As Long = -1L)
  overload: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: EventStore.Core.Services.RequestManager.Managers
  commentId: N:EventStore.Core.Services.RequestManager.Managers
  name: EventStore.Core.Services.RequestManager.Managers
  nameWithType: EventStore.Core.Services.RequestManager.Managers
  fullName: EventStore.Core.Services.RequestManager.Managers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Services.RequestManager.IRequestManager
  commentId: T:EventStore.Core.Services.RequestManager.IRequestManager
  parent: EventStore.Core.Services.RequestManager
  name: IRequestManager
  nameWithType: IRequestManager
  fullName: EventStore.Core.Services.RequestManager.IRequestManager
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.CheckStreamAccessCompleted>
  nameWithType: IHandle<StorageMessage.CheckStreamAccessCompleted>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted>
  nameWithType.vb: IHandle(Of StorageMessage.CheckStreamAccessCompleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  name.vb: IHandle(Of StorageMessage.CheckStreamAccessCompleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    name: StorageMessage.CheckStreamAccessCompleted
    nameWithType: StorageMessage.CheckStreamAccessCompleted
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    name: StorageMessage.CheckStreamAccessCompleted
    nameWithType: StorageMessage.CheckStreamAccessCompleted
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.AlreadyCommitted}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.AlreadyCommitted}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.AlreadyCommitted>
  nameWithType: IHandle<StorageMessage.AlreadyCommitted>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.AlreadyCommitted>
  nameWithType.vb: IHandle(Of StorageMessage.AlreadyCommitted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  name.vb: IHandle(Of StorageMessage.AlreadyCommitted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
    name: StorageMessage.AlreadyCommitted
    nameWithType: StorageMessage.AlreadyCommitted
    fullName: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
    name: StorageMessage.AlreadyCommitted
    nameWithType: StorageMessage.AlreadyCommitted
    fullName: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.PrepareAck>
  nameWithType: IHandle<StorageMessage.PrepareAck>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.PrepareAck>
  nameWithType.vb: IHandle(Of StorageMessage.PrepareAck)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.PrepareAck)
  name.vb: IHandle(Of StorageMessage.PrepareAck)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitReplicated}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitReplicated}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.CommitReplicated>
  nameWithType: IHandle<StorageMessage.CommitReplicated>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CommitReplicated>
  nameWithType.vb: IHandle(Of StorageMessage.CommitReplicated)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CommitReplicated)
  name.vb: IHandle(Of StorageMessage.CommitReplicated)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.CommitReplicated
    name: StorageMessage.CommitReplicated
    nameWithType: StorageMessage.CommitReplicated
    fullName: EventStore.Core.Messages.StorageMessage.CommitReplicated
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.CommitReplicated
    name: StorageMessage.CommitReplicated
    nameWithType: StorageMessage.CommitReplicated
    fullName: EventStore.Core.Messages.StorageMessage.CommitReplicated
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.WrongExpectedVersion>
  nameWithType: IHandle<StorageMessage.WrongExpectedVersion>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WrongExpectedVersion>
  nameWithType.vb: IHandle(Of StorageMessage.WrongExpectedVersion)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  name.vb: IHandle(Of StorageMessage.WrongExpectedVersion)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    name: StorageMessage.WrongExpectedVersion
    nameWithType: StorageMessage.WrongExpectedVersion
    fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    name: StorageMessage.WrongExpectedVersion
    nameWithType: StorageMessage.WrongExpectedVersion
    fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.StreamDeleted>
  nameWithType: IHandle<StorageMessage.StreamDeleted>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.StreamDeleted>
  nameWithType.vb: IHandle(Of StorageMessage.StreamDeleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.StreamDeleted)
  name.vb: IHandle(Of StorageMessage.StreamDeleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
    name: StorageMessage.StreamDeleted
    nameWithType: StorageMessage.StreamDeleted
    fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
    name: StorageMessage.StreamDeleted
    nameWithType: StorageMessage.StreamDeleted
    fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.RequestManagerTimerTick>
  nameWithType: IHandle<StorageMessage.RequestManagerTimerTick>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick>
  nameWithType.vb: IHandle(Of StorageMessage.RequestManagerTimerTick)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  name.vb: IHandle(Of StorageMessage.RequestManagerTimerTick)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    name: StorageMessage.RequestManagerTimerTick
    nameWithType: StorageMessage.RequestManagerTimerTick
    fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    name: StorageMessage.RequestManagerTimerTick
    nameWithType: StorageMessage.RequestManagerTimerTick
    fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TwoPhaseRequestManagerBase>()
  nameWithType: ProtobufExtensions.Serialize<TwoPhaseRequestManagerBase>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TwoPhaseRequestManagerBase)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase)()
  name.vb: Serialize(Of TwoPhaseRequestManagerBase)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TwoPhaseRequestManagerBase>
    nameWithType: ProtobufExtensions.Serialize<TwoPhaseRequestManagerBase>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TwoPhaseRequestManagerBase)
    nameWithType: ProtobufExtensions.Serialize(Of TwoPhaseRequestManagerBase)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TwoPhaseRequestManagerBase>()
  nameWithType: ProtobufExtensions.SerializeToArray<TwoPhaseRequestManagerBase>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TwoPhaseRequestManagerBase)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase)()
  name.vb: SerializeToArray(Of TwoPhaseRequestManagerBase)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TwoPhaseRequestManagerBase>
    nameWithType: ProtobufExtensions.SerializeToArray<TwoPhaseRequestManagerBase>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TwoPhaseRequestManagerBase)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TwoPhaseRequestManagerBase)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Services.RequestManager
  commentId: N:EventStore.Core.Services.RequestManager
  name: EventStore.Core.Services.RequestManager
  nameWithType: EventStore.Core.Services.RequestManager
  fullName: EventStore.Core.Services.RequestManager
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.Messaging.IEnvelope
  commentId: T:EventStore.Core.Messaging.IEnvelope
  parent: EventStore.Core.Messaging
  name: IEnvelope
  nameWithType: IEnvelope
  fullName: EventStore.Core.Messaging.IEnvelope
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ResponseEnvelope*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ResponseEnvelope
  name: ResponseEnvelope
  nameWithType: TwoPhaseRequestManagerBase.ResponseEnvelope
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ResponseEnvelope
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ClientCorrId*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ClientCorrId
  name: ClientCorrId
  nameWithType: TwoPhaseRequestManagerBase.ClientCorrId
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.ClientCorrId
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.NextTimeoutTime*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.NextTimeoutTime
  name: NextTimeoutTime
  nameWithType: TwoPhaseRequestManagerBase.NextTimeoutTime
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.NextTimeoutTime
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.#ctor*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.#ctor
  name: TwoPhaseRequestManagerBase
  nameWithType: TwoPhaseRequestManagerBase.TwoPhaseRequestManagerBase
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.TwoPhaseRequestManagerBase
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted
  name: OnSecurityAccessGranted
  nameWithType: TwoPhaseRequestManagerBase.OnSecurityAccessGranted
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.OnSecurityAccessGranted
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase
  name: InitNoPreparePhase
  nameWithType: TwoPhaseRequestManagerBase.InitNoPreparePhase
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitNoPreparePhase
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Principal.IPrincipal
  commentId: T:System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
  commentId: T:EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
  parent: EventStore.Core.Services.Storage.ReaderIndex
  name: StreamAccessType
  nameWithType: StreamAccessType
  fullName: EventStore.Core.Services.Storage.ReaderIndex.StreamAccessType
- uid: System.Security.Principal
  commentId: N:System.Security.Principal
  isExternal: true
  name: System.Security.Principal
  nameWithType: System.Security.Principal
  fullName: System.Security.Principal
- uid: EventStore.Core.Services.Storage.ReaderIndex
  commentId: N:EventStore.Core.Services.Storage.ReaderIndex
  name: EventStore.Core.Services.Storage.ReaderIndex
  nameWithType: EventStore.Core.Services.Storage.ReaderIndex
  fullName: EventStore.Core.Services.Storage.ReaderIndex
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase
  name: InitTwoPhase
  nameWithType: TwoPhaseRequestManagerBase.InitTwoPhase
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.InitTwoPhase
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
  name: Handle
  nameWithType: TwoPhaseRequestManagerBase.Handle
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.CheckStreamAccessCompleted)
  nameWithType: IHandle<StorageMessage.CheckStreamAccessCompleted>.Handle(StorageMessage.CheckStreamAccessCompleted)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted>.Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  nameWithType.vb: IHandle(Of StorageMessage.CheckStreamAccessCompleted).Handle(StorageMessage.CheckStreamAccessCompleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted).Handle(EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.CheckStreamAccessCompleted>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    name: StorageMessage.CheckStreamAccessCompleted
    nameWithType: StorageMessage.CheckStreamAccessCompleted
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.CheckStreamAccessCompleted).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
    name: StorageMessage.CheckStreamAccessCompleted
    nameWithType: StorageMessage.CheckStreamAccessCompleted
    fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  commentId: T:EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
  parent: EventStore.Core.Messages
  name: StorageMessage.CheckStreamAccessCompleted
  nameWithType: StorageMessage.CheckStreamAccessCompleted
  fullName: EventStore.Core.Messages.StorageMessage.CheckStreamAccessCompleted
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.WrongExpectedVersion}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.WrongExpectedVersion)
  nameWithType: IHandle<StorageMessage.WrongExpectedVersion>.Handle(StorageMessage.WrongExpectedVersion)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WrongExpectedVersion>.Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  nameWithType.vb: IHandle(Of StorageMessage.WrongExpectedVersion).Handle(StorageMessage.WrongExpectedVersion)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.WrongExpectedVersion).Handle(EventStore.Core.Messages.StorageMessage.WrongExpectedVersion)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.WrongExpectedVersion>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.WrongExpectedVersion>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    name: StorageMessage.WrongExpectedVersion
    nameWithType: StorageMessage.WrongExpectedVersion
    fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.WrongExpectedVersion).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.WrongExpectedVersion).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
    name: StorageMessage.WrongExpectedVersion
    nameWithType: StorageMessage.WrongExpectedVersion
    fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  commentId: T:EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
  parent: EventStore.Core.Messages
  name: StorageMessage.WrongExpectedVersion
  nameWithType: StorageMessage.WrongExpectedVersion
  fullName: EventStore.Core.Messages.StorageMessage.WrongExpectedVersion
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.StreamDeleted}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.StreamDeleted)
  nameWithType: IHandle<StorageMessage.StreamDeleted>.Handle(StorageMessage.StreamDeleted)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.StreamDeleted>.Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  nameWithType.vb: IHandle(Of StorageMessage.StreamDeleted).Handle(StorageMessage.StreamDeleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.StreamDeleted).Handle(EventStore.Core.Messages.StorageMessage.StreamDeleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.StreamDeleted>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.StreamDeleted>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
    name: StorageMessage.StreamDeleted
    nameWithType: StorageMessage.StreamDeleted
    fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.StreamDeleted).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.StreamDeleted).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
    name: StorageMessage.StreamDeleted
    nameWithType: StorageMessage.StreamDeleted
    fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.StreamDeleted
  commentId: T:EventStore.Core.Messages.StorageMessage.StreamDeleted
  parent: EventStore.Core.Messages
  name: StorageMessage.StreamDeleted
  nameWithType: StorageMessage.StreamDeleted
  fullName: EventStore.Core.Messages.StorageMessage.StreamDeleted
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.RequestManagerTimerTick)
  nameWithType: IHandle<StorageMessage.RequestManagerTimerTick>.Handle(StorageMessage.RequestManagerTimerTick)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick>.Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  nameWithType.vb: IHandle(Of StorageMessage.RequestManagerTimerTick).Handle(StorageMessage.RequestManagerTimerTick)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick).Handle(EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.RequestManagerTimerTick>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    name: StorageMessage.RequestManagerTimerTick
    nameWithType: StorageMessage.RequestManagerTimerTick
    fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.RequestManagerTimerTick).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
    name: StorageMessage.RequestManagerTimerTick
    nameWithType: StorageMessage.RequestManagerTimerTick
    fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  commentId: T:EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
  parent: EventStore.Core.Messages
  name: StorageMessage.RequestManagerTimerTick
  nameWithType: StorageMessage.RequestManagerTimerTick
  fullName: EventStore.Core.Messages.StorageMessage.RequestManagerTimerTick
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.AlreadyCommitted}.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.AlreadyCommitted}.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.AlreadyCommitted}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.AlreadyCommitted)
  nameWithType: IHandle<StorageMessage.AlreadyCommitted>.Handle(StorageMessage.AlreadyCommitted)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.AlreadyCommitted>.Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  nameWithType.vb: IHandle(Of StorageMessage.AlreadyCommitted).Handle(StorageMessage.AlreadyCommitted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.AlreadyCommitted).Handle(EventStore.Core.Messages.StorageMessage.AlreadyCommitted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.AlreadyCommitted>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.AlreadyCommitted>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
    name: StorageMessage.AlreadyCommitted
    nameWithType: StorageMessage.AlreadyCommitted
    fullName: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.AlreadyCommitted).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.AlreadyCommitted).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
    name: StorageMessage.AlreadyCommitted
    nameWithType: StorageMessage.AlreadyCommitted
    fullName: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
  commentId: T:EventStore.Core.Messages.StorageMessage.AlreadyCommitted
  parent: EventStore.Core.Messages
  name: StorageMessage.AlreadyCommitted
  nameWithType: StorageMessage.AlreadyCommitted
  fullName: EventStore.Core.Messages.StorageMessage.AlreadyCommitted
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.PrepareAck}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.PrepareAck)
  nameWithType: IHandle<StorageMessage.PrepareAck>.Handle(StorageMessage.PrepareAck)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.PrepareAck>.Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  nameWithType.vb: IHandle(Of StorageMessage.PrepareAck).Handle(StorageMessage.PrepareAck)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.PrepareAck).Handle(EventStore.Core.Messages.StorageMessage.PrepareAck)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.PrepareAck>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.PrepareAck>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.PrepareAck).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.PrepareAck).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.PrepareAck
    name: StorageMessage.PrepareAck
    nameWithType: StorageMessage.PrepareAck
    fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.PrepareAck
  commentId: T:EventStore.Core.Messages.StorageMessage.PrepareAck
  parent: EventStore.Core.Messages
  name: StorageMessage.PrepareAck
  nameWithType: StorageMessage.PrepareAck
  fullName: EventStore.Core.Messages.StorageMessage.PrepareAck
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitReplicated}.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitReplicated}.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitReplicated}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.CommitReplicated)
  nameWithType: IHandle<StorageMessage.CommitReplicated>.Handle(StorageMessage.CommitReplicated)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CommitReplicated>.Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  nameWithType.vb: IHandle(Of StorageMessage.CommitReplicated).Handle(StorageMessage.CommitReplicated)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CommitReplicated).Handle(EventStore.Core.Messages.StorageMessage.CommitReplicated)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.CommitReplicated>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CommitReplicated>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CommitReplicated
    name: StorageMessage.CommitReplicated
    nameWithType: StorageMessage.CommitReplicated
    fullName: EventStore.Core.Messages.StorageMessage.CommitReplicated
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.CommitReplicated).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CommitReplicated).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CommitReplicated
    name: StorageMessage.CommitReplicated
    nameWithType: StorageMessage.CommitReplicated
    fullName: EventStore.Core.Messages.StorageMessage.CommitReplicated
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.CommitReplicated
  commentId: T:EventStore.Core.Messages.StorageMessage.CommitReplicated
  parent: EventStore.Core.Messages
  name: StorageMessage.CommitReplicated
  nameWithType: StorageMessage.CommitReplicated
  fullName: EventStore.Core.Messages.StorageMessage.CommitReplicated
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest
  name: CompleteSuccessRequest
  nameWithType: TwoPhaseRequestManagerBase.CompleteSuccessRequest
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteSuccessRequest
- uid: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest*
  commentId: Overload:EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest
  name: CompleteFailedRequest
  nameWithType: TwoPhaseRequestManagerBase.CompleteFailedRequest
  fullName: EventStore.Core.Services.RequestManager.Managers.TwoPhaseRequestManagerBase.CompleteFailedRequest
- uid: EventStore.Core.Messages.OperationResult
  commentId: T:EventStore.Core.Messages.OperationResult
  parent: EventStore.Core.Messages
  name: OperationResult
  nameWithType: OperationResult
  fullName: EventStore.Core.Messages.OperationResult

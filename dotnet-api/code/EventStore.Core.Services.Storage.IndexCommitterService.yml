### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Storage.IndexCommitterService
  commentId: T:EventStore.Core.Services.Storage.IndexCommitterService
  id: IndexCommitterService
  parent: EventStore.Core.Services.Storage
  children:
  - EventStore.Core.Services.Storage.IndexCommitterService.#ctor(EventStore.Core.Services.Storage.ReaderIndex.IIndexCommitter,EventStore.Core.Bus.IPublisher,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,System.Int32,EventStore.Core.Index.ITableIndex)
  - EventStore.Core.Services.Storage.IndexCommitterService.AddPendingCommit(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord,System.Int64)
  - EventStore.Core.Services.Storage.IndexCommitterService.AddPendingPrepare(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[],System.Int64)
  - EventStore.Core.Services.Storage.IndexCommitterService.GetCommitLastEventNumber(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord)
  - EventStore.Core.Services.Storage.IndexCommitterService.GetStatistics
  - EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.ClientMessage.MergeIndexes)
  - EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  - EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  - EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  - EventStore.Core.Services.Storage.IndexCommitterService.HandleReplicatedQueue
  - EventStore.Core.Services.Storage.IndexCommitterService.Init(System.Int64)
  - EventStore.Core.Services.Storage.IndexCommitterService.Name
  - EventStore.Core.Services.Storage.IndexCommitterService.Stop
  - EventStore.Core.Services.Storage.IndexCommitterService.Task
  langs:
  - csharp
  - vb
  name: IndexCommitterService
  nameWithType: IndexCommitterService
  fullName: EventStore.Core.Services.Storage.IndexCommitterService
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: IndexCommitterService
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 26
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: 'public class IndexCommitterService : object, IIndexCommitterService, IMonitoredQueue, IHandle<SystemMessage.StateChangeMessage>, IHandle<SystemMessage.BecomeShuttingDown>, IHandle<StorageMessage.CommitAck>, IHandle<ClientMessage.MergeIndexes>'
    content.vb: >-
      Public Class IndexCommitterService
          Inherits Object
          Implements IIndexCommitterService, IMonitoredQueue, IHandle(Of SystemMessage.StateChangeMessage), IHandle(Of SystemMessage.BecomeShuttingDown), IHandle(Of StorageMessage.CommitAck), IHandle(Of ClientMessage.MergeIndexes)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Services.Storage.IIndexCommitterService
  - EventStore.Core.Bus.IMonitoredQueue
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.MergeIndexes}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.Storage.IndexCommitterService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Storage.IndexCommitterService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.Storage.IndexCommitterService.Name
  commentId: P:EventStore.Core.Services.Storage.IndexCommitterService.Name
  id: Name
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: IndexCommitterService.Name
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.Name
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Name
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 43
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: EventStore.Core.Services.Storage.IndexCommitterService.Name*
  implements:
  - EventStore.Core.Bus.IMonitoredQueue.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Storage.IndexCommitterService.Task
  commentId: P:EventStore.Core.Services.Storage.IndexCommitterService.Task
  id: Task
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: Task
  nameWithType: IndexCommitterService.Task
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.Task
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Task
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 60
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public Task Task { get; }
    parameters: []
    return:
      type: Task
    content.vb: Public ReadOnly Property Task As Task
  overload: EventStore.Core.Services.Storage.IndexCommitterService.Task*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Storage.IndexCommitterService.#ctor(EventStore.Core.Services.Storage.ReaderIndex.IIndexCommitter,EventStore.Core.Bus.IPublisher,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,System.Int32,EventStore.Core.Index.ITableIndex)
  commentId: M:EventStore.Core.Services.Storage.IndexCommitterService.#ctor(EventStore.Core.Services.Storage.ReaderIndex.IIndexCommitter,EventStore.Core.Bus.IPublisher,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,System.Int32,EventStore.Core.Index.ITableIndex)
  id: '#ctor(EventStore.Core.Services.Storage.ReaderIndex.IIndexCommitter,EventStore.Core.Bus.IPublisher,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,EventStore.Core.TransactionLog.Checkpoint.ICheckpoint,System.Int32,EventStore.Core.Index.ITableIndex)'
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: IndexCommitterService(IIndexCommitter, IPublisher, ICheckpoint, ICheckpoint, Int32, ITableIndex)
  nameWithType: IndexCommitterService.IndexCommitterService(IIndexCommitter, IPublisher, ICheckpoint, ICheckpoint, Int32, ITableIndex)
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.IndexCommitterService(EventStore.Core.Services.Storage.ReaderIndex.IIndexCommitter, EventStore.Core.Bus.IPublisher, EventStore.Core.TransactionLog.Checkpoint.ICheckpoint, EventStore.Core.TransactionLog.Checkpoint.ICheckpoint, System.Int32, EventStore.Core.Index.ITableIndex)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 64
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public IndexCommitterService(IIndexCommitter indexCommitter, IPublisher publisher, ICheckpoint replicationCheckpoint, ICheckpoint writerCheckpoint, int commitCount, ITableIndex tableIndex)
    parameters:
    - id: indexCommitter
      type: EventStore.Core.Services.Storage.ReaderIndex.IIndexCommitter
    - id: publisher
      type: EventStore.Core.Bus.IPublisher
    - id: replicationCheckpoint
      type: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
    - id: writerCheckpoint
      type: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
    - id: commitCount
      type: System.Int32
    - id: tableIndex
      type: EventStore.Core.Index.ITableIndex
    content.vb: Public Sub New(indexCommitter As IIndexCommitter, publisher As IPublisher, replicationCheckpoint As ICheckpoint, writerCheckpoint As ICheckpoint, commitCount As Integer, tableIndex As ITableIndex)
  overload: EventStore.Core.Services.Storage.IndexCommitterService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.IndexCommitterService.Init(System.Int64)
  commentId: M:EventStore.Core.Services.Storage.IndexCommitterService.Init(System.Int64)
  id: Init(System.Int64)
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: Init(Int64)
  nameWithType: IndexCommitterService.Init(Int64)
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.Init(System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Init
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 80
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public void Init(long checkpointPosition)
    parameters:
    - id: checkpointPosition
      type: System.Int64
    content.vb: Public Sub Init(checkpointPosition As Long)
  overload: EventStore.Core.Services.Storage.IndexCommitterService.Init*
  implements:
  - EventStore.Core.Services.Storage.IIndexCommitterService.Init(System.Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.IndexCommitterService.Stop
  commentId: M:EventStore.Core.Services.Storage.IndexCommitterService.Stop
  id: Stop
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: IndexCommitterService.Stop()
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.Stop()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Stop
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 88
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  overload: EventStore.Core.Services.Storage.IndexCommitterService.Stop*
  implements:
  - EventStore.Core.Services.Storage.IIndexCommitterService.Stop
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.IndexCommitterService.HandleReplicatedQueue
  commentId: M:EventStore.Core.Services.Storage.IndexCommitterService.HandleReplicatedQueue
  id: HandleReplicatedQueue
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: HandleReplicatedQueue()
  nameWithType: IndexCommitterService.HandleReplicatedQueue()
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.HandleReplicatedQueue()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: HandleReplicatedQueue
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 92
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public void HandleReplicatedQueue()
    content.vb: Public Sub HandleReplicatedQueue
  overload: EventStore.Core.Services.Storage.IndexCommitterService.HandleReplicatedQueue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.IndexCommitterService.GetCommitLastEventNumber(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord)
  commentId: M:EventStore.Core.Services.Storage.IndexCommitterService.GetCommitLastEventNumber(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord)
  id: GetCommitLastEventNumber(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord)
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: GetCommitLastEventNumber(CommitLogRecord)
  nameWithType: IndexCommitterService.GetCommitLastEventNumber(CommitLogRecord)
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.GetCommitLastEventNumber(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetCommitLastEventNumber
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 158
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public long GetCommitLastEventNumber(CommitLogRecord commit)
    parameters:
    - id: commit
      type: EventStore.Core.TransactionLog.LogRecords.CommitLogRecord
    return:
      type: System.Int64
    content.vb: Public Function GetCommitLastEventNumber(commit As CommitLogRecord) As Long
  overload: EventStore.Core.Services.Storage.IndexCommitterService.GetCommitLastEventNumber*
  implements:
  - EventStore.Core.Services.Storage.IIndexCommitterService.GetCommitLastEventNumber(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.IndexCommitterService.AddPendingPrepare(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[],System.Int64)
  commentId: M:EventStore.Core.Services.Storage.IndexCommitterService.AddPendingPrepare(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[],System.Int64)
  id: AddPendingPrepare(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[],System.Int64)
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: AddPendingPrepare(PrepareLogRecord[], Int64)
  nameWithType: IndexCommitterService.AddPendingPrepare(PrepareLogRecord[], Int64)
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.AddPendingPrepare(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[], System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AddPendingPrepare
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 162
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public void AddPendingPrepare(PrepareLogRecord[] prepares, long postPosition)
    parameters:
    - id: prepares
      type: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[]
    - id: postPosition
      type: System.Int64
    content.vb: Public Sub AddPendingPrepare(prepares As PrepareLogRecord(), postPosition As Long)
  overload: EventStore.Core.Services.Storage.IndexCommitterService.AddPendingPrepare*
  implements:
  - EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingPrepare(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[],System.Int64)
  nameWithType.vb: IndexCommitterService.AddPendingPrepare(PrepareLogRecord(), Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.Storage.IndexCommitterService.AddPendingPrepare(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord(), System.Int64)
  name.vb: AddPendingPrepare(PrepareLogRecord(), Int64)
- uid: EventStore.Core.Services.Storage.IndexCommitterService.AddPendingCommit(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord,System.Int64)
  commentId: M:EventStore.Core.Services.Storage.IndexCommitterService.AddPendingCommit(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord,System.Int64)
  id: AddPendingCommit(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord,System.Int64)
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: AddPendingCommit(CommitLogRecord, Int64)
  nameWithType: IndexCommitterService.AddPendingCommit(CommitLogRecord, Int64)
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.AddPendingCommit(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord, System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AddPendingCommit
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 180
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public void AddPendingCommit(CommitLogRecord commit, long postPosition)
    parameters:
    - id: commit
      type: EventStore.Core.TransactionLog.LogRecords.CommitLogRecord
    - id: postPosition
      type: System.Int64
    content.vb: Public Sub AddPendingCommit(commit As CommitLogRecord, postPosition As Long)
  overload: EventStore.Core.Services.Storage.IndexCommitterService.AddPendingCommit*
  implements:
  - EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingCommit(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord,System.Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  id: Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: IndexCommitterService.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 196
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public void Handle(SystemMessage.StateChangeMessage msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    content.vb: Public Sub Handle(msg As SystemMessage.StateChangeMessage)
  overload: EventStore.Core.Services.Storage.IndexCommitterService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  commentId: M:EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  id: Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.BecomeShuttingDown)
  nameWithType: IndexCommitterService.Handle(SystemMessage.BecomeShuttingDown)
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 209
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public void Handle(SystemMessage.BecomeShuttingDown message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
    content.vb: Public Sub Handle(message As SystemMessage.BecomeShuttingDown)
  overload: EventStore.Core.Services.Storage.IndexCommitterService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  commentId: M:EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  id: Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: Handle(StorageMessage.CommitAck)
  nameWithType: IndexCommitterService.Handle(StorageMessage.CommitAck)
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 213
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public void Handle(StorageMessage.CommitAck message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.StorageMessage.CommitAck
    content.vb: Public Sub Handle(message As StorageMessage.CommitAck)
  overload: EventStore.Core.Services.Storage.IndexCommitterService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.IndexCommitterService.GetStatistics
  commentId: M:EventStore.Core.Services.Storage.IndexCommitterService.GetStatistics
  id: GetStatistics
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: GetStatistics()
  nameWithType: IndexCommitterService.GetStatistics()
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.GetStatistics()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetStatistics
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 249
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public QueueStats GetStatistics()
    return:
      type: EventStore.Core.Services.Monitoring.Stats.QueueStats
    content.vb: Public Function GetStatistics As QueueStats
  overload: EventStore.Core.Services.Storage.IndexCommitterService.GetStatistics*
  implements:
  - EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.ClientMessage.MergeIndexes)
  commentId: M:EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.ClientMessage.MergeIndexes)
  id: Handle(EventStore.Core.Messages.ClientMessage.MergeIndexes)
  parent: EventStore.Core.Services.Storage.IndexCommitterService
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.MergeIndexes)
  nameWithType: IndexCommitterService.Handle(ClientMessage.MergeIndexes)
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.Handle(EventStore.Core.Messages.ClientMessage.MergeIndexes)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/IndexCommitterService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Storage/IndexCommitterService.cs
    startLine: 400
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public void Handle(ClientMessage.MergeIndexes message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ClientMessage.MergeIndexes
    content.vb: Public Sub Handle(message As ClientMessage.MergeIndexes)
  overload: EventStore.Core.Services.Storage.IndexCommitterService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.MergeIndexes}.Handle(EventStore.Core.Messages.ClientMessage.MergeIndexes)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.Storage
  commentId: N:EventStore.Core.Services.Storage
  name: EventStore.Core.Services.Storage
  nameWithType: EventStore.Core.Services.Storage
  fullName: EventStore.Core.Services.Storage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Services.Storage.IIndexCommitterService
  commentId: T:EventStore.Core.Services.Storage.IIndexCommitterService
  parent: EventStore.Core.Services.Storage
  name: IIndexCommitterService
  nameWithType: IIndexCommitterService
  fullName: EventStore.Core.Services.Storage.IIndexCommitterService
- uid: EventStore.Core.Bus.IMonitoredQueue
  commentId: T:EventStore.Core.Bus.IMonitoredQueue
  parent: EventStore.Core.Bus
  name: IMonitoredQueue
  nameWithType: IMonitoredQueue
  fullName: EventStore.Core.Bus.IMonitoredQueue
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.StateChangeMessage>
  nameWithType: IHandle<SystemMessage.StateChangeMessage>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  name.vb: IHandle(Of SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.BecomeShuttingDown>
  nameWithType: IHandle<SystemMessage.BecomeShuttingDown>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.BecomeShuttingDown>
  nameWithType.vb: IHandle(Of SystemMessage.BecomeShuttingDown)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  name.vb: IHandle(Of SystemMessage.BecomeShuttingDown)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
    name: SystemMessage.BecomeShuttingDown
    nameWithType: SystemMessage.BecomeShuttingDown
    fullName: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
    name: SystemMessage.BecomeShuttingDown
    nameWithType: SystemMessage.BecomeShuttingDown
    fullName: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<StorageMessage.CommitAck>
  nameWithType: IHandle<StorageMessage.CommitAck>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CommitAck>
  nameWithType.vb: IHandle(Of StorageMessage.CommitAck)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CommitAck)
  name.vb: IHandle(Of StorageMessage.CommitAck)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.StorageMessage.CommitAck
    name: StorageMessage.CommitAck
    nameWithType: StorageMessage.CommitAck
    fullName: EventStore.Core.Messages.StorageMessage.CommitAck
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.StorageMessage.CommitAck
    name: StorageMessage.CommitAck
    nameWithType: StorageMessage.CommitAck
    fullName: EventStore.Core.Messages.StorageMessage.CommitAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.MergeIndexes}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.MergeIndexes}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.MergeIndexes>
  nameWithType: IHandle<ClientMessage.MergeIndexes>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.MergeIndexes>
  nameWithType.vb: IHandle(Of ClientMessage.MergeIndexes)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.MergeIndexes)
  name.vb: IHandle(Of ClientMessage.MergeIndexes)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.MergeIndexes
    name: ClientMessage.MergeIndexes
    nameWithType: ClientMessage.MergeIndexes
    fullName: EventStore.Core.Messages.ClientMessage.MergeIndexes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.MergeIndexes
    name: ClientMessage.MergeIndexes
    nameWithType: ClientMessage.MergeIndexes
    fullName: EventStore.Core.Messages.ClientMessage.MergeIndexes
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.IndexCommitterService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<IndexCommitterService>()
  nameWithType: ProtobufExtensions.Serialize<IndexCommitterService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Storage.IndexCommitterService>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of IndexCommitterService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Storage.IndexCommitterService)()
  name.vb: Serialize(Of IndexCommitterService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<IndexCommitterService>
    nameWithType: ProtobufExtensions.Serialize<IndexCommitterService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Storage.IndexCommitterService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of IndexCommitterService)
    nameWithType: ProtobufExtensions.Serialize(Of IndexCommitterService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Storage.IndexCommitterService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.IndexCommitterService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<IndexCommitterService>()
  nameWithType: ProtobufExtensions.SerializeToArray<IndexCommitterService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Storage.IndexCommitterService>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of IndexCommitterService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Storage.IndexCommitterService)()
  name.vb: SerializeToArray(Of IndexCommitterService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<IndexCommitterService>
    nameWithType: ProtobufExtensions.SerializeToArray<IndexCommitterService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Storage.IndexCommitterService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of IndexCommitterService)
    nameWithType: ProtobufExtensions.SerializeToArray(Of IndexCommitterService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Storage.IndexCommitterService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.Storage.IndexCommitterService.Name*
  commentId: Overload:EventStore.Core.Services.Storage.IndexCommitterService.Name
  name: Name
  nameWithType: IndexCommitterService.Name
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.Name
- uid: EventStore.Core.Bus.IMonitoredQueue.Name
  commentId: P:EventStore.Core.Bus.IMonitoredQueue.Name
  parent: EventStore.Core.Bus.IMonitoredQueue
  name: Name
  nameWithType: IMonitoredQueue.Name
  fullName: EventStore.Core.Bus.IMonitoredQueue.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Services.Storage.IndexCommitterService.Task*
  commentId: Overload:EventStore.Core.Services.Storage.IndexCommitterService.Task
  name: Task
  nameWithType: IndexCommitterService.Task
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.Task
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: EventStore.Core.Services.Storage.IndexCommitterService.#ctor*
  commentId: Overload:EventStore.Core.Services.Storage.IndexCommitterService.#ctor
  name: IndexCommitterService
  nameWithType: IndexCommitterService.IndexCommitterService
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.IndexCommitterService
- uid: EventStore.Core.Services.Storage.ReaderIndex.IIndexCommitter
  commentId: T:EventStore.Core.Services.Storage.ReaderIndex.IIndexCommitter
  parent: EventStore.Core.Services.Storage.ReaderIndex
  name: IIndexCommitter
  nameWithType: IIndexCommitter
  fullName: EventStore.Core.Services.Storage.ReaderIndex.IIndexCommitter
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
  commentId: T:EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
  parent: EventStore.Core.TransactionLog.Checkpoint
  name: ICheckpoint
  nameWithType: ICheckpoint
  fullName: EventStore.Core.TransactionLog.Checkpoint.ICheckpoint
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.Index.ITableIndex
  commentId: T:EventStore.Core.Index.ITableIndex
  parent: EventStore.Core.Index
  name: ITableIndex
  nameWithType: ITableIndex
  fullName: EventStore.Core.Index.ITableIndex
- uid: EventStore.Core.Services.Storage.ReaderIndex
  commentId: N:EventStore.Core.Services.Storage.ReaderIndex
  name: EventStore.Core.Services.Storage.ReaderIndex
  nameWithType: EventStore.Core.Services.Storage.ReaderIndex
  fullName: EventStore.Core.Services.Storage.ReaderIndex
- uid: EventStore.Core.TransactionLog.Checkpoint
  commentId: N:EventStore.Core.TransactionLog.Checkpoint
  name: EventStore.Core.TransactionLog.Checkpoint
  nameWithType: EventStore.Core.TransactionLog.Checkpoint
  fullName: EventStore.Core.TransactionLog.Checkpoint
- uid: EventStore.Core.Index
  commentId: N:EventStore.Core.Index
  name: EventStore.Core.Index
  nameWithType: EventStore.Core.Index
  fullName: EventStore.Core.Index
- uid: EventStore.Core.Services.Storage.IndexCommitterService.Init*
  commentId: Overload:EventStore.Core.Services.Storage.IndexCommitterService.Init
  name: Init
  nameWithType: IndexCommitterService.Init
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.Init
- uid: EventStore.Core.Services.Storage.IIndexCommitterService.Init(System.Int64)
  commentId: M:EventStore.Core.Services.Storage.IIndexCommitterService.Init(System.Int64)
  parent: EventStore.Core.Services.Storage.IIndexCommitterService
  isExternal: true
  name: Init(Int64)
  nameWithType: IIndexCommitterService.Init(Int64)
  fullName: EventStore.Core.Services.Storage.IIndexCommitterService.Init(System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.IIndexCommitterService.Init(System.Int64)
    name: Init
    nameWithType: IIndexCommitterService.Init
    fullName: EventStore.Core.Services.Storage.IIndexCommitterService.Init
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.IIndexCommitterService.Init(System.Int64)
    name: Init
    nameWithType: IIndexCommitterService.Init
    fullName: EventStore.Core.Services.Storage.IIndexCommitterService.Init
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Services.Storage.IndexCommitterService.Stop*
  commentId: Overload:EventStore.Core.Services.Storage.IndexCommitterService.Stop
  name: Stop
  nameWithType: IndexCommitterService.Stop
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.Stop
- uid: EventStore.Core.Services.Storage.IIndexCommitterService.Stop
  commentId: M:EventStore.Core.Services.Storage.IIndexCommitterService.Stop
  parent: EventStore.Core.Services.Storage.IIndexCommitterService
  name: Stop()
  nameWithType: IIndexCommitterService.Stop()
  fullName: EventStore.Core.Services.Storage.IIndexCommitterService.Stop()
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.IIndexCommitterService.Stop
    name: Stop
    nameWithType: IIndexCommitterService.Stop
    fullName: EventStore.Core.Services.Storage.IIndexCommitterService.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.IIndexCommitterService.Stop
    name: Stop
    nameWithType: IIndexCommitterService.Stop
    fullName: EventStore.Core.Services.Storage.IIndexCommitterService.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.IndexCommitterService.HandleReplicatedQueue*
  commentId: Overload:EventStore.Core.Services.Storage.IndexCommitterService.HandleReplicatedQueue
  name: HandleReplicatedQueue
  nameWithType: IndexCommitterService.HandleReplicatedQueue
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.HandleReplicatedQueue
- uid: EventStore.Core.Services.Storage.IndexCommitterService.GetCommitLastEventNumber*
  commentId: Overload:EventStore.Core.Services.Storage.IndexCommitterService.GetCommitLastEventNumber
  name: GetCommitLastEventNumber
  nameWithType: IndexCommitterService.GetCommitLastEventNumber
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.GetCommitLastEventNumber
- uid: EventStore.Core.Services.Storage.IIndexCommitterService.GetCommitLastEventNumber(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord)
  commentId: M:EventStore.Core.Services.Storage.IIndexCommitterService.GetCommitLastEventNumber(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord)
  parent: EventStore.Core.Services.Storage.IIndexCommitterService
  name: GetCommitLastEventNumber(CommitLogRecord)
  nameWithType: IIndexCommitterService.GetCommitLastEventNumber(CommitLogRecord)
  fullName: EventStore.Core.Services.Storage.IIndexCommitterService.GetCommitLastEventNumber(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.IIndexCommitterService.GetCommitLastEventNumber(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord)
    name: GetCommitLastEventNumber
    nameWithType: IIndexCommitterService.GetCommitLastEventNumber
    fullName: EventStore.Core.Services.Storage.IIndexCommitterService.GetCommitLastEventNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.TransactionLog.LogRecords.CommitLogRecord
    name: CommitLogRecord
    nameWithType: CommitLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.CommitLogRecord
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.IIndexCommitterService.GetCommitLastEventNumber(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord)
    name: GetCommitLastEventNumber
    nameWithType: IIndexCommitterService.GetCommitLastEventNumber
    fullName: EventStore.Core.Services.Storage.IIndexCommitterService.GetCommitLastEventNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.TransactionLog.LogRecords.CommitLogRecord
    name: CommitLogRecord
    nameWithType: CommitLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.CommitLogRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.CommitLogRecord
  commentId: T:EventStore.Core.TransactionLog.LogRecords.CommitLogRecord
  parent: EventStore.Core.TransactionLog.LogRecords
  name: CommitLogRecord
  nameWithType: CommitLogRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.CommitLogRecord
- uid: EventStore.Core.TransactionLog.LogRecords
  commentId: N:EventStore.Core.TransactionLog.LogRecords
  name: EventStore.Core.TransactionLog.LogRecords
  nameWithType: EventStore.Core.TransactionLog.LogRecords
  fullName: EventStore.Core.TransactionLog.LogRecords
- uid: EventStore.Core.Services.Storage.IndexCommitterService.AddPendingPrepare*
  commentId: Overload:EventStore.Core.Services.Storage.IndexCommitterService.AddPendingPrepare
  name: AddPendingPrepare
  nameWithType: IndexCommitterService.AddPendingPrepare
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.AddPendingPrepare
- uid: EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingPrepare(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[],System.Int64)
  commentId: M:EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingPrepare(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[],System.Int64)
  parent: EventStore.Core.Services.Storage.IIndexCommitterService
  isExternal: true
  name: AddPendingPrepare(PrepareLogRecord[], Int64)
  nameWithType: IIndexCommitterService.AddPendingPrepare(PrepareLogRecord[], Int64)
  fullName: EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingPrepare(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[], System.Int64)
  nameWithType.vb: IIndexCommitterService.AddPendingPrepare(PrepareLogRecord(), Int64)
  fullName.vb: EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingPrepare(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord(), System.Int64)
  name.vb: AddPendingPrepare(PrepareLogRecord(), Int64)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingPrepare(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[],System.Int64)
    name: AddPendingPrepare
    nameWithType: IIndexCommitterService.AddPendingPrepare
    fullName: EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingPrepare
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingPrepare(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[],System.Int64)
    name: AddPendingPrepare
    nameWithType: IIndexCommitterService.AddPendingPrepare
    fullName: EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingPrepare
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[]
  isExternal: true
  name: PrepareLogRecord[]
  nameWithType: PrepareLogRecord[]
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord[]
  nameWithType.vb: PrepareLogRecord()
  fullName.vb: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord()
  name.vb: PrepareLogRecord()
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.Services.Storage.IndexCommitterService.AddPendingCommit*
  commentId: Overload:EventStore.Core.Services.Storage.IndexCommitterService.AddPendingCommit
  name: AddPendingCommit
  nameWithType: IndexCommitterService.AddPendingCommit
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.AddPendingCommit
- uid: EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingCommit(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord,System.Int64)
  commentId: M:EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingCommit(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord,System.Int64)
  parent: EventStore.Core.Services.Storage.IIndexCommitterService
  isExternal: true
  name: AddPendingCommit(CommitLogRecord, Int64)
  nameWithType: IIndexCommitterService.AddPendingCommit(CommitLogRecord, Int64)
  fullName: EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingCommit(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingCommit(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord,System.Int64)
    name: AddPendingCommit
    nameWithType: IIndexCommitterService.AddPendingCommit
    fullName: EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingCommit
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.TransactionLog.LogRecords.CommitLogRecord
    name: CommitLogRecord
    nameWithType: CommitLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.CommitLogRecord
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingCommit(EventStore.Core.TransactionLog.LogRecords.CommitLogRecord,System.Int64)
    name: AddPendingCommit
    nameWithType: IIndexCommitterService.AddPendingCommit
    fullName: EventStore.Core.Services.Storage.IIndexCommitterService.AddPendingCommit
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.TransactionLog.LogRecords.CommitLogRecord
    name: CommitLogRecord
    nameWithType: CommitLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.CommitLogRecord
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.IndexCommitterService.Handle*
  commentId: Overload:EventStore.Core.Services.Storage.IndexCommitterService.Handle
  name: Handle
  nameWithType: IndexCommitterService.Handle
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: IHandle<SystemMessage.StateChangeMessage>.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage).Handle(SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage).Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.StateChangeMessage>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.StateChangeMessage).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  commentId: T:EventStore.Core.Messages.SystemMessage.StateChangeMessage
  parent: EventStore.Core.Messages
  name: SystemMessage.StateChangeMessage
  nameWithType: SystemMessage.StateChangeMessage
  fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeShuttingDown}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.BecomeShuttingDown)
  nameWithType: IHandle<SystemMessage.BecomeShuttingDown>.Handle(SystemMessage.BecomeShuttingDown)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.BecomeShuttingDown>.Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  nameWithType.vb: IHandle(Of SystemMessage.BecomeShuttingDown).Handle(SystemMessage.BecomeShuttingDown)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.BecomeShuttingDown).Handle(EventStore.Core.Messages.SystemMessage.BecomeShuttingDown)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.BecomeShuttingDown>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.BecomeShuttingDown>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
    name: SystemMessage.BecomeShuttingDown
    nameWithType: SystemMessage.BecomeShuttingDown
    fullName: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.BecomeShuttingDown).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.BecomeShuttingDown).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
    name: SystemMessage.BecomeShuttingDown
    nameWithType: SystemMessage.BecomeShuttingDown
    fullName: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
  commentId: T:EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
  parent: EventStore.Core.Messages
  name: SystemMessage.BecomeShuttingDown
  nameWithType: SystemMessage.BecomeShuttingDown
  fullName: EventStore.Core.Messages.SystemMessage.BecomeShuttingDown
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.StorageMessage.CommitAck}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(StorageMessage.CommitAck)
  nameWithType: IHandle<StorageMessage.CommitAck>.Handle(StorageMessage.CommitAck)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CommitAck>.Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  nameWithType.vb: IHandle(Of StorageMessage.CommitAck).Handle(StorageMessage.CommitAck)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CommitAck).Handle(EventStore.Core.Messages.StorageMessage.CommitAck)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<StorageMessage.CommitAck>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.StorageMessage.CommitAck>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CommitAck
    name: StorageMessage.CommitAck
    nameWithType: StorageMessage.CommitAck
    fullName: EventStore.Core.Messages.StorageMessage.CommitAck
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of StorageMessage.CommitAck).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.StorageMessage.CommitAck).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.StorageMessage.CommitAck
    name: StorageMessage.CommitAck
    nameWithType: StorageMessage.CommitAck
    fullName: EventStore.Core.Messages.StorageMessage.CommitAck
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.StorageMessage.CommitAck
  commentId: T:EventStore.Core.Messages.StorageMessage.CommitAck
  parent: EventStore.Core.Messages
  name: StorageMessage.CommitAck
  nameWithType: StorageMessage.CommitAck
  fullName: EventStore.Core.Messages.StorageMessage.CommitAck
- uid: EventStore.Core.Services.Storage.IndexCommitterService.GetStatistics*
  commentId: Overload:EventStore.Core.Services.Storage.IndexCommitterService.GetStatistics
  name: GetStatistics
  nameWithType: IndexCommitterService.GetStatistics
  fullName: EventStore.Core.Services.Storage.IndexCommitterService.GetStatistics
- uid: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  commentId: M:EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  parent: EventStore.Core.Bus.IMonitoredQueue
  name: GetStatistics()
  nameWithType: IMonitoredQueue.GetStatistics()
  fullName: EventStore.Core.Bus.IMonitoredQueue.GetStatistics()
  spec.csharp:
  - uid: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
    name: GetStatistics
    nameWithType: IMonitoredQueue.GetStatistics
    fullName: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
    name: GetStatistics
    nameWithType: IMonitoredQueue.GetStatistics
    fullName: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Monitoring.Stats.QueueStats
  commentId: T:EventStore.Core.Services.Monitoring.Stats.QueueStats
  parent: EventStore.Core.Services.Monitoring.Stats
  name: QueueStats
  nameWithType: QueueStats
  fullName: EventStore.Core.Services.Monitoring.Stats.QueueStats
- uid: EventStore.Core.Services.Monitoring.Stats
  commentId: N:EventStore.Core.Services.Monitoring.Stats
  name: EventStore.Core.Services.Monitoring.Stats
  nameWithType: EventStore.Core.Services.Monitoring.Stats
  fullName: EventStore.Core.Services.Monitoring.Stats
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.MergeIndexes}.Handle(EventStore.Core.Messages.ClientMessage.MergeIndexes)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.MergeIndexes}.Handle(EventStore.Core.Messages.ClientMessage.MergeIndexes)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.MergeIndexes}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.MergeIndexes)
  nameWithType: IHandle<ClientMessage.MergeIndexes>.Handle(ClientMessage.MergeIndexes)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.MergeIndexes>.Handle(EventStore.Core.Messages.ClientMessage.MergeIndexes)
  nameWithType.vb: IHandle(Of ClientMessage.MergeIndexes).Handle(ClientMessage.MergeIndexes)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.MergeIndexes).Handle(EventStore.Core.Messages.ClientMessage.MergeIndexes)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.MergeIndexes>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.MergeIndexes>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.MergeIndexes
    name: ClientMessage.MergeIndexes
    nameWithType: ClientMessage.MergeIndexes
    fullName: EventStore.Core.Messages.ClientMessage.MergeIndexes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.MergeIndexes).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.MergeIndexes).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.MergeIndexes
    name: ClientMessage.MergeIndexes
    nameWithType: ClientMessage.MergeIndexes
    fullName: EventStore.Core.Messages.ClientMessage.MergeIndexes
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.MergeIndexes
  commentId: T:EventStore.Core.Messages.ClientMessage.MergeIndexes
  parent: EventStore.Core.Messages
  name: ClientMessage.MergeIndexes
  nameWithType: ClientMessage.MergeIndexes
  fullName: EventStore.Core.Messages.ClientMessage.MergeIndexes

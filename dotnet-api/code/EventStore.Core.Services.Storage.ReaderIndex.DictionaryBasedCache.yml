### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache
  commentId: T:EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache
  id: DictionaryBasedCache
  parent: EventStore.Core.Services.Storage.ReaderIndex
  children:
  - EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.#ctor
  - EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.#ctor(System.Int32,System.Int64)
  langs:
  - csharp
  - vb
  name: DictionaryBasedCache
  nameWithType: DictionaryBasedCache
  fullName: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/ReaderIndex/DictionaryBasedCache.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: DictionaryBasedCache
    path: ../EventStore/src/EventStore.Core/Services/Storage/ReaderIndex/DictionaryBasedCache.cs
    startLine: 4
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage.ReaderIndex
  syntax:
    content: 'public class DictionaryBasedCache : BoundedCache<long, PrepareLogRecord>'
    content.vb: >-
      Public Class DictionaryBasedCache
          Inherits BoundedCache(Of Long, PrepareLogRecord)
  inheritance:
  - System.Object
  - EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}
  inheritedMembers:
  - EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.Count
  - EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.TryGetRecord(System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord@)
  - EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.PutRecord(System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  - EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.PutRecord(System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord,System.Boolean)
  - EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.TryPutRecord(System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  - EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.Clear
  - EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.RemoveRecord(System.Int64)
  - EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.GetStatistics
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.#ctor
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.#ctor
  id: '#ctor'
  parent: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache
  langs:
  - csharp
  - vb
  name: DictionaryBasedCache()
  nameWithType: DictionaryBasedCache.DictionaryBasedCache()
  fullName: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.DictionaryBasedCache()
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/ReaderIndex/DictionaryBasedCache.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/Storage/ReaderIndex/DictionaryBasedCache.cs
    startLine: 6
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage.ReaderIndex
  syntax:
    content: public DictionaryBasedCache()
    content.vb: Public Sub New
  overload: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.#ctor(System.Int32,System.Int64)
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.#ctor(System.Int32,System.Int64)
  id: '#ctor(System.Int32,System.Int64)'
  parent: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache
  langs:
  - csharp
  - vb
  name: DictionaryBasedCache(Int32, Int64)
  nameWithType: DictionaryBasedCache.DictionaryBasedCache(Int32, Int64)
  fullName: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.DictionaryBasedCache(System.Int32, System.Int64)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/ReaderIndex/DictionaryBasedCache.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/Storage/ReaderIndex/DictionaryBasedCache.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage.ReaderIndex
  syntax:
    content: public DictionaryBasedCache(int maxCachedEntries, long maxCacheSize)
    parameters:
    - id: maxCachedEntries
      type: System.Int32
    - id: maxCacheSize
      type: System.Int64
    content.vb: Public Sub New(maxCachedEntries As Integer, maxCacheSize As Long)
  overload: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.Storage.ReaderIndex
  commentId: N:EventStore.Core.Services.Storage.ReaderIndex
  name: EventStore.Core.Services.Storage.ReaderIndex
  nameWithType: EventStore.Core.Services.Storage.ReaderIndex
  fullName: EventStore.Core.Services.Storage.ReaderIndex
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}
  commentId: T:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}
  parent: EventStore.Core.Services.Storage.ReaderIndex
  definition: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2
  name: BoundedCache<Int64, PrepareLogRecord>
  nameWithType: BoundedCache<Int64, PrepareLogRecord>
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>
  nameWithType.vb: BoundedCache(Of Int64, PrepareLogRecord)
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  name.vb: BoundedCache(Of Int64, PrepareLogRecord)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2
    name: BoundedCache
    nameWithType: BoundedCache
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2
    name: BoundedCache
    nameWithType: BoundedCache
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.Count
  commentId: P:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.Count
  parent: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}
  definition: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.Count
  name: Count
  nameWithType: BoundedCache<Int64, PrepareLogRecord>.Count
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.Count
  nameWithType.vb: BoundedCache(Of Int64, PrepareLogRecord).Count
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).Count
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.TryGetRecord(System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord@)
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.TryGetRecord(System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord@)
  parent: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}
  definition: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryGetRecord(`0,`1@)
  name: TryGetRecord(Int64, PrepareLogRecord)
  nameWithType: BoundedCache<Int64, PrepareLogRecord>.TryGetRecord(Int64, PrepareLogRecord)
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.TryGetRecord(System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  nameWithType.vb: BoundedCache(Of Int64, PrepareLogRecord).TryGetRecord(Int64, PrepareLogRecord)
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).TryGetRecord(System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryGetRecord(`0,`1@)
    name: TryGetRecord
    nameWithType: BoundedCache<Int64, PrepareLogRecord>.TryGetRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.TryGetRecord
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryGetRecord(`0,`1@)
    name: TryGetRecord
    nameWithType: BoundedCache(Of Int64, PrepareLogRecord).TryGetRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).TryGetRecord
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.PutRecord(System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.PutRecord(System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  parent: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}
  definition: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1)
  name: PutRecord(Int64, PrepareLogRecord)
  nameWithType: BoundedCache<Int64, PrepareLogRecord>.PutRecord(Int64, PrepareLogRecord)
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.PutRecord(System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  nameWithType.vb: BoundedCache(Of Int64, PrepareLogRecord).PutRecord(Int64, PrepareLogRecord)
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).PutRecord(System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1)
    name: PutRecord
    nameWithType: BoundedCache<Int64, PrepareLogRecord>.PutRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.PutRecord
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1)
    name: PutRecord
    nameWithType: BoundedCache(Of Int64, PrepareLogRecord).PutRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).PutRecord
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.PutRecord(System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord,System.Boolean)
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.PutRecord(System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord,System.Boolean)
  parent: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}
  definition: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1,System.Boolean)
  name: PutRecord(Int64, PrepareLogRecord, Boolean)
  nameWithType: BoundedCache<Int64, PrepareLogRecord>.PutRecord(Int64, PrepareLogRecord, Boolean)
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.PutRecord(System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord, System.Boolean)
  nameWithType.vb: BoundedCache(Of Int64, PrepareLogRecord).PutRecord(Int64, PrepareLogRecord, Boolean)
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).PutRecord(System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord, System.Boolean)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1,System.Boolean)
    name: PutRecord
    nameWithType: BoundedCache<Int64, PrepareLogRecord>.PutRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.PutRecord
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1,System.Boolean)
    name: PutRecord
    nameWithType: BoundedCache(Of Int64, PrepareLogRecord).PutRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).PutRecord
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.TryPutRecord(System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.TryPutRecord(System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  parent: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}
  definition: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryPutRecord(`0,`1)
  name: TryPutRecord(Int64, PrepareLogRecord)
  nameWithType: BoundedCache<Int64, PrepareLogRecord>.TryPutRecord(Int64, PrepareLogRecord)
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.TryPutRecord(System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  nameWithType.vb: BoundedCache(Of Int64, PrepareLogRecord).TryPutRecord(Int64, PrepareLogRecord)
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).TryPutRecord(System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryPutRecord(`0,`1)
    name: TryPutRecord
    nameWithType: BoundedCache<Int64, PrepareLogRecord>.TryPutRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.TryPutRecord
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryPutRecord(`0,`1)
    name: TryPutRecord
    nameWithType: BoundedCache(Of Int64, PrepareLogRecord).TryPutRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).TryPutRecord
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.Clear
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.Clear
  parent: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}
  definition: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.Clear
  name: Clear()
  nameWithType: BoundedCache<Int64, PrepareLogRecord>.Clear()
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.Clear()
  nameWithType.vb: BoundedCache(Of Int64, PrepareLogRecord).Clear()
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).Clear()
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.Clear
    name: Clear
    nameWithType: BoundedCache<Int64, PrepareLogRecord>.Clear
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.Clear
    name: Clear
    nameWithType: BoundedCache(Of Int64, PrepareLogRecord).Clear
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.RemoveRecord(System.Int64)
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.RemoveRecord(System.Int64)
  parent: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}
  definition: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.RemoveRecord(`0)
  name: RemoveRecord(Int64)
  nameWithType: BoundedCache<Int64, PrepareLogRecord>.RemoveRecord(Int64)
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.RemoveRecord(System.Int64)
  nameWithType.vb: BoundedCache(Of Int64, PrepareLogRecord).RemoveRecord(Int64)
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).RemoveRecord(System.Int64)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.RemoveRecord(`0)
    name: RemoveRecord
    nameWithType: BoundedCache<Int64, PrepareLogRecord>.RemoveRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.RemoveRecord
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.RemoveRecord(`0)
    name: RemoveRecord
    nameWithType: BoundedCache(Of Int64, PrepareLogRecord).RemoveRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).RemoveRecord
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.GetStatistics
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}.GetStatistics
  parent: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache{System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}
  definition: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.GetStatistics
  name: GetStatistics()
  nameWithType: BoundedCache<Int64, PrepareLogRecord>.GetStatistics()
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.GetStatistics()
  nameWithType.vb: BoundedCache(Of Int64, PrepareLogRecord).GetStatistics()
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).GetStatistics()
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.GetStatistics
    name: GetStatistics
    nameWithType: BoundedCache<Int64, PrepareLogRecord>.GetStatistics
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>.GetStatistics
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.GetStatistics
    name: GetStatistics
    nameWithType: BoundedCache(Of Int64, PrepareLogRecord).GetStatistics
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord).GetStatistics
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<DictionaryBasedCache>()
  nameWithType: ProtobufExtensions.Serialize<DictionaryBasedCache>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of DictionaryBasedCache)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache)()
  name.vb: Serialize(Of DictionaryBasedCache)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<DictionaryBasedCache>
    nameWithType: ProtobufExtensions.Serialize<DictionaryBasedCache>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of DictionaryBasedCache)
    nameWithType: ProtobufExtensions.Serialize(Of DictionaryBasedCache)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<DictionaryBasedCache>()
  nameWithType: ProtobufExtensions.SerializeToArray<DictionaryBasedCache>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of DictionaryBasedCache)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache)()
  name.vb: SerializeToArray(Of DictionaryBasedCache)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<DictionaryBasedCache>
    nameWithType: ProtobufExtensions.SerializeToArray<DictionaryBasedCache>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of DictionaryBasedCache)
    nameWithType: ProtobufExtensions.SerializeToArray(Of DictionaryBasedCache)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2
  commentId: T:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2
  name: BoundedCache<TKey, TValue>
  nameWithType: BoundedCache<TKey, TValue>
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>
  nameWithType.vb: BoundedCache(Of TKey, TValue)
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue)
  name.vb: BoundedCache(Of TKey, TValue)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2
    name: BoundedCache
    nameWithType: BoundedCache
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2
    name: BoundedCache
    nameWithType: BoundedCache
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.Count
  commentId: P:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.Count
  name: Count
  nameWithType: BoundedCache<TKey, TValue>.Count
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.Count
  nameWithType.vb: BoundedCache(Of TKey, TValue).Count
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).Count
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryGetRecord(`0,`1@)
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryGetRecord(`0,`1@)
  name: TryGetRecord(TKey, TValue)
  nameWithType: BoundedCache<TKey, TValue>.TryGetRecord(TKey, TValue)
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.TryGetRecord(TKey, TValue)
  nameWithType.vb: BoundedCache(Of TKey, TValue).TryGetRecord(TKey, TValue)
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).TryGetRecord(TKey, TValue)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryGetRecord(`0,`1@)
    name: TryGetRecord
    nameWithType: BoundedCache<TKey, TValue>.TryGetRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.TryGetRecord
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryGetRecord(`0,`1@)
    name: TryGetRecord
    nameWithType: BoundedCache(Of TKey, TValue).TryGetRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).TryGetRecord
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1)
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1)
  name: PutRecord(TKey, TValue)
  nameWithType: BoundedCache<TKey, TValue>.PutRecord(TKey, TValue)
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.PutRecord(TKey, TValue)
  nameWithType.vb: BoundedCache(Of TKey, TValue).PutRecord(TKey, TValue)
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).PutRecord(TKey, TValue)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1)
    name: PutRecord
    nameWithType: BoundedCache<TKey, TValue>.PutRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.PutRecord
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1)
    name: PutRecord
    nameWithType: BoundedCache(Of TKey, TValue).PutRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).PutRecord
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1,System.Boolean)
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1,System.Boolean)
  isExternal: true
  name: PutRecord(TKey, TValue, Boolean)
  nameWithType: BoundedCache<TKey, TValue>.PutRecord(TKey, TValue, Boolean)
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.PutRecord(TKey, TValue, System.Boolean)
  nameWithType.vb: BoundedCache(Of TKey, TValue).PutRecord(TKey, TValue, Boolean)
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).PutRecord(TKey, TValue, System.Boolean)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1,System.Boolean)
    name: PutRecord
    nameWithType: BoundedCache<TKey, TValue>.PutRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.PutRecord
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.PutRecord(`0,`1,System.Boolean)
    name: PutRecord
    nameWithType: BoundedCache(Of TKey, TValue).PutRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).PutRecord
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryPutRecord(`0,`1)
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryPutRecord(`0,`1)
  name: TryPutRecord(TKey, TValue)
  nameWithType: BoundedCache<TKey, TValue>.TryPutRecord(TKey, TValue)
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.TryPutRecord(TKey, TValue)
  nameWithType.vb: BoundedCache(Of TKey, TValue).TryPutRecord(TKey, TValue)
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).TryPutRecord(TKey, TValue)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryPutRecord(`0,`1)
    name: TryPutRecord
    nameWithType: BoundedCache<TKey, TValue>.TryPutRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.TryPutRecord
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.TryPutRecord(`0,`1)
    name: TryPutRecord
    nameWithType: BoundedCache(Of TKey, TValue).TryPutRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).TryPutRecord
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.Clear
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.Clear
  name: Clear()
  nameWithType: BoundedCache<TKey, TValue>.Clear()
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.Clear()
  nameWithType.vb: BoundedCache(Of TKey, TValue).Clear()
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).Clear()
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.Clear
    name: Clear
    nameWithType: BoundedCache<TKey, TValue>.Clear
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.Clear
    name: Clear
    nameWithType: BoundedCache(Of TKey, TValue).Clear
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.RemoveRecord(`0)
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.RemoveRecord(`0)
  name: RemoveRecord(TKey)
  nameWithType: BoundedCache<TKey, TValue>.RemoveRecord(TKey)
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.RemoveRecord(TKey)
  nameWithType.vb: BoundedCache(Of TKey, TValue).RemoveRecord(TKey)
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).RemoveRecord(TKey)
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.RemoveRecord(`0)
    name: RemoveRecord
    nameWithType: BoundedCache<TKey, TValue>.RemoveRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.RemoveRecord
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.RemoveRecord(`0)
    name: RemoveRecord
    nameWithType: BoundedCache(Of TKey, TValue).RemoveRecord
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).RemoveRecord
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.GetStatistics
  commentId: M:EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.GetStatistics
  name: GetStatistics()
  nameWithType: BoundedCache<TKey, TValue>.GetStatistics()
  fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.GetStatistics()
  nameWithType.vb: BoundedCache(Of TKey, TValue).GetStatistics()
  fullName.vb: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).GetStatistics()
  spec.csharp:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.GetStatistics
    name: GetStatistics
    nameWithType: BoundedCache<TKey, TValue>.GetStatistics
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache<TKey, TValue>.GetStatistics
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache`2.GetStatistics
    name: GetStatistics
    nameWithType: BoundedCache(Of TKey, TValue).GetStatistics
    fullName: EventStore.Core.Services.Storage.ReaderIndex.BoundedCache(Of TKey, TValue).GetStatistics
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.#ctor*
  commentId: Overload:EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.#ctor
  name: DictionaryBasedCache
  nameWithType: DictionaryBasedCache.DictionaryBasedCache
  fullName: EventStore.Core.Services.Storage.ReaderIndex.DictionaryBasedCache.DictionaryBasedCache
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Storage.StorageScavenger
  commentId: T:EventStore.Core.Services.Storage.StorageScavenger
  id: StorageScavenger
  parent: EventStore.Core.Services.Storage
  children:
  - EventStore.Core.Services.Storage.StorageScavenger.#ctor(EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Index.ITableIndex,EventStore.Core.Services.Storage.ReaderIndex.IReadIndex,EventStore.Core.TransactionLog.Chunks.ITFChunkScavengerLogManager,System.Boolean,System.Boolean,System.Boolean)
  - EventStore.Core.Services.Storage.StorageScavenger.Handle(EventStore.Core.Messages.ClientMessage.ScavengeDatabase)
  - EventStore.Core.Services.Storage.StorageScavenger.Handle(EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge)
  - EventStore.Core.Services.Storage.StorageScavenger.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  langs:
  - csharp
  - vb
  name: StorageScavenger
  nameWithType: StorageScavenger
  fullName: EventStore.Core.Services.Storage.StorageScavenger
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/StorageScavenger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: StorageScavenger
    path: ../EventStore/src/EventStore.Core/Services/Storage/StorageScavenger.cs
    startLine: 14
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: 'public class StorageScavenger : object, IHandle<ClientMessage.ScavengeDatabase>, IHandle<ClientMessage.StopDatabaseScavenge>, IHandle<SystemMessage.StateChangeMessage>'
    content.vb: >-
      Public Class StorageScavenger
          Inherits Object
          Implements IHandle(Of ClientMessage.ScavengeDatabase), IHandle(Of ClientMessage.StopDatabaseScavenge), IHandle(Of SystemMessage.StateChangeMessage)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ScavengeDatabase}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.Storage.StorageScavenger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Storage.StorageScavenger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.Storage.StorageScavenger.#ctor(EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Index.ITableIndex,EventStore.Core.Services.Storage.ReaderIndex.IReadIndex,EventStore.Core.TransactionLog.Chunks.ITFChunkScavengerLogManager,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:EventStore.Core.Services.Storage.StorageScavenger.#ctor(EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Index.ITableIndex,EventStore.Core.Services.Storage.ReaderIndex.IReadIndex,EventStore.Core.TransactionLog.Chunks.ITFChunkScavengerLogManager,System.Boolean,System.Boolean,System.Boolean)
  id: '#ctor(EventStore.Core.TransactionLog.Chunks.TFChunkDb,EventStore.Core.Index.ITableIndex,EventStore.Core.Services.Storage.ReaderIndex.IReadIndex,EventStore.Core.TransactionLog.Chunks.ITFChunkScavengerLogManager,System.Boolean,System.Boolean,System.Boolean)'
  parent: EventStore.Core.Services.Storage.StorageScavenger
  langs:
  - csharp
  - vb
  name: StorageScavenger(TFChunkDb, ITableIndex, IReadIndex, ITFChunkScavengerLogManager, Boolean, Boolean, Boolean)
  nameWithType: StorageScavenger.StorageScavenger(TFChunkDb, ITableIndex, IReadIndex, ITFChunkScavengerLogManager, Boolean, Boolean, Boolean)
  fullName: EventStore.Core.Services.Storage.StorageScavenger.StorageScavenger(EventStore.Core.TransactionLog.Chunks.TFChunkDb, EventStore.Core.Index.ITableIndex, EventStore.Core.Services.Storage.ReaderIndex.IReadIndex, EventStore.Core.TransactionLog.Chunks.ITFChunkScavengerLogManager, System.Boolean, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/StorageScavenger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/Storage/StorageScavenger.cs
    startLine: 30
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public StorageScavenger(TFChunkDb db, ITableIndex tableIndex, IReadIndex readIndex, ITFChunkScavengerLogManager logManager, bool alwaysKeepScavenged, bool mergeChunks, bool unsafeIgnoreHardDeletes)
    parameters:
    - id: db
      type: EventStore.Core.TransactionLog.Chunks.TFChunkDb
    - id: tableIndex
      type: EventStore.Core.Index.ITableIndex
    - id: readIndex
      type: EventStore.Core.Services.Storage.ReaderIndex.IReadIndex
    - id: logManager
      type: EventStore.Core.TransactionLog.Chunks.ITFChunkScavengerLogManager
    - id: alwaysKeepScavenged
      type: System.Boolean
    - id: mergeChunks
      type: System.Boolean
    - id: unsafeIgnoreHardDeletes
      type: System.Boolean
    content.vb: Public Sub New(db As TFChunkDb, tableIndex As ITableIndex, readIndex As IReadIndex, logManager As ITFChunkScavengerLogManager, alwaysKeepScavenged As Boolean, mergeChunks As Boolean, unsafeIgnoreHardDeletes As Boolean)
  overload: EventStore.Core.Services.Storage.StorageScavenger.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.StorageScavenger.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Services.Storage.StorageScavenger.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  id: Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Services.Storage.StorageScavenger
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: StorageScavenger.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Services.Storage.StorageScavenger.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/StorageScavenger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Storage/StorageScavenger.cs
    startLine: 47
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public void Handle(SystemMessage.StateChangeMessage message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    content.vb: Public Sub Handle(message As SystemMessage.StateChangeMessage)
  overload: EventStore.Core.Services.Storage.StorageScavenger.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.StorageScavenger.Handle(EventStore.Core.Messages.ClientMessage.ScavengeDatabase)
  commentId: M:EventStore.Core.Services.Storage.StorageScavenger.Handle(EventStore.Core.Messages.ClientMessage.ScavengeDatabase)
  id: Handle(EventStore.Core.Messages.ClientMessage.ScavengeDatabase)
  parent: EventStore.Core.Services.Storage.StorageScavenger
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.ScavengeDatabase)
  nameWithType: StorageScavenger.Handle(ClientMessage.ScavengeDatabase)
  fullName: EventStore.Core.Services.Storage.StorageScavenger.Handle(EventStore.Core.Messages.ClientMessage.ScavengeDatabase)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/StorageScavenger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Storage/StorageScavenger.cs
    startLine: 53
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public void Handle(ClientMessage.ScavengeDatabase message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ClientMessage.ScavengeDatabase
    content.vb: Public Sub Handle(message As ClientMessage.ScavengeDatabase)
  overload: EventStore.Core.Services.Storage.StorageScavenger.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ScavengeDatabase}.Handle(EventStore.Core.Messages.ClientMessage.ScavengeDatabase)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Storage.StorageScavenger.Handle(EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge)
  commentId: M:EventStore.Core.Services.Storage.StorageScavenger.Handle(EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge)
  id: Handle(EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge)
  parent: EventStore.Core.Services.Storage.StorageScavenger
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.StopDatabaseScavenge)
  nameWithType: StorageScavenger.Handle(ClientMessage.StopDatabaseScavenge)
  fullName: EventStore.Core.Services.Storage.StorageScavenger.Handle(EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Storage/StorageScavenger.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/Storage/StorageScavenger.cs
    startLine: 79
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Storage
  syntax:
    content: public void Handle(ClientMessage.StopDatabaseScavenge message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge
    content.vb: Public Sub Handle(message As ClientMessage.StopDatabaseScavenge)
  overload: EventStore.Core.Services.Storage.StorageScavenger.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge}.Handle(EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.Storage
  commentId: N:EventStore.Core.Services.Storage
  name: EventStore.Core.Services.Storage
  nameWithType: EventStore.Core.Services.Storage
  fullName: EventStore.Core.Services.Storage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ScavengeDatabase}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ScavengeDatabase}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.ScavengeDatabase>
  nameWithType: IHandle<ClientMessage.ScavengeDatabase>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ScavengeDatabase>
  nameWithType.vb: IHandle(Of ClientMessage.ScavengeDatabase)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ScavengeDatabase)
  name.vb: IHandle(Of ClientMessage.ScavengeDatabase)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ScavengeDatabase
    name: ClientMessage.ScavengeDatabase
    nameWithType: ClientMessage.ScavengeDatabase
    fullName: EventStore.Core.Messages.ClientMessage.ScavengeDatabase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ScavengeDatabase
    name: ClientMessage.ScavengeDatabase
    nameWithType: ClientMessage.ScavengeDatabase
    fullName: EventStore.Core.Messages.ClientMessage.ScavengeDatabase
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.StopDatabaseScavenge>
  nameWithType: IHandle<ClientMessage.StopDatabaseScavenge>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge>
  nameWithType.vb: IHandle(Of ClientMessage.StopDatabaseScavenge)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge)
  name.vb: IHandle(Of ClientMessage.StopDatabaseScavenge)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge
    name: ClientMessage.StopDatabaseScavenge
    nameWithType: ClientMessage.StopDatabaseScavenge
    fullName: EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge
    name: ClientMessage.StopDatabaseScavenge
    nameWithType: ClientMessage.StopDatabaseScavenge
    fullName: EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.StateChangeMessage>
  nameWithType: IHandle<SystemMessage.StateChangeMessage>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  name.vb: IHandle(Of SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageScavenger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<StorageScavenger>()
  nameWithType: ProtobufExtensions.Serialize<StorageScavenger>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Storage.StorageScavenger>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of StorageScavenger)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Storage.StorageScavenger)()
  name.vb: Serialize(Of StorageScavenger)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<StorageScavenger>
    nameWithType: ProtobufExtensions.Serialize<StorageScavenger>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Storage.StorageScavenger>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of StorageScavenger)
    nameWithType: ProtobufExtensions.Serialize(Of StorageScavenger)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Storage.StorageScavenger)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Storage.StorageScavenger.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<StorageScavenger>()
  nameWithType: ProtobufExtensions.SerializeToArray<StorageScavenger>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Storage.StorageScavenger>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of StorageScavenger)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Storage.StorageScavenger)()
  name.vb: SerializeToArray(Of StorageScavenger)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<StorageScavenger>
    nameWithType: ProtobufExtensions.SerializeToArray<StorageScavenger>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Storage.StorageScavenger>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of StorageScavenger)
    nameWithType: ProtobufExtensions.SerializeToArray(Of StorageScavenger)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Storage.StorageScavenger)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.Storage.StorageScavenger.#ctor*
  commentId: Overload:EventStore.Core.Services.Storage.StorageScavenger.#ctor
  name: StorageScavenger
  nameWithType: StorageScavenger.StorageScavenger
  fullName: EventStore.Core.Services.Storage.StorageScavenger.StorageScavenger
- uid: EventStore.Core.TransactionLog.Chunks.TFChunkDb
  commentId: T:EventStore.Core.TransactionLog.Chunks.TFChunkDb
  parent: EventStore.Core.TransactionLog.Chunks
  name: TFChunkDb
  nameWithType: TFChunkDb
  fullName: EventStore.Core.TransactionLog.Chunks.TFChunkDb
- uid: EventStore.Core.Index.ITableIndex
  commentId: T:EventStore.Core.Index.ITableIndex
  parent: EventStore.Core.Index
  name: ITableIndex
  nameWithType: ITableIndex
  fullName: EventStore.Core.Index.ITableIndex
- uid: EventStore.Core.Services.Storage.ReaderIndex.IReadIndex
  commentId: T:EventStore.Core.Services.Storage.ReaderIndex.IReadIndex
  parent: EventStore.Core.Services.Storage.ReaderIndex
  name: IReadIndex
  nameWithType: IReadIndex
  fullName: EventStore.Core.Services.Storage.ReaderIndex.IReadIndex
- uid: EventStore.Core.TransactionLog.Chunks.ITFChunkScavengerLogManager
  commentId: T:EventStore.Core.TransactionLog.Chunks.ITFChunkScavengerLogManager
  parent: EventStore.Core.TransactionLog.Chunks
  name: ITFChunkScavengerLogManager
  nameWithType: ITFChunkScavengerLogManager
  fullName: EventStore.Core.TransactionLog.Chunks.ITFChunkScavengerLogManager
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.TransactionLog.Chunks
  commentId: N:EventStore.Core.TransactionLog.Chunks
  name: EventStore.Core.TransactionLog.Chunks
  nameWithType: EventStore.Core.TransactionLog.Chunks
  fullName: EventStore.Core.TransactionLog.Chunks
- uid: EventStore.Core.Index
  commentId: N:EventStore.Core.Index
  name: EventStore.Core.Index
  nameWithType: EventStore.Core.Index
  fullName: EventStore.Core.Index
- uid: EventStore.Core.Services.Storage.ReaderIndex
  commentId: N:EventStore.Core.Services.Storage.ReaderIndex
  name: EventStore.Core.Services.Storage.ReaderIndex
  nameWithType: EventStore.Core.Services.Storage.ReaderIndex
  fullName: EventStore.Core.Services.Storage.ReaderIndex
- uid: EventStore.Core.Services.Storage.StorageScavenger.Handle*
  commentId: Overload:EventStore.Core.Services.Storage.StorageScavenger.Handle
  name: Handle
  nameWithType: StorageScavenger.Handle
  fullName: EventStore.Core.Services.Storage.StorageScavenger.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.StateChangeMessage}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.StateChangeMessage)
  nameWithType: IHandle<SystemMessage.StateChangeMessage>.Handle(SystemMessage.StateChangeMessage)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>.Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  nameWithType.vb: IHandle(Of SystemMessage.StateChangeMessage).Handle(SystemMessage.StateChangeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage).Handle(EventStore.Core.Messages.SystemMessage.StateChangeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.StateChangeMessage>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.StateChangeMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.StateChangeMessage).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.StateChangeMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
    name: SystemMessage.StateChangeMessage
    nameWithType: SystemMessage.StateChangeMessage
    fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.StateChangeMessage
  commentId: T:EventStore.Core.Messages.SystemMessage.StateChangeMessage
  parent: EventStore.Core.Messages
  name: SystemMessage.StateChangeMessage
  nameWithType: SystemMessage.StateChangeMessage
  fullName: EventStore.Core.Messages.SystemMessage.StateChangeMessage
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ScavengeDatabase}.Handle(EventStore.Core.Messages.ClientMessage.ScavengeDatabase)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ScavengeDatabase}.Handle(EventStore.Core.Messages.ClientMessage.ScavengeDatabase)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ScavengeDatabase}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.ScavengeDatabase)
  nameWithType: IHandle<ClientMessage.ScavengeDatabase>.Handle(ClientMessage.ScavengeDatabase)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ScavengeDatabase>.Handle(EventStore.Core.Messages.ClientMessage.ScavengeDatabase)
  nameWithType.vb: IHandle(Of ClientMessage.ScavengeDatabase).Handle(ClientMessage.ScavengeDatabase)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ScavengeDatabase).Handle(EventStore.Core.Messages.ClientMessage.ScavengeDatabase)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.ScavengeDatabase>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ScavengeDatabase>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ScavengeDatabase
    name: ClientMessage.ScavengeDatabase
    nameWithType: ClientMessage.ScavengeDatabase
    fullName: EventStore.Core.Messages.ClientMessage.ScavengeDatabase
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.ScavengeDatabase).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ScavengeDatabase).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ScavengeDatabase
    name: ClientMessage.ScavengeDatabase
    nameWithType: ClientMessage.ScavengeDatabase
    fullName: EventStore.Core.Messages.ClientMessage.ScavengeDatabase
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ScavengeDatabase
  commentId: T:EventStore.Core.Messages.ClientMessage.ScavengeDatabase
  parent: EventStore.Core.Messages
  name: ClientMessage.ScavengeDatabase
  nameWithType: ClientMessage.ScavengeDatabase
  fullName: EventStore.Core.Messages.ClientMessage.ScavengeDatabase
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge}.Handle(EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge}.Handle(EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.StopDatabaseScavenge)
  nameWithType: IHandle<ClientMessage.StopDatabaseScavenge>.Handle(ClientMessage.StopDatabaseScavenge)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge>.Handle(EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge)
  nameWithType.vb: IHandle(Of ClientMessage.StopDatabaseScavenge).Handle(ClientMessage.StopDatabaseScavenge)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge).Handle(EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.StopDatabaseScavenge>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge
    name: ClientMessage.StopDatabaseScavenge
    nameWithType: ClientMessage.StopDatabaseScavenge
    fullName: EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.StopDatabaseScavenge).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge
    name: ClientMessage.StopDatabaseScavenge
    nameWithType: ClientMessage.StopDatabaseScavenge
    fullName: EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge
  commentId: T:EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge
  parent: EventStore.Core.Messages
  name: ClientMessage.StopDatabaseScavenge
  nameWithType: ClientMessage.StopDatabaseScavenge
  fullName: EventStore.Core.Messages.ClientMessage.StopDatabaseScavenge

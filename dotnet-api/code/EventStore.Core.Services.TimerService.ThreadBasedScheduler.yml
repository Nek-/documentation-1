### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler
  commentId: T:EventStore.Core.Services.TimerService.ThreadBasedScheduler
  id: ThreadBasedScheduler
  parent: EventStore.Core.Services.TimerService
  children:
  - EventStore.Core.Services.TimerService.ThreadBasedScheduler.#ctor(EventStore.Core.Services.TimerService.ITimeProvider)
  - EventStore.Core.Services.TimerService.ThreadBasedScheduler.Dispose
  - EventStore.Core.Services.TimerService.ThreadBasedScheduler.GetStatistics
  - EventStore.Core.Services.TimerService.ThreadBasedScheduler.Name
  - EventStore.Core.Services.TimerService.ThreadBasedScheduler.Schedule(TimeSpan,Action{EventStore.Core.Services.TimerService.IScheduler,System.Object},System.Object)
  - EventStore.Core.Services.TimerService.ThreadBasedScheduler.Stop
  - EventStore.Core.Services.TimerService.ThreadBasedScheduler.Task
  langs:
  - csharp
  - vb
  name: ThreadBasedScheduler
  nameWithType: ThreadBasedScheduler
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ThreadBasedScheduler
    path: ../EventStore/src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
    startLine: 11
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.TimerService
  syntax:
    content: 'public class ThreadBasedScheduler : object, IMonitoredQueue, IScheduler, IDisposable'
    content.vb: >-
      Public Class ThreadBasedScheduler
          Inherits Object
          Implements IMonitoredQueue, IScheduler, IDisposable
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IMonitoredQueue
  - EventStore.Core.Services.TimerService.IScheduler
  - IDisposable
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.TimerService.ThreadBasedScheduler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.TimerService.ThreadBasedScheduler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Name
  commentId: P:EventStore.Core.Services.TimerService.ThreadBasedScheduler.Name
  id: Name
  parent: EventStore.Core.Services.TimerService.ThreadBasedScheduler
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ThreadBasedScheduler.Name
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Name
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Name
    path: ../EventStore/src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
    startLine: 13
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.TimerService
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Name*
  implements:
  - EventStore.Core.Bus.IMonitoredQueue.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Task
  commentId: P:EventStore.Core.Services.TimerService.ThreadBasedScheduler.Task
  id: Task
  parent: EventStore.Core.Services.TimerService.ThreadBasedScheduler
  langs:
  - csharp
  - vb
  name: Task
  nameWithType: ThreadBasedScheduler.Task
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Task
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Task
    path: ../EventStore/src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
    startLine: 25
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.TimerService
  syntax:
    content: public Task Task { get; }
    parameters: []
    return:
      type: Task
    content.vb: Public ReadOnly Property Task As Task
  overload: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Task*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.#ctor(EventStore.Core.Services.TimerService.ITimeProvider)
  commentId: M:EventStore.Core.Services.TimerService.ThreadBasedScheduler.#ctor(EventStore.Core.Services.TimerService.ITimeProvider)
  id: '#ctor(EventStore.Core.Services.TimerService.ITimeProvider)'
  parent: EventStore.Core.Services.TimerService.ThreadBasedScheduler
  langs:
  - csharp
  - vb
  name: ThreadBasedScheduler(ITimeProvider)
  nameWithType: ThreadBasedScheduler.ThreadBasedScheduler(ITimeProvider)
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.ThreadBasedScheduler(EventStore.Core.Services.TimerService.ITimeProvider)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
    startLine: 27
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.TimerService
  syntax:
    content: public ThreadBasedScheduler(ITimeProvider timeProvider)
    parameters:
    - id: timeProvider
      type: EventStore.Core.Services.TimerService.ITimeProvider
    content.vb: Public Sub New(timeProvider As ITimeProvider)
  overload: EventStore.Core.Services.TimerService.ThreadBasedScheduler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Stop
  commentId: M:EventStore.Core.Services.TimerService.ThreadBasedScheduler.Stop
  id: Stop
  parent: EventStore.Core.Services.TimerService.ThreadBasedScheduler
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: ThreadBasedScheduler.Stop()
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Stop()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Stop
    path: ../EventStore/src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
    startLine: 38
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.TimerService
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  overload: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Stop*
  implements:
  - EventStore.Core.Services.TimerService.IScheduler.Stop
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Schedule(TimeSpan,Action{EventStore.Core.Services.TimerService.IScheduler,System.Object},System.Object)
  commentId: M:EventStore.Core.Services.TimerService.ThreadBasedScheduler.Schedule(TimeSpan,Action{EventStore.Core.Services.TimerService.IScheduler,System.Object},System.Object)
  id: Schedule(TimeSpan,Action{EventStore.Core.Services.TimerService.IScheduler,System.Object},System.Object)
  parent: EventStore.Core.Services.TimerService.ThreadBasedScheduler
  langs:
  - csharp
  - vb
  name: Schedule(TimeSpan, Action<IScheduler, Object>, Object)
  nameWithType: ThreadBasedScheduler.Schedule(TimeSpan, Action<IScheduler, Object>, Object)
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Schedule(TimeSpan, Action<EventStore.Core.Services.TimerService.IScheduler, System.Object>, System.Object)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Schedule
    path: ../EventStore/src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
    startLine: 43
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.TimerService
  syntax:
    content: public void Schedule(TimeSpan after, Action<IScheduler, object> callback, object state)
    parameters:
    - id: after
      type: TimeSpan
    - id: callback
      type: Action{EventStore.Core.Services.TimerService.IScheduler,System.Object}
    - id: state
      type: System.Object
    content.vb: Public Sub Schedule(after As TimeSpan, callback As Action(Of IScheduler, Object), state As Object)
  overload: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Schedule*
  implements:
  - EventStore.Core.Services.TimerService.IScheduler.Schedule(TimeSpan,Action{EventStore.Core.Services.TimerService.IScheduler,System.Object},System.Object)
  nameWithType.vb: ThreadBasedScheduler.Schedule(TimeSpan, Action(Of IScheduler, Object), Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Schedule(TimeSpan, Action(Of EventStore.Core.Services.TimerService.IScheduler, System.Object), System.Object)
  name.vb: Schedule(TimeSpan, Action(Of IScheduler, Object), Object)
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Dispose
  commentId: M:EventStore.Core.Services.TimerService.ThreadBasedScheduler.Dispose
  id: Dispose
  parent: EventStore.Core.Services.TimerService.ThreadBasedScheduler
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ThreadBasedScheduler.Dispose()
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Dispose()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Dispose
    path: ../EventStore/src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
    startLine: 97
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.TimerService
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.GetStatistics
  commentId: M:EventStore.Core.Services.TimerService.ThreadBasedScheduler.GetStatistics
  id: GetStatistics
  parent: EventStore.Core.Services.TimerService.ThreadBasedScheduler
  langs:
  - csharp
  - vb
  name: GetStatistics()
  nameWithType: ThreadBasedScheduler.GetStatistics()
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.GetStatistics()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetStatistics
    path: ../EventStore/src/EventStore.Core/Services/TimerService/ThreadBasedScheduler.cs
    startLine: 102
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.TimerService
  syntax:
    content: public QueueStats GetStatistics()
    return:
      type: EventStore.Core.Services.Monitoring.Stats.QueueStats
    content.vb: Public Function GetStatistics As QueueStats
  overload: EventStore.Core.Services.TimerService.ThreadBasedScheduler.GetStatistics*
  implements:
  - EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.TimerService
  commentId: N:EventStore.Core.Services.TimerService
  name: EventStore.Core.Services.TimerService
  nameWithType: EventStore.Core.Services.TimerService
  fullName: EventStore.Core.Services.TimerService
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IMonitoredQueue
  commentId: T:EventStore.Core.Bus.IMonitoredQueue
  parent: EventStore.Core.Bus
  name: IMonitoredQueue
  nameWithType: IMonitoredQueue
  fullName: EventStore.Core.Bus.IMonitoredQueue
- uid: EventStore.Core.Services.TimerService.IScheduler
  commentId: T:EventStore.Core.Services.TimerService.IScheduler
  parent: EventStore.Core.Services.TimerService
  name: IScheduler
  nameWithType: IScheduler
  fullName: EventStore.Core.Services.TimerService.IScheduler
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ThreadBasedScheduler>()
  nameWithType: ProtobufExtensions.Serialize<ThreadBasedScheduler>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.TimerService.ThreadBasedScheduler>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ThreadBasedScheduler)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.TimerService.ThreadBasedScheduler)()
  name.vb: Serialize(Of ThreadBasedScheduler)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ThreadBasedScheduler>
    nameWithType: ProtobufExtensions.Serialize<ThreadBasedScheduler>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.TimerService.ThreadBasedScheduler>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ThreadBasedScheduler)
    nameWithType: ProtobufExtensions.Serialize(Of ThreadBasedScheduler)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.TimerService.ThreadBasedScheduler)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ThreadBasedScheduler>()
  nameWithType: ProtobufExtensions.SerializeToArray<ThreadBasedScheduler>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.TimerService.ThreadBasedScheduler>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ThreadBasedScheduler)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.TimerService.ThreadBasedScheduler)()
  name.vb: SerializeToArray(Of ThreadBasedScheduler)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ThreadBasedScheduler>
    nameWithType: ProtobufExtensions.SerializeToArray<ThreadBasedScheduler>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.TimerService.ThreadBasedScheduler>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ThreadBasedScheduler)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ThreadBasedScheduler)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.TimerService.ThreadBasedScheduler)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Name*
  commentId: Overload:EventStore.Core.Services.TimerService.ThreadBasedScheduler.Name
  name: Name
  nameWithType: ThreadBasedScheduler.Name
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Name
- uid: EventStore.Core.Bus.IMonitoredQueue.Name
  commentId: P:EventStore.Core.Bus.IMonitoredQueue.Name
  parent: EventStore.Core.Bus.IMonitoredQueue
  name: Name
  nameWithType: IMonitoredQueue.Name
  fullName: EventStore.Core.Bus.IMonitoredQueue.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Task*
  commentId: Overload:EventStore.Core.Services.TimerService.ThreadBasedScheduler.Task
  name: Task
  nameWithType: ThreadBasedScheduler.Task
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Task
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.#ctor*
  commentId: Overload:EventStore.Core.Services.TimerService.ThreadBasedScheduler.#ctor
  name: ThreadBasedScheduler
  nameWithType: ThreadBasedScheduler.ThreadBasedScheduler
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.ThreadBasedScheduler
- uid: EventStore.Core.Services.TimerService.ITimeProvider
  commentId: T:EventStore.Core.Services.TimerService.ITimeProvider
  parent: EventStore.Core.Services.TimerService
  name: ITimeProvider
  nameWithType: ITimeProvider
  fullName: EventStore.Core.Services.TimerService.ITimeProvider
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Stop*
  commentId: Overload:EventStore.Core.Services.TimerService.ThreadBasedScheduler.Stop
  name: Stop
  nameWithType: ThreadBasedScheduler.Stop
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Stop
- uid: EventStore.Core.Services.TimerService.IScheduler.Stop
  commentId: M:EventStore.Core.Services.TimerService.IScheduler.Stop
  parent: EventStore.Core.Services.TimerService.IScheduler
  name: Stop()
  nameWithType: IScheduler.Stop()
  fullName: EventStore.Core.Services.TimerService.IScheduler.Stop()
  spec.csharp:
  - uid: EventStore.Core.Services.TimerService.IScheduler.Stop
    name: Stop
    nameWithType: IScheduler.Stop
    fullName: EventStore.Core.Services.TimerService.IScheduler.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.TimerService.IScheduler.Stop
    name: Stop
    nameWithType: IScheduler.Stop
    fullName: EventStore.Core.Services.TimerService.IScheduler.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Schedule*
  commentId: Overload:EventStore.Core.Services.TimerService.ThreadBasedScheduler.Schedule
  name: Schedule
  nameWithType: ThreadBasedScheduler.Schedule
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Schedule
- uid: EventStore.Core.Services.TimerService.IScheduler.Schedule(TimeSpan,Action{EventStore.Core.Services.TimerService.IScheduler,System.Object},System.Object)
  commentId: M:EventStore.Core.Services.TimerService.IScheduler.Schedule(TimeSpan,Action{EventStore.Core.Services.TimerService.IScheduler,System.Object},System.Object)
  parent: EventStore.Core.Services.TimerService.IScheduler
  isExternal: true
  name: Schedule(TimeSpan, Action<IScheduler, Object>, Object)
  nameWithType: IScheduler.Schedule(TimeSpan, Action<IScheduler, Object>, Object)
  fullName: EventStore.Core.Services.TimerService.IScheduler.Schedule(TimeSpan, Action<EventStore.Core.Services.TimerService.IScheduler, System.Object>, System.Object)
  nameWithType.vb: IScheduler.Schedule(TimeSpan, Action(Of IScheduler, Object), Object)
  fullName.vb: EventStore.Core.Services.TimerService.IScheduler.Schedule(TimeSpan, Action(Of EventStore.Core.Services.TimerService.IScheduler, System.Object), System.Object)
  name.vb: Schedule(TimeSpan, Action(Of IScheduler, Object), Object)
  spec.csharp:
  - uid: EventStore.Core.Services.TimerService.IScheduler.Schedule(TimeSpan,Action{EventStore.Core.Services.TimerService.IScheduler,System.Object},System.Object)
    name: Schedule
    nameWithType: IScheduler.Schedule
    fullName: EventStore.Core.Services.TimerService.IScheduler.Schedule
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.TimerService.IScheduler
    name: IScheduler
    nameWithType: IScheduler
    fullName: EventStore.Core.Services.TimerService.IScheduler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.TimerService.IScheduler.Schedule(TimeSpan,Action{EventStore.Core.Services.TimerService.IScheduler,System.Object},System.Object)
    name: Schedule
    nameWithType: IScheduler.Schedule
    fullName: EventStore.Core.Services.TimerService.IScheduler.Schedule
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.TimerService.IScheduler
    name: IScheduler
    nameWithType: IScheduler
    fullName: EventStore.Core.Services.TimerService.IScheduler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: Action{EventStore.Core.Services.TimerService.IScheduler,System.Object}
  commentId: '!:Action{EventStore.Core.Services.TimerService.IScheduler,System.Object}'
  definition: Action`2
  name: Action<IScheduler, Object>
  nameWithType: Action<IScheduler, Object>
  fullName: Action<EventStore.Core.Services.TimerService.IScheduler, System.Object>
  nameWithType.vb: Action(Of IScheduler, Object)
  fullName.vb: Action(Of EventStore.Core.Services.TimerService.IScheduler, System.Object)
  name.vb: Action(Of IScheduler, Object)
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.TimerService.IScheduler
    name: IScheduler
    nameWithType: IScheduler
    fullName: EventStore.Core.Services.TimerService.IScheduler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.TimerService.IScheduler
    name: IScheduler
    nameWithType: IScheduler
    fullName: EventStore.Core.Services.TimerService.IScheduler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`2
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Dispose*
  commentId: Overload:EventStore.Core.Services.TimerService.ThreadBasedScheduler.Dispose
  name: Dispose
  nameWithType: ThreadBasedScheduler.Dispose
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.Dispose
- uid: EventStore.Core.Services.TimerService.ThreadBasedScheduler.GetStatistics*
  commentId: Overload:EventStore.Core.Services.TimerService.ThreadBasedScheduler.GetStatistics
  name: GetStatistics
  nameWithType: ThreadBasedScheduler.GetStatistics
  fullName: EventStore.Core.Services.TimerService.ThreadBasedScheduler.GetStatistics
- uid: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  commentId: M:EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  parent: EventStore.Core.Bus.IMonitoredQueue
  name: GetStatistics()
  nameWithType: IMonitoredQueue.GetStatistics()
  fullName: EventStore.Core.Bus.IMonitoredQueue.GetStatistics()
  spec.csharp:
  - uid: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
    name: GetStatistics
    nameWithType: IMonitoredQueue.GetStatistics
    fullName: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
    name: GetStatistics
    nameWithType: IMonitoredQueue.GetStatistics
    fullName: EventStore.Core.Bus.IMonitoredQueue.GetStatistics
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Monitoring.Stats.QueueStats
  commentId: T:EventStore.Core.Services.Monitoring.Stats.QueueStats
  parent: EventStore.Core.Services.Monitoring.Stats
  name: QueueStats
  nameWithType: QueueStats
  fullName: EventStore.Core.Services.Monitoring.Stats.QueueStats
- uid: EventStore.Core.Services.Monitoring.Stats
  commentId: N:EventStore.Core.Services.Monitoring.Stats
  name: EventStore.Core.Services.Monitoring.Stats
  nameWithType: EventStore.Core.Services.Monitoring.Stats
  fullName: EventStore.Core.Services.Monitoring.Stats

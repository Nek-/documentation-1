### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Transport.Http.IHttpService
  commentId: T:EventStore.Core.Services.Transport.Http.IHttpService
  id: IHttpService
  parent: EventStore.Core.Services.Transport.Http
  children:
  - EventStore.Core.Services.Transport.Http.IHttpService.Accessibility
  - EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch})
  - EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  langs:
  - csharp
  - vb
  name: IHttpService
  nameWithType: IHttpService
  fullName: EventStore.Core.Services.Transport.Http.IHttpService
  type: Interface
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/IHttpService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: IHttpService
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/IHttpService.cs
    startLine: 16
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public interface IHttpService
    content.vb: Public Interface IHttpService
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.Transport.Http.IHttpService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Transport.Http.IHttpService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EventStore.Core.Services.Transport.Http.IHttpService.Accessibility
  commentId: P:EventStore.Core.Services.Transport.Http.IHttpService.Accessibility
  id: Accessibility
  parent: EventStore.Core.Services.Transport.Http.IHttpService
  langs:
  - csharp
  - vb
  name: Accessibility
  nameWithType: IHttpService.Accessibility
  fullName: EventStore.Core.Services.Transport.Http.IHttpService.Accessibility
  type: Property
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/IHttpService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Accessibility
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/IHttpService.cs
    startLine: 17
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: ServiceAccessibility Accessibility { get; }
    parameters: []
    return:
      type: EventStore.Core.Services.Transport.Http.ServiceAccessibility
    content.vb: ReadOnly Property Accessibility As ServiceAccessibility
  overload: EventStore.Core.Services.Transport.Http.IHttpService.Accessibility*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  commentId: M:EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  id: RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction,Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams})
  parent: EventStore.Core.Services.Transport.Http.IHttpService
  langs:
  - csharp
  - vb
  name: RegisterCustomAction(ControllerAction, Func<HttpEntityManager, UriTemplateMatch, RequestParams>)
  nameWithType: IHttpService.RegisterCustomAction(ControllerAction, Func<HttpEntityManager, UriTemplateMatch, RequestParams>)
  fullName: EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction, Func<EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/IHttpService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: RegisterCustomAction
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/IHttpService.cs
    startLine: 19
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: void RegisterCustomAction(ControllerAction action, Func<HttpEntityManager, UriTemplateMatch, RequestParams> handler)
    parameters:
    - id: action
      type: EventStore.Core.Services.Transport.Http.ControllerAction
    - id: handler
      type: Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams}
    content.vb: Sub RegisterCustomAction(action As ControllerAction, handler As Func(Of HttpEntityManager, UriTemplateMatch, RequestParams))
  overload: EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction*
  nameWithType.vb: IHttpService.RegisterCustomAction(ControllerAction, Func(Of HttpEntityManager, UriTemplateMatch, RequestParams))
  fullName.vb: EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction(EventStore.Core.Services.Transport.Http.ControllerAction, Func(Of EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams))
  name.vb: RegisterCustomAction(ControllerAction, Func(Of HttpEntityManager, UriTemplateMatch, RequestParams))
- uid: EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch})
  commentId: M:EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch})
  id: RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction,Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch})
  parent: EventStore.Core.Services.Transport.Http.IHttpService
  langs:
  - csharp
  - vb
  name: RegisterAction(ControllerAction, Action<HttpEntityManager, UriTemplateMatch>)
  nameWithType: IHttpService.RegisterAction(ControllerAction, Action<HttpEntityManager, UriTemplateMatch>)
  fullName: EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction, Action<EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch>)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/IHttpService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: RegisterAction
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/IHttpService.cs
    startLine: 22
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: void RegisterAction(ControllerAction action, Action<HttpEntityManager, UriTemplateMatch> handler)
    parameters:
    - id: action
      type: EventStore.Core.Services.Transport.Http.ControllerAction
    - id: handler
      type: Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch}
    content.vb: Sub RegisterAction(action As ControllerAction, handler As Action(Of HttpEntityManager, UriTemplateMatch))
  overload: EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction*
  nameWithType.vb: IHttpService.RegisterAction(ControllerAction, Action(Of HttpEntityManager, UriTemplateMatch))
  fullName.vb: EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction(EventStore.Core.Services.Transport.Http.ControllerAction, Action(Of EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch))
  name.vb: RegisterAction(ControllerAction, Action(Of HttpEntityManager, UriTemplateMatch))
references:
- uid: EventStore.Core.Services.Transport.Http
  commentId: N:EventStore.Core.Services.Transport.Http
  name: EventStore.Core.Services.Transport.Http
  nameWithType: EventStore.Core.Services.Transport.Http
  fullName: EventStore.Core.Services.Transport.Http
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.IHttpService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<IHttpService>()
  nameWithType: ProtobufExtensions.Serialize<IHttpService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Transport.Http.IHttpService>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of IHttpService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Transport.Http.IHttpService)()
  name.vb: Serialize(Of IHttpService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<IHttpService>
    nameWithType: ProtobufExtensions.Serialize<IHttpService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Transport.Http.IHttpService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of IHttpService)
    nameWithType: ProtobufExtensions.Serialize(Of IHttpService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Transport.Http.IHttpService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.IHttpService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<IHttpService>()
  nameWithType: ProtobufExtensions.SerializeToArray<IHttpService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Transport.Http.IHttpService>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of IHttpService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Transport.Http.IHttpService)()
  name.vb: SerializeToArray(Of IHttpService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<IHttpService>
    nameWithType: ProtobufExtensions.SerializeToArray<IHttpService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Transport.Http.IHttpService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of IHttpService)
    nameWithType: ProtobufExtensions.SerializeToArray(Of IHttpService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Transport.Http.IHttpService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.Transport.Http.IHttpService.Accessibility*
  commentId: Overload:EventStore.Core.Services.Transport.Http.IHttpService.Accessibility
  name: Accessibility
  nameWithType: IHttpService.Accessibility
  fullName: EventStore.Core.Services.Transport.Http.IHttpService.Accessibility
- uid: EventStore.Core.Services.Transport.Http.ServiceAccessibility
  commentId: T:EventStore.Core.Services.Transport.Http.ServiceAccessibility
  parent: EventStore.Core.Services.Transport.Http
  name: ServiceAccessibility
  nameWithType: ServiceAccessibility
  fullName: EventStore.Core.Services.Transport.Http.ServiceAccessibility
- uid: EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction*
  commentId: Overload:EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction
  name: RegisterCustomAction
  nameWithType: IHttpService.RegisterCustomAction
  fullName: EventStore.Core.Services.Transport.Http.IHttpService.RegisterCustomAction
- uid: EventStore.Core.Services.Transport.Http.ControllerAction
  commentId: T:EventStore.Core.Services.Transport.Http.ControllerAction
  parent: EventStore.Core.Services.Transport.Http
  name: ControllerAction
  nameWithType: ControllerAction
  fullName: EventStore.Core.Services.Transport.Http.ControllerAction
- uid: Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams}
  commentId: '!:Func{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch,EventStore.Core.Services.Transport.Http.RequestParams}'
  definition: Func`3
  name: Func<HttpEntityManager, UriTemplateMatch, RequestParams>
  nameWithType: Func<HttpEntityManager, UriTemplateMatch, RequestParams>
  fullName: Func<EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams>
  nameWithType.vb: Func(Of HttpEntityManager, UriTemplateMatch, RequestParams)
  fullName.vb: Func(Of EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch, EventStore.Core.Services.Transport.Http.RequestParams)
  name.vb: Func(Of HttpEntityManager, UriTemplateMatch, RequestParams)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Http.RequestParams
    name: RequestParams
    nameWithType: RequestParams
    fullName: EventStore.Core.Services.Transport.Http.RequestParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Http.RequestParams
    name: RequestParams
    nameWithType: RequestParams
    fullName: EventStore.Core.Services.Transport.Http.RequestParams
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction*
  commentId: Overload:EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction
  name: RegisterAction
  nameWithType: IHttpService.RegisterAction
  fullName: EventStore.Core.Services.Transport.Http.IHttpService.RegisterAction
- uid: Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch}
  commentId: '!:Action{EventStore.Transport.Http.EntityManagement.HttpEntityManager,UriTemplateMatch}'
  definition: Action`2
  name: Action<HttpEntityManager, UriTemplateMatch>
  nameWithType: Action<HttpEntityManager, UriTemplateMatch>
  fullName: Action<EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch>
  nameWithType.vb: Action(Of HttpEntityManager, UriTemplateMatch)
  fullName.vb: Action(Of EventStore.Transport.Http.EntityManagement.HttpEntityManager, UriTemplateMatch)
  name.vb: Action(Of HttpEntityManager, UriTemplateMatch)
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    name: HttpEntityManager
    nameWithType: HttpEntityManager
    fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UriTemplateMatch
    name: UriTemplateMatch
    nameWithType: UriTemplateMatch
    fullName: UriTemplateMatch
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`2
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

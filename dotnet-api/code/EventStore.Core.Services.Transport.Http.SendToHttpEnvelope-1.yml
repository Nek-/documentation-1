### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1
  commentId: T:EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1
  id: SendToHttpEnvelope`1
  parent: EventStore.Core.Services.Transport.Http
  children:
  - EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Transport.Http.EntityManagement.HttpEntityManager,Func{EventStore.Transport.Http.ICodec,`0,System.String},Func{EventStore.Transport.Http.ICodec,`0,EventStore.Core.Services.Transport.Http.ResponseConfiguration},EventStore.Core.Messaging.IEnvelope)
  - EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.ReplyWith``1(``0)
  langs:
  - csharp
  - vb
  name: SendToHttpEnvelope<TExpectedResponseMessage>
  nameWithType: SendToHttpEnvelope<TExpectedResponseMessage>
  fullName: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope<TExpectedResponseMessage>
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/SendToHttpEnvelope.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: SendToHttpEnvelope
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/SendToHttpEnvelope.cs
    startLine: 81
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: 'public class SendToHttpEnvelope<TExpectedResponseMessage> : object, IEnvelope where TExpectedResponseMessage : Message'
    typeParameters:
    - id: TExpectedResponseMessage
    content.vb: >-
      Public Class SendToHttpEnvelope(Of TExpectedResponseMessage As Message)
          Inherits Object
          Implements IEnvelope
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Messaging.IEnvelope
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  nameWithType.vb: SendToHttpEnvelope(Of TExpectedResponseMessage)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope(Of TExpectedResponseMessage)
  name.vb: SendToHttpEnvelope(Of TExpectedResponseMessage)
- uid: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Transport.Http.EntityManagement.HttpEntityManager,Func{EventStore.Transport.Http.ICodec,`0,System.String},Func{EventStore.Transport.Http.ICodec,`0,EventStore.Core.Services.Transport.Http.ResponseConfiguration},EventStore.Core.Messaging.IEnvelope)
  commentId: M:EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Transport.Http.EntityManagement.HttpEntityManager,Func{EventStore.Transport.Http.ICodec,`0,System.String},Func{EventStore.Transport.Http.ICodec,`0,EventStore.Core.Services.Transport.Http.ResponseConfiguration},EventStore.Core.Messaging.IEnvelope)
  id: '#ctor(EventStore.Core.Bus.IPublisher,EventStore.Transport.Http.EntityManagement.HttpEntityManager,Func{EventStore.Transport.Http.ICodec,`0,System.String},Func{EventStore.Transport.Http.ICodec,`0,EventStore.Core.Services.Transport.Http.ResponseConfiguration},EventStore.Core.Messaging.IEnvelope)'
  parent: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1
  langs:
  - csharp
  - vb
  name: SendToHttpEnvelope(IPublisher, HttpEntityManager, Func<ICodec, TExpectedResponseMessage, String>, Func<ICodec, TExpectedResponseMessage, ResponseConfiguration>, IEnvelope)
  nameWithType: SendToHttpEnvelope<TExpectedResponseMessage>.SendToHttpEnvelope(IPublisher, HttpEntityManager, Func<ICodec, TExpectedResponseMessage, String>, Func<ICodec, TExpectedResponseMessage, ResponseConfiguration>, IEnvelope)
  fullName: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope<TExpectedResponseMessage>.SendToHttpEnvelope(EventStore.Core.Bus.IPublisher, EventStore.Transport.Http.EntityManagement.HttpEntityManager, Func<EventStore.Transport.Http.ICodec, TExpectedResponseMessage, System.String>, Func<EventStore.Transport.Http.ICodec, TExpectedResponseMessage, EventStore.Core.Services.Transport.Http.ResponseConfiguration>, EventStore.Core.Messaging.IEnvelope)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/SendToHttpEnvelope.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/SendToHttpEnvelope.cs
    startLine: 89
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: public SendToHttpEnvelope(IPublisher networkSendQueue, HttpEntityManager entity, Func<ICodec, TExpectedResponseMessage, string> formatter, Func<ICodec, TExpectedResponseMessage, ResponseConfiguration> configurator, IEnvelope notMatchingEnvelope)
    parameters:
    - id: networkSendQueue
      type: EventStore.Core.Bus.IPublisher
    - id: entity
      type: EventStore.Transport.Http.EntityManagement.HttpEntityManager
    - id: formatter
      type: Func{EventStore.Transport.Http.ICodec,{TExpectedResponseMessage},System.String}
    - id: configurator
      type: Func{EventStore.Transport.Http.ICodec,{TExpectedResponseMessage},EventStore.Core.Services.Transport.Http.ResponseConfiguration}
    - id: notMatchingEnvelope
      type: EventStore.Core.Messaging.IEnvelope
    content.vb: Public Sub New(networkSendQueue As IPublisher, entity As HttpEntityManager, formatter As Func(Of ICodec, TExpectedResponseMessage, String), configurator As Func(Of ICodec, TExpectedResponseMessage, ResponseConfiguration), notMatchingEnvelope As IEnvelope)
  overload: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.#ctor*
  nameWithType.vb: SendToHttpEnvelope(Of TExpectedResponseMessage).SendToHttpEnvelope(IPublisher, HttpEntityManager, Func(Of ICodec, TExpectedResponseMessage, String), Func(Of ICodec, TExpectedResponseMessage, ResponseConfiguration), IEnvelope)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope(Of TExpectedResponseMessage).SendToHttpEnvelope(EventStore.Core.Bus.IPublisher, EventStore.Transport.Http.EntityManagement.HttpEntityManager, Func(Of EventStore.Transport.Http.ICodec, TExpectedResponseMessage, System.String), Func(Of EventStore.Transport.Http.ICodec, TExpectedResponseMessage, EventStore.Core.Services.Transport.Http.ResponseConfiguration), EventStore.Core.Messaging.IEnvelope)
  name.vb: SendToHttpEnvelope(IPublisher, HttpEntityManager, Func(Of ICodec, TExpectedResponseMessage, String), Func(Of ICodec, TExpectedResponseMessage, ResponseConfiguration), IEnvelope)
- uid: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.ReplyWith``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.ReplyWith``1(``0)
  id: ReplyWith``1(``0)
  parent: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1
  langs:
  - csharp
  - vb
  name: ReplyWith<T>(T)
  nameWithType: SendToHttpEnvelope<TExpectedResponseMessage>.ReplyWith<T>(T)
  fullName: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope<TExpectedResponseMessage>.ReplyWith<T>(T)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Http/SendToHttpEnvelope.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: ReplyWith
    path: ../EventStore/src/EventStore.Core/Services/Transport/Http/SendToHttpEnvelope.cs
    startLine: 127
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Http
  syntax:
    content: >-
      public void ReplyWith<T>(T message)
          where T : Message
    parameters:
    - id: message
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Sub ReplyWith(Of T As Message)(message As T)
  overload: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.ReplyWith*
  implements:
  - EventStore.Core.Messaging.IEnvelope.ReplyWith``1({T})
  nameWithType.vb: SendToHttpEnvelope(Of TExpectedResponseMessage).ReplyWith(Of T)(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope(Of TExpectedResponseMessage).ReplyWith(Of T)(T)
  name.vb: ReplyWith(Of T)(T)
references:
- uid: EventStore.Core.Services.Transport.Http
  commentId: N:EventStore.Core.Services.Transport.Http
  name: EventStore.Core.Services.Transport.Http
  nameWithType: EventStore.Core.Services.Transport.Http
  fullName: EventStore.Core.Services.Transport.Http
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Messaging.IEnvelope
  commentId: T:EventStore.Core.Messaging.IEnvelope
  parent: EventStore.Core.Messaging
  name: IEnvelope
  nameWithType: IEnvelope
  fullName: EventStore.Core.Messaging.IEnvelope
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<SendToHttpEnvelope<TExpectedResponseMessage>>()
  nameWithType: ProtobufExtensions.Serialize<SendToHttpEnvelope<TExpectedResponseMessage>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Transport.Http.SendToHttpEnvelope<TExpectedResponseMessage>>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of SendToHttpEnvelope(Of TExpectedResponseMessage))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Transport.Http.SendToHttpEnvelope(Of TExpectedResponseMessage))()
  name.vb: Serialize(Of SendToHttpEnvelope(Of TExpectedResponseMessage))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<SendToHttpEnvelope<TExpectedResponseMessage>>
    nameWithType: ProtobufExtensions.Serialize<SendToHttpEnvelope<TExpectedResponseMessage>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Transport.Http.SendToHttpEnvelope<TExpectedResponseMessage>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of SendToHttpEnvelope(Of TExpectedResponseMessage))
    nameWithType: ProtobufExtensions.Serialize(Of SendToHttpEnvelope(Of TExpectedResponseMessage))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Transport.Http.SendToHttpEnvelope(Of TExpectedResponseMessage))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<SendToHttpEnvelope<TExpectedResponseMessage>>()
  nameWithType: ProtobufExtensions.SerializeToArray<SendToHttpEnvelope<TExpectedResponseMessage>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Transport.Http.SendToHttpEnvelope<TExpectedResponseMessage>>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of SendToHttpEnvelope(Of TExpectedResponseMessage))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Transport.Http.SendToHttpEnvelope(Of TExpectedResponseMessage))()
  name.vb: SerializeToArray(Of SendToHttpEnvelope(Of TExpectedResponseMessage))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<SendToHttpEnvelope<TExpectedResponseMessage>>
    nameWithType: ProtobufExtensions.SerializeToArray<SendToHttpEnvelope<TExpectedResponseMessage>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Transport.Http.SendToHttpEnvelope<TExpectedResponseMessage>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of SendToHttpEnvelope(Of TExpectedResponseMessage))
    nameWithType: ProtobufExtensions.SerializeToArray(Of SendToHttpEnvelope(Of TExpectedResponseMessage))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Transport.Http.SendToHttpEnvelope(Of TExpectedResponseMessage))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.#ctor*
  commentId: Overload:EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.#ctor
  name: SendToHttpEnvelope
  nameWithType: SendToHttpEnvelope<TExpectedResponseMessage>.SendToHttpEnvelope
  fullName: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope<TExpectedResponseMessage>.SendToHttpEnvelope
  nameWithType.vb: SendToHttpEnvelope(Of TExpectedResponseMessage).SendToHttpEnvelope
  fullName.vb: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope(Of TExpectedResponseMessage).SendToHttpEnvelope
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Transport.Http.EntityManagement.HttpEntityManager
  commentId: T:EventStore.Transport.Http.EntityManagement.HttpEntityManager
  parent: EventStore.Transport.Http.EntityManagement
  name: HttpEntityManager
  nameWithType: HttpEntityManager
  fullName: EventStore.Transport.Http.EntityManagement.HttpEntityManager
- uid: Func{EventStore.Transport.Http.ICodec,{TExpectedResponseMessage},System.String}
  commentId: '!:Func{EventStore.Transport.Http.ICodec,`0,System.String}'
  definition: Func`3
  name: Func<ICodec, TExpectedResponseMessage, String>
  nameWithType: Func<ICodec, TExpectedResponseMessage, String>
  fullName: Func<EventStore.Transport.Http.ICodec, TExpectedResponseMessage, System.String>
  nameWithType.vb: Func(Of ICodec, TExpectedResponseMessage, String)
  fullName.vb: Func(Of EventStore.Transport.Http.ICodec, TExpectedResponseMessage, System.String)
  name.vb: Func(Of ICodec, TExpectedResponseMessage, String)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.ICodec
    name: ICodec
    nameWithType: ICodec
    fullName: EventStore.Transport.Http.ICodec
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TExpectedResponseMessage
    nameWithType: TExpectedResponseMessage
    fullName: TExpectedResponseMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.ICodec
    name: ICodec
    nameWithType: ICodec
    fullName: EventStore.Transport.Http.ICodec
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TExpectedResponseMessage
    nameWithType: TExpectedResponseMessage
    fullName: TExpectedResponseMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{EventStore.Transport.Http.ICodec,{TExpectedResponseMessage},EventStore.Core.Services.Transport.Http.ResponseConfiguration}
  commentId: '!:Func{EventStore.Transport.Http.ICodec,`0,EventStore.Core.Services.Transport.Http.ResponseConfiguration}'
  definition: Func`3
  name: Func<ICodec, TExpectedResponseMessage, ResponseConfiguration>
  nameWithType: Func<ICodec, TExpectedResponseMessage, ResponseConfiguration>
  fullName: Func<EventStore.Transport.Http.ICodec, TExpectedResponseMessage, EventStore.Core.Services.Transport.Http.ResponseConfiguration>
  nameWithType.vb: Func(Of ICodec, TExpectedResponseMessage, ResponseConfiguration)
  fullName.vb: Func(Of EventStore.Transport.Http.ICodec, TExpectedResponseMessage, EventStore.Core.Services.Transport.Http.ResponseConfiguration)
  name.vb: Func(Of ICodec, TExpectedResponseMessage, ResponseConfiguration)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.ICodec
    name: ICodec
    nameWithType: ICodec
    fullName: EventStore.Transport.Http.ICodec
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TExpectedResponseMessage
    nameWithType: TExpectedResponseMessage
    fullName: TExpectedResponseMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Http.ResponseConfiguration
    name: ResponseConfiguration
    nameWithType: ResponseConfiguration
    fullName: EventStore.Core.Services.Transport.Http.ResponseConfiguration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.ICodec
    name: ICodec
    nameWithType: ICodec
    fullName: EventStore.Transport.Http.ICodec
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TExpectedResponseMessage
    nameWithType: TExpectedResponseMessage
    fullName: TExpectedResponseMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Http.ResponseConfiguration
    name: ResponseConfiguration
    nameWithType: ResponseConfiguration
    fullName: EventStore.Core.Services.Transport.Http.ResponseConfiguration
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Transport.Http.EntityManagement
  commentId: N:EventStore.Transport.Http.EntityManagement
  name: EventStore.Transport.Http.EntityManagement
  nameWithType: EventStore.Transport.Http.EntityManagement
  fullName: EventStore.Transport.Http.EntityManagement
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.ReplyWith*
  commentId: Overload:EventStore.Core.Services.Transport.Http.SendToHttpEnvelope`1.ReplyWith
  name: ReplyWith
  nameWithType: SendToHttpEnvelope<TExpectedResponseMessage>.ReplyWith
  fullName: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope<TExpectedResponseMessage>.ReplyWith
  nameWithType.vb: SendToHttpEnvelope(Of TExpectedResponseMessage).ReplyWith
  fullName.vb: EventStore.Core.Services.Transport.Http.SendToHttpEnvelope(Of TExpectedResponseMessage).ReplyWith
- uid: EventStore.Core.Messaging.IEnvelope.ReplyWith``1({T})
  commentId: M:EventStore.Core.Messaging.IEnvelope.ReplyWith``1(``0)
  parent: EventStore.Core.Messaging.IEnvelope
  definition: EventStore.Core.Messaging.IEnvelope.ReplyWith``1(``0)
  name: ReplyWith<T>(T)
  nameWithType: IEnvelope.ReplyWith<T>(T)
  fullName: EventStore.Core.Messaging.IEnvelope.ReplyWith<T>(T)
  nameWithType.vb: IEnvelope.ReplyWith(Of T)(T)
  fullName.vb: EventStore.Core.Messaging.IEnvelope.ReplyWith(Of T)(T)
  name.vb: ReplyWith(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Messaging.IEnvelope.ReplyWith``1(``0)
    name: ReplyWith<T>
    nameWithType: IEnvelope.ReplyWith<T>
    fullName: EventStore.Core.Messaging.IEnvelope.ReplyWith<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Messaging.IEnvelope.ReplyWith``1(``0)
    name: ReplyWith(Of T)
    nameWithType: IEnvelope.ReplyWith(Of T)
    fullName: EventStore.Core.Messaging.IEnvelope.ReplyWith(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Core.Messaging.IEnvelope.ReplyWith``1(``0)
  commentId: M:EventStore.Core.Messaging.IEnvelope.ReplyWith``1(``0)
  name: ReplyWith<T>(T)
  nameWithType: IEnvelope.ReplyWith<T>(T)
  fullName: EventStore.Core.Messaging.IEnvelope.ReplyWith<T>(T)
  nameWithType.vb: IEnvelope.ReplyWith(Of T)(T)
  fullName.vb: EventStore.Core.Messaging.IEnvelope.ReplyWith(Of T)(T)
  name.vb: ReplyWith(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Messaging.IEnvelope.ReplyWith``1(``0)
    name: ReplyWith<T>
    nameWithType: IEnvelope.ReplyWith<T>
    fullName: EventStore.Core.Messaging.IEnvelope.ReplyWith<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Messaging.IEnvelope.ReplyWith``1(``0)
    name: ReplyWith(Of T)
    nameWithType: IEnvelope.ReplyWith(Of T)
    fullName: EventStore.Core.Messaging.IEnvelope.ReplyWith(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T

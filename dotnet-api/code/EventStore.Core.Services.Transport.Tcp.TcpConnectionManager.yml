### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  commentId: T:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  id: TcpConnectionManager
  parent: EventStore.Core.Services.Transport.Tcp
  children:
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.#ctor(System.String,EventStore.Core.Services.Transport.Tcp.TcpServiceType,EventStore.Core.Services.Transport.Tcp.ITcpDispatcher,EventStore.Core.Bus.IPublisher,EventStore.Transport.Tcp.ITcpConnection,EventStore.Core.Bus.IPublisher,EventStore.Core.Authentication.IAuthenticationProvider,System.TimeSpan,System.TimeSpan,System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Net.Sockets.SocketError},System.Int32)
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.#ctor(System.String,System.Guid,EventStore.Core.Services.Transport.Tcp.ITcpDispatcher,EventStore.Core.Bus.IPublisher,System.Net.IPEndPoint,EventStore.Transport.Tcp.TcpClientConnector,System.Boolean,System.String,System.Boolean,EventStore.Core.Bus.IPublisher,EventStore.Core.Authentication.IAuthenticationProvider,System.TimeSpan,System.TimeSpan,System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager},System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Net.Sockets.SocketError})
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ClientConnectionName
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionId
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionName
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionQueueSizeThreshold
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionTimeout
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Handle(EventStore.Core.Messages.TcpMessage.Heartbeat)
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Handle(EventStore.Core.Messages.TcpMessage.HeartbeatTimeout)
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.IsClosed
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.LocalEndPoint
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ProcessPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage)
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.RemoteEndPoint
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequest(System.Guid,System.String)
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequestAndClose(System.Guid,System.String)
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendMessage(EventStore.Core.Messaging.Message)
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendQueueSize
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.StartReceiving
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Stop(System.String)
  langs:
  - csharp
  - vb
  name: TcpConnectionManager
  nameWithType: TcpConnectionManager
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  type: Class
  source:
    id: TcpConnectionManager
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 22
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  summary: "\nManager for individual TCP connection. It handles connection lifecycle,\nheartbeats, message framing and dispatch to the memory bus.\n"
  example: []
  syntax:
    content: 'public class TcpConnectionManager : IHandle<TcpMessage.Heartbeat>, IHandle<TcpMessage.HeartbeatTimeout>'
    content.vb: >-
      Public Class TcpConnectionManager
          Implements IHandle(Of TcpMessage.Heartbeat), IHandle(Of TcpMessage.HeartbeatTimeout)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.Heartbeat}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.HeartbeatTimeout}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionQueueSizeThreshold
  commentId: F:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionQueueSizeThreshold
  id: ConnectionQueueSizeThreshold
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: ConnectionQueueSizeThreshold
  nameWithType: TcpConnectionManager.ConnectionQueueSizeThreshold
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionQueueSizeThreshold
  type: Field
  source:
    id: ConnectionQueueSizeThreshold
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 23
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public const int ConnectionQueueSizeThreshold = 50000
    return:
      type: System.Int32
    content.vb: Public Const ConnectionQueueSizeThreshold As Integer = 50000
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionTimeout
  commentId: F:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionTimeout
  id: ConnectionTimeout
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: ConnectionTimeout
  nameWithType: TcpConnectionManager.ConnectionTimeout
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionTimeout
  type: Field
  source:
    id: ConnectionTimeout
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 24
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public static readonly TimeSpan ConnectionTimeout
    return:
      type: System.TimeSpan
    content.vb: Public Shared ReadOnly ConnectionTimeout As TimeSpan
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionId
  commentId: F:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionId
  id: ConnectionId
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: ConnectionId
  nameWithType: TcpConnectionManager.ConnectionId
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionId
  type: Field
  source:
    id: ConnectionId
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 28
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public readonly Guid ConnectionId
    return:
      type: System.Guid
    content.vb: Public ReadOnly ConnectionId As Guid
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionName
  commentId: F:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionName
  id: ConnectionName
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: ConnectionName
  nameWithType: TcpConnectionManager.ConnectionName
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ConnectionName
  type: Field
  source:
    id: ConnectionName
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 29
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public readonly string ConnectionName
    return:
      type: System.String
    content.vb: Public ReadOnly ConnectionName As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.RemoteEndPoint
  commentId: F:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.RemoteEndPoint
  id: RemoteEndPoint
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: RemoteEndPoint
  nameWithType: TcpConnectionManager.RemoteEndPoint
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.RemoteEndPoint
  type: Field
  source:
    id: RemoteEndPoint
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 30
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public readonly IPEndPoint RemoteEndPoint
    return:
      type: System.Net.IPEndPoint
    content.vb: Public ReadOnly RemoteEndPoint As IPEndPoint
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.LocalEndPoint
  commentId: P:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.LocalEndPoint
  id: LocalEndPoint
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: LocalEndPoint
  nameWithType: TcpConnectionManager.LocalEndPoint
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.LocalEndPoint
  type: Property
  source:
    id: LocalEndPoint
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 32
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public IPEndPoint LocalEndPoint { get; }
    parameters: []
    return:
      type: System.Net.IPEndPoint
    content.vb: Public ReadOnly Property LocalEndPoint As IPEndPoint
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.LocalEndPoint*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.IsClosed
  commentId: P:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.IsClosed
  id: IsClosed
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: IsClosed
  nameWithType: TcpConnectionManager.IsClosed
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.IsClosed
  type: Property
  source:
    id: IsClosed
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 36
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public bool IsClosed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsClosed As Boolean
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.IsClosed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendQueueSize
  commentId: P:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendQueueSize
  id: SendQueueSize
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: SendQueueSize
  nameWithType: TcpConnectionManager.SendQueueSize
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendQueueSize
  type: Property
  source:
    id: SendQueueSize
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 40
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public int SendQueueSize { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SendQueueSize As Integer
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendQueueSize*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ClientConnectionName
  commentId: P:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ClientConnectionName
  id: ClientConnectionName
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: ClientConnectionName
  nameWithType: TcpConnectionManager.ClientConnectionName
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ClientConnectionName
  type: Property
  source:
    id: ClientConnectionName
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 44
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public string ClientConnectionName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ClientConnectionName As String
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ClientConnectionName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.#ctor(System.String,EventStore.Core.Services.Transport.Tcp.TcpServiceType,EventStore.Core.Services.Transport.Tcp.ITcpDispatcher,EventStore.Core.Bus.IPublisher,EventStore.Transport.Tcp.ITcpConnection,EventStore.Core.Bus.IPublisher,EventStore.Core.Authentication.IAuthenticationProvider,System.TimeSpan,System.TimeSpan,System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Net.Sockets.SocketError},System.Int32)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.#ctor(System.String,EventStore.Core.Services.Transport.Tcp.TcpServiceType,EventStore.Core.Services.Transport.Tcp.ITcpDispatcher,EventStore.Core.Bus.IPublisher,EventStore.Transport.Tcp.ITcpConnection,EventStore.Core.Bus.IPublisher,EventStore.Core.Authentication.IAuthenticationProvider,System.TimeSpan,System.TimeSpan,System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Net.Sockets.SocketError},System.Int32)
  id: '#ctor(System.String,EventStore.Core.Services.Transport.Tcp.TcpServiceType,EventStore.Core.Services.Transport.Tcp.ITcpDispatcher,EventStore.Core.Bus.IPublisher,EventStore.Transport.Tcp.ITcpConnection,EventStore.Core.Bus.IPublisher,EventStore.Core.Authentication.IAuthenticationProvider,System.TimeSpan,System.TimeSpan,System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Net.Sockets.SocketError},System.Int32)'
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: TcpConnectionManager(String, TcpServiceType, ITcpDispatcher, IPublisher, ITcpConnection, IPublisher, IAuthenticationProvider, TimeSpan, TimeSpan, Action<TcpConnectionManager, SocketError>, Int32)
  nameWithType: TcpConnectionManager.TcpConnectionManager(String, TcpServiceType, ITcpDispatcher, IPublisher, ITcpConnection, IPublisher, IAuthenticationProvider, TimeSpan, TimeSpan, Action<TcpConnectionManager, SocketError>, Int32)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.TcpConnectionManager(System.String, EventStore.Core.Services.Transport.Tcp.TcpServiceType, EventStore.Core.Services.Transport.Tcp.ITcpDispatcher, EventStore.Core.Bus.IPublisher, EventStore.Transport.Tcp.ITcpConnection, EventStore.Core.Bus.IPublisher, EventStore.Core.Authentication.IAuthenticationProvider, System.TimeSpan, System.TimeSpan, System.Action<EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, System.Net.Sockets.SocketError>, System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 71
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public TcpConnectionManager(string connectionName, TcpServiceType serviceType, ITcpDispatcher dispatcher, IPublisher publisher, ITcpConnection openedConnection, IPublisher networkSendQueue, IAuthenticationProvider authProvider, TimeSpan heartbeatInterval, TimeSpan heartbeatTimeout, Action<TcpConnectionManager, SocketError> onConnectionClosed, int connectionPendingSendBytesThreshold)
    parameters:
    - id: connectionName
      type: System.String
    - id: serviceType
      type: EventStore.Core.Services.Transport.Tcp.TcpServiceType
    - id: dispatcher
      type: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher
    - id: publisher
      type: EventStore.Core.Bus.IPublisher
    - id: openedConnection
      type: EventStore.Transport.Tcp.ITcpConnection
    - id: networkSendQueue
      type: EventStore.Core.Bus.IPublisher
    - id: authProvider
      type: EventStore.Core.Authentication.IAuthenticationProvider
    - id: heartbeatInterval
      type: System.TimeSpan
    - id: heartbeatTimeout
      type: System.TimeSpan
    - id: onConnectionClosed
      type: System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Net.Sockets.SocketError}
    - id: connectionPendingSendBytesThreshold
      type: System.Int32
    content.vb: Public Sub New(connectionName As String, serviceType As TcpServiceType, dispatcher As ITcpDispatcher, publisher As IPublisher, openedConnection As ITcpConnection, networkSendQueue As IPublisher, authProvider As IAuthenticationProvider, heartbeatInterval As TimeSpan, heartbeatTimeout As TimeSpan, onConnectionClosed As Action(Of TcpConnectionManager, SocketError), connectionPendingSendBytesThreshold As Integer)
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.#ctor*
  nameWithType.vb: TcpConnectionManager.TcpConnectionManager(String, TcpServiceType, ITcpDispatcher, IPublisher, ITcpConnection, IPublisher, IAuthenticationProvider, TimeSpan, TimeSpan, Action(Of TcpConnectionManager, SocketError), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.TcpConnectionManager(System.String, EventStore.Core.Services.Transport.Tcp.TcpServiceType, EventStore.Core.Services.Transport.Tcp.ITcpDispatcher, EventStore.Core.Bus.IPublisher, EventStore.Transport.Tcp.ITcpConnection, EventStore.Core.Bus.IPublisher, EventStore.Core.Authentication.IAuthenticationProvider, System.TimeSpan, System.TimeSpan, System.Action(Of EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, System.Net.Sockets.SocketError), System.Int32)
  name.vb: TcpConnectionManager(String, TcpServiceType, ITcpDispatcher, IPublisher, ITcpConnection, IPublisher, IAuthenticationProvider, TimeSpan, TimeSpan, Action(Of TcpConnectionManager, SocketError), Int32)
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.#ctor(System.String,System.Guid,EventStore.Core.Services.Transport.Tcp.ITcpDispatcher,EventStore.Core.Bus.IPublisher,System.Net.IPEndPoint,EventStore.Transport.Tcp.TcpClientConnector,System.Boolean,System.String,System.Boolean,EventStore.Core.Bus.IPublisher,EventStore.Core.Authentication.IAuthenticationProvider,System.TimeSpan,System.TimeSpan,System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager},System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Net.Sockets.SocketError})
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.#ctor(System.String,System.Guid,EventStore.Core.Services.Transport.Tcp.ITcpDispatcher,EventStore.Core.Bus.IPublisher,System.Net.IPEndPoint,EventStore.Transport.Tcp.TcpClientConnector,System.Boolean,System.String,System.Boolean,EventStore.Core.Bus.IPublisher,EventStore.Core.Authentication.IAuthenticationProvider,System.TimeSpan,System.TimeSpan,System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager},System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Net.Sockets.SocketError})
  id: '#ctor(System.String,System.Guid,EventStore.Core.Services.Transport.Tcp.ITcpDispatcher,EventStore.Core.Bus.IPublisher,System.Net.IPEndPoint,EventStore.Transport.Tcp.TcpClientConnector,System.Boolean,System.String,System.Boolean,EventStore.Core.Bus.IPublisher,EventStore.Core.Authentication.IAuthenticationProvider,System.TimeSpan,System.TimeSpan,System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager},System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Net.Sockets.SocketError})'
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: TcpConnectionManager(String, Guid, ITcpDispatcher, IPublisher, IPEndPoint, TcpClientConnector, Boolean, String, Boolean, IPublisher, IAuthenticationProvider, TimeSpan, TimeSpan, Action<TcpConnectionManager>, Action<TcpConnectionManager, SocketError>)
  nameWithType: TcpConnectionManager.TcpConnectionManager(String, Guid, ITcpDispatcher, IPublisher, IPEndPoint, TcpClientConnector, Boolean, String, Boolean, IPublisher, IAuthenticationProvider, TimeSpan, TimeSpan, Action<TcpConnectionManager>, Action<TcpConnectionManager, SocketError>)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.TcpConnectionManager(System.String, System.Guid, EventStore.Core.Services.Transport.Tcp.ITcpDispatcher, EventStore.Core.Bus.IPublisher, System.Net.IPEndPoint, EventStore.Transport.Tcp.TcpClientConnector, System.Boolean, System.String, System.Boolean, EventStore.Core.Bus.IPublisher, EventStore.Core.Authentication.IAuthenticationProvider, System.TimeSpan, System.TimeSpan, System.Action<EventStore.Core.Services.Transport.Tcp.TcpConnectionManager>, System.Action<EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, System.Net.Sockets.SocketError>)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 118
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public TcpConnectionManager(string connectionName, Guid connectionId, ITcpDispatcher dispatcher, IPublisher publisher, IPEndPoint remoteEndPoint, TcpClientConnector connector, bool useSsl, string sslTargetHost, bool sslValidateServer, IPublisher networkSendQueue, IAuthenticationProvider authProvider, TimeSpan heartbeatInterval, TimeSpan heartbeatTimeout, Action<TcpConnectionManager> onConnectionEstablished, Action<TcpConnectionManager, SocketError> onConnectionClosed)
    parameters:
    - id: connectionName
      type: System.String
    - id: connectionId
      type: System.Guid
    - id: dispatcher
      type: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher
    - id: publisher
      type: EventStore.Core.Bus.IPublisher
    - id: remoteEndPoint
      type: System.Net.IPEndPoint
    - id: connector
      type: EventStore.Transport.Tcp.TcpClientConnector
    - id: useSsl
      type: System.Boolean
    - id: sslTargetHost
      type: System.String
    - id: sslValidateServer
      type: System.Boolean
    - id: networkSendQueue
      type: EventStore.Core.Bus.IPublisher
    - id: authProvider
      type: EventStore.Core.Authentication.IAuthenticationProvider
    - id: heartbeatInterval
      type: System.TimeSpan
    - id: heartbeatTimeout
      type: System.TimeSpan
    - id: onConnectionEstablished
      type: System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager}
    - id: onConnectionClosed
      type: System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Net.Sockets.SocketError}
    content.vb: Public Sub New(connectionName As String, connectionId As Guid, dispatcher As ITcpDispatcher, publisher As IPublisher, remoteEndPoint As IPEndPoint, connector As TcpClientConnector, useSsl As Boolean, sslTargetHost As String, sslValidateServer As Boolean, networkSendQueue As IPublisher, authProvider As IAuthenticationProvider, heartbeatInterval As TimeSpan, heartbeatTimeout As TimeSpan, onConnectionEstablished As Action(Of TcpConnectionManager), onConnectionClosed As Action(Of TcpConnectionManager, SocketError))
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.#ctor*
  nameWithType.vb: TcpConnectionManager.TcpConnectionManager(String, Guid, ITcpDispatcher, IPublisher, IPEndPoint, TcpClientConnector, Boolean, String, Boolean, IPublisher, IAuthenticationProvider, TimeSpan, TimeSpan, Action(Of TcpConnectionManager), Action(Of TcpConnectionManager, SocketError))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.TcpConnectionManager(System.String, System.Guid, EventStore.Core.Services.Transport.Tcp.ITcpDispatcher, EventStore.Core.Bus.IPublisher, System.Net.IPEndPoint, EventStore.Transport.Tcp.TcpClientConnector, System.Boolean, System.String, System.Boolean, EventStore.Core.Bus.IPublisher, EventStore.Core.Authentication.IAuthenticationProvider, System.TimeSpan, System.TimeSpan, System.Action(Of EventStore.Core.Services.Transport.Tcp.TcpConnectionManager), System.Action(Of EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, System.Net.Sockets.SocketError))
  name.vb: TcpConnectionManager(String, Guid, ITcpDispatcher, IPublisher, IPEndPoint, TcpClientConnector, Boolean, String, Boolean, IPublisher, IAuthenticationProvider, TimeSpan, TimeSpan, Action(Of TcpConnectionManager), Action(Of TcpConnectionManager, SocketError))
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.StartReceiving
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.StartReceiving
  id: StartReceiving
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: StartReceiving()
  nameWithType: TcpConnectionManager.StartReceiving()
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.StartReceiving()
  type: Method
  source:
    id: StartReceiving
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 200
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public void StartReceiving()
    content.vb: Public Sub StartReceiving
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.StartReceiving*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ProcessPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ProcessPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage)
  id: ProcessPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage)
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: ProcessPackage(TcpPackage)
  nameWithType: TcpConnectionManager.ProcessPackage(TcpPackage)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ProcessPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage)
  type: Method
  source:
    id: ProcessPackage
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 239
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public void ProcessPackage(TcpPackage package)
    parameters:
    - id: package
      type: EventStore.Core.Services.Transport.Tcp.TcpPackage
    content.vb: Public Sub ProcessPackage(package As TcpPackage)
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ProcessPackage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequestAndClose(System.Guid,System.String)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequestAndClose(System.Guid,System.String)
  id: SendBadRequestAndClose(System.Guid,System.String)
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: SendBadRequestAndClose(Guid, String)
  nameWithType: TcpConnectionManager.SendBadRequestAndClose(Guid, String)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequestAndClose(System.Guid, System.String)
  type: Method
  source:
    id: SendBadRequestAndClose
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 346
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public void SendBadRequestAndClose(Guid correlationId, string message)
    parameters:
    - id: correlationId
      type: System.Guid
    - id: message
      type: System.String
    content.vb: Public Sub SendBadRequestAndClose(correlationId As Guid, message As String)
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequestAndClose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequest(System.Guid,System.String)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequest(System.Guid,System.String)
  id: SendBadRequest(System.Guid,System.String)
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: SendBadRequest(Guid, String)
  nameWithType: TcpConnectionManager.SendBadRequest(Guid, String)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequest(System.Guid, System.String)
  type: Method
  source:
    id: SendBadRequest
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 358
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public void SendBadRequest(Guid correlationId, string message)
    parameters:
    - id: correlationId
      type: System.Guid
    - id: message
      type: System.String
    content.vb: Public Sub SendBadRequest(correlationId As Guid, message As String)
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequest*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Stop(System.String)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Stop(System.String)
  id: Stop(System.String)
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: Stop(String)
  nameWithType: TcpConnectionManager.Stop(String)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Stop(System.String)
  type: Method
  source:
    id: Stop
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 365
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public void Stop(string reason = null)
    parameters:
    - id: reason
      type: System.String
    content.vb: Public Sub Stop(reason As String = Nothing)
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendMessage(EventStore.Core.Messaging.Message)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendMessage(EventStore.Core.Messaging.Message)
  id: SendMessage(EventStore.Core.Messaging.Message)
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: SendMessage(Message)
  nameWithType: TcpConnectionManager.SendMessage(Message)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendMessage(EventStore.Core.Messaging.Message)
  type: Method
  source:
    id: SendMessage
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 374
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public void SendMessage(Message message)
    parameters:
    - id: message
      type: EventStore.Core.Messaging.Message
    content.vb: Public Sub SendMessage(message As Message)
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendMessage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Handle(EventStore.Core.Messages.TcpMessage.Heartbeat)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Handle(EventStore.Core.Messages.TcpMessage.Heartbeat)
  id: Handle(EventStore.Core.Messages.TcpMessage.Heartbeat)
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: Handle(TcpMessage.Heartbeat)
  nameWithType: TcpConnectionManager.Handle(TcpMessage.Heartbeat)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Handle(EventStore.Core.Messages.TcpMessage.Heartbeat)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 406
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public void Handle(TcpMessage.Heartbeat message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.TcpMessage.Heartbeat
    content.vb: Public Sub Handle(message As TcpMessage.Heartbeat)
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.Heartbeat}.Handle(EventStore.Core.Messages.TcpMessage.Heartbeat)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Handle(EventStore.Core.Messages.TcpMessage.HeartbeatTimeout)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Handle(EventStore.Core.Messages.TcpMessage.HeartbeatTimeout)
  id: Handle(EventStore.Core.Messages.TcpMessage.HeartbeatTimeout)
  parent: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  langs:
  - csharp
  - vb
  name: Handle(TcpMessage.HeartbeatTimeout)
  nameWithType: TcpConnectionManager.Handle(TcpMessage.HeartbeatTimeout)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Handle(EventStore.Core.Messages.TcpMessage.HeartbeatTimeout)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
    startLine: 420
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public void Handle(TcpMessage.HeartbeatTimeout message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.TcpMessage.HeartbeatTimeout
    content.vb: Public Sub Handle(message As TcpMessage.HeartbeatTimeout)
  overload: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.HeartbeatTimeout}.Handle(EventStore.Core.Messages.TcpMessage.HeartbeatTimeout)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.Heartbeat}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.Heartbeat}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<TcpMessage.Heartbeat>
  nameWithType: IHandle<TcpMessage.Heartbeat>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.TcpMessage.Heartbeat>
  nameWithType.vb: IHandle(Of TcpMessage.Heartbeat)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.TcpMessage.Heartbeat)
  name.vb: IHandle(Of TcpMessage.Heartbeat)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.TcpMessage.Heartbeat
    name: TcpMessage.Heartbeat
    nameWithType: TcpMessage.Heartbeat
    fullName: EventStore.Core.Messages.TcpMessage.Heartbeat
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.TcpMessage.Heartbeat
    name: TcpMessage.Heartbeat
    nameWithType: TcpMessage.Heartbeat
    fullName: EventStore.Core.Messages.TcpMessage.Heartbeat
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.HeartbeatTimeout}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.HeartbeatTimeout}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<TcpMessage.HeartbeatTimeout>
  nameWithType: IHandle<TcpMessage.HeartbeatTimeout>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.TcpMessage.HeartbeatTimeout>
  nameWithType.vb: IHandle(Of TcpMessage.HeartbeatTimeout)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.TcpMessage.HeartbeatTimeout)
  name.vb: IHandle(Of TcpMessage.HeartbeatTimeout)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.TcpMessage.HeartbeatTimeout
    name: TcpMessage.HeartbeatTimeout
    nameWithType: TcpMessage.HeartbeatTimeout
    fullName: EventStore.Core.Messages.TcpMessage.HeartbeatTimeout
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.TcpMessage.HeartbeatTimeout
    name: TcpMessage.HeartbeatTimeout
    nameWithType: TcpMessage.HeartbeatTimeout
    fullName: EventStore.Core.Messages.TcpMessage.HeartbeatTimeout
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TcpConnectionManager>()
  nameWithType: ProtobufExtensions.Serialize<TcpConnectionManager>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Transport.Tcp.TcpConnectionManager>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TcpConnectionManager)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Transport.Tcp.TcpConnectionManager)()
  name.vb: Serialize(Of TcpConnectionManager)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TcpConnectionManager>
    nameWithType: ProtobufExtensions.Serialize<TcpConnectionManager>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Transport.Tcp.TcpConnectionManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TcpConnectionManager)
    nameWithType: ProtobufExtensions.Serialize(Of TcpConnectionManager)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Transport.Tcp.TcpConnectionManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TcpConnectionManager>()
  nameWithType: ProtobufExtensions.SerializeToArray<TcpConnectionManager>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Transport.Tcp.TcpConnectionManager>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TcpConnectionManager)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Transport.Tcp.TcpConnectionManager)()
  name.vb: SerializeToArray(Of TcpConnectionManager)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TcpConnectionManager>
    nameWithType: ProtobufExtensions.SerializeToArray<TcpConnectionManager>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Transport.Tcp.TcpConnectionManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TcpConnectionManager)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TcpConnectionManager)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Transport.Tcp.TcpConnectionManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.IPEndPoint
  commentId: T:System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net
  commentId: N:System.Net
  isExternal: true
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.LocalEndPoint*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.LocalEndPoint
  name: LocalEndPoint
  nameWithType: TcpConnectionManager.LocalEndPoint
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.LocalEndPoint
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.IsClosed*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.IsClosed
  name: IsClosed
  nameWithType: TcpConnectionManager.IsClosed
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.IsClosed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendQueueSize*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendQueueSize
  name: SendQueueSize
  nameWithType: TcpConnectionManager.SendQueueSize
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendQueueSize
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ClientConnectionName*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ClientConnectionName
  name: ClientConnectionName
  nameWithType: TcpConnectionManager.ClientConnectionName
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ClientConnectionName
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.#ctor*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.#ctor
  name: TcpConnectionManager
  nameWithType: TcpConnectionManager.TcpConnectionManager
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.TcpConnectionManager
- uid: EventStore.Core.Services.Transport.Tcp.TcpServiceType
  commentId: T:EventStore.Core.Services.Transport.Tcp.TcpServiceType
  parent: EventStore.Core.Services.Transport.Tcp
  name: TcpServiceType
  nameWithType: TcpServiceType
  fullName: EventStore.Core.Services.Transport.Tcp.TcpServiceType
- uid: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher
  commentId: T:EventStore.Core.Services.Transport.Tcp.ITcpDispatcher
  parent: EventStore.Core.Services.Transport.Tcp
  name: ITcpDispatcher
  nameWithType: ITcpDispatcher
  fullName: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Transport.Tcp.ITcpConnection
  commentId: T:EventStore.Transport.Tcp.ITcpConnection
  parent: EventStore.Transport.Tcp
  name: ITcpConnection
  nameWithType: ITcpConnection
  fullName: EventStore.Transport.Tcp.ITcpConnection
- uid: EventStore.Core.Authentication.IAuthenticationProvider
  commentId: T:EventStore.Core.Authentication.IAuthenticationProvider
  parent: EventStore.Core.Authentication
  name: IAuthenticationProvider
  nameWithType: IAuthenticationProvider
  fullName: EventStore.Core.Authentication.IAuthenticationProvider
- uid: System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Net.Sockets.SocketError}
  commentId: T:System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Net.Sockets.SocketError}
  parent: System
  definition: System.Action`2
  name: Action<TcpConnectionManager, SocketError>
  nameWithType: Action<TcpConnectionManager, SocketError>
  fullName: System.Action<EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, System.Net.Sockets.SocketError>
  nameWithType.vb: Action(Of TcpConnectionManager, SocketError)
  fullName.vb: System.Action(Of EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, System.Net.Sockets.SocketError)
  name.vb: Action(Of TcpConnectionManager, SocketError)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
    name: TcpConnectionManager
    nameWithType: TcpConnectionManager
    fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: System.Net.Sockets.SocketError
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
    name: TcpConnectionManager
    nameWithType: TcpConnectionManager
    fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: System.Net.Sockets.SocketError
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp
  commentId: N:EventStore.Transport.Tcp
  name: EventStore.Transport.Tcp
  nameWithType: EventStore.Transport.Tcp
  fullName: EventStore.Transport.Tcp
- uid: EventStore.Core.Authentication
  commentId: N:EventStore.Core.Authentication
  name: EventStore.Core.Authentication
  nameWithType: EventStore.Core.Authentication
  fullName: EventStore.Core.Authentication
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpClientConnector
  commentId: T:EventStore.Transport.Tcp.TcpClientConnector
  parent: EventStore.Transport.Tcp
  name: TcpClientConnector
  nameWithType: TcpClientConnector
  fullName: EventStore.Transport.Tcp.TcpClientConnector
- uid: System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager}
  commentId: T:System.Action{EventStore.Core.Services.Transport.Tcp.TcpConnectionManager}
  parent: System
  definition: System.Action`1
  name: Action<TcpConnectionManager>
  nameWithType: Action<TcpConnectionManager>
  fullName: System.Action<EventStore.Core.Services.Transport.Tcp.TcpConnectionManager>
  nameWithType.vb: Action(Of TcpConnectionManager)
  fullName.vb: System.Action(Of EventStore.Core.Services.Transport.Tcp.TcpConnectionManager)
  name.vb: Action(Of TcpConnectionManager)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
    name: TcpConnectionManager
    nameWithType: TcpConnectionManager
    fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
    name: TcpConnectionManager
    nameWithType: TcpConnectionManager
    fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.StartReceiving*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.StartReceiving
  name: StartReceiving
  nameWithType: TcpConnectionManager.StartReceiving
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.StartReceiving
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ProcessPackage*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ProcessPackage
  name: ProcessPackage
  nameWithType: TcpConnectionManager.ProcessPackage
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.ProcessPackage
- uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
  commentId: T:EventStore.Core.Services.Transport.Tcp.TcpPackage
  parent: EventStore.Core.Services.Transport.Tcp
  name: TcpPackage
  nameWithType: TcpPackage
  fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequestAndClose*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequestAndClose
  name: SendBadRequestAndClose
  nameWithType: TcpConnectionManager.SendBadRequestAndClose
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequestAndClose
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequest*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequest
  name: SendBadRequest
  nameWithType: TcpConnectionManager.SendBadRequest
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendBadRequest
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Stop*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Stop
  name: Stop
  nameWithType: TcpConnectionManager.Stop
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Stop
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendMessage*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendMessage
  name: SendMessage
  nameWithType: TcpConnectionManager.SendMessage
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.SendMessage
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Handle*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Handle
  name: Handle
  nameWithType: TcpConnectionManager.Handle
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.Heartbeat}.Handle(EventStore.Core.Messages.TcpMessage.Heartbeat)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.Heartbeat}.Handle(EventStore.Core.Messages.TcpMessage.Heartbeat)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.Heartbeat}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(TcpMessage.Heartbeat)
  nameWithType: IHandle<TcpMessage.Heartbeat>.Handle(TcpMessage.Heartbeat)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.TcpMessage.Heartbeat>.Handle(EventStore.Core.Messages.TcpMessage.Heartbeat)
  nameWithType.vb: IHandle(Of TcpMessage.Heartbeat).Handle(TcpMessage.Heartbeat)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.TcpMessage.Heartbeat).Handle(EventStore.Core.Messages.TcpMessage.Heartbeat)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<TcpMessage.Heartbeat>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.TcpMessage.Heartbeat>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.TcpMessage.Heartbeat
    name: TcpMessage.Heartbeat
    nameWithType: TcpMessage.Heartbeat
    fullName: EventStore.Core.Messages.TcpMessage.Heartbeat
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of TcpMessage.Heartbeat).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.TcpMessage.Heartbeat).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.TcpMessage.Heartbeat
    name: TcpMessage.Heartbeat
    nameWithType: TcpMessage.Heartbeat
    fullName: EventStore.Core.Messages.TcpMessage.Heartbeat
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.TcpMessage.Heartbeat
  commentId: T:EventStore.Core.Messages.TcpMessage.Heartbeat
  parent: EventStore.Core.Messages
  name: TcpMessage.Heartbeat
  nameWithType: TcpMessage.Heartbeat
  fullName: EventStore.Core.Messages.TcpMessage.Heartbeat
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.HeartbeatTimeout}.Handle(EventStore.Core.Messages.TcpMessage.HeartbeatTimeout)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.HeartbeatTimeout}.Handle(EventStore.Core.Messages.TcpMessage.HeartbeatTimeout)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.TcpMessage.HeartbeatTimeout}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(TcpMessage.HeartbeatTimeout)
  nameWithType: IHandle<TcpMessage.HeartbeatTimeout>.Handle(TcpMessage.HeartbeatTimeout)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.TcpMessage.HeartbeatTimeout>.Handle(EventStore.Core.Messages.TcpMessage.HeartbeatTimeout)
  nameWithType.vb: IHandle(Of TcpMessage.HeartbeatTimeout).Handle(TcpMessage.HeartbeatTimeout)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.TcpMessage.HeartbeatTimeout).Handle(EventStore.Core.Messages.TcpMessage.HeartbeatTimeout)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<TcpMessage.HeartbeatTimeout>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.TcpMessage.HeartbeatTimeout>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.TcpMessage.HeartbeatTimeout
    name: TcpMessage.HeartbeatTimeout
    nameWithType: TcpMessage.HeartbeatTimeout
    fullName: EventStore.Core.Messages.TcpMessage.HeartbeatTimeout
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of TcpMessage.HeartbeatTimeout).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.TcpMessage.HeartbeatTimeout).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.TcpMessage.HeartbeatTimeout
    name: TcpMessage.HeartbeatTimeout
    nameWithType: TcpMessage.HeartbeatTimeout
    fullName: EventStore.Core.Messages.TcpMessage.HeartbeatTimeout
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.TcpMessage.HeartbeatTimeout
  commentId: T:EventStore.Core.Messages.TcpMessage.HeartbeatTimeout
  parent: EventStore.Core.Messages
  name: TcpMessage.HeartbeatTimeout
  nameWithType: TcpMessage.HeartbeatTimeout
  fullName: EventStore.Core.Messages.TcpMessage.HeartbeatTimeout

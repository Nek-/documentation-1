### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher
  commentId: T:EventStore.Core.Services.Transport.Tcp.TcpDispatcher
  id: TcpDispatcher
  parent: EventStore.Core.Services.Transport.Tcp
  children:
  - EventStore.Core.Services.Transport.Tcp.TcpDispatcher.#ctor
  - EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  - EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  - EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  - EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  - EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  - EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddWrapper``1(Func{``0,EventStore.Core.Services.Transport.Tcp.TcpPackage},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  - EventStore.Core.Services.Transport.Tcp.TcpDispatcher.UnwrapPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Byte)
  - EventStore.Core.Services.Transport.Tcp.TcpDispatcher.WrapMessage(EventStore.Core.Messaging.Message,System.Byte)
  langs:
  - csharp
  - vb
  name: TcpDispatcher
  nameWithType: TcpDispatcher
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TcpDispatcher
    path: ../EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
    startLine: 7
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: 'public abstract class TcpDispatcher : object, ITcpDispatcher'
    content.vb: >-
      Public MustInherit Class TcpDispatcher
          Inherits Object
          Implements ITcpDispatcher
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.Core.Services.Transport.Tcp.ClientTcpDispatcher
  implements:
  - EventStore.Core.Services.Transport.Tcp.ITcpDispatcher
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.Transport.Tcp.TcpDispatcher.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.Transport.Tcp.TcpDispatcher.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.#ctor
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.#ctor
  id: '#ctor'
  parent: EventStore.Core.Services.Transport.Tcp.TcpDispatcher
  langs:
  - csharp
  - vb
  name: TcpDispatcher()
  nameWithType: TcpDispatcher.TcpDispatcher()
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.TcpDispatcher()
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
    startLine: 15
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: protected TcpDispatcher()
    content.vb: Protected Sub New
  overload: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddWrapper``1(Func{``0,EventStore.Core.Services.Transport.Tcp.TcpPackage},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddWrapper``1(Func{``0,EventStore.Core.Services.Transport.Tcp.TcpPackage},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  id: AddWrapper``1(Func{``0,EventStore.Core.Services.Transport.Tcp.TcpPackage},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  parent: EventStore.Core.Services.Transport.Tcp.TcpDispatcher
  langs:
  - csharp
  - vb
  name: AddWrapper<T>(Func<T, TcpPackage>, ClientVersion)
  nameWithType: TcpDispatcher.AddWrapper<T>(Func<T, TcpPackage>, ClientVersion)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddWrapper<T>(Func<T, EventStore.Core.Services.Transport.Tcp.TcpPackage>, EventStore.Core.Services.Transport.Tcp.ClientVersion)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AddWrapper
    path: ../EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
    startLine: 28
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: >-
      protected void AddWrapper<T>(Func<T, TcpPackage> wrapper, ClientVersion version)
          where T : Message
    parameters:
    - id: wrapper
      type: Func{{T},EventStore.Core.Services.Transport.Tcp.TcpPackage}
    - id: version
      type: EventStore.Core.Services.Transport.Tcp.ClientVersion
    typeParameters:
    - id: T
    content.vb: Protected Sub AddWrapper(Of T As Message)(wrapper As Func(Of T, TcpPackage), version As ClientVersion)
  overload: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddWrapper*
  nameWithType.vb: TcpDispatcher.AddWrapper(Of T)(Func(Of T, TcpPackage), ClientVersion)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddWrapper(Of T)(Func(Of T, EventStore.Core.Services.Transport.Tcp.TcpPackage), EventStore.Core.Services.Transport.Tcp.ClientVersion)
  name.vb: AddWrapper(Of T)(Func(Of T, TcpPackage), ClientVersion)
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  id: AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  parent: EventStore.Core.Services.Transport.Tcp.TcpDispatcher
  langs:
  - csharp
  - vb
  name: AddUnwrapper<T>(TcpCommand, Func<TcpPackage, IEnvelope, T>, ClientVersion)
  nameWithType: TcpDispatcher.AddUnwrapper<T>(TcpCommand, Func<TcpPackage, IEnvelope, T>, ClientVersion)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper<T>(EventStore.Core.Services.Transport.Tcp.TcpCommand, Func<EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, T>, EventStore.Core.Services.Transport.Tcp.ClientVersion)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AddUnwrapper
    path: ../EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
    startLine: 32
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: >-
      protected void AddUnwrapper<T>(TcpCommand command, Func<TcpPackage, IEnvelope, T> unwrapper, ClientVersion version)
          where T : Message
    parameters:
    - id: command
      type: EventStore.Core.Services.Transport.Tcp.TcpCommand
    - id: unwrapper
      type: Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,{T}}
    - id: version
      type: EventStore.Core.Services.Transport.Tcp.ClientVersion
    typeParameters:
    - id: T
    content.vb: Protected Sub AddUnwrapper(Of T As Message)(command As TcpCommand, unwrapper As Func(Of TcpPackage, IEnvelope, T), version As ClientVersion)
  overload: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper*
  nameWithType.vb: TcpDispatcher.AddUnwrapper(Of T)(TcpCommand, Func(Of TcpPackage, IEnvelope, T), ClientVersion)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper(Of T)(EventStore.Core.Services.Transport.Tcp.TcpCommand, Func(Of EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, T), EventStore.Core.Services.Transport.Tcp.ClientVersion)
  name.vb: AddUnwrapper(Of T)(TcpCommand, Func(Of TcpPackage, IEnvelope, T), ClientVersion)
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  id: AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  parent: EventStore.Core.Services.Transport.Tcp.TcpDispatcher
  langs:
  - csharp
  - vb
  name: AddUnwrapper<T>(TcpCommand, Func<TcpPackage, IEnvelope, TcpConnectionManager, T>, ClientVersion)
  nameWithType: TcpDispatcher.AddUnwrapper<T>(TcpCommand, Func<TcpPackage, IEnvelope, TcpConnectionManager, T>, ClientVersion)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper<T>(EventStore.Core.Services.Transport.Tcp.TcpCommand, Func<EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, T>, EventStore.Core.Services.Transport.Tcp.ClientVersion)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AddUnwrapper
    path: ../EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
    startLine: 37
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: >-
      protected void AddUnwrapper<T>(TcpCommand command, Func<TcpPackage, IEnvelope, TcpConnectionManager, T> unwrapper, ClientVersion version)
          where T : Message
    parameters:
    - id: command
      type: EventStore.Core.Services.Transport.Tcp.TcpCommand
    - id: unwrapper
      type: Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,{T}}
    - id: version
      type: EventStore.Core.Services.Transport.Tcp.ClientVersion
    typeParameters:
    - id: T
    content.vb: Protected Sub AddUnwrapper(Of T As Message)(command As TcpCommand, unwrapper As Func(Of TcpPackage, IEnvelope, TcpConnectionManager, T), version As ClientVersion)
  overload: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper*
  nameWithType.vb: TcpDispatcher.AddUnwrapper(Of T)(TcpCommand, Func(Of TcpPackage, IEnvelope, TcpConnectionManager, T), ClientVersion)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper(Of T)(EventStore.Core.Services.Transport.Tcp.TcpCommand, Func(Of EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, T), EventStore.Core.Services.Transport.Tcp.ClientVersion)
  name.vb: AddUnwrapper(Of T)(TcpCommand, Func(Of TcpPackage, IEnvelope, TcpConnectionManager, T), ClientVersion)
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  id: AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  parent: EventStore.Core.Services.Transport.Tcp.TcpDispatcher
  langs:
  - csharp
  - vb
  name: AddUnwrapper<T>(TcpCommand, Func<TcpPackage, IEnvelope, IPrincipal, T>, ClientVersion)
  nameWithType: TcpDispatcher.AddUnwrapper<T>(TcpCommand, Func<TcpPackage, IEnvelope, IPrincipal, T>, ClientVersion)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper<T>(EventStore.Core.Services.Transport.Tcp.TcpCommand, Func<EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, T>, EventStore.Core.Services.Transport.Tcp.ClientVersion)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AddUnwrapper
    path: ../EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
    startLine: 43
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: >-
      protected void AddUnwrapper<T>(TcpCommand command, Func<TcpPackage, IEnvelope, IPrincipal, T> unwrapper, ClientVersion version)
          where T : Message
    parameters:
    - id: command
      type: EventStore.Core.Services.Transport.Tcp.TcpCommand
    - id: unwrapper
      type: Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,{T}}
    - id: version
      type: EventStore.Core.Services.Transport.Tcp.ClientVersion
    typeParameters:
    - id: T
    content.vb: Protected Sub AddUnwrapper(Of T As Message)(command As TcpCommand, unwrapper As Func(Of TcpPackage, IEnvelope, IPrincipal, T), version As ClientVersion)
  overload: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper*
  nameWithType.vb: TcpDispatcher.AddUnwrapper(Of T)(TcpCommand, Func(Of TcpPackage, IEnvelope, IPrincipal, T), ClientVersion)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper(Of T)(EventStore.Core.Services.Transport.Tcp.TcpCommand, Func(Of EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, T), EventStore.Core.Services.Transport.Tcp.ClientVersion)
  name.vb: AddUnwrapper(Of T)(TcpCommand, Func(Of TcpPackage, IEnvelope, IPrincipal, T), ClientVersion)
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  id: AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  parent: EventStore.Core.Services.Transport.Tcp.TcpDispatcher
  langs:
  - csharp
  - vb
  name: AddUnwrapper<T>(TcpCommand, Func<TcpPackage, IEnvelope, IPrincipal, String, String, T>, ClientVersion)
  nameWithType: TcpDispatcher.AddUnwrapper<T>(TcpCommand, Func<TcpPackage, IEnvelope, IPrincipal, String, String, T>, ClientVersion)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper<T>(EventStore.Core.Services.Transport.Tcp.TcpCommand, Func<EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, System.String, System.String, T>, EventStore.Core.Services.Transport.Tcp.ClientVersion)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AddUnwrapper
    path: ../EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
    startLine: 49
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: >-
      protected void AddUnwrapper<T>(TcpCommand command, Func<TcpPackage, IEnvelope, IPrincipal, string, string, T> unwrapper, ClientVersion version)
          where T : Message
    parameters:
    - id: command
      type: EventStore.Core.Services.Transport.Tcp.TcpCommand
    - id: unwrapper
      type: Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,{T}}
    - id: version
      type: EventStore.Core.Services.Transport.Tcp.ClientVersion
    typeParameters:
    - id: T
    content.vb: Protected Sub AddUnwrapper(Of T As Message)(command As TcpCommand, unwrapper As Func(Of TcpPackage, IEnvelope, IPrincipal, String, String, T), version As ClientVersion)
  overload: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper*
  nameWithType.vb: TcpDispatcher.AddUnwrapper(Of T)(TcpCommand, Func(Of TcpPackage, IEnvelope, IPrincipal, String, String, T), ClientVersion)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper(Of T)(EventStore.Core.Services.Transport.Tcp.TcpCommand, Func(Of EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, System.String, System.String, T), EventStore.Core.Services.Transport.Tcp.ClientVersion)
  name.vb: AddUnwrapper(Of T)(TcpCommand, Func(Of TcpPackage, IEnvelope, IPrincipal, String, String, T), ClientVersion)
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  id: AddUnwrapper``1(EventStore.Core.Services.Transport.Tcp.TcpCommand,Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,``0},EventStore.Core.Services.Transport.Tcp.ClientVersion)
  parent: EventStore.Core.Services.Transport.Tcp.TcpDispatcher
  langs:
  - csharp
  - vb
  name: AddUnwrapper<T>(TcpCommand, Func<TcpPackage, IEnvelope, IPrincipal, String, String, TcpConnectionManager, T>, ClientVersion)
  nameWithType: TcpDispatcher.AddUnwrapper<T>(TcpCommand, Func<TcpPackage, IEnvelope, IPrincipal, String, String, TcpConnectionManager, T>, ClientVersion)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper<T>(EventStore.Core.Services.Transport.Tcp.TcpCommand, Func<EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, System.String, System.String, EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, T>, EventStore.Core.Services.Transport.Tcp.ClientVersion)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AddUnwrapper
    path: ../EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
    startLine: 56
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: >-
      protected void AddUnwrapper<T>(TcpCommand command, Func<TcpPackage, IEnvelope, IPrincipal, string, string, TcpConnectionManager, T> unwrapper, ClientVersion version)
          where T : Message
    parameters:
    - id: command
      type: EventStore.Core.Services.Transport.Tcp.TcpCommand
    - id: unwrapper
      type: Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,{T}}
    - id: version
      type: EventStore.Core.Services.Transport.Tcp.ClientVersion
    typeParameters:
    - id: T
    content.vb: Protected Sub AddUnwrapper(Of T As Message)(command As TcpCommand, unwrapper As Func(Of TcpPackage, IEnvelope, IPrincipal, String, String, TcpConnectionManager, T), version As ClientVersion)
  overload: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper*
  nameWithType.vb: TcpDispatcher.AddUnwrapper(Of T)(TcpCommand, Func(Of TcpPackage, IEnvelope, IPrincipal, String, String, TcpConnectionManager, T), ClientVersion)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper(Of T)(EventStore.Core.Services.Transport.Tcp.TcpCommand, Func(Of EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, System.String, System.String, EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, T), EventStore.Core.Services.Transport.Tcp.ClientVersion)
  name.vb: AddUnwrapper(Of T)(TcpCommand, Func(Of TcpPackage, IEnvelope, IPrincipal, String, String, TcpConnectionManager, T), ClientVersion)
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.WrapMessage(EventStore.Core.Messaging.Message,System.Byte)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.WrapMessage(EventStore.Core.Messaging.Message,System.Byte)
  id: WrapMessage(EventStore.Core.Messaging.Message,System.Byte)
  parent: EventStore.Core.Services.Transport.Tcp.TcpDispatcher
  langs:
  - csharp
  - vb
  name: WrapMessage(Message, Byte)
  nameWithType: TcpDispatcher.WrapMessage(Message, Byte)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.WrapMessage(EventStore.Core.Messaging.Message, System.Byte)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: WrapMessage
    path: ../EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
    startLine: 66
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public TcpPackage? WrapMessage(Message message, byte version)
    parameters:
    - id: message
      type: EventStore.Core.Messaging.Message
    - id: version
      type: System.Byte
    return:
      type: System.Nullable{EventStore.Core.Services.Transport.Tcp.TcpPackage}
    content.vb: Public Function WrapMessage(message As Message, version As Byte) As TcpPackage?
  overload: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.WrapMessage*
  implements:
  - EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.WrapMessage(EventStore.Core.Messaging.Message,System.Byte)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.UnwrapPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Byte)
  commentId: M:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.UnwrapPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Byte)
  id: UnwrapPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Byte)
  parent: EventStore.Core.Services.Transport.Tcp.TcpDispatcher
  langs:
  - csharp
  - vb
  name: UnwrapPackage(TcpPackage, IEnvelope, IPrincipal, String, String, TcpConnectionManager, Byte)
  nameWithType: TcpDispatcher.UnwrapPackage(TcpPackage, IEnvelope, IPrincipal, String, String, TcpConnectionManager, Byte)
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.UnwrapPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, System.String, System.String, EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, System.Byte)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: UnwrapPackage
    path: ../EventStore/src/EventStore.Core/Services/Transport/Tcp/TcpDispatcher.cs
    startLine: 83
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.Transport.Tcp
  syntax:
    content: public Message UnwrapPackage(TcpPackage package, IEnvelope envelope, IPrincipal user, string login, string pass, TcpConnectionManager connection, byte version)
    parameters:
    - id: package
      type: EventStore.Core.Services.Transport.Tcp.TcpPackage
    - id: envelope
      type: EventStore.Core.Messaging.IEnvelope
    - id: user
      type: IPrincipal
    - id: login
      type: System.String
    - id: pass
      type: System.String
    - id: connection
      type: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
    - id: version
      type: System.Byte
    return:
      type: EventStore.Core.Messaging.Message
    content.vb: Public Function UnwrapPackage(package As TcpPackage, envelope As IEnvelope, user As IPrincipal, login As String, pass As String, connection As TcpConnectionManager, version As Byte) As Message
  overload: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.UnwrapPackage*
  implements:
  - EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.UnwrapPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Byte)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher
  commentId: T:EventStore.Core.Services.Transport.Tcp.ITcpDispatcher
  parent: EventStore.Core.Services.Transport.Tcp
  name: ITcpDispatcher
  nameWithType: ITcpDispatcher
  fullName: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TcpDispatcher>()
  nameWithType: ProtobufExtensions.Serialize<TcpDispatcher>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Transport.Tcp.TcpDispatcher>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TcpDispatcher)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Transport.Tcp.TcpDispatcher)()
  name.vb: Serialize(Of TcpDispatcher)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TcpDispatcher>
    nameWithType: ProtobufExtensions.Serialize<TcpDispatcher>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.Transport.Tcp.TcpDispatcher>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TcpDispatcher)
    nameWithType: ProtobufExtensions.Serialize(Of TcpDispatcher)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.Transport.Tcp.TcpDispatcher)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TcpDispatcher>()
  nameWithType: ProtobufExtensions.SerializeToArray<TcpDispatcher>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Transport.Tcp.TcpDispatcher>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TcpDispatcher)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Transport.Tcp.TcpDispatcher)()
  name.vb: SerializeToArray(Of TcpDispatcher)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TcpDispatcher>
    nameWithType: ProtobufExtensions.SerializeToArray<TcpDispatcher>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.Transport.Tcp.TcpDispatcher>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TcpDispatcher)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TcpDispatcher)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.Transport.Tcp.TcpDispatcher)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.#ctor*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.#ctor
  name: TcpDispatcher
  nameWithType: TcpDispatcher.TcpDispatcher
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.TcpDispatcher
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddWrapper*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddWrapper
  name: AddWrapper
  nameWithType: TcpDispatcher.AddWrapper
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddWrapper
- uid: Func{{T},EventStore.Core.Services.Transport.Tcp.TcpPackage}
  commentId: '!:Func{``0,EventStore.Core.Services.Transport.Tcp.TcpPackage}'
  definition: Func`2
  name: Func<T, TcpPackage>
  nameWithType: Func<T, TcpPackage>
  fullName: Func<T, EventStore.Core.Services.Transport.Tcp.TcpPackage>
  nameWithType.vb: Func(Of T, TcpPackage)
  fullName.vb: Func(Of T, EventStore.Core.Services.Transport.Tcp.TcpPackage)
  name.vb: Func(Of T, TcpPackage)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ClientVersion
  commentId: T:EventStore.Core.Services.Transport.Tcp.ClientVersion
  parent: EventStore.Core.Services.Transport.Tcp
  name: ClientVersion
  nameWithType: ClientVersion
  fullName: EventStore.Core.Services.Transport.Tcp.ClientVersion
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper
  name: AddUnwrapper
  nameWithType: TcpDispatcher.AddUnwrapper
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.AddUnwrapper
- uid: EventStore.Core.Services.Transport.Tcp.TcpCommand
  commentId: T:EventStore.Core.Services.Transport.Tcp.TcpCommand
  parent: EventStore.Core.Services.Transport.Tcp
  name: TcpCommand
  nameWithType: TcpCommand
  fullName: EventStore.Core.Services.Transport.Tcp.TcpCommand
- uid: Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,{T}}
  commentId: '!:Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,``0}'
  definition: Func`3
  name: Func<TcpPackage, IEnvelope, T>
  nameWithType: Func<TcpPackage, IEnvelope, T>
  fullName: Func<EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, T>
  nameWithType.vb: Func(Of TcpPackage, IEnvelope, T)
  fullName.vb: Func(Of EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, T)
  name.vb: Func(Of TcpPackage, IEnvelope, T)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,{T}}
  commentId: '!:Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,``0}'
  definition: Func`4
  name: Func<TcpPackage, IEnvelope, TcpConnectionManager, T>
  nameWithType: Func<TcpPackage, IEnvelope, TcpConnectionManager, T>
  fullName: Func<EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, T>
  nameWithType.vb: Func(Of TcpPackage, IEnvelope, TcpConnectionManager, T)
  fullName.vb: Func(Of EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, T)
  name.vb: Func(Of TcpPackage, IEnvelope, TcpConnectionManager, T)
  spec.csharp:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
    name: TcpConnectionManager
    nameWithType: TcpConnectionManager
    fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
    name: TcpConnectionManager
    nameWithType: TcpConnectionManager
    fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`4
  isExternal: true
  name: Func<, , , >
  nameWithType: Func<, , , >
  fullName: Func<, , , >
  nameWithType.vb: Func(Of , , , )
  fullName.vb: Func(Of , , , )
  name.vb: Func(Of , , , )
  spec.csharp:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,{T}}
  commentId: '!:Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,``0}'
  definition: Func`4
  name: Func<TcpPackage, IEnvelope, IPrincipal, T>
  nameWithType: Func<TcpPackage, IEnvelope, IPrincipal, T>
  fullName: Func<EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, T>
  nameWithType.vb: Func(Of TcpPackage, IEnvelope, IPrincipal, T)
  fullName.vb: Func(Of EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, T)
  name.vb: Func(Of TcpPackage, IEnvelope, IPrincipal, T)
  spec.csharp:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,{T}}
  commentId: '!:Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,``0}'
  definition: Func`6
  name: Func<TcpPackage, IEnvelope, IPrincipal, String, String, T>
  nameWithType: Func<TcpPackage, IEnvelope, IPrincipal, String, String, T>
  fullName: Func<EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, System.String, System.String, T>
  nameWithType.vb: Func(Of TcpPackage, IEnvelope, IPrincipal, String, String, T)
  fullName.vb: Func(Of EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, System.String, System.String, T)
  name.vb: Func(Of TcpPackage, IEnvelope, IPrincipal, String, String, T)
  spec.csharp:
  - uid: Func`6
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`6
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`6
  commentId: '!:Func`6'
  isExternal: true
  name: Func<, , , , , >
  nameWithType: Func<, , , , , >
  fullName: Func<, , , , , >
  nameWithType.vb: Func(Of , , , , , )
  fullName.vb: Func(Of , , , , , )
  name.vb: Func(Of , , , , , )
  spec.csharp:
  - uid: Func`6
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`6
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,{T}}
  commentId: '!:Func{EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,``0}'
  definition: Func`7
  name: Func<TcpPackage, IEnvelope, IPrincipal, String, String, TcpConnectionManager, T>
  nameWithType: Func<TcpPackage, IEnvelope, IPrincipal, String, String, TcpConnectionManager, T>
  fullName: Func<EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, System.String, System.String, EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, T>
  nameWithType.vb: Func(Of TcpPackage, IEnvelope, IPrincipal, String, String, TcpConnectionManager, T)
  fullName.vb: Func(Of EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, System.String, System.String, EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, T)
  name.vb: Func(Of TcpPackage, IEnvelope, IPrincipal, String, String, TcpConnectionManager, T)
  spec.csharp:
  - uid: Func`7
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
    name: TcpConnectionManager
    nameWithType: TcpConnectionManager
    fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`7
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
    name: TcpConnectionManager
    nameWithType: TcpConnectionManager
    fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`7
  commentId: '!:Func`7'
  isExternal: true
  name: Func<, , , , , , >
  nameWithType: Func<, , , , , , >
  fullName: Func<, , , , , , >
  nameWithType.vb: Func(Of , , , , , , )
  fullName.vb: Func(Of , , , , , , )
  name.vb: Func(Of , , , , , , )
  spec.csharp:
  - uid: Func`7
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`7
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.WrapMessage*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.WrapMessage
  name: WrapMessage
  nameWithType: TcpDispatcher.WrapMessage
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.WrapMessage
- uid: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.WrapMessage(EventStore.Core.Messaging.Message,System.Byte)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.WrapMessage(EventStore.Core.Messaging.Message,System.Byte)
  parent: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher
  isExternal: true
  name: WrapMessage(Message, Byte)
  nameWithType: ITcpDispatcher.WrapMessage(Message, Byte)
  fullName: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.WrapMessage(EventStore.Core.Messaging.Message, System.Byte)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.WrapMessage(EventStore.Core.Messaging.Message,System.Byte)
    name: WrapMessage
    nameWithType: ITcpDispatcher.WrapMessage
    fullName: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.WrapMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.WrapMessage(EventStore.Core.Messaging.Message,System.Byte)
    name: WrapMessage
    nameWithType: ITcpDispatcher.WrapMessage
    fullName: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.WrapMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: EventStore.Core.Messaging.Message
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging.Message
  commentId: T:EventStore.Core.Messaging.Message
  parent: EventStore.Core.Messaging
  name: Message
  nameWithType: Message
  fullName: EventStore.Core.Messaging.Message
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Nullable{EventStore.Core.Services.Transport.Tcp.TcpPackage}
  commentId: '!:System.Nullable{EventStore.Core.Services.Transport.Tcp.TcpPackage}'
  definition: System.Nullable`1
  name: Nullable<TcpPackage>
  nameWithType: Nullable<TcpPackage>
  fullName: System.Nullable<EventStore.Core.Services.Transport.Tcp.TcpPackage>
  nameWithType.vb: Nullable(Of TcpPackage)
  fullName.vb: System.Nullable(Of EventStore.Core.Services.Transport.Tcp.TcpPackage)
  name.vb: Nullable(Of TcpPackage)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.UnwrapPackage*
  commentId: Overload:EventStore.Core.Services.Transport.Tcp.TcpDispatcher.UnwrapPackage
  name: UnwrapPackage
  nameWithType: TcpDispatcher.UnwrapPackage
  fullName: EventStore.Core.Services.Transport.Tcp.TcpDispatcher.UnwrapPackage
- uid: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.UnwrapPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Byte)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.UnwrapPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Byte)
  parent: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher
  isExternal: true
  name: UnwrapPackage(TcpPackage, IEnvelope, IPrincipal, String, String, TcpConnectionManager, Byte)
  nameWithType: ITcpDispatcher.UnwrapPackage(TcpPackage, IEnvelope, IPrincipal, String, String, TcpConnectionManager, Byte)
  fullName: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.UnwrapPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage, EventStore.Core.Messaging.IEnvelope, IPrincipal, System.String, System.String, EventStore.Core.Services.Transport.Tcp.TcpConnectionManager, System.Byte)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.UnwrapPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Byte)
    name: UnwrapPackage
    nameWithType: ITcpDispatcher.UnwrapPackage
    fullName: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.UnwrapPackage
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
    name: TcpConnectionManager
    nameWithType: TcpConnectionManager
    fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.UnwrapPackage(EventStore.Core.Services.Transport.Tcp.TcpPackage,EventStore.Core.Messaging.IEnvelope,IPrincipal,System.String,System.String,EventStore.Core.Services.Transport.Tcp.TcpConnectionManager,System.Byte)
    name: UnwrapPackage
    nameWithType: ITcpDispatcher.UnwrapPackage
    fullName: EventStore.Core.Services.Transport.Tcp.ITcpDispatcher.UnwrapPackage
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
    name: TcpPackage
    nameWithType: TcpPackage
    fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Messaging.IEnvelope
    name: IEnvelope
    nameWithType: IEnvelope
    fullName: EventStore.Core.Messaging.IEnvelope
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
    name: TcpConnectionManager
    nameWithType: TcpConnectionManager
    fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.TcpPackage
  commentId: T:EventStore.Core.Services.Transport.Tcp.TcpPackage
  parent: EventStore.Core.Services.Transport.Tcp
  name: TcpPackage
  nameWithType: TcpPackage
  fullName: EventStore.Core.Services.Transport.Tcp.TcpPackage
- uid: EventStore.Core.Messaging.IEnvelope
  commentId: T:EventStore.Core.Messaging.IEnvelope
  parent: EventStore.Core.Messaging
  name: IEnvelope
  nameWithType: IEnvelope
  fullName: EventStore.Core.Messaging.IEnvelope
- uid: IPrincipal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: IPrincipal
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  commentId: T:EventStore.Core.Services.Transport.Tcp.TcpConnectionManager
  parent: EventStore.Core.Services.Transport.Tcp
  name: TcpConnectionManager
  nameWithType: TcpConnectionManager
  fullName: EventStore.Core.Services.Transport.Tcp.TcpConnectionManager

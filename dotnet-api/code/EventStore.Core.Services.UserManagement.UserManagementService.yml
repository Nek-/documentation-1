### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.UserManagement.UserManagementService
  commentId: T:EventStore.Core.Services.UserManagement.UserManagementService
  id: UserManagementService
  parent: EventStore.Core.Services.UserManagement
  children:
  - EventStore.Core.Services.UserManagement.UserManagementService.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Helpers.IODispatcher,EventStore.Core.Authentication.PasswordHashAlgorithm,System.Boolean)
  - EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.SystemMessage.BecomeMaster)
  - EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.ChangePassword)
  - EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Create)
  - EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Delete)
  - EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Disable)
  - EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Enable)
  - EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Get)
  - EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.GetAll)
  - EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.ResetPassword)
  - EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Update)
  - EventStore.Core.Services.UserManagement.UserManagementService.PasswordChanged
  - EventStore.Core.Services.UserManagement.UserManagementService.UserPasswordNotificationsStreamId
  - EventStore.Core.Services.UserManagement.UserManagementService.UsersStream
  - EventStore.Core.Services.UserManagement.UserManagementService.UsersStreamType
  - EventStore.Core.Services.UserManagement.UserManagementService.UserUpdated
  langs:
  - csharp
  - vb
  name: UserManagementService
  nameWithType: UserManagementService
  fullName: EventStore.Core.Services.UserManagement.UserManagementService
  type: Class
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: UserManagementService
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 14
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: 'public class UserManagementService : object, IHandle<UserManagementMessage.Get>, IHandle<UserManagementMessage.GetAll>, IHandle<UserManagementMessage.Create>, IHandle<UserManagementMessage.Update>, IHandle<UserManagementMessage.Enable>, IHandle<UserManagementMessage.Disable>, IHandle<UserManagementMessage.ResetPassword>, IHandle<UserManagementMessage.ChangePassword>, IHandle<UserManagementMessage.Delete>, IHandle<SystemMessage.BecomeMaster>'
    content.vb: >-
      Public Class UserManagementService
          Inherits Object
          Implements IHandle(Of UserManagementMessage.Get), IHandle(Of UserManagementMessage.GetAll), IHandle(Of UserManagementMessage.Create), IHandle(Of UserManagementMessage.Update), IHandle(Of UserManagementMessage.Enable), IHandle(Of UserManagementMessage.Disable), IHandle(Of UserManagementMessage.ResetPassword), IHandle(Of UserManagementMessage.ChangePassword), IHandle(Of UserManagementMessage.Delete), IHandle(Of SystemMessage.BecomeMaster)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Get}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.GetAll}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Create}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Update}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Enable}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Disable}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ResetPassword}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ChangePassword}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Delete}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeMaster}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.UserManagement.UserManagementService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.UserManagement.UserManagementService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.Services.UserManagement.UserManagementService.UserUpdated
  commentId: F:EventStore.Core.Services.UserManagement.UserManagementService.UserUpdated
  id: UserUpdated
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: UserUpdated
  nameWithType: UserManagementService.UserUpdated
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.UserUpdated
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: UserUpdated
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 25
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public const string UserUpdated = null
    return:
      type: System.String
    content.vb: Public Const UserUpdated As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.UserManagement.UserManagementService.PasswordChanged
  commentId: F:EventStore.Core.Services.UserManagement.UserManagementService.PasswordChanged
  id: PasswordChanged
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: PasswordChanged
  nameWithType: UserManagementService.PasswordChanged
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.PasswordChanged
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: PasswordChanged
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 26
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public const string PasswordChanged = null
    return:
      type: System.String
    content.vb: Public Const PasswordChanged As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.UserManagement.UserManagementService.UserPasswordNotificationsStreamId
  commentId: F:EventStore.Core.Services.UserManagement.UserManagementService.UserPasswordNotificationsStreamId
  id: UserPasswordNotificationsStreamId
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: UserPasswordNotificationsStreamId
  nameWithType: UserManagementService.UserPasswordNotificationsStreamId
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.UserPasswordNotificationsStreamId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: UserPasswordNotificationsStreamId
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 27
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public const string UserPasswordNotificationsStreamId = null
    return:
      type: System.String
    content.vb: Public Const UserPasswordNotificationsStreamId As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.UserManagement.UserManagementService.UsersStream
  commentId: F:EventStore.Core.Services.UserManagement.UserManagementService.UsersStream
  id: UsersStream
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: UsersStream
  nameWithType: UserManagementService.UsersStream
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.UsersStream
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: UsersStream
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 28
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public const string UsersStream = null
    return:
      type: System.String
    content.vb: Public Const UsersStream As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.UserManagement.UserManagementService.UsersStreamType
  commentId: F:EventStore.Core.Services.UserManagement.UserManagementService.UsersStreamType
  id: UsersStreamType
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: UsersStreamType
  nameWithType: UserManagementService.UsersStreamType
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.UsersStreamType
  type: Field
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: UsersStreamType
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 29
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public const string UsersStreamType = null
    return:
      type: System.String
    content.vb: Public Const UsersStreamType As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.Services.UserManagement.UserManagementService.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Helpers.IODispatcher,EventStore.Core.Authentication.PasswordHashAlgorithm,System.Boolean)
  commentId: M:EventStore.Core.Services.UserManagement.UserManagementService.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Helpers.IODispatcher,EventStore.Core.Authentication.PasswordHashAlgorithm,System.Boolean)
  id: '#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Helpers.IODispatcher,EventStore.Core.Authentication.PasswordHashAlgorithm,System.Boolean)'
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: UserManagementService(IPublisher, IODispatcher, PasswordHashAlgorithm, Boolean)
  nameWithType: UserManagementService.UserManagementService(IPublisher, IODispatcher, PasswordHashAlgorithm, Boolean)
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.UserManagementService(EventStore.Core.Bus.IPublisher, EventStore.Core.Helpers.IODispatcher, EventStore.Core.Authentication.PasswordHashAlgorithm, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 37
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public UserManagementService(IPublisher publisher, IODispatcher ioDispatcher, PasswordHashAlgorithm passwordHashAlgorithm, bool skipInitializeStandardUsersCheck)
    parameters:
    - id: publisher
      type: EventStore.Core.Bus.IPublisher
    - id: ioDispatcher
      type: EventStore.Core.Helpers.IODispatcher
    - id: passwordHashAlgorithm
      type: EventStore.Core.Authentication.PasswordHashAlgorithm
    - id: skipInitializeStandardUsersCheck
      type: System.Boolean
    content.vb: Public Sub New(publisher As IPublisher, ioDispatcher As IODispatcher, passwordHashAlgorithm As PasswordHashAlgorithm, skipInitializeStandardUsersCheck As Boolean)
  overload: EventStore.Core.Services.UserManagement.UserManagementService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Create)
  commentId: M:EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Create)
  id: Handle(EventStore.Core.Messages.UserManagementMessage.Create)
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: Handle(UserManagementMessage.Create)
  nameWithType: UserManagementService.Handle(UserManagementMessage.Create)
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Create)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 56
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public void Handle(UserManagementMessage.Create message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.UserManagementMessage.Create
    content.vb: Public Sub Handle(message As UserManagementMessage.Create)
  overload: EventStore.Core.Services.UserManagement.UserManagementService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Create}.Handle(EventStore.Core.Messages.UserManagementMessage.Create)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Update)
  commentId: M:EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Update)
  id: Handle(EventStore.Core.Messages.UserManagementMessage.Update)
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: Handle(UserManagementMessage.Update)
  nameWithType: UserManagementService.Handle(UserManagementMessage.Update)
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Update)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 84
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public void Handle(UserManagementMessage.Update message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.UserManagementMessage.Update
    content.vb: Public Sub Handle(message As UserManagementMessage.Update)
  overload: EventStore.Core.Services.UserManagement.UserManagementService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Update}.Handle(EventStore.Core.Messages.UserManagementMessage.Update)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Enable)
  commentId: M:EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Enable)
  id: Handle(EventStore.Core.Messages.UserManagementMessage.Enable)
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: Handle(UserManagementMessage.Enable)
  nameWithType: UserManagementService.Handle(UserManagementMessage.Enable)
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Enable)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 95
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public void Handle(UserManagementMessage.Enable message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.UserManagementMessage.Enable
    content.vb: Public Sub Handle(message As UserManagementMessage.Enable)
  overload: EventStore.Core.Services.UserManagement.UserManagementService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Enable}.Handle(EventStore.Core.Messages.UserManagementMessage.Enable)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Disable)
  commentId: M:EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Disable)
  id: Handle(EventStore.Core.Messages.UserManagementMessage.Disable)
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: Handle(UserManagementMessage.Disable)
  nameWithType: UserManagementService.Handle(UserManagementMessage.Disable)
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Disable)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 105
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public void Handle(UserManagementMessage.Disable message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.UserManagementMessage.Disable
    content.vb: Public Sub Handle(message As UserManagementMessage.Disable)
  overload: EventStore.Core.Services.UserManagement.UserManagementService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Disable}.Handle(EventStore.Core.Messages.UserManagementMessage.Disable)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.ResetPassword)
  commentId: M:EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.ResetPassword)
  id: Handle(EventStore.Core.Messages.UserManagementMessage.ResetPassword)
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: Handle(UserManagementMessage.ResetPassword)
  nameWithType: UserManagementService.Handle(UserManagementMessage.ResetPassword)
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.ResetPassword)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 115
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public void Handle(UserManagementMessage.ResetPassword message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.UserManagementMessage.ResetPassword
    content.vb: Public Sub Handle(message As UserManagementMessage.ResetPassword)
  overload: EventStore.Core.Services.UserManagement.UserManagementService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ResetPassword}.Handle(EventStore.Core.Messages.UserManagementMessage.ResetPassword)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.ChangePassword)
  commentId: M:EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.ChangePassword)
  id: Handle(EventStore.Core.Messages.UserManagementMessage.ChangePassword)
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: Handle(UserManagementMessage.ChangePassword)
  nameWithType: UserManagementService.Handle(UserManagementMessage.ChangePassword)
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.ChangePassword)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 128
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public void Handle(UserManagementMessage.ChangePassword message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.UserManagementMessage.ChangePassword
    content.vb: Public Sub Handle(message As UserManagementMessage.ChangePassword)
  overload: EventStore.Core.Services.UserManagement.UserManagementService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ChangePassword}.Handle(EventStore.Core.Messages.UserManagementMessage.ChangePassword)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Delete)
  commentId: M:EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Delete)
  id: Handle(EventStore.Core.Messages.UserManagementMessage.Delete)
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: Handle(UserManagementMessage.Delete)
  nameWithType: UserManagementService.Handle(UserManagementMessage.Delete)
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Delete)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 144
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public void Handle(UserManagementMessage.Delete message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.UserManagementMessage.Delete
    content.vb: Public Sub Handle(message As UserManagementMessage.Delete)
  overload: EventStore.Core.Services.UserManagement.UserManagementService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Delete}.Handle(EventStore.Core.Messages.UserManagementMessage.Delete)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Get)
  commentId: M:EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Get)
  id: Handle(EventStore.Core.Messages.UserManagementMessage.Get)
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: Handle(UserManagementMessage.Get)
  nameWithType: UserManagementService.Handle(UserManagementMessage.Get)
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.Get)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 161
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public void Handle(UserManagementMessage.Get message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.UserManagementMessage.Get
    content.vb: Public Sub Handle(message As UserManagementMessage.Get)
  overload: EventStore.Core.Services.UserManagement.UserManagementService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Get}.Handle(EventStore.Core.Messages.UserManagementMessage.Get)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.GetAll)
  commentId: M:EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.GetAll)
  id: Handle(EventStore.Core.Messages.UserManagementMessage.GetAll)
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: Handle(UserManagementMessage.GetAll)
  nameWithType: UserManagementService.Handle(UserManagementMessage.GetAll)
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.UserManagementMessage.GetAll)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 191
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public void Handle(UserManagementMessage.GetAll message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.UserManagementMessage.GetAll
    content.vb: Public Sub Handle(message As UserManagementMessage.GetAll)
  overload: EventStore.Core.Services.UserManagement.UserManagementService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.GetAll}.Handle(EventStore.Core.Messages.UserManagementMessage.GetAll)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.SystemMessage.BecomeMaster)
  commentId: M:EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.SystemMessage.BecomeMaster)
  id: Handle(EventStore.Core.Messages.SystemMessage.BecomeMaster)
  parent: EventStore.Core.Services.UserManagement.UserManagementService
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.BecomeMaster)
  nameWithType: UserManagementService.Handle(SystemMessage.BecomeMaster)
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.Handle(EventStore.Core.Messages.SystemMessage.BecomeMaster)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/Services/UserManagement/UserManagementService.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Core/Services/UserManagement/UserManagementService.cs
    startLine: 202
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.UserManagement
  syntax:
    content: public void Handle(SystemMessage.BecomeMaster message)
    parameters:
    - id: message
      type: EventStore.Core.Messages.SystemMessage.BecomeMaster
    content.vb: Public Sub Handle(message As SystemMessage.BecomeMaster)
  overload: EventStore.Core.Services.UserManagement.UserManagementService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeMaster}.Handle(EventStore.Core.Messages.SystemMessage.BecomeMaster)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.Services.UserManagement
  commentId: N:EventStore.Core.Services.UserManagement
  name: EventStore.Core.Services.UserManagement
  nameWithType: EventStore.Core.Services.UserManagement
  fullName: EventStore.Core.Services.UserManagement
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Get}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Get}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<UserManagementMessage.Get>
  nameWithType: IHandle<UserManagementMessage.Get>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Get>
  nameWithType.vb: IHandle(Of UserManagementMessage.Get)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Get)
  name.vb: IHandle(Of UserManagementMessage.Get)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.UserManagementMessage.Get
    name: UserManagementMessage.Get
    nameWithType: UserManagementMessage.Get
    fullName: EventStore.Core.Messages.UserManagementMessage.Get
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.UserManagementMessage.Get
    name: UserManagementMessage.Get
    nameWithType: UserManagementMessage.Get
    fullName: EventStore.Core.Messages.UserManagementMessage.Get
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.GetAll}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.GetAll}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<UserManagementMessage.GetAll>
  nameWithType: IHandle<UserManagementMessage.GetAll>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.GetAll>
  nameWithType.vb: IHandle(Of UserManagementMessage.GetAll)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.GetAll)
  name.vb: IHandle(Of UserManagementMessage.GetAll)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.UserManagementMessage.GetAll
    name: UserManagementMessage.GetAll
    nameWithType: UserManagementMessage.GetAll
    fullName: EventStore.Core.Messages.UserManagementMessage.GetAll
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.UserManagementMessage.GetAll
    name: UserManagementMessage.GetAll
    nameWithType: UserManagementMessage.GetAll
    fullName: EventStore.Core.Messages.UserManagementMessage.GetAll
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Create}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Create}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<UserManagementMessage.Create>
  nameWithType: IHandle<UserManagementMessage.Create>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Create>
  nameWithType.vb: IHandle(Of UserManagementMessage.Create)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Create)
  name.vb: IHandle(Of UserManagementMessage.Create)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.UserManagementMessage.Create
    name: UserManagementMessage.Create
    nameWithType: UserManagementMessage.Create
    fullName: EventStore.Core.Messages.UserManagementMessage.Create
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.UserManagementMessage.Create
    name: UserManagementMessage.Create
    nameWithType: UserManagementMessage.Create
    fullName: EventStore.Core.Messages.UserManagementMessage.Create
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Update}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Update}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<UserManagementMessage.Update>
  nameWithType: IHandle<UserManagementMessage.Update>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Update>
  nameWithType.vb: IHandle(Of UserManagementMessage.Update)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Update)
  name.vb: IHandle(Of UserManagementMessage.Update)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.UserManagementMessage.Update
    name: UserManagementMessage.Update
    nameWithType: UserManagementMessage.Update
    fullName: EventStore.Core.Messages.UserManagementMessage.Update
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.UserManagementMessage.Update
    name: UserManagementMessage.Update
    nameWithType: UserManagementMessage.Update
    fullName: EventStore.Core.Messages.UserManagementMessage.Update
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Enable}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Enable}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<UserManagementMessage.Enable>
  nameWithType: IHandle<UserManagementMessage.Enable>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Enable>
  nameWithType.vb: IHandle(Of UserManagementMessage.Enable)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Enable)
  name.vb: IHandle(Of UserManagementMessage.Enable)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.UserManagementMessage.Enable
    name: UserManagementMessage.Enable
    nameWithType: UserManagementMessage.Enable
    fullName: EventStore.Core.Messages.UserManagementMessage.Enable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.UserManagementMessage.Enable
    name: UserManagementMessage.Enable
    nameWithType: UserManagementMessage.Enable
    fullName: EventStore.Core.Messages.UserManagementMessage.Enable
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Disable}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Disable}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<UserManagementMessage.Disable>
  nameWithType: IHandle<UserManagementMessage.Disable>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Disable>
  nameWithType.vb: IHandle(Of UserManagementMessage.Disable)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Disable)
  name.vb: IHandle(Of UserManagementMessage.Disable)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.UserManagementMessage.Disable
    name: UserManagementMessage.Disable
    nameWithType: UserManagementMessage.Disable
    fullName: EventStore.Core.Messages.UserManagementMessage.Disable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.UserManagementMessage.Disable
    name: UserManagementMessage.Disable
    nameWithType: UserManagementMessage.Disable
    fullName: EventStore.Core.Messages.UserManagementMessage.Disable
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ResetPassword}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ResetPassword}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<UserManagementMessage.ResetPassword>
  nameWithType: IHandle<UserManagementMessage.ResetPassword>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.ResetPassword>
  nameWithType.vb: IHandle(Of UserManagementMessage.ResetPassword)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.ResetPassword)
  name.vb: IHandle(Of UserManagementMessage.ResetPassword)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.UserManagementMessage.ResetPassword
    name: UserManagementMessage.ResetPassword
    nameWithType: UserManagementMessage.ResetPassword
    fullName: EventStore.Core.Messages.UserManagementMessage.ResetPassword
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.UserManagementMessage.ResetPassword
    name: UserManagementMessage.ResetPassword
    nameWithType: UserManagementMessage.ResetPassword
    fullName: EventStore.Core.Messages.UserManagementMessage.ResetPassword
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ChangePassword}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ChangePassword}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<UserManagementMessage.ChangePassword>
  nameWithType: IHandle<UserManagementMessage.ChangePassword>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.ChangePassword>
  nameWithType.vb: IHandle(Of UserManagementMessage.ChangePassword)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.ChangePassword)
  name.vb: IHandle(Of UserManagementMessage.ChangePassword)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.UserManagementMessage.ChangePassword
    name: UserManagementMessage.ChangePassword
    nameWithType: UserManagementMessage.ChangePassword
    fullName: EventStore.Core.Messages.UserManagementMessage.ChangePassword
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.UserManagementMessage.ChangePassword
    name: UserManagementMessage.ChangePassword
    nameWithType: UserManagementMessage.ChangePassword
    fullName: EventStore.Core.Messages.UserManagementMessage.ChangePassword
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Delete}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Delete}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<UserManagementMessage.Delete>
  nameWithType: IHandle<UserManagementMessage.Delete>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Delete>
  nameWithType.vb: IHandle(Of UserManagementMessage.Delete)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Delete)
  name.vb: IHandle(Of UserManagementMessage.Delete)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.UserManagementMessage.Delete
    name: UserManagementMessage.Delete
    nameWithType: UserManagementMessage.Delete
    fullName: EventStore.Core.Messages.UserManagementMessage.Delete
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.UserManagementMessage.Delete
    name: UserManagementMessage.Delete
    nameWithType: UserManagementMessage.Delete
    fullName: EventStore.Core.Messages.UserManagementMessage.Delete
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeMaster}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeMaster}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.BecomeMaster>
  nameWithType: IHandle<SystemMessage.BecomeMaster>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.BecomeMaster>
  nameWithType.vb: IHandle(Of SystemMessage.BecomeMaster)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.BecomeMaster)
  name.vb: IHandle(Of SystemMessage.BecomeMaster)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.BecomeMaster
    name: SystemMessage.BecomeMaster
    nameWithType: SystemMessage.BecomeMaster
    fullName: EventStore.Core.Messages.SystemMessage.BecomeMaster
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.BecomeMaster
    name: SystemMessage.BecomeMaster
    nameWithType: SystemMessage.BecomeMaster
    fullName: EventStore.Core.Messages.SystemMessage.BecomeMaster
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.UserManagement.UserManagementService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<UserManagementService>()
  nameWithType: ProtobufExtensions.Serialize<UserManagementService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.UserManagement.UserManagementService>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of UserManagementService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.UserManagement.UserManagementService)()
  name.vb: Serialize(Of UserManagementService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<UserManagementService>
    nameWithType: ProtobufExtensions.Serialize<UserManagementService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.UserManagement.UserManagementService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of UserManagementService)
    nameWithType: ProtobufExtensions.Serialize(Of UserManagementService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.UserManagement.UserManagementService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.UserManagement.UserManagementService.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<UserManagementService>()
  nameWithType: ProtobufExtensions.SerializeToArray<UserManagementService>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.UserManagement.UserManagementService>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of UserManagementService)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.UserManagement.UserManagementService)()
  name.vb: SerializeToArray(Of UserManagementService)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<UserManagementService>
    nameWithType: ProtobufExtensions.SerializeToArray<UserManagementService>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.UserManagement.UserManagementService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of UserManagementService)
    nameWithType: ProtobufExtensions.SerializeToArray(Of UserManagementService)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.UserManagement.UserManagementService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Core.Services.UserManagement.UserManagementService.#ctor*
  commentId: Overload:EventStore.Core.Services.UserManagement.UserManagementService.#ctor
  name: UserManagementService
  nameWithType: UserManagementService.UserManagementService
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.UserManagementService
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.Helpers.IODispatcher
  commentId: T:EventStore.Core.Helpers.IODispatcher
  parent: EventStore.Core.Helpers
  name: IODispatcher
  nameWithType: IODispatcher
  fullName: EventStore.Core.Helpers.IODispatcher
- uid: EventStore.Core.Authentication.PasswordHashAlgorithm
  commentId: T:EventStore.Core.Authentication.PasswordHashAlgorithm
  parent: EventStore.Core.Authentication
  name: PasswordHashAlgorithm
  nameWithType: PasswordHashAlgorithm
  fullName: EventStore.Core.Authentication.PasswordHashAlgorithm
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Helpers
  commentId: N:EventStore.Core.Helpers
  name: EventStore.Core.Helpers
  nameWithType: EventStore.Core.Helpers
  fullName: EventStore.Core.Helpers
- uid: EventStore.Core.Authentication
  commentId: N:EventStore.Core.Authentication
  name: EventStore.Core.Authentication
  nameWithType: EventStore.Core.Authentication
  fullName: EventStore.Core.Authentication
- uid: EventStore.Core.Services.UserManagement.UserManagementService.Handle*
  commentId: Overload:EventStore.Core.Services.UserManagement.UserManagementService.Handle
  name: Handle
  nameWithType: UserManagementService.Handle
  fullName: EventStore.Core.Services.UserManagement.UserManagementService.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Create}.Handle(EventStore.Core.Messages.UserManagementMessage.Create)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Create}.Handle(EventStore.Core.Messages.UserManagementMessage.Create)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Create}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(UserManagementMessage.Create)
  nameWithType: IHandle<UserManagementMessage.Create>.Handle(UserManagementMessage.Create)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Create>.Handle(EventStore.Core.Messages.UserManagementMessage.Create)
  nameWithType.vb: IHandle(Of UserManagementMessage.Create).Handle(UserManagementMessage.Create)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Create).Handle(EventStore.Core.Messages.UserManagementMessage.Create)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<UserManagementMessage.Create>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Create>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.Create
    name: UserManagementMessage.Create
    nameWithType: UserManagementMessage.Create
    fullName: EventStore.Core.Messages.UserManagementMessage.Create
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of UserManagementMessage.Create).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Create).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.Create
    name: UserManagementMessage.Create
    nameWithType: UserManagementMessage.Create
    fullName: EventStore.Core.Messages.UserManagementMessage.Create
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.UserManagementMessage.Create
  commentId: T:EventStore.Core.Messages.UserManagementMessage.Create
  parent: EventStore.Core.Messages
  name: UserManagementMessage.Create
  nameWithType: UserManagementMessage.Create
  fullName: EventStore.Core.Messages.UserManagementMessage.Create
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Update}.Handle(EventStore.Core.Messages.UserManagementMessage.Update)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Update}.Handle(EventStore.Core.Messages.UserManagementMessage.Update)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Update}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(UserManagementMessage.Update)
  nameWithType: IHandle<UserManagementMessage.Update>.Handle(UserManagementMessage.Update)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Update>.Handle(EventStore.Core.Messages.UserManagementMessage.Update)
  nameWithType.vb: IHandle(Of UserManagementMessage.Update).Handle(UserManagementMessage.Update)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Update).Handle(EventStore.Core.Messages.UserManagementMessage.Update)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<UserManagementMessage.Update>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Update>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.Update
    name: UserManagementMessage.Update
    nameWithType: UserManagementMessage.Update
    fullName: EventStore.Core.Messages.UserManagementMessage.Update
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of UserManagementMessage.Update).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Update).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.Update
    name: UserManagementMessage.Update
    nameWithType: UserManagementMessage.Update
    fullName: EventStore.Core.Messages.UserManagementMessage.Update
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.UserManagementMessage.Update
  commentId: T:EventStore.Core.Messages.UserManagementMessage.Update
  parent: EventStore.Core.Messages
  name: UserManagementMessage.Update
  nameWithType: UserManagementMessage.Update
  fullName: EventStore.Core.Messages.UserManagementMessage.Update
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Enable}.Handle(EventStore.Core.Messages.UserManagementMessage.Enable)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Enable}.Handle(EventStore.Core.Messages.UserManagementMessage.Enable)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Enable}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(UserManagementMessage.Enable)
  nameWithType: IHandle<UserManagementMessage.Enable>.Handle(UserManagementMessage.Enable)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Enable>.Handle(EventStore.Core.Messages.UserManagementMessage.Enable)
  nameWithType.vb: IHandle(Of UserManagementMessage.Enable).Handle(UserManagementMessage.Enable)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Enable).Handle(EventStore.Core.Messages.UserManagementMessage.Enable)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<UserManagementMessage.Enable>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Enable>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.Enable
    name: UserManagementMessage.Enable
    nameWithType: UserManagementMessage.Enable
    fullName: EventStore.Core.Messages.UserManagementMessage.Enable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of UserManagementMessage.Enable).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Enable).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.Enable
    name: UserManagementMessage.Enable
    nameWithType: UserManagementMessage.Enable
    fullName: EventStore.Core.Messages.UserManagementMessage.Enable
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.UserManagementMessage.Enable
  commentId: T:EventStore.Core.Messages.UserManagementMessage.Enable
  parent: EventStore.Core.Messages
  name: UserManagementMessage.Enable
  nameWithType: UserManagementMessage.Enable
  fullName: EventStore.Core.Messages.UserManagementMessage.Enable
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Disable}.Handle(EventStore.Core.Messages.UserManagementMessage.Disable)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Disable}.Handle(EventStore.Core.Messages.UserManagementMessage.Disable)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Disable}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(UserManagementMessage.Disable)
  nameWithType: IHandle<UserManagementMessage.Disable>.Handle(UserManagementMessage.Disable)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Disable>.Handle(EventStore.Core.Messages.UserManagementMessage.Disable)
  nameWithType.vb: IHandle(Of UserManagementMessage.Disable).Handle(UserManagementMessage.Disable)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Disable).Handle(EventStore.Core.Messages.UserManagementMessage.Disable)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<UserManagementMessage.Disable>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Disable>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.Disable
    name: UserManagementMessage.Disable
    nameWithType: UserManagementMessage.Disable
    fullName: EventStore.Core.Messages.UserManagementMessage.Disable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of UserManagementMessage.Disable).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Disable).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.Disable
    name: UserManagementMessage.Disable
    nameWithType: UserManagementMessage.Disable
    fullName: EventStore.Core.Messages.UserManagementMessage.Disable
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.UserManagementMessage.Disable
  commentId: T:EventStore.Core.Messages.UserManagementMessage.Disable
  parent: EventStore.Core.Messages
  name: UserManagementMessage.Disable
  nameWithType: UserManagementMessage.Disable
  fullName: EventStore.Core.Messages.UserManagementMessage.Disable
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ResetPassword}.Handle(EventStore.Core.Messages.UserManagementMessage.ResetPassword)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ResetPassword}.Handle(EventStore.Core.Messages.UserManagementMessage.ResetPassword)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ResetPassword}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(UserManagementMessage.ResetPassword)
  nameWithType: IHandle<UserManagementMessage.ResetPassword>.Handle(UserManagementMessage.ResetPassword)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.ResetPassword>.Handle(EventStore.Core.Messages.UserManagementMessage.ResetPassword)
  nameWithType.vb: IHandle(Of UserManagementMessage.ResetPassword).Handle(UserManagementMessage.ResetPassword)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.ResetPassword).Handle(EventStore.Core.Messages.UserManagementMessage.ResetPassword)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<UserManagementMessage.ResetPassword>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.ResetPassword>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.ResetPassword
    name: UserManagementMessage.ResetPassword
    nameWithType: UserManagementMessage.ResetPassword
    fullName: EventStore.Core.Messages.UserManagementMessage.ResetPassword
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of UserManagementMessage.ResetPassword).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.ResetPassword).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.ResetPassword
    name: UserManagementMessage.ResetPassword
    nameWithType: UserManagementMessage.ResetPassword
    fullName: EventStore.Core.Messages.UserManagementMessage.ResetPassword
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.UserManagementMessage.ResetPassword
  commentId: T:EventStore.Core.Messages.UserManagementMessage.ResetPassword
  parent: EventStore.Core.Messages
  name: UserManagementMessage.ResetPassword
  nameWithType: UserManagementMessage.ResetPassword
  fullName: EventStore.Core.Messages.UserManagementMessage.ResetPassword
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ChangePassword}.Handle(EventStore.Core.Messages.UserManagementMessage.ChangePassword)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ChangePassword}.Handle(EventStore.Core.Messages.UserManagementMessage.ChangePassword)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.ChangePassword}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(UserManagementMessage.ChangePassword)
  nameWithType: IHandle<UserManagementMessage.ChangePassword>.Handle(UserManagementMessage.ChangePassword)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.ChangePassword>.Handle(EventStore.Core.Messages.UserManagementMessage.ChangePassword)
  nameWithType.vb: IHandle(Of UserManagementMessage.ChangePassword).Handle(UserManagementMessage.ChangePassword)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.ChangePassword).Handle(EventStore.Core.Messages.UserManagementMessage.ChangePassword)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<UserManagementMessage.ChangePassword>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.ChangePassword>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.ChangePassword
    name: UserManagementMessage.ChangePassword
    nameWithType: UserManagementMessage.ChangePassword
    fullName: EventStore.Core.Messages.UserManagementMessage.ChangePassword
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of UserManagementMessage.ChangePassword).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.ChangePassword).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.ChangePassword
    name: UserManagementMessage.ChangePassword
    nameWithType: UserManagementMessage.ChangePassword
    fullName: EventStore.Core.Messages.UserManagementMessage.ChangePassword
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.UserManagementMessage.ChangePassword
  commentId: T:EventStore.Core.Messages.UserManagementMessage.ChangePassword
  parent: EventStore.Core.Messages
  name: UserManagementMessage.ChangePassword
  nameWithType: UserManagementMessage.ChangePassword
  fullName: EventStore.Core.Messages.UserManagementMessage.ChangePassword
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Delete}.Handle(EventStore.Core.Messages.UserManagementMessage.Delete)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Delete}.Handle(EventStore.Core.Messages.UserManagementMessage.Delete)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Delete}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(UserManagementMessage.Delete)
  nameWithType: IHandle<UserManagementMessage.Delete>.Handle(UserManagementMessage.Delete)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Delete>.Handle(EventStore.Core.Messages.UserManagementMessage.Delete)
  nameWithType.vb: IHandle(Of UserManagementMessage.Delete).Handle(UserManagementMessage.Delete)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Delete).Handle(EventStore.Core.Messages.UserManagementMessage.Delete)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<UserManagementMessage.Delete>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Delete>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.Delete
    name: UserManagementMessage.Delete
    nameWithType: UserManagementMessage.Delete
    fullName: EventStore.Core.Messages.UserManagementMessage.Delete
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of UserManagementMessage.Delete).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Delete).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.Delete
    name: UserManagementMessage.Delete
    nameWithType: UserManagementMessage.Delete
    fullName: EventStore.Core.Messages.UserManagementMessage.Delete
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.UserManagementMessage.Delete
  commentId: T:EventStore.Core.Messages.UserManagementMessage.Delete
  parent: EventStore.Core.Messages
  name: UserManagementMessage.Delete
  nameWithType: UserManagementMessage.Delete
  fullName: EventStore.Core.Messages.UserManagementMessage.Delete
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Get}.Handle(EventStore.Core.Messages.UserManagementMessage.Get)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Get}.Handle(EventStore.Core.Messages.UserManagementMessage.Get)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.Get}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(UserManagementMessage.Get)
  nameWithType: IHandle<UserManagementMessage.Get>.Handle(UserManagementMessage.Get)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Get>.Handle(EventStore.Core.Messages.UserManagementMessage.Get)
  nameWithType.vb: IHandle(Of UserManagementMessage.Get).Handle(UserManagementMessage.Get)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Get).Handle(EventStore.Core.Messages.UserManagementMessage.Get)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<UserManagementMessage.Get>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.Get>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.Get
    name: UserManagementMessage.Get
    nameWithType: UserManagementMessage.Get
    fullName: EventStore.Core.Messages.UserManagementMessage.Get
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of UserManagementMessage.Get).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.Get).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.Get
    name: UserManagementMessage.Get
    nameWithType: UserManagementMessage.Get
    fullName: EventStore.Core.Messages.UserManagementMessage.Get
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.UserManagementMessage.Get
  commentId: T:EventStore.Core.Messages.UserManagementMessage.Get
  parent: EventStore.Core.Messages
  name: UserManagementMessage.Get
  nameWithType: UserManagementMessage.Get
  fullName: EventStore.Core.Messages.UserManagementMessage.Get
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.GetAll}.Handle(EventStore.Core.Messages.UserManagementMessage.GetAll)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.GetAll}.Handle(EventStore.Core.Messages.UserManagementMessage.GetAll)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.UserManagementMessage.GetAll}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(UserManagementMessage.GetAll)
  nameWithType: IHandle<UserManagementMessage.GetAll>.Handle(UserManagementMessage.GetAll)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.GetAll>.Handle(EventStore.Core.Messages.UserManagementMessage.GetAll)
  nameWithType.vb: IHandle(Of UserManagementMessage.GetAll).Handle(UserManagementMessage.GetAll)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.GetAll).Handle(EventStore.Core.Messages.UserManagementMessage.GetAll)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<UserManagementMessage.GetAll>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.UserManagementMessage.GetAll>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.GetAll
    name: UserManagementMessage.GetAll
    nameWithType: UserManagementMessage.GetAll
    fullName: EventStore.Core.Messages.UserManagementMessage.GetAll
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of UserManagementMessage.GetAll).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.UserManagementMessage.GetAll).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.UserManagementMessage.GetAll
    name: UserManagementMessage.GetAll
    nameWithType: UserManagementMessage.GetAll
    fullName: EventStore.Core.Messages.UserManagementMessage.GetAll
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.UserManagementMessage.GetAll
  commentId: T:EventStore.Core.Messages.UserManagementMessage.GetAll
  parent: EventStore.Core.Messages
  name: UserManagementMessage.GetAll
  nameWithType: UserManagementMessage.GetAll
  fullName: EventStore.Core.Messages.UserManagementMessage.GetAll
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeMaster}.Handle(EventStore.Core.Messages.SystemMessage.BecomeMaster)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeMaster}.Handle(EventStore.Core.Messages.SystemMessage.BecomeMaster)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.BecomeMaster}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.BecomeMaster)
  nameWithType: IHandle<SystemMessage.BecomeMaster>.Handle(SystemMessage.BecomeMaster)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.BecomeMaster>.Handle(EventStore.Core.Messages.SystemMessage.BecomeMaster)
  nameWithType.vb: IHandle(Of SystemMessage.BecomeMaster).Handle(SystemMessage.BecomeMaster)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.BecomeMaster).Handle(EventStore.Core.Messages.SystemMessage.BecomeMaster)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.BecomeMaster>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.BecomeMaster>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.BecomeMaster
    name: SystemMessage.BecomeMaster
    nameWithType: SystemMessage.BecomeMaster
    fullName: EventStore.Core.Messages.SystemMessage.BecomeMaster
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.BecomeMaster).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.BecomeMaster).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.BecomeMaster
    name: SystemMessage.BecomeMaster
    nameWithType: SystemMessage.BecomeMaster
    fullName: EventStore.Core.Messages.SystemMessage.BecomeMaster
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.BecomeMaster
  commentId: T:EventStore.Core.Messages.SystemMessage.BecomeMaster
  parent: EventStore.Core.Messages
  name: SystemMessage.BecomeMaster
  nameWithType: SystemMessage.BecomeMaster
  fullName: EventStore.Core.Messages.SystemMessage.BecomeMaster

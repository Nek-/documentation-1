### YamlMime:ManagedReference
items:
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1
  commentId: T:EventStore.Core.Services.VNode.VNodeFSMHandling`1
  id: VNodeFSMHandling`1
  parent: EventStore.Core.Services.VNode
  children:
  - EventStore.Core.Services.VNode.VNodeFSMHandling`1.#ctor(EventStore.Core.Services.VNode.VNodeFSMStatesDefinition,System.Boolean)
  - EventStore.Core.Services.VNode.VNodeFSMHandling`1.Do(System.Action{`0})
  - EventStore.Core.Services.VNode.VNodeFSMHandling`1.Do(System.Action{EventStore.Core.Data.VNodeState,`0})
  - EventStore.Core.Services.VNode.VNodeFSMHandling`1.ForwardTo(EventStore.Core.Bus.IPublisher)
  - EventStore.Core.Services.VNode.VNodeFSMHandling`1.Ignore
  - EventStore.Core.Services.VNode.VNodeFSMHandling`1.Throw
  langs:
  - csharp
  - vb
  name: VNodeFSMHandling<TMessage>
  nameWithType: VNodeFSMHandling<TMessage>
  fullName: EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>
  type: Class
  source:
    id: VNodeFSMHandling
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/VNode/VNodeFSMHandling.cs
    startLine: 7
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: >-
      public class VNodeFSMHandling<TMessage>
          where TMessage : Message
    typeParameters:
    - id: TMessage
    content.vb: Public Class VNodeFSMHandling(Of TMessage As Message)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.Services.VNode.VNodeFSMHandling`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.Services.VNode.VNodeFSMHandling`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  nameWithType.vb: VNodeFSMHandling(Of TMessage)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage)
  name.vb: VNodeFSMHandling(Of TMessage)
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1.#ctor(EventStore.Core.Services.VNode.VNodeFSMStatesDefinition,System.Boolean)
  commentId: M:EventStore.Core.Services.VNode.VNodeFSMHandling`1.#ctor(EventStore.Core.Services.VNode.VNodeFSMStatesDefinition,System.Boolean)
  id: '#ctor(EventStore.Core.Services.VNode.VNodeFSMStatesDefinition,System.Boolean)'
  parent: EventStore.Core.Services.VNode.VNodeFSMHandling`1
  langs:
  - csharp
  - vb
  name: VNodeFSMHandling(VNodeFSMStatesDefinition, Boolean)
  nameWithType: VNodeFSMHandling<TMessage>.VNodeFSMHandling(VNodeFSMStatesDefinition, Boolean)
  fullName: EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>.VNodeFSMHandling(EventStore.Core.Services.VNode.VNodeFSMStatesDefinition, System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/VNode/VNodeFSMHandling.cs
    startLine: 11
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: public VNodeFSMHandling(VNodeFSMStatesDefinition stateDef, bool defaultHandler = false)
    parameters:
    - id: stateDef
      type: EventStore.Core.Services.VNode.VNodeFSMStatesDefinition
    - id: defaultHandler
      type: System.Boolean
    content.vb: Public Sub New(stateDef As VNodeFSMStatesDefinition, defaultHandler As Boolean = False)
  overload: EventStore.Core.Services.VNode.VNodeFSMHandling`1.#ctor*
  nameWithType.vb: VNodeFSMHandling(Of TMessage).VNodeFSMHandling(VNodeFSMStatesDefinition, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage).VNodeFSMHandling(EventStore.Core.Services.VNode.VNodeFSMStatesDefinition, System.Boolean)
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1.Do(System.Action{EventStore.Core.Data.VNodeState,`0})
  commentId: M:EventStore.Core.Services.VNode.VNodeFSMHandling`1.Do(System.Action{EventStore.Core.Data.VNodeState,`0})
  id: Do(System.Action{EventStore.Core.Data.VNodeState,`0})
  parent: EventStore.Core.Services.VNode.VNodeFSMHandling`1
  langs:
  - csharp
  - vb
  name: Do(Action<VNodeState, TMessage>)
  nameWithType: VNodeFSMHandling<TMessage>.Do(Action<VNodeState, TMessage>)
  fullName: EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>.Do(System.Action<EventStore.Core.Data.VNodeState, TMessage>)
  type: Method
  source:
    id: Do
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/VNode/VNodeFSMHandling.cs
    startLine: 16
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: public VNodeFSMStatesDefinition Do(Action<VNodeState, TMessage> handler)
    parameters:
    - id: handler
      type: System.Action{EventStore.Core.Data.VNodeState,{TMessage}}
    return:
      type: EventStore.Core.Services.VNode.VNodeFSMStatesDefinition
    content.vb: Public Function Do(handler As Action(Of VNodeState, TMessage)) As VNodeFSMStatesDefinition
  overload: EventStore.Core.Services.VNode.VNodeFSMHandling`1.Do*
  nameWithType.vb: VNodeFSMHandling(Of TMessage).Do(Action(Of VNodeState, TMessage))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage).Do(System.Action(Of EventStore.Core.Data.VNodeState, TMessage))
  name.vb: Do(Action(Of VNodeState, TMessage))
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1.Do(System.Action{`0})
  commentId: M:EventStore.Core.Services.VNode.VNodeFSMHandling`1.Do(System.Action{`0})
  id: Do(System.Action{`0})
  parent: EventStore.Core.Services.VNode.VNodeFSMHandling`1
  langs:
  - csharp
  - vb
  name: Do(Action<TMessage>)
  nameWithType: VNodeFSMHandling<TMessage>.Do(Action<TMessage>)
  fullName: EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>.Do(System.Action<TMessage>)
  type: Method
  source:
    id: Do
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/VNode/VNodeFSMHandling.cs
    startLine: 27
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: public VNodeFSMStatesDefinition Do(Action<TMessage> handler)
    parameters:
    - id: handler
      type: System.Action{{TMessage}}
    return:
      type: EventStore.Core.Services.VNode.VNodeFSMStatesDefinition
    content.vb: Public Function Do(handler As Action(Of TMessage)) As VNodeFSMStatesDefinition
  overload: EventStore.Core.Services.VNode.VNodeFSMHandling`1.Do*
  nameWithType.vb: VNodeFSMHandling(Of TMessage).Do(Action(Of TMessage))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage).Do(System.Action(Of TMessage))
  name.vb: Do(Action(Of TMessage))
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1.Ignore
  commentId: M:EventStore.Core.Services.VNode.VNodeFSMHandling`1.Ignore
  id: Ignore
  parent: EventStore.Core.Services.VNode.VNodeFSMHandling`1
  langs:
  - csharp
  - vb
  name: Ignore()
  nameWithType: VNodeFSMHandling<TMessage>.Ignore()
  fullName: EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>.Ignore()
  type: Method
  source:
    id: Ignore
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/VNode/VNodeFSMHandling.cs
    startLine: 38
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: public VNodeFSMStatesDefinition Ignore()
    return:
      type: EventStore.Core.Services.VNode.VNodeFSMStatesDefinition
    content.vb: Public Function Ignore As VNodeFSMStatesDefinition
  overload: EventStore.Core.Services.VNode.VNodeFSMHandling`1.Ignore*
  nameWithType.vb: VNodeFSMHandling(Of TMessage).Ignore()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage).Ignore()
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1.Throw
  commentId: M:EventStore.Core.Services.VNode.VNodeFSMHandling`1.Throw
  id: Throw
  parent: EventStore.Core.Services.VNode.VNodeFSMHandling`1
  langs:
  - csharp
  - vb
  name: Throw()
  nameWithType: VNodeFSMHandling<TMessage>.Throw()
  fullName: EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>.Throw()
  type: Method
  source:
    id: Throw
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/VNode/VNodeFSMHandling.cs
    startLine: 49
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: public VNodeFSMStatesDefinition Throw()
    return:
      type: EventStore.Core.Services.VNode.VNodeFSMStatesDefinition
    content.vb: Public Function Throw As VNodeFSMStatesDefinition
  overload: EventStore.Core.Services.VNode.VNodeFSMHandling`1.Throw*
  nameWithType.vb: VNodeFSMHandling(Of TMessage).Throw()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage).Throw()
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1.ForwardTo(EventStore.Core.Bus.IPublisher)
  commentId: M:EventStore.Core.Services.VNode.VNodeFSMHandling`1.ForwardTo(EventStore.Core.Bus.IPublisher)
  id: ForwardTo(EventStore.Core.Bus.IPublisher)
  parent: EventStore.Core.Services.VNode.VNodeFSMHandling`1
  langs:
  - csharp
  - vb
  name: ForwardTo(IPublisher)
  nameWithType: VNodeFSMHandling<TMessage>.ForwardTo(IPublisher)
  fullName: EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>.ForwardTo(EventStore.Core.Bus.IPublisher)
  type: Method
  source:
    id: ForwardTo
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/Services/VNode/VNodeFSMHandling.cs
    startLine: 60
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.Services.VNode
  syntax:
    content: public VNodeFSMStatesDefinition ForwardTo(IPublisher publisher)
    parameters:
    - id: publisher
      type: EventStore.Core.Bus.IPublisher
    return:
      type: EventStore.Core.Services.VNode.VNodeFSMStatesDefinition
    content.vb: Public Function ForwardTo(publisher As IPublisher) As VNodeFSMStatesDefinition
  overload: EventStore.Core.Services.VNode.VNodeFSMHandling`1.ForwardTo*
  nameWithType.vb: VNodeFSMHandling(Of TMessage).ForwardTo(IPublisher)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage).ForwardTo(EventStore.Core.Bus.IPublisher)
references:
- uid: EventStore.Core.Services.VNode
  commentId: N:EventStore.Core.Services.VNode
  name: EventStore.Core.Services.VNode
  nameWithType: EventStore.Core.Services.VNode
  fullName: EventStore.Core.Services.VNode
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<VNodeFSMHandling<TMessage>>()
  nameWithType: ProtobufExtensions.Serialize<VNodeFSMHandling<TMessage>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of VNodeFSMHandling(Of TMessage))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage))()
  name.vb: Serialize(Of VNodeFSMHandling(Of TMessage))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<VNodeFSMHandling<TMessage>>
    nameWithType: ProtobufExtensions.Serialize<VNodeFSMHandling<TMessage>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of VNodeFSMHandling(Of TMessage))
    nameWithType: ProtobufExtensions.Serialize(Of VNodeFSMHandling(Of TMessage))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<VNodeFSMHandling<TMessage>>()
  nameWithType: ProtobufExtensions.SerializeToArray<VNodeFSMHandling<TMessage>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of VNodeFSMHandling(Of TMessage))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage))()
  name.vb: SerializeToArray(Of VNodeFSMHandling(Of TMessage))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<VNodeFSMHandling<TMessage>>
    nameWithType: ProtobufExtensions.SerializeToArray<VNodeFSMHandling<TMessage>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of VNodeFSMHandling(Of TMessage))
    nameWithType: ProtobufExtensions.SerializeToArray(Of VNodeFSMHandling(Of TMessage))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1.#ctor*
  commentId: Overload:EventStore.Core.Services.VNode.VNodeFSMHandling`1.#ctor
  name: VNodeFSMHandling
  nameWithType: VNodeFSMHandling<TMessage>.VNodeFSMHandling
  fullName: EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>.VNodeFSMHandling
  nameWithType.vb: VNodeFSMHandling(Of TMessage).VNodeFSMHandling
  fullName.vb: EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage).VNodeFSMHandling
- uid: EventStore.Core.Services.VNode.VNodeFSMStatesDefinition
  commentId: T:EventStore.Core.Services.VNode.VNodeFSMStatesDefinition
  parent: EventStore.Core.Services.VNode
  name: VNodeFSMStatesDefinition
  nameWithType: VNodeFSMStatesDefinition
  fullName: EventStore.Core.Services.VNode.VNodeFSMStatesDefinition
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1.Do*
  commentId: Overload:EventStore.Core.Services.VNode.VNodeFSMHandling`1.Do
  name: Do
  nameWithType: VNodeFSMHandling<TMessage>.Do
  fullName: EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>.Do
  nameWithType.vb: VNodeFSMHandling(Of TMessage).Do
  fullName.vb: EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage).Do
- uid: System.Action{EventStore.Core.Data.VNodeState,{TMessage}}
  commentId: T:System.Action{EventStore.Core.Data.VNodeState,`0}
  parent: System
  definition: System.Action`2
  name: Action<VNodeState, TMessage>
  nameWithType: Action<VNodeState, TMessage>
  fullName: System.Action<EventStore.Core.Data.VNodeState, TMessage>
  nameWithType.vb: Action(Of VNodeState, TMessage)
  fullName.vb: System.Action(Of EventStore.Core.Data.VNodeState, TMessage)
  name.vb: Action(Of VNodeState, TMessage)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Data.VNodeState
    name: VNodeState
    nameWithType: VNodeState
    fullName: EventStore.Core.Data.VNodeState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Data.VNodeState
    name: VNodeState
    nameWithType: VNodeState
    fullName: EventStore.Core.Data.VNodeState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TMessage}}
  commentId: T:System.Action{`0}
  parent: System
  definition: System.Action`1
  name: Action<TMessage>
  nameWithType: Action<TMessage>
  fullName: System.Action<TMessage>
  nameWithType.vb: Action(Of TMessage)
  fullName.vb: System.Action(Of TMessage)
  name.vb: Action(Of TMessage)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1.Ignore*
  commentId: Overload:EventStore.Core.Services.VNode.VNodeFSMHandling`1.Ignore
  name: Ignore
  nameWithType: VNodeFSMHandling<TMessage>.Ignore
  fullName: EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>.Ignore
  nameWithType.vb: VNodeFSMHandling(Of TMessage).Ignore
  fullName.vb: EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage).Ignore
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1.Throw*
  commentId: Overload:EventStore.Core.Services.VNode.VNodeFSMHandling`1.Throw
  name: Throw
  nameWithType: VNodeFSMHandling<TMessage>.Throw
  fullName: EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>.Throw
  nameWithType.vb: VNodeFSMHandling(Of TMessage).Throw
  fullName.vb: EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage).Throw
- uid: EventStore.Core.Services.VNode.VNodeFSMHandling`1.ForwardTo*
  commentId: Overload:EventStore.Core.Services.VNode.VNodeFSMHandling`1.ForwardTo
  name: ForwardTo
  nameWithType: VNodeFSMHandling<TMessage>.ForwardTo
  fullName: EventStore.Core.Services.VNode.VNodeFSMHandling<TMessage>.ForwardTo
  nameWithType.vb: VNodeFSMHandling(Of TMessage).ForwardTo
  fullName.vb: EventStore.Core.Services.VNode.VNodeFSMHandling(Of TMessage).ForwardTo
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus

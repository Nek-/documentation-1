### YamlMime:ManagedReference
items:
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord
  commentId: T:EventStore.Core.TransactionLog.LogRecords.EpochRecord
  id: EpochRecord
  parent: EventStore.Core.TransactionLog.LogRecords
  children:
  - EventStore.Core.TransactionLog.LogRecords.EpochRecord.#ctor(System.Int64,System.Int32,Guid,System.Int64,DateTime)
  - EventStore.Core.TransactionLog.LogRecords.EpochRecord.AsSerialized
  - EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochId
  - EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochNumber
  - EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochPosition
  - EventStore.Core.TransactionLog.LogRecords.EpochRecord.PrevEpochPosition
  - EventStore.Core.TransactionLog.LogRecords.EpochRecord.TimeStamp
  - EventStore.Core.TransactionLog.LogRecords.EpochRecord.ToString
  langs:
  - csharp
  - vb
  name: EpochRecord
  nameWithType: EpochRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord
  type: Class
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EpochRecord
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
    startLine: 22
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: 'public class EpochRecord : object'
    content.vb: >-
      Public Class EpochRecord
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.TransactionLog.LogRecords.EpochRecord.EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString
  - EventStore.Core.TransactionLog.LogRecords.EpochRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.TransactionLog.LogRecords.EpochRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochPosition
  commentId: F:EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochPosition
  id: EpochPosition
  parent: EventStore.Core.TransactionLog.LogRecords.EpochRecord
  langs:
  - csharp
  - vb
  name: EpochPosition
  nameWithType: EpochRecord.EpochPosition
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochPosition
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EpochPosition
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
    startLine: 23
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly long EpochPosition
    return:
      type: System.Int64
    content.vb: Public ReadOnly EpochPosition As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochNumber
  commentId: F:EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochNumber
  id: EpochNumber
  parent: EventStore.Core.TransactionLog.LogRecords.EpochRecord
  langs:
  - csharp
  - vb
  name: EpochNumber
  nameWithType: EpochRecord.EpochNumber
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochNumber
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EpochNumber
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
    startLine: 24
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly int EpochNumber
    return:
      type: System.Int32
    content.vb: Public ReadOnly EpochNumber As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochId
  commentId: F:EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochId
  id: EpochId
  parent: EventStore.Core.TransactionLog.LogRecords.EpochRecord
  langs:
  - csharp
  - vb
  name: EpochId
  nameWithType: EpochRecord.EpochId
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EpochId
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
    startLine: 25
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly Guid EpochId
    return:
      type: Guid
    content.vb: Public ReadOnly EpochId As Guid
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.PrevEpochPosition
  commentId: F:EventStore.Core.TransactionLog.LogRecords.EpochRecord.PrevEpochPosition
  id: PrevEpochPosition
  parent: EventStore.Core.TransactionLog.LogRecords.EpochRecord
  langs:
  - csharp
  - vb
  name: PrevEpochPosition
  nameWithType: EpochRecord.PrevEpochPosition
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord.PrevEpochPosition
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: PrevEpochPosition
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
    startLine: 27
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly long PrevEpochPosition
    return:
      type: System.Int64
    content.vb: Public ReadOnly PrevEpochPosition As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.TimeStamp
  commentId: F:EventStore.Core.TransactionLog.LogRecords.EpochRecord.TimeStamp
  id: TimeStamp
  parent: EventStore.Core.TransactionLog.LogRecords.EpochRecord
  langs:
  - csharp
  - vb
  name: TimeStamp
  nameWithType: EpochRecord.TimeStamp
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord.TimeStamp
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TimeStamp
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
    startLine: 28
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly DateTime TimeStamp
    return:
      type: DateTime
    content.vb: Public ReadOnly TimeStamp As DateTime
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.#ctor(System.Int64,System.Int32,Guid,System.Int64,DateTime)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.EpochRecord.#ctor(System.Int64,System.Int32,Guid,System.Int64,DateTime)
  id: '#ctor(System.Int64,System.Int32,Guid,System.Int64,DateTime)'
  parent: EventStore.Core.TransactionLog.LogRecords.EpochRecord
  langs:
  - csharp
  - vb
  name: EpochRecord(Int64, Int32, Guid, Int64, DateTime)
  nameWithType: EpochRecord.EpochRecord(Int64, Int32, Guid, Int64, DateTime)
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochRecord(System.Int64, System.Int32, Guid, System.Int64, DateTime)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
    startLine: 30
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public EpochRecord(long epochPosition, int epochNumber, Guid epochId, long prevEpochPosition, DateTime timeStamp)
    parameters:
    - id: epochPosition
      type: System.Int64
    - id: epochNumber
      type: System.Int32
    - id: epochId
      type: Guid
    - id: prevEpochPosition
      type: System.Int64
    - id: timeStamp
      type: DateTime
    content.vb: Public Sub New(epochPosition As Long, epochNumber As Integer, epochId As Guid, prevEpochPosition As Long, timeStamp As DateTime)
  overload: EventStore.Core.TransactionLog.LogRecords.EpochRecord.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.AsSerialized
  commentId: M:EventStore.Core.TransactionLog.LogRecords.EpochRecord.AsSerialized
  id: AsSerialized
  parent: EventStore.Core.TransactionLog.LogRecords.EpochRecord
  langs:
  - csharp
  - vb
  name: AsSerialized()
  nameWithType: EpochRecord.AsSerialized()
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord.AsSerialized()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AsSerialized
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
    startLine: 43
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public byte[] AsSerialized()
    return:
      type: System.Byte[]
    content.vb: Public Function AsSerialized As Byte()
  overload: EventStore.Core.TransactionLog.LogRecords.EpochRecord.AsSerialized*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.ToString
  commentId: M:EventStore.Core.TransactionLog.LogRecords.EpochRecord.ToString
  id: ToString
  parent: EventStore.Core.TransactionLog.LogRecords.EpochRecord
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: EpochRecord.ToString()
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord.ToString()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ToString
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
    startLine: 47
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: EventStore.Core.TransactionLog.LogRecords.EpochRecord.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: EventStore.Core.TransactionLog.LogRecords
  commentId: N:EventStore.Core.TransactionLog.LogRecords
  name: EventStore.Core.TransactionLog.LogRecords
  nameWithType: EventStore.Core.TransactionLog.LogRecords
  fullName: EventStore.Core.TransactionLog.LogRecords
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString
  commentId: M:EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString(EventStore.Core.TransactionLog.LogRecords.EpochRecord)
  parent: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions
  definition: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString(EventStore.Core.TransactionLog.LogRecords.EpochRecord)
  name: AsString()
  nameWithType: EpochRecordExtensions.AsString()
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString()
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString
    name: AsString
    nameWithType: EpochRecordExtensions.AsString
    fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString
    name: AsString
    nameWithType: EpochRecordExtensions.AsString
    fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<EpochRecord>()
  nameWithType: ProtobufExtensions.Serialize<EpochRecord>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.LogRecords.EpochRecord>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of EpochRecord)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.LogRecords.EpochRecord)()
  name.vb: Serialize(Of EpochRecord)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<EpochRecord>
    nameWithType: ProtobufExtensions.Serialize<EpochRecord>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.LogRecords.EpochRecord>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of EpochRecord)
    nameWithType: ProtobufExtensions.Serialize(Of EpochRecord)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.LogRecords.EpochRecord)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<EpochRecord>()
  nameWithType: ProtobufExtensions.SerializeToArray<EpochRecord>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.LogRecords.EpochRecord>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of EpochRecord)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.LogRecords.EpochRecord)()
  name.vb: SerializeToArray(Of EpochRecord)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<EpochRecord>
    nameWithType: ProtobufExtensions.SerializeToArray<EpochRecord>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.LogRecords.EpochRecord>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of EpochRecord)
    nameWithType: ProtobufExtensions.SerializeToArray(Of EpochRecord)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.LogRecords.EpochRecord)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString(EventStore.Core.TransactionLog.LogRecords.EpochRecord)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString(EventStore.Core.TransactionLog.LogRecords.EpochRecord)
  name: AsString(EpochRecord)
  nameWithType: EpochRecordExtensions.AsString(EpochRecord)
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString(EventStore.Core.TransactionLog.LogRecords.EpochRecord)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString(EventStore.Core.TransactionLog.LogRecords.EpochRecord)
    name: AsString
    nameWithType: EpochRecordExtensions.AsString
    fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord
    name: EpochRecord
    nameWithType: EpochRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString(EventStore.Core.TransactionLog.LogRecords.EpochRecord)
    name: AsString
    nameWithType: EpochRecordExtensions.AsString
    fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions.AsString
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord
    name: EpochRecord
    nameWithType: EpochRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions
  commentId: T:EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions
  parent: EventStore.Core.TransactionLog.LogRecords
  name: EpochRecordExtensions
  nameWithType: EpochRecordExtensions
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecordExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.#ctor*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.EpochRecord.#ctor
  name: EpochRecord
  nameWithType: EpochRecord.EpochRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord.EpochRecord
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.AsSerialized*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.EpochRecord.AsSerialized
  name: AsSerialized
  nameWithType: EpochRecord.AsSerialized
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord.AsSerialized
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord.ToString*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.EpochRecord.ToString
  name: ToString
  nameWithType: EpochRecord.ToString
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String

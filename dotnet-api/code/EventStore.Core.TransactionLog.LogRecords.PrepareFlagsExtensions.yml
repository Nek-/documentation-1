### YamlMime:ManagedReference
items:
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions
  commentId: T:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions
  id: PrepareFlagsExtensions
  parent: EventStore.Core.TransactionLog.LogRecords
  children:
  - EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  - EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  - EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  langs:
  - csharp
  - vb
  name: PrepareFlagsExtensions
  nameWithType: PrepareFlagsExtensions
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions
  type: Class
  source:
    id: PrepareFlagsExtensions
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 26
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public static class PrepareFlagsExtensions
    content.vb: Public Module PrepareFlagsExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  id: HasAllOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  isExtensionMethod: true
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions
  langs:
  - csharp
  - vb
  name: HasAllOf(PrepareFlags, PrepareFlags)
  nameWithType: PrepareFlagsExtensions.HasAllOf(PrepareFlags, PrepareFlags)
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags, EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  type: Method
  source:
    id: HasAllOf
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 27
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public static bool HasAllOf(this PrepareFlags flags, PrepareFlags flagSet)
    parameters:
    - id: flags
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    - id: flagSet
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasAllOf(flags As PrepareFlags, flagSet As PrepareFlags) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  id: HasAnyOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  isExtensionMethod: true
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions
  langs:
  - csharp
  - vb
  name: HasAnyOf(PrepareFlags, PrepareFlags)
  nameWithType: PrepareFlagsExtensions.HasAnyOf(PrepareFlags, PrepareFlags)
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags, EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  type: Method
  source:
    id: HasAnyOf
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 31
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public static bool HasAnyOf(this PrepareFlags flags, PrepareFlags flagSet)
    parameters:
    - id: flags
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    - id: flagSet
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasAnyOf(flags As PrepareFlags, flagSet As PrepareFlags) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  id: HasNoneOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  isExtensionMethod: true
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions
  langs:
  - csharp
  - vb
  name: HasNoneOf(PrepareFlags, PrepareFlags)
  nameWithType: PrepareFlagsExtensions.HasNoneOf(PrepareFlags, PrepareFlags)
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags, EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  type: Method
  source:
    id: HasNoneOf
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 35
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public static bool HasNoneOf(this PrepareFlags flags, PrepareFlags flagSet)
    parameters:
    - id: flags
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    - id: flagSet
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasNoneOf(flags As PrepareFlags, flagSet As PrepareFlags) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EventStore.Core.TransactionLog.LogRecords
  commentId: N:EventStore.Core.TransactionLog.LogRecords
  name: EventStore.Core.TransactionLog.LogRecords
  nameWithType: EventStore.Core.TransactionLog.LogRecords
  fullName: EventStore.Core.TransactionLog.LogRecords
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf
  name: HasAllOf
  nameWithType: PrepareFlagsExtensions.HasAllOf
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  commentId: T:EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  parent: EventStore.Core.TransactionLog.LogRecords
  name: PrepareFlags
  nameWithType: PrepareFlags
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf
  name: HasAnyOf
  nameWithType: PrepareFlagsExtensions.HasAnyOf
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf
  name: HasNoneOf
  nameWithType: PrepareFlagsExtensions.HasNoneOf
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions
  commentId: T:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions
  id: PrepareFlagsExtensions
  parent: EventStore.Core.TransactionLog.LogRecords
  children:
  - EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  - EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  - EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  langs:
  - csharp
  - vb
  name: PrepareFlagsExtensions
  nameWithType: PrepareFlagsExtensions
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions
  type: Class
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: PrepareFlagsExtensions
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 28
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: 'public static class PrepareFlagsExtensions : object'
    content.vb: >-
      Public Module PrepareFlagsExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  id: HasAllOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  isExtensionMethod: true
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions
  langs:
  - csharp
  - vb
  name: HasAllOf(PrepareFlags, PrepareFlags)
  nameWithType: PrepareFlagsExtensions.HasAllOf(PrepareFlags, PrepareFlags)
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags, EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: HasAllOf
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 30
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public static bool HasAllOf(this PrepareFlags flags, PrepareFlags flagSet)
    parameters:
    - id: flags
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    - id: flagSet
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasAllOf(flags As PrepareFlags, flagSet As PrepareFlags) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  id: HasAnyOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  isExtensionMethod: true
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions
  langs:
  - csharp
  - vb
  name: HasAnyOf(PrepareFlags, PrepareFlags)
  nameWithType: PrepareFlagsExtensions.HasAnyOf(PrepareFlags, PrepareFlags)
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags, EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: HasAnyOf
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 35
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public static bool HasAnyOf(this PrepareFlags flags, PrepareFlags flagSet)
    parameters:
    - id: flags
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    - id: flagSet
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasAnyOf(flags As PrepareFlags, flagSet As PrepareFlags) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  id: HasNoneOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  isExtensionMethod: true
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions
  langs:
  - csharp
  - vb
  name: HasNoneOf(PrepareFlags, PrepareFlags)
  nameWithType: PrepareFlagsExtensions.HasNoneOf(PrepareFlags, PrepareFlags)
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf(EventStore.Core.TransactionLog.LogRecords.PrepareFlags, EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: HasNoneOf
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 40
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public static bool HasNoneOf(this PrepareFlags flags, PrepareFlags flagSet)
    parameters:
    - id: flags
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    - id: flagSet
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasNoneOf(flags As PrepareFlags, flagSet As PrepareFlags) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EventStore.Core.TransactionLog.LogRecords
  commentId: N:EventStore.Core.TransactionLog.LogRecords
  name: EventStore.Core.TransactionLog.LogRecords
  nameWithType: EventStore.Core.TransactionLog.LogRecords
  fullName: EventStore.Core.TransactionLog.LogRecords
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf
  name: HasAllOf
  nameWithType: PrepareFlagsExtensions.HasAllOf
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAllOf
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  commentId: T:EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  parent: EventStore.Core.TransactionLog.LogRecords
  name: PrepareFlags
  nameWithType: PrepareFlags
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf
  name: HasAnyOf
  nameWithType: PrepareFlagsExtensions.HasAnyOf
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasAnyOf
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf
  name: HasNoneOf
  nameWithType: PrepareFlagsExtensions.HasNoneOf
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlagsExtensions.HasNoneOf

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  commentId: T:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  id: PrepareLogRecord
  parent: EventStore.Core.TransactionLog.LogRecords
  children:
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.#ctor(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,DateTime,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Byte)
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.CorrelationId
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Data
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equals(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equals(System.Object)
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventId
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventStreamId
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventType
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.ExpectedVersion
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Flags
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.GetHashCode
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.InMemorySize
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Metadata
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.op_Equality(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.op_Inequality(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.PrepareRecordVersion
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.TimeStamp
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.ToString
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.TransactionOffset
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.TransactionPosition
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.WriteTo(BinaryWriter)
  langs:
  - csharp
  - vb
  name: PrepareLogRecord
  nameWithType: PrepareLogRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  type: Class
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: PrepareLogRecord
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 46
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: 'public class PrepareLogRecord : LogRecord, IEquatable<PrepareLogRecord>'
    content.vb: >-
      Public Class PrepareLogRecord
          Inherits LogRecord
          Implements IEquatable(Of PrepareLogRecord)
  inheritance:
  - System.Object
  - EventStore.Core.TransactionLog.LogRecords.LogRecord
  implements:
  - IEquatable{EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}
  inheritedMembers:
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.NoData
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.RecordType
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.Version
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.LogPosition
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition(System.Int64,System.Int32)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition(System.Int64,System.Int32)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom(BinaryReader)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime})
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit(System.Int64,Guid,System.Int64,System.Int64)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64,Guid,Guid,System.String,System.Int64,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime},System.Nullable{EventStore.Core.TransactionLog.LogRecords.PrepareFlags})
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin(System.Int64,Guid,System.String,System.Int64)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.String,System.Byte[],System.Byte[],System.Boolean)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd(System.Int64,Guid,Guid,System.Int64,System.String)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone(System.Int64,Guid,Guid,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.PrepareRecordVersion
  commentId: F:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.PrepareRecordVersion
  id: PrepareRecordVersion
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: PrepareRecordVersion
  nameWithType: PrepareLogRecord.PrepareRecordVersion
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.PrepareRecordVersion
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: PrepareRecordVersion
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 48
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public const byte PrepareRecordVersion = null
    return:
      type: System.Byte
    content.vb: Public Const PrepareRecordVersion As Byte = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Flags
  commentId: F:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Flags
  id: Flags
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: Flags
  nameWithType: PrepareLogRecord.Flags
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Flags
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Flags
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 50
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly PrepareFlags Flags
    return:
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    content.vb: Public ReadOnly Flags As PrepareFlags
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.TransactionPosition
  commentId: F:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.TransactionPosition
  id: TransactionPosition
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: TransactionPosition
  nameWithType: PrepareLogRecord.TransactionPosition
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.TransactionPosition
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TransactionPosition
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 51
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly long TransactionPosition
    return:
      type: System.Int64
    content.vb: Public ReadOnly TransactionPosition As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.TransactionOffset
  commentId: F:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.TransactionOffset
  id: TransactionOffset
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: TransactionOffset
  nameWithType: PrepareLogRecord.TransactionOffset
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.TransactionOffset
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TransactionOffset
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 52
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly int TransactionOffset
    return:
      type: System.Int32
    content.vb: Public ReadOnly TransactionOffset As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.ExpectedVersion
  commentId: F:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.ExpectedVersion
  id: ExpectedVersion
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: ExpectedVersion
  nameWithType: PrepareLogRecord.ExpectedVersion
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.ExpectedVersion
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ExpectedVersion
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 53
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly long ExpectedVersion
    return:
      type: System.Int64
    content.vb: Public ReadOnly ExpectedVersion As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventStreamId
  commentId: F:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventStreamId
  id: EventStreamId
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: EventStreamId
  nameWithType: PrepareLogRecord.EventStreamId
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventStreamId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EventStreamId
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 54
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly string EventStreamId
    return:
      type: System.String
    content.vb: Public ReadOnly EventStreamId As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventId
  commentId: F:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventId
  id: EventId
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: EventId
  nameWithType: PrepareLogRecord.EventId
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EventId
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 56
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly Guid EventId
    return:
      type: Guid
    content.vb: Public ReadOnly EventId As Guid
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.CorrelationId
  commentId: F:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.CorrelationId
  id: CorrelationId
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: CorrelationId
  nameWithType: PrepareLogRecord.CorrelationId
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.CorrelationId
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: CorrelationId
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 57
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly Guid CorrelationId
    return:
      type: Guid
    content.vb: Public ReadOnly CorrelationId As Guid
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.TimeStamp
  commentId: F:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.TimeStamp
  id: TimeStamp
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: TimeStamp
  nameWithType: PrepareLogRecord.TimeStamp
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.TimeStamp
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TimeStamp
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 58
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly DateTime TimeStamp
    return:
      type: DateTime
    content.vb: Public ReadOnly TimeStamp As DateTime
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventType
  commentId: F:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventType
  id: EventType
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: EventType
  nameWithType: PrepareLogRecord.EventType
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventType
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EventType
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 59
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly string EventType
    return:
      type: System.String
    content.vb: Public ReadOnly EventType As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Data
  commentId: F:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Data
  id: Data
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: PrepareLogRecord.Data
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Data
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Data
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 60
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly byte[] Data
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Data As Byte()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Metadata
  commentId: F:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Metadata
  id: Metadata
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: PrepareLogRecord.Metadata
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Metadata
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Metadata
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 61
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly byte[] Metadata
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Metadata As Byte()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.InMemorySize
  commentId: P:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.InMemorySize
  id: InMemorySize
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: InMemorySize
  nameWithType: PrepareLogRecord.InMemorySize
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.InMemorySize
  type: Property
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: InMemorySize
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 63
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public long InMemorySize { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property InMemorySize As Long
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.InMemorySize*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.#ctor(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,DateTime,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Byte)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.#ctor(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,DateTime,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Byte)
  id: '#ctor(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,DateTime,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Byte)'
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: PrepareLogRecord(Int64, Guid, Guid, Int64, Int32, String, Int64, DateTime, PrepareFlags, String, Byte[], Byte[], Byte)
  nameWithType: PrepareLogRecord.PrepareLogRecord(Int64, Guid, Guid, Int64, Int32, String, Int64, DateTime, PrepareFlags, String, Byte[], Byte[], Byte)
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.PrepareLogRecord(System.Int64, Guid, Guid, System.Int64, System.Int32, System.String, System.Int64, DateTime, EventStore.Core.TransactionLog.LogRecords.PrepareFlags, System.String, System.Byte[], System.Byte[], System.Byte)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 85
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public PrepareLogRecord(long logPosition, Guid correlationId, Guid eventId, long transactionPosition, int transactionOffset, string eventStreamId, long expectedVersion, DateTime timeStamp, PrepareFlags flags, string eventType, byte[] data, byte[] metadata, byte prepareRecordVersion = null)
    parameters:
    - id: logPosition
      type: System.Int64
    - id: correlationId
      type: Guid
    - id: eventId
      type: Guid
    - id: transactionPosition
      type: System.Int64
    - id: transactionOffset
      type: System.Int32
    - id: eventStreamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: timeStamp
      type: DateTime
    - id: flags
      type: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    - id: eventType
      type: System.String
    - id: data
      type: System.Byte[]
    - id: metadata
      type: System.Byte[]
    - id: prepareRecordVersion
      type: System.Byte
    content.vb: Public Sub New(logPosition As Long, correlationId As Guid, eventId As Guid, transactionPosition As Long, transactionOffset As Integer, eventStreamId As String, expectedVersion As Long, timeStamp As DateTime, flags As PrepareFlags, eventType As String, data As Byte(), metadata As Byte(), prepareRecordVersion As Byte = Nothing)
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.#ctor*
  nameWithType.vb: PrepareLogRecord.PrepareLogRecord(Int64, Guid, Guid, Int64, Int32, String, Int64, DateTime, PrepareFlags, String, Byte(), Byte(), Byte)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.PrepareLogRecord(System.Int64, Guid, Guid, System.Int64, System.Int32, System.String, System.Int64, DateTime, EventStore.Core.TransactionLog.LogRecords.PrepareFlags, System.String, System.Byte(), System.Byte(), System.Byte)
  name.vb: PrepareLogRecord(Int64, Guid, Guid, Int64, Int32, String, Int64, DateTime, PrepareFlags, String, Byte(), Byte(), Byte)
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.WriteTo(BinaryWriter)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.WriteTo(BinaryWriter)
  id: WriteTo(BinaryWriter)
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: WriteTo(BinaryWriter)
  nameWithType: PrepareLogRecord.WriteTo(BinaryWriter)
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.WriteTo(BinaryWriter)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: WriteTo
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 155
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public override void WriteTo(BinaryWriter writer)
    parameters:
    - id: writer
      type: BinaryWriter
    content.vb: Public Overrides Sub WriteTo(writer As BinaryWriter)
  overridden: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo(BinaryWriter)
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.WriteTo*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equals(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equals(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  id: Equals(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: Equals(PrepareLogRecord)
  nameWithType: PrepareLogRecord.Equals(PrepareLogRecord)
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equals(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Equals
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 183
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public bool Equals(PrepareLogRecord other)
    parameters:
    - id: other
      type: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As PrepareLogRecord) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equals(System.Object)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equals(System.Object)
  id: Equals(System.Object)
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: PrepareLogRecord.Equals(Object)
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Equals
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 202
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.GetHashCode
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.GetHashCode
  id: GetHashCode
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: PrepareLogRecord.GetHashCode()
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.GetHashCode()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetHashCode
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 210
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.op_Equality(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.op_Equality(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  id: op_Equality(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: Equality(PrepareLogRecord, PrepareLogRecord)
  nameWithType: PrepareLogRecord.Equality(PrepareLogRecord, PrepareLogRecord)
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equality(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  type: Operator
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: op_Equality
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 231
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public static bool operator ==(PrepareLogRecord left, PrepareLogRecord right)
    parameters:
    - id: left
      type: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    - id: right
      type: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As PrepareLogRecord, right As PrepareLogRecord) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.op_Inequality(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.op_Inequality(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  id: op_Inequality(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord,EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: Inequality(PrepareLogRecord, PrepareLogRecord)
  nameWithType: PrepareLogRecord.Inequality(PrepareLogRecord, PrepareLogRecord)
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Inequality(EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord, EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  type: Operator
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: op_Inequality
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 236
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public static bool operator !=(PrepareLogRecord left, PrepareLogRecord right)
    parameters:
    - id: left
      type: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    - id: right
      type: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As PrepareLogRecord, right As PrepareLogRecord) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.ToString
  commentId: M:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.ToString
  id: ToString
  parent: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: PrepareLogRecord.ToString()
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.ToString()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ToString
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
    startLine: 241
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: EventStore.Core.TransactionLog.LogRecords
  commentId: N:EventStore.Core.TransactionLog.LogRecords
  name: EventStore.Core.TransactionLog.LogRecords
  nameWithType: EventStore.Core.TransactionLog.LogRecords
  fullName: EventStore.Core.TransactionLog.LogRecords
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord
  commentId: T:EventStore.Core.TransactionLog.LogRecords.LogRecord
  parent: EventStore.Core.TransactionLog.LogRecords
  name: LogRecord
  nameWithType: LogRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord
- uid: IEquatable{EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}
  commentId: '!:IEquatable{EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord}'
  definition: IEquatable`1
  name: IEquatable<PrepareLogRecord>
  nameWithType: IEquatable<PrepareLogRecord>
  fullName: IEquatable<EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>
  nameWithType.vb: IEquatable(Of PrepareLogRecord)
  fullName.vb: IEquatable(Of EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  name.vb: IEquatable(Of PrepareLogRecord)
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
    name: PrepareLogRecord
    nameWithType: PrepareLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.NoData
  commentId: F:EventStore.Core.TransactionLog.LogRecords.LogRecord.NoData
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  name: NoData
  nameWithType: LogRecord.NoData
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.NoData
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.RecordType
  commentId: F:EventStore.Core.TransactionLog.LogRecords.LogRecord.RecordType
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  name: RecordType
  nameWithType: LogRecord.RecordType
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.RecordType
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Version
  commentId: F:EventStore.Core.TransactionLog.LogRecords.LogRecord.Version
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  name: Version
  nameWithType: LogRecord.Version
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Version
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.LogPosition
  commentId: F:EventStore.Core.TransactionLog.LogRecords.LogRecord.LogPosition
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  name: LogPosition
  nameWithType: LogRecord.LogPosition
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.LogPosition
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition(System.Int64,System.Int32)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition(System.Int64,System.Int32)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: GetNextLogPosition(Int64, Int32)
  nameWithType: LogRecord.GetNextLogPosition(Int64, Int32)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition(System.Int64, System.Int32)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition(System.Int64,System.Int32)
    name: GetNextLogPosition
    nameWithType: LogRecord.GetNextLogPosition
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition(System.Int64,System.Int32)
    name: GetNextLogPosition
    nameWithType: LogRecord.GetNextLogPosition
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition(System.Int64,System.Int32)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition(System.Int64,System.Int32)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: GetPrevLogPosition(Int64, Int32)
  nameWithType: LogRecord.GetPrevLogPosition(Int64, Int32)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition(System.Int64, System.Int32)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition(System.Int64,System.Int32)
    name: GetPrevLogPosition
    nameWithType: LogRecord.GetPrevLogPosition
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition(System.Int64,System.Int32)
    name: GetPrevLogPosition
    nameWithType: LogRecord.GetPrevLogPosition
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom(BinaryReader)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom(BinaryReader)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: ReadFrom(BinaryReader)
  nameWithType: LogRecord.ReadFrom(BinaryReader)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom(BinaryReader)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom(BinaryReader)
    name: ReadFrom
    nameWithType: LogRecord.ReadFrom
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: BinaryReader
    name: BinaryReader
    nameWithType: BinaryReader
    fullName: BinaryReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom(BinaryReader)
    name: ReadFrom
    nameWithType: LogRecord.ReadFrom
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: BinaryReader
    name: BinaryReader
    nameWithType: BinaryReader
    fullName: BinaryReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime})
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime})
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: Prepare(Int64, Guid, Guid, Int64, Int32, String, Int64, PrepareFlags, String, Byte[], Byte[], Nullable<DateTime>)
  nameWithType: LogRecord.Prepare(Int64, Guid, Guid, Int64, Int32, String, Int64, PrepareFlags, String, Byte[], Byte[], Nullable<DateTime>)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64, Guid, Guid, System.Int64, System.Int32, System.String, System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareFlags, System.String, System.Byte[], System.Byte[], System.Nullable<DateTime>)
  nameWithType.vb: LogRecord.Prepare(Int64, Guid, Guid, Int64, Int32, String, Int64, PrepareFlags, String, Byte(), Byte(), Nullable(Of DateTime))
  fullName.vb: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64, Guid, Guid, System.Int64, System.Int32, System.String, System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareFlags, System.String, System.Byte(), System.Byte(), System.Nullable(Of DateTime))
  name.vb: Prepare(Int64, Guid, Guid, Int64, Int32, String, Int64, PrepareFlags, String, Byte(), Byte(), Nullable(Of DateTime))
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime})
    name: Prepare
    nameWithType: LogRecord.Prepare
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    name: PrepareFlags
    nameWithType: PrepareFlags
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime})
    name: Prepare
    nameWithType: LogRecord.Prepare
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    name: PrepareFlags
    nameWithType: PrepareFlags
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit(System.Int64,Guid,System.Int64,System.Int64)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit(System.Int64,Guid,System.Int64,System.Int64)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: Commit(Int64, Guid, Int64, Int64)
  nameWithType: LogRecord.Commit(Int64, Guid, Int64, Int64)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit(System.Int64, Guid, System.Int64, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit(System.Int64,Guid,System.Int64,System.Int64)
    name: Commit
    nameWithType: LogRecord.Commit
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit(System.Int64,Guid,System.Int64,System.Int64)
    name: Commit
    nameWithType: LogRecord.Commit
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64,Guid,Guid,System.String,System.Int64,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime},System.Nullable{EventStore.Core.TransactionLog.LogRecords.PrepareFlags})
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64,Guid,Guid,System.String,System.Int64,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime},System.Nullable{EventStore.Core.TransactionLog.LogRecords.PrepareFlags})
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: SingleWrite(Int64, Guid, Guid, String, Int64, String, Byte[], Byte[], Nullable<DateTime>, Nullable<PrepareFlags>)
  nameWithType: LogRecord.SingleWrite(Int64, Guid, Guid, String, Int64, String, Byte[], Byte[], Nullable<DateTime>, Nullable<PrepareFlags>)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64, Guid, Guid, System.String, System.Int64, System.String, System.Byte[], System.Byte[], System.Nullable<DateTime>, System.Nullable<EventStore.Core.TransactionLog.LogRecords.PrepareFlags>)
  nameWithType.vb: LogRecord.SingleWrite(Int64, Guid, Guid, String, Int64, String, Byte(), Byte(), Nullable(Of DateTime), Nullable(Of PrepareFlags))
  fullName.vb: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64, Guid, Guid, System.String, System.Int64, System.String, System.Byte(), System.Byte(), System.Nullable(Of DateTime), System.Nullable(Of EventStore.Core.TransactionLog.LogRecords.PrepareFlags))
  name.vb: SingleWrite(Int64, Guid, Guid, String, Int64, String, Byte(), Byte(), Nullable(Of DateTime), Nullable(Of PrepareFlags))
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64,Guid,Guid,System.String,System.Int64,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime},System.Nullable{EventStore.Core.TransactionLog.LogRecords.PrepareFlags})
    name: SingleWrite
    nameWithType: LogRecord.SingleWrite
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    name: PrepareFlags
    nameWithType: PrepareFlags
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64,Guid,Guid,System.String,System.Int64,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime},System.Nullable{EventStore.Core.TransactionLog.LogRecords.PrepareFlags})
    name: SingleWrite
    nameWithType: LogRecord.SingleWrite
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    name: PrepareFlags
    nameWithType: PrepareFlags
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin(System.Int64,Guid,System.String,System.Int64)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin(System.Int64,Guid,System.String,System.Int64)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: TransactionBegin(Int64, Guid, String, Int64)
  nameWithType: LogRecord.TransactionBegin(Int64, Guid, String, Int64)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin(System.Int64, Guid, System.String, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin(System.Int64,Guid,System.String,System.Int64)
    name: TransactionBegin
    nameWithType: LogRecord.TransactionBegin
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin(System.Int64,Guid,System.String,System.Int64)
    name: TransactionBegin
    nameWithType: LogRecord.TransactionBegin
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.String,System.Byte[],System.Byte[],System.Boolean)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.String,System.Byte[],System.Byte[],System.Boolean)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: TransactionWrite(Int64, Guid, Guid, Int64, Int32, String, String, Byte[], Byte[], Boolean)
  nameWithType: LogRecord.TransactionWrite(Int64, Guid, Guid, Int64, Int32, String, String, Byte[], Byte[], Boolean)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64, Guid, Guid, System.Int64, System.Int32, System.String, System.String, System.Byte[], System.Byte[], System.Boolean)
  nameWithType.vb: LogRecord.TransactionWrite(Int64, Guid, Guid, Int64, Int32, String, String, Byte(), Byte(), Boolean)
  fullName.vb: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64, Guid, Guid, System.Int64, System.Int32, System.String, System.String, System.Byte(), System.Byte(), System.Boolean)
  name.vb: TransactionWrite(Int64, Guid, Guid, Int64, Int32, String, String, Byte(), Byte(), Boolean)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.String,System.Byte[],System.Byte[],System.Boolean)
    name: TransactionWrite
    nameWithType: LogRecord.TransactionWrite
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.String,System.Byte[],System.Byte[],System.Boolean)
    name: TransactionWrite
    nameWithType: LogRecord.TransactionWrite
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd(System.Int64,Guid,Guid,System.Int64,System.String)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd(System.Int64,Guid,Guid,System.Int64,System.String)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: TransactionEnd(Int64, Guid, Guid, Int64, String)
  nameWithType: LogRecord.TransactionEnd(Int64, Guid, Guid, Int64, String)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd(System.Int64, Guid, Guid, System.Int64, System.String)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd(System.Int64,Guid,Guid,System.Int64,System.String)
    name: TransactionEnd
    nameWithType: LogRecord.TransactionEnd
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd(System.Int64,Guid,Guid,System.Int64,System.String)
    name: TransactionEnd
    nameWithType: LogRecord.TransactionEnd
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone(System.Int64,Guid,Guid,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone(System.Int64,Guid,Guid,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: DeleteTombstone(Int64, Guid, Guid, String, Int64, PrepareFlags)
  nameWithType: LogRecord.DeleteTombstone(Int64, Guid, Guid, String, Int64, PrepareFlags)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone(System.Int64, Guid, Guid, System.String, System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone(System.Int64,Guid,Guid,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
    name: DeleteTombstone
    nameWithType: LogRecord.DeleteTombstone
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    name: PrepareFlags
    nameWithType: PrepareFlags
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone(System.Int64,Guid,Guid,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
    name: DeleteTombstone
    nameWithType: LogRecord.DeleteTombstone
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    name: PrepareFlags
    nameWithType: PrepareFlags
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  name: GetSizeWithLengthPrefixAndSuffix()
  nameWithType: LogRecord.GetSizeWithLengthPrefixAndSuffix()
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix()
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
    name: GetSizeWithLengthPrefixAndSuffix
    nameWithType: LogRecord.GetSizeWithLengthPrefixAndSuffix
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
    name: GetSizeWithLengthPrefixAndSuffix
    nameWithType: LogRecord.GetSizeWithLengthPrefixAndSuffix
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<PrepareLogRecord>()
  nameWithType: ProtobufExtensions.Serialize<PrepareLogRecord>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of PrepareLogRecord)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)()
  name.vb: Serialize(Of PrepareLogRecord)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<PrepareLogRecord>
    nameWithType: ProtobufExtensions.Serialize<PrepareLogRecord>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of PrepareLogRecord)
    nameWithType: ProtobufExtensions.Serialize(Of PrepareLogRecord)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<PrepareLogRecord>()
  nameWithType: ProtobufExtensions.SerializeToArray<PrepareLogRecord>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of PrepareLogRecord)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)()
  name.vb: SerializeToArray(Of PrepareLogRecord)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<PrepareLogRecord>
    nameWithType: ProtobufExtensions.SerializeToArray<PrepareLogRecord>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of PrepareLogRecord)
    nameWithType: ProtobufExtensions.SerializeToArray(Of PrepareLogRecord)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: IEquatable`1
  isExternal: true
  name: IEquatable<>
  nameWithType: IEquatable<>
  fullName: IEquatable<>
  nameWithType.vb: IEquatable(Of )
  fullName.vb: IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  commentId: T:EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  parent: EventStore.Core.TransactionLog.LogRecords
  name: PrepareFlags
  nameWithType: PrepareFlags
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.InMemorySize*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.InMemorySize
  name: InMemorySize
  nameWithType: PrepareLogRecord.InMemorySize
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.InMemorySize
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.#ctor*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.#ctor
  name: PrepareLogRecord
  nameWithType: PrepareLogRecord.PrepareLogRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.PrepareLogRecord
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo(BinaryWriter)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo(BinaryWriter)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: WriteTo(BinaryWriter)
  nameWithType: LogRecord.WriteTo(BinaryWriter)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo(BinaryWriter)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo(BinaryWriter)
    name: WriteTo
    nameWithType: LogRecord.WriteTo
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BinaryWriter
    name: BinaryWriter
    nameWithType: BinaryWriter
    fullName: BinaryWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo(BinaryWriter)
    name: WriteTo
    nameWithType: LogRecord.WriteTo
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BinaryWriter
    name: BinaryWriter
    nameWithType: BinaryWriter
    fullName: BinaryWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.WriteTo*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.WriteTo
  name: WriteTo
  nameWithType: PrepareLogRecord.WriteTo
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.WriteTo
- uid: BinaryWriter
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: BinaryWriter
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equals*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equals
  name: Equals
  nameWithType: PrepareLogRecord.Equals
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equals
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  commentId: T:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
  parent: EventStore.Core.TransactionLog.LogRecords
  name: PrepareLogRecord
  nameWithType: PrepareLogRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.GetHashCode*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.GetHashCode
  name: GetHashCode
  nameWithType: PrepareLogRecord.GetHashCode
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.GetHashCode
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.op_Equality*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.op_Equality
  name: Equality
  nameWithType: PrepareLogRecord.Equality
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Equality
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.op_Inequality*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.op_Inequality
  name: Inequality
  nameWithType: PrepareLogRecord.Inequality
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.Inequality
- uid: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.ToString*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.ToString
  name: ToString
  nameWithType: PrepareLogRecord.ToString
  fullName: EventStore.Core.TransactionLog.LogRecords.PrepareLogRecord.ToString

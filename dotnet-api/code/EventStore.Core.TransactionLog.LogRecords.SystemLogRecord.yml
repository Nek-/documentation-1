### YamlMime:ManagedReference
items:
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  commentId: T:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  id: SystemLogRecord
  parent: EventStore.Core.TransactionLog.LogRecords
  children:
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.#ctor(System.Int64,DateTime,EventStore.Core.TransactionLog.LogRecords.SystemRecordType,EventStore.Core.TransactionLog.LogRecords.SystemRecordSerialization,System.Byte[])
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Data
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equals(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equals(System.Object)
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetEpochRecord
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetHashCode
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.op_Equality(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord,EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.op_Inequality(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord,EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Reserved
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemRecordSerialization
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemRecordType
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemRecordVersion
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.TimeStamp
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.ToString
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.WriteTo(BinaryWriter)
  langs:
  - csharp
  - vb
  name: SystemLogRecord
  nameWithType: SystemLogRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  type: Class
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SystemLogRecord
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 20
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: 'public class SystemLogRecord : LogRecord, IEquatable<SystemLogRecord>'
    content.vb: >-
      Public Class SystemLogRecord
          Inherits LogRecord
          Implements IEquatable(Of SystemLogRecord)
  inheritance:
  - System.Object
  - EventStore.Core.TransactionLog.LogRecords.LogRecord
  implements:
  - IEquatable{EventStore.Core.TransactionLog.LogRecords.SystemLogRecord}
  inheritedMembers:
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.NoData
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.RecordType
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.Version
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.LogPosition
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition(System.Int64,System.Int32)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition(System.Int64,System.Int32)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom(BinaryReader)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime})
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit(System.Int64,Guid,System.Int64,System.Int64)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64,Guid,Guid,System.String,System.Int64,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime},System.Nullable{EventStore.Core.TransactionLog.LogRecords.PrepareFlags})
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin(System.Int64,Guid,System.String,System.Int64)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.String,System.Byte[],System.Byte[],System.Boolean)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd(System.Int64,Guid,Guid,System.Int64,System.String)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone(System.Int64,Guid,Guid,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  - EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemRecordVersion
  commentId: F:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemRecordVersion
  id: SystemRecordVersion
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: SystemRecordVersion
  nameWithType: SystemLogRecord.SystemRecordVersion
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemRecordVersion
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SystemRecordVersion
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 22
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public const byte SystemRecordVersion = null
    return:
      type: System.Byte
    content.vb: Public Const SystemRecordVersion As Byte = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.TimeStamp
  commentId: F:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.TimeStamp
  id: TimeStamp
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: TimeStamp
  nameWithType: SystemLogRecord.TimeStamp
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.TimeStamp
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TimeStamp
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 24
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly DateTime TimeStamp
    return:
      type: DateTime
    content.vb: Public ReadOnly TimeStamp As DateTime
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemRecordType
  commentId: F:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemRecordType
  id: SystemRecordType
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: SystemRecordType
  nameWithType: SystemLogRecord.SystemRecordType
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemRecordType
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SystemRecordType
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 25
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly SystemRecordType SystemRecordType
    return:
      type: EventStore.Core.TransactionLog.LogRecords.SystemRecordType
    content.vb: Public ReadOnly SystemRecordType As SystemRecordType
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemRecordSerialization
  commentId: F:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemRecordSerialization
  id: SystemRecordSerialization
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: SystemRecordSerialization
  nameWithType: SystemLogRecord.SystemRecordSerialization
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemRecordSerialization
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SystemRecordSerialization
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 26
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly SystemRecordSerialization SystemRecordSerialization
    return:
      type: EventStore.Core.TransactionLog.LogRecords.SystemRecordSerialization
    content.vb: Public ReadOnly SystemRecordSerialization As SystemRecordSerialization
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Reserved
  commentId: F:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Reserved
  id: Reserved
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: Reserved
  nameWithType: SystemLogRecord.Reserved
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Reserved
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Reserved
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 27
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly long Reserved
    return:
      type: System.Int64
    content.vb: Public ReadOnly Reserved As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Data
  commentId: F:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Data
  id: Data
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: SystemLogRecord.Data
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Data
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Data
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 28
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public readonly byte[] Data
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Data As Byte()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.#ctor(System.Int64,DateTime,EventStore.Core.TransactionLog.LogRecords.SystemRecordType,EventStore.Core.TransactionLog.LogRecords.SystemRecordSerialization,System.Byte[])
  commentId: M:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.#ctor(System.Int64,DateTime,EventStore.Core.TransactionLog.LogRecords.SystemRecordType,EventStore.Core.TransactionLog.LogRecords.SystemRecordSerialization,System.Byte[])
  id: '#ctor(System.Int64,DateTime,EventStore.Core.TransactionLog.LogRecords.SystemRecordType,EventStore.Core.TransactionLog.LogRecords.SystemRecordSerialization,System.Byte[])'
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: SystemLogRecord(Int64, DateTime, SystemRecordType, SystemRecordSerialization, Byte[])
  nameWithType: SystemLogRecord.SystemLogRecord(Int64, DateTime, SystemRecordType, SystemRecordSerialization, Byte[])
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemLogRecord(System.Int64, DateTime, EventStore.Core.TransactionLog.LogRecords.SystemRecordType, EventStore.Core.TransactionLog.LogRecords.SystemRecordSerialization, System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 30
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public SystemLogRecord(long logPosition, DateTime timeStamp, SystemRecordType systemRecordType, SystemRecordSerialization systemRecordSerialization, byte[] data)
    parameters:
    - id: logPosition
      type: System.Int64
    - id: timeStamp
      type: DateTime
    - id: systemRecordType
      type: EventStore.Core.TransactionLog.LogRecords.SystemRecordType
    - id: systemRecordSerialization
      type: EventStore.Core.TransactionLog.LogRecords.SystemRecordSerialization
    - id: data
      type: System.Byte[]
    content.vb: Public Sub New(logPosition As Long, timeStamp As DateTime, systemRecordType As SystemRecordType, systemRecordSerialization As SystemRecordSerialization, data As Byte())
  overload: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.#ctor*
  nameWithType.vb: SystemLogRecord.SystemLogRecord(Int64, DateTime, SystemRecordType, SystemRecordSerialization, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemLogRecord(System.Int64, DateTime, EventStore.Core.TransactionLog.LogRecords.SystemRecordType, EventStore.Core.TransactionLog.LogRecords.SystemRecordSerialization, System.Byte())
  name.vb: SystemLogRecord(Int64, DateTime, SystemRecordType, SystemRecordSerialization, Byte())
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetEpochRecord
  commentId: M:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetEpochRecord
  id: GetEpochRecord
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: GetEpochRecord()
  nameWithType: SystemLogRecord.GetEpochRecord()
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetEpochRecord()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetEpochRecord
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 63
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public EpochRecord GetEpochRecord()
    return:
      type: EventStore.Core.TransactionLog.LogRecords.EpochRecord
    content.vb: Public Function GetEpochRecord As EpochRecord
  overload: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetEpochRecord*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.WriteTo(BinaryWriter)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.WriteTo(BinaryWriter)
  id: WriteTo(BinaryWriter)
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: WriteTo(BinaryWriter)
  nameWithType: SystemLogRecord.WriteTo(BinaryWriter)
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.WriteTo(BinaryWriter)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: WriteTo
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 83
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public override void WriteTo(BinaryWriter writer)
    parameters:
    - id: writer
      type: BinaryWriter
    content.vb: Public Overrides Sub WriteTo(writer As BinaryWriter)
  overridden: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo(BinaryWriter)
  overload: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.WriteTo*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equals(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equals(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  id: Equals(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: Equals(SystemLogRecord)
  nameWithType: SystemLogRecord.Equals(SystemLogRecord)
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equals(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Equals
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 95
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public bool Equals(SystemLogRecord other)
    parameters:
    - id: other
      type: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As SystemLogRecord) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equals(System.Object)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equals(System.Object)
  id: Equals(System.Object)
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: SystemLogRecord.Equals(Object)
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Equals
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 106
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetHashCode
  commentId: M:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetHashCode
  id: GetHashCode
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SystemLogRecord.GetHashCode()
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetHashCode()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetHashCode
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 114
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overload: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.op_Equality(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord,EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.op_Equality(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord,EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  id: op_Equality(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord,EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: Equality(SystemLogRecord, SystemLogRecord)
  nameWithType: SystemLogRecord.Equality(SystemLogRecord, SystemLogRecord)
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equality(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord, EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  type: Operator
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: op_Equality
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 127
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public static bool operator ==(SystemLogRecord left, SystemLogRecord right)
    parameters:
    - id: left
      type: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
    - id: right
      type: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As SystemLogRecord, right As SystemLogRecord) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.op_Inequality(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord,EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.op_Inequality(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord,EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  id: op_Inequality(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord,EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: Inequality(SystemLogRecord, SystemLogRecord)
  nameWithType: SystemLogRecord.Inequality(SystemLogRecord, SystemLogRecord)
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Inequality(EventStore.Core.TransactionLog.LogRecords.SystemLogRecord, EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  type: Operator
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: op_Inequality
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 132
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public static bool operator !=(SystemLogRecord left, SystemLogRecord right)
    parameters:
    - id: left
      type: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
    - id: right
      type: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As SystemLogRecord, right As SystemLogRecord) As Boolean
  overload: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.ToString
  commentId: M:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.ToString
  id: ToString
  parent: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SystemLogRecord.ToString()
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.ToString()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ToString
    path: ../EventStore/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
    startLine: 137
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog.LogRecords
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: EventStore.Core.TransactionLog.LogRecords
  commentId: N:EventStore.Core.TransactionLog.LogRecords
  name: EventStore.Core.TransactionLog.LogRecords
  nameWithType: EventStore.Core.TransactionLog.LogRecords
  fullName: EventStore.Core.TransactionLog.LogRecords
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord
  commentId: T:EventStore.Core.TransactionLog.LogRecords.LogRecord
  parent: EventStore.Core.TransactionLog.LogRecords
  name: LogRecord
  nameWithType: LogRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord
- uid: IEquatable{EventStore.Core.TransactionLog.LogRecords.SystemLogRecord}
  commentId: '!:IEquatable{EventStore.Core.TransactionLog.LogRecords.SystemLogRecord}'
  definition: IEquatable`1
  name: IEquatable<SystemLogRecord>
  nameWithType: IEquatable<SystemLogRecord>
  fullName: IEquatable<EventStore.Core.TransactionLog.LogRecords.SystemLogRecord>
  nameWithType.vb: IEquatable(Of SystemLogRecord)
  fullName.vb: IEquatable(Of EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  name.vb: IEquatable(Of SystemLogRecord)
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
    name: SystemLogRecord
    nameWithType: SystemLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
    name: SystemLogRecord
    nameWithType: SystemLogRecord
    fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.NoData
  commentId: F:EventStore.Core.TransactionLog.LogRecords.LogRecord.NoData
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  name: NoData
  nameWithType: LogRecord.NoData
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.NoData
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.RecordType
  commentId: F:EventStore.Core.TransactionLog.LogRecords.LogRecord.RecordType
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  name: RecordType
  nameWithType: LogRecord.RecordType
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.RecordType
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Version
  commentId: F:EventStore.Core.TransactionLog.LogRecords.LogRecord.Version
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  name: Version
  nameWithType: LogRecord.Version
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Version
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.LogPosition
  commentId: F:EventStore.Core.TransactionLog.LogRecords.LogRecord.LogPosition
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  name: LogPosition
  nameWithType: LogRecord.LogPosition
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.LogPosition
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition(System.Int64,System.Int32)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition(System.Int64,System.Int32)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: GetNextLogPosition(Int64, Int32)
  nameWithType: LogRecord.GetNextLogPosition(Int64, Int32)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition(System.Int64, System.Int32)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition(System.Int64,System.Int32)
    name: GetNextLogPosition
    nameWithType: LogRecord.GetNextLogPosition
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition(System.Int64,System.Int32)
    name: GetNextLogPosition
    nameWithType: LogRecord.GetNextLogPosition
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetNextLogPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition(System.Int64,System.Int32)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition(System.Int64,System.Int32)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: GetPrevLogPosition(Int64, Int32)
  nameWithType: LogRecord.GetPrevLogPosition(Int64, Int32)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition(System.Int64, System.Int32)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition(System.Int64,System.Int32)
    name: GetPrevLogPosition
    nameWithType: LogRecord.GetPrevLogPosition
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition(System.Int64,System.Int32)
    name: GetPrevLogPosition
    nameWithType: LogRecord.GetPrevLogPosition
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetPrevLogPosition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom(BinaryReader)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom(BinaryReader)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: ReadFrom(BinaryReader)
  nameWithType: LogRecord.ReadFrom(BinaryReader)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom(BinaryReader)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom(BinaryReader)
    name: ReadFrom
    nameWithType: LogRecord.ReadFrom
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: BinaryReader
    name: BinaryReader
    nameWithType: BinaryReader
    fullName: BinaryReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom(BinaryReader)
    name: ReadFrom
    nameWithType: LogRecord.ReadFrom
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.ReadFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: BinaryReader
    name: BinaryReader
    nameWithType: BinaryReader
    fullName: BinaryReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime})
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime})
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: Prepare(Int64, Guid, Guid, Int64, Int32, String, Int64, PrepareFlags, String, Byte[], Byte[], Nullable<DateTime>)
  nameWithType: LogRecord.Prepare(Int64, Guid, Guid, Int64, Int32, String, Int64, PrepareFlags, String, Byte[], Byte[], Nullable<DateTime>)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64, Guid, Guid, System.Int64, System.Int32, System.String, System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareFlags, System.String, System.Byte[], System.Byte[], System.Nullable<DateTime>)
  nameWithType.vb: LogRecord.Prepare(Int64, Guid, Guid, Int64, Int32, String, Int64, PrepareFlags, String, Byte(), Byte(), Nullable(Of DateTime))
  fullName.vb: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64, Guid, Guid, System.Int64, System.Int32, System.String, System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareFlags, System.String, System.Byte(), System.Byte(), System.Nullable(Of DateTime))
  name.vb: Prepare(Int64, Guid, Guid, Int64, Int32, String, Int64, PrepareFlags, String, Byte(), Byte(), Nullable(Of DateTime))
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime})
    name: Prepare
    nameWithType: LogRecord.Prepare
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    name: PrepareFlags
    nameWithType: PrepareFlags
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime})
    name: Prepare
    nameWithType: LogRecord.Prepare
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Prepare
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    name: PrepareFlags
    nameWithType: PrepareFlags
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit(System.Int64,Guid,System.Int64,System.Int64)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit(System.Int64,Guid,System.Int64,System.Int64)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: Commit(Int64, Guid, Int64, Int64)
  nameWithType: LogRecord.Commit(Int64, Guid, Int64, Int64)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit(System.Int64, Guid, System.Int64, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit(System.Int64,Guid,System.Int64,System.Int64)
    name: Commit
    nameWithType: LogRecord.Commit
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit(System.Int64,Guid,System.Int64,System.Int64)
    name: Commit
    nameWithType: LogRecord.Commit
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.Commit
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64,Guid,Guid,System.String,System.Int64,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime},System.Nullable{EventStore.Core.TransactionLog.LogRecords.PrepareFlags})
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64,Guid,Guid,System.String,System.Int64,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime},System.Nullable{EventStore.Core.TransactionLog.LogRecords.PrepareFlags})
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: SingleWrite(Int64, Guid, Guid, String, Int64, String, Byte[], Byte[], Nullable<DateTime>, Nullable<PrepareFlags>)
  nameWithType: LogRecord.SingleWrite(Int64, Guid, Guid, String, Int64, String, Byte[], Byte[], Nullable<DateTime>, Nullable<PrepareFlags>)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64, Guid, Guid, System.String, System.Int64, System.String, System.Byte[], System.Byte[], System.Nullable<DateTime>, System.Nullable<EventStore.Core.TransactionLog.LogRecords.PrepareFlags>)
  nameWithType.vb: LogRecord.SingleWrite(Int64, Guid, Guid, String, Int64, String, Byte(), Byte(), Nullable(Of DateTime), Nullable(Of PrepareFlags))
  fullName.vb: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64, Guid, Guid, System.String, System.Int64, System.String, System.Byte(), System.Byte(), System.Nullable(Of DateTime), System.Nullable(Of EventStore.Core.TransactionLog.LogRecords.PrepareFlags))
  name.vb: SingleWrite(Int64, Guid, Guid, String, Int64, String, Byte(), Byte(), Nullable(Of DateTime), Nullable(Of PrepareFlags))
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64,Guid,Guid,System.String,System.Int64,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime},System.Nullable{EventStore.Core.TransactionLog.LogRecords.PrepareFlags})
    name: SingleWrite
    nameWithType: LogRecord.SingleWrite
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    name: PrepareFlags
    nameWithType: PrepareFlags
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite(System.Int64,Guid,Guid,System.String,System.Int64,System.String,System.Byte[],System.Byte[],System.Nullable{DateTime},System.Nullable{EventStore.Core.TransactionLog.LogRecords.PrepareFlags})
    name: SingleWrite
    nameWithType: LogRecord.SingleWrite
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.SingleWrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    name: PrepareFlags
    nameWithType: PrepareFlags
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin(System.Int64,Guid,System.String,System.Int64)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin(System.Int64,Guid,System.String,System.Int64)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: TransactionBegin(Int64, Guid, String, Int64)
  nameWithType: LogRecord.TransactionBegin(Int64, Guid, String, Int64)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin(System.Int64, Guid, System.String, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin(System.Int64,Guid,System.String,System.Int64)
    name: TransactionBegin
    nameWithType: LogRecord.TransactionBegin
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin(System.Int64,Guid,System.String,System.Int64)
    name: TransactionBegin
    nameWithType: LogRecord.TransactionBegin
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionBegin
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.String,System.Byte[],System.Byte[],System.Boolean)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.String,System.Byte[],System.Byte[],System.Boolean)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: TransactionWrite(Int64, Guid, Guid, Int64, Int32, String, String, Byte[], Byte[], Boolean)
  nameWithType: LogRecord.TransactionWrite(Int64, Guid, Guid, Int64, Int32, String, String, Byte[], Byte[], Boolean)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64, Guid, Guid, System.Int64, System.Int32, System.String, System.String, System.Byte[], System.Byte[], System.Boolean)
  nameWithType.vb: LogRecord.TransactionWrite(Int64, Guid, Guid, Int64, Int32, String, String, Byte(), Byte(), Boolean)
  fullName.vb: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64, Guid, Guid, System.Int64, System.Int32, System.String, System.String, System.Byte(), System.Byte(), System.Boolean)
  name.vb: TransactionWrite(Int64, Guid, Guid, Int64, Int32, String, String, Byte(), Byte(), Boolean)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.String,System.Byte[],System.Byte[],System.Boolean)
    name: TransactionWrite
    nameWithType: LogRecord.TransactionWrite
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite(System.Int64,Guid,Guid,System.Int64,System.Int32,System.String,System.String,System.Byte[],System.Byte[],System.Boolean)
    name: TransactionWrite
    nameWithType: LogRecord.TransactionWrite
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionWrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd(System.Int64,Guid,Guid,System.Int64,System.String)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd(System.Int64,Guid,Guid,System.Int64,System.String)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: TransactionEnd(Int64, Guid, Guid, Int64, String)
  nameWithType: LogRecord.TransactionEnd(Int64, Guid, Guid, Int64, String)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd(System.Int64, Guid, Guid, System.Int64, System.String)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd(System.Int64,Guid,Guid,System.Int64,System.String)
    name: TransactionEnd
    nameWithType: LogRecord.TransactionEnd
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd(System.Int64,Guid,Guid,System.Int64,System.String)
    name: TransactionEnd
    nameWithType: LogRecord.TransactionEnd
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.TransactionEnd
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone(System.Int64,Guid,Guid,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone(System.Int64,Guid,Guid,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: DeleteTombstone(Int64, Guid, Guid, String, Int64, PrepareFlags)
  nameWithType: LogRecord.DeleteTombstone(Int64, Guid, Guid, String, Int64, PrepareFlags)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone(System.Int64, Guid, Guid, System.String, System.Int64, EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone(System.Int64,Guid,Guid,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
    name: DeleteTombstone
    nameWithType: LogRecord.DeleteTombstone
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    name: PrepareFlags
    nameWithType: PrepareFlags
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone(System.Int64,Guid,Guid,System.String,System.Int64,EventStore.Core.TransactionLog.LogRecords.PrepareFlags)
    name: DeleteTombstone
    nameWithType: LogRecord.DeleteTombstone
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.DeleteTombstone
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
    name: PrepareFlags
    nameWithType: PrepareFlags
    fullName: EventStore.Core.TransactionLog.LogRecords.PrepareFlags
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  name: GetSizeWithLengthPrefixAndSuffix()
  nameWithType: LogRecord.GetSizeWithLengthPrefixAndSuffix()
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix()
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
    name: GetSizeWithLengthPrefixAndSuffix
    nameWithType: LogRecord.GetSizeWithLengthPrefixAndSuffix
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
    name: GetSizeWithLengthPrefixAndSuffix
    nameWithType: LogRecord.GetSizeWithLengthPrefixAndSuffix
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.GetSizeWithLengthPrefixAndSuffix
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<SystemLogRecord>()
  nameWithType: ProtobufExtensions.Serialize<SystemLogRecord>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.LogRecords.SystemLogRecord>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of SystemLogRecord)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)()
  name.vb: Serialize(Of SystemLogRecord)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<SystemLogRecord>
    nameWithType: ProtobufExtensions.Serialize<SystemLogRecord>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.LogRecords.SystemLogRecord>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of SystemLogRecord)
    nameWithType: ProtobufExtensions.Serialize(Of SystemLogRecord)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<SystemLogRecord>()
  nameWithType: ProtobufExtensions.SerializeToArray<SystemLogRecord>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.LogRecords.SystemLogRecord>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of SystemLogRecord)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)()
  name.vb: SerializeToArray(Of SystemLogRecord)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<SystemLogRecord>
    nameWithType: ProtobufExtensions.SerializeToArray<SystemLogRecord>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.LogRecords.SystemLogRecord>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of SystemLogRecord)
    nameWithType: ProtobufExtensions.SerializeToArray(Of SystemLogRecord)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.LogRecords.SystemLogRecord)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: IEquatable`1
  isExternal: true
  name: IEquatable<>
  nameWithType: IEquatable<>
  fullName: IEquatable<>
  nameWithType.vb: IEquatable(Of )
  fullName.vb: IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: EventStore.Core.TransactionLog.LogRecords.SystemRecordType
  commentId: T:EventStore.Core.TransactionLog.LogRecords.SystemRecordType
  parent: EventStore.Core.TransactionLog.LogRecords
  name: SystemRecordType
  nameWithType: SystemRecordType
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemRecordType
- uid: EventStore.Core.TransactionLog.LogRecords.SystemRecordSerialization
  commentId: T:EventStore.Core.TransactionLog.LogRecords.SystemRecordSerialization
  parent: EventStore.Core.TransactionLog.LogRecords
  name: SystemRecordSerialization
  nameWithType: SystemRecordSerialization
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemRecordSerialization
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.#ctor*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.#ctor
  name: SystemLogRecord
  nameWithType: SystemLogRecord.SystemLogRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.SystemLogRecord
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetEpochRecord*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetEpochRecord
  name: GetEpochRecord
  nameWithType: SystemLogRecord.GetEpochRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetEpochRecord
- uid: EventStore.Core.TransactionLog.LogRecords.EpochRecord
  commentId: T:EventStore.Core.TransactionLog.LogRecords.EpochRecord
  parent: EventStore.Core.TransactionLog.LogRecords
  name: EpochRecord
  nameWithType: EpochRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.EpochRecord
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo(BinaryWriter)
  commentId: M:EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo(BinaryWriter)
  parent: EventStore.Core.TransactionLog.LogRecords.LogRecord
  isExternal: true
  name: WriteTo(BinaryWriter)
  nameWithType: LogRecord.WriteTo(BinaryWriter)
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo(BinaryWriter)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo(BinaryWriter)
    name: WriteTo
    nameWithType: LogRecord.WriteTo
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BinaryWriter
    name: BinaryWriter
    nameWithType: BinaryWriter
    fullName: BinaryWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo(BinaryWriter)
    name: WriteTo
    nameWithType: LogRecord.WriteTo
    fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord.WriteTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: BinaryWriter
    name: BinaryWriter
    nameWithType: BinaryWriter
    fullName: BinaryWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.WriteTo*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.WriteTo
  name: WriteTo
  nameWithType: SystemLogRecord.WriteTo
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.WriteTo
- uid: BinaryWriter
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: BinaryWriter
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equals*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equals
  name: Equals
  nameWithType: SystemLogRecord.Equals
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equals
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  commentId: T:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
  parent: EventStore.Core.TransactionLog.LogRecords
  name: SystemLogRecord
  nameWithType: SystemLogRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetHashCode*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetHashCode
  name: GetHashCode
  nameWithType: SystemLogRecord.GetHashCode
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.op_Equality*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.op_Equality
  name: Equality
  nameWithType: SystemLogRecord.Equality
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Equality
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.op_Inequality*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.op_Inequality
  name: Inequality
  nameWithType: SystemLogRecord.Inequality
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.Inequality
- uid: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.ToString*
  commentId: Overload:EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.ToString
  name: ToString
  nameWithType: SystemLogRecord.ToString
  fullName: EventStore.Core.TransactionLog.LogRecords.SystemLogRecord.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String

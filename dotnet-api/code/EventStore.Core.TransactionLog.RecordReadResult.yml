### YamlMime:ManagedReference
items:
- uid: EventStore.Core.TransactionLog.RecordReadResult
  commentId: T:EventStore.Core.TransactionLog.RecordReadResult
  id: RecordReadResult
  parent: EventStore.Core.TransactionLog
  children:
  - EventStore.Core.TransactionLog.RecordReadResult.#ctor(System.Boolean,System.Int64,EventStore.Core.TransactionLog.LogRecords.LogRecord,System.Int32)
  - EventStore.Core.TransactionLog.RecordReadResult.Failure
  - EventStore.Core.TransactionLog.RecordReadResult.LogRecord
  - EventStore.Core.TransactionLog.RecordReadResult.NextPosition
  - EventStore.Core.TransactionLog.RecordReadResult.RecordLength
  - EventStore.Core.TransactionLog.RecordReadResult.Success
  - EventStore.Core.TransactionLog.RecordReadResult.ToString
  langs:
  - csharp
  - vb
  name: RecordReadResult
  nameWithType: RecordReadResult
  fullName: EventStore.Core.TransactionLog.RecordReadResult
  type: Struct
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/ReadResults.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: RecordReadResult
    path: ../EventStore/src/EventStore.Core/TransactionLog/ReadResults.cs
    startLine: 3
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog
  syntax:
    content: public struct RecordReadResult
    content.vb: Public Structure RecordReadResult
  extensionMethods:
  - EventStore.Core.TransactionLog.RecordReadResult.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  - EventStore.Core.TransactionLog.RecordReadResult.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.TransactionLog.RecordReadResult.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: EventStore.Core.TransactionLog.RecordReadResult.Failure
  commentId: F:EventStore.Core.TransactionLog.RecordReadResult.Failure
  id: Failure
  parent: EventStore.Core.TransactionLog.RecordReadResult
  langs:
  - csharp
  - vb
  name: Failure
  nameWithType: RecordReadResult.Failure
  fullName: EventStore.Core.TransactionLog.RecordReadResult.Failure
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/ReadResults.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Failure
    path: ../EventStore/src/EventStore.Core/TransactionLog/ReadResults.cs
    startLine: 4
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog
  syntax:
    content: public static readonly RecordReadResult Failure
    return:
      type: EventStore.Core.TransactionLog.RecordReadResult
    content.vb: Public Shared ReadOnly Failure As RecordReadResult
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Core.TransactionLog.RecordReadResult.Success
  commentId: F:EventStore.Core.TransactionLog.RecordReadResult.Success
  id: Success
  parent: EventStore.Core.TransactionLog.RecordReadResult
  langs:
  - csharp
  - vb
  name: Success
  nameWithType: RecordReadResult.Success
  fullName: EventStore.Core.TransactionLog.RecordReadResult.Success
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/ReadResults.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Success
    path: ../EventStore/src/EventStore.Core/TransactionLog/ReadResults.cs
    startLine: 6
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog
  syntax:
    content: public readonly bool Success
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Success As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.RecordReadResult.NextPosition
  commentId: F:EventStore.Core.TransactionLog.RecordReadResult.NextPosition
  id: NextPosition
  parent: EventStore.Core.TransactionLog.RecordReadResult
  langs:
  - csharp
  - vb
  name: NextPosition
  nameWithType: RecordReadResult.NextPosition
  fullName: EventStore.Core.TransactionLog.RecordReadResult.NextPosition
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/ReadResults.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: NextPosition
    path: ../EventStore/src/EventStore.Core/TransactionLog/ReadResults.cs
    startLine: 7
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog
  syntax:
    content: public readonly long NextPosition
    return:
      type: System.Int64
    content.vb: Public ReadOnly NextPosition As Long
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.RecordReadResult.LogRecord
  commentId: F:EventStore.Core.TransactionLog.RecordReadResult.LogRecord
  id: LogRecord
  parent: EventStore.Core.TransactionLog.RecordReadResult
  langs:
  - csharp
  - vb
  name: LogRecord
  nameWithType: RecordReadResult.LogRecord
  fullName: EventStore.Core.TransactionLog.RecordReadResult.LogRecord
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/ReadResults.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: LogRecord
    path: ../EventStore/src/EventStore.Core/TransactionLog/ReadResults.cs
    startLine: 8
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog
  syntax:
    content: public readonly LogRecord LogRecord
    return:
      type: EventStore.Core.TransactionLog.LogRecords.LogRecord
    content.vb: Public ReadOnly LogRecord As LogRecord
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.RecordReadResult.RecordLength
  commentId: F:EventStore.Core.TransactionLog.RecordReadResult.RecordLength
  id: RecordLength
  parent: EventStore.Core.TransactionLog.RecordReadResult
  langs:
  - csharp
  - vb
  name: RecordLength
  nameWithType: RecordReadResult.RecordLength
  fullName: EventStore.Core.TransactionLog.RecordReadResult.RecordLength
  type: Field
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/ReadResults.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: RecordLength
    path: ../EventStore/src/EventStore.Core/TransactionLog/ReadResults.cs
    startLine: 9
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog
  syntax:
    content: public readonly int RecordLength
    return:
      type: System.Int32
    content.vb: Public ReadOnly RecordLength As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Core.TransactionLog.RecordReadResult.#ctor(System.Boolean,System.Int64,EventStore.Core.TransactionLog.LogRecords.LogRecord,System.Int32)
  commentId: M:EventStore.Core.TransactionLog.RecordReadResult.#ctor(System.Boolean,System.Int64,EventStore.Core.TransactionLog.LogRecords.LogRecord,System.Int32)
  id: '#ctor(System.Boolean,System.Int64,EventStore.Core.TransactionLog.LogRecords.LogRecord,System.Int32)'
  parent: EventStore.Core.TransactionLog.RecordReadResult
  langs:
  - csharp
  - vb
  name: RecordReadResult(Boolean, Int64, LogRecord, Int32)
  nameWithType: RecordReadResult.RecordReadResult(Boolean, Int64, LogRecord, Int32)
  fullName: EventStore.Core.TransactionLog.RecordReadResult.RecordReadResult(System.Boolean, System.Int64, EventStore.Core.TransactionLog.LogRecords.LogRecord, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/ReadResults.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Core/TransactionLog/ReadResults.cs
    startLine: 11
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog
  syntax:
    content: public RecordReadResult(bool success, long nextPosition, LogRecord logRecord, int recordLength)
    parameters:
    - id: success
      type: System.Boolean
    - id: nextPosition
      type: System.Int64
    - id: logRecord
      type: EventStore.Core.TransactionLog.LogRecords.LogRecord
    - id: recordLength
      type: System.Int32
    content.vb: Public Sub New(success As Boolean, nextPosition As Long, logRecord As LogRecord, recordLength As Integer)
  overload: EventStore.Core.TransactionLog.RecordReadResult.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.RecordReadResult.ToString
  commentId: M:EventStore.Core.TransactionLog.RecordReadResult.ToString
  id: ToString
  parent: EventStore.Core.TransactionLog.RecordReadResult
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RecordReadResult.ToString()
  fullName: EventStore.Core.TransactionLog.RecordReadResult.ToString()
  type: Method
  source:
    remote:
      path: src/EventStore.Core/TransactionLog/ReadResults.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ToString
    path: ../EventStore/src/EventStore.Core/TransactionLog/ReadResults.cs
    startLine: 18
  assemblies:
  - EventStore.Core
  namespace: EventStore.Core.TransactionLog
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: EventStore.Core.TransactionLog.RecordReadResult.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: EventStore.Core.TransactionLog
  commentId: N:EventStore.Core.TransactionLog
  name: EventStore.Core.TransactionLog
  nameWithType: EventStore.Core.TransactionLog
  fullName: EventStore.Core.TransactionLog
- uid: EventStore.Core.TransactionLog.RecordReadResult.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  parent: EventStore.Projections.Core.Utils.EnumExtensions
  definition: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<RecordReadResult>()
  nameWithType: EnumExtensions.EnumValueName<RecordReadResult>()
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.Core.TransactionLog.RecordReadResult>()
  nameWithType.vb: EnumExtensions.EnumValueName(Of RecordReadResult)()
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.Core.TransactionLog.RecordReadResult)()
  name.vb: EnumValueName(Of RecordReadResult)()
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName<RecordReadResult>
    nameWithType: EnumExtensions.EnumValueName<RecordReadResult>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.Core.TransactionLog.RecordReadResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName(Of RecordReadResult)
    nameWithType: EnumExtensions.EnumValueName(Of RecordReadResult)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.Core.TransactionLog.RecordReadResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.RecordReadResult.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<RecordReadResult>()
  nameWithType: ProtobufExtensions.Serialize<RecordReadResult>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.RecordReadResult>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of RecordReadResult)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.RecordReadResult)()
  name.vb: Serialize(Of RecordReadResult)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<RecordReadResult>
    nameWithType: ProtobufExtensions.Serialize<RecordReadResult>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.RecordReadResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of RecordReadResult)
    nameWithType: ProtobufExtensions.Serialize(Of RecordReadResult)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.RecordReadResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.RecordReadResult.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<RecordReadResult>()
  nameWithType: ProtobufExtensions.SerializeToArray<RecordReadResult>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.RecordReadResult>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of RecordReadResult)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.RecordReadResult)()
  name.vb: SerializeToArray(Of RecordReadResult)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<RecordReadResult>
    nameWithType: ProtobufExtensions.SerializeToArray<RecordReadResult>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.RecordReadResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of RecordReadResult)
    nameWithType: ProtobufExtensions.SerializeToArray(Of RecordReadResult)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.RecordReadResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<T>(T)
  nameWithType: EnumExtensions.EnumValueName<T>(T)
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>(T)
  nameWithType.vb: EnumExtensions.EnumValueName(Of T)(T)
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)(T)
  name.vb: EnumValueName(Of T)(T)
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName<T>
    nameWithType: EnumExtensions.EnumValueName<T>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName(Of T)
    nameWithType: EnumExtensions.EnumValueName(Of T)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions
  commentId: T:EventStore.Projections.Core.Utils.EnumExtensions
  parent: EventStore.Projections.Core.Utils
  name: EnumExtensions
  nameWithType: EnumExtensions
  fullName: EventStore.Projections.Core.Utils.EnumExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils
  commentId: N:EventStore.Projections.Core.Utils
  name: EventStore.Projections.Core.Utils
  nameWithType: EventStore.Projections.Core.Utils
  fullName: EventStore.Projections.Core.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.TransactionLog.RecordReadResult
  commentId: T:EventStore.Core.TransactionLog.RecordReadResult
  parent: EventStore.Core.TransactionLog
  name: RecordReadResult
  nameWithType: RecordReadResult
  fullName: EventStore.Core.TransactionLog.RecordReadResult
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.TransactionLog.LogRecords.LogRecord
  commentId: T:EventStore.Core.TransactionLog.LogRecords.LogRecord
  parent: EventStore.Core.TransactionLog.LogRecords
  name: LogRecord
  nameWithType: LogRecord
  fullName: EventStore.Core.TransactionLog.LogRecords.LogRecord
- uid: EventStore.Core.TransactionLog.LogRecords
  commentId: N:EventStore.Core.TransactionLog.LogRecords
  name: EventStore.Core.TransactionLog.LogRecords
  nameWithType: EventStore.Core.TransactionLog.LogRecords
  fullName: EventStore.Core.TransactionLog.LogRecords
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.TransactionLog.RecordReadResult.#ctor*
  commentId: Overload:EventStore.Core.TransactionLog.RecordReadResult.#ctor
  name: RecordReadResult
  nameWithType: RecordReadResult.RecordReadResult
  fullName: EventStore.Core.TransactionLog.RecordReadResult.RecordReadResult
- uid: EventStore.Core.TransactionLog.RecordReadResult.ToString*
  commentId: Overload:EventStore.Core.TransactionLog.RecordReadResult.ToString
  name: ToString
  nameWithType: RecordReadResult.ToString
  fullName: EventStore.Core.TransactionLog.RecordReadResult.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  commentId: T:EventStore.Core.TransactionLog.Unbuffered.INativeFile
  id: INativeFile
  parent: EventStore.Core.TransactionLog.Unbuffered
  children:
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create(System.String,FileAccess,FileShare,FileMode,System.Int32)
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW(System.String,FileAccess,FileShare,FileMode,System.Boolean)
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize(System.String)
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize(SafeFileHandle)
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize(System.String)
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read(SafeFileHandle,System.Byte*,System.Int32,System.Int32)
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek(SafeFileHandle,System.Int64,SeekOrigin)
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize(SafeFileHandle,System.Int64)
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write(SafeFileHandle,System.Byte*,System.UInt32,System.Int32@)
  langs:
  - csharp
  - vb
  name: INativeFile
  nameWithType: INativeFile
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  type: Interface
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: INativeFile
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
    startLine: 5
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: public interface INativeFile
    content.vb: Public Interface INativeFile
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize(System.String)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize(System.String)
  id: GetDriveSectorSize(System.String)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  langs:
  - csharp
  - vb
  name: GetDriveSectorSize(String)
  nameWithType: INativeFile.GetDriveSectorSize(String)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetDriveSectorSize
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
    startLine: 7
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: uint GetDriveSectorSize(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.UInt32
    content.vb: Function GetDriveSectorSize(path As String) As UInteger
  overload: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize*
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize(System.String)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize(System.String)
  id: GetPageSize(System.String)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  langs:
  - csharp
  - vb
  name: GetPageSize(String)
  nameWithType: INativeFile.GetPageSize(String)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetPageSize
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
    startLine: 8
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: long GetPageSize(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Int64
    content.vb: Function GetPageSize(path As String) As Long
  overload: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize*
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize(SafeFileHandle,System.Int64)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize(SafeFileHandle,System.Int64)
  id: SetFileSize(SafeFileHandle,System.Int64)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  langs:
  - csharp
  - vb
  name: SetFileSize(SafeFileHandle, Int64)
  nameWithType: INativeFile.SetFileSize(SafeFileHandle, Int64)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize(SafeFileHandle, System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SetFileSize
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
    startLine: 9
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: void SetFileSize(SafeFileHandle handle, long count)
    parameters:
    - id: handle
      type: SafeFileHandle
    - id: count
      type: System.Int64
    content.vb: Sub SetFileSize(handle As SafeFileHandle, count As Long)
  overload: EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize*
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write(SafeFileHandle,System.Byte*,System.UInt32,System.Int32@)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write(SafeFileHandle,System.Byte*,System.UInt32,System.Int32@)
  id: Write(SafeFileHandle,System.Byte*,System.UInt32,System.Int32@)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  langs:
  - csharp
  - vb
  name: Write(SafeFileHandle, Byte*, UInt32, ref Int32)
  nameWithType: INativeFile.Write(SafeFileHandle, Byte*, UInt32, ref Int32)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write(SafeFileHandle, System.Byte*, System.UInt32, ref System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Write
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
    startLine: 10
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: void Write(SafeFileHandle handle, byte *buffer, uint count, ref int written)
    parameters:
    - id: handle
      type: SafeFileHandle
    - id: buffer
      type: System.Byte*
    - id: count
      type: System.UInt32
    - id: written
      type: System.Int32
    content.vb: Sub Write(handle As SafeFileHandle, buffer As Byte *, count As UInteger, ByRef written As Integer)
  overload: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write*
  nameWithType.vb: INativeFile.Write(SafeFileHandle, Byte*, UInt32, ByRef Int32)
  fullName.vb: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write(SafeFileHandle, System.Byte*, System.UInt32, ByRef System.Int32)
  name.vb: Write(SafeFileHandle, Byte*, UInt32, ByRef Int32)
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read(SafeFileHandle,System.Byte*,System.Int32,System.Int32)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read(SafeFileHandle,System.Byte*,System.Int32,System.Int32)
  id: Read(SafeFileHandle,System.Byte*,System.Int32,System.Int32)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  langs:
  - csharp
  - vb
  name: Read(SafeFileHandle, Byte*, Int32, Int32)
  nameWithType: INativeFile.Read(SafeFileHandle, Byte*, Int32, Int32)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read(SafeFileHandle, System.Byte*, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Read
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
    startLine: 11
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: int Read(SafeFileHandle handle, byte *buffer, int offset, int count)
    parameters:
    - id: handle
      type: SafeFileHandle
    - id: buffer
      type: System.Byte*
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Function Read(handle As SafeFileHandle, buffer As Byte *, offset As Integer, count As Integer) As Integer
  overload: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read*
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize(SafeFileHandle)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize(SafeFileHandle)
  id: GetFileSize(SafeFileHandle)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  langs:
  - csharp
  - vb
  name: GetFileSize(SafeFileHandle)
  nameWithType: INativeFile.GetFileSize(SafeFileHandle)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize(SafeFileHandle)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetFileSize
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
    startLine: 12
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: long GetFileSize(SafeFileHandle handle)
    parameters:
    - id: handle
      type: SafeFileHandle
    return:
      type: System.Int64
    content.vb: Function GetFileSize(handle As SafeFileHandle) As Long
  overload: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize*
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create(System.String,FileAccess,FileShare,FileMode,System.Int32)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create(System.String,FileAccess,FileShare,FileMode,System.Int32)
  id: Create(System.String,FileAccess,FileShare,FileMode,System.Int32)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  langs:
  - csharp
  - vb
  name: Create(String, FileAccess, FileShare, FileMode, Int32)
  nameWithType: INativeFile.Create(String, FileAccess, FileShare, FileMode, Int32)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create(System.String, FileAccess, FileShare, FileMode, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Create
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
    startLine: 13
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: SafeFileHandle Create(string path, FileAccess acc, FileShare readWrite, FileMode mode, int flags)
    parameters:
    - id: path
      type: System.String
    - id: acc
      type: FileAccess
    - id: readWrite
      type: FileShare
    - id: mode
      type: FileMode
    - id: flags
      type: System.Int32
    return:
      type: SafeFileHandle
    content.vb: Function Create(path As String, acc As FileAccess, readWrite As FileShare, mode As FileMode, flags As Integer) As SafeFileHandle
  overload: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create*
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW(System.String,FileAccess,FileShare,FileMode,System.Boolean)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW(System.String,FileAccess,FileShare,FileMode,System.Boolean)
  id: CreateUnbufferedRW(System.String,FileAccess,FileShare,FileMode,System.Boolean)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  langs:
  - csharp
  - vb
  name: CreateUnbufferedRW(String, FileAccess, FileShare, FileMode, Boolean)
  nameWithType: INativeFile.CreateUnbufferedRW(String, FileAccess, FileShare, FileMode, Boolean)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW(System.String, FileAccess, FileShare, FileMode, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: CreateUnbufferedRW
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
    startLine: 15
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: SafeFileHandle CreateUnbufferedRW(string path, FileAccess acc, FileShare share, FileMode mode, bool writeThrough)
    parameters:
    - id: path
      type: System.String
    - id: acc
      type: FileAccess
    - id: share
      type: FileShare
    - id: mode
      type: FileMode
    - id: writeThrough
      type: System.Boolean
    return:
      type: SafeFileHandle
    content.vb: Function CreateUnbufferedRW(path As String, acc As FileAccess, share As FileShare, mode As FileMode, writeThrough As Boolean) As SafeFileHandle
  overload: EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW*
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek(SafeFileHandle,System.Int64,SeekOrigin)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek(SafeFileHandle,System.Int64,SeekOrigin)
  id: Seek(SafeFileHandle,System.Int64,SeekOrigin)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  langs:
  - csharp
  - vb
  name: Seek(SafeFileHandle, Int64, SeekOrigin)
  nameWithType: INativeFile.Seek(SafeFileHandle, Int64, SeekOrigin)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek(SafeFileHandle, System.Int64, SeekOrigin)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Seek
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/INativeFile.cs
    startLine: 18
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: void Seek(SafeFileHandle handle, long position, SeekOrigin origin)
    parameters:
    - id: handle
      type: SafeFileHandle
    - id: position
      type: System.Int64
    - id: origin
      type: SeekOrigin
    content.vb: Sub Seek(handle As SafeFileHandle, position As Long, origin As SeekOrigin)
  overload: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek*
references:
- uid: EventStore.Core.TransactionLog.Unbuffered
  commentId: N:EventStore.Core.TransactionLog.Unbuffered
  name: EventStore.Core.TransactionLog.Unbuffered
  nameWithType: EventStore.Core.TransactionLog.Unbuffered
  fullName: EventStore.Core.TransactionLog.Unbuffered
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<INativeFile>()
  nameWithType: ProtobufExtensions.Serialize<INativeFile>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.Unbuffered.INativeFile>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of INativeFile)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.Unbuffered.INativeFile)()
  name.vb: Serialize(Of INativeFile)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<INativeFile>
    nameWithType: ProtobufExtensions.Serialize<INativeFile>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.Unbuffered.INativeFile>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of INativeFile)
    nameWithType: ProtobufExtensions.Serialize(Of INativeFile)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.Unbuffered.INativeFile)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<INativeFile>()
  nameWithType: ProtobufExtensions.SerializeToArray<INativeFile>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.Unbuffered.INativeFile>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of INativeFile)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.Unbuffered.INativeFile)()
  name.vb: SerializeToArray(Of INativeFile)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<INativeFile>
    nameWithType: ProtobufExtensions.SerializeToArray<INativeFile>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.Unbuffered.INativeFile>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of INativeFile)
    nameWithType: ProtobufExtensions.SerializeToArray(Of INativeFile)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.Unbuffered.INativeFile)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize
  name: GetDriveSectorSize
  nameWithType: INativeFile.GetDriveSectorSize
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.UInt32
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize
  name: GetPageSize
  nameWithType: INativeFile.GetPageSize
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize
  name: SetFileSize
  nameWithType: INativeFile.SetFileSize
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize
- uid: SafeFileHandle
  isExternal: true
  name: SafeFileHandle
  nameWithType: SafeFileHandle
  fullName: SafeFileHandle
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write
  name: Write
  nameWithType: INativeFile.Write
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write
- uid: System.Byte*
  isExternal: true
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read
  name: Read
  nameWithType: INativeFile.Read
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize
  name: GetFileSize
  nameWithType: INativeFile.GetFileSize
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create
  name: Create
  nameWithType: INativeFile.Create
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create
- uid: FileAccess
  isExternal: true
  name: FileAccess
  nameWithType: FileAccess
  fullName: FileAccess
- uid: FileShare
  isExternal: true
  name: FileShare
  nameWithType: FileShare
  fullName: FileShare
- uid: FileMode
  isExternal: true
  name: FileMode
  nameWithType: FileMode
  fullName: FileMode
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW
  name: CreateUnbufferedRW
  nameWithType: INativeFile.CreateUnbufferedRW
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek
  name: Seek
  nameWithType: INativeFile.Seek
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek
- uid: SeekOrigin
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: SeekOrigin

### YamlMime:ManagedReference
items:
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix
  commentId: T:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix
  id: NativeFileUnix
  parent: EventStore.Core.TransactionLog.Unbuffered
  children:
  - EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Create(System.String,FileAccess,FileShare,FileMode,System.Int32)
  - EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.CreateUnbufferedRW(System.String,FileAccess,FileShare,FileMode,System.Boolean)
  - EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetDriveSectorSize(System.String)
  - EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetFileSize(SafeFileHandle)
  - EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetPageSize(System.String)
  - EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Read(SafeFileHandle,System.Byte*,System.Int32,System.Int32)
  - EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Seek(SafeFileHandle,System.Int64,SeekOrigin)
  - EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.SetFileSize(SafeFileHandle,System.Int64)
  - EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Write(SafeFileHandle,System.Byte*,System.UInt32,System.Int32@)
  langs:
  - csharp
  - vb
  name: NativeFileUnix
  nameWithType: NativeFileUnix
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix
  type: Class
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: NativeFileUnix
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
    startLine: 9
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: 'public class NativeFileUnix : object, INativeFile'
    content.vb: >-
      Public Class NativeFileUnix
          Inherits Object
          Implements INativeFile
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetDriveSectorSize(System.String)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetDriveSectorSize(System.String)
  id: GetDriveSectorSize(System.String)
  parent: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix
  langs:
  - csharp
  - vb
  name: GetDriveSectorSize(String)
  nameWithType: NativeFileUnix.GetDriveSectorSize(String)
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetDriveSectorSize(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetDriveSectorSize
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
    startLine: 10
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: public uint GetDriveSectorSize(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.UInt32
    content.vb: Public Function GetDriveSectorSize(path As String) As UInteger
  overload: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetDriveSectorSize*
  implements:
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetPageSize(System.String)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetPageSize(System.String)
  id: GetPageSize(System.String)
  parent: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix
  langs:
  - csharp
  - vb
  name: GetPageSize(String)
  nameWithType: NativeFileUnix.GetPageSize(String)
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetPageSize(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetPageSize
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
    startLine: 14
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: public long GetPageSize(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Int64
    content.vb: Public Function GetPageSize(path As String) As Long
  overload: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetPageSize*
  implements:
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.SetFileSize(SafeFileHandle,System.Int64)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.SetFileSize(SafeFileHandle,System.Int64)
  id: SetFileSize(SafeFileHandle,System.Int64)
  parent: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix
  langs:
  - csharp
  - vb
  name: SetFileSize(SafeFileHandle, Int64)
  nameWithType: NativeFileUnix.SetFileSize(SafeFileHandle, Int64)
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.SetFileSize(SafeFileHandle, System.Int64)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SetFileSize
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
    startLine: 24
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: public void SetFileSize(SafeFileHandle handle, long count)
    parameters:
    - id: handle
      type: SafeFileHandle
    - id: count
      type: System.Int64
    content.vb: Public Sub SetFileSize(handle As SafeFileHandle, count As Long)
  overload: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.SetFileSize*
  implements:
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize(SafeFileHandle,System.Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Write(SafeFileHandle,System.Byte*,System.UInt32,System.Int32@)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Write(SafeFileHandle,System.Byte*,System.UInt32,System.Int32@)
  id: Write(SafeFileHandle,System.Byte*,System.UInt32,System.Int32@)
  parent: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix
  langs:
  - csharp
  - vb
  name: Write(SafeFileHandle, Byte*, UInt32, ref Int32)
  nameWithType: NativeFileUnix.Write(SafeFileHandle, Byte*, UInt32, ref Int32)
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Write(SafeFileHandle, System.Byte*, System.UInt32, ref System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Write
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
    startLine: 38
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: public void Write(SafeFileHandle handle, byte *buffer, uint count, ref int written)
    parameters:
    - id: handle
      type: SafeFileHandle
    - id: buffer
      type: System.Byte*
    - id: count
      type: System.UInt32
    - id: written
      type: System.Int32
    content.vb: Public Sub Write(handle As SafeFileHandle, buffer As Byte *, count As UInteger, ByRef written As Integer)
  overload: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Write*
  implements:
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write(SafeFileHandle,System.Byte*,System.UInt32,System.Int32@)
  nameWithType.vb: NativeFileUnix.Write(SafeFileHandle, Byte*, UInt32, ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Write(SafeFileHandle, System.Byte*, System.UInt32, ByRef System.Int32)
  name.vb: Write(SafeFileHandle, Byte*, UInt32, ByRef Int32)
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Read(SafeFileHandle,System.Byte*,System.Int32,System.Int32)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Read(SafeFileHandle,System.Byte*,System.Int32,System.Int32)
  id: Read(SafeFileHandle,System.Byte*,System.Int32,System.Int32)
  parent: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix
  langs:
  - csharp
  - vb
  name: Read(SafeFileHandle, Byte*, Int32, Int32)
  nameWithType: NativeFileUnix.Read(SafeFileHandle, Byte*, Int32, Int32)
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Read(SafeFileHandle, System.Byte*, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Read
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
    startLine: 51
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: public int Read(SafeFileHandle handle, byte *buffer, int offset, int count)
    parameters:
    - id: handle
      type: SafeFileHandle
    - id: buffer
      type: System.Byte*
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Function Read(handle As SafeFileHandle, buffer As Byte *, offset As Integer, count As Integer) As Integer
  overload: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Read*
  implements:
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read(SafeFileHandle,System.Byte*,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetFileSize(SafeFileHandle)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetFileSize(SafeFileHandle)
  id: GetFileSize(SafeFileHandle)
  parent: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix
  langs:
  - csharp
  - vb
  name: GetFileSize(SafeFileHandle)
  nameWithType: NativeFileUnix.GetFileSize(SafeFileHandle)
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetFileSize(SafeFileHandle)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetFileSize
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
    startLine: 64
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: public long GetFileSize(SafeFileHandle handle)
    parameters:
    - id: handle
      type: SafeFileHandle
    return:
      type: System.Int64
    content.vb: Public Function GetFileSize(handle As SafeFileHandle) As Long
  overload: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetFileSize*
  implements:
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize(SafeFileHandle)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Create(System.String,FileAccess,FileShare,FileMode,System.Int32)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Create(System.String,FileAccess,FileShare,FileMode,System.Int32)
  id: Create(System.String,FileAccess,FileShare,FileMode,System.Int32)
  parent: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix
  langs:
  - csharp
  - vb
  name: Create(String, FileAccess, FileShare, FileMode, Int32)
  nameWithType: NativeFileUnix.Create(String, FileAccess, FileShare, FileMode, Int32)
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Create(System.String, FileAccess, FileShare, FileMode, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Create
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
    startLine: 76
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: public SafeFileHandle Create(string path, FileAccess acc, FileShare readWrite, FileMode mode, int flags)
    parameters:
    - id: path
      type: System.String
    - id: acc
      type: FileAccess
    - id: readWrite
      type: FileShare
    - id: mode
      type: FileMode
    - id: flags
      type: System.Int32
    return:
      type: SafeFileHandle
    content.vb: Public Function Create(path As String, acc As FileAccess, readWrite As FileShare, mode As FileMode, flags As Integer) As SafeFileHandle
  overload: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Create*
  implements:
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create(System.String,FileAccess,FileShare,FileMode,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.CreateUnbufferedRW(System.String,FileAccess,FileShare,FileMode,System.Boolean)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.CreateUnbufferedRW(System.String,FileAccess,FileShare,FileMode,System.Boolean)
  id: CreateUnbufferedRW(System.String,FileAccess,FileShare,FileMode,System.Boolean)
  parent: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix
  langs:
  - csharp
  - vb
  name: CreateUnbufferedRW(String, FileAccess, FileShare, FileMode, Boolean)
  nameWithType: NativeFileUnix.CreateUnbufferedRW(String, FileAccess, FileShare, FileMode, Boolean)
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.CreateUnbufferedRW(System.String, FileAccess, FileShare, FileMode, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: CreateUnbufferedRW
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
    startLine: 82
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: public SafeFileHandle CreateUnbufferedRW(string path, FileAccess acc, FileShare share, FileMode mode, bool writeThrough)
    parameters:
    - id: path
      type: System.String
    - id: acc
      type: FileAccess
    - id: share
      type: FileShare
    - id: mode
      type: FileMode
    - id: writeThrough
      type: System.Boolean
    return:
      type: SafeFileHandle
    content.vb: Public Function CreateUnbufferedRW(path As String, acc As FileAccess, share As FileShare, mode As FileMode, writeThrough As Boolean) As SafeFileHandle
  overload: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.CreateUnbufferedRW*
  implements:
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW(System.String,FileAccess,FileShare,FileMode,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Seek(SafeFileHandle,System.Int64,SeekOrigin)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Seek(SafeFileHandle,System.Int64,SeekOrigin)
  id: Seek(SafeFileHandle,System.Int64,SeekOrigin)
  parent: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix
  langs:
  - csharp
  - vb
  name: Seek(SafeFileHandle, Int64, SeekOrigin)
  nameWithType: NativeFileUnix.Seek(SafeFileHandle, Int64, SeekOrigin)
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Seek(SafeFileHandle, System.Int64, SeekOrigin)
  type: Method
  source:
    remote:
      path: src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Seek
    path: ../EventStore/src/EventStore.Native/TransactionLog/Unbuffered/NativeFileUnix.cs
    startLine: 132
  assemblies:
  - EventStore.Native
  namespace: EventStore.Core.TransactionLog.Unbuffered
  syntax:
    content: public void Seek(SafeFileHandle handle, long position, SeekOrigin origin)
    parameters:
    - id: handle
      type: SafeFileHandle
    - id: position
      type: System.Int64
    - id: origin
      type: SeekOrigin
    content.vb: Public Sub Seek(handle As SafeFileHandle, position As Long, origin As SeekOrigin)
  overload: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Seek*
  implements:
  - EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek(SafeFileHandle,System.Int64,SeekOrigin)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Core.TransactionLog.Unbuffered
  commentId: N:EventStore.Core.TransactionLog.Unbuffered
  name: EventStore.Core.TransactionLog.Unbuffered
  nameWithType: EventStore.Core.TransactionLog.Unbuffered
  fullName: EventStore.Core.TransactionLog.Unbuffered
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  commentId: T:EventStore.Core.TransactionLog.Unbuffered.INativeFile
  parent: EventStore.Core.TransactionLog.Unbuffered
  name: INativeFile
  nameWithType: INativeFile
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<NativeFileUnix>()
  nameWithType: ProtobufExtensions.Serialize<NativeFileUnix>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of NativeFileUnix)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix)()
  name.vb: Serialize(Of NativeFileUnix)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<NativeFileUnix>
    nameWithType: ProtobufExtensions.Serialize<NativeFileUnix>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of NativeFileUnix)
    nameWithType: ProtobufExtensions.Serialize(Of NativeFileUnix)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<NativeFileUnix>()
  nameWithType: ProtobufExtensions.SerializeToArray<NativeFileUnix>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of NativeFileUnix)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix)()
  name.vb: SerializeToArray(Of NativeFileUnix)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<NativeFileUnix>
    nameWithType: ProtobufExtensions.SerializeToArray<NativeFileUnix>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of NativeFileUnix)
    nameWithType: ProtobufExtensions.SerializeToArray(Of NativeFileUnix)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetDriveSectorSize*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetDriveSectorSize
  name: GetDriveSectorSize
  nameWithType: NativeFileUnix.GetDriveSectorSize
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetDriveSectorSize
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize(System.String)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize(System.String)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  isExternal: true
  name: GetDriveSectorSize(String)
  nameWithType: INativeFile.GetDriveSectorSize(String)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize(System.String)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize(System.String)
    name: GetDriveSectorSize
    nameWithType: INativeFile.GetDriveSectorSize
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize(System.String)
    name: GetDriveSectorSize
    nameWithType: INativeFile.GetDriveSectorSize
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetDriveSectorSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.UInt32
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetPageSize*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetPageSize
  name: GetPageSize
  nameWithType: NativeFileUnix.GetPageSize
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetPageSize
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize(System.String)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize(System.String)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  isExternal: true
  name: GetPageSize(String)
  nameWithType: INativeFile.GetPageSize(String)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize(System.String)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize(System.String)
    name: GetPageSize
    nameWithType: INativeFile.GetPageSize
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize(System.String)
    name: GetPageSize
    nameWithType: INativeFile.GetPageSize
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetPageSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.SetFileSize*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.SetFileSize
  name: SetFileSize
  nameWithType: NativeFileUnix.SetFileSize
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.SetFileSize
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize(SafeFileHandle,System.Int64)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize(SafeFileHandle,System.Int64)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  isExternal: true
  name: SetFileSize(SafeFileHandle, Int64)
  nameWithType: INativeFile.SetFileSize(SafeFileHandle, Int64)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize(SafeFileHandle, System.Int64)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize(SafeFileHandle,System.Int64)
    name: SetFileSize
    nameWithType: INativeFile.SetFileSize
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: SafeFileHandle
    name: SafeFileHandle
    nameWithType: SafeFileHandle
    fullName: SafeFileHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize(SafeFileHandle,System.Int64)
    name: SetFileSize
    nameWithType: INativeFile.SetFileSize
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.SetFileSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: SafeFileHandle
    name: SafeFileHandle
    nameWithType: SafeFileHandle
    fullName: SafeFileHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SafeFileHandle
  isExternal: true
  name: SafeFileHandle
  nameWithType: SafeFileHandle
  fullName: SafeFileHandle
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Write*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Write
  name: Write
  nameWithType: NativeFileUnix.Write
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Write
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write(SafeFileHandle,System.Byte*,System.UInt32,System.Int32@)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write(SafeFileHandle,System.Byte*,System.UInt32,System.Int32@)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  isExternal: true
  name: Write(SafeFileHandle, Byte*, UInt32, Int32)
  nameWithType: INativeFile.Write(SafeFileHandle, Byte*, UInt32, Int32)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write(SafeFileHandle, System.Byte*, System.UInt32, System.Int32)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write(SafeFileHandle,System.Byte*,System.UInt32,System.Int32@)
    name: Write
    nameWithType: INativeFile.Write
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: SafeFileHandle
    name: SafeFileHandle
    nameWithType: SafeFileHandle
    fullName: SafeFileHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write(SafeFileHandle,System.Byte*,System.UInt32,System.Int32@)
    name: Write
    nameWithType: INativeFile.Write
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: SafeFileHandle
    name: SafeFileHandle
    nameWithType: SafeFileHandle
    fullName: SafeFileHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte*
  isExternal: true
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Read*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Read
  name: Read
  nameWithType: NativeFileUnix.Read
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Read
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read(SafeFileHandle,System.Byte*,System.Int32,System.Int32)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read(SafeFileHandle,System.Byte*,System.Int32,System.Int32)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  isExternal: true
  name: Read(SafeFileHandle, Byte*, Int32, Int32)
  nameWithType: INativeFile.Read(SafeFileHandle, Byte*, Int32, Int32)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read(SafeFileHandle, System.Byte*, System.Int32, System.Int32)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read(SafeFileHandle,System.Byte*,System.Int32,System.Int32)
    name: Read
    nameWithType: INativeFile.Read
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: SafeFileHandle
    name: SafeFileHandle
    nameWithType: SafeFileHandle
    fullName: SafeFileHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read(SafeFileHandle,System.Byte*,System.Int32,System.Int32)
    name: Read
    nameWithType: INativeFile.Read
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: SafeFileHandle
    name: SafeFileHandle
    nameWithType: SafeFileHandle
    fullName: SafeFileHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetFileSize*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetFileSize
  name: GetFileSize
  nameWithType: NativeFileUnix.GetFileSize
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.GetFileSize
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize(SafeFileHandle)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize(SafeFileHandle)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  isExternal: true
  name: GetFileSize(SafeFileHandle)
  nameWithType: INativeFile.GetFileSize(SafeFileHandle)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize(SafeFileHandle)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize(SafeFileHandle)
    name: GetFileSize
    nameWithType: INativeFile.GetFileSize
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: SafeFileHandle
    name: SafeFileHandle
    nameWithType: SafeFileHandle
    fullName: SafeFileHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize(SafeFileHandle)
    name: GetFileSize
    nameWithType: INativeFile.GetFileSize
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.GetFileSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: SafeFileHandle
    name: SafeFileHandle
    nameWithType: SafeFileHandle
    fullName: SafeFileHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Create*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Create
  name: Create
  nameWithType: NativeFileUnix.Create
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Create
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create(System.String,FileAccess,FileShare,FileMode,System.Int32)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create(System.String,FileAccess,FileShare,FileMode,System.Int32)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  isExternal: true
  name: Create(String, FileAccess, FileShare, FileMode, Int32)
  nameWithType: INativeFile.Create(String, FileAccess, FileShare, FileMode, Int32)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create(System.String, FileAccess, FileShare, FileMode, System.Int32)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create(System.String,FileAccess,FileShare,FileMode,System.Int32)
    name: Create
    nameWithType: INativeFile.Create
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FileAccess
    name: FileAccess
    nameWithType: FileAccess
    fullName: FileAccess
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FileShare
    name: FileShare
    nameWithType: FileShare
    fullName: FileShare
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FileMode
    name: FileMode
    nameWithType: FileMode
    fullName: FileMode
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create(System.String,FileAccess,FileShare,FileMode,System.Int32)
    name: Create
    nameWithType: INativeFile.Create
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FileAccess
    name: FileAccess
    nameWithType: FileAccess
    fullName: FileAccess
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FileShare
    name: FileShare
    nameWithType: FileShare
    fullName: FileShare
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FileMode
    name: FileMode
    nameWithType: FileMode
    fullName: FileMode
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FileAccess
  isExternal: true
  name: FileAccess
  nameWithType: FileAccess
  fullName: FileAccess
- uid: FileShare
  isExternal: true
  name: FileShare
  nameWithType: FileShare
  fullName: FileShare
- uid: FileMode
  isExternal: true
  name: FileMode
  nameWithType: FileMode
  fullName: FileMode
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.CreateUnbufferedRW*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.CreateUnbufferedRW
  name: CreateUnbufferedRW
  nameWithType: NativeFileUnix.CreateUnbufferedRW
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.CreateUnbufferedRW
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW(System.String,FileAccess,FileShare,FileMode,System.Boolean)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW(System.String,FileAccess,FileShare,FileMode,System.Boolean)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  isExternal: true
  name: CreateUnbufferedRW(String, FileAccess, FileShare, FileMode, Boolean)
  nameWithType: INativeFile.CreateUnbufferedRW(String, FileAccess, FileShare, FileMode, Boolean)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW(System.String, FileAccess, FileShare, FileMode, System.Boolean)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW(System.String,FileAccess,FileShare,FileMode,System.Boolean)
    name: CreateUnbufferedRW
    nameWithType: INativeFile.CreateUnbufferedRW
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FileAccess
    name: FileAccess
    nameWithType: FileAccess
    fullName: FileAccess
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FileShare
    name: FileShare
    nameWithType: FileShare
    fullName: FileShare
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FileMode
    name: FileMode
    nameWithType: FileMode
    fullName: FileMode
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW(System.String,FileAccess,FileShare,FileMode,System.Boolean)
    name: CreateUnbufferedRW
    nameWithType: INativeFile.CreateUnbufferedRW
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.CreateUnbufferedRW
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FileAccess
    name: FileAccess
    nameWithType: FileAccess
    fullName: FileAccess
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FileShare
    name: FileShare
    nameWithType: FileShare
    fullName: FileShare
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FileMode
    name: FileMode
    nameWithType: FileMode
    fullName: FileMode
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Seek*
  commentId: Overload:EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Seek
  name: Seek
  nameWithType: NativeFileUnix.Seek
  fullName: EventStore.Core.TransactionLog.Unbuffered.NativeFileUnix.Seek
- uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek(SafeFileHandle,System.Int64,SeekOrigin)
  commentId: M:EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek(SafeFileHandle,System.Int64,SeekOrigin)
  parent: EventStore.Core.TransactionLog.Unbuffered.INativeFile
  isExternal: true
  name: Seek(SafeFileHandle, Int64, SeekOrigin)
  nameWithType: INativeFile.Seek(SafeFileHandle, Int64, SeekOrigin)
  fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek(SafeFileHandle, System.Int64, SeekOrigin)
  spec.csharp:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek(SafeFileHandle,System.Int64,SeekOrigin)
    name: Seek
    nameWithType: INativeFile.Seek
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek
  - name: (
    nameWithType: (
    fullName: (
  - uid: SafeFileHandle
    name: SafeFileHandle
    nameWithType: SafeFileHandle
    fullName: SafeFileHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SeekOrigin
    name: SeekOrigin
    nameWithType: SeekOrigin
    fullName: SeekOrigin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek(SafeFileHandle,System.Int64,SeekOrigin)
    name: Seek
    nameWithType: INativeFile.Seek
    fullName: EventStore.Core.TransactionLog.Unbuffered.INativeFile.Seek
  - name: (
    nameWithType: (
    fullName: (
  - uid: SafeFileHandle
    name: SafeFileHandle
    nameWithType: SafeFileHandle
    fullName: SafeFileHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SeekOrigin
    name: SeekOrigin
    nameWithType: SeekOrigin
    fullName: SeekOrigin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SeekOrigin
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: SeekOrigin

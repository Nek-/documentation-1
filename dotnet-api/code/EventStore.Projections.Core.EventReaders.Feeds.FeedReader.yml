### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader
  commentId: T:EventStore.Projections.Core.EventReaders.Feeds.FeedReader
  id: FeedReader
  parent: EventStore.Projections.Core.EventReaders.Feeds
  children:
  - EventStore.Projections.Core.EventReaders.Feeds.FeedReader.#ctor(EventStore.Projections.Core.Services.PublishSubscribeDispatcher{Guid,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage,EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase},ClaimsPrincipal,EventStore.Projections.Core.Messages.QuerySourcesDefinition,EventStore.Projections.Core.Services.Processing.CheckpointTag,System.Int32,Guid,EventStore.Core.Messaging.IEnvelope,EventStore.Core.Services.TimerService.ITimeProvider)
  - EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Create(EventStore.Projections.Core.Services.PublishSubscribeDispatcher{Guid,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage,EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase},EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.ReadPage,EventStore.Core.Services.TimerService.ITimeProvider)
  - EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested)
  - EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived)
  - EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached)
  - EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized)
  - EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached)
  - EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Start
  langs:
  - csharp
  - vb
  name: FeedReader
  nameWithType: FeedReader
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader
  type: Class
  source:
    remote:
      path: src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: FeedReader
    path: ../EventStore/src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
    startLine: 13
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.EventReaders.Feeds
  syntax:
    content: 'public class FeedReader : object, IHandle<EventReaderSubscriptionMessage.CommittedEventReceived>, IHandle<EventReaderSubscriptionMessage.EofReached>, IHandle<EventReaderSubscriptionMessage.PartitionEofReached>, IHandle<EventReaderSubscriptionMessage.CheckpointSuggested>, IHandle<EventReaderSubscriptionMessage.NotAuthorized>'
    content.vb: >-
      Public Class FeedReader

          Inherits Object

          Implements IHandle(Of EventReaderSubscriptionMessage.CommittedEventReceived), IHandle(Of EventReaderSubscriptionMessage.EofReached), IHandle(Of EventReaderSubscriptionMessage.PartitionEofReached), IHandle(Of EventReaderSubscriptionMessage.CheckpointSuggested), IHandle(Of EventReaderSubscriptionMessage.NotAuthorized)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized}
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Create(EventStore.Projections.Core.Services.PublishSubscribeDispatcher{Guid,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage,EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase},EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.ReadPage,EventStore.Core.Services.TimerService.ITimeProvider)
  commentId: M:EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Create(EventStore.Projections.Core.Services.PublishSubscribeDispatcher{Guid,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage,EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase},EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.ReadPage,EventStore.Core.Services.TimerService.ITimeProvider)
  id: Create(EventStore.Projections.Core.Services.PublishSubscribeDispatcher{Guid,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage,EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase},EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.ReadPage,EventStore.Core.Services.TimerService.ITimeProvider)
  parent: EventStore.Projections.Core.EventReaders.Feeds.FeedReader
  langs:
  - csharp
  - vb
  name: Create(PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>, FeedReaderMessage.ReadPage, ITimeProvider)
  nameWithType: FeedReader.Create(PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>, FeedReaderMessage.ReadPage, ITimeProvider)
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Create(EventStore.Projections.Core.Services.PublishSubscribeDispatcher<Guid, EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe, EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase>, EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.ReadPage, EventStore.Core.Services.TimerService.ITimeProvider)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Create
    path: ../EventStore/src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
    startLine: 38
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.EventReaders.Feeds
  syntax:
    content: public static FeedReader Create(PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase> publishSubscribeDispatcher, FeedReaderMessage.ReadPage message, ITimeProvider timeProvider)
    parameters:
    - id: publishSubscribeDispatcher
      type: EventStore.Projections.Core.Services.PublishSubscribeDispatcher{Guid,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage,EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase}
    - id: message
      type: EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.ReadPage
    - id: timeProvider
      type: EventStore.Core.Services.TimerService.ITimeProvider
    return:
      type: EventStore.Projections.Core.EventReaders.Feeds.FeedReader
    content.vb: Public Shared Function Create(publishSubscribeDispatcher As PublishSubscribeDispatcher(Of Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase), message As FeedReaderMessage.ReadPage, timeProvider As ITimeProvider) As FeedReader
  overload: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Create*
  nameWithType.vb: FeedReader.Create(PublishSubscribeDispatcher(Of Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase), FeedReaderMessage.ReadPage, ITimeProvider)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Create(EventStore.Projections.Core.Services.PublishSubscribeDispatcher(Of Guid, EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe, EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase), EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.ReadPage, EventStore.Core.Services.TimerService.ITimeProvider)
  name.vb: Create(PublishSubscribeDispatcher(Of Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase), FeedReaderMessage.ReadPage, ITimeProvider)
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.#ctor(EventStore.Projections.Core.Services.PublishSubscribeDispatcher{Guid,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage,EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase},ClaimsPrincipal,EventStore.Projections.Core.Messages.QuerySourcesDefinition,EventStore.Projections.Core.Services.Processing.CheckpointTag,System.Int32,Guid,EventStore.Core.Messaging.IEnvelope,EventStore.Core.Services.TimerService.ITimeProvider)
  commentId: M:EventStore.Projections.Core.EventReaders.Feeds.FeedReader.#ctor(EventStore.Projections.Core.Services.PublishSubscribeDispatcher{Guid,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage,EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase},ClaimsPrincipal,EventStore.Projections.Core.Messages.QuerySourcesDefinition,EventStore.Projections.Core.Services.Processing.CheckpointTag,System.Int32,Guid,EventStore.Core.Messaging.IEnvelope,EventStore.Core.Services.TimerService.ITimeProvider)
  id: '#ctor(EventStore.Projections.Core.Services.PublishSubscribeDispatcher{Guid,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage,EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase},ClaimsPrincipal,EventStore.Projections.Core.Messages.QuerySourcesDefinition,EventStore.Projections.Core.Services.Processing.CheckpointTag,System.Int32,Guid,EventStore.Core.Messaging.IEnvelope,EventStore.Core.Services.TimerService.ITimeProvider)'
  parent: EventStore.Projections.Core.EventReaders.Feeds.FeedReader
  langs:
  - csharp
  - vb
  name: FeedReader(PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>, ClaimsPrincipal, QuerySourcesDefinition, CheckpointTag, Int32, Guid, IEnvelope, ITimeProvider)
  nameWithType: FeedReader.FeedReader(PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>, ClaimsPrincipal, QuerySourcesDefinition, CheckpointTag, Int32, Guid, IEnvelope, ITimeProvider)
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.FeedReader(EventStore.Projections.Core.Services.PublishSubscribeDispatcher<Guid, EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe, EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase>, ClaimsPrincipal, EventStore.Projections.Core.Messages.QuerySourcesDefinition, EventStore.Projections.Core.Services.Processing.CheckpointTag, System.Int32, Guid, EventStore.Core.Messaging.IEnvelope, EventStore.Core.Services.TimerService.ITimeProvider)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
    startLine: 49
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.EventReaders.Feeds
  syntax:
    content: public FeedReader(PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase> subscriptionDispatcher, ClaimsPrincipal user, QuerySourcesDefinition querySource, CheckpointTag fromPosition, int maxEvents, Guid requestCorrelationId, IEnvelope replyEnvelope, ITimeProvider timeProvider)
    parameters:
    - id: subscriptionDispatcher
      type: EventStore.Projections.Core.Services.PublishSubscribeDispatcher{Guid,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage,EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase}
    - id: user
      type: ClaimsPrincipal
    - id: querySource
      type: EventStore.Projections.Core.Messages.QuerySourcesDefinition
    - id: fromPosition
      type: EventStore.Projections.Core.Services.Processing.CheckpointTag
    - id: maxEvents
      type: System.Int32
    - id: requestCorrelationId
      type: Guid
    - id: replyEnvelope
      type: EventStore.Core.Messaging.IEnvelope
    - id: timeProvider
      type: EventStore.Core.Services.TimerService.ITimeProvider
    content.vb: Public Sub New(subscriptionDispatcher As PublishSubscribeDispatcher(Of Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase), user As ClaimsPrincipal, querySource As QuerySourcesDefinition, fromPosition As CheckpointTag, maxEvents As Integer, requestCorrelationId As Guid, replyEnvelope As IEnvelope, timeProvider As ITimeProvider)
  overload: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.#ctor*
  nameWithType.vb: FeedReader.FeedReader(PublishSubscribeDispatcher(Of Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase), ClaimsPrincipal, QuerySourcesDefinition, CheckpointTag, Int32, Guid, IEnvelope, ITimeProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.FeedReader(EventStore.Projections.Core.Services.PublishSubscribeDispatcher(Of Guid, EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe, EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase), ClaimsPrincipal, EventStore.Projections.Core.Messages.QuerySourcesDefinition, EventStore.Projections.Core.Services.Processing.CheckpointTag, System.Int32, Guid, EventStore.Core.Messaging.IEnvelope, EventStore.Core.Services.TimerService.ITimeProvider)
  name.vb: FeedReader(PublishSubscribeDispatcher(Of Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase), ClaimsPrincipal, QuerySourcesDefinition, CheckpointTag, Int32, Guid, IEnvelope, ITimeProvider)
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Start
  commentId: M:EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Start
  id: Start
  parent: EventStore.Projections.Core.EventReaders.Feeds.FeedReader
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: FeedReader.Start()
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Start()
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Start
    path: ../EventStore/src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
    startLine: 72
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.EventReaders.Feeds
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  overload: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Start*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived)
  commentId: M:EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived)
  id: Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived)
  parent: EventStore.Projections.Core.EventReaders.Feeds.FeedReader
  langs:
  - csharp
  - vb
  name: Handle(EventReaderSubscriptionMessage.CommittedEventReceived)
  nameWithType: FeedReader.Handle(EventReaderSubscriptionMessage.CommittedEventReceived)
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
    startLine: 95
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.EventReaders.Feeds
  syntax:
    content: public void Handle(EventReaderSubscriptionMessage.CommittedEventReceived message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived
    content.vb: Public Sub Handle(message As EventReaderSubscriptionMessage.CommittedEventReceived)
  overload: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached)
  commentId: M:EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached)
  id: Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached)
  parent: EventStore.Projections.Core.EventReaders.Feeds.FeedReader
  langs:
  - csharp
  - vb
  name: Handle(EventReaderSubscriptionMessage.EofReached)
  nameWithType: FeedReader.Handle(EventReaderSubscriptionMessage.EofReached)
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
    startLine: 100
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.EventReaders.Feeds
  syntax:
    content: public void Handle(EventReaderSubscriptionMessage.EofReached message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached
    content.vb: Public Sub Handle(message As EventReaderSubscriptionMessage.EofReached)
  overload: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached)
  commentId: M:EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached)
  id: Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached)
  parent: EventStore.Projections.Core.EventReaders.Feeds.FeedReader
  langs:
  - csharp
  - vb
  name: Handle(EventReaderSubscriptionMessage.PartitionEofReached)
  nameWithType: FeedReader.Handle(EventReaderSubscriptionMessage.PartitionEofReached)
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
    startLine: 106
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.EventReaders.Feeds
  syntax:
    content: public void Handle(EventReaderSubscriptionMessage.PartitionEofReached message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached
    content.vb: Public Sub Handle(message As EventReaderSubscriptionMessage.PartitionEofReached)
  overload: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested)
  commentId: M:EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested)
  id: Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested)
  parent: EventStore.Projections.Core.EventReaders.Feeds.FeedReader
  langs:
  - csharp
  - vb
  name: Handle(EventReaderSubscriptionMessage.CheckpointSuggested)
  nameWithType: FeedReader.Handle(EventReaderSubscriptionMessage.CheckpointSuggested)
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
    startLine: 110
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.EventReaders.Feeds
  syntax:
    content: public void Handle(EventReaderSubscriptionMessage.CheckpointSuggested message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested
    content.vb: Public Sub Handle(message As EventReaderSubscriptionMessage.CheckpointSuggested)
  overload: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized)
  commentId: M:EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized)
  id: Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized)
  parent: EventStore.Projections.Core.EventReaders.Feeds.FeedReader
  langs:
  - csharp
  - vb
  name: Handle(EventReaderSubscriptionMessage.NotAuthorized)
  nameWithType: FeedReader.Handle(EventReaderSubscriptionMessage.NotAuthorized)
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/EventReaders/Feeds/FeedReader.cs
    startLine: 132
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.EventReaders.Feeds
  syntax:
    content: public void Handle(EventReaderSubscriptionMessage.NotAuthorized message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized
    content.vb: Public Sub Handle(message As EventReaderSubscriptionMessage.NotAuthorized)
  overload: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Projections.Core.EventReaders.Feeds
  commentId: N:EventStore.Projections.Core.EventReaders.Feeds
  name: EventStore.Projections.Core.EventReaders.Feeds
  nameWithType: EventStore.Projections.Core.EventReaders.Feeds
  fullName: EventStore.Projections.Core.EventReaders.Feeds
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<EventReaderSubscriptionMessage.CommittedEventReceived>
  nameWithType: IHandle<EventReaderSubscriptionMessage.CommittedEventReceived>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived>
  nameWithType.vb: IHandle(Of EventReaderSubscriptionMessage.CommittedEventReceived)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived)
  name.vb: IHandle(Of EventReaderSubscriptionMessage.CommittedEventReceived)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived
    name: EventReaderSubscriptionMessage.CommittedEventReceived
    nameWithType: EventReaderSubscriptionMessage.CommittedEventReceived
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived
    name: EventReaderSubscriptionMessage.CommittedEventReceived
    nameWithType: EventReaderSubscriptionMessage.CommittedEventReceived
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<EventReaderSubscriptionMessage.EofReached>
  nameWithType: IHandle<EventReaderSubscriptionMessage.EofReached>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached>
  nameWithType.vb: IHandle(Of EventReaderSubscriptionMessage.EofReached)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached)
  name.vb: IHandle(Of EventReaderSubscriptionMessage.EofReached)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached
    name: EventReaderSubscriptionMessage.EofReached
    nameWithType: EventReaderSubscriptionMessage.EofReached
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached
    name: EventReaderSubscriptionMessage.EofReached
    nameWithType: EventReaderSubscriptionMessage.EofReached
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<EventReaderSubscriptionMessage.PartitionEofReached>
  nameWithType: IHandle<EventReaderSubscriptionMessage.PartitionEofReached>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached>
  nameWithType.vb: IHandle(Of EventReaderSubscriptionMessage.PartitionEofReached)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached)
  name.vb: IHandle(Of EventReaderSubscriptionMessage.PartitionEofReached)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached
    name: EventReaderSubscriptionMessage.PartitionEofReached
    nameWithType: EventReaderSubscriptionMessage.PartitionEofReached
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached
    name: EventReaderSubscriptionMessage.PartitionEofReached
    nameWithType: EventReaderSubscriptionMessage.PartitionEofReached
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<EventReaderSubscriptionMessage.CheckpointSuggested>
  nameWithType: IHandle<EventReaderSubscriptionMessage.CheckpointSuggested>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested>
  nameWithType.vb: IHandle(Of EventReaderSubscriptionMessage.CheckpointSuggested)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested)
  name.vb: IHandle(Of EventReaderSubscriptionMessage.CheckpointSuggested)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested
    name: EventReaderSubscriptionMessage.CheckpointSuggested
    nameWithType: EventReaderSubscriptionMessage.CheckpointSuggested
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested
    name: EventReaderSubscriptionMessage.CheckpointSuggested
    nameWithType: EventReaderSubscriptionMessage.CheckpointSuggested
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<EventReaderSubscriptionMessage.NotAuthorized>
  nameWithType: IHandle<EventReaderSubscriptionMessage.NotAuthorized>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized>
  nameWithType.vb: IHandle(Of EventReaderSubscriptionMessage.NotAuthorized)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized)
  name.vb: IHandle(Of EventReaderSubscriptionMessage.NotAuthorized)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized
    name: EventReaderSubscriptionMessage.NotAuthorized
    nameWithType: EventReaderSubscriptionMessage.NotAuthorized
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized
    name: EventReaderSubscriptionMessage.NotAuthorized
    nameWithType: EventReaderSubscriptionMessage.NotAuthorized
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Create*
  commentId: Overload:EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Create
  name: Create
  nameWithType: FeedReader.Create
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Create
- uid: EventStore.Projections.Core.Services.PublishSubscribeDispatcher{Guid,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage,EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase}
  commentId: T:EventStore.Projections.Core.Services.PublishSubscribeDispatcher{Guid,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe,EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage,EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase}
  parent: EventStore.Projections.Core.Services
  definition: EventStore.Projections.Core.Services.PublishSubscribeDispatcher`4
  name: PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>
  nameWithType: PublishSubscribeDispatcher<Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase>
  fullName: EventStore.Projections.Core.Services.PublishSubscribeDispatcher<Guid, EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe, EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase>
  nameWithType.vb: PublishSubscribeDispatcher(Of Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase)
  fullName.vb: EventStore.Projections.Core.Services.PublishSubscribeDispatcher(Of Guid, EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe, EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase)
  name.vb: PublishSubscribeDispatcher(Of Guid, ReaderSubscriptionManagement.Subscribe, ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage, EventReaderSubscriptionMessageBase)
  spec.csharp:
  - uid: EventStore.Projections.Core.Services.PublishSubscribeDispatcher`4
    name: PublishSubscribeDispatcher
    nameWithType: PublishSubscribeDispatcher
    fullName: EventStore.Projections.Core.Services.PublishSubscribeDispatcher
  - name: <
    nameWithType: <
    fullName: <
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe
    name: ReaderSubscriptionManagement.Subscribe
    nameWithType: ReaderSubscriptionManagement.Subscribe
    fullName: EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage
    name: ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage
    nameWithType: ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage
    fullName: EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase
    name: EventReaderSubscriptionMessageBase
    nameWithType: EventReaderSubscriptionMessageBase
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Projections.Core.Services.PublishSubscribeDispatcher`4
    name: PublishSubscribeDispatcher
    nameWithType: PublishSubscribeDispatcher
    fullName: EventStore.Projections.Core.Services.PublishSubscribeDispatcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Guid
    name: Guid
    nameWithType: Guid
    fullName: Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe
    name: ReaderSubscriptionManagement.Subscribe
    nameWithType: ReaderSubscriptionManagement.Subscribe
    fullName: EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.Subscribe
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage
    name: ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage
    nameWithType: ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage
    fullName: EventStore.Projections.Core.Messages.ReaderSubscriptionManagement.ReaderSubscriptionManagementMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase
    name: EventReaderSubscriptionMessageBase
    nameWithType: EventReaderSubscriptionMessageBase
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessageBase
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.ReadPage
  commentId: T:EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.ReadPage
  parent: EventStore.Projections.Core.Messages.EventReaders.Feeds
  name: FeedReaderMessage.ReadPage
  nameWithType: FeedReaderMessage.ReadPage
  fullName: EventStore.Projections.Core.Messages.EventReaders.Feeds.FeedReaderMessage.ReadPage
- uid: EventStore.Core.Services.TimerService.ITimeProvider
  commentId: T:EventStore.Core.Services.TimerService.ITimeProvider
  parent: EventStore.Core.Services.TimerService
  name: ITimeProvider
  nameWithType: ITimeProvider
  fullName: EventStore.Core.Services.TimerService.ITimeProvider
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader
  commentId: T:EventStore.Projections.Core.EventReaders.Feeds.FeedReader
  parent: EventStore.Projections.Core.EventReaders.Feeds
  name: FeedReader
  nameWithType: FeedReader
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader
- uid: EventStore.Projections.Core.Services.PublishSubscribeDispatcher`4
  commentId: T:EventStore.Projections.Core.Services.PublishSubscribeDispatcher`4
  name: PublishSubscribeDispatcher<TGuid, TSubscribeRequest, TControlMessageBase, TResponseBase>
  nameWithType: PublishSubscribeDispatcher<TGuid, TSubscribeRequest, TControlMessageBase, TResponseBase>
  fullName: EventStore.Projections.Core.Services.PublishSubscribeDispatcher<TGuid, TSubscribeRequest, TControlMessageBase, TResponseBase>
  nameWithType.vb: PublishSubscribeDispatcher(Of TGuid, TSubscribeRequest, TControlMessageBase, TResponseBase)
  fullName.vb: EventStore.Projections.Core.Services.PublishSubscribeDispatcher(Of TGuid, TSubscribeRequest, TControlMessageBase, TResponseBase)
  name.vb: PublishSubscribeDispatcher(Of TGuid, TSubscribeRequest, TControlMessageBase, TResponseBase)
  spec.csharp:
  - uid: EventStore.Projections.Core.Services.PublishSubscribeDispatcher`4
    name: PublishSubscribeDispatcher
    nameWithType: PublishSubscribeDispatcher
    fullName: EventStore.Projections.Core.Services.PublishSubscribeDispatcher
  - name: <
    nameWithType: <
    fullName: <
  - name: TGuid
    nameWithType: TGuid
    fullName: TGuid
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSubscribeRequest
    nameWithType: TSubscribeRequest
    fullName: TSubscribeRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TControlMessageBase
    nameWithType: TControlMessageBase
    fullName: TControlMessageBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponseBase
    nameWithType: TResponseBase
    fullName: TResponseBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Projections.Core.Services.PublishSubscribeDispatcher`4
    name: PublishSubscribeDispatcher
    nameWithType: PublishSubscribeDispatcher
    fullName: EventStore.Projections.Core.Services.PublishSubscribeDispatcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGuid
    nameWithType: TGuid
    fullName: TGuid
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSubscribeRequest
    nameWithType: TSubscribeRequest
    fullName: TSubscribeRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TControlMessageBase
    nameWithType: TControlMessageBase
    fullName: TControlMessageBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponseBase
    nameWithType: TResponseBase
    fullName: TResponseBase
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services
  commentId: N:EventStore.Projections.Core.Services
  name: EventStore.Projections.Core.Services
  nameWithType: EventStore.Projections.Core.Services
  fullName: EventStore.Projections.Core.Services
- uid: EventStore.Projections.Core.Messages.EventReaders.Feeds
  commentId: N:EventStore.Projections.Core.Messages.EventReaders.Feeds
  name: EventStore.Projections.Core.Messages.EventReaders.Feeds
  nameWithType: EventStore.Projections.Core.Messages.EventReaders.Feeds
  fullName: EventStore.Projections.Core.Messages.EventReaders.Feeds
- uid: EventStore.Core.Services.TimerService
  commentId: N:EventStore.Core.Services.TimerService
  name: EventStore.Core.Services.TimerService
  nameWithType: EventStore.Core.Services.TimerService
  fullName: EventStore.Core.Services.TimerService
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.#ctor*
  commentId: Overload:EventStore.Projections.Core.EventReaders.Feeds.FeedReader.#ctor
  name: FeedReader
  nameWithType: FeedReader.FeedReader
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.FeedReader
- uid: ClaimsPrincipal
  isExternal: true
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: ClaimsPrincipal
- uid: EventStore.Projections.Core.Messages.QuerySourcesDefinition
  commentId: T:EventStore.Projections.Core.Messages.QuerySourcesDefinition
  parent: EventStore.Projections.Core.Messages
  name: QuerySourcesDefinition
  nameWithType: QuerySourcesDefinition
  fullName: EventStore.Projections.Core.Messages.QuerySourcesDefinition
- uid: EventStore.Projections.Core.Services.Processing.CheckpointTag
  commentId: T:EventStore.Projections.Core.Services.Processing.CheckpointTag
  parent: EventStore.Projections.Core.Services.Processing
  name: CheckpointTag
  nameWithType: CheckpointTag
  fullName: EventStore.Projections.Core.Services.Processing.CheckpointTag
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: EventStore.Core.Messaging.IEnvelope
  commentId: T:EventStore.Core.Messaging.IEnvelope
  parent: EventStore.Core.Messaging
  name: IEnvelope
  nameWithType: IEnvelope
  fullName: EventStore.Core.Messaging.IEnvelope
- uid: EventStore.Projections.Core.Messages
  commentId: N:EventStore.Projections.Core.Messages
  name: EventStore.Projections.Core.Messages
  nameWithType: EventStore.Projections.Core.Messages
  fullName: EventStore.Projections.Core.Messages
- uid: EventStore.Projections.Core.Services.Processing
  commentId: N:EventStore.Projections.Core.Services.Processing
  name: EventStore.Projections.Core.Services.Processing
  nameWithType: EventStore.Projections.Core.Services.Processing
  fullName: EventStore.Projections.Core.Services.Processing
- uid: EventStore.Core.Messaging
  commentId: N:EventStore.Core.Messaging
  name: EventStore.Core.Messaging
  nameWithType: EventStore.Core.Messaging
  fullName: EventStore.Core.Messaging
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Start*
  commentId: Overload:EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Start
  name: Start
  nameWithType: FeedReader.Start
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Start
- uid: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle*
  commentId: Overload:EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle
  name: Handle
  nameWithType: FeedReader.Handle
  fullName: EventStore.Projections.Core.EventReaders.Feeds.FeedReader.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(EventReaderSubscriptionMessage.CommittedEventReceived)
  nameWithType: IHandle<EventReaderSubscriptionMessage.CommittedEventReceived>.Handle(EventReaderSubscriptionMessage.CommittedEventReceived)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived>.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived)
  nameWithType.vb: IHandle(Of EventReaderSubscriptionMessage.CommittedEventReceived).Handle(EventReaderSubscriptionMessage.CommittedEventReceived)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived).Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<EventReaderSubscriptionMessage.CommittedEventReceived>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived
    name: EventReaderSubscriptionMessage.CommittedEventReceived
    nameWithType: EventReaderSubscriptionMessage.CommittedEventReceived
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of EventReaderSubscriptionMessage.CommittedEventReceived).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived
    name: EventReaderSubscriptionMessage.CommittedEventReceived
    nameWithType: EventReaderSubscriptionMessage.CommittedEventReceived
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived
  commentId: T:EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived
  parent: EventStore.Projections.Core.Messages
  name: EventReaderSubscriptionMessage.CommittedEventReceived
  nameWithType: EventReaderSubscriptionMessage.CommittedEventReceived
  fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CommittedEventReceived
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(EventReaderSubscriptionMessage.EofReached)
  nameWithType: IHandle<EventReaderSubscriptionMessage.EofReached>.Handle(EventReaderSubscriptionMessage.EofReached)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached>.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached)
  nameWithType.vb: IHandle(Of EventReaderSubscriptionMessage.EofReached).Handle(EventReaderSubscriptionMessage.EofReached)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached).Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<EventReaderSubscriptionMessage.EofReached>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached
    name: EventReaderSubscriptionMessage.EofReached
    nameWithType: EventReaderSubscriptionMessage.EofReached
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of EventReaderSubscriptionMessage.EofReached).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached
    name: EventReaderSubscriptionMessage.EofReached
    nameWithType: EventReaderSubscriptionMessage.EofReached
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached
  commentId: T:EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached
  parent: EventStore.Projections.Core.Messages
  name: EventReaderSubscriptionMessage.EofReached
  nameWithType: EventReaderSubscriptionMessage.EofReached
  fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.EofReached
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(EventReaderSubscriptionMessage.PartitionEofReached)
  nameWithType: IHandle<EventReaderSubscriptionMessage.PartitionEofReached>.Handle(EventReaderSubscriptionMessage.PartitionEofReached)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached>.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached)
  nameWithType.vb: IHandle(Of EventReaderSubscriptionMessage.PartitionEofReached).Handle(EventReaderSubscriptionMessage.PartitionEofReached)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached).Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<EventReaderSubscriptionMessage.PartitionEofReached>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached
    name: EventReaderSubscriptionMessage.PartitionEofReached
    nameWithType: EventReaderSubscriptionMessage.PartitionEofReached
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of EventReaderSubscriptionMessage.PartitionEofReached).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached
    name: EventReaderSubscriptionMessage.PartitionEofReached
    nameWithType: EventReaderSubscriptionMessage.PartitionEofReached
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached
  commentId: T:EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached
  parent: EventStore.Projections.Core.Messages
  name: EventReaderSubscriptionMessage.PartitionEofReached
  nameWithType: EventReaderSubscriptionMessage.PartitionEofReached
  fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.PartitionEofReached
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(EventReaderSubscriptionMessage.CheckpointSuggested)
  nameWithType: IHandle<EventReaderSubscriptionMessage.CheckpointSuggested>.Handle(EventReaderSubscriptionMessage.CheckpointSuggested)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested>.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested)
  nameWithType.vb: IHandle(Of EventReaderSubscriptionMessage.CheckpointSuggested).Handle(EventReaderSubscriptionMessage.CheckpointSuggested)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested).Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<EventReaderSubscriptionMessage.CheckpointSuggested>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested
    name: EventReaderSubscriptionMessage.CheckpointSuggested
    nameWithType: EventReaderSubscriptionMessage.CheckpointSuggested
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of EventReaderSubscriptionMessage.CheckpointSuggested).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested
    name: EventReaderSubscriptionMessage.CheckpointSuggested
    nameWithType: EventReaderSubscriptionMessage.CheckpointSuggested
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested
  commentId: T:EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested
  parent: EventStore.Projections.Core.Messages
  name: EventReaderSubscriptionMessage.CheckpointSuggested
  nameWithType: EventReaderSubscriptionMessage.CheckpointSuggested
  fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.CheckpointSuggested
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized}.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(EventReaderSubscriptionMessage.NotAuthorized)
  nameWithType: IHandle<EventReaderSubscriptionMessage.NotAuthorized>.Handle(EventReaderSubscriptionMessage.NotAuthorized)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized>.Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized)
  nameWithType.vb: IHandle(Of EventReaderSubscriptionMessage.NotAuthorized).Handle(EventReaderSubscriptionMessage.NotAuthorized)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized).Handle(EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<EventReaderSubscriptionMessage.NotAuthorized>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized
    name: EventReaderSubscriptionMessage.NotAuthorized
    nameWithType: EventReaderSubscriptionMessage.NotAuthorized
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of EventReaderSubscriptionMessage.NotAuthorized).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized
    name: EventReaderSubscriptionMessage.NotAuthorized
    nameWithType: EventReaderSubscriptionMessage.NotAuthorized
    fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized
  commentId: T:EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized
  parent: EventStore.Projections.Core.Messages
  name: EventReaderSubscriptionMessage.NotAuthorized
  nameWithType: EventReaderSubscriptionMessage.NotAuthorized
  fullName: EventStore.Projections.Core.Messages.EventReaderSubscriptionMessage.NotAuthorized

### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler
  commentId: T:EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler
  id: UnwrapEnvelopeHandler
  parent: EventStore.Projections.Core.Messaging
  children:
  - EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  langs:
  - csharp
  - vb
  name: UnwrapEnvelopeHandler
  nameWithType: UnwrapEnvelopeHandler
  fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler
  type: Class
  source:
    id: UnwrapEnvelopeHandler
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Projections.Core/Messaging/UnwrapEnvelopeHandler.cs
    startLine: 3
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Messaging
  syntax:
    content: 'public class UnwrapEnvelopeHandler : object, IHandle<UnwrapEnvelopeMessage>'
    content.vb: >-
      Public Class UnwrapEnvelopeHandler

          Inherits Object

          Implements IHandle(Of UnwrapEnvelopeMessage)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  commentId: M:EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  id: Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  parent: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler
  langs:
  - csharp
  - vb
  name: Handle(UnwrapEnvelopeMessage)
  nameWithType: UnwrapEnvelopeHandler.Handle(UnwrapEnvelopeMessage)
  fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  type: Method
  source:
    id: Handle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Projections.Core/Messaging/UnwrapEnvelopeHandler.cs
    startLine: 4
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Messaging
  syntax:
    content: public void Handle(UnwrapEnvelopeMessage message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
    content.vb: Public Sub Handle(message As UnwrapEnvelopeMessage)
  overload: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Projections.Core.Messaging
  commentId: N:EventStore.Projections.Core.Messaging
  name: EventStore.Projections.Core.Messaging
  nameWithType: EventStore.Projections.Core.Messaging
  fullName: EventStore.Projections.Core.Messaging
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<UnwrapEnvelopeMessage>
  nameWithType: IHandle<UnwrapEnvelopeMessage>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage>
  nameWithType.vb: IHandle(Of UnwrapEnvelopeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  name.vb: IHandle(Of UnwrapEnvelopeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
    name: UnwrapEnvelopeMessage
    nameWithType: UnwrapEnvelopeMessage
    fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
    name: UnwrapEnvelopeMessage
    nameWithType: UnwrapEnvelopeMessage
    fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle*
  commentId: Overload:EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle
  name: Handle
  nameWithType: UnwrapEnvelopeHandler.Handle
  fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(UnwrapEnvelopeMessage)
  nameWithType: IHandle<UnwrapEnvelopeMessage>.Handle(UnwrapEnvelopeMessage)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage>.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  nameWithType.vb: IHandle(Of UnwrapEnvelopeMessage).Handle(UnwrapEnvelopeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage).Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<UnwrapEnvelopeMessage>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
    name: UnwrapEnvelopeMessage
    nameWithType: UnwrapEnvelopeMessage
    fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of UnwrapEnvelopeMessage).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
    name: UnwrapEnvelopeMessage
    nameWithType: UnwrapEnvelopeMessage
    fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
  commentId: T:EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
  parent: EventStore.Projections.Core.Messaging
  name: UnwrapEnvelopeMessage
  nameWithType: UnwrapEnvelopeMessage
  fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )

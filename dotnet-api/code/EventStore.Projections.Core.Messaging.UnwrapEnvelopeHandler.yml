### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler
  commentId: T:EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler
  id: UnwrapEnvelopeHandler
  parent: EventStore.Projections.Core.Messaging
  children:
  - EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  langs:
  - csharp
  - vb
  name: UnwrapEnvelopeHandler
  nameWithType: UnwrapEnvelopeHandler
  fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler
  type: Class
  source:
    remote:
      path: src/EventStore.Projections.Core/Messaging/UnwrapEnvelopeHandler.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: UnwrapEnvelopeHandler
    path: ../EventStore/src/EventStore.Projections.Core/Messaging/UnwrapEnvelopeHandler.cs
    startLine: 4
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Messaging
  syntax:
    content: 'public class UnwrapEnvelopeHandler : object, IHandle<UnwrapEnvelopeMessage>'
    content.vb: >-
      Public Class UnwrapEnvelopeHandler
          Inherits Object
          Implements IHandle(Of UnwrapEnvelopeMessage)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  commentId: M:EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  id: Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  parent: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler
  langs:
  - csharp
  - vb
  name: Handle(UnwrapEnvelopeMessage)
  nameWithType: UnwrapEnvelopeHandler.Handle(UnwrapEnvelopeMessage)
  fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Messaging/UnwrapEnvelopeHandler.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Messaging/UnwrapEnvelopeHandler.cs
    startLine: 6
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Messaging
  syntax:
    content: public void Handle(UnwrapEnvelopeMessage message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
    content.vb: Public Sub Handle(message As UnwrapEnvelopeMessage)
  overload: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Projections.Core.Messaging
  commentId: N:EventStore.Projections.Core.Messaging
  name: EventStore.Projections.Core.Messaging
  nameWithType: EventStore.Projections.Core.Messaging
  fullName: EventStore.Projections.Core.Messaging
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<UnwrapEnvelopeMessage>
  nameWithType: IHandle<UnwrapEnvelopeMessage>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage>
  nameWithType.vb: IHandle(Of UnwrapEnvelopeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  name.vb: IHandle(Of UnwrapEnvelopeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
    name: UnwrapEnvelopeMessage
    nameWithType: UnwrapEnvelopeMessage
    fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
    name: UnwrapEnvelopeMessage
    nameWithType: UnwrapEnvelopeMessage
    fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<UnwrapEnvelopeHandler>()
  nameWithType: ProtobufExtensions.Serialize<UnwrapEnvelopeHandler>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of UnwrapEnvelopeHandler)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler)()
  name.vb: Serialize(Of UnwrapEnvelopeHandler)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<UnwrapEnvelopeHandler>
    nameWithType: ProtobufExtensions.Serialize<UnwrapEnvelopeHandler>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of UnwrapEnvelopeHandler)
    nameWithType: ProtobufExtensions.Serialize(Of UnwrapEnvelopeHandler)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<UnwrapEnvelopeHandler>()
  nameWithType: ProtobufExtensions.SerializeToArray<UnwrapEnvelopeHandler>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of UnwrapEnvelopeHandler)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler)()
  name.vb: SerializeToArray(Of UnwrapEnvelopeHandler)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<UnwrapEnvelopeHandler>
    nameWithType: ProtobufExtensions.SerializeToArray<UnwrapEnvelopeHandler>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of UnwrapEnvelopeHandler)
    nameWithType: ProtobufExtensions.SerializeToArray(Of UnwrapEnvelopeHandler)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle*
  commentId: Overload:EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle
  name: Handle
  nameWithType: UnwrapEnvelopeHandler.Handle
  fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeHandler.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(UnwrapEnvelopeMessage)
  nameWithType: IHandle<UnwrapEnvelopeMessage>.Handle(UnwrapEnvelopeMessage)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage>.Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  nameWithType.vb: IHandle(Of UnwrapEnvelopeMessage).Handle(UnwrapEnvelopeMessage)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage).Handle(EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<UnwrapEnvelopeMessage>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
    name: UnwrapEnvelopeMessage
    nameWithType: UnwrapEnvelopeMessage
    fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of UnwrapEnvelopeMessage).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
    name: UnwrapEnvelopeMessage
    nameWithType: UnwrapEnvelopeMessage
    fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
  commentId: T:EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
  parent: EventStore.Projections.Core.Messaging
  name: UnwrapEnvelopeMessage
  nameWithType: UnwrapEnvelopeMessage
  fullName: EventStore.Projections.Core.Messaging.UnwrapEnvelopeMessage
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )

### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement
  commentId: T:EventStore.Projections.Core.Services.Grpc.ProjectionManagement
  id: ProjectionManagement
  parent: EventStore.Projections.Core.Services.Grpc
  children:
  - EventStore.Projections.Core.Services.Grpc.ProjectionManagement.#ctor(EventStore.Core.Bus.IQueuedHandler)
  - EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Create(CreateReq,ServerCallContext)
  - EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Delete(DeleteReq,ServerCallContext)
  - EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Disable(DisableReq,ServerCallContext)
  - EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Enable(EnableReq,ServerCallContext)
  - EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Reset(ResetReq,ServerCallContext)
  - EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Result(ResultReq,ServerCallContext)
  - EventStore.Projections.Core.Services.Grpc.ProjectionManagement.State(StateReq,ServerCallContext)
  - EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Statistics(StatisticsReq,IServerStreamWriter{StatisticsResp},ServerCallContext)
  - EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Update(UpdateReq,ServerCallContext)
  langs:
  - csharp
  - vb
  name: ProjectionManagement
  nameWithType: ProjectionManagement
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement
  type: Class
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Update.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ProjectionManagement
    path: ../EventStore/src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Update.cs
    startLine: 9
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Grpc
  syntax:
    content: 'public class ProjectionManagement : Projections.ProjectionsBase'
    content.vb: >-
      Public Class ProjectionManagement

          Inherits Projections.ProjectionsBase
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Create(CreateReq,ServerCallContext)
  commentId: M:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Create(CreateReq,ServerCallContext)
  id: Create(CreateReq,ServerCallContext)
  parent: EventStore.Projections.Core.Services.Grpc.ProjectionManagement
  langs:
  - csharp
  - vb
  name: Create(CreateReq, ServerCallContext)
  nameWithType: ProjectionManagement.Create(CreateReq, ServerCallContext)
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Create(CreateReq, ServerCallContext)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Create.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Create
    path: ../EventStore/src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Create.cs
    startLine: 10
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Grpc
  syntax:
    content: public override Task<CreateResp> Create(CreateReq request, ServerCallContext context)
    parameters:
    - id: request
      type: CreateReq
    - id: context
      type: ServerCallContext
    return:
      type: Task{CreateResp}
    content.vb: Public Overrides Function Create(request As CreateReq, context As ServerCallContext) As Task(Of CreateResp)
  overload: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Create*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.#ctor(EventStore.Core.Bus.IQueuedHandler)
  commentId: M:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.#ctor(EventStore.Core.Bus.IQueuedHandler)
  id: '#ctor(EventStore.Core.Bus.IQueuedHandler)'
  parent: EventStore.Projections.Core.Services.Grpc.ProjectionManagement
  langs:
  - csharp
  - vb
  name: ProjectionManagement(IQueuedHandler)
  nameWithType: ProjectionManagement.ProjectionManagement(IQueuedHandler)
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.ProjectionManagement(EventStore.Core.Bus.IQueuedHandler)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.cs
    startLine: 22
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Grpc
  syntax:
    content: public ProjectionManagement(IQueuedHandler queue)
    parameters:
    - id: queue
      type: EventStore.Core.Bus.IQueuedHandler
    content.vb: Public Sub New(queue As IQueuedHandler)
  overload: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Delete(DeleteReq,ServerCallContext)
  commentId: M:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Delete(DeleteReq,ServerCallContext)
  id: Delete(DeleteReq,ServerCallContext)
  parent: EventStore.Projections.Core.Services.Grpc.ProjectionManagement
  langs:
  - csharp
  - vb
  name: Delete(DeleteReq, ServerCallContext)
  nameWithType: ProjectionManagement.Delete(DeleteReq, ServerCallContext)
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Delete(DeleteReq, ServerCallContext)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Delete.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Delete
    path: ../EventStore/src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Delete.cs
    startLine: 10
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Grpc
  syntax:
    content: public override Task<DeleteResp> Delete(DeleteReq request, ServerCallContext context)
    parameters:
    - id: request
      type: DeleteReq
    - id: context
      type: ServerCallContext
    return:
      type: Task{DeleteResp}
    content.vb: Public Overrides Function Delete(request As DeleteReq, context As ServerCallContext) As Task(Of DeleteResp)
  overload: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Delete*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Disable(DisableReq,ServerCallContext)
  commentId: M:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Disable(DisableReq,ServerCallContext)
  id: Disable(DisableReq,ServerCallContext)
  parent: EventStore.Projections.Core.Services.Grpc.ProjectionManagement
  langs:
  - csharp
  - vb
  name: Disable(DisableReq, ServerCallContext)
  nameWithType: ProjectionManagement.Disable(DisableReq, ServerCallContext)
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Disable(DisableReq, ServerCallContext)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Disable.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Disable
    path: ../EventStore/src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Disable.cs
    startLine: 10
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Grpc
  syntax:
    content: public override Task<DisableResp> Disable(DisableReq request, ServerCallContext context)
    parameters:
    - id: request
      type: DisableReq
    - id: context
      type: ServerCallContext
    return:
      type: Task{DisableResp}
    content.vb: Public Overrides Function Disable(request As DisableReq, context As ServerCallContext) As Task(Of DisableResp)
  overload: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Disable*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Enable(EnableReq,ServerCallContext)
  commentId: M:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Enable(EnableReq,ServerCallContext)
  id: Enable(EnableReq,ServerCallContext)
  parent: EventStore.Projections.Core.Services.Grpc.ProjectionManagement
  langs:
  - csharp
  - vb
  name: Enable(EnableReq, ServerCallContext)
  nameWithType: ProjectionManagement.Enable(EnableReq, ServerCallContext)
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Enable(EnableReq, ServerCallContext)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Enable.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Enable
    path: ../EventStore/src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Enable.cs
    startLine: 10
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Grpc
  syntax:
    content: public override Task<EnableResp> Enable(EnableReq request, ServerCallContext context)
    parameters:
    - id: request
      type: EnableReq
    - id: context
      type: ServerCallContext
    return:
      type: Task{EnableResp}
    content.vb: Public Overrides Function Enable(request As EnableReq, context As ServerCallContext) As Task(Of EnableResp)
  overload: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Enable*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Reset(ResetReq,ServerCallContext)
  commentId: M:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Reset(ResetReq,ServerCallContext)
  id: Reset(ResetReq,ServerCallContext)
  parent: EventStore.Projections.Core.Services.Grpc.ProjectionManagement
  langs:
  - csharp
  - vb
  name: Reset(ResetReq, ServerCallContext)
  nameWithType: ProjectionManagement.Reset(ResetReq, ServerCallContext)
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Reset(ResetReq, ServerCallContext)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Reset.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Reset
    path: ../EventStore/src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Reset.cs
    startLine: 10
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Grpc
  syntax:
    content: public override Task<ResetResp> Reset(ResetReq request, ServerCallContext context)
    parameters:
    - id: request
      type: ResetReq
    - id: context
      type: ServerCallContext
    return:
      type: Task{ResetResp}
    content.vb: Public Overrides Function Reset(request As ResetReq, context As ServerCallContext) As Task(Of ResetResp)
  overload: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Reset*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Result(ResultReq,ServerCallContext)
  commentId: M:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Result(ResultReq,ServerCallContext)
  id: Result(ResultReq,ServerCallContext)
  parent: EventStore.Projections.Core.Services.Grpc.ProjectionManagement
  langs:
  - csharp
  - vb
  name: Result(ResultReq, ServerCallContext)
  nameWithType: ProjectionManagement.Result(ResultReq, ServerCallContext)
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Result(ResultReq, ServerCallContext)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Result.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Result
    path: ../EventStore/src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Result.cs
    startLine: 10
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Grpc
  syntax:
    content: public override Task<ResultResp> Result(ResultReq request, ServerCallContext context)
    parameters:
    - id: request
      type: ResultReq
    - id: context
      type: ServerCallContext
    return:
      type: Task{ResultResp}
    content.vb: Public Overrides Function Result(request As ResultReq, context As ServerCallContext) As Task(Of ResultResp)
  overload: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Result*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.State(StateReq,ServerCallContext)
  commentId: M:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.State(StateReq,ServerCallContext)
  id: State(StateReq,ServerCallContext)
  parent: EventStore.Projections.Core.Services.Grpc.ProjectionManagement
  langs:
  - csharp
  - vb
  name: State(StateReq, ServerCallContext)
  nameWithType: ProjectionManagement.State(StateReq, ServerCallContext)
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.State(StateReq, ServerCallContext)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Result.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: State
    path: ../EventStore/src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Result.cs
    startLine: 44
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Grpc
  syntax:
    content: public override Task<StateResp> State(StateReq request, ServerCallContext context)
    parameters:
    - id: request
      type: StateReq
    - id: context
      type: ServerCallContext
    return:
      type: Task{StateResp}
    content.vb: Public Overrides Function State(request As StateReq, context As ServerCallContext) As Task(Of StateResp)
  overload: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.State*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Statistics(StatisticsReq,IServerStreamWriter{StatisticsResp},ServerCallContext)
  commentId: M:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Statistics(StatisticsReq,IServerStreamWriter{StatisticsResp},ServerCallContext)
  id: Statistics(StatisticsReq,IServerStreamWriter{StatisticsResp},ServerCallContext)
  parent: EventStore.Projections.Core.Services.Grpc.ProjectionManagement
  langs:
  - csharp
  - vb
  name: Statistics(StatisticsReq, IServerStreamWriter<StatisticsResp>, ServerCallContext)
  nameWithType: ProjectionManagement.Statistics(StatisticsReq, IServerStreamWriter<StatisticsResp>, ServerCallContext)
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Statistics(StatisticsReq, IServerStreamWriter<StatisticsResp>, ServerCallContext)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Statistics.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Statistics
    path: ../EventStore/src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Statistics.cs
    startLine: 10
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Grpc
  syntax:
    content: public override Task Statistics(StatisticsReq request, IServerStreamWriter<StatisticsResp> responseStream, ServerCallContext context)
    parameters:
    - id: request
      type: StatisticsReq
    - id: responseStream
      type: IServerStreamWriter{StatisticsResp}
    - id: context
      type: ServerCallContext
    return:
      type: Task
    content.vb: Public Overrides Function Statistics(request As StatisticsReq, responseStream As IServerStreamWriter(Of StatisticsResp), context As ServerCallContext) As Task
  overload: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Statistics*
  nameWithType.vb: ProjectionManagement.Statistics(StatisticsReq, IServerStreamWriter(Of StatisticsResp), ServerCallContext)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Statistics(StatisticsReq, IServerStreamWriter(Of StatisticsResp), ServerCallContext)
  name.vb: Statistics(StatisticsReq, IServerStreamWriter(Of StatisticsResp), ServerCallContext)
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Update(UpdateReq,ServerCallContext)
  commentId: M:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Update(UpdateReq,ServerCallContext)
  id: Update(UpdateReq,ServerCallContext)
  parent: EventStore.Projections.Core.Services.Grpc.ProjectionManagement
  langs:
  - csharp
  - vb
  name: Update(UpdateReq, ServerCallContext)
  nameWithType: ProjectionManagement.Update(UpdateReq, ServerCallContext)
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Update(UpdateReq, ServerCallContext)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Update.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Update
    path: ../EventStore/src/EventStore.Projections.Core/Services/Grpc/ProjectionManagement.Update.cs
    startLine: 10
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Grpc
  syntax:
    content: public override Task<UpdateResp> Update(UpdateReq request, ServerCallContext context)
    parameters:
    - id: request
      type: UpdateReq
    - id: context
      type: ServerCallContext
    return:
      type: Task{UpdateResp}
    content.vb: Public Overrides Function Update(request As UpdateReq, context As ServerCallContext) As Task(Of UpdateResp)
  overload: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Update*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: EventStore.Projections.Core.Services.Grpc
  commentId: N:EventStore.Projections.Core.Services.Grpc
  name: EventStore.Projections.Core.Services.Grpc
  nameWithType: EventStore.Projections.Core.Services.Grpc
  fullName: EventStore.Projections.Core.Services.Grpc
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Create*
  commentId: Overload:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Create
  name: Create
  nameWithType: ProjectionManagement.Create
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Create
- uid: CreateReq
  commentId: '!:CreateReq'
  isExternal: true
  name: CreateReq
  nameWithType: CreateReq
  fullName: CreateReq
- uid: ServerCallContext
  isExternal: true
  name: ServerCallContext
  nameWithType: ServerCallContext
  fullName: ServerCallContext
- uid: Task{CreateResp}
  commentId: '!:Task{CreateResp}'
  definition: Task`1
  name: Task<CreateResp>
  nameWithType: Task<CreateResp>
  fullName: Task<CreateResp>
  nameWithType.vb: Task(Of CreateResp)
  fullName.vb: Task(Of CreateResp)
  name.vb: Task(Of CreateResp)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CreateResp
    name: CreateResp
    nameWithType: CreateResp
    fullName: CreateResp
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CreateResp
    name: CreateResp
    nameWithType: CreateResp
    fullName: CreateResp
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.#ctor*
  commentId: Overload:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.#ctor
  name: ProjectionManagement
  nameWithType: ProjectionManagement.ProjectionManagement
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.ProjectionManagement
- uid: EventStore.Core.Bus.IQueuedHandler
  commentId: T:EventStore.Core.Bus.IQueuedHandler
  parent: EventStore.Core.Bus
  name: IQueuedHandler
  nameWithType: IQueuedHandler
  fullName: EventStore.Core.Bus.IQueuedHandler
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Delete*
  commentId: Overload:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Delete
  name: Delete
  nameWithType: ProjectionManagement.Delete
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Delete
- uid: DeleteReq
  commentId: '!:DeleteReq'
  isExternal: true
  name: DeleteReq
  nameWithType: DeleteReq
  fullName: DeleteReq
- uid: Task{DeleteResp}
  commentId: '!:Task{DeleteResp}'
  definition: Task`1
  name: Task<DeleteResp>
  nameWithType: Task<DeleteResp>
  fullName: Task<DeleteResp>
  nameWithType.vb: Task(Of DeleteResp)
  fullName.vb: Task(Of DeleteResp)
  name.vb: Task(Of DeleteResp)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DeleteResp
    name: DeleteResp
    nameWithType: DeleteResp
    fullName: DeleteResp
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DeleteResp
    name: DeleteResp
    nameWithType: DeleteResp
    fullName: DeleteResp
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Disable*
  commentId: Overload:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Disable
  name: Disable
  nameWithType: ProjectionManagement.Disable
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Disable
- uid: DisableReq
  commentId: '!:DisableReq'
  isExternal: true
  name: DisableReq
  nameWithType: DisableReq
  fullName: DisableReq
- uid: Task{DisableResp}
  commentId: '!:Task{DisableResp}'
  definition: Task`1
  name: Task<DisableResp>
  nameWithType: Task<DisableResp>
  fullName: Task<DisableResp>
  nameWithType.vb: Task(Of DisableResp)
  fullName.vb: Task(Of DisableResp)
  name.vb: Task(Of DisableResp)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DisableResp
    name: DisableResp
    nameWithType: DisableResp
    fullName: DisableResp
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DisableResp
    name: DisableResp
    nameWithType: DisableResp
    fullName: DisableResp
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Enable*
  commentId: Overload:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Enable
  name: Enable
  nameWithType: ProjectionManagement.Enable
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Enable
- uid: EnableReq
  commentId: '!:EnableReq'
  isExternal: true
  name: EnableReq
  nameWithType: EnableReq
  fullName: EnableReq
- uid: Task{EnableResp}
  commentId: '!:Task{EnableResp}'
  definition: Task`1
  name: Task<EnableResp>
  nameWithType: Task<EnableResp>
  fullName: Task<EnableResp>
  nameWithType.vb: Task(Of EnableResp)
  fullName.vb: Task(Of EnableResp)
  name.vb: Task(Of EnableResp)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EnableResp
    name: EnableResp
    nameWithType: EnableResp
    fullName: EnableResp
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EnableResp
    name: EnableResp
    nameWithType: EnableResp
    fullName: EnableResp
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Reset*
  commentId: Overload:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Reset
  name: Reset
  nameWithType: ProjectionManagement.Reset
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Reset
- uid: ResetReq
  commentId: '!:ResetReq'
  isExternal: true
  name: ResetReq
  nameWithType: ResetReq
  fullName: ResetReq
- uid: Task{ResetResp}
  commentId: '!:Task{ResetResp}'
  definition: Task`1
  name: Task<ResetResp>
  nameWithType: Task<ResetResp>
  fullName: Task<ResetResp>
  nameWithType.vb: Task(Of ResetResp)
  fullName.vb: Task(Of ResetResp)
  name.vb: Task(Of ResetResp)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ResetResp
    name: ResetResp
    nameWithType: ResetResp
    fullName: ResetResp
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ResetResp
    name: ResetResp
    nameWithType: ResetResp
    fullName: ResetResp
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Result*
  commentId: Overload:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Result
  name: Result
  nameWithType: ProjectionManagement.Result
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Result
- uid: ResultReq
  commentId: '!:ResultReq'
  isExternal: true
  name: ResultReq
  nameWithType: ResultReq
  fullName: ResultReq
- uid: Task{ResultResp}
  commentId: '!:Task{ResultResp}'
  definition: Task`1
  name: Task<ResultResp>
  nameWithType: Task<ResultResp>
  fullName: Task<ResultResp>
  nameWithType.vb: Task(Of ResultResp)
  fullName.vb: Task(Of ResultResp)
  name.vb: Task(Of ResultResp)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ResultResp
    name: ResultResp
    nameWithType: ResultResp
    fullName: ResultResp
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ResultResp
    name: ResultResp
    nameWithType: ResultResp
    fullName: ResultResp
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.State*
  commentId: Overload:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.State
  name: State
  nameWithType: ProjectionManagement.State
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.State
- uid: StateReq
  commentId: '!:StateReq'
  isExternal: true
  name: StateReq
  nameWithType: StateReq
  fullName: StateReq
- uid: Task{StateResp}
  commentId: '!:Task{StateResp}'
  definition: Task`1
  name: Task<StateResp>
  nameWithType: Task<StateResp>
  fullName: Task<StateResp>
  nameWithType.vb: Task(Of StateResp)
  fullName.vb: Task(Of StateResp)
  name.vb: Task(Of StateResp)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: StateResp
    name: StateResp
    nameWithType: StateResp
    fullName: StateResp
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: StateResp
    name: StateResp
    nameWithType: StateResp
    fullName: StateResp
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Statistics*
  commentId: Overload:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Statistics
  name: Statistics
  nameWithType: ProjectionManagement.Statistics
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Statistics
- uid: StatisticsReq
  commentId: '!:StatisticsReq'
  isExternal: true
  name: StatisticsReq
  nameWithType: StatisticsReq
  fullName: StatisticsReq
- uid: IServerStreamWriter{StatisticsResp}
  commentId: '!:IServerStreamWriter{StatisticsResp}'
  definition: IServerStreamWriter`1
  name: IServerStreamWriter<StatisticsResp>
  nameWithType: IServerStreamWriter<StatisticsResp>
  fullName: IServerStreamWriter<StatisticsResp>
  nameWithType.vb: IServerStreamWriter(Of StatisticsResp)
  fullName.vb: IServerStreamWriter(Of StatisticsResp)
  name.vb: IServerStreamWriter(Of StatisticsResp)
  spec.csharp:
  - uid: IServerStreamWriter`1
    name: IServerStreamWriter
    nameWithType: IServerStreamWriter
    fullName: IServerStreamWriter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: StatisticsResp
    name: StatisticsResp
    nameWithType: StatisticsResp
    fullName: StatisticsResp
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IServerStreamWriter`1
    name: IServerStreamWriter
    nameWithType: IServerStreamWriter
    fullName: IServerStreamWriter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: StatisticsResp
    name: StatisticsResp
    nameWithType: StatisticsResp
    fullName: StatisticsResp
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: IServerStreamWriter`1
  commentId: '!:IServerStreamWriter`1'
  isExternal: true
  name: IServerStreamWriter<>
  nameWithType: IServerStreamWriter<>
  fullName: IServerStreamWriter<>
  nameWithType.vb: IServerStreamWriter(Of )
  fullName.vb: IServerStreamWriter(Of )
  name.vb: IServerStreamWriter(Of )
  spec.csharp:
  - uid: IServerStreamWriter`1
    name: IServerStreamWriter
    nameWithType: IServerStreamWriter
    fullName: IServerStreamWriter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IServerStreamWriter`1
    name: IServerStreamWriter
    nameWithType: IServerStreamWriter
    fullName: IServerStreamWriter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Update*
  commentId: Overload:EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Update
  name: Update
  nameWithType: ProjectionManagement.Update
  fullName: EventStore.Projections.Core.Services.Grpc.ProjectionManagement.Update
- uid: UpdateReq
  commentId: '!:UpdateReq'
  isExternal: true
  name: UpdateReq
  nameWithType: UpdateReq
  fullName: UpdateReq
- uid: Task{UpdateResp}
  commentId: '!:Task{UpdateResp}'
  definition: Task`1
  name: Task<UpdateResp>
  nameWithType: Task<UpdateResp>
  fullName: Task<UpdateResp>
  nameWithType.vb: Task(Of UpdateResp)
  fullName.vb: Task(Of UpdateResp)
  name.vb: Task(Of UpdateResp)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UpdateResp
    name: UpdateResp
    nameWithType: UpdateResp
    fullName: UpdateResp
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UpdateResp
    name: UpdateResp
    nameWithType: UpdateResp
    fullName: UpdateResp
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )

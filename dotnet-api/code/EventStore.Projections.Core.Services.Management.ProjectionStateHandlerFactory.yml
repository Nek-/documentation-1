### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory
  commentId: T:EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory
  id: ProjectionStateHandlerFactory
  parent: EventStore.Projections.Core.Services.Management
  children:
  - EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory.Create(System.String,System.String,Action{System.Int32,Action},Action{System.String,System.Object[]})
  langs:
  - csharp
  - vb
  name: ProjectionStateHandlerFactory
  nameWithType: ProjectionStateHandlerFactory
  fullName: EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory
  type: Class
  source:
    id: ProjectionStateHandlerFactory
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Projections.Core/Services/Management/ProjectionStateHandlerFactory.cs
    startLine: 5
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Management
  syntax:
    content: 'public class ProjectionStateHandlerFactory : object'
    content.vb: >-
      Public Class ProjectionStateHandlerFactory

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory.Create(System.String,System.String,Action{System.Int32,Action},Action{System.String,System.Object[]})
  commentId: M:EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory.Create(System.String,System.String,Action{System.Int32,Action},Action{System.String,System.Object[]})
  id: Create(System.String,System.String,Action{System.Int32,Action},Action{System.String,System.Object[]})
  parent: EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory
  langs:
  - csharp
  - vb
  name: Create(String, String, Action<Int32, Action>, Action<String, Object[]>)
  nameWithType: ProjectionStateHandlerFactory.Create(String, String, Action<Int32, Action>, Action<String, Object[]>)
  fullName: EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory.Create(System.String, System.String, Action<System.Int32, Action>, Action<System.String, System.Object[]>)
  type: Method
  source:
    id: Create
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Projections.Core/Services/Management/ProjectionStateHandlerFactory.cs
    startLine: 6
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Management
  syntax:
    content: public IProjectionStateHandler Create(string factoryType, string source, Action<int, Action> cancelCallbackFactory = null, Action<string, object[]> logger = null)
    parameters:
    - id: factoryType
      type: System.String
    - id: source
      type: System.String
    - id: cancelCallbackFactory
      type: Action{System.Int32,Action}
    - id: logger
      type: Action{System.String,System.Object[]}
    return:
      type: EventStore.Projections.Core.Services.IProjectionStateHandler
    content.vb: Public Function Create(factoryType As String, source As String, cancelCallbackFactory As Action(Of Integer, Action) = Nothing, logger As Action(Of String, Object()) = Nothing) As IProjectionStateHandler
  overload: EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory.Create*
  nameWithType.vb: ProjectionStateHandlerFactory.Create(String, String, Action(Of Int32, Action), Action(Of String, Object()))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory.Create(System.String, System.String, Action(Of System.Int32, Action), Action(Of System.String, System.Object()))
  name.vb: Create(String, String, Action(Of Int32, Action), Action(Of String, Object()))
references:
- uid: EventStore.Projections.Core.Services.Management
  commentId: N:EventStore.Projections.Core.Services.Management
  name: EventStore.Projections.Core.Services.Management
  nameWithType: EventStore.Projections.Core.Services.Management
  fullName: EventStore.Projections.Core.Services.Management
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory.Create*
  commentId: Overload:EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory.Create
  name: Create
  nameWithType: ProjectionStateHandlerFactory.Create
  fullName: EventStore.Projections.Core.Services.Management.ProjectionStateHandlerFactory.Create
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Action{System.Int32,Action}
  commentId: '!:Action{System.Int32,Action}'
  definition: Action`2
  name: Action<Int32, Action>
  nameWithType: Action<Int32, Action>
  fullName: Action<System.Int32, Action>
  nameWithType.vb: Action(Of Int32, Action)
  fullName.vb: Action(Of System.Int32, Action)
  name.vb: Action(Of Int32, Action)
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{System.String,System.Object[]}
  commentId: '!:Action{System.String,System.Object[]}'
  definition: Action`2
  name: Action<String, Object[]>
  nameWithType: Action<String, Object[]>
  fullName: Action<System.String, System.Object[]>
  nameWithType.vb: Action(Of String, Object())
  fullName.vb: Action(Of System.String, System.Object())
  name.vb: Action(Of String, Object())
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services.IProjectionStateHandler
  commentId: T:EventStore.Projections.Core.Services.IProjectionStateHandler
  parent: EventStore.Projections.Core.Services
  name: IProjectionStateHandler
  nameWithType: IProjectionStateHandler
  fullName: EventStore.Projections.Core.Services.IProjectionStateHandler
- uid: Action`2
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services
  commentId: N:EventStore.Projections.Core.Services
  name: EventStore.Projections.Core.Services
  nameWithType: EventStore.Projections.Core.Services
  fullName: EventStore.Projections.Core.Services

### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Services.Processing.ExtraMetaData
  commentId: T:EventStore.Projections.Core.Services.Processing.ExtraMetaData
  id: ExtraMetaData
  parent: EventStore.Projections.Core.Services.Processing
  children:
  - EventStore.Projections.Core.Services.Processing.ExtraMetaData.#ctor(Dictionary{System.String,JRaw})
  - EventStore.Projections.Core.Services.Processing.ExtraMetaData.#ctor(Dictionary{System.String,System.String})
  - EventStore.Projections.Core.Services.Processing.ExtraMetaData.Metadata
  langs:
  - csharp
  - vb
  name: ExtraMetaData
  nameWithType: ExtraMetaData
  fullName: EventStore.Projections.Core.Services.Processing.ExtraMetaData
  type: Class
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ExtraMetaData.cs
      branch: feature/docs-connection-code
      repo: git@github.com:EventStore/EventStore.git
    id: ExtraMetaData
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ExtraMetaData.cs
    startLine: 5
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: 'public class ExtraMetaData : object'
    content.vb: >-
      Public Class ExtraMetaData

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Projections.Core.Services.Processing.ExtraMetaData.#ctor(Dictionary{System.String,JRaw})
  commentId: M:EventStore.Projections.Core.Services.Processing.ExtraMetaData.#ctor(Dictionary{System.String,JRaw})
  id: '#ctor(Dictionary{System.String,JRaw})'
  parent: EventStore.Projections.Core.Services.Processing.ExtraMetaData
  langs:
  - csharp
  - vb
  name: ExtraMetaData(Dictionary<String, JRaw>)
  nameWithType: ExtraMetaData.ExtraMetaData(Dictionary<String, JRaw>)
  fullName: EventStore.Projections.Core.Services.Processing.ExtraMetaData.ExtraMetaData(Dictionary<System.String, JRaw>)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ExtraMetaData.cs
      branch: feature/docs-connection-code
      repo: git@github.com:EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ExtraMetaData.cs
    startLine: 8
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public ExtraMetaData(Dictionary<string, JRaw> metadata)
    parameters:
    - id: metadata
      type: Dictionary{System.String,JRaw}
    content.vb: Public Sub New(metadata As Dictionary(Of String, JRaw))
  overload: EventStore.Projections.Core.Services.Processing.ExtraMetaData.#ctor*
  nameWithType.vb: ExtraMetaData.ExtraMetaData(Dictionary(Of String, JRaw))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Projections.Core.Services.Processing.ExtraMetaData.ExtraMetaData(Dictionary(Of System.String, JRaw))
  name.vb: ExtraMetaData(Dictionary(Of String, JRaw))
- uid: EventStore.Projections.Core.Services.Processing.ExtraMetaData.#ctor(Dictionary{System.String,System.String})
  commentId: M:EventStore.Projections.Core.Services.Processing.ExtraMetaData.#ctor(Dictionary{System.String,System.String})
  id: '#ctor(Dictionary{System.String,System.String})'
  parent: EventStore.Projections.Core.Services.Processing.ExtraMetaData
  langs:
  - csharp
  - vb
  name: ExtraMetaData(Dictionary<String, String>)
  nameWithType: ExtraMetaData.ExtraMetaData(Dictionary<String, String>)
  fullName: EventStore.Projections.Core.Services.Processing.ExtraMetaData.ExtraMetaData(Dictionary<System.String, System.String>)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ExtraMetaData.cs
      branch: feature/docs-connection-code
      repo: git@github.com:EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ExtraMetaData.cs
    startLine: 12
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public ExtraMetaData(Dictionary<string, string> metadata)
    parameters:
    - id: metadata
      type: Dictionary{System.String,System.String}
    content.vb: Public Sub New(metadata As Dictionary(Of String, String))
  overload: EventStore.Projections.Core.Services.Processing.ExtraMetaData.#ctor*
  nameWithType.vb: ExtraMetaData.ExtraMetaData(Dictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Projections.Core.Services.Processing.ExtraMetaData.ExtraMetaData(Dictionary(Of System.String, System.String))
  name.vb: ExtraMetaData(Dictionary(Of String, String))
- uid: EventStore.Projections.Core.Services.Processing.ExtraMetaData.Metadata
  commentId: P:EventStore.Projections.Core.Services.Processing.ExtraMetaData.Metadata
  id: Metadata
  parent: EventStore.Projections.Core.Services.Processing.ExtraMetaData
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: ExtraMetaData.Metadata
  fullName: EventStore.Projections.Core.Services.Processing.ExtraMetaData.Metadata
  type: Property
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ExtraMetaData.cs
      branch: feature/docs-connection-code
      repo: git@github.com:EventStore/EventStore.git
    id: Metadata
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ExtraMetaData.cs
    startLine: 16
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public Dictionary<string, string> Metadata { get; }
    parameters: []
    return:
      type: Dictionary{System.String,System.String}
    content.vb: Public ReadOnly Property Metadata As Dictionary(Of String, String)
  overload: EventStore.Projections.Core.Services.Processing.ExtraMetaData.Metadata*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: EventStore.Projections.Core.Services.Processing
  commentId: N:EventStore.Projections.Core.Services.Processing
  name: EventStore.Projections.Core.Services.Processing
  nameWithType: EventStore.Projections.Core.Services.Processing
  fullName: EventStore.Projections.Core.Services.Processing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Projections.Core.Services.Processing.ExtraMetaData.#ctor*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.ExtraMetaData.#ctor
  name: ExtraMetaData
  nameWithType: ExtraMetaData.ExtraMetaData
  fullName: EventStore.Projections.Core.Services.Processing.ExtraMetaData.ExtraMetaData
- uid: Dictionary{System.String,JRaw}
  commentId: '!:Dictionary{System.String,JRaw}'
  definition: Dictionary`2
  name: Dictionary<String, JRaw>
  nameWithType: Dictionary<String, JRaw>
  fullName: Dictionary<System.String, JRaw>
  nameWithType.vb: Dictionary(Of String, JRaw)
  fullName.vb: Dictionary(Of System.String, JRaw)
  name.vb: Dictionary(Of String, JRaw)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: JRaw
    name: JRaw
    nameWithType: JRaw
    fullName: JRaw
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: JRaw
    name: JRaw
    nameWithType: JRaw
    fullName: JRaw
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary{System.String,System.String}
  commentId: '!:Dictionary{System.String,System.String}'
  definition: Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Services.Processing.ExtraMetaData.Metadata*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.ExtraMetaData.Metadata
  name: Metadata
  nameWithType: ExtraMetaData.Metadata
  fullName: EventStore.Projections.Core.Services.Processing.ExtraMetaData.Metadata

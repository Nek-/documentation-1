### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  commentId: T:EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  id: ProjectionCoreService
  parent: EventStore.Projections.Core.Services.Processing
  children:
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.#ctor(Guid,EventStore.Core.Bus.IPublisher,EventStore.Core.Bus.IPublisher,EventStore.Projections.Core.Services.ReaderSubscriptionDispatcher,EventStore.Core.Services.TimerService.ITimeProvider,EventStore.Core.Helpers.IODispatcher,EventStore.Projections.Core.Services.ISingletonTimeoutScheduler)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.CreateStateHandler(EventStore.Projections.Core.Services.ISingletonTimeoutScheduler,EventStore.Common.Log.ILogger,System.String,System.String)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.Failed)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.RestartRequested)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout)
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Logger
  - EventStore.Projections.Core.Services.Processing.ProjectionCoreService.SubComponentName
  langs:
  - csharp
  - vb
  name: ProjectionCoreService
  nameWithType: ProjectionCoreService
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  type: Class
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: ProjectionCoreService
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 14
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: 'public class ProjectionCoreService : object, IHandle<ProjectionCoreServiceMessage.StartCore>, IHandle<ProjectionCoreServiceMessage.StopCore>, IHandle<ProjectionCoreServiceMessage.CoreTick>, IHandle<CoreProjectionManagementMessage.CreateAndPrepare>, IHandle<CoreProjectionManagementMessage.CreatePrepared>, IHandle<CoreProjectionManagementMessage.Dispose>, IHandle<CoreProjectionManagementMessage.Start>, IHandle<CoreProjectionManagementMessage.LoadStopped>, IHandle<CoreProjectionManagementMessage.Stop>, IHandle<CoreProjectionManagementMessage.Kill>, IHandle<CoreProjectionManagementMessage.GetState>, IHandle<CoreProjectionManagementMessage.GetResult>, IHandle<CoreProjectionProcessingMessage.CheckpointCompleted>, IHandle<CoreProjectionProcessingMessage.CheckpointLoaded>, IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>, IHandle<CoreProjectionProcessingMessage.RestartRequested>, IHandle<CoreProjectionProcessingMessage.Failed>, IHandle<ProjectionCoreServiceMessage.StopCoreTimeout>, IHandle<CoreProjectionStatusMessage.Suspended>'
    content.vb: >-
      Public Class ProjectionCoreService

          Inherits Object

          Implements IHandle(Of ProjectionCoreServiceMessage.StartCore), IHandle(Of ProjectionCoreServiceMessage.StopCore), IHandle(Of ProjectionCoreServiceMessage.CoreTick), IHandle(Of CoreProjectionManagementMessage.CreateAndPrepare), IHandle(Of CoreProjectionManagementMessage.CreatePrepared), IHandle(Of CoreProjectionManagementMessage.Dispose), IHandle(Of CoreProjectionManagementMessage.Start), IHandle(Of CoreProjectionManagementMessage.LoadStopped), IHandle(Of CoreProjectionManagementMessage.Stop), IHandle(Of CoreProjectionManagementMessage.Kill), IHandle(Of CoreProjectionManagementMessage.GetState), IHandle(Of CoreProjectionManagementMessage.GetResult), IHandle(Of CoreProjectionProcessingMessage.CheckpointCompleted), IHandle(Of CoreProjectionProcessingMessage.CheckpointLoaded), IHandle(Of CoreProjectionProcessingMessage.PrerecordedEventsLoaded), IHandle(Of CoreProjectionProcessingMessage.RestartRequested), IHandle(Of CoreProjectionProcessingMessage.Failed), IHandle(Of ProjectionCoreServiceMessage.StopCoreTimeout), IHandle(Of CoreProjectionStatusMessage.Suspended)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult}
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointCompleted}
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointLoaded}
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.PrerecordedEventsLoaded}
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended}
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.SubComponentName
  commentId: F:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.SubComponentName
  id: SubComponentName
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: SubComponentName
  nameWithType: ProjectionCoreService.SubComponentName
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.SubComponentName
  type: Field
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: SubComponentName
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 34
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public const string SubComponentName = null
    return:
      type: System.String
    content.vb: Public Const SubComponentName As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.#ctor(Guid,EventStore.Core.Bus.IPublisher,EventStore.Core.Bus.IPublisher,EventStore.Projections.Core.Services.ReaderSubscriptionDispatcher,EventStore.Core.Services.TimerService.ITimeProvider,EventStore.Core.Helpers.IODispatcher,EventStore.Projections.Core.Services.ISingletonTimeoutScheduler)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.#ctor(Guid,EventStore.Core.Bus.IPublisher,EventStore.Core.Bus.IPublisher,EventStore.Projections.Core.Services.ReaderSubscriptionDispatcher,EventStore.Core.Services.TimerService.ITimeProvider,EventStore.Core.Helpers.IODispatcher,EventStore.Projections.Core.Services.ISingletonTimeoutScheduler)
  id: '#ctor(Guid,EventStore.Core.Bus.IPublisher,EventStore.Core.Bus.IPublisher,EventStore.Projections.Core.Services.ReaderSubscriptionDispatcher,EventStore.Core.Services.TimerService.ITimeProvider,EventStore.Core.Helpers.IODispatcher,EventStore.Projections.Core.Services.ISingletonTimeoutScheduler)'
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: ProjectionCoreService(Guid, IPublisher, IPublisher, ReaderSubscriptionDispatcher, ITimeProvider, IODispatcher, ISingletonTimeoutScheduler)
  nameWithType: ProjectionCoreService.ProjectionCoreService(Guid, IPublisher, IPublisher, ReaderSubscriptionDispatcher, ITimeProvider, IODispatcher, ISingletonTimeoutScheduler)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.ProjectionCoreService(Guid, EventStore.Core.Bus.IPublisher, EventStore.Core.Bus.IPublisher, EventStore.Projections.Core.Services.ReaderSubscriptionDispatcher, EventStore.Core.Services.TimerService.ITimeProvider, EventStore.Core.Helpers.IODispatcher, EventStore.Projections.Core.Services.ISingletonTimeoutScheduler)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 57
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public ProjectionCoreService(Guid workerId, IPublisher inputQueue, IPublisher publisher, ReaderSubscriptionDispatcher subscriptionDispatcher, ITimeProvider timeProvider, IODispatcher ioDispatcher, ISingletonTimeoutScheduler timeoutScheduler)
    parameters:
    - id: workerId
      type: Guid
    - id: inputQueue
      type: EventStore.Core.Bus.IPublisher
    - id: publisher
      type: EventStore.Core.Bus.IPublisher
    - id: subscriptionDispatcher
      type: EventStore.Projections.Core.Services.ReaderSubscriptionDispatcher
    - id: timeProvider
      type: EventStore.Core.Services.TimerService.ITimeProvider
    - id: ioDispatcher
      type: EventStore.Core.Helpers.IODispatcher
    - id: timeoutScheduler
      type: EventStore.Projections.Core.Services.ISingletonTimeoutScheduler
    content.vb: Public Sub New(workerId As Guid, inputQueue As IPublisher, publisher As IPublisher, subscriptionDispatcher As ReaderSubscriptionDispatcher, timeProvider As ITimeProvider, ioDispatcher As IODispatcher, timeoutScheduler As ISingletonTimeoutScheduler)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Logger
  commentId: P:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Logger
  id: Logger
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: ProjectionCoreService.Logger
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Logger
  type: Property
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Logger
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 75
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public ILogger Logger { get; }
    parameters: []
    return:
      type: EventStore.Common.Log.ILogger
    content.vb: Public ReadOnly Property Logger As ILogger
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Logger*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore)
  id: Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(ProjectionCoreServiceMessage.StartCore)
  nameWithType: ProjectionCoreService.Handle(ProjectionCoreServiceMessage.StartCore)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 79
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(ProjectionCoreServiceMessage.StartCore message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore
    content.vb: Public Sub Handle(message As ProjectionCoreServiceMessage.StartCore)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore)
  id: Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(ProjectionCoreServiceMessage.StopCore)
  nameWithType: ProjectionCoreService.Handle(ProjectionCoreServiceMessage.StopCore)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 84
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(ProjectionCoreServiceMessage.StopCore message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore
    content.vb: Public Sub Handle(message As ProjectionCoreServiceMessage.StopCore)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout)
  id: Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(ProjectionCoreServiceMessage.StopCoreTimeout)
  nameWithType: ProjectionCoreService.Handle(ProjectionCoreServiceMessage.StopCoreTimeout)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 114
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(ProjectionCoreServiceMessage.StopCoreTimeout message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout
    content.vb: Public Sub Handle(message As ProjectionCoreServiceMessage.StopCoreTimeout)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended)
  id: Handle(EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionStatusMessage.Suspended)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionStatusMessage.Suspended)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 120
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionStatusMessage.Suspended message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended
    content.vb: Public Sub Handle(message As CoreProjectionStatusMessage.Suspended)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended}.Handle(EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick)
  id: Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(ProjectionCoreServiceMessage.CoreTick)
  nameWithType: ProjectionCoreService.Handle(ProjectionCoreServiceMessage.CoreTick)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 139
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(ProjectionCoreServiceMessage.CoreTick message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick
    content.vb: Public Sub Handle(message As ProjectionCoreServiceMessage.CoreTick)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare)
  id: Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionManagementMessage.CreateAndPrepare)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionManagementMessage.CreateAndPrepare)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 143
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionManagementMessage.CreateAndPrepare message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare
    content.vb: Public Sub Handle(message As CoreProjectionManagementMessage.CreateAndPrepare)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared)
  id: Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionManagementMessage.CreatePrepared)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionManagementMessage.CreatePrepared)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 179
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionManagementMessage.CreatePrepared message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared
    content.vb: Public Sub Handle(message As CoreProjectionManagementMessage.CreatePrepared)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose)
  id: Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionManagementMessage.Dispose)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionManagementMessage.Dispose)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 221
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionManagementMessage.Dispose message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose
    content.vb: Public Sub Handle(message As CoreProjectionManagementMessage.Dispose)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start)
  id: Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionManagementMessage.Start)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionManagementMessage.Start)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 229
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionManagementMessage.Start message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start
    content.vb: Public Sub Handle(message As CoreProjectionManagementMessage.Start)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped)
  id: Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionManagementMessage.LoadStopped)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionManagementMessage.LoadStopped)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 234
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionManagementMessage.LoadStopped message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped
    content.vb: Public Sub Handle(message As CoreProjectionManagementMessage.LoadStopped)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop)
  id: Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionManagementMessage.Stop)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionManagementMessage.Stop)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 239
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionManagementMessage.Stop message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop
    content.vb: Public Sub Handle(message As CoreProjectionManagementMessage.Stop)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill)
  id: Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionManagementMessage.Kill)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionManagementMessage.Kill)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 244
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionManagementMessage.Kill message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill
    content.vb: Public Sub Handle(message As CoreProjectionManagementMessage.Kill)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState)
  id: Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionManagementMessage.GetState)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionManagementMessage.GetState)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 249
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionManagementMessage.GetState message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState
    content.vb: Public Sub Handle(message As CoreProjectionManagementMessage.GetState)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult)
  id: Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionManagementMessage.GetResult)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionManagementMessage.GetResult)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 255
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionManagementMessage.GetResult message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult
    content.vb: Public Sub Handle(message As CoreProjectionManagementMessage.GetResult)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  id: Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 261
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionProcessingMessage.CheckpointCompleted message)
    parameters:
    - id: message
      type: CoreProjectionProcessingMessage.CheckpointCompleted
    content.vb: Public Sub Handle(message As CoreProjectionProcessingMessage.CheckpointCompleted)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointCompleted}.Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  id: Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 267
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionProcessingMessage.CheckpointLoaded message)
    parameters:
    - id: message
      type: CoreProjectionProcessingMessage.CheckpointLoaded
    content.vb: Public Sub Handle(message As CoreProjectionProcessingMessage.CheckpointLoaded)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointLoaded}.Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  id: Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 273
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded message)
    parameters:
    - id: message
      type: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
    content.vb: Public Sub Handle(message As CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.PrerecordedEventsLoaded}.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.RestartRequested)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.RestartRequested)
  id: Handle(CoreProjectionProcessingMessage.RestartRequested)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionProcessingMessage.RestartRequested)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionProcessingMessage.RestartRequested)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.RestartRequested)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 279
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionProcessingMessage.RestartRequested message)
    parameters:
    - id: message
      type: CoreProjectionProcessingMessage.RestartRequested
    content.vb: Public Sub Handle(message As CoreProjectionProcessingMessage.RestartRequested)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}.Handle(CoreProjectionProcessingMessage.RestartRequested)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.Failed)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.Failed)
  id: Handle(CoreProjectionProcessingMessage.Failed)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: Handle(CoreProjectionProcessingMessage.Failed)
  nameWithType: ProjectionCoreService.Handle(CoreProjectionProcessingMessage.Failed)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle(CoreProjectionProcessingMessage.Failed)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 285
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(CoreProjectionProcessingMessage.Failed message)
    parameters:
    - id: message
      type: CoreProjectionProcessingMessage.Failed
    content.vb: Public Sub Handle(message As CoreProjectionProcessingMessage.Failed)
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}.Handle(CoreProjectionProcessingMessage.Failed)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.CreateStateHandler(EventStore.Projections.Core.Services.ISingletonTimeoutScheduler,EventStore.Common.Log.ILogger,System.String,System.String)
  commentId: M:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.CreateStateHandler(EventStore.Projections.Core.Services.ISingletonTimeoutScheduler,EventStore.Common.Log.ILogger,System.String,System.String)
  id: CreateStateHandler(EventStore.Projections.Core.Services.ISingletonTimeoutScheduler,EventStore.Common.Log.ILogger,System.String,System.String)
  parent: EventStore.Projections.Core.Services.Processing.ProjectionCoreService
  langs:
  - csharp
  - vb
  name: CreateStateHandler(ISingletonTimeoutScheduler, ILogger, String, String)
  nameWithType: ProjectionCoreService.CreateStateHandler(ISingletonTimeoutScheduler, ILogger, String, String)
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.CreateStateHandler(EventStore.Projections.Core.Services.ISingletonTimeoutScheduler, EventStore.Common.Log.ILogger, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: CreateStateHandler
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/ProjectionCoreService.cs
    startLine: 291
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public static IProjectionStateHandler CreateStateHandler(ISingletonTimeoutScheduler singletonTimeoutScheduler, ILogger logger, string handlerType, string query)
    parameters:
    - id: singletonTimeoutScheduler
      type: EventStore.Projections.Core.Services.ISingletonTimeoutScheduler
    - id: logger
      type: EventStore.Common.Log.ILogger
    - id: handlerType
      type: System.String
    - id: query
      type: System.String
    return:
      type: EventStore.Projections.Core.Services.IProjectionStateHandler
    content.vb: Public Shared Function CreateStateHandler(singletonTimeoutScheduler As ISingletonTimeoutScheduler, logger As ILogger, handlerType As String, query As String) As IProjectionStateHandler
  overload: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.CreateStateHandler*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EventStore.Projections.Core.Services.Processing
  commentId: N:EventStore.Projections.Core.Services.Processing
  name: EventStore.Projections.Core.Services.Processing
  nameWithType: EventStore.Projections.Core.Services.Processing
  fullName: EventStore.Projections.Core.Services.Processing
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ProjectionCoreServiceMessage.StartCore>
  nameWithType: IHandle<ProjectionCoreServiceMessage.StartCore>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore>
  nameWithType.vb: IHandle(Of ProjectionCoreServiceMessage.StartCore)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore)
  name.vb: IHandle(Of ProjectionCoreServiceMessage.StartCore)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore
    name: ProjectionCoreServiceMessage.StartCore
    nameWithType: ProjectionCoreServiceMessage.StartCore
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore
    name: ProjectionCoreServiceMessage.StartCore
    nameWithType: ProjectionCoreServiceMessage.StartCore
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ProjectionCoreServiceMessage.StopCore>
  nameWithType: IHandle<ProjectionCoreServiceMessage.StopCore>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore>
  nameWithType.vb: IHandle(Of ProjectionCoreServiceMessage.StopCore)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore)
  name.vb: IHandle(Of ProjectionCoreServiceMessage.StopCore)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore
    name: ProjectionCoreServiceMessage.StopCore
    nameWithType: ProjectionCoreServiceMessage.StopCore
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore
    name: ProjectionCoreServiceMessage.StopCore
    nameWithType: ProjectionCoreServiceMessage.StopCore
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ProjectionCoreServiceMessage.CoreTick>
  nameWithType: IHandle<ProjectionCoreServiceMessage.CoreTick>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick>
  nameWithType.vb: IHandle(Of ProjectionCoreServiceMessage.CoreTick)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick)
  name.vb: IHandle(Of ProjectionCoreServiceMessage.CoreTick)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick
    name: ProjectionCoreServiceMessage.CoreTick
    nameWithType: ProjectionCoreServiceMessage.CoreTick
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick
    name: ProjectionCoreServiceMessage.CoreTick
    nameWithType: ProjectionCoreServiceMessage.CoreTick
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionManagementMessage.CreateAndPrepare>
  nameWithType: IHandle<CoreProjectionManagementMessage.CreateAndPrepare>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare>
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.CreateAndPrepare)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare)
  name.vb: IHandle(Of CoreProjectionManagementMessage.CreateAndPrepare)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare
    name: CoreProjectionManagementMessage.CreateAndPrepare
    nameWithType: CoreProjectionManagementMessage.CreateAndPrepare
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare
    name: CoreProjectionManagementMessage.CreateAndPrepare
    nameWithType: CoreProjectionManagementMessage.CreateAndPrepare
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionManagementMessage.CreatePrepared>
  nameWithType: IHandle<CoreProjectionManagementMessage.CreatePrepared>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared>
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.CreatePrepared)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared)
  name.vb: IHandle(Of CoreProjectionManagementMessage.CreatePrepared)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared
    name: CoreProjectionManagementMessage.CreatePrepared
    nameWithType: CoreProjectionManagementMessage.CreatePrepared
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared
    name: CoreProjectionManagementMessage.CreatePrepared
    nameWithType: CoreProjectionManagementMessage.CreatePrepared
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionManagementMessage.Dispose>
  nameWithType: IHandle<CoreProjectionManagementMessage.Dispose>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose>
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.Dispose)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose)
  name.vb: IHandle(Of CoreProjectionManagementMessage.Dispose)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose
    name: CoreProjectionManagementMessage.Dispose
    nameWithType: CoreProjectionManagementMessage.Dispose
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose
    name: CoreProjectionManagementMessage.Dispose
    nameWithType: CoreProjectionManagementMessage.Dispose
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionManagementMessage.Start>
  nameWithType: IHandle<CoreProjectionManagementMessage.Start>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start>
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.Start)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start)
  name.vb: IHandle(Of CoreProjectionManagementMessage.Start)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start
    name: CoreProjectionManagementMessage.Start
    nameWithType: CoreProjectionManagementMessage.Start
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start
    name: CoreProjectionManagementMessage.Start
    nameWithType: CoreProjectionManagementMessage.Start
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionManagementMessage.LoadStopped>
  nameWithType: IHandle<CoreProjectionManagementMessage.LoadStopped>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped>
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.LoadStopped)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped)
  name.vb: IHandle(Of CoreProjectionManagementMessage.LoadStopped)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped
    name: CoreProjectionManagementMessage.LoadStopped
    nameWithType: CoreProjectionManagementMessage.LoadStopped
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped
    name: CoreProjectionManagementMessage.LoadStopped
    nameWithType: CoreProjectionManagementMessage.LoadStopped
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionManagementMessage.Stop>
  nameWithType: IHandle<CoreProjectionManagementMessage.Stop>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop>
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.Stop)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop)
  name.vb: IHandle(Of CoreProjectionManagementMessage.Stop)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop
    name: CoreProjectionManagementMessage.Stop
    nameWithType: CoreProjectionManagementMessage.Stop
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop
    name: CoreProjectionManagementMessage.Stop
    nameWithType: CoreProjectionManagementMessage.Stop
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionManagementMessage.Kill>
  nameWithType: IHandle<CoreProjectionManagementMessage.Kill>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill>
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.Kill)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill)
  name.vb: IHandle(Of CoreProjectionManagementMessage.Kill)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill
    name: CoreProjectionManagementMessage.Kill
    nameWithType: CoreProjectionManagementMessage.Kill
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill
    name: CoreProjectionManagementMessage.Kill
    nameWithType: CoreProjectionManagementMessage.Kill
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionManagementMessage.GetState>
  nameWithType: IHandle<CoreProjectionManagementMessage.GetState>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState>
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.GetState)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState)
  name.vb: IHandle(Of CoreProjectionManagementMessage.GetState)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState
    name: CoreProjectionManagementMessage.GetState
    nameWithType: CoreProjectionManagementMessage.GetState
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState
    name: CoreProjectionManagementMessage.GetState
    nameWithType: CoreProjectionManagementMessage.GetState
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionManagementMessage.GetResult>
  nameWithType: IHandle<CoreProjectionManagementMessage.GetResult>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult>
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.GetResult)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult)
  name.vb: IHandle(Of CoreProjectionManagementMessage.GetResult)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult
    name: CoreProjectionManagementMessage.GetResult
    nameWithType: CoreProjectionManagementMessage.GetResult
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult
    name: CoreProjectionManagementMessage.GetResult
    nameWithType: CoreProjectionManagementMessage.GetResult
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointCompleted}
  commentId: T:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointCompleted}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionProcessingMessage.CheckpointCompleted>
  nameWithType: IHandle<CoreProjectionProcessingMessage.CheckpointCompleted>
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.CheckpointCompleted>
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.CheckpointCompleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.CheckpointCompleted)
  name.vb: IHandle(Of CoreProjectionProcessingMessage.CheckpointCompleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.CheckpointCompleted
    name: CoreProjectionProcessingMessage.CheckpointCompleted
    nameWithType: CoreProjectionProcessingMessage.CheckpointCompleted
    fullName: CoreProjectionProcessingMessage.CheckpointCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.CheckpointCompleted
    name: CoreProjectionProcessingMessage.CheckpointCompleted
    nameWithType: CoreProjectionProcessingMessage.CheckpointCompleted
    fullName: CoreProjectionProcessingMessage.CheckpointCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointLoaded}
  commentId: T:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointLoaded}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionProcessingMessage.CheckpointLoaded>
  nameWithType: IHandle<CoreProjectionProcessingMessage.CheckpointLoaded>
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.CheckpointLoaded>
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.CheckpointLoaded)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.CheckpointLoaded)
  name.vb: IHandle(Of CoreProjectionProcessingMessage.CheckpointLoaded)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.CheckpointLoaded
    name: CoreProjectionProcessingMessage.CheckpointLoaded
    nameWithType: CoreProjectionProcessingMessage.CheckpointLoaded
    fullName: CoreProjectionProcessingMessage.CheckpointLoaded
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.CheckpointLoaded
    name: CoreProjectionProcessingMessage.CheckpointLoaded
    nameWithType: CoreProjectionProcessingMessage.CheckpointLoaded
    fullName: CoreProjectionProcessingMessage.CheckpointLoaded
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.PrerecordedEventsLoaded}
  commentId: T:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.PrerecordedEventsLoaded}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>
  nameWithType: IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  name.vb: IHandle(Of CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
    name: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
    nameWithType: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
    fullName: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
    name: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
    nameWithType: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
    fullName: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}
  commentId: T:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionProcessingMessage.RestartRequested>
  nameWithType: IHandle<CoreProjectionProcessingMessage.RestartRequested>
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.RestartRequested>
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.RestartRequested)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.RestartRequested)
  name.vb: IHandle(Of CoreProjectionProcessingMessage.RestartRequested)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.RestartRequested
    name: CoreProjectionProcessingMessage.RestartRequested
    nameWithType: CoreProjectionProcessingMessage.RestartRequested
    fullName: CoreProjectionProcessingMessage.RestartRequested
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.RestartRequested
    name: CoreProjectionProcessingMessage.RestartRequested
    nameWithType: CoreProjectionProcessingMessage.RestartRequested
    fullName: CoreProjectionProcessingMessage.RestartRequested
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}
  commentId: T:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionProcessingMessage.Failed>
  nameWithType: IHandle<CoreProjectionProcessingMessage.Failed>
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.Failed>
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.Failed)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.Failed)
  name.vb: IHandle(Of CoreProjectionProcessingMessage.Failed)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreProjectionProcessingMessage.Failed
    name: CoreProjectionProcessingMessage.Failed
    nameWithType: CoreProjectionProcessingMessage.Failed
    fullName: CoreProjectionProcessingMessage.Failed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreProjectionProcessingMessage.Failed
    name: CoreProjectionProcessingMessage.Failed
    nameWithType: CoreProjectionProcessingMessage.Failed
    fullName: CoreProjectionProcessingMessage.Failed
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ProjectionCoreServiceMessage.StopCoreTimeout>
  nameWithType: IHandle<ProjectionCoreServiceMessage.StopCoreTimeout>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout>
  nameWithType.vb: IHandle(Of ProjectionCoreServiceMessage.StopCoreTimeout)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout)
  name.vb: IHandle(Of ProjectionCoreServiceMessage.StopCoreTimeout)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout
    name: ProjectionCoreServiceMessage.StopCoreTimeout
    nameWithType: ProjectionCoreServiceMessage.StopCoreTimeout
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout
    name: ProjectionCoreServiceMessage.StopCoreTimeout
    nameWithType: ProjectionCoreServiceMessage.StopCoreTimeout
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<CoreProjectionStatusMessage.Suspended>
  nameWithType: IHandle<CoreProjectionStatusMessage.Suspended>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended>
  nameWithType.vb: IHandle(Of CoreProjectionStatusMessage.Suspended)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended)
  name.vb: IHandle(Of CoreProjectionStatusMessage.Suspended)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended
    name: CoreProjectionStatusMessage.Suspended
    nameWithType: CoreProjectionStatusMessage.Suspended
    fullName: EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended
    name: CoreProjectionStatusMessage.Suspended
    nameWithType: CoreProjectionStatusMessage.Suspended
    fullName: EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.#ctor*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.#ctor
  name: ProjectionCoreService
  nameWithType: ProjectionCoreService.ProjectionCoreService
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.ProjectionCoreService
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Projections.Core.Services.ReaderSubscriptionDispatcher
  commentId: T:EventStore.Projections.Core.Services.ReaderSubscriptionDispatcher
  parent: EventStore.Projections.Core.Services
  name: ReaderSubscriptionDispatcher
  nameWithType: ReaderSubscriptionDispatcher
  fullName: EventStore.Projections.Core.Services.ReaderSubscriptionDispatcher
- uid: EventStore.Core.Services.TimerService.ITimeProvider
  commentId: T:EventStore.Core.Services.TimerService.ITimeProvider
  parent: EventStore.Core.Services.TimerService
  name: ITimeProvider
  nameWithType: ITimeProvider
  fullName: EventStore.Core.Services.TimerService.ITimeProvider
- uid: EventStore.Core.Helpers.IODispatcher
  commentId: T:EventStore.Core.Helpers.IODispatcher
  parent: EventStore.Core.Helpers
  name: IODispatcher
  nameWithType: IODispatcher
  fullName: EventStore.Core.Helpers.IODispatcher
- uid: EventStore.Projections.Core.Services.ISingletonTimeoutScheduler
  commentId: T:EventStore.Projections.Core.Services.ISingletonTimeoutScheduler
  parent: EventStore.Projections.Core.Services
  name: ISingletonTimeoutScheduler
  nameWithType: ISingletonTimeoutScheduler
  fullName: EventStore.Projections.Core.Services.ISingletonTimeoutScheduler
- uid: EventStore.Projections.Core.Services
  commentId: N:EventStore.Projections.Core.Services
  name: EventStore.Projections.Core.Services
  nameWithType: EventStore.Projections.Core.Services
  fullName: EventStore.Projections.Core.Services
- uid: EventStore.Core.Services.TimerService
  commentId: N:EventStore.Core.Services.TimerService
  name: EventStore.Core.Services.TimerService
  nameWithType: EventStore.Core.Services.TimerService
  fullName: EventStore.Core.Services.TimerService
- uid: EventStore.Core.Helpers
  commentId: N:EventStore.Core.Helpers
  name: EventStore.Core.Helpers
  nameWithType: EventStore.Core.Helpers
  fullName: EventStore.Core.Helpers
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Logger*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Logger
  name: Logger
  nameWithType: ProjectionCoreService.Logger
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Logger
- uid: EventStore.Common.Log.ILogger
  commentId: T:EventStore.Common.Log.ILogger
  parent: EventStore.Common.Log
  name: ILogger
  nameWithType: ILogger
  fullName: EventStore.Common.Log.ILogger
- uid: EventStore.Common.Log
  commentId: N:EventStore.Common.Log
  name: EventStore.Common.Log
  nameWithType: EventStore.Common.Log
  fullName: EventStore.Common.Log
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle
  name: Handle
  nameWithType: ProjectionCoreService.Handle
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ProjectionCoreServiceMessage.StartCore)
  nameWithType: IHandle<ProjectionCoreServiceMessage.StartCore>.Handle(ProjectionCoreServiceMessage.StartCore)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore>.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore)
  nameWithType.vb: IHandle(Of ProjectionCoreServiceMessage.StartCore).Handle(ProjectionCoreServiceMessage.StartCore)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore).Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ProjectionCoreServiceMessage.StartCore>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore
    name: ProjectionCoreServiceMessage.StartCore
    nameWithType: ProjectionCoreServiceMessage.StartCore
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ProjectionCoreServiceMessage.StartCore).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore
    name: ProjectionCoreServiceMessage.StartCore
    nameWithType: ProjectionCoreServiceMessage.StartCore
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore
  commentId: T:EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore
  parent: EventStore.Projections.Core.Messages
  name: ProjectionCoreServiceMessage.StartCore
  nameWithType: ProjectionCoreServiceMessage.StartCore
  fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StartCore
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages
  commentId: N:EventStore.Projections.Core.Messages
  name: EventStore.Projections.Core.Messages
  nameWithType: EventStore.Projections.Core.Messages
  fullName: EventStore.Projections.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ProjectionCoreServiceMessage.StopCore)
  nameWithType: IHandle<ProjectionCoreServiceMessage.StopCore>.Handle(ProjectionCoreServiceMessage.StopCore)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore>.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore)
  nameWithType.vb: IHandle(Of ProjectionCoreServiceMessage.StopCore).Handle(ProjectionCoreServiceMessage.StopCore)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore).Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ProjectionCoreServiceMessage.StopCore>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore
    name: ProjectionCoreServiceMessage.StopCore
    nameWithType: ProjectionCoreServiceMessage.StopCore
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ProjectionCoreServiceMessage.StopCore).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore
    name: ProjectionCoreServiceMessage.StopCore
    nameWithType: ProjectionCoreServiceMessage.StopCore
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore
  commentId: T:EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore
  parent: EventStore.Projections.Core.Messages
  name: ProjectionCoreServiceMessage.StopCore
  nameWithType: ProjectionCoreServiceMessage.StopCore
  fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCore
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ProjectionCoreServiceMessage.StopCoreTimeout)
  nameWithType: IHandle<ProjectionCoreServiceMessage.StopCoreTimeout>.Handle(ProjectionCoreServiceMessage.StopCoreTimeout)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout>.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout)
  nameWithType.vb: IHandle(Of ProjectionCoreServiceMessage.StopCoreTimeout).Handle(ProjectionCoreServiceMessage.StopCoreTimeout)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout).Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ProjectionCoreServiceMessage.StopCoreTimeout>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout
    name: ProjectionCoreServiceMessage.StopCoreTimeout
    nameWithType: ProjectionCoreServiceMessage.StopCoreTimeout
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ProjectionCoreServiceMessage.StopCoreTimeout).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout
    name: ProjectionCoreServiceMessage.StopCoreTimeout
    nameWithType: ProjectionCoreServiceMessage.StopCoreTimeout
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout
  commentId: T:EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout
  parent: EventStore.Projections.Core.Messages
  name: ProjectionCoreServiceMessage.StopCoreTimeout
  nameWithType: ProjectionCoreServiceMessage.StopCoreTimeout
  fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.StopCoreTimeout
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended}.Handle(EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended}.Handle(EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionStatusMessage.Suspended)
  nameWithType: IHandle<CoreProjectionStatusMessage.Suspended>.Handle(CoreProjectionStatusMessage.Suspended)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended>.Handle(EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended)
  nameWithType.vb: IHandle(Of CoreProjectionStatusMessage.Suspended).Handle(CoreProjectionStatusMessage.Suspended)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended).Handle(EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionStatusMessage.Suspended>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended
    name: CoreProjectionStatusMessage.Suspended
    nameWithType: CoreProjectionStatusMessage.Suspended
    fullName: EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionStatusMessage.Suspended).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended
    name: CoreProjectionStatusMessage.Suspended
    nameWithType: CoreProjectionStatusMessage.Suspended
    fullName: EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended
  commentId: T:EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended
  parent: EventStore.Projections.Core.Messages
  name: CoreProjectionStatusMessage.Suspended
  nameWithType: CoreProjectionStatusMessage.Suspended
  fullName: EventStore.Projections.Core.Messages.CoreProjectionStatusMessage.Suspended
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ProjectionCoreServiceMessage.CoreTick)
  nameWithType: IHandle<ProjectionCoreServiceMessage.CoreTick>.Handle(ProjectionCoreServiceMessage.CoreTick)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick>.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick)
  nameWithType.vb: IHandle(Of ProjectionCoreServiceMessage.CoreTick).Handle(ProjectionCoreServiceMessage.CoreTick)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick).Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ProjectionCoreServiceMessage.CoreTick>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick
    name: ProjectionCoreServiceMessage.CoreTick
    nameWithType: ProjectionCoreServiceMessage.CoreTick
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ProjectionCoreServiceMessage.CoreTick).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick
    name: ProjectionCoreServiceMessage.CoreTick
    nameWithType: ProjectionCoreServiceMessage.CoreTick
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick
  commentId: T:EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick
  parent: EventStore.Projections.Core.Messages
  name: ProjectionCoreServiceMessage.CoreTick
  nameWithType: ProjectionCoreServiceMessage.CoreTick
  fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.CoreTick
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionManagementMessage.CreateAndPrepare)
  nameWithType: IHandle<CoreProjectionManagementMessage.CreateAndPrepare>.Handle(CoreProjectionManagementMessage.CreateAndPrepare)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare>.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare)
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.CreateAndPrepare).Handle(CoreProjectionManagementMessage.CreateAndPrepare)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare).Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionManagementMessage.CreateAndPrepare>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare
    name: CoreProjectionManagementMessage.CreateAndPrepare
    nameWithType: CoreProjectionManagementMessage.CreateAndPrepare
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionManagementMessage.CreateAndPrepare).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare
    name: CoreProjectionManagementMessage.CreateAndPrepare
    nameWithType: CoreProjectionManagementMessage.CreateAndPrepare
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare
  commentId: T:EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare
  parent: EventStore.Projections.Core.Messages
  name: CoreProjectionManagementMessage.CreateAndPrepare
  nameWithType: CoreProjectionManagementMessage.CreateAndPrepare
  fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreateAndPrepare
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionManagementMessage.CreatePrepared)
  nameWithType: IHandle<CoreProjectionManagementMessage.CreatePrepared>.Handle(CoreProjectionManagementMessage.CreatePrepared)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared>.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared)
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.CreatePrepared).Handle(CoreProjectionManagementMessage.CreatePrepared)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared).Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionManagementMessage.CreatePrepared>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared
    name: CoreProjectionManagementMessage.CreatePrepared
    nameWithType: CoreProjectionManagementMessage.CreatePrepared
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionManagementMessage.CreatePrepared).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared
    name: CoreProjectionManagementMessage.CreatePrepared
    nameWithType: CoreProjectionManagementMessage.CreatePrepared
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared
  commentId: T:EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared
  parent: EventStore.Projections.Core.Messages
  name: CoreProjectionManagementMessage.CreatePrepared
  nameWithType: CoreProjectionManagementMessage.CreatePrepared
  fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.CreatePrepared
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionManagementMessage.Dispose)
  nameWithType: IHandle<CoreProjectionManagementMessage.Dispose>.Handle(CoreProjectionManagementMessage.Dispose)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose>.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose)
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.Dispose).Handle(CoreProjectionManagementMessage.Dispose)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose).Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionManagementMessage.Dispose>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose
    name: CoreProjectionManagementMessage.Dispose
    nameWithType: CoreProjectionManagementMessage.Dispose
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionManagementMessage.Dispose).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose
    name: CoreProjectionManagementMessage.Dispose
    nameWithType: CoreProjectionManagementMessage.Dispose
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose
  commentId: T:EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose
  parent: EventStore.Projections.Core.Messages
  name: CoreProjectionManagementMessage.Dispose
  nameWithType: CoreProjectionManagementMessage.Dispose
  fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Dispose
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionManagementMessage.Start)
  nameWithType: IHandle<CoreProjectionManagementMessage.Start>.Handle(CoreProjectionManagementMessage.Start)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start>.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start)
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.Start).Handle(CoreProjectionManagementMessage.Start)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start).Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionManagementMessage.Start>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start
    name: CoreProjectionManagementMessage.Start
    nameWithType: CoreProjectionManagementMessage.Start
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionManagementMessage.Start).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start
    name: CoreProjectionManagementMessage.Start
    nameWithType: CoreProjectionManagementMessage.Start
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start
  commentId: T:EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start
  parent: EventStore.Projections.Core.Messages
  name: CoreProjectionManagementMessage.Start
  nameWithType: CoreProjectionManagementMessage.Start
  fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Start
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionManagementMessage.LoadStopped)
  nameWithType: IHandle<CoreProjectionManagementMessage.LoadStopped>.Handle(CoreProjectionManagementMessage.LoadStopped)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped>.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped)
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.LoadStopped).Handle(CoreProjectionManagementMessage.LoadStopped)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped).Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionManagementMessage.LoadStopped>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped
    name: CoreProjectionManagementMessage.LoadStopped
    nameWithType: CoreProjectionManagementMessage.LoadStopped
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionManagementMessage.LoadStopped).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped
    name: CoreProjectionManagementMessage.LoadStopped
    nameWithType: CoreProjectionManagementMessage.LoadStopped
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped
  commentId: T:EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped
  parent: EventStore.Projections.Core.Messages
  name: CoreProjectionManagementMessage.LoadStopped
  nameWithType: CoreProjectionManagementMessage.LoadStopped
  fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.LoadStopped
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionManagementMessage.Stop)
  nameWithType: IHandle<CoreProjectionManagementMessage.Stop>.Handle(CoreProjectionManagementMessage.Stop)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop>.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop)
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.Stop).Handle(CoreProjectionManagementMessage.Stop)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop).Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionManagementMessage.Stop>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop
    name: CoreProjectionManagementMessage.Stop
    nameWithType: CoreProjectionManagementMessage.Stop
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionManagementMessage.Stop).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop
    name: CoreProjectionManagementMessage.Stop
    nameWithType: CoreProjectionManagementMessage.Stop
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop
  commentId: T:EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop
  parent: EventStore.Projections.Core.Messages
  name: CoreProjectionManagementMessage.Stop
  nameWithType: CoreProjectionManagementMessage.Stop
  fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Stop
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionManagementMessage.Kill)
  nameWithType: IHandle<CoreProjectionManagementMessage.Kill>.Handle(CoreProjectionManagementMessage.Kill)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill>.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill)
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.Kill).Handle(CoreProjectionManagementMessage.Kill)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill).Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionManagementMessage.Kill>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill
    name: CoreProjectionManagementMessage.Kill
    nameWithType: CoreProjectionManagementMessage.Kill
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionManagementMessage.Kill).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill
    name: CoreProjectionManagementMessage.Kill
    nameWithType: CoreProjectionManagementMessage.Kill
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill
  commentId: T:EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill
  parent: EventStore.Projections.Core.Messages
  name: CoreProjectionManagementMessage.Kill
  nameWithType: CoreProjectionManagementMessage.Kill
  fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.Kill
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionManagementMessage.GetState)
  nameWithType: IHandle<CoreProjectionManagementMessage.GetState>.Handle(CoreProjectionManagementMessage.GetState)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState>.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState)
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.GetState).Handle(CoreProjectionManagementMessage.GetState)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState).Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionManagementMessage.GetState>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState
    name: CoreProjectionManagementMessage.GetState
    nameWithType: CoreProjectionManagementMessage.GetState
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionManagementMessage.GetState).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState
    name: CoreProjectionManagementMessage.GetState
    nameWithType: CoreProjectionManagementMessage.GetState
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState
  commentId: T:EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState
  parent: EventStore.Projections.Core.Messages
  name: CoreProjectionManagementMessage.GetState
  nameWithType: CoreProjectionManagementMessage.GetState
  fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetState
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult}.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionManagementMessage.GetResult)
  nameWithType: IHandle<CoreProjectionManagementMessage.GetResult>.Handle(CoreProjectionManagementMessage.GetResult)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult>.Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult)
  nameWithType.vb: IHandle(Of CoreProjectionManagementMessage.GetResult).Handle(CoreProjectionManagementMessage.GetResult)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult).Handle(EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionManagementMessage.GetResult>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult
    name: CoreProjectionManagementMessage.GetResult
    nameWithType: CoreProjectionManagementMessage.GetResult
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionManagementMessage.GetResult).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult
    name: CoreProjectionManagementMessage.GetResult
    nameWithType: CoreProjectionManagementMessage.GetResult
    fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult
  commentId: T:EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult
  parent: EventStore.Projections.Core.Messages
  name: CoreProjectionManagementMessage.GetResult
  nameWithType: CoreProjectionManagementMessage.GetResult
  fullName: EventStore.Projections.Core.Messages.CoreProjectionManagementMessage.GetResult
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointCompleted}.Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  commentId: M:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointCompleted}.Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  parent: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointCompleted}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  nameWithType: IHandle<CoreProjectionProcessingMessage.CheckpointCompleted>.Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.CheckpointCompleted>.Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.CheckpointCompleted).Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.CheckpointCompleted).Handle(CoreProjectionProcessingMessage.CheckpointCompleted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionProcessingMessage.CheckpointCompleted>.Handle
    fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.CheckpointCompleted>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.CheckpointCompleted
    name: CoreProjectionProcessingMessage.CheckpointCompleted
    nameWithType: CoreProjectionProcessingMessage.CheckpointCompleted
    fullName: CoreProjectionProcessingMessage.CheckpointCompleted
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionProcessingMessage.CheckpointCompleted).Handle
    fullName: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.CheckpointCompleted).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.CheckpointCompleted
    name: CoreProjectionProcessingMessage.CheckpointCompleted
    nameWithType: CoreProjectionProcessingMessage.CheckpointCompleted
    fullName: CoreProjectionProcessingMessage.CheckpointCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreProjectionProcessingMessage.CheckpointCompleted
  commentId: T:CoreProjectionProcessingMessage.CheckpointCompleted
  name: CoreProjectionProcessingMessage.CheckpointCompleted
  nameWithType: CoreProjectionProcessingMessage.CheckpointCompleted
  fullName: CoreProjectionProcessingMessage.CheckpointCompleted
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointLoaded}.Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  commentId: M:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointLoaded}.Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  parent: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.CheckpointLoaded}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  nameWithType: IHandle<CoreProjectionProcessingMessage.CheckpointLoaded>.Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.CheckpointLoaded>.Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.CheckpointLoaded).Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.CheckpointLoaded).Handle(CoreProjectionProcessingMessage.CheckpointLoaded)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionProcessingMessage.CheckpointLoaded>.Handle
    fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.CheckpointLoaded>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.CheckpointLoaded
    name: CoreProjectionProcessingMessage.CheckpointLoaded
    nameWithType: CoreProjectionProcessingMessage.CheckpointLoaded
    fullName: CoreProjectionProcessingMessage.CheckpointLoaded
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionProcessingMessage.CheckpointLoaded).Handle
    fullName: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.CheckpointLoaded).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.CheckpointLoaded
    name: CoreProjectionProcessingMessage.CheckpointLoaded
    nameWithType: CoreProjectionProcessingMessage.CheckpointLoaded
    fullName: CoreProjectionProcessingMessage.CheckpointLoaded
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreProjectionProcessingMessage.CheckpointLoaded
  commentId: T:CoreProjectionProcessingMessage.CheckpointLoaded
  name: CoreProjectionProcessingMessage.CheckpointLoaded
  nameWithType: CoreProjectionProcessingMessage.CheckpointLoaded
  fullName: CoreProjectionProcessingMessage.CheckpointLoaded
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.PrerecordedEventsLoaded}.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  commentId: M:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.PrerecordedEventsLoaded}.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  parent: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.PrerecordedEventsLoaded}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  nameWithType: IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>.Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.PrerecordedEventsLoaded).Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.PrerecordedEventsLoaded).Handle(CoreProjectionProcessingMessage.PrerecordedEventsLoaded)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>.Handle
    fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.PrerecordedEventsLoaded>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
    name: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
    nameWithType: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
    fullName: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionProcessingMessage.PrerecordedEventsLoaded).Handle
    fullName: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.PrerecordedEventsLoaded).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
    name: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
    nameWithType: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
    fullName: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
  commentId: T:CoreProjectionProcessingMessage.PrerecordedEventsLoaded
  name: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
  nameWithType: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
  fullName: CoreProjectionProcessingMessage.PrerecordedEventsLoaded
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}.Handle(CoreProjectionProcessingMessage.RestartRequested)
  commentId: M:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}.Handle(CoreProjectionProcessingMessage.RestartRequested)
  parent: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.RestartRequested}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionProcessingMessage.RestartRequested)
  nameWithType: IHandle<CoreProjectionProcessingMessage.RestartRequested>.Handle(CoreProjectionProcessingMessage.RestartRequested)
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.RestartRequested>.Handle(CoreProjectionProcessingMessage.RestartRequested)
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.RestartRequested).Handle(CoreProjectionProcessingMessage.RestartRequested)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.RestartRequested).Handle(CoreProjectionProcessingMessage.RestartRequested)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionProcessingMessage.RestartRequested>.Handle
    fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.RestartRequested>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.RestartRequested
    name: CoreProjectionProcessingMessage.RestartRequested
    nameWithType: CoreProjectionProcessingMessage.RestartRequested
    fullName: CoreProjectionProcessingMessage.RestartRequested
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionProcessingMessage.RestartRequested).Handle
    fullName: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.RestartRequested).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.RestartRequested
    name: CoreProjectionProcessingMessage.RestartRequested
    nameWithType: CoreProjectionProcessingMessage.RestartRequested
    fullName: CoreProjectionProcessingMessage.RestartRequested
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreProjectionProcessingMessage.RestartRequested
  commentId: T:CoreProjectionProcessingMessage.RestartRequested
  name: CoreProjectionProcessingMessage.RestartRequested
  nameWithType: CoreProjectionProcessingMessage.RestartRequested
  fullName: CoreProjectionProcessingMessage.RestartRequested
- uid: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}.Handle(CoreProjectionProcessingMessage.Failed)
  commentId: M:EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}.Handle(CoreProjectionProcessingMessage.Failed)
  parent: EventStore.Core.Bus.IHandle{CoreProjectionProcessingMessage.Failed}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(CoreProjectionProcessingMessage.Failed)
  nameWithType: IHandle<CoreProjectionProcessingMessage.Failed>.Handle(CoreProjectionProcessingMessage.Failed)
  fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.Failed>.Handle(CoreProjectionProcessingMessage.Failed)
  nameWithType.vb: IHandle(Of CoreProjectionProcessingMessage.Failed).Handle(CoreProjectionProcessingMessage.Failed)
  fullName.vb: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.Failed).Handle(CoreProjectionProcessingMessage.Failed)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<CoreProjectionProcessingMessage.Failed>.Handle
    fullName: EventStore.Core.Bus.IHandle<CoreProjectionProcessingMessage.Failed>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.Failed
    name: CoreProjectionProcessingMessage.Failed
    nameWithType: CoreProjectionProcessingMessage.Failed
    fullName: CoreProjectionProcessingMessage.Failed
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of CoreProjectionProcessingMessage.Failed).Handle
    fullName: EventStore.Core.Bus.IHandle(Of CoreProjectionProcessingMessage.Failed).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreProjectionProcessingMessage.Failed
    name: CoreProjectionProcessingMessage.Failed
    nameWithType: CoreProjectionProcessingMessage.Failed
    fullName: CoreProjectionProcessingMessage.Failed
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreProjectionProcessingMessage.Failed
  commentId: T:CoreProjectionProcessingMessage.Failed
  name: CoreProjectionProcessingMessage.Failed
  nameWithType: CoreProjectionProcessingMessage.Failed
  fullName: CoreProjectionProcessingMessage.Failed
- uid: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.CreateStateHandler*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.ProjectionCoreService.CreateStateHandler
  name: CreateStateHandler
  nameWithType: ProjectionCoreService.CreateStateHandler
  fullName: EventStore.Projections.Core.Services.Processing.ProjectionCoreService.CreateStateHandler
- uid: EventStore.Projections.Core.Services.IProjectionStateHandler
  commentId: T:EventStore.Projections.Core.Services.IProjectionStateHandler
  parent: EventStore.Projections.Core.Services
  name: IProjectionStateHandler
  nameWithType: IProjectionStateHandler
  fullName: EventStore.Projections.Core.Services.IProjectionStateHandler

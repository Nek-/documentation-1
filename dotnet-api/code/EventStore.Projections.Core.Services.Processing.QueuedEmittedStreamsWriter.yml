### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter
  commentId: T:EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter
  id: QueuedEmittedStreamsWriter
  parent: EventStore.Projections.Core.Services.Processing
  children:
  - EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.#ctor(EventStore.Core.Helpers.IODispatcher,Guid)
  - EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.WriteEvents(System.String,System.Int64,EventStore.Core.Data.Event[],IPrincipal,Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  langs:
  - csharp
  - vb
  name: QueuedEmittedStreamsWriter
  nameWithType: QueuedEmittedStreamsWriter
  fullName: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter
  type: Class
  source:
    id: QueuedEmittedStreamsWriter
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Projections.Core/Services/Processing/QueuedEmittedStreamsWriter.cs
    startLine: 7
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: 'public class QueuedEmittedStreamsWriter : object, IEmittedStreamsWriter'
    content.vb: >-
      Public Class QueuedEmittedStreamsWriter
          Inherits Object
          Implements IEmittedStreamsWriter
  inheritance:
  - System.Object
  implements:
  - EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.#ctor(EventStore.Core.Helpers.IODispatcher,Guid)
  commentId: M:EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.#ctor(EventStore.Core.Helpers.IODispatcher,Guid)
  id: '#ctor(EventStore.Core.Helpers.IODispatcher,Guid)'
  parent: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter
  langs:
  - csharp
  - vb
  name: QueuedEmittedStreamsWriter(IODispatcher, Guid)
  nameWithType: QueuedEmittedStreamsWriter.QueuedEmittedStreamsWriter(IODispatcher, Guid)
  fullName: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.QueuedEmittedStreamsWriter(EventStore.Core.Helpers.IODispatcher, Guid)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Projections.Core/Services/Processing/QueuedEmittedStreamsWriter.cs
    startLine: 11
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public QueuedEmittedStreamsWriter(IODispatcher ioDispatcher, Guid writeQueueId)
    parameters:
    - id: ioDispatcher
      type: EventStore.Core.Helpers.IODispatcher
    - id: writeQueueId
      type: Guid
    content.vb: Public Sub New(ioDispatcher As IODispatcher, writeQueueId As Guid)
  overload: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.WriteEvents(System.String,System.Int64,EventStore.Core.Data.Event[],IPrincipal,Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  commentId: M:EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.WriteEvents(System.String,System.Int64,EventStore.Core.Data.Event[],IPrincipal,Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  id: WriteEvents(System.String,System.Int64,EventStore.Core.Data.Event[],IPrincipal,Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  parent: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter
  langs:
  - csharp
  - vb
  name: WriteEvents(String, Int64, Event[], IPrincipal, Action<ClientMessage.WriteEventsCompleted>)
  nameWithType: QueuedEmittedStreamsWriter.WriteEvents(String, Int64, Event[], IPrincipal, Action<ClientMessage.WriteEventsCompleted>)
  fullName: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.WriteEvents(System.String, System.Int64, EventStore.Core.Data.Event[], IPrincipal, Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>)
  type: Method
  source:
    id: WriteEvents
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Projections.Core/Services/Processing/QueuedEmittedStreamsWriter.cs
    startLine: 16
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void WriteEvents(string streamId, long expectedVersion, Event[] events, IPrincipal writeAs, Action<ClientMessage.WriteEventsCompleted> complete)
    parameters:
    - id: streamId
      type: System.String
    - id: expectedVersion
      type: System.Int64
    - id: events
      type: EventStore.Core.Data.Event[]
    - id: writeAs
      type: IPrincipal
    - id: complete
      type: Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
    content.vb: Public Sub WriteEvents(streamId As String, expectedVersion As Long, events As  Event (), writeAs As IPrincipal, complete As Action(Of ClientMessage.WriteEventsCompleted))
  overload: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.WriteEvents*
  implements:
  - EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter.WriteEvents(System.String,System.Int64,EventStore.Core.Data.Event[],IPrincipal,Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  nameWithType.vb: QueuedEmittedStreamsWriter.WriteEvents(String, Int64, Event(), IPrincipal, Action(Of ClientMessage.WriteEventsCompleted))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.WriteEvents(System.String, System.Int64, EventStore.Core.Data.Event(), IPrincipal, Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted))
  name.vb: WriteEvents(String, Int64, Event(), IPrincipal, Action(Of ClientMessage.WriteEventsCompleted))
references:
- uid: EventStore.Projections.Core.Services.Processing
  commentId: N:EventStore.Projections.Core.Services.Processing
  name: EventStore.Projections.Core.Services.Processing
  nameWithType: EventStore.Projections.Core.Services.Processing
  fullName: EventStore.Projections.Core.Services.Processing
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter
  commentId: T:EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter
  parent: EventStore.Projections.Core.Services.Processing
  name: IEmittedStreamsWriter
  nameWithType: IEmittedStreamsWriter
  fullName: EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter
- uid: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.#ctor*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.#ctor
  name: QueuedEmittedStreamsWriter
  nameWithType: QueuedEmittedStreamsWriter.QueuedEmittedStreamsWriter
  fullName: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.QueuedEmittedStreamsWriter
- uid: EventStore.Core.Helpers.IODispatcher
  commentId: T:EventStore.Core.Helpers.IODispatcher
  parent: EventStore.Core.Helpers
  name: IODispatcher
  nameWithType: IODispatcher
  fullName: EventStore.Core.Helpers.IODispatcher
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: EventStore.Core.Helpers
  commentId: N:EventStore.Core.Helpers
  name: EventStore.Core.Helpers
  nameWithType: EventStore.Core.Helpers
  fullName: EventStore.Core.Helpers
- uid: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.WriteEvents*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.WriteEvents
  name: WriteEvents
  nameWithType: QueuedEmittedStreamsWriter.WriteEvents
  fullName: EventStore.Projections.Core.Services.Processing.QueuedEmittedStreamsWriter.WriteEvents
- uid: EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter.WriteEvents(System.String,System.Int64,EventStore.Core.Data.Event[],IPrincipal,Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  commentId: M:EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter.WriteEvents(System.String,System.Int64,EventStore.Core.Data.Event[],IPrincipal,Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
  parent: EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter
  isExternal: true
  name: WriteEvents(String, Int64, Event[], IPrincipal, Action<ClientMessage.WriteEventsCompleted>)
  nameWithType: IEmittedStreamsWriter.WriteEvents(String, Int64, Event[], IPrincipal, Action<ClientMessage.WriteEventsCompleted>)
  fullName: EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter.WriteEvents(System.String, System.Int64, EventStore.Core.Data.Event[], IPrincipal, Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>)
  nameWithType.vb: IEmittedStreamsWriter.WriteEvents(String, Int64, Event(), IPrincipal, Action(Of ClientMessage.WriteEventsCompleted))
  fullName.vb: EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter.WriteEvents(System.String, System.Int64, EventStore.Core.Data.Event(), IPrincipal, Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted))
  name.vb: WriteEvents(String, Int64, Event(), IPrincipal, Action(Of ClientMessage.WriteEventsCompleted))
  spec.csharp:
  - uid: EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter.WriteEvents(System.String,System.Int64,EventStore.Core.Data.Event[],IPrincipal,Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
    name: WriteEvents
    nameWithType: IEmittedStreamsWriter.WriteEvents
    fullName: EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter.WriteEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter.WriteEvents(System.String,System.Int64,EventStore.Core.Data.Event[],IPrincipal,Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted})
    name: WriteEvents
    nameWithType: IEmittedStreamsWriter.WriteEvents
    fullName: EventStore.Projections.Core.Services.Processing.IEmittedStreamsWriter.WriteEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: IPrincipal
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EventStore.Core.Data.Event[]
  isExternal: true
  name: Event[]
  nameWithType: Event[]
  fullName: EventStore.Core.Data.Event[]
  nameWithType.vb: Event()
  fullName.vb: EventStore.Core.Data.Event()
  name.vb: Event()
  spec.csharp:
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EventStore.Core.Data.Event
    name: Event
    nameWithType: Event
    fullName: EventStore.Core.Data.Event
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: IPrincipal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: IPrincipal
- uid: Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}
  commentId: '!:Action{EventStore.Core.Messages.ClientMessage.WriteEventsCompleted}'
  definition: Action`1
  name: Action<ClientMessage.WriteEventsCompleted>
  nameWithType: Action<ClientMessage.WriteEventsCompleted>
  fullName: Action<EventStore.Core.Messages.ClientMessage.WriteEventsCompleted>
  nameWithType.vb: Action(Of ClientMessage.WriteEventsCompleted)
  fullName.vb: Action(Of EventStore.Core.Messages.ClientMessage.WriteEventsCompleted)
  name.vb: Action(Of ClientMessage.WriteEventsCompleted)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
    name: ClientMessage.WriteEventsCompleted
    nameWithType: ClientMessage.WriteEventsCompleted
    fullName: EventStore.Core.Messages.ClientMessage.WriteEventsCompleted
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder
  commentId: T:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder
  id: RequestResponseQueueForwarder
  parent: EventStore.Projections.Core.Services.Processing
  children:
  - EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Bus.IPublisher)
  - EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStarted}#Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted)
  - EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStopped}#Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped)
  - EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  - EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  - EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  - EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  - EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  - EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  - EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.SystemMessage.SubSystemInitialized)
  langs:
  - csharp
  - vb
  name: RequestResponseQueueForwarder
  nameWithType: RequestResponseQueueForwarder
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder
  type: Class
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: RequestResponseQueueForwarder
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
    startLine: 6
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: 'public class RequestResponseQueueForwarder : object, IHandle<ClientMessage.ReadEvent>, IHandle<ClientMessage.ReadStreamEventsBackward>, IHandle<ClientMessage.ReadStreamEventsForward>, IHandle<ClientMessage.ReadAllEventsForward>, IHandle<ClientMessage.WriteEvents>, IHandle<ClientMessage.DeleteStream>, IHandle<SystemMessage.SubSystemInitialized>, IHandle<ProjectionCoreServiceMessage.SubComponentStarted>, IHandle<ProjectionCoreServiceMessage.SubComponentStopped>'
    content.vb: >-
      Public Class RequestResponseQueueForwarder

          Inherits Object

          Implements IHandle(Of ClientMessage.ReadEvent), IHandle(Of ClientMessage.ReadStreamEventsBackward), IHandle(Of ClientMessage.ReadStreamEventsForward), IHandle(Of ClientMessage.ReadAllEventsForward), IHandle(Of ClientMessage.WriteEvents), IHandle(Of ClientMessage.DeleteStream), IHandle(Of SystemMessage.SubSystemInitialized), IHandle(Of ProjectionCoreServiceMessage.SubComponentStarted), IHandle(Of ProjectionCoreServiceMessage.SubComponentStopped)
  inheritance:
  - System.Object
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SubSystemInitialized}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted}
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped}
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Bus.IPublisher)
  commentId: M:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Bus.IPublisher)
  id: '#ctor(EventStore.Core.Bus.IPublisher,EventStore.Core.Bus.IPublisher)'
  parent: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder
  langs:
  - csharp
  - vb
  name: RequestResponseQueueForwarder(IPublisher, IPublisher)
  nameWithType: RequestResponseQueueForwarder.RequestResponseQueueForwarder(IPublisher, IPublisher)
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.RequestResponseQueueForwarder(EventStore.Core.Bus.IPublisher, EventStore.Core.Bus.IPublisher)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
    startLine: 18
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public RequestResponseQueueForwarder(IPublisher inputQueue, IPublisher externalRequestQueue)
    parameters:
    - id: inputQueue
      type: EventStore.Core.Bus.IPublisher
    - id: externalRequestQueue
      type: EventStore.Core.Bus.IPublisher
    content.vb: Public Sub New(inputQueue As IPublisher, externalRequestQueue As IPublisher)
  overload: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  commentId: M:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  id: Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  parent: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.ReadEvent)
  nameWithType: RequestResponseQueueForwarder.Handle(ClientMessage.ReadEvent)
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
    startLine: 23
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(ClientMessage.ReadEvent msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.ClientMessage.ReadEvent
    content.vb: Public Sub Handle(msg As ClientMessage.ReadEvent)
  overload: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}.Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  commentId: M:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  id: Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  parent: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.WriteEvents)
  nameWithType: RequestResponseQueueForwarder.Handle(ClientMessage.WriteEvents)
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
    startLine: 30
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(ClientMessage.WriteEvents msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.ClientMessage.WriteEvents
    content.vb: Public Sub Handle(msg As ClientMessage.WriteEvents)
  overload: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  commentId: M:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  id: Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  parent: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.DeleteStream)
  nameWithType: RequestResponseQueueForwarder.Handle(ClientMessage.DeleteStream)
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
    startLine: 37
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(ClientMessage.DeleteStream msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.ClientMessage.DeleteStream
    content.vb: Public Sub Handle(msg As ClientMessage.DeleteStream)
  overload: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  commentId: M:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  id: Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  parent: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.ReadStreamEventsBackward)
  nameWithType: RequestResponseQueueForwarder.Handle(ClientMessage.ReadStreamEventsBackward)
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
    startLine: 44
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(ClientMessage.ReadStreamEventsBackward msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    content.vb: Public Sub Handle(msg As ClientMessage.ReadStreamEventsBackward)
  overload: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  commentId: M:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  id: Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  parent: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.ReadStreamEventsForward)
  nameWithType: RequestResponseQueueForwarder.Handle(ClientMessage.ReadStreamEventsForward)
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
    startLine: 52
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(ClientMessage.ReadStreamEventsForward msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    content.vb: Public Sub Handle(msg As ClientMessage.ReadStreamEventsForward)
  overload: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  commentId: M:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  id: Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  parent: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder
  langs:
  - csharp
  - vb
  name: Handle(ClientMessage.ReadAllEventsForward)
  nameWithType: RequestResponseQueueForwarder.Handle(ClientMessage.ReadAllEventsForward)
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
    startLine: 60
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(ClientMessage.ReadAllEventsForward msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    content.vb: Public Sub Handle(msg As ClientMessage.ReadAllEventsForward)
  overload: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.SystemMessage.SubSystemInitialized)
  commentId: M:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.SystemMessage.SubSystemInitialized)
  id: Handle(EventStore.Core.Messages.SystemMessage.SubSystemInitialized)
  parent: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder
  langs:
  - csharp
  - vb
  name: Handle(SystemMessage.SubSystemInitialized)
  nameWithType: RequestResponseQueueForwarder.Handle(SystemMessage.SubSystemInitialized)
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle(EventStore.Core.Messages.SystemMessage.SubSystemInitialized)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
    startLine: 68
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public void Handle(SystemMessage.SubSystemInitialized msg)
    parameters:
    - id: msg
      type: EventStore.Core.Messages.SystemMessage.SubSystemInitialized
    content.vb: Public Sub Handle(msg As SystemMessage.SubSystemInitialized)
  overload: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SubSystemInitialized}.Handle(EventStore.Core.Messages.SystemMessage.SubSystemInitialized)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStarted}#Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted)
  commentId: M:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStarted}#Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted)
  id: EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStarted}#Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted)
  isEii: true
  parent: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder
  langs:
  - csharp
  - vb
  name: IHandle<ProjectionCoreServiceMessage.SubComponentStarted>.Handle(ProjectionCoreServiceMessage.SubComponentStarted)
  nameWithType: RequestResponseQueueForwarder.IHandle<ProjectionCoreServiceMessage.SubComponentStarted>.Handle(ProjectionCoreServiceMessage.SubComponentStarted)
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted>.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted>.Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
    startLine: 73
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: void IHandle<ProjectionCoreServiceMessage.SubComponentStarted>.Handle(ProjectionCoreServiceMessage.SubComponentStarted message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted
    content.vb: Sub EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted>.Handle(message As ProjectionCoreServiceMessage.SubComponentStarted) Implements IHandle(Of ProjectionCoreServiceMessage.SubComponentStarted).Handle
  overload: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStarted}#Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted)
  nameWithType.vb: RequestResponseQueueForwarder.EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted>.Handle(ProjectionCoreServiceMessage.SubComponentStarted)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted>.Handle(ProjectionCoreServiceMessage.SubComponentStarted)
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStopped}#Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped)
  commentId: M:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStopped}#Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped)
  id: EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStopped}#Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped)
  isEii: true
  parent: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder
  langs:
  - csharp
  - vb
  name: IHandle<ProjectionCoreServiceMessage.SubComponentStopped>.Handle(ProjectionCoreServiceMessage.SubComponentStopped)
  nameWithType: RequestResponseQueueForwarder.IHandle<ProjectionCoreServiceMessage.SubComponentStopped>.Handle(ProjectionCoreServiceMessage.SubComponentStopped)
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped>.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
      branch: master
      repo: git@github.com:EventStore/EventStore.git
    id: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped>.Handle
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/RequestResponseQueueForwarder.cs
    startLine: 80
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: void IHandle<ProjectionCoreServiceMessage.SubComponentStopped>.Handle(ProjectionCoreServiceMessage.SubComponentStopped message)
    parameters:
    - id: message
      type: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped
    content.vb: Sub EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped>.Handle(message As ProjectionCoreServiceMessage.SubComponentStopped) Implements IHandle(Of ProjectionCoreServiceMessage.SubComponentStopped).Handle
  overload: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStopped}#Handle*
  implements:
  - EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped)
  nameWithType.vb: RequestResponseQueueForwarder.EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped>.Handle(ProjectionCoreServiceMessage.SubComponentStopped)
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped>.Handle(ProjectionCoreServiceMessage.SubComponentStopped)
references:
- uid: EventStore.Projections.Core.Services.Processing
  commentId: N:EventStore.Projections.Core.Services.Processing
  name: EventStore.Projections.Core.Services.Processing
  nameWithType: EventStore.Projections.Core.Services.Processing
  fullName: EventStore.Projections.Core.Services.Processing
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.ReadEvent>
  nameWithType: IHandle<ClientMessage.ReadEvent>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>
  nameWithType.vb: IHandle(Of ClientMessage.ReadEvent)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadEvent)
  name.vb: IHandle(Of ClientMessage.ReadEvent)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadEvent
    name: ClientMessage.ReadEvent
    nameWithType: ClientMessage.ReadEvent
    fullName: EventStore.Core.Messages.ClientMessage.ReadEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadEvent
    name: ClientMessage.ReadEvent
    nameWithType: ClientMessage.ReadEvent
    fullName: EventStore.Core.Messages.ClientMessage.ReadEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.ReadStreamEventsBackward>
  nameWithType: IHandle<ClientMessage.ReadStreamEventsBackward>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>
  nameWithType.vb: IHandle(Of ClientMessage.ReadStreamEventsBackward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  name.vb: IHandle(Of ClientMessage.ReadStreamEventsBackward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.ReadStreamEventsForward>
  nameWithType: IHandle<ClientMessage.ReadStreamEventsForward>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>
  nameWithType.vb: IHandle(Of ClientMessage.ReadStreamEventsForward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  name.vb: IHandle(Of ClientMessage.ReadStreamEventsForward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.ReadAllEventsForward>
  nameWithType: IHandle<ClientMessage.ReadAllEventsForward>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>
  nameWithType.vb: IHandle(Of ClientMessage.ReadAllEventsForward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  name.vb: IHandle(Of ClientMessage.ReadAllEventsForward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    name: ClientMessage.ReadAllEventsForward
    nameWithType: ClientMessage.ReadAllEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    name: ClientMessage.ReadAllEventsForward
    nameWithType: ClientMessage.ReadAllEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.WriteEvents>
  nameWithType: IHandle<ClientMessage.WriteEvents>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.WriteEvents>
  nameWithType.vb: IHandle(Of ClientMessage.WriteEvents)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.WriteEvents)
  name.vb: IHandle(Of ClientMessage.WriteEvents)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ClientMessage.DeleteStream>
  nameWithType: IHandle<ClientMessage.DeleteStream>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.DeleteStream>
  nameWithType.vb: IHandle(Of ClientMessage.DeleteStream)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.DeleteStream)
  name.vb: IHandle(Of ClientMessage.DeleteStream)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStream
    name: ClientMessage.DeleteStream
    nameWithType: ClientMessage.DeleteStream
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStream
    name: ClientMessage.DeleteStream
    nameWithType: ClientMessage.DeleteStream
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SubSystemInitialized}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SubSystemInitialized}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<SystemMessage.SubSystemInitialized>
  nameWithType: IHandle<SystemMessage.SubSystemInitialized>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SubSystemInitialized>
  nameWithType.vb: IHandle(Of SystemMessage.SubSystemInitialized)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SubSystemInitialized)
  name.vb: IHandle(Of SystemMessage.SubSystemInitialized)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Core.Messages.SystemMessage.SubSystemInitialized
    name: SystemMessage.SubSystemInitialized
    nameWithType: SystemMessage.SubSystemInitialized
    fullName: EventStore.Core.Messages.SystemMessage.SubSystemInitialized
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Core.Messages.SystemMessage.SubSystemInitialized
    name: SystemMessage.SubSystemInitialized
    nameWithType: SystemMessage.SubSystemInitialized
    fullName: EventStore.Core.Messages.SystemMessage.SubSystemInitialized
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ProjectionCoreServiceMessage.SubComponentStarted>
  nameWithType: IHandle<ProjectionCoreServiceMessage.SubComponentStarted>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted>
  nameWithType.vb: IHandle(Of ProjectionCoreServiceMessage.SubComponentStarted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted)
  name.vb: IHandle(Of ProjectionCoreServiceMessage.SubComponentStarted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted
    name: ProjectionCoreServiceMessage.SubComponentStarted
    nameWithType: ProjectionCoreServiceMessage.SubComponentStarted
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted
    name: ProjectionCoreServiceMessage.SubComponentStarted
    nameWithType: ProjectionCoreServiceMessage.SubComponentStarted
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped}
  commentId: T:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped}
  parent: EventStore.Core.Bus
  definition: EventStore.Core.Bus.IHandle`1
  name: IHandle<ProjectionCoreServiceMessage.SubComponentStopped>
  nameWithType: IHandle<ProjectionCoreServiceMessage.SubComponentStopped>
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped>
  nameWithType.vb: IHandle(Of ProjectionCoreServiceMessage.SubComponentStopped)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped)
  name.vb: IHandle(Of ProjectionCoreServiceMessage.SubComponentStopped)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped
    name: ProjectionCoreServiceMessage.SubComponentStopped
    nameWithType: ProjectionCoreServiceMessage.SubComponentStopped
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped
    name: ProjectionCoreServiceMessage.SubComponentStopped
    nameWithType: ProjectionCoreServiceMessage.SubComponentStopped
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus.IHandle`1
  commentId: T:EventStore.Core.Bus.IHandle`1
  name: IHandle<T>
  nameWithType: IHandle<T>
  fullName: EventStore.Core.Bus.IHandle<T>
  nameWithType.vb: IHandle(Of T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T)
  name.vb: IHandle(Of T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1
    name: IHandle
    nameWithType: IHandle
    fullName: EventStore.Core.Bus.IHandle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Bus
  commentId: N:EventStore.Core.Bus
  name: EventStore.Core.Bus
  nameWithType: EventStore.Core.Bus
  fullName: EventStore.Core.Bus
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.#ctor*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.#ctor
  name: RequestResponseQueueForwarder
  nameWithType: RequestResponseQueueForwarder.RequestResponseQueueForwarder
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.RequestResponseQueueForwarder
- uid: EventStore.Core.Bus.IPublisher
  commentId: T:EventStore.Core.Bus.IPublisher
  parent: EventStore.Core.Bus
  name: IPublisher
  nameWithType: IPublisher
  fullName: EventStore.Core.Bus.IPublisher
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle
  name: Handle
  nameWithType: RequestResponseQueueForwarder.Handle
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}.Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}.Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadEvent}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.ReadEvent)
  nameWithType: IHandle<ClientMessage.ReadEvent>.Handle(ClientMessage.ReadEvent)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>.Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  nameWithType.vb: IHandle(Of ClientMessage.ReadEvent).Handle(ClientMessage.ReadEvent)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadEvent).Handle(EventStore.Core.Messages.ClientMessage.ReadEvent)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.ReadEvent>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadEvent>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadEvent
    name: ClientMessage.ReadEvent
    nameWithType: ClientMessage.ReadEvent
    fullName: EventStore.Core.Messages.ClientMessage.ReadEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.ReadEvent).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadEvent).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadEvent
    name: ClientMessage.ReadEvent
    nameWithType: ClientMessage.ReadEvent
    fullName: EventStore.Core.Messages.ClientMessage.ReadEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadEvent
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadEvent
  parent: EventStore.Core.Messages
  name: ClientMessage.ReadEvent
  nameWithType: ClientMessage.ReadEvent
  fullName: EventStore.Core.Messages.ClientMessage.ReadEvent
- uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
  commentId: M:EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(T)
  nameWithType: IHandle<T>.Handle(T)
  fullName: EventStore.Core.Bus.IHandle<T>.Handle(T)
  nameWithType.vb: IHandle(Of T).Handle(T)
  fullName.vb: EventStore.Core.Bus.IHandle(Of T).Handle(T)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<T>.Handle
    fullName: EventStore.Core.Bus.IHandle<T>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of T).Handle
    fullName: EventStore.Core.Bus.IHandle(Of T).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages
  commentId: N:EventStore.Core.Messages
  name: EventStore.Core.Messages
  nameWithType: EventStore.Core.Messages
  fullName: EventStore.Core.Messages
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.WriteEvents}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.WriteEvents)
  nameWithType: IHandle<ClientMessage.WriteEvents>.Handle(ClientMessage.WriteEvents)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.WriteEvents>.Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  nameWithType.vb: IHandle(Of ClientMessage.WriteEvents).Handle(ClientMessage.WriteEvents)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.WriteEvents).Handle(EventStore.Core.Messages.ClientMessage.WriteEvents)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.WriteEvents>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.WriteEvents>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.WriteEvents).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.WriteEvents).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.WriteEvents
    name: ClientMessage.WriteEvents
    nameWithType: ClientMessage.WriteEvents
    fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.WriteEvents
  commentId: T:EventStore.Core.Messages.ClientMessage.WriteEvents
  parent: EventStore.Core.Messages
  name: ClientMessage.WriteEvents
  nameWithType: ClientMessage.WriteEvents
  fullName: EventStore.Core.Messages.ClientMessage.WriteEvents
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.DeleteStream}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.DeleteStream)
  nameWithType: IHandle<ClientMessage.DeleteStream>.Handle(ClientMessage.DeleteStream)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.DeleteStream>.Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  nameWithType.vb: IHandle(Of ClientMessage.DeleteStream).Handle(ClientMessage.DeleteStream)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.DeleteStream).Handle(EventStore.Core.Messages.ClientMessage.DeleteStream)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.DeleteStream>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.DeleteStream>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStream
    name: ClientMessage.DeleteStream
    nameWithType: ClientMessage.DeleteStream
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.DeleteStream).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.DeleteStream).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.DeleteStream
    name: ClientMessage.DeleteStream
    nameWithType: ClientMessage.DeleteStream
    fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.DeleteStream
  commentId: T:EventStore.Core.Messages.ClientMessage.DeleteStream
  parent: EventStore.Core.Messages
  name: ClientMessage.DeleteStream
  nameWithType: ClientMessage.DeleteStream
  fullName: EventStore.Core.Messages.ClientMessage.DeleteStream
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.ReadStreamEventsBackward)
  nameWithType: IHandle<ClientMessage.ReadStreamEventsBackward>.Handle(ClientMessage.ReadStreamEventsBackward)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  nameWithType.vb: IHandle(Of ClientMessage.ReadStreamEventsBackward).Handle(ClientMessage.ReadStreamEventsBackward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward).Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.ReadStreamEventsBackward>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.ReadStreamEventsBackward).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
    name: ClientMessage.ReadStreamEventsBackward
    nameWithType: ClientMessage.ReadStreamEventsBackward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
  parent: EventStore.Core.Messages
  name: ClientMessage.ReadStreamEventsBackward
  nameWithType: ClientMessage.ReadStreamEventsBackward
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsBackward
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.ReadStreamEventsForward)
  nameWithType: IHandle<ClientMessage.ReadStreamEventsForward>.Handle(ClientMessage.ReadStreamEventsForward)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  nameWithType.vb: IHandle(Of ClientMessage.ReadStreamEventsForward).Handle(ClientMessage.ReadStreamEventsForward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward).Handle(EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.ReadStreamEventsForward>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.ReadStreamEventsForward).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
    name: ClientMessage.ReadStreamEventsForward
    nameWithType: ClientMessage.ReadStreamEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
  parent: EventStore.Core.Messages
  name: ClientMessage.ReadStreamEventsForward
  nameWithType: ClientMessage.ReadStreamEventsForward
  fullName: EventStore.Core.Messages.ClientMessage.ReadStreamEventsForward
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.ClientMessage.ReadAllEventsForward}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ClientMessage.ReadAllEventsForward)
  nameWithType: IHandle<ClientMessage.ReadAllEventsForward>.Handle(ClientMessage.ReadAllEventsForward)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  nameWithType.vb: IHandle(Of ClientMessage.ReadAllEventsForward).Handle(ClientMessage.ReadAllEventsForward)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsForward).Handle(EventStore.Core.Messages.ClientMessage.ReadAllEventsForward)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ClientMessage.ReadAllEventsForward>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.ClientMessage.ReadAllEventsForward>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    name: ClientMessage.ReadAllEventsForward
    nameWithType: ClientMessage.ReadAllEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ClientMessage.ReadAllEventsForward).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.ClientMessage.ReadAllEventsForward).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
    name: ClientMessage.ReadAllEventsForward
    nameWithType: ClientMessage.ReadAllEventsForward
    fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  commentId: T:EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
  parent: EventStore.Core.Messages
  name: ClientMessage.ReadAllEventsForward
  nameWithType: ClientMessage.ReadAllEventsForward
  fullName: EventStore.Core.Messages.ClientMessage.ReadAllEventsForward
- uid: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SubSystemInitialized}.Handle(EventStore.Core.Messages.SystemMessage.SubSystemInitialized)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SubSystemInitialized}.Handle(EventStore.Core.Messages.SystemMessage.SubSystemInitialized)
  parent: EventStore.Core.Bus.IHandle{EventStore.Core.Messages.SystemMessage.SubSystemInitialized}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(SystemMessage.SubSystemInitialized)
  nameWithType: IHandle<SystemMessage.SubSystemInitialized>.Handle(SystemMessage.SubSystemInitialized)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SubSystemInitialized>.Handle(EventStore.Core.Messages.SystemMessage.SubSystemInitialized)
  nameWithType.vb: IHandle(Of SystemMessage.SubSystemInitialized).Handle(SystemMessage.SubSystemInitialized)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SubSystemInitialized).Handle(EventStore.Core.Messages.SystemMessage.SubSystemInitialized)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<SystemMessage.SubSystemInitialized>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Core.Messages.SystemMessage.SubSystemInitialized>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.SubSystemInitialized
    name: SystemMessage.SubSystemInitialized
    nameWithType: SystemMessage.SubSystemInitialized
    fullName: EventStore.Core.Messages.SystemMessage.SubSystemInitialized
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of SystemMessage.SubSystemInitialized).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Core.Messages.SystemMessage.SubSystemInitialized).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Core.Messages.SystemMessage.SubSystemInitialized
    name: SystemMessage.SubSystemInitialized
    nameWithType: SystemMessage.SubSystemInitialized
    fullName: EventStore.Core.Messages.SystemMessage.SubSystemInitialized
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Messages.SystemMessage.SubSystemInitialized
  commentId: T:EventStore.Core.Messages.SystemMessage.SubSystemInitialized
  parent: EventStore.Core.Messages
  name: SystemMessage.SubSystemInitialized
  nameWithType: SystemMessage.SubSystemInitialized
  fullName: EventStore.Core.Messages.SystemMessage.SubSystemInitialized
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStarted}#Handle*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStarted}#Handle
  name: IHandle<ProjectionCoreServiceMessage.SubComponentStarted>.Handle
  nameWithType: RequestResponseQueueForwarder.IHandle<ProjectionCoreServiceMessage.SubComponentStarted>.Handle
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted>.Handle
  nameWithType.vb: RequestResponseQueueForwarder.EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted>.Handle
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted>.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ProjectionCoreServiceMessage.SubComponentStarted)
  nameWithType: IHandle<ProjectionCoreServiceMessage.SubComponentStarted>.Handle(ProjectionCoreServiceMessage.SubComponentStarted)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted>.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted)
  nameWithType.vb: IHandle(Of ProjectionCoreServiceMessage.SubComponentStarted).Handle(ProjectionCoreServiceMessage.SubComponentStarted)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted).Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ProjectionCoreServiceMessage.SubComponentStarted>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted
    name: ProjectionCoreServiceMessage.SubComponentStarted
    nameWithType: ProjectionCoreServiceMessage.SubComponentStarted
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ProjectionCoreServiceMessage.SubComponentStarted).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted
    name: ProjectionCoreServiceMessage.SubComponentStarted
    nameWithType: ProjectionCoreServiceMessage.SubComponentStarted
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted
  commentId: T:EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted
  parent: EventStore.Projections.Core.Messages
  name: ProjectionCoreServiceMessage.SubComponentStarted
  nameWithType: ProjectionCoreServiceMessage.SubComponentStarted
  fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStarted
- uid: EventStore.Projections.Core.Messages
  commentId: N:EventStore.Projections.Core.Messages
  name: EventStore.Projections.Core.Messages
  nameWithType: EventStore.Projections.Core.Messages
  fullName: EventStore.Projections.Core.Messages
- uid: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStopped}#Handle*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore#Core#Bus#IHandle{EventStore#Projections#Core#Messages#ProjectionCoreServiceMessage#SubComponentStopped}#Handle
  name: IHandle<ProjectionCoreServiceMessage.SubComponentStopped>.Handle
  nameWithType: RequestResponseQueueForwarder.IHandle<ProjectionCoreServiceMessage.SubComponentStopped>.Handle
  fullName: EventStore.Projections.Core.Services.Processing.RequestResponseQueueForwarder.EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped>.Handle
  nameWithType.vb: RequestResponseQueueForwarder.EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped>.Handle
  name.vb: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped>.Handle
- uid: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped)
  commentId: M:EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped}.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped)
  parent: EventStore.Core.Bus.IHandle{EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped}
  definition: EventStore.Core.Bus.IHandle`1.Handle(`0)
  name: Handle(ProjectionCoreServiceMessage.SubComponentStopped)
  nameWithType: IHandle<ProjectionCoreServiceMessage.SubComponentStopped>.Handle(ProjectionCoreServiceMessage.SubComponentStopped)
  fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped>.Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped)
  nameWithType.vb: IHandle(Of ProjectionCoreServiceMessage.SubComponentStopped).Handle(ProjectionCoreServiceMessage.SubComponentStopped)
  fullName.vb: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped).Handle(EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped)
  spec.csharp:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle<ProjectionCoreServiceMessage.SubComponentStopped>.Handle
    fullName: EventStore.Core.Bus.IHandle<EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped
    name: ProjectionCoreServiceMessage.SubComponentStopped
    nameWithType: ProjectionCoreServiceMessage.SubComponentStopped
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Bus.IHandle`1.Handle(`0)
    name: Handle
    nameWithType: IHandle(Of ProjectionCoreServiceMessage.SubComponentStopped).Handle
    fullName: EventStore.Core.Bus.IHandle(Of EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped
    name: ProjectionCoreServiceMessage.SubComponentStopped
    nameWithType: ProjectionCoreServiceMessage.SubComponentStopped
    fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped
  commentId: T:EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped
  parent: EventStore.Projections.Core.Messages
  name: ProjectionCoreServiceMessage.SubComponentStopped
  nameWithType: ProjectionCoreServiceMessage.SubComponentStopped
  fullName: EventStore.Projections.Core.Messages.ProjectionCoreServiceMessage.SubComponentStopped

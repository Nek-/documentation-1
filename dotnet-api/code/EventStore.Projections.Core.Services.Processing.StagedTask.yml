### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Services.Processing.StagedTask
  commentId: T:EventStore.Projections.Core.Services.Processing.StagedTask
  id: StagedTask
  parent: EventStore.Projections.Core.Services.Processing
  children:
  - EventStore.Projections.Core.Services.Processing.StagedTask.#ctor(System.Object)
  - EventStore.Projections.Core.Services.Processing.StagedTask.InitialCorrelationId
  - EventStore.Projections.Core.Services.Processing.StagedTask.Process(System.Int32,Action{System.Int32,System.Object})
  langs:
  - csharp
  - vb
  name: StagedTask
  nameWithType: StagedTask
  fullName: EventStore.Projections.Core.Services.Processing.StagedTask
  type: Class
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/StagedProcessingQueue.cs
      branch: feature/docs-connection-code
      repo: git@github.com:EventStore/EventStore.git
    id: StagedTask
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/StagedProcessingQueue.cs
    startLine: 256
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: 'public abstract class StagedTask : object'
    content.vb: >-
      Public MustInherit Class StagedTask

          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - EventStore.Projections.Core.Services.Processing.WorkItem
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EventStore.Projections.Core.Services.Processing.StagedTask.InitialCorrelationId
  commentId: F:EventStore.Projections.Core.Services.Processing.StagedTask.InitialCorrelationId
  id: InitialCorrelationId
  parent: EventStore.Projections.Core.Services.Processing.StagedTask
  langs:
  - csharp
  - vb
  name: InitialCorrelationId
  nameWithType: StagedTask.InitialCorrelationId
  fullName: EventStore.Projections.Core.Services.Processing.StagedTask.InitialCorrelationId
  type: Field
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/StagedProcessingQueue.cs
      branch: feature/docs-connection-code
      repo: git@github.com:EventStore/EventStore.git
    id: InitialCorrelationId
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/StagedProcessingQueue.cs
    startLine: 257
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public readonly object InitialCorrelationId
    return:
      type: System.Object
    content.vb: Public ReadOnly InitialCorrelationId As Object
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Projections.Core.Services.Processing.StagedTask.#ctor(System.Object)
  commentId: M:EventStore.Projections.Core.Services.Processing.StagedTask.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: EventStore.Projections.Core.Services.Processing.StagedTask
  langs:
  - csharp
  - vb
  name: StagedTask(Object)
  nameWithType: StagedTask.StagedTask(Object)
  fullName: EventStore.Projections.Core.Services.Processing.StagedTask.StagedTask(System.Object)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/StagedProcessingQueue.cs
      branch: feature/docs-connection-code
      repo: git@github.com:EventStore/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/StagedProcessingQueue.cs
    startLine: 259
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: protected StagedTask(object initialCorrelationId)
    parameters:
    - id: initialCorrelationId
      type: System.Object
    content.vb: Protected Sub New(initialCorrelationId As Object)
  overload: EventStore.Projections.Core.Services.Processing.StagedTask.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EventStore.Projections.Core.Services.Processing.StagedTask.Process(System.Int32,Action{System.Int32,System.Object})
  commentId: M:EventStore.Projections.Core.Services.Processing.StagedTask.Process(System.Int32,Action{System.Int32,System.Object})
  id: Process(System.Int32,Action{System.Int32,System.Object})
  parent: EventStore.Projections.Core.Services.Processing.StagedTask
  langs:
  - csharp
  - vb
  name: Process(Int32, Action<Int32, Object>)
  nameWithType: StagedTask.Process(Int32, Action<Int32, Object>)
  fullName: EventStore.Projections.Core.Services.Processing.StagedTask.Process(System.Int32, Action<System.Int32, System.Object>)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Services/Processing/StagedProcessingQueue.cs
      branch: feature/docs-connection-code
      repo: git@github.com:EventStore/EventStore.git
    id: Process
    path: ../EventStore/src/EventStore.Projections.Core/Services/Processing/StagedProcessingQueue.cs
    startLine: 263
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Services.Processing
  syntax:
    content: public abstract void Process(int onStage, Action<int, object> readyForStage)
    parameters:
    - id: onStage
      type: System.Int32
    - id: readyForStage
      type: Action{System.Int32,System.Object}
    content.vb: Public MustOverride Sub Process(onStage As Integer, readyForStage As Action(Of Integer, Object))
  overload: EventStore.Projections.Core.Services.Processing.StagedTask.Process*
  nameWithType.vb: StagedTask.Process(Int32, Action(Of Int32, Object))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: EventStore.Projections.Core.Services.Processing.StagedTask.Process(System.Int32, Action(Of System.Int32, System.Object))
  name.vb: Process(Int32, Action(Of Int32, Object))
references:
- uid: EventStore.Projections.Core.Services.Processing
  commentId: N:EventStore.Projections.Core.Services.Processing
  name: EventStore.Projections.Core.Services.Processing
  nameWithType: EventStore.Projections.Core.Services.Processing
  fullName: EventStore.Projections.Core.Services.Processing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Projections.Core.Services.Processing.StagedTask.#ctor*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.StagedTask.#ctor
  name: StagedTask
  nameWithType: StagedTask.StagedTask
  fullName: EventStore.Projections.Core.Services.Processing.StagedTask.StagedTask
- uid: EventStore.Projections.Core.Services.Processing.StagedTask.Process*
  commentId: Overload:EventStore.Projections.Core.Services.Processing.StagedTask.Process
  name: Process
  nameWithType: StagedTask.Process
  fullName: EventStore.Projections.Core.Services.Processing.StagedTask.Process
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Action{System.Int32,System.Object}
  commentId: '!:Action{System.Int32,System.Object}'
  definition: Action`2
  name: Action<Int32, Object>
  nameWithType: Action<Int32, Object>
  fullName: Action<System.Int32, System.Object>
  nameWithType.vb: Action(Of Int32, Object)
  fullName.vb: Action(Of System.Int32, System.Object)
  name.vb: Action(Of Int32, Object)
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`2
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

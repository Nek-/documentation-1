### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.Utils.EnumExtensions
  commentId: T:EventStore.Projections.Core.Utils.EnumExtensions
  id: EnumExtensions
  parent: EventStore.Projections.Core.Utils
  children:
  - EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  langs:
  - csharp
  - vb
  name: EnumExtensions
  nameWithType: EnumExtensions
  fullName: EventStore.Projections.Core.Utils.EnumExtensions
  type: Class
  source:
    remote:
      path: src/EventStore.Projections.Core/Utils/EnumExtensions.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: EnumExtensions
    path: ../EventStore/src/EventStore.Projections.Core/Utils/EnumExtensions.cs
    startLine: 4
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Utils
  syntax:
    content: 'public static class EnumExtensions : object'
    content.vb: >-
      Public Module EnumExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  id: EnumValueName``1(``0)
  isExtensionMethod: true
  parent: EventStore.Projections.Core.Utils.EnumExtensions
  langs:
  - csharp
  - vb
  name: EnumValueName<T>(T)
  nameWithType: EnumExtensions.EnumValueName<T>(T)
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>(T)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/Utils/EnumExtensions.cs
      branch: master
      repo: https://github.com/EventStore/EventStore.git
    id: EnumValueName
    path: ../EventStore/src/EventStore.Projections.Core/Utils/EnumExtensions.cs
    startLine: 6
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.Utils
  syntax:
    content: >-
      public static string EnumValueName<T>(this T value)
          where T : struct
    parameters:
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnumValueName(Of T As Structure)(value As T) As String
  overload: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName*
  nameWithType.vb: EnumExtensions.EnumValueName(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)(T)
  name.vb: EnumValueName(Of T)(T)
references:
- uid: EventStore.Projections.Core.Utils
  commentId: N:EventStore.Projections.Core.Utils
  name: EventStore.Projections.Core.Utils
  nameWithType: EventStore.Projections.Core.Utils
  fullName: EventStore.Projections.Core.Utils
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName*
  commentId: Overload:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName
  name: EnumValueName
  nameWithType: EnumExtensions.EnumValueName
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: T
  name: T
  nameWithType: T
  fullName: T

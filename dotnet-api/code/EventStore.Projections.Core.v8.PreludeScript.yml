### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.v8.PreludeScript
  commentId: T:EventStore.Projections.Core.v8.PreludeScript
  id: PreludeScript
  parent: EventStore.Projections.Core.v8
  children:
  - EventStore.Projections.Core.v8.PreludeScript.#ctor(System.String,System.String,Func{System.String,Tuple{System.String,System.String}},Action{System.Int32,Action},Action{System.String,System.Object[]})
  - EventStore.Projections.Core.v8.PreludeScript.CancelTerminateExecution
  - EventStore.Projections.Core.v8.PreludeScript.Dispose
  - EventStore.Projections.Core.v8.PreludeScript.GetHandle
  - EventStore.Projections.Core.v8.PreludeScript.ScheduleTerminateExecution
  langs:
  - csharp
  - vb
  name: PreludeScript
  nameWithType: PreludeScript
  fullName: EventStore.Projections.Core.v8.PreludeScript
  type: Class
  source:
    id: PreludeScript
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Projections.Core/v8/PreludeScript.cs
    startLine: 6
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: 'public class PreludeScript : IDisposable'
    content.vb: >-
      Public Class PreludeScript

          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Projections.Core.v8.PreludeScript.#ctor(System.String,System.String,Func{System.String,Tuple{System.String,System.String}},Action{System.Int32,Action},Action{System.String,System.Object[]})
  commentId: M:EventStore.Projections.Core.v8.PreludeScript.#ctor(System.String,System.String,Func{System.String,Tuple{System.String,System.String}},Action{System.Int32,Action},Action{System.String,System.Object[]})
  id: '#ctor(System.String,System.String,Func{System.String,Tuple{System.String,System.String}},Action{System.Int32,Action},Action{System.String,System.Object[]})'
  parent: EventStore.Projections.Core.v8.PreludeScript
  langs:
  - csharp
  - vb
  name: PreludeScript(String, String, Func<String, Tuple<String, String>>, Action<Int32, Action>, Action<String, Object[]>)
  nameWithType: PreludeScript.PreludeScript(String, String, Func<String, Tuple<String, String>>, Action<Int32, Action>, Action<String, Object[]>)
  fullName: EventStore.Projections.Core.v8.PreludeScript.PreludeScript(System.String, System.String, Func<System.String, Tuple<System.String, System.String>>, Action<System.Int32, Action>, Action<System.String, System.Object[]>)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Projections.Core/v8/PreludeScript.cs
    startLine: 32
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public PreludeScript(string script, string fileName, Func<string, Tuple<string, string>> getModuleSourceAndFileName, Action<int, Action> cancelCallbackFactory, Action<string, object[]> logger = null)
    parameters:
    - id: script
      type: System.String
    - id: fileName
      type: System.String
    - id: getModuleSourceAndFileName
      type: Func{System.String,Tuple{System.String,System.String}}
    - id: cancelCallbackFactory
      type: Action{System.Int32,Action}
    - id: logger
      type: Action{System.String,System.Object[]}
    content.vb: Public Sub New(script As String, fileName As String, getModuleSourceAndFileName As Func(Of String, Tuple(Of String, String)), cancelCallbackFactory As Action(Of Integer, Action), logger As Action(Of String, Object()) = Nothing)
  overload: EventStore.Projections.Core.v8.PreludeScript.#ctor*
  nameWithType.vb: PreludeScript.PreludeScript(String, String, Func(Of String, Tuple(Of String, String)), Action(Of Int32, Action), Action(Of String, Object()))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Projections.Core.v8.PreludeScript.PreludeScript(System.String, System.String, Func(Of System.String, Tuple(Of System.String, System.String)), Action(Of System.Int32, Action), Action(Of System.String, System.Object()))
  name.vb: PreludeScript(String, String, Func(Of String, Tuple(Of String, String)), Action(Of Int32, Action), Action(Of String, Object()))
- uid: EventStore.Projections.Core.v8.PreludeScript.Dispose
  commentId: M:EventStore.Projections.Core.v8.PreludeScript.Dispose
  id: Dispose
  parent: EventStore.Projections.Core.v8.PreludeScript
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: PreludeScript.Dispose()
  fullName: EventStore.Projections.Core.v8.PreludeScript.Dispose()
  type: Method
  source:
    id: Dispose
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Projections.Core/v8/PreludeScript.cs
    startLine: 105
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: EventStore.Projections.Core.v8.PreludeScript.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.v8.PreludeScript.GetHandle
  commentId: M:EventStore.Projections.Core.v8.PreludeScript.GetHandle
  id: GetHandle
  parent: EventStore.Projections.Core.v8.PreludeScript
  langs:
  - csharp
  - vb
  name: GetHandle()
  nameWithType: PreludeScript.GetHandle()
  fullName: EventStore.Projections.Core.v8.PreludeScript.GetHandle()
  type: Method
  source:
    id: GetHandle
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Projections.Core/v8/PreludeScript.cs
    startLine: 110
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public IntPtr GetHandle()
    return:
      type: IntPtr
    content.vb: Public Function GetHandle As IntPtr
  overload: EventStore.Projections.Core.v8.PreludeScript.GetHandle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.v8.PreludeScript.ScheduleTerminateExecution
  commentId: M:EventStore.Projections.Core.v8.PreludeScript.ScheduleTerminateExecution
  id: ScheduleTerminateExecution
  parent: EventStore.Projections.Core.v8.PreludeScript
  langs:
  - csharp
  - vb
  name: ScheduleTerminateExecution()
  nameWithType: PreludeScript.ScheduleTerminateExecution()
  fullName: EventStore.Projections.Core.v8.PreludeScript.ScheduleTerminateExecution()
  type: Method
  source:
    id: ScheduleTerminateExecution
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Projections.Core/v8/PreludeScript.cs
    startLine: 140
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public void ScheduleTerminateExecution()
    content.vb: Public Sub ScheduleTerminateExecution
  overload: EventStore.Projections.Core.v8.PreludeScript.ScheduleTerminateExecution*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.v8.PreludeScript.CancelTerminateExecution
  commentId: M:EventStore.Projections.Core.v8.PreludeScript.CancelTerminateExecution
  id: CancelTerminateExecution
  parent: EventStore.Projections.Core.v8.PreludeScript
  langs:
  - csharp
  - vb
  name: CancelTerminateExecution()
  nameWithType: PreludeScript.CancelTerminateExecution()
  fullName: EventStore.Projections.Core.v8.PreludeScript.CancelTerminateExecution()
  type: Method
  source:
    id: CancelTerminateExecution
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Projections.Core/v8/PreludeScript.cs
    startLine: 158
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public bool CancelTerminateExecution()
    return:
      type: System.Boolean
    content.vb: Public Function CancelTerminateExecution As Boolean
  overload: EventStore.Projections.Core.v8.PreludeScript.CancelTerminateExecution*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Projections.Core.v8
  commentId: N:EventStore.Projections.Core.v8
  name: EventStore.Projections.Core.v8
  nameWithType: EventStore.Projections.Core.v8
  fullName: EventStore.Projections.Core.v8
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Projections.Core.v8.PreludeScript.#ctor*
  commentId: Overload:EventStore.Projections.Core.v8.PreludeScript.#ctor
  name: PreludeScript
  nameWithType: PreludeScript.PreludeScript
  fullName: EventStore.Projections.Core.v8.PreludeScript.PreludeScript
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Func{System.String,Tuple{System.String,System.String}}
  commentId: '!:Func{System.String,Tuple{System.String,System.String}}'
  definition: Func`2
  name: Func<String, Tuple<String, String>>
  nameWithType: Func<String, Tuple<String, String>>
  fullName: Func<System.String, Tuple<System.String, System.String>>
  nameWithType.vb: Func(Of String, Tuple(Of String, String))
  fullName.vb: Func(Of System.String, Tuple(Of System.String, System.String))
  name.vb: Func(Of String, Tuple(Of String, String))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{System.Int32,Action}
  commentId: '!:Action{System.Int32,Action}'
  definition: Action`2
  name: Action<Int32, Action>
  nameWithType: Action<Int32, Action>
  fullName: Action<System.Int32, Action>
  nameWithType.vb: Action(Of Int32, Action)
  fullName.vb: Action(Of System.Int32, Action)
  name.vb: Action(Of Int32, Action)
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{System.String,System.Object[]}
  commentId: '!:Action{System.String,System.Object[]}'
  definition: Action`2
  name: Action<String, Object[]>
  nameWithType: Action<String, Object[]>
  fullName: Action<System.String, System.Object[]>
  nameWithType.vb: Action(Of String, Object())
  fullName.vb: Action(Of System.String, System.Object())
  name.vb: Action(Of String, Object())
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`2
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.v8.PreludeScript.Dispose*
  commentId: Overload:EventStore.Projections.Core.v8.PreludeScript.Dispose
  name: Dispose
  nameWithType: PreludeScript.Dispose
  fullName: EventStore.Projections.Core.v8.PreludeScript.Dispose
- uid: EventStore.Projections.Core.v8.PreludeScript.GetHandle*
  commentId: Overload:EventStore.Projections.Core.v8.PreludeScript.GetHandle
  name: GetHandle
  nameWithType: PreludeScript.GetHandle
  fullName: EventStore.Projections.Core.v8.PreludeScript.GetHandle
- uid: IntPtr
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: IntPtr
- uid: EventStore.Projections.Core.v8.PreludeScript.ScheduleTerminateExecution*
  commentId: Overload:EventStore.Projections.Core.v8.PreludeScript.ScheduleTerminateExecution
  name: ScheduleTerminateExecution
  nameWithType: PreludeScript.ScheduleTerminateExecution
  fullName: EventStore.Projections.Core.v8.PreludeScript.ScheduleTerminateExecution
- uid: EventStore.Projections.Core.v8.PreludeScript.CancelTerminateExecution*
  commentId: Overload:EventStore.Projections.Core.v8.PreludeScript.CancelTerminateExecution
  name: CancelTerminateExecution
  nameWithType: PreludeScript.CancelTerminateExecution
  fullName: EventStore.Projections.Core.v8.PreludeScript.CancelTerminateExecution
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean

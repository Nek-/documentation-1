### YamlMime:ManagedReference
items:
- uid: EventStore.Projections.Core.v8.QueryScript
  commentId: T:EventStore.Projections.Core.v8.QueryScript
  id: QueryScript
  parent: EventStore.Projections.Core.v8
  children:
  - EventStore.Projections.Core.v8.QueryScript.#ctor(EventStore.Projections.Core.v8.PreludeScript,System.String,System.String)
  - EventStore.Projections.Core.v8.QueryScript.Dispose
  - EventStore.Projections.Core.v8.QueryScript.Emit
  - EventStore.Projections.Core.v8.QueryScript.GetPartition(System.String,System.String[])
  - EventStore.Projections.Core.v8.QueryScript.GetSourcesDefintion
  - EventStore.Projections.Core.v8.QueryScript.Initialize
  - EventStore.Projections.Core.v8.QueryScript.InitializeShared
  - EventStore.Projections.Core.v8.QueryScript.NotifyCreated(System.String,System.String[])
  - EventStore.Projections.Core.v8.QueryScript.NotifyDeleted(System.String,System.String[])
  - EventStore.Projections.Core.v8.QueryScript.Push(System.String,System.String[])
  - EventStore.Projections.Core.v8.QueryScript.SetSharedState(System.String)
  - EventStore.Projections.Core.v8.QueryScript.SetState(System.String)
  - EventStore.Projections.Core.v8.QueryScript.TransformCatalogEvent(System.String,System.String[])
  - EventStore.Projections.Core.v8.QueryScript.TransformStateToResult
  langs:
  - csharp
  - vb
  name: QueryScript
  nameWithType: QueryScript
  fullName: EventStore.Projections.Core.v8.QueryScript
  type: Class
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: QueryScript
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 8
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: 'public class QueryScript : IDisposable'
    content.vb: >-
      Public Class QueryScript
          Inherits IDisposable
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Projections.Core.v8.QueryScript.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Projections.Core.v8.QueryScript.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Projections.Core.v8.QueryScript.Emit
  commentId: E:EventStore.Projections.Core.v8.QueryScript.Emit
  id: Emit
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: Emit
  nameWithType: QueryScript.Emit
  fullName: EventStore.Projections.Core.v8.QueryScript.Emit
  type: Event
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Emit
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 32
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public event Action<string> Emit
    return:
      type: Action{System.String}
    content.vb: Public Event Emit As Action(Of String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.v8.QueryScript.#ctor(EventStore.Projections.Core.v8.PreludeScript,System.String,System.String)
  commentId: M:EventStore.Projections.Core.v8.QueryScript.#ctor(EventStore.Projections.Core.v8.PreludeScript,System.String,System.String)
  id: '#ctor(EventStore.Projections.Core.v8.PreludeScript,System.String,System.String)'
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: QueryScript(PreludeScript, String, String)
  nameWithType: QueryScript.QueryScript(PreludeScript, String, String)
  fullName: EventStore.Projections.Core.v8.QueryScript.QueryScript(EventStore.Projections.Core.v8.PreludeScript, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 34
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public QueryScript(PreludeScript prelude, string script, string fileName)
    parameters:
    - id: prelude
      type: EventStore.Projections.Core.v8.PreludeScript
    - id: script
      type: System.String
    - id: fileName
      type: System.String
    content.vb: Public Sub New(prelude As PreludeScript, script As String, fileName As String)
  overload: EventStore.Projections.Core.v8.QueryScript.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.v8.QueryScript.Dispose
  commentId: M:EventStore.Projections.Core.v8.QueryScript.Dispose
  id: Dispose
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: QueryScript.Dispose()
  fullName: EventStore.Projections.Core.v8.QueryScript.Dispose()
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Dispose
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 182
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: EventStore.Projections.Core.v8.QueryScript.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.v8.QueryScript.Initialize
  commentId: M:EventStore.Projections.Core.v8.QueryScript.Initialize
  id: Initialize
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: QueryScript.Initialize()
  fullName: EventStore.Projections.Core.v8.QueryScript.Initialize()
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Initialize
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 186
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public void Initialize()
    content.vb: Public Sub Initialize
  overload: EventStore.Projections.Core.v8.QueryScript.Initialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.v8.QueryScript.InitializeShared
  commentId: M:EventStore.Projections.Core.v8.QueryScript.InitializeShared
  id: InitializeShared
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: InitializeShared()
  nameWithType: QueryScript.InitializeShared()
  fullName: EventStore.Projections.Core.v8.QueryScript.InitializeShared()
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: InitializeShared
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 190
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public void InitializeShared()
    content.vb: Public Sub InitializeShared
  overload: EventStore.Projections.Core.v8.QueryScript.InitializeShared*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.v8.QueryScript.GetPartition(System.String,System.String[])
  commentId: M:EventStore.Projections.Core.v8.QueryScript.GetPartition(System.String,System.String[])
  id: GetPartition(System.String,System.String[])
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: GetPartition(String, String[])
  nameWithType: QueryScript.GetPartition(String, String[])
  fullName: EventStore.Projections.Core.v8.QueryScript.GetPartition(System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetPartition
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 204
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public string GetPartition(string json, string[] other)
    parameters:
    - id: json
      type: System.String
    - id: other
      type: System.String[]
    return:
      type: System.String
    content.vb: Public Function GetPartition(json As String, other As String()) As String
  overload: EventStore.Projections.Core.v8.QueryScript.GetPartition*
  nameWithType.vb: QueryScript.GetPartition(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Projections.Core.v8.QueryScript.GetPartition(System.String, System.String())
  name.vb: GetPartition(String, String())
- uid: EventStore.Projections.Core.v8.QueryScript.TransformCatalogEvent(System.String,System.String[])
  commentId: M:EventStore.Projections.Core.v8.QueryScript.TransformCatalogEvent(System.String,System.String[])
  id: TransformCatalogEvent(System.String,System.String[])
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: TransformCatalogEvent(String, String[])
  nameWithType: QueryScript.TransformCatalogEvent(String, String[])
  fullName: EventStore.Projections.Core.v8.QueryScript.TransformCatalogEvent(System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TransformCatalogEvent
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 211
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public string TransformCatalogEvent(string json, string[] other)
    parameters:
    - id: json
      type: System.String
    - id: other
      type: System.String[]
    return:
      type: System.String
    content.vb: Public Function TransformCatalogEvent(json As String, other As String()) As String
  overload: EventStore.Projections.Core.v8.QueryScript.TransformCatalogEvent*
  nameWithType.vb: QueryScript.TransformCatalogEvent(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Projections.Core.v8.QueryScript.TransformCatalogEvent(System.String, System.String())
  name.vb: TransformCatalogEvent(String, String())
- uid: EventStore.Projections.Core.v8.QueryScript.Push(System.String,System.String[])
  commentId: M:EventStore.Projections.Core.v8.QueryScript.Push(System.String,System.String[])
  id: Push(System.String,System.String[])
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: Push(String, String[])
  nameWithType: QueryScript.Push(String, String[])
  fullName: EventStore.Projections.Core.v8.QueryScript.Push(System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Push
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 219
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public Tuple<string, string> Push(string json, string[] other)
    parameters:
    - id: json
      type: System.String
    - id: other
      type: System.String[]
    return:
      type: Tuple{System.String,System.String}
    content.vb: Public Function Push(json As String, other As String()) As Tuple(Of String, String)
  overload: EventStore.Projections.Core.v8.QueryScript.Push*
  nameWithType.vb: QueryScript.Push(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Projections.Core.v8.QueryScript.Push(System.String, System.String())
  name.vb: Push(String, String())
- uid: EventStore.Projections.Core.v8.QueryScript.NotifyDeleted(System.String,System.String[])
  commentId: M:EventStore.Projections.Core.v8.QueryScript.NotifyDeleted(System.String,System.String[])
  id: NotifyDeleted(System.String,System.String[])
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: NotifyDeleted(String, String[])
  nameWithType: QueryScript.NotifyDeleted(String, String[])
  fullName: EventStore.Projections.Core.v8.QueryScript.NotifyDeleted(System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: NotifyDeleted
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 226
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public string NotifyDeleted(string json, string[] other)
    parameters:
    - id: json
      type: System.String
    - id: other
      type: System.String[]
    return:
      type: System.String
    content.vb: Public Function NotifyDeleted(json As String, other As String()) As String
  overload: EventStore.Projections.Core.v8.QueryScript.NotifyDeleted*
  nameWithType.vb: QueryScript.NotifyDeleted(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Projections.Core.v8.QueryScript.NotifyDeleted(System.String, System.String())
  name.vb: NotifyDeleted(String, String())
- uid: EventStore.Projections.Core.v8.QueryScript.NotifyCreated(System.String,System.String[])
  commentId: M:EventStore.Projections.Core.v8.QueryScript.NotifyCreated(System.String,System.String[])
  id: NotifyCreated(System.String,System.String[])
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: NotifyCreated(String, String[])
  nameWithType: QueryScript.NotifyCreated(String, String[])
  fullName: EventStore.Projections.Core.v8.QueryScript.NotifyCreated(System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: NotifyCreated
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 234
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public string NotifyCreated(string json, string[] other)
    parameters:
    - id: json
      type: System.String
    - id: other
      type: System.String[]
    return:
      type: System.String
    content.vb: Public Function NotifyCreated(json As String, other As String()) As String
  overload: EventStore.Projections.Core.v8.QueryScript.NotifyCreated*
  nameWithType.vb: QueryScript.NotifyCreated(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Projections.Core.v8.QueryScript.NotifyCreated(System.String, System.String())
  name.vb: NotifyCreated(String, String())
- uid: EventStore.Projections.Core.v8.QueryScript.TransformStateToResult
  commentId: M:EventStore.Projections.Core.v8.QueryScript.TransformStateToResult
  id: TransformStateToResult
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: TransformStateToResult()
  nameWithType: QueryScript.TransformStateToResult()
  fullName: EventStore.Projections.Core.v8.QueryScript.TransformStateToResult()
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TransformStateToResult
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 242
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public string TransformStateToResult()
    return:
      type: System.String
    content.vb: Public Function TransformStateToResult As String
  overload: EventStore.Projections.Core.v8.QueryScript.TransformStateToResult*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.v8.QueryScript.SetState(System.String)
  commentId: M:EventStore.Projections.Core.v8.QueryScript.SetState(System.String)
  id: SetState(System.String)
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: SetState(String)
  nameWithType: QueryScript.SetState(String)
  fullName: EventStore.Projections.Core.v8.QueryScript.SetState(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SetState
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 250
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public void SetState(string state)
    parameters:
    - id: state
      type: System.String
    content.vb: Public Sub SetState(state As String)
  overload: EventStore.Projections.Core.v8.QueryScript.SetState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.v8.QueryScript.SetSharedState(System.String)
  commentId: M:EventStore.Projections.Core.v8.QueryScript.SetSharedState(System.String)
  id: SetSharedState(System.String)
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: SetSharedState(String)
  nameWithType: QueryScript.SetSharedState(String)
  fullName: EventStore.Projections.Core.v8.QueryScript.SetSharedState(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SetSharedState
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 256
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public void SetSharedState(string state)
    parameters:
    - id: state
      type: System.String
    content.vb: Public Sub SetSharedState(state As String)
  overload: EventStore.Projections.Core.v8.QueryScript.SetSharedState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Projections.Core.v8.QueryScript.GetSourcesDefintion
  commentId: M:EventStore.Projections.Core.v8.QueryScript.GetSourcesDefintion
  id: GetSourcesDefintion
  parent: EventStore.Projections.Core.v8.QueryScript
  langs:
  - csharp
  - vb
  name: GetSourcesDefintion()
  nameWithType: QueryScript.GetSourcesDefintion()
  fullName: EventStore.Projections.Core.v8.QueryScript.GetSourcesDefintion()
  type: Method
  source:
    remote:
      path: src/EventStore.Projections.Core/v8/QueryScript.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetSourcesDefintion
    path: ../EventStore/src/EventStore.Projections.Core/v8/QueryScript.cs
    startLine: 262
  assemblies:
  - EventStore.Projections.Core
  namespace: EventStore.Projections.Core.v8
  syntax:
    content: public QuerySourcesDefinition GetSourcesDefintion()
    return:
      type: EventStore.Projections.Core.Messages.QuerySourcesDefinition
    content.vb: Public Function GetSourcesDefintion As QuerySourcesDefinition
  overload: EventStore.Projections.Core.v8.QueryScript.GetSourcesDefintion*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Projections.Core.v8
  commentId: N:EventStore.Projections.Core.v8
  name: EventStore.Projections.Core.v8
  nameWithType: EventStore.Projections.Core.v8
  fullName: EventStore.Projections.Core.v8
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.v8.QueryScript.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<QueryScript>()
  nameWithType: ProtobufExtensions.Serialize<QueryScript>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Projections.Core.v8.QueryScript>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of QueryScript)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Projections.Core.v8.QueryScript)()
  name.vb: Serialize(Of QueryScript)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<QueryScript>
    nameWithType: ProtobufExtensions.Serialize<QueryScript>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Projections.Core.v8.QueryScript>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of QueryScript)
    nameWithType: ProtobufExtensions.Serialize(Of QueryScript)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Projections.Core.v8.QueryScript)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.v8.QueryScript.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<QueryScript>()
  nameWithType: ProtobufExtensions.SerializeToArray<QueryScript>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Projections.Core.v8.QueryScript>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of QueryScript)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Projections.Core.v8.QueryScript)()
  name.vb: SerializeToArray(Of QueryScript)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<QueryScript>
    nameWithType: ProtobufExtensions.SerializeToArray<QueryScript>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Projections.Core.v8.QueryScript>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of QueryScript)
    nameWithType: ProtobufExtensions.SerializeToArray(Of QueryScript)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Projections.Core.v8.QueryScript)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: Action{System.String}
  commentId: '!:Action{System.String}'
  definition: Action`1
  name: Action<String>
  nameWithType: Action<String>
  fullName: Action<System.String>
  nameWithType.vb: Action(Of String)
  fullName.vb: Action(Of System.String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.v8.QueryScript.#ctor*
  commentId: Overload:EventStore.Projections.Core.v8.QueryScript.#ctor
  name: QueryScript
  nameWithType: QueryScript.QueryScript
  fullName: EventStore.Projections.Core.v8.QueryScript.QueryScript
- uid: EventStore.Projections.Core.v8.PreludeScript
  commentId: T:EventStore.Projections.Core.v8.PreludeScript
  parent: EventStore.Projections.Core.v8
  name: PreludeScript
  nameWithType: PreludeScript
  fullName: EventStore.Projections.Core.v8.PreludeScript
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Projections.Core.v8.QueryScript.Dispose*
  commentId: Overload:EventStore.Projections.Core.v8.QueryScript.Dispose
  name: Dispose
  nameWithType: QueryScript.Dispose
  fullName: EventStore.Projections.Core.v8.QueryScript.Dispose
- uid: EventStore.Projections.Core.v8.QueryScript.Initialize*
  commentId: Overload:EventStore.Projections.Core.v8.QueryScript.Initialize
  name: Initialize
  nameWithType: QueryScript.Initialize
  fullName: EventStore.Projections.Core.v8.QueryScript.Initialize
- uid: EventStore.Projections.Core.v8.QueryScript.InitializeShared*
  commentId: Overload:EventStore.Projections.Core.v8.QueryScript.InitializeShared
  name: InitializeShared
  nameWithType: QueryScript.InitializeShared
  fullName: EventStore.Projections.Core.v8.QueryScript.InitializeShared
- uid: EventStore.Projections.Core.v8.QueryScript.GetPartition*
  commentId: Overload:EventStore.Projections.Core.v8.QueryScript.GetPartition
  name: GetPartition
  nameWithType: QueryScript.GetPartition
  fullName: EventStore.Projections.Core.v8.QueryScript.GetPartition
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EventStore.Projections.Core.v8.QueryScript.TransformCatalogEvent*
  commentId: Overload:EventStore.Projections.Core.v8.QueryScript.TransformCatalogEvent
  name: TransformCatalogEvent
  nameWithType: QueryScript.TransformCatalogEvent
  fullName: EventStore.Projections.Core.v8.QueryScript.TransformCatalogEvent
- uid: EventStore.Projections.Core.v8.QueryScript.Push*
  commentId: Overload:EventStore.Projections.Core.v8.QueryScript.Push
  name: Push
  nameWithType: QueryScript.Push
  fullName: EventStore.Projections.Core.v8.QueryScript.Push
- uid: Tuple{System.String,System.String}
  commentId: '!:Tuple{System.String,System.String}'
  definition: Tuple`2
  name: Tuple<String, String>
  nameWithType: Tuple<String, String>
  fullName: Tuple<System.String, System.String>
  nameWithType.vb: Tuple(Of String, String)
  fullName.vb: Tuple(Of System.String, System.String)
  name.vb: Tuple(Of String, String)
  spec.csharp:
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Tuple`2
  isExternal: true
  name: Tuple<, >
  nameWithType: Tuple<, >
  fullName: Tuple<, >
  nameWithType.vb: Tuple(Of , )
  fullName.vb: Tuple(Of , )
  name.vb: Tuple(Of , )
  spec.csharp:
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.v8.QueryScript.NotifyDeleted*
  commentId: Overload:EventStore.Projections.Core.v8.QueryScript.NotifyDeleted
  name: NotifyDeleted
  nameWithType: QueryScript.NotifyDeleted
  fullName: EventStore.Projections.Core.v8.QueryScript.NotifyDeleted
- uid: EventStore.Projections.Core.v8.QueryScript.NotifyCreated*
  commentId: Overload:EventStore.Projections.Core.v8.QueryScript.NotifyCreated
  name: NotifyCreated
  nameWithType: QueryScript.NotifyCreated
  fullName: EventStore.Projections.Core.v8.QueryScript.NotifyCreated
- uid: EventStore.Projections.Core.v8.QueryScript.TransformStateToResult*
  commentId: Overload:EventStore.Projections.Core.v8.QueryScript.TransformStateToResult
  name: TransformStateToResult
  nameWithType: QueryScript.TransformStateToResult
  fullName: EventStore.Projections.Core.v8.QueryScript.TransformStateToResult
- uid: EventStore.Projections.Core.v8.QueryScript.SetState*
  commentId: Overload:EventStore.Projections.Core.v8.QueryScript.SetState
  name: SetState
  nameWithType: QueryScript.SetState
  fullName: EventStore.Projections.Core.v8.QueryScript.SetState
- uid: EventStore.Projections.Core.v8.QueryScript.SetSharedState*
  commentId: Overload:EventStore.Projections.Core.v8.QueryScript.SetSharedState
  name: SetSharedState
  nameWithType: QueryScript.SetSharedState
  fullName: EventStore.Projections.Core.v8.QueryScript.SetSharedState
- uid: EventStore.Projections.Core.v8.QueryScript.GetSourcesDefintion*
  commentId: Overload:EventStore.Projections.Core.v8.QueryScript.GetSourcesDefintion
  name: GetSourcesDefintion
  nameWithType: QueryScript.GetSourcesDefintion
  fullName: EventStore.Projections.Core.v8.QueryScript.GetSourcesDefintion
- uid: EventStore.Projections.Core.Messages.QuerySourcesDefinition
  commentId: T:EventStore.Projections.Core.Messages.QuerySourcesDefinition
  parent: EventStore.Projections.Core.Messages
  name: QuerySourcesDefinition
  nameWithType: QuerySourcesDefinition
  fullName: EventStore.Projections.Core.Messages.QuerySourcesDefinition
- uid: EventStore.Projections.Core.Messages
  commentId: N:EventStore.Projections.Core.Messages
  name: EventStore.Projections.Core.Messages
  nameWithType: EventStore.Projections.Core.Messages
  fullName: EventStore.Projections.Core.Messages

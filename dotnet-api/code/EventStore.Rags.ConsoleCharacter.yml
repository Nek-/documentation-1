### YamlMime:ManagedReference
items:
- uid: EventStore.Rags.ConsoleCharacter
  commentId: T:EventStore.Rags.ConsoleCharacter
  id: ConsoleCharacter
  parent: EventStore.Rags
  children:
  - EventStore.Rags.ConsoleCharacter.#ctor(System.Char,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  - EventStore.Rags.ConsoleCharacter.BackgroundColor
  - EventStore.Rags.ConsoleCharacter.Equals(System.Object)
  - EventStore.Rags.ConsoleCharacter.ForegroundColor
  - EventStore.Rags.ConsoleCharacter.GetHashCode
  - EventStore.Rags.ConsoleCharacter.op_Equality(EventStore.Rags.ConsoleCharacter,EventStore.Rags.ConsoleCharacter)
  - EventStore.Rags.ConsoleCharacter.op_Equality(EventStore.Rags.ConsoleCharacter,System.Char)
  - EventStore.Rags.ConsoleCharacter.op_Inequality(EventStore.Rags.ConsoleCharacter,EventStore.Rags.ConsoleCharacter)
  - EventStore.Rags.ConsoleCharacter.op_Inequality(EventStore.Rags.ConsoleCharacter,System.Char)
  - EventStore.Rags.ConsoleCharacter.ToString
  - EventStore.Rags.ConsoleCharacter.Value
  - EventStore.Rags.ConsoleCharacter.Write
  langs:
  - csharp
  - vb
  name: ConsoleCharacter
  nameWithType: ConsoleCharacter
  fullName: EventStore.Rags.ConsoleCharacter
  type: Struct
  source:
    id: ConsoleCharacter
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 10
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nA wrapper for char that encapsulates foreground and background colors.\n"
  example: []
  syntax:
    content: public struct ConsoleCharacter
    content.vb: Public Structure ConsoleCharacter
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Rags.ConsoleCharacter.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  - EventStore.Rags.ConsoleCharacter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Rags.ConsoleCharacter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: EventStore.Rags.ConsoleCharacter.Value
  commentId: P:EventStore.Rags.ConsoleCharacter.Value
  id: Value
  parent: EventStore.Rags.ConsoleCharacter
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ConsoleCharacter.Value
  fullName: EventStore.Rags.ConsoleCharacter.Value
  type: Property
  source:
    id: Value
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 14
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nThe value of the character.\n"
  example: []
  syntax:
    content: public char Value { get; set; }
    parameters: []
    return:
      type: System.Char
    content.vb: Public Property Value As Char
  overload: EventStore.Rags.ConsoleCharacter.Value*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Rags.ConsoleCharacter.ForegroundColor
  commentId: P:EventStore.Rags.ConsoleCharacter.ForegroundColor
  id: ForegroundColor
  parent: EventStore.Rags.ConsoleCharacter
  langs:
  - csharp
  - vb
  name: ForegroundColor
  nameWithType: ConsoleCharacter.ForegroundColor
  fullName: EventStore.Rags.ConsoleCharacter.ForegroundColor
  type: Property
  source:
    id: ForegroundColor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 19
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nThe console foreground color to use when printing this character.\n"
  example: []
  syntax:
    content: public ConsoleColor ForegroundColor { get; set; }
    parameters: []
    return:
      type: System.ConsoleColor
    content.vb: Public Property ForegroundColor As ConsoleColor
  overload: EventStore.Rags.ConsoleCharacter.ForegroundColor*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Rags.ConsoleCharacter.BackgroundColor
  commentId: P:EventStore.Rags.ConsoleCharacter.BackgroundColor
  id: BackgroundColor
  parent: EventStore.Rags.ConsoleCharacter
  langs:
  - csharp
  - vb
  name: BackgroundColor
  nameWithType: ConsoleCharacter.BackgroundColor
  fullName: EventStore.Rags.ConsoleCharacter.BackgroundColor
  type: Property
  source:
    id: BackgroundColor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 24
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nThe console background color to use when printing this character.\n"
  example: []
  syntax:
    content: public ConsoleColor BackgroundColor { get; set; }
    parameters: []
    return:
      type: System.ConsoleColor
    content.vb: Public Property BackgroundColor As ConsoleColor
  overload: EventStore.Rags.ConsoleCharacter.BackgroundColor*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Rags.ConsoleCharacter.#ctor(System.Char,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  commentId: M:EventStore.Rags.ConsoleCharacter.#ctor(System.Char,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  id: '#ctor(System.Char,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})'
  parent: EventStore.Rags.ConsoleCharacter
  langs:
  - csharp
  - vb
  name: ConsoleCharacter(Char, Nullable<ConsoleColor>, Nullable<ConsoleColor>)
  nameWithType: ConsoleCharacter.ConsoleCharacter(Char, Nullable<ConsoleColor>, Nullable<ConsoleColor>)
  fullName: EventStore.Rags.ConsoleCharacter.ConsoleCharacter(System.Char, System.Nullable<System.ConsoleColor>, System.Nullable<System.ConsoleColor>)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 32
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nCreate a new ConsoleCharacter given a char value and optionally set the foreground or background coor.\n"
  example: []
  syntax:
    content: public ConsoleCharacter(char value, ConsoleColor? foregroundColor = default(ConsoleColor? ), ConsoleColor? backgroundColor = default(ConsoleColor? ))
    parameters:
    - id: value
      type: System.Char
      description: The character value
    - id: foregroundColor
      type: System.Nullable{System.ConsoleColor}
      description: The foreground color (defaults to the console&apos;s foreground color at initialization time).
    - id: backgroundColor
      type: System.Nullable{System.ConsoleColor}
      description: The background color (defaults to the console&apos;s background color at initialization time).
    content.vb: Public Sub New(value As Char, foregroundColor As ConsoleColor? = Nothing, backgroundColor As ConsoleColor? = Nothing)
  overload: EventStore.Rags.ConsoleCharacter.#ctor*
  nameWithType.vb: ConsoleCharacter.ConsoleCharacter(Char, Nullable(Of ConsoleColor), Nullable(Of ConsoleColor))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Rags.ConsoleCharacter.ConsoleCharacter(System.Char, System.Nullable(Of System.ConsoleColor), System.Nullable(Of System.ConsoleColor))
  name.vb: ConsoleCharacter(Char, Nullable(Of ConsoleColor), Nullable(Of ConsoleColor))
- uid: EventStore.Rags.ConsoleCharacter.Write
  commentId: M:EventStore.Rags.ConsoleCharacter.Write
  id: Write
  parent: EventStore.Rags.ConsoleCharacter
  langs:
  - csharp
  - vb
  name: Write()
  nameWithType: ConsoleCharacter.Write()
  fullName: EventStore.Rags.ConsoleCharacter.Write()
  type: Method
  source:
    id: Write
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 46
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nWrite this formatted character to the console.\n"
  example: []
  syntax:
    content: public void Write()
    content.vb: Public Sub Write
  overload: EventStore.Rags.ConsoleCharacter.Write*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Rags.ConsoleCharacter.ToString
  commentId: M:EventStore.Rags.ConsoleCharacter.ToString
  id: ToString
  parent: EventStore.Rags.ConsoleCharacter
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ConsoleCharacter.ToString()
  fullName: EventStore.Rags.ConsoleCharacter.ToString()
  type: Method
  source:
    id: ToString
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 54
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nGets the string representation of the character.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: EventStore.Rags.ConsoleCharacter.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Rags.ConsoleCharacter.Equals(System.Object)
  commentId: M:EventStore.Rags.ConsoleCharacter.Equals(System.Object)
  id: Equals(System.Object)
  parent: EventStore.Rags.ConsoleCharacter
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ConsoleCharacter.Equals(Object)
  fullName: EventStore.Rags.ConsoleCharacter.Equals(System.Object)
  type: Method
  source:
    id: Equals
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 63
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nConsoleCharacters can be compared to other ConsoleCharacter instances or char values.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The ConsoleCharacter or char to compare to.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: EventStore.Rags.ConsoleCharacter.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Rags.ConsoleCharacter.op_Equality(EventStore.Rags.ConsoleCharacter,EventStore.Rags.ConsoleCharacter)
  commentId: M:EventStore.Rags.ConsoleCharacter.op_Equality(EventStore.Rags.ConsoleCharacter,EventStore.Rags.ConsoleCharacter)
  id: op_Equality(EventStore.Rags.ConsoleCharacter,EventStore.Rags.ConsoleCharacter)
  parent: EventStore.Rags.ConsoleCharacter
  langs:
  - csharp
  - vb
  name: Equality(ConsoleCharacter, ConsoleCharacter)
  nameWithType: ConsoleCharacter.Equality(ConsoleCharacter, ConsoleCharacter)
  fullName: EventStore.Rags.ConsoleCharacter.Equality(EventStore.Rags.ConsoleCharacter, EventStore.Rags.ConsoleCharacter)
  type: Operator
  source:
    id: op_Equality
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 79
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nOperator overload for Equals.\n"
  example: []
  syntax:
    content: public static bool operator ==(ConsoleCharacter a, ConsoleCharacter b)
    parameters:
    - id: a
      type: EventStore.Rags.ConsoleCharacter
      description: The first operand.
    - id: b
      type: EventStore.Rags.ConsoleCharacter
      description: The second operand.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Operator =(a As ConsoleCharacter, b As ConsoleCharacter) As Boolean
  overload: EventStore.Rags.ConsoleCharacter.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Rags.ConsoleCharacter.op_Inequality(EventStore.Rags.ConsoleCharacter,EventStore.Rags.ConsoleCharacter)
  commentId: M:EventStore.Rags.ConsoleCharacter.op_Inequality(EventStore.Rags.ConsoleCharacter,EventStore.Rags.ConsoleCharacter)
  id: op_Inequality(EventStore.Rags.ConsoleCharacter,EventStore.Rags.ConsoleCharacter)
  parent: EventStore.Rags.ConsoleCharacter
  langs:
  - csharp
  - vb
  name: Inequality(ConsoleCharacter, ConsoleCharacter)
  nameWithType: ConsoleCharacter.Inequality(ConsoleCharacter, ConsoleCharacter)
  fullName: EventStore.Rags.ConsoleCharacter.Inequality(EventStore.Rags.ConsoleCharacter, EventStore.Rags.ConsoleCharacter)
  type: Operator
  source:
    id: op_Inequality
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 89
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nOperator overload for !Equals.\n"
  example: []
  syntax:
    content: public static bool operator !=(ConsoleCharacter a, ConsoleCharacter b)
    parameters:
    - id: a
      type: EventStore.Rags.ConsoleCharacter
      description: The first operand.
    - id: b
      type: EventStore.Rags.ConsoleCharacter
      description: The second operand.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Operator <>(a As ConsoleCharacter, b As ConsoleCharacter) As Boolean
  overload: EventStore.Rags.ConsoleCharacter.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Rags.ConsoleCharacter.op_Equality(EventStore.Rags.ConsoleCharacter,System.Char)
  commentId: M:EventStore.Rags.ConsoleCharacter.op_Equality(EventStore.Rags.ConsoleCharacter,System.Char)
  id: op_Equality(EventStore.Rags.ConsoleCharacter,System.Char)
  parent: EventStore.Rags.ConsoleCharacter
  langs:
  - csharp
  - vb
  name: Equality(ConsoleCharacter, Char)
  nameWithType: ConsoleCharacter.Equality(ConsoleCharacter, Char)
  fullName: EventStore.Rags.ConsoleCharacter.Equality(EventStore.Rags.ConsoleCharacter, System.Char)
  type: Operator
  source:
    id: op_Equality
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 100
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nOperator overload for Equals.\n"
  example: []
  syntax:
    content: public static bool operator ==(ConsoleCharacter a, char b)
    parameters:
    - id: a
      type: EventStore.Rags.ConsoleCharacter
      description: The first operand.
    - id: b
      type: System.Char
      description: The second operand.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Operator =(a As ConsoleCharacter, b As Char) As Boolean
  overload: EventStore.Rags.ConsoleCharacter.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Rags.ConsoleCharacter.op_Inequality(EventStore.Rags.ConsoleCharacter,System.Char)
  commentId: M:EventStore.Rags.ConsoleCharacter.op_Inequality(EventStore.Rags.ConsoleCharacter,System.Char)
  id: op_Inequality(EventStore.Rags.ConsoleCharacter,System.Char)
  parent: EventStore.Rags.ConsoleCharacter
  langs:
  - csharp
  - vb
  name: Inequality(ConsoleCharacter, Char)
  nameWithType: ConsoleCharacter.Inequality(ConsoleCharacter, Char)
  fullName: EventStore.Rags.ConsoleCharacter.Inequality(EventStore.Rags.ConsoleCharacter, System.Char)
  type: Operator
  source:
    id: op_Inequality
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 110
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nOperator overload for !Equals.\n"
  example: []
  syntax:
    content: public static bool operator !=(ConsoleCharacter a, char b)
    parameters:
    - id: a
      type: EventStore.Rags.ConsoleCharacter
      description: The first operand.
    - id: b
      type: System.Char
      description: The second operand.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Operator <>(a As ConsoleCharacter, b As Char) As Boolean
  overload: EventStore.Rags.ConsoleCharacter.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Rags.ConsoleCharacter.GetHashCode
  commentId: M:EventStore.Rags.ConsoleCharacter.GetHashCode
  id: GetHashCode
  parent: EventStore.Rags.ConsoleCharacter
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ConsoleCharacter.GetHashCode()
  fullName: EventStore.Rags.ConsoleCharacter.GetHashCode()
  type: Method
  source:
    id: GetHashCode
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 118
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nOverride of GetHashcode that returns the internal char&apos;s hashcode.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: the internal char&apos;s hashcode.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: EventStore.Rags.ConsoleCharacter.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: EventStore.Rags
  commentId: N:EventStore.Rags
  name: EventStore.Rags
  nameWithType: EventStore.Rags
  fullName: EventStore.Rags
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.ConsoleCharacter.EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  parent: EventStore.Projections.Core.Utils.EnumExtensions
  definition: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<ConsoleCharacter>()
  nameWithType: EnumExtensions.EnumValueName<ConsoleCharacter>()
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.Rags.ConsoleCharacter>()
  nameWithType.vb: EnumExtensions.EnumValueName(Of ConsoleCharacter)()
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.Rags.ConsoleCharacter)()
  name.vb: EnumValueName(Of ConsoleCharacter)()
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName<ConsoleCharacter>
    nameWithType: EnumExtensions.EnumValueName<ConsoleCharacter>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<EventStore.Rags.ConsoleCharacter>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1
    name: EnumValueName(Of ConsoleCharacter)
    nameWithType: EnumExtensions.EnumValueName(Of ConsoleCharacter)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of EventStore.Rags.ConsoleCharacter)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.ConsoleCharacter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ConsoleCharacter>()
  nameWithType: ProtobufExtensions.Serialize<ConsoleCharacter>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Rags.ConsoleCharacter>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ConsoleCharacter)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Rags.ConsoleCharacter)()
  name.vb: Serialize(Of ConsoleCharacter)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ConsoleCharacter>
    nameWithType: ProtobufExtensions.Serialize<ConsoleCharacter>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Rags.ConsoleCharacter>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ConsoleCharacter)
    nameWithType: ProtobufExtensions.Serialize(Of ConsoleCharacter)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Rags.ConsoleCharacter)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.ConsoleCharacter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ConsoleCharacter>()
  nameWithType: ProtobufExtensions.SerializeToArray<ConsoleCharacter>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Rags.ConsoleCharacter>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ConsoleCharacter)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Rags.ConsoleCharacter)()
  name.vb: SerializeToArray(Of ConsoleCharacter)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ConsoleCharacter>
    nameWithType: ProtobufExtensions.SerializeToArray<ConsoleCharacter>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Rags.ConsoleCharacter>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ConsoleCharacter)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ConsoleCharacter)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Rags.ConsoleCharacter)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  commentId: M:EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
  name: EnumValueName<T>(T)
  nameWithType: EnumExtensions.EnumValueName<T>(T)
  fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>(T)
  nameWithType.vb: EnumExtensions.EnumValueName(Of T)(T)
  fullName.vb: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)(T)
  name.vb: EnumValueName(Of T)(T)
  spec.csharp:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName<T>
    nameWithType: EnumExtensions.EnumValueName<T>
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName``1(``0)
    name: EnumValueName(Of T)
    nameWithType: EnumExtensions.EnumValueName(Of T)
    fullName: EventStore.Projections.Core.Utils.EnumExtensions.EnumValueName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Projections.Core.Utils.EnumExtensions
  commentId: T:EventStore.Projections.Core.Utils.EnumExtensions
  parent: EventStore.Projections.Core.Utils
  name: EnumExtensions
  nameWithType: EnumExtensions
  fullName: EventStore.Projections.Core.Utils.EnumExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Projections.Core.Utils
  commentId: N:EventStore.Projections.Core.Utils
  name: EventStore.Projections.Core.Utils
  nameWithType: EventStore.Projections.Core.Utils
  fullName: EventStore.Projections.Core.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Rags.ConsoleCharacter.Value*
  commentId: Overload:EventStore.Rags.ConsoleCharacter.Value
  name: Value
  nameWithType: ConsoleCharacter.Value
  fullName: EventStore.Rags.ConsoleCharacter.Value
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: EventStore.Rags.ConsoleCharacter.ForegroundColor*
  commentId: Overload:EventStore.Rags.ConsoleCharacter.ForegroundColor
  name: ForegroundColor
  nameWithType: ConsoleCharacter.ForegroundColor
  fullName: EventStore.Rags.ConsoleCharacter.ForegroundColor
- uid: System.ConsoleColor
  commentId: T:System.ConsoleColor
  parent: System
  isExternal: true
  name: ConsoleColor
  nameWithType: ConsoleColor
  fullName: System.ConsoleColor
- uid: EventStore.Rags.ConsoleCharacter.BackgroundColor*
  commentId: Overload:EventStore.Rags.ConsoleCharacter.BackgroundColor
  name: BackgroundColor
  nameWithType: ConsoleCharacter.BackgroundColor
  fullName: EventStore.Rags.ConsoleCharacter.BackgroundColor
- uid: EventStore.Rags.ConsoleCharacter.#ctor*
  commentId: Overload:EventStore.Rags.ConsoleCharacter.#ctor
  name: ConsoleCharacter
  nameWithType: ConsoleCharacter.ConsoleCharacter
  fullName: EventStore.Rags.ConsoleCharacter.ConsoleCharacter
- uid: System.Nullable{System.ConsoleColor}
  commentId: T:System.Nullable{System.ConsoleColor}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ConsoleColor>
  nameWithType: Nullable<ConsoleColor>
  fullName: System.Nullable<System.ConsoleColor>
  nameWithType.vb: Nullable(Of ConsoleColor)
  fullName.vb: System.Nullable(Of System.ConsoleColor)
  name.vb: Nullable(Of ConsoleColor)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ConsoleColor
    name: ConsoleColor
    nameWithType: ConsoleColor
    fullName: System.ConsoleColor
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ConsoleColor
    name: ConsoleColor
    nameWithType: ConsoleColor
    fullName: System.ConsoleColor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.ConsoleCharacter.Write*
  commentId: Overload:EventStore.Rags.ConsoleCharacter.Write
  name: Write
  nameWithType: ConsoleCharacter.Write
  fullName: EventStore.Rags.ConsoleCharacter.Write
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.ConsoleCharacter.ToString*
  commentId: Overload:EventStore.Rags.ConsoleCharacter.ToString
  name: ToString
  nameWithType: ConsoleCharacter.ToString
  fullName: EventStore.Rags.ConsoleCharacter.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.ConsoleCharacter.Equals*
  commentId: Overload:EventStore.Rags.ConsoleCharacter.Equals
  name: Equals
  nameWithType: ConsoleCharacter.Equals
  fullName: EventStore.Rags.ConsoleCharacter.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Rags.ConsoleCharacter.op_Equality*
  commentId: Overload:EventStore.Rags.ConsoleCharacter.op_Equality
  name: Equality
  nameWithType: ConsoleCharacter.Equality
  fullName: EventStore.Rags.ConsoleCharacter.Equality
- uid: EventStore.Rags.ConsoleCharacter
  commentId: T:EventStore.Rags.ConsoleCharacter
  parent: EventStore.Rags
  name: ConsoleCharacter
  nameWithType: ConsoleCharacter
  fullName: EventStore.Rags.ConsoleCharacter
- uid: EventStore.Rags.ConsoleCharacter.op_Inequality*
  commentId: Overload:EventStore.Rags.ConsoleCharacter.op_Inequality
  name: Inequality
  nameWithType: ConsoleCharacter.Inequality
  fullName: EventStore.Rags.ConsoleCharacter.Inequality
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.ConsoleCharacter.GetHashCode*
  commentId: Overload:EventStore.Rags.ConsoleCharacter.GetHashCode
  name: GetHashCode
  nameWithType: ConsoleCharacter.GetHashCode
  fullName: EventStore.Rags.ConsoleCharacter.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32

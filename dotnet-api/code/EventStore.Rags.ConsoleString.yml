### YamlMime:ManagedReference
items:
- uid: EventStore.Rags.ConsoleString
  commentId: T:EventStore.Rags.ConsoleString
  id: ConsoleString
  parent: EventStore.Rags
  children:
  - EventStore.Rags.ConsoleString.#ctor
  - EventStore.Rags.ConsoleString.#ctor(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  - EventStore.Rags.ConsoleString.Append(EventStore.Rags.ConsoleString)
  - EventStore.Rags.ConsoleString.Append(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  - EventStore.Rags.ConsoleString.AppendUsingCurrentFormat(System.String)
  - EventStore.Rags.ConsoleString.CompareTo(System.String)
  - EventStore.Rags.ConsoleString.Contains(System.String)
  - EventStore.Rags.ConsoleString.Empty
  - EventStore.Rags.ConsoleString.Equals(System.Object)
  - EventStore.Rags.ConsoleString.GetHashCode
  - EventStore.Rags.ConsoleString.IndexOf(System.String)
  - EventStore.Rags.ConsoleString.Length
  - EventStore.Rags.ConsoleString.op_Addition(EventStore.Rags.ConsoleString,EventStore.Rags.ConsoleString)
  - EventStore.Rags.ConsoleString.op_Addition(EventStore.Rags.ConsoleString,System.String)
  - EventStore.Rags.ConsoleString.op_Equality(EventStore.Rags.ConsoleString,EventStore.Rags.ConsoleString)
  - EventStore.Rags.ConsoleString.op_Inequality(EventStore.Rags.ConsoleString,EventStore.Rags.ConsoleString)
  - EventStore.Rags.ConsoleString.Replace(System.String,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  - EventStore.Rags.ConsoleString.ReplaceRegex(System.String,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  - EventStore.Rags.ConsoleString.Substring(System.Int32)
  - EventStore.Rags.ConsoleString.Substring(System.Int32,System.Int32)
  - EventStore.Rags.ConsoleString.ToString
  - EventStore.Rags.ConsoleString.Write
  langs:
  - csharp
  - vb
  name: ConsoleString
  nameWithType: ConsoleString
  fullName: EventStore.Rags.ConsoleString
  type: Class
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ConsoleString
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 126
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nA wrapper for string that encapsulates foreground and background colors.\n"
  example: []
  syntax:
    content: 'public class ConsoleString : List<ConsoleCharacter>, IList<ConsoleCharacter>, ICollection<ConsoleCharacter>, IReadOnlyList<ConsoleCharacter>, IReadOnlyCollection<ConsoleCharacter>, IEnumerable<ConsoleCharacter>, IList, ICollection, IEnumerable, IComparable<string>'
    content.vb: >-
      Public Class ConsoleString
          Inherits List(Of ConsoleCharacter)
          Implements IList(Of ConsoleCharacter), ICollection(Of ConsoleCharacter), IReadOnlyList(Of ConsoleCharacter), IReadOnlyCollection(Of ConsoleCharacter), IEnumerable(Of ConsoleCharacter), IList, ICollection, IEnumerable, IComparable(Of String)
  inheritance:
  - System.Object
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  implements:
  - System.Collections.Generic.IList{EventStore.Rags.ConsoleCharacter}
  - System.Collections.Generic.ICollection{EventStore.Rags.ConsoleCharacter}
  - System.Collections.Generic.IReadOnlyList{EventStore.Rags.ConsoleCharacter}
  - System.Collections.Generic.IReadOnlyCollection{EventStore.Rags.ConsoleCharacter}
  - System.Collections.Generic.IEnumerable{EventStore.Rags.ConsoleCharacter}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.IComparable{System.String}
  inheritedMembers:
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#get_Item(System.Int32)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#set_Item(System.Int32,System.Object)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Add(EventStore.Rags.ConsoleCharacter)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.AddRange(System.Collections.Generic.IEnumerable{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.AsReadOnly
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.BinarySearch(System.Int32,System.Int32,EventStore.Rags.ConsoleCharacter,System.Collections.Generic.IComparer{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.BinarySearch(EventStore.Rags.ConsoleCharacter)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.BinarySearch(EventStore.Rags.ConsoleCharacter,System.Collections.Generic.IComparer{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Clear
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Contains(EventStore.Rags.ConsoleCharacter)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.ConvertAll``1(System.Converter{EventStore.Rags.ConsoleCharacter,{TOutput}})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.CopyTo(System.Int32,EventStore.Rags.ConsoleCharacter[],System.Int32,System.Int32)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.CopyTo(EventStore.Rags.ConsoleCharacter[])
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.CopyTo(EventStore.Rags.ConsoleCharacter[],System.Int32)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Exists(System.Predicate{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Find(System.Predicate{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindAll(System.Predicate{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindIndex(System.Int32,System.Int32,System.Predicate{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindIndex(System.Int32,System.Predicate{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindIndex(System.Predicate{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindLast(System.Predicate{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindLastIndex(System.Int32,System.Int32,System.Predicate{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindLastIndex(System.Int32,System.Predicate{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindLastIndex(System.Predicate{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.ForEach(System.Action{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.GetEnumerator
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.IndexOf(EventStore.Rags.ConsoleCharacter)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.IndexOf(EventStore.Rags.ConsoleCharacter,System.Int32)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.IndexOf(EventStore.Rags.ConsoleCharacter,System.Int32,System.Int32)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Insert(System.Int32,EventStore.Rags.ConsoleCharacter)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.LastIndexOf(EventStore.Rags.ConsoleCharacter)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.LastIndexOf(EventStore.Rags.ConsoleCharacter,System.Int32)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.LastIndexOf(EventStore.Rags.ConsoleCharacter,System.Int32,System.Int32)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Remove(EventStore.Rags.ConsoleCharacter)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.RemoveAll(System.Predicate{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.RemoveAt(System.Int32)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Reverse
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Sort
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Sort(System.Collections.Generic.IComparer{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Sort(System.Comparison{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Remove(System.Object)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.ToArray
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.TrimExcess
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.TrueForAll(System.Predicate{EventStore.Rags.ConsoleCharacter})
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Capacity
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Count
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Item(System.Int32)
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Item(System.Int32)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Rags.ConsoleString.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Rags.ConsoleString.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Rags.ConsoleString.Empty
  commentId: P:EventStore.Rags.ConsoleString.Empty
  id: Empty
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: ConsoleString.Empty
  fullName: EventStore.Rags.ConsoleString.Empty
  type: Property
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Empty
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 143
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nRepresents an empty string.  You will get a new instance each time you access this property.\n"
  example: []
  syntax:
    content: public static ConsoleString Empty { get; }
    parameters: []
    return:
      type: EventStore.Rags.ConsoleString
    content.vb: Public Shared ReadOnly Property Empty As ConsoleString
  overload: EventStore.Rags.ConsoleString.Empty*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: EventStore.Rags.ConsoleString.Length
  commentId: P:EventStore.Rags.ConsoleString.Length
  id: Length
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: ConsoleString.Length
  fullName: EventStore.Rags.ConsoleString.Length
  type: Property
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Length
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 150
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nThe length of the string.\n"
  example: []
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Length As Integer
  overload: EventStore.Rags.ConsoleString.Length*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Rags.ConsoleString.#ctor
  commentId: M:EventStore.Rags.ConsoleString.#ctor
  id: '#ctor'
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: ConsoleString()
  nameWithType: ConsoleString.ConsoleString()
  fullName: EventStore.Rags.ConsoleString.ConsoleString()
  type: Constructor
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 157
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nCreate a new empty ConsoleString.\n"
  example: []
  syntax:
    content: public ConsoleString()
    content.vb: Public Sub New
  overload: EventStore.Rags.ConsoleString.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Rags.ConsoleString.#ctor(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  commentId: M:EventStore.Rags.ConsoleString.#ctor(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  id: '#ctor(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})'
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: ConsoleString(String, Nullable<ConsoleColor>, Nullable<ConsoleColor>)
  nameWithType: ConsoleString.ConsoleString(String, Nullable<ConsoleColor>, Nullable<ConsoleColor>)
  fullName: EventStore.Rags.ConsoleString.ConsoleString(System.String, System.Nullable<System.ConsoleColor>, System.Nullable<System.ConsoleColor>)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 166
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nCreate a ConsoleString given an initial text value and optional color info.\n"
  example: []
  syntax:
    content: public ConsoleString(string value = "", ConsoleColor? foregroundColor = default(ConsoleColor? ), ConsoleColor? backgroundColor = default(ConsoleColor? ))
    parameters:
    - id: value
      type: System.String
      description: ''
    - id: foregroundColor
      type: System.Nullable{System.ConsoleColor}
      description: The foreground color (defaults to the console&apos;s foreground color at initialization time).
    - id: backgroundColor
      type: System.Nullable{System.ConsoleColor}
      description: The background color (defaults to the console&apos;s background color at initialization time).
    content.vb: Public Sub New(value As String = "", foregroundColor As ConsoleColor? = Nothing, backgroundColor As ConsoleColor? = Nothing)
  overload: EventStore.Rags.ConsoleString.#ctor*
  nameWithType.vb: ConsoleString.ConsoleString(String, Nullable(Of ConsoleColor), Nullable(Of ConsoleColor))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Rags.ConsoleString.ConsoleString(System.String, System.Nullable(Of System.ConsoleColor), System.Nullable(Of System.ConsoleColor))
  name.vb: ConsoleString(String, Nullable(Of ConsoleColor), Nullable(Of ConsoleColor))
- uid: EventStore.Rags.ConsoleString.Append(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  commentId: M:EventStore.Rags.ConsoleString.Append(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  id: Append(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Append(String, Nullable<ConsoleColor>, Nullable<ConsoleColor>)
  nameWithType: ConsoleString.Append(String, Nullable<ConsoleColor>, Nullable<ConsoleColor>)
  fullName: EventStore.Rags.ConsoleString.Append(System.String, System.Nullable<System.ConsoleColor>, System.Nullable<System.ConsoleColor>)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Append
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 178
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nAppends the given value to this ConsoleString using the given formatting.\n"
  example: []
  syntax:
    content: public void Append(string value, ConsoleColor? foregroundColor = default(ConsoleColor? ), ConsoleColor? backgroundColor = default(ConsoleColor? ))
    parameters:
    - id: value
      type: System.String
      description: ''
    - id: foregroundColor
      type: System.Nullable{System.ConsoleColor}
      description: The foreground color (defaults to the console&apos;s foreground color at initialization time).
    - id: backgroundColor
      type: System.Nullable{System.ConsoleColor}
      description: The background color (defaults to the console&apos;s background color at initialization time).
    content.vb: Public Sub Append(value As String, foregroundColor As ConsoleColor? = Nothing, backgroundColor As ConsoleColor? = Nothing)
  overload: EventStore.Rags.ConsoleString.Append*
  nameWithType.vb: ConsoleString.Append(String, Nullable(Of ConsoleColor), Nullable(Of ConsoleColor))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Rags.ConsoleString.Append(System.String, System.Nullable(Of System.ConsoleColor), System.Nullable(Of System.ConsoleColor))
  name.vb: Append(String, Nullable(Of ConsoleColor), Nullable(Of ConsoleColor))
- uid: EventStore.Rags.ConsoleString.Append(EventStore.Rags.ConsoleString)
  commentId: M:EventStore.Rags.ConsoleString.Append(EventStore.Rags.ConsoleString)
  id: Append(EventStore.Rags.ConsoleString)
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Append(ConsoleString)
  nameWithType: ConsoleString.Append(ConsoleString)
  fullName: EventStore.Rags.ConsoleString.Append(EventStore.Rags.ConsoleString)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Append
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 188
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nConcatenates two ConsoleStrings together.\n"
  example: []
  syntax:
    content: public void Append(ConsoleString other)
    parameters:
    - id: other
      type: EventStore.Rags.ConsoleString
      description: The string to append.
    content.vb: Public Sub Append(other As ConsoleString)
  overload: EventStore.Rags.ConsoleString.Append*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Rags.ConsoleString.AppendUsingCurrentFormat(System.String)
  commentId: M:EventStore.Rags.ConsoleString.AppendUsingCurrentFormat(System.String)
  id: AppendUsingCurrentFormat(System.String)
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: AppendUsingCurrentFormat(String)
  nameWithType: ConsoleString.AppendUsingCurrentFormat(String)
  fullName: EventStore.Rags.ConsoleString.AppendUsingCurrentFormat(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AppendUsingCurrentFormat
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 200
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nAppends the given value using the formatting of the last character or the default formatting if this ConsoleString is empty.\n"
  example: []
  syntax:
    content: public void AppendUsingCurrentFormat(string value)
    parameters:
    - id: value
      type: System.String
      description: The string to append.
    content.vb: Public Sub AppendUsingCurrentFormat(value As String)
  overload: EventStore.Rags.ConsoleString.AppendUsingCurrentFormat*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Rags.ConsoleString.Replace(System.String,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  commentId: M:EventStore.Rags.ConsoleString.Replace(System.String,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  id: Replace(System.String,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Replace(String, String, Nullable<ConsoleColor>, Nullable<ConsoleColor>)
  nameWithType: ConsoleString.Replace(String, String, Nullable<ConsoleColor>, Nullable<ConsoleColor>)
  fullName: EventStore.Rags.ConsoleString.Replace(System.String, System.String, System.Nullable<System.ConsoleColor>, System.Nullable<System.ConsoleColor>)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Replace
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 217
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nReplaces all occurrances of the given string with the replacement value using the specified formatting.\n"
  example: []
  syntax:
    content: public ConsoleString Replace(string toFind, string toReplace, ConsoleColor? foregroundColor = default(ConsoleColor? ), ConsoleColor? backgroundColor = default(ConsoleColor? ))
    parameters:
    - id: toFind
      type: System.String
      description: The substring to find.
    - id: toReplace
      type: System.String
      description: The replacement value.
    - id: foregroundColor
      type: System.Nullable{System.ConsoleColor}
      description: The foreground color (defaults to the console&apos;s foreground color at initialization time).
    - id: backgroundColor
      type: System.Nullable{System.ConsoleColor}
      description: The background color (defaults to the console&apos;s background color at initialization time).
    return:
      type: EventStore.Rags.ConsoleString
      description: A new ConsoleString with the replacements.
    content.vb: Public Function Replace(toFind As String, toReplace As String, foregroundColor As ConsoleColor? = Nothing, backgroundColor As ConsoleColor? = Nothing) As ConsoleString
  overload: EventStore.Rags.ConsoleString.Replace*
  nameWithType.vb: ConsoleString.Replace(String, String, Nullable(Of ConsoleColor), Nullable(Of ConsoleColor))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Rags.ConsoleString.Replace(System.String, System.String, System.Nullable(Of System.ConsoleColor), System.Nullable(Of System.ConsoleColor))
  name.vb: Replace(String, String, Nullable(Of ConsoleColor), Nullable(Of ConsoleColor))
- uid: EventStore.Rags.ConsoleString.ReplaceRegex(System.String,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  commentId: M:EventStore.Rags.ConsoleString.ReplaceRegex(System.String,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  id: ReplaceRegex(System.String,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: ReplaceRegex(String, String, Nullable<ConsoleColor>, Nullable<ConsoleColor>)
  nameWithType: ConsoleString.ReplaceRegex(String, String, Nullable<ConsoleColor>, Nullable<ConsoleColor>)
  fullName: EventStore.Rags.ConsoleString.ReplaceRegex(System.String, System.String, System.Nullable<System.ConsoleColor>, System.Nullable<System.ConsoleColor>)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ReplaceRegex
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 245
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nReplaces all matches of the given regular expression with the replacement value using the specified formatting.\n"
  example: []
  syntax:
    content: public ConsoleString ReplaceRegex(string regex, string toReplace, ConsoleColor? foregroundColor = default(ConsoleColor? ), ConsoleColor? backgroundColor = default(ConsoleColor? ))
    parameters:
    - id: regex
      type: System.String
      description: The regular expression to find.
    - id: toReplace
      type: System.String
      description: The replacement value.
    - id: foregroundColor
      type: System.Nullable{System.ConsoleColor}
      description: The foreground color (defaults to the console&apos;s foreground color at initialization time).
    - id: backgroundColor
      type: System.Nullable{System.ConsoleColor}
      description: The background color (defaults to the console&apos;s background color at initialization time).
    return:
      type: EventStore.Rags.ConsoleString
      description: ''
    content.vb: Public Function ReplaceRegex(regex As String, toReplace As String, foregroundColor As ConsoleColor? = Nothing, backgroundColor As ConsoleColor? = Nothing) As ConsoleString
  overload: EventStore.Rags.ConsoleString.ReplaceRegex*
  nameWithType.vb: ConsoleString.ReplaceRegex(String, String, Nullable(Of ConsoleColor), Nullable(Of ConsoleColor))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Rags.ConsoleString.ReplaceRegex(System.String, System.String, System.Nullable(Of System.ConsoleColor), System.Nullable(Of System.ConsoleColor))
  name.vb: ReplaceRegex(String, String, Nullable(Of ConsoleColor), Nullable(Of ConsoleColor))
- uid: EventStore.Rags.ConsoleString.IndexOf(System.String)
  commentId: M:EventStore.Rags.ConsoleString.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: IndexOf(String)
  nameWithType: ConsoleString.IndexOf(String)
  fullName: EventStore.Rags.ConsoleString.IndexOf(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: IndexOf
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 262
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nFinds the index of a given substring in this ConsoleString.\n"
  example: []
  syntax:
    content: public int IndexOf(string toFind)
    parameters:
    - id: toFind
      type: System.String
      description: The substring to search for.
    return:
      type: System.Int32
      description: The first index of the given substring or -1 if the substring was not found.
    content.vb: Public Function IndexOf(toFind As String) As Integer
  overload: EventStore.Rags.ConsoleString.IndexOf*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Rags.ConsoleString.Contains(System.String)
  commentId: M:EventStore.Rags.ConsoleString.Contains(System.String)
  id: Contains(System.String)
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Contains(String)
  nameWithType: ConsoleString.Contains(String)
  fullName: EventStore.Rags.ConsoleString.Contains(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Contains
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 288
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nDetermines if this ConsoleString contains the given substring.\n"
  example: []
  syntax:
    content: public bool Contains(string substr)
    parameters:
    - id: substr
      type: System.String
      description: The substring to search for.
    return:
      type: System.Boolean
      description: True if found, false otherwise.
    content.vb: Public Function Contains(substr As String) As Boolean
  overload: EventStore.Rags.ConsoleString.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Rags.ConsoleString.Substring(System.Int32)
  commentId: M:EventStore.Rags.ConsoleString.Substring(System.Int32)
  id: Substring(System.Int32)
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Substring(Int32)
  nameWithType: ConsoleString.Substring(Int32)
  fullName: EventStore.Rags.ConsoleString.Substring(System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Substring
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 297
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nGet a substring of this ConsoleString starting at the given index.\n"
  example: []
  syntax:
    content: public ConsoleString Substring(int start)
    parameters:
    - id: start
      type: System.Int32
      description: the start index.
    return:
      type: EventStore.Rags.ConsoleString
      description: A new ConsoleString representing the substring requested.
    content.vb: Public Function Substring(start As Integer) As ConsoleString
  overload: EventStore.Rags.ConsoleString.Substring*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Rags.ConsoleString.Substring(System.Int32,System.Int32)
  commentId: M:EventStore.Rags.ConsoleString.Substring(System.Int32,System.Int32)
  id: Substring(System.Int32,System.Int32)
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Substring(Int32, Int32)
  nameWithType: ConsoleString.Substring(Int32, Int32)
  fullName: EventStore.Rags.ConsoleString.Substring(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Substring
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 307
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nGet a substring of this ConsoleString starting at the given index and with the given length.\n"
  example: []
  syntax:
    content: public ConsoleString Substring(int start, int length)
    parameters:
    - id: start
      type: System.Int32
      description: the start index.
    - id: length
      type: System.Int32
      description: the number of characters to return
    return:
      type: EventStore.Rags.ConsoleString
      description: A new ConsoleString representing the substring requested.
    content.vb: Public Function Substring(start As Integer, length As Integer) As ConsoleString
  overload: EventStore.Rags.ConsoleString.Substring*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Rags.ConsoleString.Write
  commentId: M:EventStore.Rags.ConsoleString.Write
  id: Write
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Write()
  nameWithType: ConsoleString.Write()
  fullName: EventStore.Rags.ConsoleString.Write()
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Write
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 319
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nWrite this ConsoleString to the console using the desired style.\n"
  example: []
  syntax:
    content: public void Write()
    content.vb: Public Sub Write
  overload: EventStore.Rags.ConsoleString.Write*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Rags.ConsoleString.ToString
  commentId: M:EventStore.Rags.ConsoleString.ToString
  id: ToString
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ConsoleString.ToString()
  fullName: EventStore.Rags.ConsoleString.ToString()
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ToString
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 350
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nGet the string representation of this ConsoleString.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: EventStore.Rags.ConsoleString.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Rags.ConsoleString.Equals(System.Object)
  commentId: M:EventStore.Rags.ConsoleString.Equals(System.Object)
  id: Equals(System.Object)
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ConsoleString.Equals(Object)
  fullName: EventStore.Rags.ConsoleString.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Equals
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 359
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nCompare this ConsoleString to another ConsoleString or a plain string.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The ConsoleString or plain string to compare to.
    return:
      type: System.Boolean
      description: True if equal, false otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: EventStore.Rags.ConsoleString.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Rags.ConsoleString.CompareTo(System.String)
  commentId: M:EventStore.Rags.ConsoleString.CompareTo(System.String)
  id: CompareTo(System.String)
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: CompareTo(String)
  nameWithType: ConsoleString.CompareTo(String)
  fullName: EventStore.Rags.ConsoleString.CompareTo(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: CompareTo
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 379
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nCompare this ConsoleString to another ConsoleString.\n"
  example: []
  syntax:
    content: public int CompareTo(string other)
    parameters:
    - id: other
      type: System.String
      description: The ConsoleString to compare to.
    return:
      type: System.Int32
      description: True if equal, false otherwise.
    content.vb: Public Function CompareTo(other As String) As Integer
  overload: EventStore.Rags.ConsoleString.CompareTo*
  implements:
  - System.IComparable{System.String}.CompareTo(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Rags.ConsoleString.GetHashCode
  commentId: M:EventStore.Rags.ConsoleString.GetHashCode
  id: GetHashCode
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ConsoleString.GetHashCode()
  fullName: EventStore.Rags.ConsoleString.GetHashCode()
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetHashCode
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 387
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nGets the hashcode of the underlying string.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: the hashcode of the underlying string.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: EventStore.Rags.ConsoleString.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: EventStore.Rags.ConsoleString.op_Addition(EventStore.Rags.ConsoleString,EventStore.Rags.ConsoleString)
  commentId: M:EventStore.Rags.ConsoleString.op_Addition(EventStore.Rags.ConsoleString,EventStore.Rags.ConsoleString)
  id: op_Addition(EventStore.Rags.ConsoleString,EventStore.Rags.ConsoleString)
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Addition(ConsoleString, ConsoleString)
  nameWithType: ConsoleString.Addition(ConsoleString, ConsoleString)
  fullName: EventStore.Rags.ConsoleString.Addition(EventStore.Rags.ConsoleString, EventStore.Rags.ConsoleString)
  type: Operator
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: op_Addition
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 397
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nOperator overload that concatenates 2 ConsoleString instances and returns a new one.\n"
  example: []
  syntax:
    content: public static ConsoleString operator +(ConsoleString a, ConsoleString b)
    parameters:
    - id: a
      type: EventStore.Rags.ConsoleString
      description: The left operand.
    - id: b
      type: EventStore.Rags.ConsoleString
      description: The right operand.
    return:
      type: EventStore.Rags.ConsoleString
      description: A new, concatenated ConsoleString
    content.vb: Public Shared Operator +(a As ConsoleString, b As ConsoleString) As ConsoleString
  overload: EventStore.Rags.ConsoleString.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Rags.ConsoleString.op_Addition(EventStore.Rags.ConsoleString,System.String)
  commentId: M:EventStore.Rags.ConsoleString.op_Addition(EventStore.Rags.ConsoleString,System.String)
  id: op_Addition(EventStore.Rags.ConsoleString,System.String)
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Addition(ConsoleString, String)
  nameWithType: ConsoleString.Addition(ConsoleString, String)
  fullName: EventStore.Rags.ConsoleString.Addition(EventStore.Rags.ConsoleString, System.String)
  type: Operator
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: op_Addition
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 409
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nOperator overload that concatenates a ConsoleString with a string and returns a new one.\n"
  example: []
  syntax:
    content: public static ConsoleString operator +(ConsoleString a, string b)
    parameters:
    - id: a
      type: EventStore.Rags.ConsoleString
      description: The left operand.
    - id: b
      type: System.String
      description: The right operand.
    return:
      type: EventStore.Rags.ConsoleString
      description: A new, concatenated ConsoleString
    content.vb: Public Shared Operator +(a As ConsoleString, b As String) As ConsoleString
  overload: EventStore.Rags.ConsoleString.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Rags.ConsoleString.op_Equality(EventStore.Rags.ConsoleString,EventStore.Rags.ConsoleString)
  commentId: M:EventStore.Rags.ConsoleString.op_Equality(EventStore.Rags.ConsoleString,EventStore.Rags.ConsoleString)
  id: op_Equality(EventStore.Rags.ConsoleString,EventStore.Rags.ConsoleString)
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Equality(ConsoleString, ConsoleString)
  nameWithType: ConsoleString.Equality(ConsoleString, ConsoleString)
  fullName: EventStore.Rags.ConsoleString.Equality(EventStore.Rags.ConsoleString, EventStore.Rags.ConsoleString)
  type: Operator
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: op_Equality
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 421
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nCompares 2 ConsoleStrings for equality.\n"
  example: []
  syntax:
    content: public static bool operator ==(ConsoleString a, ConsoleString b)
    parameters:
    - id: a
      type: EventStore.Rags.ConsoleString
      description: The left operand.
    - id: b
      type: EventStore.Rags.ConsoleString
      description: The right operand.
    return:
      type: System.Boolean
      description: True if they are the same, false otherwise
    content.vb: Public Shared Operator =(a As ConsoleString, b As ConsoleString) As Boolean
  overload: EventStore.Rags.ConsoleString.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Rags.ConsoleString.op_Inequality(EventStore.Rags.ConsoleString,EventStore.Rags.ConsoleString)
  commentId: M:EventStore.Rags.ConsoleString.op_Inequality(EventStore.Rags.ConsoleString,EventStore.Rags.ConsoleString)
  id: op_Inequality(EventStore.Rags.ConsoleString,EventStore.Rags.ConsoleString)
  parent: EventStore.Rags.ConsoleString
  langs:
  - csharp
  - vb
  name: Inequality(ConsoleString, ConsoleString)
  nameWithType: ConsoleString.Inequality(ConsoleString, ConsoleString)
  fullName: EventStore.Rags.ConsoleString.Inequality(EventStore.Rags.ConsoleString, EventStore.Rags.ConsoleString)
  type: Operator
  source:
    remote:
      path: src/EventStore.Rags/ConsoleString.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: op_Inequality
    path: ../EventStore/src/EventStore.Rags/ConsoleString.cs
    startLine: 432
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nCompares 2 ConsoleStrings for inequality.\n"
  example: []
  syntax:
    content: public static bool operator !=(ConsoleString a, ConsoleString b)
    parameters:
    - id: a
      type: EventStore.Rags.ConsoleString
      description: The left operand.
    - id: b
      type: EventStore.Rags.ConsoleString
      description: The right operand.
    return:
      type: System.Boolean
      description: False if they are the same, true otherwise
    content.vb: Public Shared Operator <>(a As ConsoleString, b As ConsoleString) As Boolean
  overload: EventStore.Rags.ConsoleString.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EventStore.Rags
  commentId: N:EventStore.Rags
  name: EventStore.Rags
  nameWithType: EventStore.Rags
  fullName: EventStore.Rags
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  commentId: T:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ConsoleCharacter>
  nameWithType: List<ConsoleCharacter>
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>
  nameWithType.vb: List(Of ConsoleCharacter)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter)
  name.vb: List(Of ConsoleCharacter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{EventStore.Rags.ConsoleCharacter}
  commentId: T:System.Collections.Generic.IList{EventStore.Rags.ConsoleCharacter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ConsoleCharacter>
  nameWithType: IList<ConsoleCharacter>
  fullName: System.Collections.Generic.IList<EventStore.Rags.ConsoleCharacter>
  nameWithType.vb: IList(Of ConsoleCharacter)
  fullName.vb: System.Collections.Generic.IList(Of EventStore.Rags.ConsoleCharacter)
  name.vb: IList(Of ConsoleCharacter)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{EventStore.Rags.ConsoleCharacter}
  commentId: T:System.Collections.Generic.ICollection{EventStore.Rags.ConsoleCharacter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ConsoleCharacter>
  nameWithType: ICollection<ConsoleCharacter>
  fullName: System.Collections.Generic.ICollection<EventStore.Rags.ConsoleCharacter>
  nameWithType.vb: ICollection(Of ConsoleCharacter)
  fullName.vb: System.Collections.Generic.ICollection(Of EventStore.Rags.ConsoleCharacter)
  name.vb: ICollection(Of ConsoleCharacter)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{EventStore.Rags.ConsoleCharacter}
  commentId: T:System.Collections.Generic.IReadOnlyList{EventStore.Rags.ConsoleCharacter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ConsoleCharacter>
  nameWithType: IReadOnlyList<ConsoleCharacter>
  fullName: System.Collections.Generic.IReadOnlyList<EventStore.Rags.ConsoleCharacter>
  nameWithType.vb: IReadOnlyList(Of ConsoleCharacter)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of EventStore.Rags.ConsoleCharacter)
  name.vb: IReadOnlyList(Of ConsoleCharacter)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{EventStore.Rags.ConsoleCharacter}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{EventStore.Rags.ConsoleCharacter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<ConsoleCharacter>
  nameWithType: IReadOnlyCollection<ConsoleCharacter>
  fullName: System.Collections.Generic.IReadOnlyCollection<EventStore.Rags.ConsoleCharacter>
  nameWithType.vb: IReadOnlyCollection(Of ConsoleCharacter)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of EventStore.Rags.ConsoleCharacter)
  name.vb: IReadOnlyCollection(Of ConsoleCharacter)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{EventStore.Rags.ConsoleCharacter}
  commentId: T:System.Collections.Generic.IEnumerable{EventStore.Rags.ConsoleCharacter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ConsoleCharacter>
  nameWithType: IEnumerable<ConsoleCharacter>
  fullName: System.Collections.Generic.IEnumerable<EventStore.Rags.ConsoleCharacter>
  nameWithType.vb: IEnumerable(Of ConsoleCharacter)
  fullName.vb: System.Collections.Generic.IEnumerable(Of EventStore.Rags.ConsoleCharacter)
  name.vb: IEnumerable(Of ConsoleCharacter)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IComparable{System.String}
  commentId: T:System.IComparable{System.String}
  parent: System
  definition: System.IComparable`1
  name: IComparable<String>
  nameWithType: IComparable<String>
  fullName: System.IComparable<System.String>
  nameWithType.vb: IComparable(Of String)
  fullName.vb: System.IComparable(Of System.String)
  name.vb: IComparable(Of String)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#get_Item(System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  name: IList.get_Item(Int32)
  nameWithType: List<ConsoleCharacter>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<ConsoleCharacter>.IList.get_Item
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of ConsoleCharacter).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#set_Item(System.Int32,System.Object)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  name: IList.set_Item(Int32, Object)
  nameWithType: List<ConsoleCharacter>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<ConsoleCharacter>.IList.set_Item
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of ConsoleCharacter).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Add(EventStore.Rags.ConsoleCharacter)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Add(EventStore.Rags.ConsoleCharacter)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Add(`0)
  name: Add(ConsoleCharacter)
  nameWithType: List<ConsoleCharacter>.Add(ConsoleCharacter)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Add(EventStore.Rags.ConsoleCharacter)
  nameWithType.vb: List(Of ConsoleCharacter).Add(ConsoleCharacter)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Add(EventStore.Rags.ConsoleCharacter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<ConsoleCharacter>.Add
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of ConsoleCharacter).Add
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.AddRange(System.Collections.Generic.IEnumerable{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.AddRange(System.Collections.Generic.IEnumerable{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  name: AddRange(IEnumerable<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.AddRange(IEnumerable<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.AddRange(System.Collections.Generic.IEnumerable<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).AddRange(IEnumerable(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).AddRange(System.Collections.Generic.IEnumerable(Of EventStore.Rags.ConsoleCharacter))
  name.vb: AddRange(IEnumerable(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<ConsoleCharacter>.AddRange
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of ConsoleCharacter).AddRange
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.AsReadOnly
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.AsReadOnly
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.AsReadOnly
  name: AsReadOnly()
  nameWithType: List<ConsoleCharacter>.AsReadOnly()
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.AsReadOnly()
  nameWithType.vb: List(Of ConsoleCharacter).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<ConsoleCharacter>.AsReadOnly
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of ConsoleCharacter).AsReadOnly
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.BinarySearch(System.Int32,System.Int32,EventStore.Rags.ConsoleCharacter,System.Collections.Generic.IComparer{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.BinarySearch(System.Int32,System.Int32,EventStore.Rags.ConsoleCharacter,System.Collections.Generic.IComparer{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(Int32, Int32, ConsoleCharacter, IComparer<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.BinarySearch(Int32, Int32, ConsoleCharacter, IComparer<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.BinarySearch(System.Int32, System.Int32, EventStore.Rags.ConsoleCharacter, System.Collections.Generic.IComparer<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).BinarySearch(Int32, Int32, ConsoleCharacter, IComparer(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).BinarySearch(System.Int32, System.Int32, EventStore.Rags.ConsoleCharacter, System.Collections.Generic.IComparer(Of EventStore.Rags.ConsoleCharacter))
  name.vb: BinarySearch(Int32, Int32, ConsoleCharacter, IComparer(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<ConsoleCharacter>.BinarySearch
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of ConsoleCharacter).BinarySearch
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.BinarySearch(EventStore.Rags.ConsoleCharacter)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.BinarySearch(EventStore.Rags.ConsoleCharacter)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.BinarySearch(`0)
  name: BinarySearch(ConsoleCharacter)
  nameWithType: List<ConsoleCharacter>.BinarySearch(ConsoleCharacter)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.BinarySearch(EventStore.Rags.ConsoleCharacter)
  nameWithType.vb: List(Of ConsoleCharacter).BinarySearch(ConsoleCharacter)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).BinarySearch(EventStore.Rags.ConsoleCharacter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<ConsoleCharacter>.BinarySearch
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of ConsoleCharacter).BinarySearch
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.BinarySearch(EventStore.Rags.ConsoleCharacter,System.Collections.Generic.IComparer{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.BinarySearch(EventStore.Rags.ConsoleCharacter,System.Collections.Generic.IComparer{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(ConsoleCharacter, IComparer<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.BinarySearch(ConsoleCharacter, IComparer<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.BinarySearch(EventStore.Rags.ConsoleCharacter, System.Collections.Generic.IComparer<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).BinarySearch(ConsoleCharacter, IComparer(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).BinarySearch(EventStore.Rags.ConsoleCharacter, System.Collections.Generic.IComparer(Of EventStore.Rags.ConsoleCharacter))
  name.vb: BinarySearch(ConsoleCharacter, IComparer(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<ConsoleCharacter>.BinarySearch
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of ConsoleCharacter).BinarySearch
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Clear
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Clear
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Clear
  name: Clear()
  nameWithType: List<ConsoleCharacter>.Clear()
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Clear()
  nameWithType.vb: List(Of ConsoleCharacter).Clear()
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<ConsoleCharacter>.Clear
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of ConsoleCharacter).Clear
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Contains(EventStore.Rags.ConsoleCharacter)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Contains(EventStore.Rags.ConsoleCharacter)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Contains(`0)
  name: Contains(ConsoleCharacter)
  nameWithType: List<ConsoleCharacter>.Contains(ConsoleCharacter)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Contains(EventStore.Rags.ConsoleCharacter)
  nameWithType.vb: List(Of ConsoleCharacter).Contains(ConsoleCharacter)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Contains(EventStore.Rags.ConsoleCharacter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<ConsoleCharacter>.Contains
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of ConsoleCharacter).Contains
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.ConvertAll``1(System.Converter{EventStore.Rags.ConsoleCharacter,{TOutput}})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.ConvertAll``1(System.Converter{EventStore.Rags.ConsoleCharacter,``0})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  name: ConvertAll<TOutput>(Converter<ConsoleCharacter, TOutput>)
  nameWithType: List<ConsoleCharacter>.ConvertAll<TOutput>(Converter<ConsoleCharacter, TOutput>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.ConvertAll<TOutput>(System.Converter<EventStore.Rags.ConsoleCharacter, TOutput>)
  nameWithType.vb: List(Of ConsoleCharacter).ConvertAll(Of TOutput)(Converter(Of ConsoleCharacter, TOutput))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).ConvertAll(Of TOutput)(System.Converter(Of EventStore.Rags.ConsoleCharacter, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of ConsoleCharacter, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<ConsoleCharacter>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of ConsoleCharacter).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.CopyTo(System.Int32,EventStore.Rags.ConsoleCharacter[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.CopyTo(System.Int32,EventStore.Rags.ConsoleCharacter[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  name: CopyTo(Int32, ConsoleCharacter[], Int32, Int32)
  nameWithType: List<ConsoleCharacter>.CopyTo(Int32, ConsoleCharacter[], Int32, Int32)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.CopyTo(System.Int32, EventStore.Rags.ConsoleCharacter[], System.Int32, System.Int32)
  nameWithType.vb: List(Of ConsoleCharacter).CopyTo(Int32, ConsoleCharacter(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).CopyTo(System.Int32, EventStore.Rags.ConsoleCharacter(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, ConsoleCharacter(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<ConsoleCharacter>.CopyTo
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of ConsoleCharacter).CopyTo
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.CopyTo(EventStore.Rags.ConsoleCharacter[])
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.CopyTo(EventStore.Rags.ConsoleCharacter[])
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.CopyTo(`0[])
  name: CopyTo(ConsoleCharacter[])
  nameWithType: List<ConsoleCharacter>.CopyTo(ConsoleCharacter[])
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.CopyTo(EventStore.Rags.ConsoleCharacter[])
  nameWithType.vb: List(Of ConsoleCharacter).CopyTo(ConsoleCharacter())
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).CopyTo(EventStore.Rags.ConsoleCharacter())
  name.vb: CopyTo(ConsoleCharacter())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<ConsoleCharacter>.CopyTo
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of ConsoleCharacter).CopyTo
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.CopyTo(EventStore.Rags.ConsoleCharacter[],System.Int32)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.CopyTo(EventStore.Rags.ConsoleCharacter[],System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  name: CopyTo(ConsoleCharacter[], Int32)
  nameWithType: List<ConsoleCharacter>.CopyTo(ConsoleCharacter[], Int32)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.CopyTo(EventStore.Rags.ConsoleCharacter[], System.Int32)
  nameWithType.vb: List(Of ConsoleCharacter).CopyTo(ConsoleCharacter(), Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).CopyTo(EventStore.Rags.ConsoleCharacter(), System.Int32)
  name.vb: CopyTo(ConsoleCharacter(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<ConsoleCharacter>.CopyTo
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of ConsoleCharacter).CopyTo
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Exists(System.Predicate{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Exists(System.Predicate{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  name: Exists(Predicate<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.Exists(Predicate<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Exists(System.Predicate<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).Exists(Predicate(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Exists(System.Predicate(Of EventStore.Rags.ConsoleCharacter))
  name.vb: Exists(Predicate(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<ConsoleCharacter>.Exists
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of ConsoleCharacter).Exists
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Find(System.Predicate{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Find(System.Predicate{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  name: Find(Predicate<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.Find(Predicate<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Find(System.Predicate<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).Find(Predicate(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Find(System.Predicate(Of EventStore.Rags.ConsoleCharacter))
  name.vb: Find(Predicate(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<ConsoleCharacter>.Find
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of ConsoleCharacter).Find
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindAll(System.Predicate{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindAll(System.Predicate{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  name: FindAll(Predicate<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.FindAll(Predicate<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindAll(System.Predicate<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).FindAll(Predicate(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindAll(System.Predicate(Of EventStore.Rags.ConsoleCharacter))
  name.vb: FindAll(Predicate(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<ConsoleCharacter>.FindAll
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of ConsoleCharacter).FindAll
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindIndex(System.Int32,System.Int32,System.Predicate{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindIndex(System.Int32,System.Int32,System.Predicate{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Int32, Predicate<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.FindIndex(Int32, Int32, Predicate<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindIndex(System.Int32, System.Int32, System.Predicate<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).FindIndex(Int32, Int32, Predicate(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindIndex(System.Int32, System.Int32, System.Predicate(Of EventStore.Rags.ConsoleCharacter))
  name.vb: FindIndex(Int32, Int32, Predicate(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<ConsoleCharacter>.FindIndex
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of ConsoleCharacter).FindIndex
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindIndex(System.Int32,System.Predicate{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindIndex(System.Int32,System.Predicate{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Predicate<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.FindIndex(Int32, Predicate<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindIndex(System.Int32, System.Predicate<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).FindIndex(Int32, Predicate(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindIndex(System.Int32, System.Predicate(Of EventStore.Rags.ConsoleCharacter))
  name.vb: FindIndex(Int32, Predicate(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<ConsoleCharacter>.FindIndex
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of ConsoleCharacter).FindIndex
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindIndex(System.Predicate{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindIndex(System.Predicate{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  name: FindIndex(Predicate<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.FindIndex(Predicate<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindIndex(System.Predicate<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).FindIndex(Predicate(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindIndex(System.Predicate(Of EventStore.Rags.ConsoleCharacter))
  name.vb: FindIndex(Predicate(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<ConsoleCharacter>.FindIndex
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of ConsoleCharacter).FindIndex
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindLast(System.Predicate{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindLast(System.Predicate{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  name: FindLast(Predicate<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.FindLast(Predicate<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindLast(System.Predicate<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).FindLast(Predicate(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindLast(System.Predicate(Of EventStore.Rags.ConsoleCharacter))
  name.vb: FindLast(Predicate(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<ConsoleCharacter>.FindLast
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of ConsoleCharacter).FindLast
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindLastIndex(System.Int32,System.Int32,System.Predicate{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindLastIndex(System.Int32,System.Int32,System.Predicate{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Int32, Predicate<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.FindLastIndex(Int32, Int32, Predicate<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindLastIndex(System.Int32, System.Int32, System.Predicate<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).FindLastIndex(Int32, Int32, Predicate(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of EventStore.Rags.ConsoleCharacter))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<ConsoleCharacter>.FindLastIndex
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of ConsoleCharacter).FindLastIndex
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindLastIndex(System.Int32,System.Predicate{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindLastIndex(System.Int32,System.Predicate{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Predicate<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.FindLastIndex(Int32, Predicate<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindLastIndex(System.Int32, System.Predicate<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).FindLastIndex(Int32, Predicate(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindLastIndex(System.Int32, System.Predicate(Of EventStore.Rags.ConsoleCharacter))
  name.vb: FindLastIndex(Int32, Predicate(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<ConsoleCharacter>.FindLastIndex
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of ConsoleCharacter).FindLastIndex
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindLastIndex(System.Predicate{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.FindLastIndex(System.Predicate{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  name: FindLastIndex(Predicate<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.FindLastIndex(Predicate<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindLastIndex(System.Predicate<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).FindLastIndex(Predicate(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindLastIndex(System.Predicate(Of EventStore.Rags.ConsoleCharacter))
  name.vb: FindLastIndex(Predicate(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<ConsoleCharacter>.FindLastIndex
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of ConsoleCharacter).FindLastIndex
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.ForEach(System.Action{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.ForEach(System.Action{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  name: ForEach(Action<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.ForEach(Action<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.ForEach(System.Action<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).ForEach(Action(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).ForEach(System.Action(Of EventStore.Rags.ConsoleCharacter))
  name.vb: ForEach(Action(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<ConsoleCharacter>.ForEach
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of ConsoleCharacter).ForEach
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.GetEnumerator
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.GetEnumerator
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: List<ConsoleCharacter>.GetEnumerator()
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.GetEnumerator()
  nameWithType.vb: List(Of ConsoleCharacter).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<ConsoleCharacter>.GetEnumerator
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of ConsoleCharacter).GetEnumerator
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  name: GetRange(Int32, Int32)
  nameWithType: List<ConsoleCharacter>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of ConsoleCharacter).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<ConsoleCharacter>.GetRange
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of ConsoleCharacter).GetRange
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.IndexOf(EventStore.Rags.ConsoleCharacter)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.IndexOf(EventStore.Rags.ConsoleCharacter)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.IndexOf(`0)
  name: IndexOf(ConsoleCharacter)
  nameWithType: List<ConsoleCharacter>.IndexOf(ConsoleCharacter)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.IndexOf(EventStore.Rags.ConsoleCharacter)
  nameWithType.vb: List(Of ConsoleCharacter).IndexOf(ConsoleCharacter)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).IndexOf(EventStore.Rags.ConsoleCharacter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<ConsoleCharacter>.IndexOf
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of ConsoleCharacter).IndexOf
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.IndexOf(EventStore.Rags.ConsoleCharacter,System.Int32)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.IndexOf(EventStore.Rags.ConsoleCharacter,System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  name: IndexOf(ConsoleCharacter, Int32)
  nameWithType: List<ConsoleCharacter>.IndexOf(ConsoleCharacter, Int32)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.IndexOf(EventStore.Rags.ConsoleCharacter, System.Int32)
  nameWithType.vb: List(Of ConsoleCharacter).IndexOf(ConsoleCharacter, Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).IndexOf(EventStore.Rags.ConsoleCharacter, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<ConsoleCharacter>.IndexOf
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of ConsoleCharacter).IndexOf
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.IndexOf(EventStore.Rags.ConsoleCharacter,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.IndexOf(EventStore.Rags.ConsoleCharacter,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  name: IndexOf(ConsoleCharacter, Int32, Int32)
  nameWithType: List<ConsoleCharacter>.IndexOf(ConsoleCharacter, Int32, Int32)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.IndexOf(EventStore.Rags.ConsoleCharacter, System.Int32, System.Int32)
  nameWithType.vb: List(Of ConsoleCharacter).IndexOf(ConsoleCharacter, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).IndexOf(EventStore.Rags.ConsoleCharacter, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<ConsoleCharacter>.IndexOf
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of ConsoleCharacter).IndexOf
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Insert(System.Int32,EventStore.Rags.ConsoleCharacter)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Insert(System.Int32,EventStore.Rags.ConsoleCharacter)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  name: Insert(Int32, ConsoleCharacter)
  nameWithType: List<ConsoleCharacter>.Insert(Int32, ConsoleCharacter)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Insert(System.Int32, EventStore.Rags.ConsoleCharacter)
  nameWithType.vb: List(Of ConsoleCharacter).Insert(Int32, ConsoleCharacter)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Insert(System.Int32, EventStore.Rags.ConsoleCharacter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<ConsoleCharacter>.Insert
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of ConsoleCharacter).Insert
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  name: InsertRange(Int32, IEnumerable<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.InsertRange(Int32, IEnumerable<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).InsertRange(Int32, IEnumerable(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of EventStore.Rags.ConsoleCharacter))
  name.vb: InsertRange(Int32, IEnumerable(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<ConsoleCharacter>.InsertRange
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of ConsoleCharacter).InsertRange
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.LastIndexOf(EventStore.Rags.ConsoleCharacter)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.LastIndexOf(EventStore.Rags.ConsoleCharacter)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0)
  name: LastIndexOf(ConsoleCharacter)
  nameWithType: List<ConsoleCharacter>.LastIndexOf(ConsoleCharacter)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.LastIndexOf(EventStore.Rags.ConsoleCharacter)
  nameWithType.vb: List(Of ConsoleCharacter).LastIndexOf(ConsoleCharacter)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).LastIndexOf(EventStore.Rags.ConsoleCharacter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<ConsoleCharacter>.LastIndexOf
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of ConsoleCharacter).LastIndexOf
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.LastIndexOf(EventStore.Rags.ConsoleCharacter,System.Int32)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.LastIndexOf(EventStore.Rags.ConsoleCharacter,System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  name: LastIndexOf(ConsoleCharacter, Int32)
  nameWithType: List<ConsoleCharacter>.LastIndexOf(ConsoleCharacter, Int32)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.LastIndexOf(EventStore.Rags.ConsoleCharacter, System.Int32)
  nameWithType.vb: List(Of ConsoleCharacter).LastIndexOf(ConsoleCharacter, Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).LastIndexOf(EventStore.Rags.ConsoleCharacter, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<ConsoleCharacter>.LastIndexOf
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of ConsoleCharacter).LastIndexOf
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.LastIndexOf(EventStore.Rags.ConsoleCharacter,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.LastIndexOf(EventStore.Rags.ConsoleCharacter,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  name: LastIndexOf(ConsoleCharacter, Int32, Int32)
  nameWithType: List<ConsoleCharacter>.LastIndexOf(ConsoleCharacter, Int32, Int32)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.LastIndexOf(EventStore.Rags.ConsoleCharacter, System.Int32, System.Int32)
  nameWithType.vb: List(Of ConsoleCharacter).LastIndexOf(ConsoleCharacter, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).LastIndexOf(EventStore.Rags.ConsoleCharacter, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<ConsoleCharacter>.LastIndexOf
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of ConsoleCharacter).LastIndexOf
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Remove(EventStore.Rags.ConsoleCharacter)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Remove(EventStore.Rags.ConsoleCharacter)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Remove(`0)
  name: Remove(ConsoleCharacter)
  nameWithType: List<ConsoleCharacter>.Remove(ConsoleCharacter)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Remove(EventStore.Rags.ConsoleCharacter)
  nameWithType.vb: List(Of ConsoleCharacter).Remove(ConsoleCharacter)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Remove(EventStore.Rags.ConsoleCharacter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<ConsoleCharacter>.Remove
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of ConsoleCharacter).Remove
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.RemoveAll(System.Predicate{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.RemoveAll(System.Predicate{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  name: RemoveAll(Predicate<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.RemoveAll(Predicate<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.RemoveAll(System.Predicate<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).RemoveAll(Predicate(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).RemoveAll(System.Predicate(Of EventStore.Rags.ConsoleCharacter))
  name.vb: RemoveAll(Predicate(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<ConsoleCharacter>.RemoveAll
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of ConsoleCharacter).RemoveAll
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: List<ConsoleCharacter>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of ConsoleCharacter).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<ConsoleCharacter>.RemoveAt
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of ConsoleCharacter).RemoveAt
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  name: RemoveRange(Int32, Int32)
  nameWithType: List<ConsoleCharacter>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of ConsoleCharacter).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<ConsoleCharacter>.RemoveRange
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of ConsoleCharacter).RemoveRange
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Reverse
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Reverse
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Reverse
  name: Reverse()
  nameWithType: List<ConsoleCharacter>.Reverse()
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Reverse()
  nameWithType.vb: List(Of ConsoleCharacter).Reverse()
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<ConsoleCharacter>.Reverse
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of ConsoleCharacter).Reverse
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  name: Reverse(Int32, Int32)
  nameWithType: List<ConsoleCharacter>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of ConsoleCharacter).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<ConsoleCharacter>.Reverse
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of ConsoleCharacter).Reverse
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Sort
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Sort
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Sort
  name: Sort()
  nameWithType: List<ConsoleCharacter>.Sort()
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Sort()
  nameWithType.vb: List(Of ConsoleCharacter).Sort()
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<ConsoleCharacter>.Sort
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of ConsoleCharacter).Sort
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Sort(System.Collections.Generic.IComparer{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Sort(System.Collections.Generic.IComparer{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  name: Sort(IComparer<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.Sort(IComparer<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Sort(System.Collections.Generic.IComparer<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).Sort(IComparer(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Sort(System.Collections.Generic.IComparer(Of EventStore.Rags.ConsoleCharacter))
  name.vb: Sort(IComparer(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<ConsoleCharacter>.Sort
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of ConsoleCharacter).Sort
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Sort(System.Comparison{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Sort(System.Comparison{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  name: Sort(Comparison<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.Sort(Comparison<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Sort(System.Comparison<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).Sort(Comparison(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Sort(System.Comparison(Of EventStore.Rags.ConsoleCharacter))
  name.vb: Sort(Comparison(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<ConsoleCharacter>.Sort
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of ConsoleCharacter).Sort
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  name: Sort(Int32, Int32, IComparer<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.Sort(Int32, Int32, IComparer<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).Sort(Int32, Int32, IComparer(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of EventStore.Rags.ConsoleCharacter))
  name.vb: Sort(Int32, Int32, IComparer(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<ConsoleCharacter>.Sort
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of ConsoleCharacter).Sort
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<ConsoleCharacter>.GetEnumerator()
  nameWithType: List<ConsoleCharacter>.IEnumerable<ConsoleCharacter>.GetEnumerator()
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.Generic.IEnumerable<EventStore.Rags.ConsoleCharacter>.GetEnumerator()
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<ConsoleCharacter>.GetEnumerator
    nameWithType: List<ConsoleCharacter>.IEnumerable<ConsoleCharacter>.GetEnumerator
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.Generic.IEnumerable<EventStore.Rags.ConsoleCharacter>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of ConsoleCharacter).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<ConsoleCharacter>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<ConsoleCharacter>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of ConsoleCharacter).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: List<ConsoleCharacter>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<ConsoleCharacter>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of ConsoleCharacter).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  name: IList.Add(Object)
  nameWithType: List<ConsoleCharacter>.IList.Add(Object)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<ConsoleCharacter>.IList.Add
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of ConsoleCharacter).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  name: IList.Contains(Object)
  nameWithType: List<ConsoleCharacter>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<ConsoleCharacter>.IList.Contains
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of ConsoleCharacter).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  name: IList.IndexOf(Object)
  nameWithType: List<ConsoleCharacter>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<ConsoleCharacter>.IList.IndexOf
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of ConsoleCharacter).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  name: IList.Insert(Int32, Object)
  nameWithType: List<ConsoleCharacter>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<ConsoleCharacter>.IList.Insert
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of ConsoleCharacter).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  name: IList.Remove(Object)
  nameWithType: List<ConsoleCharacter>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<ConsoleCharacter>.IList.Remove
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of ConsoleCharacter).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.ToArray
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.ToArray
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.ToArray
  name: ToArray()
  nameWithType: List<ConsoleCharacter>.ToArray()
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.ToArray()
  nameWithType.vb: List(Of ConsoleCharacter).ToArray()
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<ConsoleCharacter>.ToArray
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of ConsoleCharacter).ToArray
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.TrimExcess
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.TrimExcess
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.TrimExcess
  name: TrimExcess()
  nameWithType: List<ConsoleCharacter>.TrimExcess()
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.TrimExcess()
  nameWithType.vb: List(Of ConsoleCharacter).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<ConsoleCharacter>.TrimExcess
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of ConsoleCharacter).TrimExcess
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.TrueForAll(System.Predicate{EventStore.Rags.ConsoleCharacter})
  commentId: M:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.TrueForAll(System.Predicate{EventStore.Rags.ConsoleCharacter})
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  name: TrueForAll(Predicate<ConsoleCharacter>)
  nameWithType: List<ConsoleCharacter>.TrueForAll(Predicate<ConsoleCharacter>)
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.TrueForAll(System.Predicate<EventStore.Rags.ConsoleCharacter>)
  nameWithType.vb: List(Of ConsoleCharacter).TrueForAll(Predicate(Of ConsoleCharacter))
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).TrueForAll(System.Predicate(Of EventStore.Rags.ConsoleCharacter))
  name.vb: TrueForAll(Predicate(Of ConsoleCharacter))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<ConsoleCharacter>.TrueForAll
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of ConsoleCharacter).TrueForAll
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.ConsoleCharacter
    name: ConsoleCharacter
    nameWithType: ConsoleCharacter
    fullName: EventStore.Rags.ConsoleCharacter
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Capacity
  commentId: P:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Capacity
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Capacity
  name: Capacity
  nameWithType: List<ConsoleCharacter>.Capacity
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Capacity
  nameWithType.vb: List(Of ConsoleCharacter).Capacity
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Capacity
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Count
  commentId: P:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Count
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Count
  name: Count
  nameWithType: List<ConsoleCharacter>.Count
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Count
  nameWithType.vb: List(Of ConsoleCharacter).Count
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Count
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Item(System.Int32)
  commentId: P:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.Item(System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: List<ConsoleCharacter>.Item[Int32]
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Item[System.Int32]
  nameWithType.vb: List(Of ConsoleCharacter).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<ConsoleCharacter>.Item
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of ConsoleCharacter).Item
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<ConsoleCharacter>.IsReadOnly
  nameWithType: List<ConsoleCharacter>.ICollection<ConsoleCharacter>.IsReadOnly
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.Generic.ICollection<EventStore.Rags.ConsoleCharacter>.IsReadOnly
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: List<ConsoleCharacter>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: List<ConsoleCharacter>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#IsFixedSize
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: List<ConsoleCharacter>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#IsReadOnly
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: List<ConsoleCharacter>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Generic.List{EventStore.Rags.ConsoleCharacter}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  name: IList.Item[Int32]
  nameWithType: List<ConsoleCharacter>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of ConsoleCharacter).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<ConsoleCharacter>.IList.Item
    fullName: System.Collections.Generic.List<EventStore.Rags.ConsoleCharacter>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of ConsoleCharacter).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of EventStore.Rags.ConsoleCharacter).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.ConsoleString.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<ConsoleString>()
  nameWithType: ProtobufExtensions.Serialize<ConsoleString>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Rags.ConsoleString>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of ConsoleString)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Rags.ConsoleString)()
  name.vb: Serialize(Of ConsoleString)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<ConsoleString>
    nameWithType: ProtobufExtensions.Serialize<ConsoleString>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Rags.ConsoleString>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of ConsoleString)
    nameWithType: ProtobufExtensions.Serialize(Of ConsoleString)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Rags.ConsoleString)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.ConsoleString.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<ConsoleString>()
  nameWithType: ProtobufExtensions.SerializeToArray<ConsoleString>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Rags.ConsoleString>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of ConsoleString)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Rags.ConsoleString)()
  name.vb: SerializeToArray(Of ConsoleString)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<ConsoleString>
    nameWithType: ProtobufExtensions.SerializeToArray<ConsoleString>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Rags.ConsoleString>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of ConsoleString)
    nameWithType: ProtobufExtensions.SerializeToArray(Of ConsoleString)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Rags.ConsoleString)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  isExternal: true
  name: IList.get_Item(Int32)
  nameWithType: List<T>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of T).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<T>.IList.get_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of T).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  isExternal: true
  name: IList.set_Item(Int32, Object)
  nameWithType: List<T>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<T>.IList.set_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of T).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Add(`0)
  commentId: M:System.Collections.Generic.List`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: List<T>.Add(T)
  fullName: System.Collections.Generic.List<T>.Add(T)
  nameWithType.vb: List(Of T).Add(T)
  fullName.vb: System.Collections.Generic.List(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<T>.Add
    fullName: System.Collections.Generic.List<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of T).Add
    fullName: System.Collections.Generic.List(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).AddRange(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<T>.AddRange
    fullName: System.Collections.Generic.List<T>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of T).AddRange
    fullName: System.Collections.Generic.List(Of T).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AsReadOnly
  commentId: M:System.Collections.Generic.List`1.AsReadOnly
  isExternal: true
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
  nameWithType.vb: List(Of T).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of T).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<T>.AsReadOnly
    fullName: System.Collections.Generic.List<T>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of T).AsReadOnly
    fullName: System.Collections.Generic.List(Of T).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(Int32, Int32, T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Int32, Int32, T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  isExternal: true
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
  nameWithType.vb: List(Of T).BinarySearch(T)
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Clear
  commentId: M:System.Collections.Generic.List`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
  nameWithType.vb: List(Of T).Clear()
  fullName.vb: System.Collections.Generic.List(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<T>.Clear
    fullName: System.Collections.Generic.List<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of T).Clear
    fullName: System.Collections.Generic.List(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Contains(`0)
  commentId: M:System.Collections.Generic.List`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
  nameWithType.vb: List(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.List(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<T>.Contains
    fullName: System.Collections.Generic.List<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of T).Contains
    fullName: System.Collections.Generic.List(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  commentId: M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  isExternal: true
  name: ConvertAll<TOutput>(Converter<T, TOutput>)
  nameWithType: List<T>.ConvertAll<TOutput>(Converter<T, TOutput>)
  fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>(System.Converter<T, TOutput>)
  nameWithType.vb: List(Of T).ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  fullName.vb: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)(System.Converter(Of T, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<T>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of T).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  isExternal: true
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
  nameWithType.vb: List(Of T).CopyTo(Int32, T(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, T(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  isExternal: true
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
  nameWithType.vb: List(Of T).CopyTo(T())
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T())
  name.vb: CopyTo(T())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: List<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: List(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  isExternal: true
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(System.Predicate<T>)
  nameWithType.vb: List(Of T).Exists(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Exists(System.Predicate(Of T))
  name.vb: Exists(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<T>.Exists
    fullName: System.Collections.Generic.List<T>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of T).Exists
    fullName: System.Collections.Generic.List(Of T).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  isExternal: true
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(System.Predicate<T>)
  nameWithType.vb: List(Of T).Find(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Find(System.Predicate(Of T))
  name.vb: Find(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<T>.Find
    fullName: System.Collections.Generic.List<T>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of T).Find
    fullName: System.Collections.Generic.List(Of T).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  isExternal: true
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindAll(System.Predicate(Of T))
  name.vb: FindAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<T>.FindAll
    fullName: System.Collections.Generic.List<T>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of T).FindAll
    fullName: System.Collections.Generic.List(Of T).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  isExternal: true
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Predicate(Of T))
  name.vb: FindIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  isExternal: true
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLast(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLast(System.Predicate(Of T))
  name.vb: FindLast(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<T>.FindLast
    fullName: System.Collections.Generic.List<T>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of T).FindLast
    fullName: System.Collections.Generic.List(Of T).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Predicate(Of T))
  name.vb: FindLastIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  isExternal: true
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(System.Action<T>)
  nameWithType.vb: List(Of T).ForEach(Action(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).ForEach(System.Action(Of T))
  name.vb: ForEach(Action(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<T>.ForEach
    fullName: System.Collections.Generic.List<T>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of T).ForEach
    fullName: System.Collections.Generic.List(Of T).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetEnumerator
  commentId: M:System.Collections.Generic.List`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
  nameWithType.vb: List(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of T).GetEnumerator
    fullName: System.Collections.Generic.List(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  isExternal: true
  name: GetRange(Int32, Int32)
  nameWithType: List<T>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<T>.GetRange
    fullName: System.Collections.Generic.List<T>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of T).GetRange
    fullName: System.Collections.Generic.List(Of T).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
  nameWithType.vb: List(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32)
  nameWithType: List<T>.IndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32, Int32)
  nameWithType: List<T>.IndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: List<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.List<T>.Insert(System.Int32, T)
  nameWithType.vb: List(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.List(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<T>.Insert
    fullName: System.Collections.Generic.List<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of T).Insert
    fullName: System.Collections.Generic.List(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).InsertRange(Int32, IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<T>.InsertRange
    fullName: System.Collections.Generic.List<T>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of T).InsertRange
    fullName: System.Collections.Generic.List(Of T).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  isExternal: true
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
  nameWithType.vb: List(Of T).LastIndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Remove(`0)
  commentId: M:System.Collections.Generic.List`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: List<T>.Remove(T)
  fullName: System.Collections.Generic.List<T>.Remove(T)
  nameWithType.vb: List(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.List(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<T>.Remove
    fullName: System.Collections.Generic.List<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of T).Remove
    fullName: System.Collections.Generic.List(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  isExternal: true
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).RemoveAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAll(System.Predicate(Of T))
  name.vb: RemoveAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<T>.RemoveAll
    fullName: System.Collections.Generic.List<T>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of T).RemoveAll
    fullName: System.Collections.Generic.List(Of T).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<T>.RemoveAt
    fullName: System.Collections.Generic.List<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of T).RemoveAt
    fullName: System.Collections.Generic.List(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  isExternal: true
  name: RemoveRange(Int32, Int32)
  nameWithType: List<T>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<T>.RemoveRange
    fullName: System.Collections.Generic.List<T>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of T).RemoveRange
    fullName: System.Collections.Generic.List(Of T).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse
  commentId: M:System.Collections.Generic.List`1.Reverse
  isExternal: true
  name: Reverse()
  nameWithType: List<T>.Reverse()
  fullName: System.Collections.Generic.List<T>.Reverse()
  nameWithType.vb: List(Of T).Reverse()
  fullName.vb: System.Collections.Generic.List(Of T).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  isExternal: true
  name: Reverse(Int32, Int32)
  nameWithType: List<T>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort
  commentId: M:System.Collections.Generic.List`1.Sort
  isExternal: true
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
  nameWithType.vb: List(Of T).Sort()
  fullName.vb: System.Collections.Generic.List(Of T).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  isExternal: true
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Comparison<T>)
  nameWithType.vb: List(Of T).Sort(Comparison(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(Int32, Int32, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Int32, Int32, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isExternal: true
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: List<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<T>.GetEnumerator
    nameWithType: List<T>.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<T>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<T>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of T).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: List<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<T>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  isExternal: true
  name: IList.Add(Object)
  nameWithType: List<T>.IList.Add(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<T>.IList.Add
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of T).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  isExternal: true
  name: IList.Contains(Object)
  nameWithType: List<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<T>.IList.Contains
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of T).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  isExternal: true
  name: IList.IndexOf(Object)
  nameWithType: List<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<T>.IList.IndexOf
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of T).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  isExternal: true
  name: IList.Insert(Int32, Object)
  nameWithType: List<T>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<T>.IList.Insert
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of T).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  isExternal: true
  name: IList.Remove(Object)
  nameWithType: List<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<T>.IList.Remove
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of T).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ToArray
  commentId: M:System.Collections.Generic.List`1.ToArray
  isExternal: true
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
  nameWithType.vb: List(Of T).ToArray()
  fullName.vb: System.Collections.Generic.List(Of T).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<T>.ToArray
    fullName: System.Collections.Generic.List<T>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of T).ToArray
    fullName: System.Collections.Generic.List(Of T).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrimExcess
  commentId: M:System.Collections.Generic.List`1.TrimExcess
  isExternal: true
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
  nameWithType.vb: List(Of T).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of T).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<T>.TrimExcess
    fullName: System.Collections.Generic.List<T>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of T).TrimExcess
    fullName: System.Collections.Generic.List(Of T).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  isExternal: true
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).TrueForAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).TrueForAll(System.Predicate(Of T))
  name.vb: TrueForAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<T>.TrueForAll
    fullName: System.Collections.Generic.List<T>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of T).TrueForAll
    fullName: System.Collections.Generic.List(Of T).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  isExternal: true
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  nameWithType.vb: List(Of T).Capacity
  fullName.vb: System.Collections.Generic.List(Of T).Capacity
- uid: System.Collections.Generic.List`1.Count
  commentId: P:System.Collections.Generic.List`1.Count
  isExternal: true
  name: Count
  nameWithType: List<T>.Count
  fullName: System.Collections.Generic.List<T>.Count
  nameWithType.vb: List(Of T).Count
  fullName.vb: System.Collections.Generic.List(Of T).Count
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: List<T>.Item[Int32]
  fullName: System.Collections.Generic.List<T>.Item[System.Int32]
  nameWithType.vb: List(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<T>.Item
    fullName: System.Collections.Generic.List<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of T).Item
    fullName: System.Collections.Generic.List(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  isExternal: true
  name: ICollection<T>.IsReadOnly
  nameWithType: List<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  isExternal: true
  name: ICollection.IsSynchronized
  nameWithType: List<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  isExternal: true
  name: ICollection.SyncRoot
  nameWithType: List<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  isExternal: true
  name: IList.IsFixedSize
  nameWithType: List<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  isExternal: true
  name: IList.IsReadOnly
  nameWithType: List<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  isExternal: true
  name: IList.Item[Int32]
  nameWithType: List<T>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of T).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<T>.IList.Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of T).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Rags.ConsoleString.Empty*
  commentId: Overload:EventStore.Rags.ConsoleString.Empty
  name: Empty
  nameWithType: ConsoleString.Empty
  fullName: EventStore.Rags.ConsoleString.Empty
- uid: EventStore.Rags.ConsoleString
  commentId: T:EventStore.Rags.ConsoleString
  parent: EventStore.Rags
  name: ConsoleString
  nameWithType: ConsoleString
  fullName: EventStore.Rags.ConsoleString
- uid: EventStore.Rags.ConsoleString.Length*
  commentId: Overload:EventStore.Rags.ConsoleString.Length
  name: Length
  nameWithType: ConsoleString.Length
  fullName: EventStore.Rags.ConsoleString.Length
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Rags.ConsoleString.#ctor*
  commentId: Overload:EventStore.Rags.ConsoleString.#ctor
  name: ConsoleString
  nameWithType: ConsoleString.ConsoleString
  fullName: EventStore.Rags.ConsoleString.ConsoleString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable{System.ConsoleColor}
  commentId: T:System.Nullable{System.ConsoleColor}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ConsoleColor>
  nameWithType: Nullable<ConsoleColor>
  fullName: System.Nullable<System.ConsoleColor>
  nameWithType.vb: Nullable(Of ConsoleColor)
  fullName.vb: System.Nullable(Of System.ConsoleColor)
  name.vb: Nullable(Of ConsoleColor)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ConsoleColor
    name: ConsoleColor
    nameWithType: ConsoleColor
    fullName: System.ConsoleColor
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ConsoleColor
    name: ConsoleColor
    nameWithType: ConsoleColor
    fullName: System.ConsoleColor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.ConsoleString.Append*
  commentId: Overload:EventStore.Rags.ConsoleString.Append
  name: Append
  nameWithType: ConsoleString.Append
  fullName: EventStore.Rags.ConsoleString.Append
- uid: EventStore.Rags.ConsoleString.AppendUsingCurrentFormat*
  commentId: Overload:EventStore.Rags.ConsoleString.AppendUsingCurrentFormat
  name: AppendUsingCurrentFormat
  nameWithType: ConsoleString.AppendUsingCurrentFormat
  fullName: EventStore.Rags.ConsoleString.AppendUsingCurrentFormat
- uid: EventStore.Rags.ConsoleString.Replace*
  commentId: Overload:EventStore.Rags.ConsoleString.Replace
  name: Replace
  nameWithType: ConsoleString.Replace
  fullName: EventStore.Rags.ConsoleString.Replace
- uid: EventStore.Rags.ConsoleString.ReplaceRegex*
  commentId: Overload:EventStore.Rags.ConsoleString.ReplaceRegex
  name: ReplaceRegex
  nameWithType: ConsoleString.ReplaceRegex
  fullName: EventStore.Rags.ConsoleString.ReplaceRegex
- uid: EventStore.Rags.ConsoleString.IndexOf*
  commentId: Overload:EventStore.Rags.ConsoleString.IndexOf
  name: IndexOf
  nameWithType: ConsoleString.IndexOf
  fullName: EventStore.Rags.ConsoleString.IndexOf
- uid: EventStore.Rags.ConsoleString.Contains*
  commentId: Overload:EventStore.Rags.ConsoleString.Contains
  name: Contains
  nameWithType: ConsoleString.Contains
  fullName: EventStore.Rags.ConsoleString.Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Rags.ConsoleString.Substring*
  commentId: Overload:EventStore.Rags.ConsoleString.Substring
  name: Substring
  nameWithType: ConsoleString.Substring
  fullName: EventStore.Rags.ConsoleString.Substring
- uid: EventStore.Rags.ConsoleString.Write*
  commentId: Overload:EventStore.Rags.ConsoleString.Write
  name: Write
  nameWithType: ConsoleString.Write
  fullName: EventStore.Rags.ConsoleString.Write
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.ConsoleString.ToString*
  commentId: Overload:EventStore.Rags.ConsoleString.ToString
  name: ToString
  nameWithType: ConsoleString.ToString
  fullName: EventStore.Rags.ConsoleString.ToString
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.ConsoleString.Equals*
  commentId: Overload:EventStore.Rags.ConsoleString.Equals
  name: Equals
  nameWithType: ConsoleString.Equals
  fullName: EventStore.Rags.ConsoleString.Equals
- uid: EventStore.Rags.ConsoleString.CompareTo*
  commentId: Overload:EventStore.Rags.ConsoleString.CompareTo
  name: CompareTo
  nameWithType: ConsoleString.CompareTo
  fullName: EventStore.Rags.ConsoleString.CompareTo
- uid: System.IComparable{System.String}.CompareTo(System.String)
  commentId: M:System.IComparable{System.String}.CompareTo(System.String)
  parent: System.IComparable{System.String}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(String)
  nameWithType: IComparable<String>.CompareTo(String)
  fullName: System.IComparable<System.String>.CompareTo(System.String)
  nameWithType.vb: IComparable(Of String).CompareTo(String)
  fullName.vb: System.IComparable(Of System.String).CompareTo(System.String)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<String>.CompareTo
    fullName: System.IComparable<System.String>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of String).CompareTo
    fullName: System.IComparable(Of System.String).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.ConsoleString.GetHashCode*
  commentId: Overload:EventStore.Rags.ConsoleString.GetHashCode
  name: GetHashCode
  nameWithType: ConsoleString.GetHashCode
  fullName: EventStore.Rags.ConsoleString.GetHashCode
- uid: EventStore.Rags.ConsoleString.op_Addition*
  commentId: Overload:EventStore.Rags.ConsoleString.op_Addition
  name: Addition
  nameWithType: ConsoleString.Addition
  fullName: EventStore.Rags.ConsoleString.Addition
- uid: EventStore.Rags.ConsoleString.op_Equality*
  commentId: Overload:EventStore.Rags.ConsoleString.op_Equality
  name: Equality
  nameWithType: ConsoleString.Equality
  fullName: EventStore.Rags.ConsoleString.Equality
- uid: EventStore.Rags.ConsoleString.op_Inequality*
  commentId: Overload:EventStore.Rags.ConsoleString.op_Inequality
  name: Inequality
  nameWithType: ConsoleString.Inequality
  fullName: EventStore.Rags.ConsoleString.Inequality

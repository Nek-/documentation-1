### YamlMime:ManagedReference
items:
- uid: EventStore.Rags.IEnumerableExtensions
  commentId: T:EventStore.Rags.IEnumerableExtensions
  id: IEnumerableExtensions
  parent: EventStore.Rags
  children:
  - EventStore.Rags.IEnumerableExtensions.ApplyTo``1(System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource})
  - EventStore.Rags.IEnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  - EventStore.Rags.IEnumerableExtensions.Normalize(System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource})
  - EventStore.Rags.IEnumerableExtensions.UseAliases``1(System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource})
  langs:
  - csharp
  - vb
  name: IEnumerableExtensions
  nameWithType: IEnumerableExtensions
  fullName: EventStore.Rags.IEnumerableExtensions
  type: Class
  source:
    remote:
      path: src/EventStore.Rags/Extensions.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: IEnumerableExtensions
    path: ../EventStore/src/EventStore.Rags/Extensions.cs
    startLine: 153
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  syntax:
    content: public static class IEnumerableExtensions
    content.vb: Public Module IEnumerableExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Rags.IEnumerableExtensions.ApplyTo``1(System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource})
  commentId: M:EventStore.Rags.IEnumerableExtensions.ApplyTo``1(System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource})
  id: ApplyTo``1(System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource})
  isExtensionMethod: true
  parent: EventStore.Rags.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: ApplyTo<T>(IEnumerable<OptionSource>)
  nameWithType: IEnumerableExtensions.ApplyTo<T>(IEnumerable<OptionSource>)
  fullName: EventStore.Rags.IEnumerableExtensions.ApplyTo<T>(System.Collections.Generic.IEnumerable<EventStore.Rags.OptionSource>)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/Extensions.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ApplyTo
    path: ../EventStore/src/EventStore.Rags/Extensions.cs
    startLine: 155
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  syntax:
    content: >-
      public static T ApplyTo<T>(this IEnumerable<OptionSource> source)
          where T : class, new()
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ApplyTo(Of T As {Class, New})(source As IEnumerable(Of OptionSource)) As T
  overload: EventStore.Rags.IEnumerableExtensions.ApplyTo*
  nameWithType.vb: IEnumerableExtensions.ApplyTo(Of T)(IEnumerable(Of OptionSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Rags.IEnumerableExtensions.ApplyTo(Of T)(System.Collections.Generic.IEnumerable(Of EventStore.Rags.OptionSource))
  name.vb: ApplyTo(Of T)(IEnumerable(Of OptionSource))
- uid: EventStore.Rags.IEnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:EventStore.Rags.IEnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  id: Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: EventStore.Rags.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: Flatten<T>(IEnumerable<IEnumerable<T>>)
  nameWithType: IEnumerableExtensions.Flatten<T>(IEnumerable<IEnumerable<T>>)
  fullName: EventStore.Rags.IEnumerableExtensions.Flatten<T>(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/Extensions.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Flatten
    path: ../EventStore/src/EventStore.Rags/Extensions.cs
    startLine: 160
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  syntax:
    content: public static IEnumerable<T> Flatten<T>(this IEnumerable<IEnumerable<T>> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Flatten(Of T)(source As IEnumerable(Of IEnumerable(Of T))) As IEnumerable(Of T)
  overload: EventStore.Rags.IEnumerableExtensions.Flatten*
  nameWithType.vb: IEnumerableExtensions.Flatten(Of T)(IEnumerable(Of IEnumerable(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Rags.IEnumerableExtensions.Flatten(Of T)(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Flatten(Of T)(IEnumerable(Of IEnumerable(Of T)))
- uid: EventStore.Rags.IEnumerableExtensions.Normalize(System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource})
  commentId: M:EventStore.Rags.IEnumerableExtensions.Normalize(System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource})
  id: Normalize(System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource})
  isExtensionMethod: true
  parent: EventStore.Rags.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: Normalize(IEnumerable<OptionSource>)
  nameWithType: IEnumerableExtensions.Normalize(IEnumerable<OptionSource>)
  fullName: EventStore.Rags.IEnumerableExtensions.Normalize(System.Collections.Generic.IEnumerable<EventStore.Rags.OptionSource>)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/Extensions.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Normalize
    path: ../EventStore/src/EventStore.Rags/Extensions.cs
    startLine: 165
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  syntax:
    content: public static IEnumerable<OptionSource> Normalize(this IEnumerable<OptionSource> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource}
    return:
      type: System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Normalize(source As IEnumerable(Of OptionSource)) As IEnumerable(Of OptionSource)
  overload: EventStore.Rags.IEnumerableExtensions.Normalize*
  nameWithType.vb: IEnumerableExtensions.Normalize(IEnumerable(Of OptionSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Rags.IEnumerableExtensions.Normalize(System.Collections.Generic.IEnumerable(Of EventStore.Rags.OptionSource))
  name.vb: Normalize(IEnumerable(Of OptionSource))
- uid: EventStore.Rags.IEnumerableExtensions.UseAliases``1(System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource})
  commentId: M:EventStore.Rags.IEnumerableExtensions.UseAliases``1(System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource})
  id: UseAliases``1(System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource})
  isExtensionMethod: true
  parent: EventStore.Rags.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: UseAliases<TOptions>(IEnumerable<OptionSource>)
  nameWithType: IEnumerableExtensions.UseAliases<TOptions>(IEnumerable<OptionSource>)
  fullName: EventStore.Rags.IEnumerableExtensions.UseAliases<TOptions>(System.Collections.Generic.IEnumerable<EventStore.Rags.OptionSource>)
  type: Method
  source:
    remote:
      path: src/EventStore.Rags/Extensions.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: UseAliases
    path: ../EventStore/src/EventStore.Rags/Extensions.cs
    startLine: 174
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  syntax:
    content: >-
      public static IEnumerable<OptionSource> UseAliases<TOptions>(this IEnumerable<OptionSource> optionSources)
          where TOptions : class
    parameters:
    - id: optionSources
      type: System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource}
    typeParameters:
    - id: TOptions
    return:
      type: System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UseAliases(Of TOptions As Class)(optionSources As IEnumerable(Of OptionSource)) As IEnumerable(Of OptionSource)
  overload: EventStore.Rags.IEnumerableExtensions.UseAliases*
  nameWithType.vb: IEnumerableExtensions.UseAliases(Of TOptions)(IEnumerable(Of OptionSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Rags.IEnumerableExtensions.UseAliases(Of TOptions)(System.Collections.Generic.IEnumerable(Of EventStore.Rags.OptionSource))
  name.vb: UseAliases(Of TOptions)(IEnumerable(Of OptionSource))
references:
- uid: EventStore.Rags
  commentId: N:EventStore.Rags
  name: EventStore.Rags
  nameWithType: EventStore.Rags
  fullName: EventStore.Rags
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Rags.IEnumerableExtensions.ApplyTo*
  commentId: Overload:EventStore.Rags.IEnumerableExtensions.ApplyTo
  name: ApplyTo
  nameWithType: IEnumerableExtensions.ApplyTo
  fullName: EventStore.Rags.IEnumerableExtensions.ApplyTo
- uid: System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource}
  commentId: T:System.Collections.Generic.IEnumerable{EventStore.Rags.OptionSource}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<OptionSource>
  nameWithType: IEnumerable<OptionSource>
  fullName: System.Collections.Generic.IEnumerable<EventStore.Rags.OptionSource>
  nameWithType.vb: IEnumerable(Of OptionSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of EventStore.Rags.OptionSource)
  name.vb: IEnumerable(Of OptionSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Rags.OptionSource
    name: OptionSource
    nameWithType: OptionSource
    fullName: EventStore.Rags.OptionSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Rags.OptionSource
    name: OptionSource
    nameWithType: OptionSource
    fullName: EventStore.Rags.OptionSource
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Rags.IEnumerableExtensions.Flatten*
  commentId: Overload:EventStore.Rags.IEnumerableExtensions.Flatten
  name: Flatten
  nameWithType: IEnumerableExtensions.Flatten
  fullName: EventStore.Rags.IEnumerableExtensions.Flatten
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEnumerable<T>>
  nameWithType: IEnumerable<IEnumerable<T>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: IEnumerable(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Rags.IEnumerableExtensions.Normalize*
  commentId: Overload:EventStore.Rags.IEnumerableExtensions.Normalize
  name: Normalize
  nameWithType: IEnumerableExtensions.Normalize
  fullName: EventStore.Rags.IEnumerableExtensions.Normalize
- uid: EventStore.Rags.IEnumerableExtensions.UseAliases*
  commentId: Overload:EventStore.Rags.IEnumerableExtensions.UseAliases
  name: UseAliases
  nameWithType: IEnumerableExtensions.UseAliases
  fullName: EventStore.Rags.IEnumerableExtensions.UseAliases

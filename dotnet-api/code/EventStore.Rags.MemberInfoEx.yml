### YamlMime:ManagedReference
items:
- uid: EventStore.Rags.MemberInfoEx
  commentId: T:EventStore.Rags.MemberInfoEx
  id: MemberInfoEx
  parent: EventStore.Rags
  children:
  - EventStore.Rags.MemberInfoEx.Attr``1(System.Reflection.MemberInfo)
  - EventStore.Rags.MemberInfoEx.Attrs``1(System.Reflection.MemberInfo)
  - EventStore.Rags.MemberInfoEx.HasAttr``1(System.Reflection.MemberInfo)
  langs:
  - csharp
  - vb
  name: MemberInfoEx
  nameWithType: MemberInfoEx
  fullName: EventStore.Rags.MemberInfoEx
  type: Class
  source:
    id: MemberInfoEx
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/Extensions.cs
    startLine: 10
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nProvides some reflection helpers in the form of extension methods for the MemberInfo type.\n"
  example: []
  syntax:
    content: public static class MemberInfoEx
    content.vb: Public Module MemberInfoEx
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EventStore.Rags.MemberInfoEx.HasAttr``1(System.Reflection.MemberInfo)
  commentId: M:EventStore.Rags.MemberInfoEx.HasAttr``1(System.Reflection.MemberInfo)
  id: HasAttr``1(System.Reflection.MemberInfo)
  isExtensionMethod: true
  parent: EventStore.Rags.MemberInfoEx
  langs:
  - csharp
  - vb
  name: HasAttr<T>(MemberInfo)
  nameWithType: MemberInfoEx.HasAttr<T>(MemberInfo)
  fullName: EventStore.Rags.MemberInfoEx.HasAttr<T>(System.Reflection.MemberInfo)
  type: Method
  source:
    id: HasAttr
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/Extensions.cs
    startLine: 19
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nReturns true if the given member has an attribute of the given type (including inherited types).\n"
  example: []
  syntax:
    content: public static bool HasAttr<T>(this MemberInfo info)
    parameters:
    - id: info
      type: System.Reflection.MemberInfo
      description: The member to test
    typeParameters:
    - id: T
      description: The type of attribute to test for (will return true for attributes that inherit from this type)
    return:
      type: System.Boolean
      description: true if a matching attribute was found, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasAttr(Of T)(info As MemberInfo) As Boolean
  overload: EventStore.Rags.MemberInfoEx.HasAttr*
  nameWithType.vb: MemberInfoEx.HasAttr(Of T)(MemberInfo)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Rags.MemberInfoEx.HasAttr(Of T)(System.Reflection.MemberInfo)
  name.vb: HasAttr(Of T)(MemberInfo)
- uid: EventStore.Rags.MemberInfoEx.Attr``1(System.Reflection.MemberInfo)
  commentId: M:EventStore.Rags.MemberInfoEx.Attr``1(System.Reflection.MemberInfo)
  id: Attr``1(System.Reflection.MemberInfo)
  isExtensionMethod: true
  parent: EventStore.Rags.MemberInfoEx
  langs:
  - csharp
  - vb
  name: Attr<T>(MemberInfo)
  nameWithType: MemberInfoEx.Attr<T>(MemberInfo)
  fullName: EventStore.Rags.MemberInfoEx.Attr<T>(System.Reflection.MemberInfo)
  type: Method
  source:
    id: Attr
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/Extensions.cs
    startLine: 33
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nGets the attribute of the given type or null if the member does not have this attribute defined.  The standard reflection helper GetCustomAttributes will\ngive you a new instance of the attribute every time you call it.  This helper caches it&apos;s results so if you ask for the same attibute twice you will actually\nget back the same attribute.  Note that the cache key is based off of the type T that you provide.  So asking for Attr() where T : BaseType> and then asking for Attr() where T : ConcreteType \nwill result in two different objects being returned.  If you ask for Attr() where T : BaseType and then Attr() where T :BaseType the caching will work and you&apos;ll get the same object back\nthe second time.\n"
  example: []
  syntax:
    content: public static T Attr<T>(this MemberInfo info)
    parameters:
    - id: info
      type: System.Reflection.MemberInfo
      description: The member to inspect
    typeParameters:
    - id: T
      description: The type of attribute to search for
    return:
      type: '{T}'
      description: The desired attribute or null if it is not present
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Attr(Of T)(info As MemberInfo) As T
  overload: EventStore.Rags.MemberInfoEx.Attr*
  nameWithType.vb: MemberInfoEx.Attr(Of T)(MemberInfo)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Rags.MemberInfoEx.Attr(Of T)(System.Reflection.MemberInfo)
  name.vb: Attr(Of T)(MemberInfo)
- uid: EventStore.Rags.MemberInfoEx.Attrs``1(System.Reflection.MemberInfo)
  commentId: M:EventStore.Rags.MemberInfoEx.Attrs``1(System.Reflection.MemberInfo)
  id: Attrs``1(System.Reflection.MemberInfo)
  isExtensionMethod: true
  parent: EventStore.Rags.MemberInfoEx
  langs:
  - csharp
  - vb
  name: Attrs<T>(MemberInfo)
  nameWithType: MemberInfoEx.Attrs<T>(MemberInfo)
  fullName: EventStore.Rags.MemberInfoEx.Attrs<T>(System.Reflection.MemberInfo)
  type: Method
  source:
    id: Attrs
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Rags/Extensions.cs
    startLine: 51
  assemblies:
  - EventStore.Rags
  namespace: EventStore.Rags
  summary: "\nGets the attributes of the given type.  The standard reflection helper GetCustomAttributes will give you new instances of the attributes every time you call it.  \nThis helper caches it&apos;s results so if you ask for the same attibutes twice you will actually get back the same attributes.  Note that the cache key is based off \nof the type T that you provide.  So asking for Attrs() where T : BaseType and then asking for Attrs() where T : ConcreteType\nwill result in two different sets of objects being returned.  If you ask for Attrs() where T : BaseType and then Attrs() where T : BaseType the caching will work and you&apos;ll get the\nsame results back the second time.\n"
  example: []
  syntax:
    content: public static List<T> Attrs<T>(this MemberInfo info)
    parameters:
    - id: info
      type: System.Reflection.MemberInfo
      description: The member to inspect
    typeParameters:
    - id: T
      description: The type of attribute to search for
    return:
      type: System.Collections.Generic.List{{T}}
      description: The list of attributes that you asked for
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Attrs(Of T)(info As MemberInfo) As List(Of T)
  overload: EventStore.Rags.MemberInfoEx.Attrs*
  nameWithType.vb: MemberInfoEx.Attrs(Of T)(MemberInfo)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Rags.MemberInfoEx.Attrs(Of T)(System.Reflection.MemberInfo)
  name.vb: Attrs(Of T)(MemberInfo)
references:
- uid: EventStore.Rags
  commentId: N:EventStore.Rags
  name: EventStore.Rags
  nameWithType: EventStore.Rags
  fullName: EventStore.Rags
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Rags.MemberInfoEx.HasAttr*
  commentId: Overload:EventStore.Rags.MemberInfoEx.HasAttr
  name: HasAttr
  nameWithType: MemberInfoEx.HasAttr
  fullName: EventStore.Rags.MemberInfoEx.HasAttr
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: EventStore.Rags.MemberInfoEx.Attr*
  commentId: Overload:EventStore.Rags.MemberInfoEx.Attr
  name: Attr
  nameWithType: MemberInfoEx.Attr
  fullName: EventStore.Rags.MemberInfoEx.Attr
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Rags.MemberInfoEx.Attrs*
  commentId: Overload:EventStore.Rags.MemberInfoEx.Attrs
  name: Attrs
  nameWithType: MemberInfoEx.Attrs
  fullName: EventStore.Rags.MemberInfoEx.Attrs
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic

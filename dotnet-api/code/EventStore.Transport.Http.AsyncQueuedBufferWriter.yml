### YamlMime:ManagedReference
items:
- uid: EventStore.Transport.Http.AsyncQueuedBufferWriter
  commentId: T:EventStore.Transport.Http.AsyncQueuedBufferWriter
  id: AsyncQueuedBufferWriter
  parent: EventStore.Transport.Http
  children:
  - EventStore.Transport.Http.AsyncQueuedBufferWriter.#ctor(Stream,Action)
  - EventStore.Transport.Http.AsyncQueuedBufferWriter.Append(System.Byte[],Action{Exception})
  - EventStore.Transport.Http.AsyncQueuedBufferWriter.AppendDispose(Action{Exception})
  - EventStore.Transport.Http.AsyncQueuedBufferWriter.Dispose
  langs:
  - csharp
  - vb
  name: AsyncQueuedBufferWriter
  nameWithType: AsyncQueuedBufferWriter
  fullName: EventStore.Transport.Http.AsyncQueuedBufferWriter
  type: Class
  source:
    remote:
      path: src/EventStore.Transport.Http/AsyncQueuedBufferWriter.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AsyncQueuedBufferWriter
    path: ../EventStore/src/EventStore.Transport.Http/AsyncQueuedBufferWriter.cs
    startLine: 11
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http
  summary: "\nManages a queue of buffers to send to output stream and \nsens them to the output stream as previous requests complete\n"
  example: []
  syntax:
    content: 'public class AsyncQueuedBufferWriter : IDisposable'
    content.vb: >-
      Public Class AsyncQueuedBufferWriter
          Inherits IDisposable
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Transport.Http.AsyncQueuedBufferWriter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Transport.Http.AsyncQueuedBufferWriter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Transport.Http.AsyncQueuedBufferWriter.#ctor(Stream,Action)
  commentId: M:EventStore.Transport.Http.AsyncQueuedBufferWriter.#ctor(Stream,Action)
  id: '#ctor(Stream,Action)'
  parent: EventStore.Transport.Http.AsyncQueuedBufferWriter
  langs:
  - csharp
  - vb
  name: AsyncQueuedBufferWriter(Stream, Action)
  nameWithType: AsyncQueuedBufferWriter.AsyncQueuedBufferWriter(Stream, Action)
  fullName: EventStore.Transport.Http.AsyncQueuedBufferWriter.AsyncQueuedBufferWriter(Stream, Action)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Transport.Http/AsyncQueuedBufferWriter.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Transport.Http/AsyncQueuedBufferWriter.cs
    startLine: 32
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http
  example: []
  syntax:
    content: public AsyncQueuedBufferWriter(Stream outputStream, Action onDispose)
    parameters:
    - id: outputStream
      type: Stream
      description: 'NOTE: outputStream is NOT auto-disposed.'
    - id: onDispose
      type: Action
      description: Use to dispose response streams and close connections.
    content.vb: Public Sub New(outputStream As Stream, onDispose As Action)
  overload: EventStore.Transport.Http.AsyncQueuedBufferWriter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Http.AsyncQueuedBufferWriter.Append(System.Byte[],Action{Exception})
  commentId: M:EventStore.Transport.Http.AsyncQueuedBufferWriter.Append(System.Byte[],Action{Exception})
  id: Append(System.Byte[],Action{Exception})
  parent: EventStore.Transport.Http.AsyncQueuedBufferWriter
  langs:
  - csharp
  - vb
  name: Append(Byte[], Action<Exception>)
  nameWithType: AsyncQueuedBufferWriter.Append(Byte[], Action<Exception>)
  fullName: EventStore.Transport.Http.AsyncQueuedBufferWriter.Append(System.Byte[], Action<Exception>)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Http/AsyncQueuedBufferWriter.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Append
    path: ../EventStore/src/EventStore.Transport.Http/AsyncQueuedBufferWriter.cs
    startLine: 37
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http
  syntax:
    content: public void Append(byte[] buffer, Action<Exception> onCompletion)
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: onCompletion
      type: Action{Exception}
    content.vb: Public Sub Append(buffer As Byte(), onCompletion As Action(Of Exception))
  overload: EventStore.Transport.Http.AsyncQueuedBufferWriter.Append*
  nameWithType.vb: AsyncQueuedBufferWriter.Append(Byte(), Action(Of Exception))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Http.AsyncQueuedBufferWriter.Append(System.Byte(), Action(Of Exception))
  name.vb: Append(Byte(), Action(Of Exception))
- uid: EventStore.Transport.Http.AsyncQueuedBufferWriter.AppendDispose(Action{Exception})
  commentId: M:EventStore.Transport.Http.AsyncQueuedBufferWriter.AppendDispose(Action{Exception})
  id: AppendDispose(Action{Exception})
  parent: EventStore.Transport.Http.AsyncQueuedBufferWriter
  langs:
  - csharp
  - vb
  name: AppendDispose(Action<Exception>)
  nameWithType: AsyncQueuedBufferWriter.AppendDispose(Action<Exception>)
  fullName: EventStore.Transport.Http.AsyncQueuedBufferWriter.AppendDispose(Action<Exception>)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Http/AsyncQueuedBufferWriter.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AppendDispose
    path: ../EventStore/src/EventStore.Transport.Http/AsyncQueuedBufferWriter.cs
    startLine: 49
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http
  summary: "\nSchedules auto-dispose when all previous writes are completed\n"
  example: []
  syntax:
    content: public void AppendDispose(Action<Exception> onCompletion)
    parameters:
    - id: onCompletion
      type: Action{Exception}
      description: onCompletion handler is called after the object has been disposed
    content.vb: Public Sub AppendDispose(onCompletion As Action(Of Exception))
  overload: EventStore.Transport.Http.AsyncQueuedBufferWriter.AppendDispose*
  nameWithType.vb: AsyncQueuedBufferWriter.AppendDispose(Action(Of Exception))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Http.AsyncQueuedBufferWriter.AppendDispose(Action(Of Exception))
  name.vb: AppendDispose(Action(Of Exception))
- uid: EventStore.Transport.Http.AsyncQueuedBufferWriter.Dispose
  commentId: M:EventStore.Transport.Http.AsyncQueuedBufferWriter.Dispose
  id: Dispose
  parent: EventStore.Transport.Http.AsyncQueuedBufferWriter
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: AsyncQueuedBufferWriter.Dispose()
  fullName: EventStore.Transport.Http.AsyncQueuedBufferWriter.Dispose()
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Http/AsyncQueuedBufferWriter.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Dispose
    path: ../EventStore/src/EventStore.Transport.Http/AsyncQueuedBufferWriter.cs
    startLine: 114
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: EventStore.Transport.Http.AsyncQueuedBufferWriter.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Transport.Http
  commentId: N:EventStore.Transport.Http
  name: EventStore.Transport.Http
  nameWithType: EventStore.Transport.Http
  fullName: EventStore.Transport.Http
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Http.AsyncQueuedBufferWriter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<AsyncQueuedBufferWriter>()
  nameWithType: ProtobufExtensions.Serialize<AsyncQueuedBufferWriter>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Http.AsyncQueuedBufferWriter>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of AsyncQueuedBufferWriter)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Http.AsyncQueuedBufferWriter)()
  name.vb: Serialize(Of AsyncQueuedBufferWriter)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<AsyncQueuedBufferWriter>
    nameWithType: ProtobufExtensions.Serialize<AsyncQueuedBufferWriter>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Http.AsyncQueuedBufferWriter>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of AsyncQueuedBufferWriter)
    nameWithType: ProtobufExtensions.Serialize(Of AsyncQueuedBufferWriter)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Http.AsyncQueuedBufferWriter)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Http.AsyncQueuedBufferWriter.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<AsyncQueuedBufferWriter>()
  nameWithType: ProtobufExtensions.SerializeToArray<AsyncQueuedBufferWriter>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Http.AsyncQueuedBufferWriter>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of AsyncQueuedBufferWriter)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Http.AsyncQueuedBufferWriter)()
  name.vb: SerializeToArray(Of AsyncQueuedBufferWriter)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<AsyncQueuedBufferWriter>
    nameWithType: ProtobufExtensions.SerializeToArray<AsyncQueuedBufferWriter>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Http.AsyncQueuedBufferWriter>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of AsyncQueuedBufferWriter)
    nameWithType: ProtobufExtensions.SerializeToArray(Of AsyncQueuedBufferWriter)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Http.AsyncQueuedBufferWriter)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Transport.Http.AsyncQueuedBufferWriter.#ctor*
  commentId: Overload:EventStore.Transport.Http.AsyncQueuedBufferWriter.#ctor
  name: AsyncQueuedBufferWriter
  nameWithType: AsyncQueuedBufferWriter.AsyncQueuedBufferWriter
  fullName: EventStore.Transport.Http.AsyncQueuedBufferWriter.AsyncQueuedBufferWriter
- uid: Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: Stream
- uid: Action
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: Action
- uid: EventStore.Transport.Http.AsyncQueuedBufferWriter.Append*
  commentId: Overload:EventStore.Transport.Http.AsyncQueuedBufferWriter.Append
  name: Append
  nameWithType: AsyncQueuedBufferWriter.Append
  fullName: EventStore.Transport.Http.AsyncQueuedBufferWriter.Append
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Action{Exception}
  commentId: '!:Action{Exception}'
  definition: Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: Action<Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: Action(Of Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Http.AsyncQueuedBufferWriter.AppendDispose*
  commentId: Overload:EventStore.Transport.Http.AsyncQueuedBufferWriter.AppendDispose
  name: AppendDispose
  nameWithType: AsyncQueuedBufferWriter.AppendDispose
  fullName: EventStore.Transport.Http.AsyncQueuedBufferWriter.AppendDispose
- uid: EventStore.Transport.Http.AsyncQueuedBufferWriter.Dispose*
  commentId: Overload:EventStore.Transport.Http.AsyncQueuedBufferWriter.Dispose
  name: Dispose
  nameWithType: AsyncQueuedBufferWriter.Dispose
  fullName: EventStore.Transport.Http.AsyncQueuedBufferWriter.Dispose

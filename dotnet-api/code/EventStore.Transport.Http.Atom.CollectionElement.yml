### YamlMime:ManagedReference
items:
- uid: EventStore.Transport.Http.Atom.CollectionElement
  commentId: T:EventStore.Transport.Http.Atom.CollectionElement
  id: CollectionElement
  parent: EventStore.Transport.Http.Atom
  children:
  - EventStore.Transport.Http.Atom.CollectionElement.#ctor
  - EventStore.Transport.Http.Atom.CollectionElement.Accepts
  - EventStore.Transport.Http.Atom.CollectionElement.AddAcceptType(System.String)
  - EventStore.Transport.Http.Atom.CollectionElement.GetSchema
  - EventStore.Transport.Http.Atom.CollectionElement.ReadXml(XmlReader)
  - EventStore.Transport.Http.Atom.CollectionElement.SetTitle(System.String)
  - EventStore.Transport.Http.Atom.CollectionElement.SetUri(System.String)
  - EventStore.Transport.Http.Atom.CollectionElement.Title
  - EventStore.Transport.Http.Atom.CollectionElement.Uri
  - EventStore.Transport.Http.Atom.CollectionElement.WriteXml(XmlWriter)
  langs:
  - csharp
  - vb
  name: CollectionElement
  nameWithType: CollectionElement
  fullName: EventStore.Transport.Http.Atom.CollectionElement
  type: Class
  source:
    remote:
      path: src/EventStore.Transport.Http/Atom/ServiceDocument.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: CollectionElement
    path: ../EventStore/src/EventStore.Transport.Http/Atom/ServiceDocument.cs
    startLine: 93
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Atom
  syntax:
    content: 'public class CollectionElement : IXmlSerializable'
    content.vb: >-
      Public Class CollectionElement
          Inherits IXmlSerializable
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Transport.Http.Atom.CollectionElement.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Transport.Http.Atom.CollectionElement.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Transport.Http.Atom.CollectionElement.Title
  commentId: P:EventStore.Transport.Http.Atom.CollectionElement.Title
  id: Title
  parent: EventStore.Transport.Http.Atom.CollectionElement
  langs:
  - csharp
  - vb
  name: Title
  nameWithType: CollectionElement.Title
  fullName: EventStore.Transport.Http.Atom.CollectionElement.Title
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Http/Atom/ServiceDocument.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Title
    path: ../EventStore/src/EventStore.Transport.Http/Atom/ServiceDocument.cs
    startLine: 95
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Atom
  syntax:
    content: public string Title { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Title As String
  overload: EventStore.Transport.Http.Atom.CollectionElement.Title*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Http.Atom.CollectionElement.Uri
  commentId: P:EventStore.Transport.Http.Atom.CollectionElement.Uri
  id: Uri
  parent: EventStore.Transport.Http.Atom.CollectionElement
  langs:
  - csharp
  - vb
  name: Uri
  nameWithType: CollectionElement.Uri
  fullName: EventStore.Transport.Http.Atom.CollectionElement.Uri
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Http/Atom/ServiceDocument.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Uri
    path: ../EventStore/src/EventStore.Transport.Http/Atom/ServiceDocument.cs
    startLine: 96
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Atom
  syntax:
    content: public string Uri { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Uri As String
  overload: EventStore.Transport.Http.Atom.CollectionElement.Uri*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Http.Atom.CollectionElement.Accepts
  commentId: P:EventStore.Transport.Http.Atom.CollectionElement.Accepts
  id: Accepts
  parent: EventStore.Transport.Http.Atom.CollectionElement
  langs:
  - csharp
  - vb
  name: Accepts
  nameWithType: CollectionElement.Accepts
  fullName: EventStore.Transport.Http.Atom.CollectionElement.Accepts
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Http/Atom/ServiceDocument.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Accepts
    path: ../EventStore/src/EventStore.Transport.Http/Atom/ServiceDocument.cs
    startLine: 98
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Atom
  syntax:
    content: public List<AcceptElement> Accepts { get; set; }
    parameters: []
    return:
      type: List{EventStore.Transport.Http.Atom.AcceptElement}
    content.vb: Public Property Accepts As List(Of AcceptElement)
  overload: EventStore.Transport.Http.Atom.CollectionElement.Accepts*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Http.Atom.CollectionElement.#ctor
  commentId: M:EventStore.Transport.Http.Atom.CollectionElement.#ctor
  id: '#ctor'
  parent: EventStore.Transport.Http.Atom.CollectionElement
  langs:
  - csharp
  - vb
  name: CollectionElement()
  nameWithType: CollectionElement.CollectionElement()
  fullName: EventStore.Transport.Http.Atom.CollectionElement.CollectionElement()
  type: Constructor
  source:
    remote:
      path: src/EventStore.Transport.Http/Atom/ServiceDocument.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Transport.Http/Atom/ServiceDocument.cs
    startLine: 100
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Atom
  syntax:
    content: public CollectionElement()
    content.vb: Public Sub New
  overload: EventStore.Transport.Http.Atom.CollectionElement.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Http.Atom.CollectionElement.SetTitle(System.String)
  commentId: M:EventStore.Transport.Http.Atom.CollectionElement.SetTitle(System.String)
  id: SetTitle(System.String)
  parent: EventStore.Transport.Http.Atom.CollectionElement
  langs:
  - csharp
  - vb
  name: SetTitle(String)
  nameWithType: CollectionElement.SetTitle(String)
  fullName: EventStore.Transport.Http.Atom.CollectionElement.SetTitle(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Http/Atom/ServiceDocument.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SetTitle
    path: ../EventStore/src/EventStore.Transport.Http/Atom/ServiceDocument.cs
    startLine: 105
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Atom
  syntax:
    content: public void SetTitle(string title)
    parameters:
    - id: title
      type: System.String
    content.vb: Public Sub SetTitle(title As String)
  overload: EventStore.Transport.Http.Atom.CollectionElement.SetTitle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Http.Atom.CollectionElement.SetUri(System.String)
  commentId: M:EventStore.Transport.Http.Atom.CollectionElement.SetUri(System.String)
  id: SetUri(System.String)
  parent: EventStore.Transport.Http.Atom.CollectionElement
  langs:
  - csharp
  - vb
  name: SetUri(String)
  nameWithType: CollectionElement.SetUri(String)
  fullName: EventStore.Transport.Http.Atom.CollectionElement.SetUri(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Http/Atom/ServiceDocument.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SetUri
    path: ../EventStore/src/EventStore.Transport.Http/Atom/ServiceDocument.cs
    startLine: 111
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Atom
  syntax:
    content: public void SetUri(string uri)
    parameters:
    - id: uri
      type: System.String
    content.vb: Public Sub SetUri(uri As String)
  overload: EventStore.Transport.Http.Atom.CollectionElement.SetUri*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Http.Atom.CollectionElement.AddAcceptType(System.String)
  commentId: M:EventStore.Transport.Http.Atom.CollectionElement.AddAcceptType(System.String)
  id: AddAcceptType(System.String)
  parent: EventStore.Transport.Http.Atom.CollectionElement
  langs:
  - csharp
  - vb
  name: AddAcceptType(String)
  nameWithType: CollectionElement.AddAcceptType(String)
  fullName: EventStore.Transport.Http.Atom.CollectionElement.AddAcceptType(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Http/Atom/ServiceDocument.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: AddAcceptType
    path: ../EventStore/src/EventStore.Transport.Http/Atom/ServiceDocument.cs
    startLine: 117
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Atom
  syntax:
    content: public void AddAcceptType(string type)
    parameters:
    - id: type
      type: System.String
    content.vb: Public Sub AddAcceptType(type As String)
  overload: EventStore.Transport.Http.Atom.CollectionElement.AddAcceptType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Http.Atom.CollectionElement.GetSchema
  commentId: M:EventStore.Transport.Http.Atom.CollectionElement.GetSchema
  id: GetSchema
  parent: EventStore.Transport.Http.Atom.CollectionElement
  langs:
  - csharp
  - vb
  name: GetSchema()
  nameWithType: CollectionElement.GetSchema()
  fullName: EventStore.Transport.Http.Atom.CollectionElement.GetSchema()
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Http/Atom/ServiceDocument.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: GetSchema
    path: ../EventStore/src/EventStore.Transport.Http/Atom/ServiceDocument.cs
    startLine: 123
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Atom
  syntax:
    content: public XmlSchema GetSchema()
    return:
      type: XmlSchema
    content.vb: Public Function GetSchema As XmlSchema
  overload: EventStore.Transport.Http.Atom.CollectionElement.GetSchema*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Http.Atom.CollectionElement.ReadXml(XmlReader)
  commentId: M:EventStore.Transport.Http.Atom.CollectionElement.ReadXml(XmlReader)
  id: ReadXml(XmlReader)
  parent: EventStore.Transport.Http.Atom.CollectionElement
  langs:
  - csharp
  - vb
  name: ReadXml(XmlReader)
  nameWithType: CollectionElement.ReadXml(XmlReader)
  fullName: EventStore.Transport.Http.Atom.CollectionElement.ReadXml(XmlReader)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Http/Atom/ServiceDocument.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ReadXml
    path: ../EventStore/src/EventStore.Transport.Http/Atom/ServiceDocument.cs
    startLine: 128
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Atom
  syntax:
    content: public void ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: XmlReader
    content.vb: Public Sub ReadXml(reader As XmlReader)
  overload: EventStore.Transport.Http.Atom.CollectionElement.ReadXml*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Http.Atom.CollectionElement.WriteXml(XmlWriter)
  commentId: M:EventStore.Transport.Http.Atom.CollectionElement.WriteXml(XmlWriter)
  id: WriteXml(XmlWriter)
  parent: EventStore.Transport.Http.Atom.CollectionElement
  langs:
  - csharp
  - vb
  name: WriteXml(XmlWriter)
  nameWithType: CollectionElement.WriteXml(XmlWriter)
  fullName: EventStore.Transport.Http.Atom.CollectionElement.WriteXml(XmlWriter)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Http/Atom/ServiceDocument.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: WriteXml
    path: ../EventStore/src/EventStore.Transport.Http/Atom/ServiceDocument.cs
    startLine: 133
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Atom
  syntax:
    content: public void WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: XmlWriter
    content.vb: Public Sub WriteXml(writer As XmlWriter)
  overload: EventStore.Transport.Http.Atom.CollectionElement.WriteXml*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Transport.Http.Atom
  commentId: N:EventStore.Transport.Http.Atom
  name: EventStore.Transport.Http.Atom
  nameWithType: EventStore.Transport.Http.Atom
  fullName: EventStore.Transport.Http.Atom
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Http.Atom.CollectionElement.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<CollectionElement>()
  nameWithType: ProtobufExtensions.Serialize<CollectionElement>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Http.Atom.CollectionElement>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of CollectionElement)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Http.Atom.CollectionElement)()
  name.vb: Serialize(Of CollectionElement)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<CollectionElement>
    nameWithType: ProtobufExtensions.Serialize<CollectionElement>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Http.Atom.CollectionElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of CollectionElement)
    nameWithType: ProtobufExtensions.Serialize(Of CollectionElement)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Http.Atom.CollectionElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Http.Atom.CollectionElement.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<CollectionElement>()
  nameWithType: ProtobufExtensions.SerializeToArray<CollectionElement>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Http.Atom.CollectionElement>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of CollectionElement)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Http.Atom.CollectionElement)()
  name.vb: SerializeToArray(Of CollectionElement)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<CollectionElement>
    nameWithType: ProtobufExtensions.SerializeToArray<CollectionElement>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Http.Atom.CollectionElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of CollectionElement)
    nameWithType: ProtobufExtensions.SerializeToArray(Of CollectionElement)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Http.Atom.CollectionElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Transport.Http.Atom.CollectionElement.Title*
  commentId: Overload:EventStore.Transport.Http.Atom.CollectionElement.Title
  name: Title
  nameWithType: CollectionElement.Title
  fullName: EventStore.Transport.Http.Atom.CollectionElement.Title
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Transport.Http.Atom.CollectionElement.Uri*
  commentId: Overload:EventStore.Transport.Http.Atom.CollectionElement.Uri
  name: Uri
  nameWithType: CollectionElement.Uri
  fullName: EventStore.Transport.Http.Atom.CollectionElement.Uri
- uid: EventStore.Transport.Http.Atom.CollectionElement.Accepts*
  commentId: Overload:EventStore.Transport.Http.Atom.CollectionElement.Accepts
  name: Accepts
  nameWithType: CollectionElement.Accepts
  fullName: EventStore.Transport.Http.Atom.CollectionElement.Accepts
- uid: List{EventStore.Transport.Http.Atom.AcceptElement}
  commentId: '!:List{EventStore.Transport.Http.Atom.AcceptElement}'
  definition: List`1
  name: List<AcceptElement>
  nameWithType: List<AcceptElement>
  fullName: List<EventStore.Transport.Http.Atom.AcceptElement>
  nameWithType.vb: List(Of AcceptElement)
  fullName.vb: List(Of EventStore.Transport.Http.Atom.AcceptElement)
  name.vb: List(Of AcceptElement)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.Atom.AcceptElement
    name: AcceptElement
    nameWithType: AcceptElement
    fullName: EventStore.Transport.Http.Atom.AcceptElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.Atom.AcceptElement
    name: AcceptElement
    nameWithType: AcceptElement
    fullName: EventStore.Transport.Http.Atom.AcceptElement
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Http.Atom.CollectionElement.#ctor*
  commentId: Overload:EventStore.Transport.Http.Atom.CollectionElement.#ctor
  name: CollectionElement
  nameWithType: CollectionElement.CollectionElement
  fullName: EventStore.Transport.Http.Atom.CollectionElement.CollectionElement
- uid: EventStore.Transport.Http.Atom.CollectionElement.SetTitle*
  commentId: Overload:EventStore.Transport.Http.Atom.CollectionElement.SetTitle
  name: SetTitle
  nameWithType: CollectionElement.SetTitle
  fullName: EventStore.Transport.Http.Atom.CollectionElement.SetTitle
- uid: EventStore.Transport.Http.Atom.CollectionElement.SetUri*
  commentId: Overload:EventStore.Transport.Http.Atom.CollectionElement.SetUri
  name: SetUri
  nameWithType: CollectionElement.SetUri
  fullName: EventStore.Transport.Http.Atom.CollectionElement.SetUri
- uid: EventStore.Transport.Http.Atom.CollectionElement.AddAcceptType*
  commentId: Overload:EventStore.Transport.Http.Atom.CollectionElement.AddAcceptType
  name: AddAcceptType
  nameWithType: CollectionElement.AddAcceptType
  fullName: EventStore.Transport.Http.Atom.CollectionElement.AddAcceptType
- uid: EventStore.Transport.Http.Atom.CollectionElement.GetSchema*
  commentId: Overload:EventStore.Transport.Http.Atom.CollectionElement.GetSchema
  name: GetSchema
  nameWithType: CollectionElement.GetSchema
  fullName: EventStore.Transport.Http.Atom.CollectionElement.GetSchema
- uid: XmlSchema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: XmlSchema
- uid: EventStore.Transport.Http.Atom.CollectionElement.ReadXml*
  commentId: Overload:EventStore.Transport.Http.Atom.CollectionElement.ReadXml
  name: ReadXml
  nameWithType: CollectionElement.ReadXml
  fullName: EventStore.Transport.Http.Atom.CollectionElement.ReadXml
- uid: XmlReader
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: XmlReader
- uid: EventStore.Transport.Http.Atom.CollectionElement.WriteXml*
  commentId: Overload:EventStore.Transport.Http.Atom.CollectionElement.WriteXml
  name: WriteXml
  nameWithType: CollectionElement.WriteXml
  fullName: EventStore.Transport.Http.Atom.CollectionElement.WriteXml
- uid: XmlWriter
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: XmlWriter

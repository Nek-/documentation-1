### YamlMime:ManagedReference
items:
- uid: EventStore.Transport.Http.Client.HttpAsyncClient
  commentId: T:EventStore.Transport.Http.Client.HttpAsyncClient
  id: HttpAsyncClient
  parent: EventStore.Transport.Http.Client
  children:
  - EventStore.Transport.Http.Client.HttpAsyncClient.#ctor(System.TimeSpan)
  - EventStore.Transport.Http.Client.HttpAsyncClient.Delete(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  - EventStore.Transport.Http.Client.HttpAsyncClient.Dispose
  - EventStore.Transport.Http.Client.HttpAsyncClient.Get(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  - EventStore.Transport.Http.Client.HttpAsyncClient.Get(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  - EventStore.Transport.Http.Client.HttpAsyncClient.Post(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  - EventStore.Transport.Http.Client.HttpAsyncClient.Post(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  - EventStore.Transport.Http.Client.HttpAsyncClient.Put(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  langs:
  - csharp
  - vb
  name: HttpAsyncClient
  nameWithType: HttpAsyncClient
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient
  type: Class
  source:
    id: HttpAsyncClient
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Http/Client/HttpAsyncClient.cs
    startLine: 10
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Client
  syntax:
    content: 'public class HttpAsyncClient : IHttpClient'
    content.vb: >-
      Public Class HttpAsyncClient
          Implements IHttpClient
  inheritance:
  - System.Object
  implements:
  - EventStore.Transport.Http.Client.IHttpClient
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Transport.Http.Client.HttpAsyncClient.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Transport.Http.Client.HttpAsyncClient.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.#ctor(System.TimeSpan)
  commentId: M:EventStore.Transport.Http.Client.HttpAsyncClient.#ctor(System.TimeSpan)
  id: '#ctor(System.TimeSpan)'
  parent: EventStore.Transport.Http.Client.HttpAsyncClient
  langs:
  - csharp
  - vb
  name: HttpAsyncClient(TimeSpan)
  nameWithType: HttpAsyncClient.HttpAsyncClient(TimeSpan)
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.HttpAsyncClient(System.TimeSpan)
  type: Constructor
  source:
    id: .ctor
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Http/Client/HttpAsyncClient.cs
    startLine: 18
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Client
  syntax:
    content: public HttpAsyncClient(TimeSpan timeout)
    parameters:
    - id: timeout
      type: System.TimeSpan
    content.vb: Public Sub New(timeout As TimeSpan)
  overload: EventStore.Transport.Http.Client.HttpAsyncClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.Get(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  commentId: M:EventStore.Transport.Http.Client.HttpAsyncClient.Get(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  id: Get(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  parent: EventStore.Transport.Http.Client.HttpAsyncClient
  langs:
  - csharp
  - vb
  name: Get(String, Action<HttpResponse>, Action<Exception>)
  nameWithType: HttpAsyncClient.Get(String, Action<HttpResponse>, Action<Exception>)
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.Get(System.String, System.Action<EventStore.Transport.Http.HttpResponse>, System.Action<System.Exception>)
  type: Method
  source:
    id: Get
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Http/Client/HttpAsyncClient.cs
    startLine: 23
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Client
  syntax:
    content: public void Get(string url, Action<HttpResponse> onSuccess, Action<Exception> onException)
    parameters:
    - id: url
      type: System.String
    - id: onSuccess
      type: System.Action{EventStore.Transport.Http.HttpResponse}
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Public Sub Get(url As String, onSuccess As Action(Of HttpResponse), onException As Action(Of Exception))
  overload: EventStore.Transport.Http.Client.HttpAsyncClient.Get*
  implements:
  - EventStore.Transport.Http.Client.IHttpClient.Get(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  nameWithType.vb: HttpAsyncClient.Get(String, Action(Of HttpResponse), Action(Of Exception))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Http.Client.HttpAsyncClient.Get(System.String, System.Action(Of EventStore.Transport.Http.HttpResponse), System.Action(Of System.Exception))
  name.vb: Get(String, Action(Of HttpResponse), Action(Of Exception))
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.Get(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  commentId: M:EventStore.Transport.Http.Client.HttpAsyncClient.Get(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  id: Get(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  parent: EventStore.Transport.Http.Client.HttpAsyncClient
  langs:
  - csharp
  - vb
  name: Get(String, IEnumerable<KeyValuePair<String, String>>, Action<HttpResponse>, Action<Exception>)
  nameWithType: HttpAsyncClient.Get(String, IEnumerable<KeyValuePair<String, String>>, Action<HttpResponse>, Action<Exception>)
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.Get(System.String, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>, System.Action<EventStore.Transport.Http.HttpResponse>, System.Action<System.Exception>)
  type: Method
  source:
    id: Get
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Http/Client/HttpAsyncClient.cs
    startLine: 27
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Client
  syntax:
    content: public void Get(string url, IEnumerable<KeyValuePair<string, string>> headers, Action<HttpResponse> onSuccess, Action<Exception> onException)
    parameters:
    - id: url
      type: System.String
    - id: headers
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
    - id: onSuccess
      type: System.Action{EventStore.Transport.Http.HttpResponse}
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Public Sub Get(url As String, headers As IEnumerable(Of KeyValuePair(Of String, String)), onSuccess As Action(Of HttpResponse), onException As Action(Of Exception))
  overload: EventStore.Transport.Http.Client.HttpAsyncClient.Get*
  nameWithType.vb: HttpAsyncClient.Get(String, IEnumerable(Of KeyValuePair(Of String, String)), Action(Of HttpResponse), Action(Of Exception))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Http.Client.HttpAsyncClient.Get(System.String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)), System.Action(Of EventStore.Transport.Http.HttpResponse), System.Action(Of System.Exception))
  name.vb: Get(String, IEnumerable(Of KeyValuePair(Of String, String)), Action(Of HttpResponse), Action(Of Exception))
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.Post(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  commentId: M:EventStore.Transport.Http.Client.HttpAsyncClient.Post(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  id: Post(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  parent: EventStore.Transport.Http.Client.HttpAsyncClient
  langs:
  - csharp
  - vb
  name: Post(String, String, String, Action<HttpResponse>, Action<Exception>)
  nameWithType: HttpAsyncClient.Post(String, String, String, Action<HttpResponse>, Action<Exception>)
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.Post(System.String, System.String, System.String, System.Action<EventStore.Transport.Http.HttpResponse>, System.Action<System.Exception>)
  type: Method
  source:
    id: Post
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Http/Client/HttpAsyncClient.cs
    startLine: 36
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Client
  syntax:
    content: public void Post(string url, string body, string contentType, Action<HttpResponse> onSuccess, Action<Exception> onException)
    parameters:
    - id: url
      type: System.String
    - id: body
      type: System.String
    - id: contentType
      type: System.String
    - id: onSuccess
      type: System.Action{EventStore.Transport.Http.HttpResponse}
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Public Sub Post(url As String, body As String, contentType As String, onSuccess As Action(Of HttpResponse), onException As Action(Of Exception))
  overload: EventStore.Transport.Http.Client.HttpAsyncClient.Post*
  implements:
  - EventStore.Transport.Http.Client.IHttpClient.Post(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  nameWithType.vb: HttpAsyncClient.Post(String, String, String, Action(Of HttpResponse), Action(Of Exception))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Http.Client.HttpAsyncClient.Post(System.String, System.String, System.String, System.Action(Of EventStore.Transport.Http.HttpResponse), System.Action(Of System.Exception))
  name.vb: Post(String, String, String, Action(Of HttpResponse), Action(Of Exception))
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.Post(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  commentId: M:EventStore.Transport.Http.Client.HttpAsyncClient.Post(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  id: Post(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  parent: EventStore.Transport.Http.Client.HttpAsyncClient
  langs:
  - csharp
  - vb
  name: Post(String, String, String, IEnumerable<KeyValuePair<String, String>>, Action<HttpResponse>, Action<Exception>)
  nameWithType: HttpAsyncClient.Post(String, String, String, IEnumerable<KeyValuePair<String, String>>, Action<HttpResponse>, Action<Exception>)
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.Post(System.String, System.String, System.String, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>, System.Action<EventStore.Transport.Http.HttpResponse>, System.Action<System.Exception>)
  type: Method
  source:
    id: Post
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Http/Client/HttpAsyncClient.cs
    startLine: 41
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Client
  syntax:
    content: public void Post(string url, string body, string contentType, IEnumerable<KeyValuePair<string, string>> headers, Action<HttpResponse> onSuccess, Action<Exception> onException)
    parameters:
    - id: url
      type: System.String
    - id: body
      type: System.String
    - id: contentType
      type: System.String
    - id: headers
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
    - id: onSuccess
      type: System.Action{EventStore.Transport.Http.HttpResponse}
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Public Sub Post(url As String, body As String, contentType As String, headers As IEnumerable(Of KeyValuePair(Of String, String)), onSuccess As Action(Of HttpResponse), onException As Action(Of Exception))
  overload: EventStore.Transport.Http.Client.HttpAsyncClient.Post*
  nameWithType.vb: HttpAsyncClient.Post(String, String, String, IEnumerable(Of KeyValuePair(Of String, String)), Action(Of HttpResponse), Action(Of Exception))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Http.Client.HttpAsyncClient.Post(System.String, System.String, System.String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)), System.Action(Of EventStore.Transport.Http.HttpResponse), System.Action(Of System.Exception))
  name.vb: Post(String, String, String, IEnumerable(Of KeyValuePair(Of String, String)), Action(Of HttpResponse), Action(Of Exception))
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.Delete(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  commentId: M:EventStore.Transport.Http.Client.HttpAsyncClient.Delete(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  id: Delete(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  parent: EventStore.Transport.Http.Client.HttpAsyncClient
  langs:
  - csharp
  - vb
  name: Delete(String, Action<HttpResponse>, Action<Exception>)
  nameWithType: HttpAsyncClient.Delete(String, Action<HttpResponse>, Action<Exception>)
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.Delete(System.String, System.Action<EventStore.Transport.Http.HttpResponse>, System.Action<System.Exception>)
  type: Method
  source:
    id: Delete
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Http/Client/HttpAsyncClient.cs
    startLine: 52
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Client
  syntax:
    content: public void Delete(string url, Action<HttpResponse> onSuccess, Action<Exception> onException)
    parameters:
    - id: url
      type: System.String
    - id: onSuccess
      type: System.Action{EventStore.Transport.Http.HttpResponse}
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Public Sub Delete(url As String, onSuccess As Action(Of HttpResponse), onException As Action(Of Exception))
  overload: EventStore.Transport.Http.Client.HttpAsyncClient.Delete*
  implements:
  - EventStore.Transport.Http.Client.IHttpClient.Delete(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  nameWithType.vb: HttpAsyncClient.Delete(String, Action(Of HttpResponse), Action(Of Exception))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Http.Client.HttpAsyncClient.Delete(System.String, System.Action(Of EventStore.Transport.Http.HttpResponse), System.Action(Of System.Exception))
  name.vb: Delete(String, Action(Of HttpResponse), Action(Of Exception))
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.Put(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  commentId: M:EventStore.Transport.Http.Client.HttpAsyncClient.Put(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  id: Put(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  parent: EventStore.Transport.Http.Client.HttpAsyncClient
  langs:
  - csharp
  - vb
  name: Put(String, String, String, Action<HttpResponse>, Action<Exception>)
  nameWithType: HttpAsyncClient.Put(String, String, String, Action<HttpResponse>, Action<Exception>)
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.Put(System.String, System.String, System.String, System.Action<EventStore.Transport.Http.HttpResponse>, System.Action<System.Exception>)
  type: Method
  source:
    id: Put
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Http/Client/HttpAsyncClient.cs
    startLine: 60
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Client
  syntax:
    content: public void Put(string url, string body, string contentType, Action<HttpResponse> onSuccess, Action<Exception> onException)
    parameters:
    - id: url
      type: System.String
    - id: body
      type: System.String
    - id: contentType
      type: System.String
    - id: onSuccess
      type: System.Action{EventStore.Transport.Http.HttpResponse}
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Public Sub Put(url As String, body As String, contentType As String, onSuccess As Action(Of HttpResponse), onException As Action(Of Exception))
  overload: EventStore.Transport.Http.Client.HttpAsyncClient.Put*
  implements:
  - EventStore.Transport.Http.Client.IHttpClient.Put(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  nameWithType.vb: HttpAsyncClient.Put(String, String, String, Action(Of HttpResponse), Action(Of Exception))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Http.Client.HttpAsyncClient.Put(System.String, System.String, System.String, System.Action(Of EventStore.Transport.Http.HttpResponse), System.Action(Of System.Exception))
  name.vb: Put(String, String, String, Action(Of HttpResponse), Action(Of Exception))
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.Dispose
  commentId: M:EventStore.Transport.Http.Client.HttpAsyncClient.Dispose
  id: Dispose
  parent: EventStore.Transport.Http.Client.HttpAsyncClient
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: HttpAsyncClient.Dispose()
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.Dispose()
  type: Method
  source:
    id: Dispose
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Http/Client/HttpAsyncClient.cs
    startLine: 71
  assemblies:
  - EventStore.Transport.Http
  namespace: EventStore.Transport.Http.Client
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: EventStore.Transport.Http.Client.HttpAsyncClient.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EventStore.Transport.Http.Client
  commentId: N:EventStore.Transport.Http.Client
  name: EventStore.Transport.Http.Client
  nameWithType: EventStore.Transport.Http.Client
  fullName: EventStore.Transport.Http.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Transport.Http.Client.IHttpClient
  commentId: T:EventStore.Transport.Http.Client.IHttpClient
  parent: EventStore.Transport.Http.Client
  name: IHttpClient
  nameWithType: IHttpClient
  fullName: EventStore.Transport.Http.Client.IHttpClient
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<HttpAsyncClient>()
  nameWithType: ProtobufExtensions.Serialize<HttpAsyncClient>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Http.Client.HttpAsyncClient>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of HttpAsyncClient)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Http.Client.HttpAsyncClient)()
  name.vb: Serialize(Of HttpAsyncClient)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<HttpAsyncClient>
    nameWithType: ProtobufExtensions.Serialize<HttpAsyncClient>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Http.Client.HttpAsyncClient>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of HttpAsyncClient)
    nameWithType: ProtobufExtensions.Serialize(Of HttpAsyncClient)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Http.Client.HttpAsyncClient)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<HttpAsyncClient>()
  nameWithType: ProtobufExtensions.SerializeToArray<HttpAsyncClient>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Http.Client.HttpAsyncClient>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of HttpAsyncClient)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Http.Client.HttpAsyncClient)()
  name.vb: SerializeToArray(Of HttpAsyncClient)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<HttpAsyncClient>
    nameWithType: ProtobufExtensions.SerializeToArray<HttpAsyncClient>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Http.Client.HttpAsyncClient>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of HttpAsyncClient)
    nameWithType: ProtobufExtensions.SerializeToArray(Of HttpAsyncClient)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Http.Client.HttpAsyncClient)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.#ctor*
  commentId: Overload:EventStore.Transport.Http.Client.HttpAsyncClient.#ctor
  name: HttpAsyncClient
  nameWithType: HttpAsyncClient.HttpAsyncClient
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.HttpAsyncClient
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.Get*
  commentId: Overload:EventStore.Transport.Http.Client.HttpAsyncClient.Get
  name: Get
  nameWithType: HttpAsyncClient.Get
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.Get
- uid: EventStore.Transport.Http.Client.IHttpClient.Get(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  commentId: M:EventStore.Transport.Http.Client.IHttpClient.Get(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  parent: EventStore.Transport.Http.Client.IHttpClient
  isExternal: true
  name: Get(String, Action<HttpResponse>, Action<Exception>)
  nameWithType: IHttpClient.Get(String, Action<HttpResponse>, Action<Exception>)
  fullName: EventStore.Transport.Http.Client.IHttpClient.Get(System.String, System.Action<EventStore.Transport.Http.HttpResponse>, System.Action<System.Exception>)
  nameWithType.vb: IHttpClient.Get(String, Action(Of HttpResponse), Action(Of Exception))
  fullName.vb: EventStore.Transport.Http.Client.IHttpClient.Get(System.String, System.Action(Of EventStore.Transport.Http.HttpResponse), System.Action(Of System.Exception))
  name.vb: Get(String, Action(Of HttpResponse), Action(Of Exception))
  spec.csharp:
  - uid: EventStore.Transport.Http.Client.IHttpClient.Get(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
    name: Get
    nameWithType: IHttpClient.Get
    fullName: EventStore.Transport.Http.Client.IHttpClient.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.Transport.Http.HttpResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Http.Client.IHttpClient.Get(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
    name: Get
    nameWithType: IHttpClient.Get
    fullName: EventStore.Transport.Http.Client.IHttpClient.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.Transport.Http.HttpResponse
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Action{EventStore.Transport.Http.HttpResponse}
  commentId: T:System.Action{EventStore.Transport.Http.HttpResponse}
  parent: System
  definition: System.Action`1
  name: Action<HttpResponse>
  nameWithType: Action<HttpResponse>
  fullName: System.Action<EventStore.Transport.Http.HttpResponse>
  nameWithType.vb: Action(Of HttpResponse)
  fullName.vb: System.Action(Of EventStore.Transport.Http.HttpResponse)
  name.vb: Action(Of HttpResponse)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.Transport.Http.HttpResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.Transport.Http.HttpResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, String>>
  nameWithType: IEnumerable<KeyValuePair<String, String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, String))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerable(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.Post*
  commentId: Overload:EventStore.Transport.Http.Client.HttpAsyncClient.Post
  name: Post
  nameWithType: HttpAsyncClient.Post
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.Post
- uid: EventStore.Transport.Http.Client.IHttpClient.Post(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  commentId: M:EventStore.Transport.Http.Client.IHttpClient.Post(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  parent: EventStore.Transport.Http.Client.IHttpClient
  isExternal: true
  name: Post(String, String, String, Action<HttpResponse>, Action<Exception>)
  nameWithType: IHttpClient.Post(String, String, String, Action<HttpResponse>, Action<Exception>)
  fullName: EventStore.Transport.Http.Client.IHttpClient.Post(System.String, System.String, System.String, System.Action<EventStore.Transport.Http.HttpResponse>, System.Action<System.Exception>)
  nameWithType.vb: IHttpClient.Post(String, String, String, Action(Of HttpResponse), Action(Of Exception))
  fullName.vb: EventStore.Transport.Http.Client.IHttpClient.Post(System.String, System.String, System.String, System.Action(Of EventStore.Transport.Http.HttpResponse), System.Action(Of System.Exception))
  name.vb: Post(String, String, String, Action(Of HttpResponse), Action(Of Exception))
  spec.csharp:
  - uid: EventStore.Transport.Http.Client.IHttpClient.Post(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
    name: Post
    nameWithType: IHttpClient.Post
    fullName: EventStore.Transport.Http.Client.IHttpClient.Post
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.Transport.Http.HttpResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Http.Client.IHttpClient.Post(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
    name: Post
    nameWithType: IHttpClient.Post
    fullName: EventStore.Transport.Http.Client.IHttpClient.Post
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.Transport.Http.HttpResponse
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.Delete*
  commentId: Overload:EventStore.Transport.Http.Client.HttpAsyncClient.Delete
  name: Delete
  nameWithType: HttpAsyncClient.Delete
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.Delete
- uid: EventStore.Transport.Http.Client.IHttpClient.Delete(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  commentId: M:EventStore.Transport.Http.Client.IHttpClient.Delete(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  parent: EventStore.Transport.Http.Client.IHttpClient
  isExternal: true
  name: Delete(String, Action<HttpResponse>, Action<Exception>)
  nameWithType: IHttpClient.Delete(String, Action<HttpResponse>, Action<Exception>)
  fullName: EventStore.Transport.Http.Client.IHttpClient.Delete(System.String, System.Action<EventStore.Transport.Http.HttpResponse>, System.Action<System.Exception>)
  nameWithType.vb: IHttpClient.Delete(String, Action(Of HttpResponse), Action(Of Exception))
  fullName.vb: EventStore.Transport.Http.Client.IHttpClient.Delete(System.String, System.Action(Of EventStore.Transport.Http.HttpResponse), System.Action(Of System.Exception))
  name.vb: Delete(String, Action(Of HttpResponse), Action(Of Exception))
  spec.csharp:
  - uid: EventStore.Transport.Http.Client.IHttpClient.Delete(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
    name: Delete
    nameWithType: IHttpClient.Delete
    fullName: EventStore.Transport.Http.Client.IHttpClient.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.Transport.Http.HttpResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Http.Client.IHttpClient.Delete(System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
    name: Delete
    nameWithType: IHttpClient.Delete
    fullName: EventStore.Transport.Http.Client.IHttpClient.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.Transport.Http.HttpResponse
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.Put*
  commentId: Overload:EventStore.Transport.Http.Client.HttpAsyncClient.Put
  name: Put
  nameWithType: HttpAsyncClient.Put
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.Put
- uid: EventStore.Transport.Http.Client.IHttpClient.Put(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  commentId: M:EventStore.Transport.Http.Client.IHttpClient.Put(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
  parent: EventStore.Transport.Http.Client.IHttpClient
  isExternal: true
  name: Put(String, String, String, Action<HttpResponse>, Action<Exception>)
  nameWithType: IHttpClient.Put(String, String, String, Action<HttpResponse>, Action<Exception>)
  fullName: EventStore.Transport.Http.Client.IHttpClient.Put(System.String, System.String, System.String, System.Action<EventStore.Transport.Http.HttpResponse>, System.Action<System.Exception>)
  nameWithType.vb: IHttpClient.Put(String, String, String, Action(Of HttpResponse), Action(Of Exception))
  fullName.vb: EventStore.Transport.Http.Client.IHttpClient.Put(System.String, System.String, System.String, System.Action(Of EventStore.Transport.Http.HttpResponse), System.Action(Of System.Exception))
  name.vb: Put(String, String, String, Action(Of HttpResponse), Action(Of Exception))
  spec.csharp:
  - uid: EventStore.Transport.Http.Client.IHttpClient.Put(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
    name: Put
    nameWithType: IHttpClient.Put
    fullName: EventStore.Transport.Http.Client.IHttpClient.Put
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.Transport.Http.HttpResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Http.Client.IHttpClient.Put(System.String,System.String,System.String,System.Action{EventStore.Transport.Http.HttpResponse},System.Action{System.Exception})
    name: Put
    nameWithType: IHttpClient.Put
    fullName: EventStore.Transport.Http.Client.IHttpClient.Put
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: EventStore.Transport.Http.HttpResponse
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Http.Client.HttpAsyncClient.Dispose*
  commentId: Overload:EventStore.Transport.Http.Client.HttpAsyncClient.Dispose
  name: Dispose
  nameWithType: HttpAsyncClient.Dispose
  fullName: EventStore.Transport.Http.Client.HttpAsyncClient.Dispose

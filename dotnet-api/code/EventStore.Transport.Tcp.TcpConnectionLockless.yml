### YamlMime:ManagedReference
items:
- uid: EventStore.Transport.Tcp.TcpConnectionLockless
  commentId: T:EventStore.Transport.Tcp.TcpConnectionLockless
  id: TcpConnectionLockless
  parent: EventStore.Transport.Tcp
  children:
  - EventStore.Transport.Tcp.TcpConnectionLockless.ClientConnectionName
  - EventStore.Transport.Tcp.TcpConnectionLockless.Close(System.String)
  - EventStore.Transport.Tcp.TcpConnectionLockless.ConnectionClosed
  - EventStore.Transport.Tcp.TcpConnectionLockless.ConnectionId
  - EventStore.Transport.Tcp.TcpConnectionLockless.CreateAcceptedTcpConnection(Guid,IPEndPoint,Socket,System.Boolean)
  - EventStore.Transport.Tcp.TcpConnectionLockless.CreateConnectingTcpConnection(Guid,IPEndPoint,EventStore.Transport.Tcp.TcpClientConnector,TimeSpan,Action{EventStore.Transport.Tcp.ITcpConnection},Action{EventStore.Transport.Tcp.ITcpConnection,SocketError},System.Boolean)
  - EventStore.Transport.Tcp.TcpConnectionLockless.EnqueueSend(IEnumerable{ArraySegment{System.Byte}})
  - EventStore.Transport.Tcp.TcpConnectionLockless.ReceiveAsync(Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}})
  - EventStore.Transport.Tcp.TcpConnectionLockless.SendQueueSize
  - EventStore.Transport.Tcp.TcpConnectionLockless.SetClientConnectionName(System.String)
  - EventStore.Transport.Tcp.TcpConnectionLockless.ToString
  langs:
  - csharp
  - vb
  name: TcpConnectionLockless
  nameWithType: TcpConnectionLockless
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless
  type: Class
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TcpConnectionLockless
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
    startLine: 12
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: 'public class TcpConnectionLockless : TcpConnectionBase, IMonitoredTcpConnection, ITcpConnection'
    content.vb: >-
      Public Class TcpConnectionLockless
          Inherits TcpConnectionBase
          Implements IMonitoredTcpConnection, ITcpConnection
  inheritance:
  - System.Object
  - EventStore.Transport.Tcp.TcpConnectionBase
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection
  - EventStore.Transport.Tcp.ITcpConnection
  inheritedMembers:
  - EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
  - EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
  - EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
  - EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
  - EventStore.Transport.Tcp.TcpConnectionBase.InSend
  - EventStore.Transport.Tcp.TcpConnectionBase.InReceive
  - EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
  - EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
  - EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
  - EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
  - EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
  - EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
  - EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
  - EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
  - EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
  - EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
  - EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
  - EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
  - EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
  - EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
  - EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(Socket)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Transport.Tcp.TcpConnectionLockless.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Transport.Tcp.TcpConnectionLockless.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.CreateConnectingTcpConnection(Guid,IPEndPoint,EventStore.Transport.Tcp.TcpClientConnector,TimeSpan,Action{EventStore.Transport.Tcp.ITcpConnection},Action{EventStore.Transport.Tcp.ITcpConnection,SocketError},System.Boolean)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionLockless.CreateConnectingTcpConnection(Guid,IPEndPoint,EventStore.Transport.Tcp.TcpClientConnector,TimeSpan,Action{EventStore.Transport.Tcp.ITcpConnection},Action{EventStore.Transport.Tcp.ITcpConnection,SocketError},System.Boolean)
  id: CreateConnectingTcpConnection(Guid,IPEndPoint,EventStore.Transport.Tcp.TcpClientConnector,TimeSpan,Action{EventStore.Transport.Tcp.ITcpConnection},Action{EventStore.Transport.Tcp.ITcpConnection,SocketError},System.Boolean)
  parent: EventStore.Transport.Tcp.TcpConnectionLockless
  langs:
  - csharp
  - vb
  name: CreateConnectingTcpConnection(Guid, IPEndPoint, TcpClientConnector, TimeSpan, Action<ITcpConnection>, Action<ITcpConnection, SocketError>, Boolean)
  nameWithType: TcpConnectionLockless.CreateConnectingTcpConnection(Guid, IPEndPoint, TcpClientConnector, TimeSpan, Action<ITcpConnection>, Action<ITcpConnection, SocketError>, Boolean)
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.CreateConnectingTcpConnection(Guid, IPEndPoint, EventStore.Transport.Tcp.TcpClientConnector, TimeSpan, Action<EventStore.Transport.Tcp.ITcpConnection>, Action<EventStore.Transport.Tcp.ITcpConnection, SocketError>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: CreateConnectingTcpConnection
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
    startLine: 24
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public static ITcpConnection CreateConnectingTcpConnection(Guid connectionId, IPEndPoint remoteEndPoint, TcpClientConnector connector, TimeSpan connectionTimeout, Action<ITcpConnection> onConnectionEstablished, Action<ITcpConnection, SocketError> onConnectionFailed, bool verbose)
    parameters:
    - id: connectionId
      type: Guid
    - id: remoteEndPoint
      type: IPEndPoint
    - id: connector
      type: EventStore.Transport.Tcp.TcpClientConnector
    - id: connectionTimeout
      type: TimeSpan
    - id: onConnectionEstablished
      type: Action{EventStore.Transport.Tcp.ITcpConnection}
    - id: onConnectionFailed
      type: Action{EventStore.Transport.Tcp.ITcpConnection,SocketError}
    - id: verbose
      type: System.Boolean
    return:
      type: EventStore.Transport.Tcp.ITcpConnection
    content.vb: Public Shared Function CreateConnectingTcpConnection(connectionId As Guid, remoteEndPoint As IPEndPoint, connector As TcpClientConnector, connectionTimeout As TimeSpan, onConnectionEstablished As Action(Of ITcpConnection), onConnectionFailed As Action(Of ITcpConnection, SocketError), verbose As Boolean) As ITcpConnection
  overload: EventStore.Transport.Tcp.TcpConnectionLockless.CreateConnectingTcpConnection*
  nameWithType.vb: TcpConnectionLockless.CreateConnectingTcpConnection(Guid, IPEndPoint, TcpClientConnector, TimeSpan, Action(Of ITcpConnection), Action(Of ITcpConnection, SocketError), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Transport.Tcp.TcpConnectionLockless.CreateConnectingTcpConnection(Guid, IPEndPoint, EventStore.Transport.Tcp.TcpClientConnector, TimeSpan, Action(Of EventStore.Transport.Tcp.ITcpConnection), Action(Of EventStore.Transport.Tcp.ITcpConnection, SocketError), System.Boolean)
  name.vb: CreateConnectingTcpConnection(Guid, IPEndPoint, TcpClientConnector, TimeSpan, Action(Of ITcpConnection), Action(Of ITcpConnection, SocketError), Boolean)
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.CreateAcceptedTcpConnection(Guid,IPEndPoint,Socket,System.Boolean)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionLockless.CreateAcceptedTcpConnection(Guid,IPEndPoint,Socket,System.Boolean)
  id: CreateAcceptedTcpConnection(Guid,IPEndPoint,Socket,System.Boolean)
  parent: EventStore.Transport.Tcp.TcpConnectionLockless
  langs:
  - csharp
  - vb
  name: CreateAcceptedTcpConnection(Guid, IPEndPoint, Socket, Boolean)
  nameWithType: TcpConnectionLockless.CreateAcceptedTcpConnection(Guid, IPEndPoint, Socket, Boolean)
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.CreateAcceptedTcpConnection(Guid, IPEndPoint, Socket, System.Boolean)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: CreateAcceptedTcpConnection
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
    startLine: 50
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public static ITcpConnection CreateAcceptedTcpConnection(Guid connectionId, IPEndPoint remoteEndPoint, Socket socket, bool verbose)
    parameters:
    - id: connectionId
      type: Guid
    - id: remoteEndPoint
      type: IPEndPoint
    - id: socket
      type: Socket
    - id: verbose
      type: System.Boolean
    return:
      type: EventStore.Transport.Tcp.ITcpConnection
    content.vb: Public Shared Function CreateAcceptedTcpConnection(connectionId As Guid, remoteEndPoint As IPEndPoint, socket As Socket, verbose As Boolean) As ITcpConnection
  overload: EventStore.Transport.Tcp.TcpConnectionLockless.CreateAcceptedTcpConnection*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.ConnectionClosed
  commentId: E:EventStore.Transport.Tcp.TcpConnectionLockless.ConnectionClosed
  id: ConnectionClosed
  parent: EventStore.Transport.Tcp.TcpConnectionLockless
  langs:
  - csharp
  - vb
  name: ConnectionClosed
  nameWithType: TcpConnectionLockless.ConnectionClosed
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.ConnectionClosed
  type: Event
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ConnectionClosed
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
    startLine: 61
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public event Action<ITcpConnection, SocketError> ConnectionClosed
    return:
      type: Action{EventStore.Transport.Tcp.ITcpConnection,SocketError}
    content.vb: Public Event ConnectionClosed As Action(Of ITcpConnection, SocketError)
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.ConnectionClosed
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.ConnectionId
  commentId: P:EventStore.Transport.Tcp.TcpConnectionLockless.ConnectionId
  id: ConnectionId
  parent: EventStore.Transport.Tcp.TcpConnectionLockless
  langs:
  - csharp
  - vb
  name: ConnectionId
  nameWithType: TcpConnectionLockless.ConnectionId
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.ConnectionId
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ConnectionId
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
    startLine: 63
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public Guid ConnectionId { get; }
    parameters: []
    return:
      type: Guid
    content.vb: Public ReadOnly Property ConnectionId As Guid
  overload: EventStore.Transport.Tcp.TcpConnectionLockless.ConnectionId*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.ConnectionId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.SendQueueSize
  commentId: P:EventStore.Transport.Tcp.TcpConnectionLockless.SendQueueSize
  id: SendQueueSize
  parent: EventStore.Transport.Tcp.TcpConnectionLockless
  langs:
  - csharp
  - vb
  name: SendQueueSize
  nameWithType: TcpConnectionLockless.SendQueueSize
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.SendQueueSize
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SendQueueSize
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
    startLine: 67
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public int SendQueueSize { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SendQueueSize As Integer
  overload: EventStore.Transport.Tcp.TcpConnectionLockless.SendQueueSize*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.ClientConnectionName
  commentId: P:EventStore.Transport.Tcp.TcpConnectionLockless.ClientConnectionName
  id: ClientConnectionName
  parent: EventStore.Transport.Tcp.TcpConnectionLockless
  langs:
  - csharp
  - vb
  name: ClientConnectionName
  nameWithType: TcpConnectionLockless.ClientConnectionName
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.ClientConnectionName
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ClientConnectionName
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
    startLine: 71
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public string ClientConnectionName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ClientConnectionName As String
  overload: EventStore.Transport.Tcp.TcpConnectionLockless.ClientConnectionName*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.EnqueueSend(IEnumerable{ArraySegment{System.Byte}})
  commentId: M:EventStore.Transport.Tcp.TcpConnectionLockless.EnqueueSend(IEnumerable{ArraySegment{System.Byte}})
  id: EnqueueSend(IEnumerable{ArraySegment{System.Byte}})
  parent: EventStore.Transport.Tcp.TcpConnectionLockless
  langs:
  - csharp
  - vb
  name: EnqueueSend(IEnumerable<ArraySegment<Byte>>)
  nameWithType: TcpConnectionLockless.EnqueueSend(IEnumerable<ArraySegment<Byte>>)
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.EnqueueSend(IEnumerable<ArraySegment<System.Byte>>)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EnqueueSend
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
    startLine: 137
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public void EnqueueSend(IEnumerable<ArraySegment<byte>> data)
    parameters:
    - id: data
      type: IEnumerable{ArraySegment{System.Byte}}
    content.vb: Public Sub EnqueueSend(data As IEnumerable(Of ArraySegment(Of Byte)))
  overload: EventStore.Transport.Tcp.TcpConnectionLockless.EnqueueSend*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(IEnumerable{ArraySegment{System.Byte}})
  nameWithType.vb: TcpConnectionLockless.EnqueueSend(IEnumerable(Of ArraySegment(Of Byte)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.TcpConnectionLockless.EnqueueSend(IEnumerable(Of ArraySegment(Of System.Byte)))
  name.vb: EnqueueSend(IEnumerable(Of ArraySegment(Of Byte)))
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.ReceiveAsync(Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}})
  commentId: M:EventStore.Transport.Tcp.TcpConnectionLockless.ReceiveAsync(Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}})
  id: ReceiveAsync(Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}})
  parent: EventStore.Transport.Tcp.TcpConnectionLockless
  langs:
  - csharp
  - vb
  name: ReceiveAsync(Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>)
  nameWithType: TcpConnectionLockless.ReceiveAsync(Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>)
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.ReceiveAsync(Action<EventStore.Transport.Tcp.ITcpConnection, IEnumerable<ArraySegment<System.Byte>>>)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ReceiveAsync
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
    startLine: 212
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public void ReceiveAsync(Action<ITcpConnection, IEnumerable<ArraySegment<byte>>> callback)
    parameters:
    - id: callback
      type: Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}}
    content.vb: Public Sub ReceiveAsync(callback As Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte))))
  overload: EventStore.Transport.Tcp.TcpConnectionLockless.ReceiveAsync*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}})
  nameWithType.vb: TcpConnectionLockless.ReceiveAsync(Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.TcpConnectionLockless.ReceiveAsync(Action(Of EventStore.Transport.Tcp.ITcpConnection, IEnumerable(Of ArraySegment(Of System.Byte))))
  name.vb: ReceiveAsync(Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte))))
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.Close(System.String)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionLockless.Close(System.String)
  id: Close(System.String)
  parent: EventStore.Transport.Tcp.TcpConnectionLockless
  langs:
  - csharp
  - vb
  name: Close(String)
  nameWithType: TcpConnectionLockless.Close(String)
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.Close(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Close
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
    startLine: 298
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public void Close(string reason)
    parameters:
    - id: reason
      type: System.String
    content.vb: Public Sub Close(reason As String)
  overload: EventStore.Transport.Tcp.TcpConnectionLockless.Close*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.SetClientConnectionName(System.String)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionLockless.SetClientConnectionName(System.String)
  id: SetClientConnectionName(System.String)
  parent: EventStore.Transport.Tcp.TcpConnectionLockless
  langs:
  - csharp
  - vb
  name: SetClientConnectionName(String)
  nameWithType: TcpConnectionLockless.SetClientConnectionName(String)
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.SetClientConnectionName(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SetClientConnectionName
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
    startLine: 367
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public void SetClientConnectionName(string clientConnectionName)
    parameters:
    - id: clientConnectionName
      type: System.String
    content.vb: Public Sub SetClientConnectionName(clientConnectionName As String)
  overload: EventStore.Transport.Tcp.TcpConnectionLockless.SetClientConnectionName*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.ToString
  commentId: M:EventStore.Transport.Tcp.TcpConnectionLockless.ToString
  id: ToString
  parent: EventStore.Transport.Tcp.TcpConnectionLockless
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: TcpConnectionLockless.ToString()
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.ToString()
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ToString
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpConnectionLockless.cs
    startLine: 371
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: EventStore.Transport.Tcp.TcpConnectionLockless.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: EventStore.Transport.Tcp
  commentId: N:EventStore.Transport.Tcp
  name: EventStore.Transport.Tcp
  nameWithType: EventStore.Transport.Tcp
  fullName: EventStore.Transport.Tcp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Transport.Tcp.TcpConnectionBase
  commentId: T:EventStore.Transport.Tcp.TcpConnectionBase
  parent: EventStore.Transport.Tcp
  name: TcpConnectionBase
  nameWithType: TcpConnectionBase
  fullName: EventStore.Transport.Tcp.TcpConnectionBase
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection
  commentId: T:EventStore.Transport.Tcp.IMonitoredTcpConnection
  parent: EventStore.Transport.Tcp
  name: IMonitoredTcpConnection
  nameWithType: IMonitoredTcpConnection
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection
- uid: EventStore.Transport.Tcp.ITcpConnection
  commentId: T:EventStore.Transport.Tcp.ITcpConnection
  parent: EventStore.Transport.Tcp
  name: ITcpConnection
  nameWithType: ITcpConnection
  fullName: EventStore.Transport.Tcp.ITcpConnection
- uid: EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: RemoteEndPoint
  nameWithType: TcpConnectionBase.RemoteEndPoint
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
- uid: EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: LocalEndPoint
  nameWithType: TcpConnectionBase.LocalEndPoint
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: IsInitialized
  nameWithType: TcpConnectionBase.IsInitialized
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: IsClosed
  nameWithType: TcpConnectionBase.IsClosed
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InSend
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.InSend
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: InSend
  nameWithType: TcpConnectionBase.InSend
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InSend
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InReceive
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.InReceive
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: InReceive
  nameWithType: TcpConnectionBase.InReceive
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InReceive
- uid: EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: PendingSendBytes
  nameWithType: TcpConnectionBase.PendingSendBytes
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: InSendBytes
  nameWithType: TcpConnectionBase.InSendBytes
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
- uid: EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: PendingReceivedBytes
  nameWithType: TcpConnectionBase.PendingReceivedBytes
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
- uid: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: TotalBytesSent
  nameWithType: TcpConnectionBase.TotalBytesSent
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
- uid: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: TotalBytesReceived
  nameWithType: TcpConnectionBase.TotalBytesReceived
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
- uid: EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: SendCalls
  nameWithType: TcpConnectionBase.SendCalls
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
- uid: EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: SendCallbacks
  nameWithType: TcpConnectionBase.SendCallbacks
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
- uid: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: ReceiveCalls
  nameWithType: TcpConnectionBase.ReceiveCalls
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
- uid: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: ReceiveCallbacks
  nameWithType: TcpConnectionBase.ReceiveCallbacks
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: IsReadyForSend
  nameWithType: TcpConnectionBase.IsReadyForSend
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: IsReadyForReceive
  nameWithType: TcpConnectionBase.IsReadyForReceive
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: IsFaulted
  nameWithType: TcpConnectionBase.IsFaulted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
- uid: EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: LastSendStarted
  nameWithType: TcpConnectionBase.LastSendStarted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
- uid: EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: LastReceiveStarted
  nameWithType: TcpConnectionBase.LastReceiveStarted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(Socket)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(Socket)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  isExternal: true
  name: InitConnectionBase(Socket)
  nameWithType: TcpConnectionBase.InitConnectionBase(Socket)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(Socket)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(Socket)
    name: InitConnectionBase
    nameWithType: TcpConnectionBase.InitConnectionBase
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase
  - name: (
    nameWithType: (
    fullName: (
  - uid: Socket
    name: Socket
    nameWithType: Socket
    fullName: Socket
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(Socket)
    name: InitConnectionBase
    nameWithType: TcpConnectionBase.InitConnectionBase
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase
  - name: (
    nameWithType: (
    fullName: (
  - uid: Socket
    name: Socket
    nameWithType: Socket
    fullName: Socket
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  isExternal: true
  name: NotifySendScheduled(Int32)
  nameWithType: TcpConnectionBase.NotifySendScheduled(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
    name: NotifySendScheduled
    nameWithType: TcpConnectionBase.NotifySendScheduled
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
    name: NotifySendScheduled
    nameWithType: TcpConnectionBase.NotifySendScheduled
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  isExternal: true
  name: NotifySendStarting(Int32)
  nameWithType: TcpConnectionBase.NotifySendStarting(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
    name: NotifySendStarting
    nameWithType: TcpConnectionBase.NotifySendStarting
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
    name: NotifySendStarting
    nameWithType: TcpConnectionBase.NotifySendStarting
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  isExternal: true
  name: NotifySendCompleted(Int32)
  nameWithType: TcpConnectionBase.NotifySendCompleted(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
    name: NotifySendCompleted
    nameWithType: TcpConnectionBase.NotifySendCompleted
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
    name: NotifySendCompleted
    nameWithType: TcpConnectionBase.NotifySendCompleted
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: NotifyReceiveStarting()
  nameWithType: TcpConnectionBase.NotifyReceiveStarting()
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting()
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
    name: NotifyReceiveStarting
    nameWithType: TcpConnectionBase.NotifyReceiveStarting
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
    name: NotifyReceiveStarting
    nameWithType: TcpConnectionBase.NotifyReceiveStarting
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  isExternal: true
  name: NotifyReceiveCompleted(Int32)
  nameWithType: TcpConnectionBase.NotifyReceiveCompleted(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
    name: NotifyReceiveCompleted
    nameWithType: TcpConnectionBase.NotifyReceiveCompleted
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
    name: NotifyReceiveCompleted
    nameWithType: TcpConnectionBase.NotifyReceiveCompleted
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  isExternal: true
  name: NotifyReceiveDispatched(Int32)
  nameWithType: TcpConnectionBase.NotifyReceiveDispatched(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
    name: NotifyReceiveDispatched
    nameWithType: TcpConnectionBase.NotifyReceiveDispatched
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
    name: NotifyReceiveDispatched
    nameWithType: TcpConnectionBase.NotifyReceiveDispatched
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: NotifyClosed()
  nameWithType: TcpConnectionBase.NotifyClosed()
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed()
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
    name: NotifyClosed
    nameWithType: TcpConnectionBase.NotifyClosed
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
    name: NotifyClosed
    nameWithType: TcpConnectionBase.NotifyClosed
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TcpConnectionLockless>()
  nameWithType: ProtobufExtensions.Serialize<TcpConnectionLockless>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.TcpConnectionLockless>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TcpConnectionLockless)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.TcpConnectionLockless)()
  name.vb: Serialize(Of TcpConnectionLockless)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TcpConnectionLockless>
    nameWithType: ProtobufExtensions.Serialize<TcpConnectionLockless>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.TcpConnectionLockless>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TcpConnectionLockless)
    nameWithType: ProtobufExtensions.Serialize(Of TcpConnectionLockless)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.TcpConnectionLockless)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TcpConnectionLockless>()
  nameWithType: ProtobufExtensions.SerializeToArray<TcpConnectionLockless>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.TcpConnectionLockless>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TcpConnectionLockless)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.TcpConnectionLockless)()
  name.vb: SerializeToArray(Of TcpConnectionLockless)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TcpConnectionLockless>
    nameWithType: ProtobufExtensions.SerializeToArray<TcpConnectionLockless>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.TcpConnectionLockless>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TcpConnectionLockless)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TcpConnectionLockless)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.TcpConnectionLockless)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.CreateConnectingTcpConnection*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionLockless.CreateConnectingTcpConnection
  name: CreateConnectingTcpConnection
  nameWithType: TcpConnectionLockless.CreateConnectingTcpConnection
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.CreateConnectingTcpConnection
- uid: Guid
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: Guid
- uid: IPEndPoint
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: IPEndPoint
- uid: EventStore.Transport.Tcp.TcpClientConnector
  commentId: T:EventStore.Transport.Tcp.TcpClientConnector
  parent: EventStore.Transport.Tcp
  name: TcpClientConnector
  nameWithType: TcpClientConnector
  fullName: EventStore.Transport.Tcp.TcpClientConnector
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: Action{EventStore.Transport.Tcp.ITcpConnection}
  commentId: '!:Action{EventStore.Transport.Tcp.ITcpConnection}'
  definition: Action`1
  name: Action<ITcpConnection>
  nameWithType: Action<ITcpConnection>
  fullName: Action<EventStore.Transport.Tcp.ITcpConnection>
  nameWithType.vb: Action(Of ITcpConnection)
  fullName.vb: Action(Of EventStore.Transport.Tcp.ITcpConnection)
  name.vb: Action(Of ITcpConnection)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{EventStore.Transport.Tcp.ITcpConnection,SocketError}
  commentId: '!:Action{EventStore.Transport.Tcp.ITcpConnection,SocketError}'
  definition: Action`2
  name: Action<ITcpConnection, SocketError>
  nameWithType: Action<ITcpConnection, SocketError>
  fullName: Action<EventStore.Transport.Tcp.ITcpConnection, SocketError>
  nameWithType.vb: Action(Of ITcpConnection, SocketError)
  fullName.vb: Action(Of EventStore.Transport.Tcp.ITcpConnection, SocketError)
  name.vb: Action(Of ITcpConnection, SocketError)
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: SocketError
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: SocketError
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`2
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.CreateAcceptedTcpConnection*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionLockless.CreateAcceptedTcpConnection
  name: CreateAcceptedTcpConnection
  nameWithType: TcpConnectionLockless.CreateAcceptedTcpConnection
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.CreateAcceptedTcpConnection
- uid: Socket
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: Socket
- uid: EventStore.Transport.Tcp.ITcpConnection.ConnectionClosed
  commentId: E:EventStore.Transport.Tcp.ITcpConnection.ConnectionClosed
  parent: EventStore.Transport.Tcp.ITcpConnection
  name: ConnectionClosed
  nameWithType: ITcpConnection.ConnectionClosed
  fullName: EventStore.Transport.Tcp.ITcpConnection.ConnectionClosed
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.ConnectionId*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionLockless.ConnectionId
  name: ConnectionId
  nameWithType: TcpConnectionLockless.ConnectionId
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.ConnectionId
- uid: EventStore.Transport.Tcp.ITcpConnection.ConnectionId
  commentId: P:EventStore.Transport.Tcp.ITcpConnection.ConnectionId
  parent: EventStore.Transport.Tcp.ITcpConnection
  name: ConnectionId
  nameWithType: ITcpConnection.ConnectionId
  fullName: EventStore.Transport.Tcp.ITcpConnection.ConnectionId
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.SendQueueSize*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionLockless.SendQueueSize
  name: SendQueueSize
  nameWithType: TcpConnectionLockless.SendQueueSize
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.SendQueueSize
- uid: EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
  commentId: P:EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
  parent: EventStore.Transport.Tcp.ITcpConnection
  name: SendQueueSize
  nameWithType: ITcpConnection.SendQueueSize
  fullName: EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.ClientConnectionName*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionLockless.ClientConnectionName
  name: ClientConnectionName
  nameWithType: TcpConnectionLockless.ClientConnectionName
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.ClientConnectionName
- uid: EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
  commentId: P:EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
  parent: EventStore.Transport.Tcp.ITcpConnection
  name: ClientConnectionName
  nameWithType: ITcpConnection.ClientConnectionName
  fullName: EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.EnqueueSend*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionLockless.EnqueueSend
  name: EnqueueSend
  nameWithType: TcpConnectionLockless.EnqueueSend
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.EnqueueSend
- uid: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(IEnumerable{ArraySegment{System.Byte}})
  commentId: M:EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(IEnumerable{ArraySegment{System.Byte}})
  parent: EventStore.Transport.Tcp.ITcpConnection
  isExternal: true
  name: EnqueueSend(IEnumerable<ArraySegment<Byte>>)
  nameWithType: ITcpConnection.EnqueueSend(IEnumerable<ArraySegment<Byte>>)
  fullName: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(IEnumerable<ArraySegment<System.Byte>>)
  nameWithType.vb: ITcpConnection.EnqueueSend(IEnumerable(Of ArraySegment(Of Byte)))
  fullName.vb: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(IEnumerable(Of ArraySegment(Of System.Byte)))
  name.vb: EnqueueSend(IEnumerable(Of ArraySegment(Of Byte)))
  spec.csharp:
  - uid: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(IEnumerable{ArraySegment{System.Byte}})
    name: EnqueueSend
    nameWithType: ITcpConnection.EnqueueSend
    fullName: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(IEnumerable{ArraySegment{System.Byte}})
    name: EnqueueSend
    nameWithType: ITcpConnection.EnqueueSend
    fullName: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{ArraySegment{System.Byte}}
  commentId: '!:IEnumerable{ArraySegment{System.Byte}}'
  definition: IEnumerable`1
  name: IEnumerable<ArraySegment<Byte>>
  nameWithType: IEnumerable<ArraySegment<Byte>>
  fullName: IEnumerable<ArraySegment<System.Byte>>
  nameWithType.vb: IEnumerable(Of ArraySegment(Of Byte))
  fullName.vb: IEnumerable(Of ArraySegment(Of System.Byte))
  name.vb: IEnumerable(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.ReceiveAsync*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionLockless.ReceiveAsync
  name: ReceiveAsync
  nameWithType: TcpConnectionLockless.ReceiveAsync
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.ReceiveAsync
- uid: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}})
  commentId: M:EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}})
  parent: EventStore.Transport.Tcp.ITcpConnection
  isExternal: true
  name: ReceiveAsync(Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>)
  nameWithType: ITcpConnection.ReceiveAsync(Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>)
  fullName: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(Action<EventStore.Transport.Tcp.ITcpConnection, IEnumerable<ArraySegment<System.Byte>>>)
  nameWithType.vb: ITcpConnection.ReceiveAsync(Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte))))
  fullName.vb: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(Action(Of EventStore.Transport.Tcp.ITcpConnection, IEnumerable(Of ArraySegment(Of System.Byte))))
  name.vb: ReceiveAsync(Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte))))
  spec.csharp:
  - uid: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}})
    name: ReceiveAsync
    nameWithType: ITcpConnection.ReceiveAsync
    fullName: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}})
    name: ReceiveAsync
    nameWithType: ITcpConnection.ReceiveAsync
    fullName: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}}
  commentId: '!:Action{EventStore.Transport.Tcp.ITcpConnection,IEnumerable{ArraySegment{System.Byte}}}'
  definition: Action`2
  name: Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>
  nameWithType: Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>
  fullName: Action<EventStore.Transport.Tcp.ITcpConnection, IEnumerable<ArraySegment<System.Byte>>>
  nameWithType.vb: Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte)))
  fullName.vb: Action(Of EventStore.Transport.Tcp.ITcpConnection, IEnumerable(Of ArraySegment(Of System.Byte)))
  name.vb: Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte)))
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.Close*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionLockless.Close
  name: Close
  nameWithType: TcpConnectionLockless.Close
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.Close
- uid: EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
  commentId: M:EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
  parent: EventStore.Transport.Tcp.ITcpConnection
  isExternal: true
  name: Close(String)
  nameWithType: ITcpConnection.Close(String)
  fullName: EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
    name: Close
    nameWithType: ITcpConnection.Close
    fullName: EventStore.Transport.Tcp.ITcpConnection.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
    name: Close
    nameWithType: ITcpConnection.Close
    fullName: EventStore.Transport.Tcp.ITcpConnection.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.SetClientConnectionName*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionLockless.SetClientConnectionName
  name: SetClientConnectionName
  nameWithType: TcpConnectionLockless.SetClientConnectionName
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.SetClientConnectionName
- uid: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
  commentId: M:EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
  parent: EventStore.Transport.Tcp.ITcpConnection
  isExternal: true
  name: SetClientConnectionName(String)
  nameWithType: ITcpConnection.SetClientConnectionName(String)
  fullName: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
    name: SetClientConnectionName
    nameWithType: ITcpConnection.SetClientConnectionName
    fullName: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
    name: SetClientConnectionName
    nameWithType: ITcpConnection.SetClientConnectionName
    fullName: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionLockless.ToString*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionLockless.ToString
  name: ToString
  nameWithType: TcpConnectionLockless.ToString
  fullName: EventStore.Transport.Tcp.TcpConnectionLockless.ToString

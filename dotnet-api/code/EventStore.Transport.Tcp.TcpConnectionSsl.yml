### YamlMime:ManagedReference
items:
- uid: EventStore.Transport.Tcp.TcpConnectionSsl
  commentId: T:EventStore.Transport.Tcp.TcpConnectionSsl
  id: TcpConnectionSsl
  parent: EventStore.Transport.Tcp
  children:
  - EventStore.Transport.Tcp.TcpConnectionSsl._clientConnectionName
  - EventStore.Transport.Tcp.TcpConnectionSsl.ClientConnectionName
  - EventStore.Transport.Tcp.TcpConnectionSsl.Close(System.String)
  - EventStore.Transport.Tcp.TcpConnectionSsl.ConnectionClosed
  - EventStore.Transport.Tcp.TcpConnectionSsl.ConnectionId
  - EventStore.Transport.Tcp.TcpConnectionSsl.CreateClientFromSocket(System.Guid,System.Net.IPEndPoint,System.Net.Sockets.Socket,System.String,System.Boolean,System.Boolean)
  - EventStore.Transport.Tcp.TcpConnectionSsl.CreateConnectingConnection(System.Guid,System.Net.IPEndPoint,System.String,System.Boolean,EventStore.Transport.Tcp.TcpClientConnector,System.TimeSpan,System.Action{EventStore.Transport.Tcp.ITcpConnection},System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Net.Sockets.SocketError},System.Boolean)
  - EventStore.Transport.Tcp.TcpConnectionSsl.CreateServerFromSocket(System.Guid,System.Net.IPEndPoint,System.Net.Sockets.Socket,System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean)
  - EventStore.Transport.Tcp.TcpConnectionSsl.EnqueueSend(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
  - EventStore.Transport.Tcp.TcpConnectionSsl.ReceiveAsync(System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}})
  - EventStore.Transport.Tcp.TcpConnectionSsl.SendQueueSize
  - EventStore.Transport.Tcp.TcpConnectionSsl.SetClientConnectionName(System.String)
  - EventStore.Transport.Tcp.TcpConnectionSsl.ToString
  - EventStore.Transport.Tcp.TcpConnectionSsl.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)
  langs:
  - csharp
  - vb
  name: TcpConnectionSsl
  nameWithType: TcpConnectionSsl
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl
  type: Class
  source:
    id: TcpConnectionSsl
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 15
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: 'public class TcpConnectionSsl : TcpConnectionBase, IMonitoredTcpConnection, ITcpConnection'
    content.vb: >-
      Public Class TcpConnectionSsl
          Inherits TcpConnectionBase
          Implements IMonitoredTcpConnection, ITcpConnection
  inheritance:
  - System.Object
  - EventStore.Transport.Tcp.TcpConnectionBase
  implements:
  - EventStore.Transport.Tcp.IMonitoredTcpConnection
  - EventStore.Transport.Tcp.ITcpConnection
  inheritedMembers:
  - EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
  - EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
  - EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
  - EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
  - EventStore.Transport.Tcp.TcpConnectionBase.InSend
  - EventStore.Transport.Tcp.TcpConnectionBase.InReceive
  - EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
  - EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
  - EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
  - EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
  - EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
  - EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
  - EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
  - EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
  - EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
  - EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
  - EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
  - EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
  - EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
  - EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
  - EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(System.Net.Sockets.Socket)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
  - EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Transport.Tcp.TcpConnectionSsl.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Transport.Tcp.TcpConnectionSsl.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.CreateConnectingConnection(System.Guid,System.Net.IPEndPoint,System.String,System.Boolean,EventStore.Transport.Tcp.TcpClientConnector,System.TimeSpan,System.Action{EventStore.Transport.Tcp.ITcpConnection},System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Net.Sockets.SocketError},System.Boolean)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionSsl.CreateConnectingConnection(System.Guid,System.Net.IPEndPoint,System.String,System.Boolean,EventStore.Transport.Tcp.TcpClientConnector,System.TimeSpan,System.Action{EventStore.Transport.Tcp.ITcpConnection},System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Net.Sockets.SocketError},System.Boolean)
  id: CreateConnectingConnection(System.Guid,System.Net.IPEndPoint,System.String,System.Boolean,EventStore.Transport.Tcp.TcpClientConnector,System.TimeSpan,System.Action{EventStore.Transport.Tcp.ITcpConnection},System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Net.Sockets.SocketError},System.Boolean)
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: CreateConnectingConnection(Guid, IPEndPoint, String, Boolean, TcpClientConnector, TimeSpan, Action<ITcpConnection>, Action<ITcpConnection, SocketError>, Boolean)
  nameWithType: TcpConnectionSsl.CreateConnectingConnection(Guid, IPEndPoint, String, Boolean, TcpClientConnector, TimeSpan, Action<ITcpConnection>, Action<ITcpConnection, SocketError>, Boolean)
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.CreateConnectingConnection(System.Guid, System.Net.IPEndPoint, System.String, System.Boolean, EventStore.Transport.Tcp.TcpClientConnector, System.TimeSpan, System.Action<EventStore.Transport.Tcp.ITcpConnection>, System.Action<EventStore.Transport.Tcp.ITcpConnection, System.Net.Sockets.SocketError>, System.Boolean)
  type: Method
  source:
    id: CreateConnectingConnection
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 18
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public static ITcpConnection CreateConnectingConnection(Guid connectionId, IPEndPoint remoteEndPoint, string targetHost, bool validateServer, TcpClientConnector connector, TimeSpan connectionTimeout, Action<ITcpConnection> onConnectionEstablished, Action<ITcpConnection, SocketError> onConnectionFailed, bool verbose)
    parameters:
    - id: connectionId
      type: System.Guid
    - id: remoteEndPoint
      type: System.Net.IPEndPoint
    - id: targetHost
      type: System.String
    - id: validateServer
      type: System.Boolean
    - id: connector
      type: EventStore.Transport.Tcp.TcpClientConnector
    - id: connectionTimeout
      type: System.TimeSpan
    - id: onConnectionEstablished
      type: System.Action{EventStore.Transport.Tcp.ITcpConnection}
    - id: onConnectionFailed
      type: System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Net.Sockets.SocketError}
    - id: verbose
      type: System.Boolean
    return:
      type: EventStore.Transport.Tcp.ITcpConnection
    content.vb: Public Shared Function CreateConnectingConnection(connectionId As Guid, remoteEndPoint As IPEndPoint, targetHost As String, validateServer As Boolean, connector As TcpClientConnector, connectionTimeout As TimeSpan, onConnectionEstablished As Action(Of ITcpConnection), onConnectionFailed As Action(Of ITcpConnection, SocketError), verbose As Boolean) As ITcpConnection
  overload: EventStore.Transport.Tcp.TcpConnectionSsl.CreateConnectingConnection*
  nameWithType.vb: TcpConnectionSsl.CreateConnectingConnection(Guid, IPEndPoint, String, Boolean, TcpClientConnector, TimeSpan, Action(Of ITcpConnection), Action(Of ITcpConnection, SocketError), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventStore.Transport.Tcp.TcpConnectionSsl.CreateConnectingConnection(System.Guid, System.Net.IPEndPoint, System.String, System.Boolean, EventStore.Transport.Tcp.TcpClientConnector, System.TimeSpan, System.Action(Of EventStore.Transport.Tcp.ITcpConnection), System.Action(Of EventStore.Transport.Tcp.ITcpConnection, System.Net.Sockets.SocketError), System.Boolean)
  name.vb: CreateConnectingConnection(Guid, IPEndPoint, String, Boolean, TcpClientConnector, TimeSpan, Action(Of ITcpConnection), Action(Of ITcpConnection, SocketError), Boolean)
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.CreateClientFromSocket(System.Guid,System.Net.IPEndPoint,System.Net.Sockets.Socket,System.String,System.Boolean,System.Boolean)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionSsl.CreateClientFromSocket(System.Guid,System.Net.IPEndPoint,System.Net.Sockets.Socket,System.String,System.Boolean,System.Boolean)
  id: CreateClientFromSocket(System.Guid,System.Net.IPEndPoint,System.Net.Sockets.Socket,System.String,System.Boolean,System.Boolean)
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: CreateClientFromSocket(Guid, IPEndPoint, Socket, String, Boolean, Boolean)
  nameWithType: TcpConnectionSsl.CreateClientFromSocket(Guid, IPEndPoint, Socket, String, Boolean, Boolean)
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.CreateClientFromSocket(System.Guid, System.Net.IPEndPoint, System.Net.Sockets.Socket, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    id: CreateClientFromSocket
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 43
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public static ITcpConnection CreateClientFromSocket(Guid connectionId, IPEndPoint remoteEndPoint, Socket socket, string targetHost, bool validateServer, bool verbose)
    parameters:
    - id: connectionId
      type: System.Guid
    - id: remoteEndPoint
      type: System.Net.IPEndPoint
    - id: socket
      type: System.Net.Sockets.Socket
    - id: targetHost
      type: System.String
    - id: validateServer
      type: System.Boolean
    - id: verbose
      type: System.Boolean
    return:
      type: EventStore.Transport.Tcp.ITcpConnection
    content.vb: Public Shared Function CreateClientFromSocket(connectionId As Guid, remoteEndPoint As IPEndPoint, socket As Socket, targetHost As String, validateServer As Boolean, verbose As Boolean) As ITcpConnection
  overload: EventStore.Transport.Tcp.TcpConnectionSsl.CreateClientFromSocket*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.CreateServerFromSocket(System.Guid,System.Net.IPEndPoint,System.Net.Sockets.Socket,System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionSsl.CreateServerFromSocket(System.Guid,System.Net.IPEndPoint,System.Net.Sockets.Socket,System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean)
  id: CreateServerFromSocket(System.Guid,System.Net.IPEndPoint,System.Net.Sockets.Socket,System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean)
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: CreateServerFromSocket(Guid, IPEndPoint, Socket, X509Certificate, Boolean)
  nameWithType: TcpConnectionSsl.CreateServerFromSocket(Guid, IPEndPoint, Socket, X509Certificate, Boolean)
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.CreateServerFromSocket(System.Guid, System.Net.IPEndPoint, System.Net.Sockets.Socket, System.Security.Cryptography.X509Certificates.X509Certificate, System.Boolean)
  type: Method
  source:
    id: CreateServerFromSocket
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 54
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public static ITcpConnection CreateServerFromSocket(Guid connectionId, IPEndPoint remoteEndPoint, Socket socket, X509Certificate certificate, bool verbose)
    parameters:
    - id: connectionId
      type: System.Guid
    - id: remoteEndPoint
      type: System.Net.IPEndPoint
    - id: socket
      type: System.Net.Sockets.Socket
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
    - id: verbose
      type: System.Boolean
    return:
      type: EventStore.Transport.Tcp.ITcpConnection
    content.vb: Public Shared Function CreateServerFromSocket(connectionId As Guid, remoteEndPoint As IPEndPoint, socket As Socket, certificate As X509Certificate, verbose As Boolean) As ITcpConnection
  overload: EventStore.Transport.Tcp.TcpConnectionSsl.CreateServerFromSocket*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.ConnectionClosed
  commentId: E:EventStore.Transport.Tcp.TcpConnectionSsl.ConnectionClosed
  id: ConnectionClosed
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: ConnectionClosed
  nameWithType: TcpConnectionSsl.ConnectionClosed
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.ConnectionClosed
  type: Event
  source:
    id: ConnectionClosed
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 65
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public event Action<ITcpConnection, SocketError> ConnectionClosed
    return:
      type: System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Net.Sockets.SocketError}
    content.vb: Public Event ConnectionClosed As Action(Of ITcpConnection, SocketError)
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.ConnectionClosed
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.ConnectionId
  commentId: P:EventStore.Transport.Tcp.TcpConnectionSsl.ConnectionId
  id: ConnectionId
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: ConnectionId
  nameWithType: TcpConnectionSsl.ConnectionId
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.ConnectionId
  type: Property
  source:
    id: ConnectionId
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 67
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public Guid ConnectionId { get; }
    parameters: []
    return:
      type: System.Guid
    content.vb: Public ReadOnly Property ConnectionId As Guid
  overload: EventStore.Transport.Tcp.TcpConnectionSsl.ConnectionId*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.ConnectionId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.SendQueueSize
  commentId: P:EventStore.Transport.Tcp.TcpConnectionSsl.SendQueueSize
  id: SendQueueSize
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: SendQueueSize
  nameWithType: TcpConnectionSsl.SendQueueSize
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.SendQueueSize
  type: Property
  source:
    id: SendQueueSize
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 71
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public int SendQueueSize { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SendQueueSize As Integer
  overload: EventStore.Transport.Tcp.TcpConnectionSsl.SendQueueSize*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.ClientConnectionName
  commentId: P:EventStore.Transport.Tcp.TcpConnectionSsl.ClientConnectionName
  id: ClientConnectionName
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: ClientConnectionName
  nameWithType: TcpConnectionSsl.ClientConnectionName
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.ClientConnectionName
  type: Property
  source:
    id: ClientConnectionName
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 75
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public string ClientConnectionName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ClientConnectionName As String
  overload: EventStore.Transport.Tcp.TcpConnectionSsl.ClientConnectionName*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EventStore.Transport.Tcp.TcpConnectionSsl._clientConnectionName
  commentId: F:EventStore.Transport.Tcp.TcpConnectionSsl._clientConnectionName
  id: _clientConnectionName
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: _clientConnectionName
  nameWithType: TcpConnectionSsl._clientConnectionName
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl._clientConnectionName
  type: Field
  source:
    id: _clientConnectionName
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 81
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public string _clientConnectionName
    return:
      type: System.String
    content.vb: Public _clientConnectionName As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionSsl.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)
  id: ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: ValidateServerCertificate(Object, X509Certificate, X509Chain, SslPolicyErrors)
  nameWithType: TcpConnectionSsl.ValidateServerCertificate(Object, X509Certificate, X509Chain, SslPolicyErrors)
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.ValidateServerCertificate(System.Object, System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors)
  type: Method
  source:
    id: ValidateServerCertificate
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 236
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public bool ValidateServerCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
    parameters:
    - id: sender
      type: System.Object
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
    - id: chain
      type: System.Security.Cryptography.X509Certificates.X509Chain
    - id: sslPolicyErrors
      type: System.Net.Security.SslPolicyErrors
    return:
      type: System.Boolean
    content.vb: Public Function ValidateServerCertificate(sender As Object, certificate As X509Certificate, chain As X509Chain, sslPolicyErrors As SslPolicyErrors) As Boolean
  overload: EventStore.Transport.Tcp.TcpConnectionSsl.ValidateServerCertificate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.EnqueueSend(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
  commentId: M:EventStore.Transport.Tcp.TcpConnectionSsl.EnqueueSend(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
  id: EnqueueSend(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: EnqueueSend(IEnumerable<ArraySegment<Byte>>)
  nameWithType: TcpConnectionSsl.EnqueueSend(IEnumerable<ArraySegment<Byte>>)
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.EnqueueSend(System.Collections.Generic.IEnumerable<System.ArraySegment<System.Byte>>)
  type: Method
  source:
    id: EnqueueSend
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 300
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public void EnqueueSend(IEnumerable<ArraySegment<byte>> data)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}
    content.vb: Public Sub EnqueueSend(data As IEnumerable(Of ArraySegment(Of Byte)))
  overload: EventStore.Transport.Tcp.TcpConnectionSsl.EnqueueSend*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
  nameWithType.vb: TcpConnectionSsl.EnqueueSend(IEnumerable(Of ArraySegment(Of Byte)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.TcpConnectionSsl.EnqueueSend(System.Collections.Generic.IEnumerable(Of System.ArraySegment(Of System.Byte)))
  name.vb: EnqueueSend(IEnumerable(Of ArraySegment(Of Byte)))
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.ReceiveAsync(System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}})
  commentId: M:EventStore.Transport.Tcp.TcpConnectionSsl.ReceiveAsync(System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}})
  id: ReceiveAsync(System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}})
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: ReceiveAsync(Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>)
  nameWithType: TcpConnectionSsl.ReceiveAsync(Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>)
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.ReceiveAsync(System.Action<EventStore.Transport.Tcp.ITcpConnection, System.Collections.Generic.IEnumerable<System.ArraySegment<System.Byte>>>)
  type: Method
  source:
    id: ReceiveAsync
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 370
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public void ReceiveAsync(Action<ITcpConnection, IEnumerable<ArraySegment<byte>>> callback)
    parameters:
    - id: callback
      type: System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}}
    content.vb: Public Sub ReceiveAsync(callback As Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte))))
  overload: EventStore.Transport.Tcp.TcpConnectionSsl.ReceiveAsync*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}})
  nameWithType.vb: TcpConnectionSsl.ReceiveAsync(Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.TcpConnectionSsl.ReceiveAsync(System.Action(Of EventStore.Transport.Tcp.ITcpConnection, System.Collections.Generic.IEnumerable(Of System.ArraySegment(Of System.Byte))))
  name.vb: ReceiveAsync(Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte))))
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.Close(System.String)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionSsl.Close(System.String)
  id: Close(System.String)
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: Close(String)
  nameWithType: TcpConnectionSsl.Close(String)
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.Close(System.String)
  type: Method
  source:
    id: Close
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 476
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public void Close(string reason)
    parameters:
    - id: reason
      type: System.String
    content.vb: Public Sub Close(reason As String)
  overload: EventStore.Transport.Tcp.TcpConnectionSsl.Close*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.SetClientConnectionName(System.String)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionSsl.SetClientConnectionName(System.String)
  id: SetClientConnectionName(System.String)
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: SetClientConnectionName(String)
  nameWithType: TcpConnectionSsl.SetClientConnectionName(String)
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.SetClientConnectionName(System.String)
  type: Method
  source:
    id: SetClientConnectionName
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 513
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public void SetClientConnectionName(string clientConnectionName)
    parameters:
    - id: clientConnectionName
      type: System.String
    content.vb: Public Sub SetClientConnectionName(clientConnectionName As String)
  overload: EventStore.Transport.Tcp.TcpConnectionSsl.SetClientConnectionName*
  implements:
  - EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.ToString
  commentId: M:EventStore.Transport.Tcp.TcpConnectionSsl.ToString
  id: ToString
  parent: EventStore.Transport.Tcp.TcpConnectionSsl
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: TcpConnectionSsl.ToString()
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.ToString()
  type: Method
  source:
    id: ToString
    path: /Users/chrisward/Workspace/EventStore/EventStore/src/EventStore.Transport.Tcp/TcpConnectionSsl.cs
    startLine: 517
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: EventStore.Transport.Tcp.TcpConnectionSsl.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: EventStore.Transport.Tcp
  commentId: N:EventStore.Transport.Tcp
  name: EventStore.Transport.Tcp
  nameWithType: EventStore.Transport.Tcp
  fullName: EventStore.Transport.Tcp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EventStore.Transport.Tcp.TcpConnectionBase
  commentId: T:EventStore.Transport.Tcp.TcpConnectionBase
  parent: EventStore.Transport.Tcp
  name: TcpConnectionBase
  nameWithType: TcpConnectionBase
  fullName: EventStore.Transport.Tcp.TcpConnectionBase
- uid: EventStore.Transport.Tcp.IMonitoredTcpConnection
  commentId: T:EventStore.Transport.Tcp.IMonitoredTcpConnection
  parent: EventStore.Transport.Tcp
  name: IMonitoredTcpConnection
  nameWithType: IMonitoredTcpConnection
  fullName: EventStore.Transport.Tcp.IMonitoredTcpConnection
- uid: EventStore.Transport.Tcp.ITcpConnection
  commentId: T:EventStore.Transport.Tcp.ITcpConnection
  parent: EventStore.Transport.Tcp
  name: ITcpConnection
  nameWithType: ITcpConnection
  fullName: EventStore.Transport.Tcp.ITcpConnection
- uid: EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: RemoteEndPoint
  nameWithType: TcpConnectionBase.RemoteEndPoint
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.RemoteEndPoint
- uid: EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: LocalEndPoint
  nameWithType: TcpConnectionBase.LocalEndPoint
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.LocalEndPoint
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: IsInitialized
  nameWithType: TcpConnectionBase.IsInitialized
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsInitialized
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: IsClosed
  nameWithType: TcpConnectionBase.IsClosed
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsClosed
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InSend
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.InSend
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: InSend
  nameWithType: TcpConnectionBase.InSend
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InSend
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InReceive
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.InReceive
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: InReceive
  nameWithType: TcpConnectionBase.InReceive
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InReceive
- uid: EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: PendingSendBytes
  nameWithType: TcpConnectionBase.PendingSendBytes
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.PendingSendBytes
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: InSendBytes
  nameWithType: TcpConnectionBase.InSendBytes
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InSendBytes
- uid: EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: PendingReceivedBytes
  nameWithType: TcpConnectionBase.PendingReceivedBytes
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.PendingReceivedBytes
- uid: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: TotalBytesSent
  nameWithType: TcpConnectionBase.TotalBytesSent
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesSent
- uid: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: TotalBytesReceived
  nameWithType: TcpConnectionBase.TotalBytesReceived
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.TotalBytesReceived
- uid: EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: SendCalls
  nameWithType: TcpConnectionBase.SendCalls
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.SendCalls
- uid: EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: SendCallbacks
  nameWithType: TcpConnectionBase.SendCallbacks
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.SendCallbacks
- uid: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: ReceiveCalls
  nameWithType: TcpConnectionBase.ReceiveCalls
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCalls
- uid: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: ReceiveCallbacks
  nameWithType: TcpConnectionBase.ReceiveCallbacks
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.ReceiveCallbacks
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: IsReadyForSend
  nameWithType: TcpConnectionBase.IsReadyForSend
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForSend
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: IsReadyForReceive
  nameWithType: TcpConnectionBase.IsReadyForReceive
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsReadyForReceive
- uid: EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: IsFaulted
  nameWithType: TcpConnectionBase.IsFaulted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.IsFaulted
- uid: EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: LastSendStarted
  nameWithType: TcpConnectionBase.LastSendStarted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.LastSendStarted
- uid: EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
  commentId: P:EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: LastReceiveStarted
  nameWithType: TcpConnectionBase.LastReceiveStarted
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.LastReceiveStarted
- uid: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(System.Net.Sockets.Socket)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(System.Net.Sockets.Socket)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  isExternal: true
  name: InitConnectionBase(Socket)
  nameWithType: TcpConnectionBase.InitConnectionBase(Socket)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(System.Net.Sockets.Socket)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(System.Net.Sockets.Socket)
    name: InitConnectionBase
    nameWithType: TcpConnectionBase.InitConnectionBase
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase(System.Net.Sockets.Socket)
    name: InitConnectionBase
    nameWithType: TcpConnectionBase.InitConnectionBase
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.InitConnectionBase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  isExternal: true
  name: NotifySendScheduled(Int32)
  nameWithType: TcpConnectionBase.NotifySendScheduled(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
    name: NotifySendScheduled
    nameWithType: TcpConnectionBase.NotifySendScheduled
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled(System.Int32)
    name: NotifySendScheduled
    nameWithType: TcpConnectionBase.NotifySendScheduled
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendScheduled
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  isExternal: true
  name: NotifySendStarting(Int32)
  nameWithType: TcpConnectionBase.NotifySendStarting(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
    name: NotifySendStarting
    nameWithType: TcpConnectionBase.NotifySendStarting
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting(System.Int32)
    name: NotifySendStarting
    nameWithType: TcpConnectionBase.NotifySendStarting
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendStarting
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  isExternal: true
  name: NotifySendCompleted(Int32)
  nameWithType: TcpConnectionBase.NotifySendCompleted(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
    name: NotifySendCompleted
    nameWithType: TcpConnectionBase.NotifySendCompleted
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted(System.Int32)
    name: NotifySendCompleted
    nameWithType: TcpConnectionBase.NotifySendCompleted
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifySendCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: NotifyReceiveStarting()
  nameWithType: TcpConnectionBase.NotifyReceiveStarting()
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting()
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
    name: NotifyReceiveStarting
    nameWithType: TcpConnectionBase.NotifyReceiveStarting
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
    name: NotifyReceiveStarting
    nameWithType: TcpConnectionBase.NotifyReceiveStarting
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveStarting
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  isExternal: true
  name: NotifyReceiveCompleted(Int32)
  nameWithType: TcpConnectionBase.NotifyReceiveCompleted(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
    name: NotifyReceiveCompleted
    nameWithType: TcpConnectionBase.NotifyReceiveCompleted
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted(System.Int32)
    name: NotifyReceiveCompleted
    nameWithType: TcpConnectionBase.NotifyReceiveCompleted
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  isExternal: true
  name: NotifyReceiveDispatched(Int32)
  nameWithType: TcpConnectionBase.NotifyReceiveDispatched(Int32)
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
    name: NotifyReceiveDispatched
    nameWithType: TcpConnectionBase.NotifyReceiveDispatched
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched(System.Int32)
    name: NotifyReceiveDispatched
    nameWithType: TcpConnectionBase.NotifyReceiveDispatched
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyReceiveDispatched
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  commentId: M:EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  parent: EventStore.Transport.Tcp.TcpConnectionBase
  name: NotifyClosed()
  nameWithType: TcpConnectionBase.NotifyClosed()
  fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed()
  spec.csharp:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
    name: NotifyClosed
    nameWithType: TcpConnectionBase.NotifyClosed
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
    name: NotifyClosed
    nameWithType: TcpConnectionBase.NotifyClosed
    fullName: EventStore.Transport.Tcp.TcpConnectionBase.NotifyClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TcpConnectionSsl>()
  nameWithType: ProtobufExtensions.Serialize<TcpConnectionSsl>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.TcpConnectionSsl>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TcpConnectionSsl)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.TcpConnectionSsl)()
  name.vb: Serialize(Of TcpConnectionSsl)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TcpConnectionSsl>
    nameWithType: ProtobufExtensions.Serialize<TcpConnectionSsl>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.TcpConnectionSsl>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TcpConnectionSsl)
    nameWithType: ProtobufExtensions.Serialize(Of TcpConnectionSsl)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.TcpConnectionSsl)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TcpConnectionSsl>()
  nameWithType: ProtobufExtensions.SerializeToArray<TcpConnectionSsl>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.TcpConnectionSsl>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TcpConnectionSsl)()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.TcpConnectionSsl)()
  name.vb: SerializeToArray(Of TcpConnectionSsl)()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TcpConnectionSsl>
    nameWithType: ProtobufExtensions.SerializeToArray<TcpConnectionSsl>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.TcpConnectionSsl>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TcpConnectionSsl)
    nameWithType: ProtobufExtensions.SerializeToArray(Of TcpConnectionSsl)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.TcpConnectionSsl)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.CreateConnectingConnection*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionSsl.CreateConnectingConnection
  name: CreateConnectingConnection
  nameWithType: TcpConnectionSsl.CreateConnectingConnection
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.CreateConnectingConnection
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Net.IPEndPoint
  commentId: T:System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EventStore.Transport.Tcp.TcpClientConnector
  commentId: T:EventStore.Transport.Tcp.TcpClientConnector
  parent: EventStore.Transport.Tcp
  name: TcpClientConnector
  nameWithType: TcpClientConnector
  fullName: EventStore.Transport.Tcp.TcpClientConnector
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Action{EventStore.Transport.Tcp.ITcpConnection}
  commentId: T:System.Action{EventStore.Transport.Tcp.ITcpConnection}
  parent: System
  definition: System.Action`1
  name: Action<ITcpConnection>
  nameWithType: Action<ITcpConnection>
  fullName: System.Action<EventStore.Transport.Tcp.ITcpConnection>
  nameWithType.vb: Action(Of ITcpConnection)
  fullName.vb: System.Action(Of EventStore.Transport.Tcp.ITcpConnection)
  name.vb: Action(Of ITcpConnection)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Net.Sockets.SocketError}
  commentId: T:System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Net.Sockets.SocketError}
  parent: System
  definition: System.Action`2
  name: Action<ITcpConnection, SocketError>
  nameWithType: Action<ITcpConnection, SocketError>
  fullName: System.Action<EventStore.Transport.Tcp.ITcpConnection, System.Net.Sockets.SocketError>
  nameWithType.vb: Action(Of ITcpConnection, SocketError)
  fullName.vb: System.Action(Of EventStore.Transport.Tcp.ITcpConnection, System.Net.Sockets.SocketError)
  name.vb: Action(Of ITcpConnection, SocketError)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: System.Net.Sockets.SocketError
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: System.Net.Sockets.SocketError
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net
  commentId: N:System.Net
  isExternal: true
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.CreateClientFromSocket*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionSsl.CreateClientFromSocket
  name: CreateClientFromSocket
  nameWithType: TcpConnectionSsl.CreateClientFromSocket
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.CreateClientFromSocket
- uid: System.Net.Sockets.Socket
  commentId: T:System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets
  commentId: N:System.Net.Sockets
  isExternal: true
  name: System.Net.Sockets
  nameWithType: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.CreateServerFromSocket*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionSsl.CreateServerFromSocket
  name: CreateServerFromSocket
  nameWithType: TcpConnectionSsl.CreateServerFromSocket
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.CreateServerFromSocket
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: X509Certificate
  nameWithType: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: true
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: EventStore.Transport.Tcp.ITcpConnection.ConnectionClosed
  commentId: E:EventStore.Transport.Tcp.ITcpConnection.ConnectionClosed
  parent: EventStore.Transport.Tcp.ITcpConnection
  name: ConnectionClosed
  nameWithType: ITcpConnection.ConnectionClosed
  fullName: EventStore.Transport.Tcp.ITcpConnection.ConnectionClosed
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.ConnectionId*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionSsl.ConnectionId
  name: ConnectionId
  nameWithType: TcpConnectionSsl.ConnectionId
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.ConnectionId
- uid: EventStore.Transport.Tcp.ITcpConnection.ConnectionId
  commentId: P:EventStore.Transport.Tcp.ITcpConnection.ConnectionId
  parent: EventStore.Transport.Tcp.ITcpConnection
  name: ConnectionId
  nameWithType: ITcpConnection.ConnectionId
  fullName: EventStore.Transport.Tcp.ITcpConnection.ConnectionId
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.SendQueueSize*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionSsl.SendQueueSize
  name: SendQueueSize
  nameWithType: TcpConnectionSsl.SendQueueSize
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.SendQueueSize
- uid: EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
  commentId: P:EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
  parent: EventStore.Transport.Tcp.ITcpConnection
  name: SendQueueSize
  nameWithType: ITcpConnection.SendQueueSize
  fullName: EventStore.Transport.Tcp.ITcpConnection.SendQueueSize
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.ClientConnectionName*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionSsl.ClientConnectionName
  name: ClientConnectionName
  nameWithType: TcpConnectionSsl.ClientConnectionName
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.ClientConnectionName
- uid: EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
  commentId: P:EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
  parent: EventStore.Transport.Tcp.ITcpConnection
  name: ClientConnectionName
  nameWithType: ITcpConnection.ClientConnectionName
  fullName: EventStore.Transport.Tcp.ITcpConnection.ClientConnectionName
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.ValidateServerCertificate*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionSsl.ValidateServerCertificate
  name: ValidateServerCertificate
  nameWithType: TcpConnectionSsl.ValidateServerCertificate
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.ValidateServerCertificate
- uid: System.Security.Cryptography.X509Certificates.X509Chain
  commentId: T:System.Security.Cryptography.X509Certificates.X509Chain
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: X509Chain
  nameWithType: X509Chain
  fullName: System.Security.Cryptography.X509Certificates.X509Chain
- uid: System.Net.Security.SslPolicyErrors
  commentId: T:System.Net.Security.SslPolicyErrors
  parent: System.Net.Security
  isExternal: true
  name: SslPolicyErrors
  nameWithType: SslPolicyErrors
  fullName: System.Net.Security.SslPolicyErrors
- uid: System.Net.Security
  commentId: N:System.Net.Security
  isExternal: true
  name: System.Net.Security
  nameWithType: System.Net.Security
  fullName: System.Net.Security
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.EnqueueSend*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionSsl.EnqueueSend
  name: EnqueueSend
  nameWithType: TcpConnectionSsl.EnqueueSend
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.EnqueueSend
- uid: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
  commentId: M:EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
  parent: EventStore.Transport.Tcp.ITcpConnection
  isExternal: true
  name: EnqueueSend(IEnumerable<ArraySegment<Byte>>)
  nameWithType: ITcpConnection.EnqueueSend(IEnumerable<ArraySegment<Byte>>)
  fullName: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(System.Collections.Generic.IEnumerable<System.ArraySegment<System.Byte>>)
  nameWithType.vb: ITcpConnection.EnqueueSend(IEnumerable(Of ArraySegment(Of Byte)))
  fullName.vb: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(System.Collections.Generic.IEnumerable(Of System.ArraySegment(Of System.Byte)))
  name.vb: EnqueueSend(IEnumerable(Of ArraySegment(Of Byte)))
  spec.csharp:
  - uid: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
    name: EnqueueSend
    nameWithType: ITcpConnection.EnqueueSend
    fullName: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})
    name: EnqueueSend
    nameWithType: ITcpConnection.EnqueueSend
    fullName: EventStore.Transport.Tcp.ITcpConnection.EnqueueSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ArraySegment<Byte>>
  nameWithType: IEnumerable<ArraySegment<Byte>>
  fullName: System.Collections.Generic.IEnumerable<System.ArraySegment<System.Byte>>
  nameWithType.vb: IEnumerable(Of ArraySegment(Of Byte))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.ArraySegment(Of System.Byte))
  name.vb: IEnumerable(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.ReceiveAsync*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionSsl.ReceiveAsync
  name: ReceiveAsync
  nameWithType: TcpConnectionSsl.ReceiveAsync
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.ReceiveAsync
- uid: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}})
  commentId: M:EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}})
  parent: EventStore.Transport.Tcp.ITcpConnection
  isExternal: true
  name: ReceiveAsync(Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>)
  nameWithType: ITcpConnection.ReceiveAsync(Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>)
  fullName: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(System.Action<EventStore.Transport.Tcp.ITcpConnection, System.Collections.Generic.IEnumerable<System.ArraySegment<System.Byte>>>)
  nameWithType.vb: ITcpConnection.ReceiveAsync(Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte))))
  fullName.vb: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(System.Action(Of EventStore.Transport.Tcp.ITcpConnection, System.Collections.Generic.IEnumerable(Of System.ArraySegment(Of System.Byte))))
  name.vb: ReceiveAsync(Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte))))
  spec.csharp:
  - uid: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}})
    name: ReceiveAsync
    nameWithType: ITcpConnection.ReceiveAsync
    fullName: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync(System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}})
    name: ReceiveAsync
    nameWithType: ITcpConnection.ReceiveAsync
    fullName: EventStore.Transport.Tcp.ITcpConnection.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}}
  commentId: T:System.Action{EventStore.Transport.Tcp.ITcpConnection,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}}
  parent: System
  definition: System.Action`2
  name: Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>
  nameWithType: Action<ITcpConnection, IEnumerable<ArraySegment<Byte>>>
  fullName: System.Action<EventStore.Transport.Tcp.ITcpConnection, System.Collections.Generic.IEnumerable<System.ArraySegment<System.Byte>>>
  nameWithType.vb: Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte)))
  fullName.vb: System.Action(Of EventStore.Transport.Tcp.ITcpConnection, System.Collections.Generic.IEnumerable(Of System.ArraySegment(Of System.Byte)))
  name.vb: Action(Of ITcpConnection, IEnumerable(Of ArraySegment(Of Byte)))
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.ITcpConnection
    name: ITcpConnection
    nameWithType: ITcpConnection
    fullName: EventStore.Transport.Tcp.ITcpConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.Close*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionSsl.Close
  name: Close
  nameWithType: TcpConnectionSsl.Close
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.Close
- uid: EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
  commentId: M:EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
  parent: EventStore.Transport.Tcp.ITcpConnection
  isExternal: true
  name: Close(String)
  nameWithType: ITcpConnection.Close(String)
  fullName: EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
    name: Close
    nameWithType: ITcpConnection.Close
    fullName: EventStore.Transport.Tcp.ITcpConnection.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.ITcpConnection.Close(System.String)
    name: Close
    nameWithType: ITcpConnection.Close
    fullName: EventStore.Transport.Tcp.ITcpConnection.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.SetClientConnectionName*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionSsl.SetClientConnectionName
  name: SetClientConnectionName
  nameWithType: TcpConnectionSsl.SetClientConnectionName
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.SetClientConnectionName
- uid: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
  commentId: M:EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
  parent: EventStore.Transport.Tcp.ITcpConnection
  isExternal: true
  name: SetClientConnectionName(String)
  nameWithType: ITcpConnection.SetClientConnectionName(String)
  fullName: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
    name: SetClientConnectionName
    nameWithType: ITcpConnection.SetClientConnectionName
    fullName: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName(System.String)
    name: SetClientConnectionName
    nameWithType: ITcpConnection.SetClientConnectionName
    fullName: EventStore.Transport.Tcp.ITcpConnection.SetClientConnectionName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpConnectionSsl.ToString*
  commentId: Overload:EventStore.Transport.Tcp.TcpConnectionSsl.ToString
  name: ToString
  nameWithType: TcpConnectionSsl.ToString
  fullName: EventStore.Transport.Tcp.TcpConnectionSsl.ToString

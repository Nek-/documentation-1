### YamlMime:ManagedReference
items:
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1
  commentId: T:EventStore.Transport.Tcp.TcpTypedConnection`1
  id: TcpTypedConnection`1
  parent: EventStore.Transport.Tcp
  children:
  - EventStore.Transport.Tcp.TcpTypedConnection`1.#ctor(EventStore.Transport.Tcp.ITcpConnection,EventStore.Transport.Tcp.Formatting.IMessageFormatter{`0},EventStore.Transport.Tcp.Framing.IMessageFramer)
  - EventStore.Transport.Tcp.TcpTypedConnection`1.Close(System.String)
  - EventStore.Transport.Tcp.TcpTypedConnection`1.ConnectionClosed
  - EventStore.Transport.Tcp.TcpTypedConnection`1.EnqueueSend(`0)
  - EventStore.Transport.Tcp.TcpTypedConnection`1.LocalEndPoint
  - EventStore.Transport.Tcp.TcpTypedConnection`1.ReceiveAsync(Action{EventStore.Transport.Tcp.TcpTypedConnection{`0},`0})
  - EventStore.Transport.Tcp.TcpTypedConnection`1.RemoteEndPoint
  - EventStore.Transport.Tcp.TcpTypedConnection`1.SendQueueSize
  langs:
  - csharp
  - vb
  name: TcpTypedConnection<T>
  nameWithType: TcpTypedConnection<T>
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>
  type: Class
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpTypedConnection.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: TcpTypedConnection
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpTypedConnection.cs
    startLine: 10
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: 'public class TcpTypedConnection<T> : object'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class TcpTypedConnection(Of T)
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  - System.Object.EventStore.Common.Utils.Json.ToJson
  - System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  - EventStore.Transport.Tcp.TcpTypedConnection`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  - EventStore.Transport.Tcp.TcpTypedConnection`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  nameWithType.vb: TcpTypedConnection(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T)
  name.vb: TcpTypedConnection(Of T)
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.ConnectionClosed
  commentId: E:EventStore.Transport.Tcp.TcpTypedConnection`1.ConnectionClosed
  id: ConnectionClosed
  parent: EventStore.Transport.Tcp.TcpTypedConnection`1
  langs:
  - csharp
  - vb
  name: ConnectionClosed
  nameWithType: TcpTypedConnection<T>.ConnectionClosed
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.ConnectionClosed
  type: Event
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpTypedConnection.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ConnectionClosed
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpTypedConnection.cs
    startLine: 14
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public event Action<TcpTypedConnection<T>, SocketError> ConnectionClosed
    return:
      type: Action{EventStore.Transport.Tcp.TcpTypedConnection`1,SocketError}
    content.vb: Public Event ConnectionClosed As Action(Of TcpTypedConnection(Of T), SocketError)
  nameWithType.vb: TcpTypedConnection(Of T).ConnectionClosed
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).ConnectionClosed
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.RemoteEndPoint
  commentId: P:EventStore.Transport.Tcp.TcpTypedConnection`1.RemoteEndPoint
  id: RemoteEndPoint
  parent: EventStore.Transport.Tcp.TcpTypedConnection`1
  langs:
  - csharp
  - vb
  name: RemoteEndPoint
  nameWithType: TcpTypedConnection<T>.RemoteEndPoint
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.RemoteEndPoint
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpTypedConnection.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: RemoteEndPoint
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpTypedConnection.cs
    startLine: 22
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public IPEndPoint RemoteEndPoint { get; }
    parameters: []
    return:
      type: IPEndPoint
    content.vb: Public ReadOnly Property RemoteEndPoint As IPEndPoint
  overload: EventStore.Transport.Tcp.TcpTypedConnection`1.RemoteEndPoint*
  nameWithType.vb: TcpTypedConnection(Of T).RemoteEndPoint
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).RemoteEndPoint
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.LocalEndPoint
  commentId: P:EventStore.Transport.Tcp.TcpTypedConnection`1.LocalEndPoint
  id: LocalEndPoint
  parent: EventStore.Transport.Tcp.TcpTypedConnection`1
  langs:
  - csharp
  - vb
  name: LocalEndPoint
  nameWithType: TcpTypedConnection<T>.LocalEndPoint
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.LocalEndPoint
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpTypedConnection.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: LocalEndPoint
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpTypedConnection.cs
    startLine: 23
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public IPEndPoint LocalEndPoint { get; }
    parameters: []
    return:
      type: IPEndPoint
    content.vb: Public ReadOnly Property LocalEndPoint As IPEndPoint
  overload: EventStore.Transport.Tcp.TcpTypedConnection`1.LocalEndPoint*
  nameWithType.vb: TcpTypedConnection(Of T).LocalEndPoint
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).LocalEndPoint
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.SendQueueSize
  commentId: P:EventStore.Transport.Tcp.TcpTypedConnection`1.SendQueueSize
  id: SendQueueSize
  parent: EventStore.Transport.Tcp.TcpTypedConnection`1
  langs:
  - csharp
  - vb
  name: SendQueueSize
  nameWithType: TcpTypedConnection<T>.SendQueueSize
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.SendQueueSize
  type: Property
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpTypedConnection.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: SendQueueSize
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpTypedConnection.cs
    startLine: 25
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public int SendQueueSize { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SendQueueSize As Integer
  overload: EventStore.Transport.Tcp.TcpTypedConnection`1.SendQueueSize*
  nameWithType.vb: TcpTypedConnection(Of T).SendQueueSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).SendQueueSize
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.#ctor(EventStore.Transport.Tcp.ITcpConnection,EventStore.Transport.Tcp.Formatting.IMessageFormatter{`0},EventStore.Transport.Tcp.Framing.IMessageFramer)
  commentId: M:EventStore.Transport.Tcp.TcpTypedConnection`1.#ctor(EventStore.Transport.Tcp.ITcpConnection,EventStore.Transport.Tcp.Formatting.IMessageFormatter{`0},EventStore.Transport.Tcp.Framing.IMessageFramer)
  id: '#ctor(EventStore.Transport.Tcp.ITcpConnection,EventStore.Transport.Tcp.Formatting.IMessageFormatter{`0},EventStore.Transport.Tcp.Framing.IMessageFramer)'
  parent: EventStore.Transport.Tcp.TcpTypedConnection`1
  langs:
  - csharp
  - vb
  name: TcpTypedConnection(ITcpConnection, IMessageFormatter<T>, IMessageFramer)
  nameWithType: TcpTypedConnection<T>.TcpTypedConnection(ITcpConnection, IMessageFormatter<T>, IMessageFramer)
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.TcpTypedConnection(EventStore.Transport.Tcp.ITcpConnection, EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>, EventStore.Transport.Tcp.Framing.IMessageFramer)
  type: Constructor
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpTypedConnection.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: .ctor
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpTypedConnection.cs
    startLine: 30
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public TcpTypedConnection(ITcpConnection connection, IMessageFormatter<T> formatter, IMessageFramer framer)
    parameters:
    - id: connection
      type: EventStore.Transport.Tcp.ITcpConnection
    - id: formatter
      type: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}
    - id: framer
      type: EventStore.Transport.Tcp.Framing.IMessageFramer
    content.vb: Public Sub New(connection As ITcpConnection, formatter As IMessageFormatter(Of T), framer As IMessageFramer)
  overload: EventStore.Transport.Tcp.TcpTypedConnection`1.#ctor*
  nameWithType.vb: TcpTypedConnection(Of T).TcpTypedConnection(ITcpConnection, IMessageFormatter(Of T), IMessageFramer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).TcpTypedConnection(EventStore.Transport.Tcp.ITcpConnection, EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T), EventStore.Transport.Tcp.Framing.IMessageFramer)
  name.vb: TcpTypedConnection(ITcpConnection, IMessageFormatter(Of T), IMessageFramer)
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.EnqueueSend(`0)
  commentId: M:EventStore.Transport.Tcp.TcpTypedConnection`1.EnqueueSend(`0)
  id: EnqueueSend(`0)
  parent: EventStore.Transport.Tcp.TcpTypedConnection`1
  langs:
  - csharp
  - vb
  name: EnqueueSend(T)
  nameWithType: TcpTypedConnection<T>.EnqueueSend(T)
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.EnqueueSend(T)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpTypedConnection.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: EnqueueSend
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpTypedConnection.cs
    startLine: 58
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public void EnqueueSend(T message)
    parameters:
    - id: message
      type: '{T}'
    content.vb: Public Sub EnqueueSend(message As T)
  overload: EventStore.Transport.Tcp.TcpTypedConnection`1.EnqueueSend*
  nameWithType.vb: TcpTypedConnection(Of T).EnqueueSend(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).EnqueueSend(T)
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.ReceiveAsync(Action{EventStore.Transport.Tcp.TcpTypedConnection{`0},`0})
  commentId: M:EventStore.Transport.Tcp.TcpTypedConnection`1.ReceiveAsync(Action{EventStore.Transport.Tcp.TcpTypedConnection{`0},`0})
  id: ReceiveAsync(Action{EventStore.Transport.Tcp.TcpTypedConnection{`0},`0})
  parent: EventStore.Transport.Tcp.TcpTypedConnection`1
  langs:
  - csharp
  - vb
  name: ReceiveAsync(Action<TcpTypedConnection<T>, T>)
  nameWithType: TcpTypedConnection<T>.ReceiveAsync(Action<TcpTypedConnection<T>, T>)
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.ReceiveAsync(Action<EventStore.Transport.Tcp.TcpTypedConnection<T>, T>)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpTypedConnection.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: ReceiveAsync
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpTypedConnection.cs
    startLine: 64
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public void ReceiveAsync(Action<TcpTypedConnection<T>, T> callback)
    parameters:
    - id: callback
      type: Action{EventStore.Transport.Tcp.TcpTypedConnection`1,{T}}
    content.vb: Public Sub ReceiveAsync(callback As Action(Of TcpTypedConnection(Of T), T))
  overload: EventStore.Transport.Tcp.TcpTypedConnection`1.ReceiveAsync*
  nameWithType.vb: TcpTypedConnection(Of T).ReceiveAsync(Action(Of TcpTypedConnection(Of T), T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).ReceiveAsync(Action(Of EventStore.Transport.Tcp.TcpTypedConnection(Of T), T))
  name.vb: ReceiveAsync(Action(Of TcpTypedConnection(Of T), T))
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.Close(System.String)
  commentId: M:EventStore.Transport.Tcp.TcpTypedConnection`1.Close(System.String)
  id: Close(System.String)
  parent: EventStore.Transport.Tcp.TcpTypedConnection`1
  langs:
  - csharp
  - vb
  name: Close(String)
  nameWithType: TcpTypedConnection<T>.Close(String)
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.Close(System.String)
  type: Method
  source:
    remote:
      path: src/EventStore.Transport.Tcp/TcpTypedConnection.cs
      branch: master
      repo: git@github.com:ChrisChinchilla/EventStore.git
    id: Close
    path: ../EventStore/src/EventStore.Transport.Tcp/TcpTypedConnection.cs
    startLine: 97
  assemblies:
  - EventStore.Transport.Tcp
  namespace: EventStore.Transport.Tcp
  syntax:
    content: public void Close(string reason = null)
    parameters:
    - id: reason
      type: System.String
    content.vb: Public Sub Close(reason As String = Nothing)
  overload: EventStore.Transport.Tcp.TcpTypedConnection`1.Close*
  nameWithType.vb: TcpTypedConnection(Of T).Close(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).Close(System.String)
references:
- uid: EventStore.Transport.Tcp
  commentId: N:EventStore.Transport.Tcp
  name: EventStore.Transport.Tcp
  nameWithType: EventStore.Transport.Tcp
  fullName: EventStore.Transport.Tcp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.EventStore.Common.Utils.Json.ToJsonBytes
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  name: ToJsonBytes()
  nameWithType: Json.ToJsonBytes()
  fullName: EventStore.Common.Utils.Json.ToJsonBytes()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToJson
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToJson(System.Object)
  name: ToJson()
  nameWithType: Json.ToJson()
  fullName: EventStore.Common.Utils.Json.ToJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.EventStore.Common.Utils.Json.ToCanonicalJson
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  parent: EventStore.Common.Utils.Json
  definition: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  name: ToCanonicalJson()
  nameWithType: Json.ToCanonicalJson()
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson()
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<TcpTypedConnection<T>>()
  nameWithType: ProtobufExtensions.Serialize<TcpTypedConnection<T>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.TcpTypedConnection<T>>()
  nameWithType.vb: ProtobufExtensions.Serialize(Of TcpTypedConnection(Of T))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.TcpTypedConnection(Of T))()
  name.vb: Serialize(Of TcpTypedConnection(Of T))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize<TcpTypedConnection<T>>
    nameWithType: ProtobufExtensions.Serialize<TcpTypedConnection<T>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<EventStore.Transport.Tcp.TcpTypedConnection<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1
    name: Serialize(Of TcpTypedConnection(Of T))
    nameWithType: ProtobufExtensions.Serialize(Of TcpTypedConnection(Of T))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of EventStore.Transport.Tcp.TcpTypedConnection(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  parent: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  definition: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<TcpTypedConnection<T>>()
  nameWithType: ProtobufExtensions.SerializeToArray<TcpTypedConnection<T>>()
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.TcpTypedConnection<T>>()
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of TcpTypedConnection(Of T))()
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.TcpTypedConnection(Of T))()
  name.vb: SerializeToArray(Of TcpTypedConnection(Of T))()
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray<TcpTypedConnection<T>>
    nameWithType: ProtobufExtensions.SerializeToArray<TcpTypedConnection<T>>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<EventStore.Transport.Tcp.TcpTypedConnection<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1
    name: SerializeToArray(Of TcpTypedConnection(Of T))
    nameWithType: ProtobufExtensions.SerializeToArray(Of TcpTypedConnection(Of T))
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of EventStore.Transport.Tcp.TcpTypedConnection(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  isExternal: true
  name: ToJsonBytes(Object)
  nameWithType: Json.ToJsonBytes(Object)
  fullName: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJsonBytes(System.Object)
    name: ToJsonBytes
    nameWithType: Json.ToJsonBytes
    fullName: EventStore.Common.Utils.Json.ToJsonBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json
  commentId: T:EventStore.Common.Utils.Json
  parent: EventStore.Common.Utils
  name: Json
  nameWithType: Json
  fullName: EventStore.Common.Utils.Json
- uid: EventStore.Common.Utils.Json.ToJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: Json.ToJson(Object)
  fullName: EventStore.Common.Utils.Json.ToJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToJson(System.Object)
    name: ToJson
    nameWithType: Json.ToJson
    fullName: EventStore.Common.Utils.Json.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  commentId: M:EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  isExternal: true
  name: ToCanonicalJson(Object)
  nameWithType: Json.ToCanonicalJson(Object)
  fullName: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
  spec.csharp:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Common.Utils.Json.ToCanonicalJson(System.Object)
    name: ToCanonicalJson
    nameWithType: Json.ToCanonicalJson
    fullName: EventStore.Common.Utils.Json.ToCanonicalJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
  name: Serialize<T>(T)
  nameWithType: ProtobufExtensions.Serialize<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>(T)
  nameWithType.vb: ProtobufExtensions.Serialize(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ProtobufExtensions.Serialize<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ProtobufExtensions.Serialize(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  commentId: T:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
  parent: EventStore.Core.Services.Transport.Tcp
  name: ProtobufExtensions
  nameWithType: ProtobufExtensions
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions
- uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  commentId: M:EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
  name: SerializeToArray<T>(T)
  nameWithType: ProtobufExtensions.SerializeToArray<T>(T)
  fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>(T)
  nameWithType.vb: ProtobufExtensions.SerializeToArray(Of T)(T)
  fullName.vb: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)(T)
  name.vb: SerializeToArray(Of T)(T)
  spec.csharp:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray<T>
    nameWithType: ProtobufExtensions.SerializeToArray<T>
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray``1(``0)
    name: SerializeToArray(Of T)
    nameWithType: ProtobufExtensions.SerializeToArray(Of T)
    fullName: EventStore.Core.Services.Transport.Tcp.ProtobufExtensions.SerializeToArray(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Common.Utils
  commentId: N:EventStore.Common.Utils
  name: EventStore.Common.Utils
  nameWithType: EventStore.Common.Utils
  fullName: EventStore.Common.Utils
- uid: EventStore.Core.Services.Transport.Tcp
  commentId: N:EventStore.Core.Services.Transport.Tcp
  name: EventStore.Core.Services.Transport.Tcp
  nameWithType: EventStore.Core.Services.Transport.Tcp
  fullName: EventStore.Core.Services.Transport.Tcp
- uid: Action{EventStore.Transport.Tcp.TcpTypedConnection`1,SocketError}
  commentId: '!:Action{EventStore.Transport.Tcp.TcpTypedConnection`1,SocketError}'
  definition: Action`2
  name: Action<TcpTypedConnection<T>, SocketError>
  nameWithType: Action<TcpTypedConnection<T>, SocketError>
  fullName: Action<EventStore.Transport.Tcp.TcpTypedConnection<T>, SocketError>
  nameWithType.vb: Action(Of TcpTypedConnection(Of T), SocketError)
  fullName.vb: Action(Of EventStore.Transport.Tcp.TcpTypedConnection(Of T), SocketError)
  name.vb: Action(Of TcpTypedConnection(Of T), SocketError)
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: SocketError
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: SocketError
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`2
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.RemoteEndPoint*
  commentId: Overload:EventStore.Transport.Tcp.TcpTypedConnection`1.RemoteEndPoint
  name: RemoteEndPoint
  nameWithType: TcpTypedConnection<T>.RemoteEndPoint
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.RemoteEndPoint
  nameWithType.vb: TcpTypedConnection(Of T).RemoteEndPoint
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).RemoteEndPoint
- uid: IPEndPoint
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: IPEndPoint
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.LocalEndPoint*
  commentId: Overload:EventStore.Transport.Tcp.TcpTypedConnection`1.LocalEndPoint
  name: LocalEndPoint
  nameWithType: TcpTypedConnection<T>.LocalEndPoint
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.LocalEndPoint
  nameWithType.vb: TcpTypedConnection(Of T).LocalEndPoint
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).LocalEndPoint
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.SendQueueSize*
  commentId: Overload:EventStore.Transport.Tcp.TcpTypedConnection`1.SendQueueSize
  name: SendQueueSize
  nameWithType: TcpTypedConnection<T>.SendQueueSize
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.SendQueueSize
  nameWithType.vb: TcpTypedConnection(Of T).SendQueueSize
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).SendQueueSize
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.#ctor*
  commentId: Overload:EventStore.Transport.Tcp.TcpTypedConnection`1.#ctor
  name: TcpTypedConnection
  nameWithType: TcpTypedConnection<T>.TcpTypedConnection
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.TcpTypedConnection
  nameWithType.vb: TcpTypedConnection(Of T).TcpTypedConnection
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).TcpTypedConnection
- uid: EventStore.Transport.Tcp.ITcpConnection
  commentId: T:EventStore.Transport.Tcp.ITcpConnection
  parent: EventStore.Transport.Tcp
  name: ITcpConnection
  nameWithType: ITcpConnection
  fullName: EventStore.Transport.Tcp.ITcpConnection
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter{{T}}
  commentId: T:EventStore.Transport.Tcp.Formatting.IMessageFormatter{`0}
  parent: EventStore.Transport.Tcp.Formatting
  definition: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
  name: IMessageFormatter<T>
  nameWithType: IMessageFormatter<T>
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>
  nameWithType.vb: IMessageFormatter(Of T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T)
  name.vb: IMessageFormatter(Of T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Framing.IMessageFramer
  commentId: T:EventStore.Transport.Tcp.Framing.IMessageFramer
  parent: EventStore.Transport.Tcp.Framing
  name: IMessageFramer
  nameWithType: IMessageFramer
  fullName: EventStore.Transport.Tcp.Framing.IMessageFramer
- uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
  commentId: T:EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
  name: IMessageFormatter<T>
  nameWithType: IMessageFormatter<T>
  fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter<T>
  nameWithType.vb: IMessageFormatter(Of T)
  fullName.vb: EventStore.Transport.Tcp.Formatting.IMessageFormatter(Of T)
  name.vb: IMessageFormatter(Of T)
  spec.csharp:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EventStore.Transport.Tcp.Formatting.IMessageFormatter`1
    name: IMessageFormatter
    nameWithType: IMessageFormatter
    fullName: EventStore.Transport.Tcp.Formatting.IMessageFormatter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.Formatting
  commentId: N:EventStore.Transport.Tcp.Formatting
  name: EventStore.Transport.Tcp.Formatting
  nameWithType: EventStore.Transport.Tcp.Formatting
  fullName: EventStore.Transport.Tcp.Formatting
- uid: EventStore.Transport.Tcp.Framing
  commentId: N:EventStore.Transport.Tcp.Framing
  name: EventStore.Transport.Tcp.Framing
  nameWithType: EventStore.Transport.Tcp.Framing
  fullName: EventStore.Transport.Tcp.Framing
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.EnqueueSend*
  commentId: Overload:EventStore.Transport.Tcp.TcpTypedConnection`1.EnqueueSend
  name: EnqueueSend
  nameWithType: TcpTypedConnection<T>.EnqueueSend
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.EnqueueSend
  nameWithType.vb: TcpTypedConnection(Of T).EnqueueSend
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).EnqueueSend
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.ReceiveAsync*
  commentId: Overload:EventStore.Transport.Tcp.TcpTypedConnection`1.ReceiveAsync
  name: ReceiveAsync
  nameWithType: TcpTypedConnection<T>.ReceiveAsync
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.ReceiveAsync
  nameWithType.vb: TcpTypedConnection(Of T).ReceiveAsync
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).ReceiveAsync
- uid: Action{EventStore.Transport.Tcp.TcpTypedConnection`1,{T}}
  commentId: '!:Action{EventStore.Transport.Tcp.TcpTypedConnection`1,`0}'
  definition: Action`2
  name: Action<TcpTypedConnection<T>, T>
  nameWithType: Action<TcpTypedConnection<T>, T>
  fullName: Action<EventStore.Transport.Tcp.TcpTypedConnection<T>, T>
  nameWithType.vb: Action(Of TcpTypedConnection(Of T), T)
  fullName.vb: Action(Of EventStore.Transport.Tcp.TcpTypedConnection(Of T), T)
  name.vb: Action(Of TcpTypedConnection(Of T), T)
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EventStore.Transport.Tcp.TcpTypedConnection`1
    name: TcpTypedConnection
    nameWithType: TcpTypedConnection
    fullName: EventStore.Transport.Tcp.TcpTypedConnection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EventStore.Transport.Tcp.TcpTypedConnection`1.Close*
  commentId: Overload:EventStore.Transport.Tcp.TcpTypedConnection`1.Close
  name: Close
  nameWithType: TcpTypedConnection<T>.Close
  fullName: EventStore.Transport.Tcp.TcpTypedConnection<T>.Close
  nameWithType.vb: TcpTypedConnection(Of T).Close
  fullName.vb: EventStore.Transport.Tcp.TcpTypedConnection(Of T).Close
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String

{
  "swagger": "2.0",
  "info": {
    "description": "The HTTP API for Event Store",
    "version": "4.0.2",
    "title": "Event Store HTTP API",
    "contact": {
      "email": "you@your-company.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "paths": {
    "/subscriptions": {
      "get": {
        "summary": "Get information for all subscriptions",
        "operationId": "readSubscriptions",
        "description": "Needed",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/subscriptions/{stream}": {
      "get": {
        "summary": "Returns stream information",
        "operationId": "streamInformation",
        "description": "Needed",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/subscriptions/{stream}/{subscription}/info": {
      "get": {
        "summary": "Reads stream information via a persistent subscription",
        "operationId": "readSubscriptionInformation",
        "description": "Needed",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream the persistent subscription is on",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription",
            "description": "The name of the subscription group",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/subscriptions/{stream}/{subscription}": {
      "get": {
        "summary": "Reads a stream via a persistent subscription",
        "operationId": "readSubscription",
        "description": "By default, reading a stream via a persistent subscription will return a single event per request and will not embed the event properties as part of the response. Read [Reading Streams]({{site.baseurl}}/http-api/reading-streams) for information on the different embed levels.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream the persistent subscription is on",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription",
            "description": "The name of the subscription group",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "embed",
            "type": "string",
            "description": "Needed",
            "enum": [
              "None",
              "Content",
              "Rich",
              "Body",
              "PrettyBody",
              "TryHarder"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "put": {
        "summary": "Create a persistant subscription",
        "operationId": "createSubscription",
        "description": "Before interacting with a subscription group, you need to create one. You will receive an error if you attempt to create a subscription group more than once. This requires [admin permissions](/server/access-control-lists).",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream the persistent subscription is on",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription",
            "description": "The name of the subscription group",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "subscriptionItem",
            "description": "Subscription to create",
            "schema": {
              "$ref": "#/definitions/SubscriptionItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "summary": "Update a persistant subscription",
        "operationId": "updateSubscription",
        "description": "You can edit the settings of an existing subscription while it is running. This will drop the current subscribers and will reset the subscription internally.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream the persistent subscription is on",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription",
            "description": "The name of the subscription group",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "subscriptionItem",
            "description": "Subscription to create",
            "schema": {
              "$ref": "#/definitions/SubscriptionItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "delete": {
        "summary": "Deletes a subscription",
        "description": "",
        "operationId": "deleteSubscription",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream the persistent subscription is on",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription",
            "description": "The name of the subscription group",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/subscriptions/{stream}/{subscription}/{count}": {
      "get": {
        "summary": "Reads a stream via a persistent subscription and return a specific number of events",
        "operationId": "readSubscriptionWithCount",
        "description": "By default, reading a stream via a persistent subscription will return a single event per request and will not embed the event properties as part of the response. Read [Reading Streams]({{site.baseurl}}/http-api/reading-streams) for information on the different embed levels.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream the persistent subscription is on",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription",
            "description": "The name of the subscription group",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "count",
            "type": "integer",
            "format": "int64",
            "required": true,
            "description": "How many events to return for the request."
          },
          {
            "in": "query",
            "name": "embed",
            "type": "string",
            "enum": [
              "None",
              "Content",
              "Rich",
              "Body",
              "PrettyBody",
              "TryHarder"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/subscriptions/{stream}/{subscription}/ack/{messageid}": {
      "post": {
        "summary": "Acknowledge a single message",
        "operationId": "acknowledgeSingleMessage",
        "description": "Clients must acknowledge (or not acknowledge) messages in the competing consumer model. If the client fails to respond in the given timeout period, the message will be retried. You should use the `rel` links in the feed for acknowledgements not bookmark URIs as they are subject to change in future versions.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream the persistent subscription is on",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription",
            "description": "The name of the subscription group",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "messageid",
            "description": "The id of the message that needs to be acked",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/subscriptions/{stream}/{subscription}/ack": {
      "post": {
        "summary": "Acknowledge multiple messages",
        "operationId": "acknowledgeMultipleMessages",
        "description": "Clients must acknowledge (or not acknowledge) messages in the competing consumer model. If the client fails to respond in the given timeout period, the message will be retried. You should use the `rel` links in the feed for acknowledgements not bookmark URIs as they are subject to change in future versions.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream the persistent subscription is on",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription",
            "description": "The name of the subscription group",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "ids",
            "description": "The ids of the messages that need to be acked separated by commas",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/subscriptions/{stream}/{subscription}/nack/{messageid}": {
      "post": {
        "summary": "Negative acknowledge a single message",
        "operationId": "negativeAcknowledgeSingleMessage",
        "description": "Clients must acknowledge (or not acknowledge) messages in the competing consumer model. If the client fails to respond in the given timeout period, the message will be retried. You should use the `rel` links in the feed for acknowledgements not bookmark URIs as they are subject to change in future versions.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream the persistent subscription is on",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription",
            "description": "The name of the subscription group",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "messageid",
            "description": "The id of the message that needs to be nacked",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "action",
            "type": "string",
            "description": "<ul><li>**Park** - Don't retry the message, park it until a request is sent to reply the parked messages<li>**Retry** - Retry the message<li>**Skip** - Discard the message<li>**Stop** - Stop the subscription</ul>",
            "enum": [
              "Park",
              "Retyr",
              "Skip",
              "Stop"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/subscriptions/{stream}/{subscription}/nack": {
      "post": {
        "summary": "Negative acknowledge multiple messages",
        "operationId": "negativeAcknowledgeMultipleMessages",
        "description": "Clients must acknowledge (or not acknowledge) messages in the competing consumer model. If the client fails to respond in the given timeout period, the message will be retried. You should use the `rel` links in the feed for acknowledgements not bookmark URIs as they are subject to change in future versions.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream the persistent subscription is on",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription",
            "description": "The name of the subscription group",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "ids",
            "description": "The ids of the messages that need to be nacked separated by commas",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "action",
            "type": "string",
            "description": "<ul><li>**Park** - Don't retry the message, park it until a request is sent to reply the parked messages<li>**Retry** - Retry the message<li>**Skip** - Discard the message<li>**Stop** - Stop the subscription</ul>",
            "enum": [
              "Park",
              "Retry",
              "Skip",
              "Stop"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/subscriptions/{stream}/{subscription}/replayParked": {
      "post": {
        "summary": "Replay any previously parked messages in a stream",
        "operationId": "replayParkedMessages",
        "description": "Replay any previously parked messages in a stream that were parked by a negative acknowledgement action.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream the persistent subscription is on",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription",
            "description": "The name of the subscription group",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/streams/{stream}": {
      "get": {
        "summary": "Reads a stream",
        "operationId": "readStream",
        "description": "TBC",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "embed",
            "type": "string",
            "enum": [
              "None",
              "Content",
              "Rich",
              "Body",
              "PrettyBody",
              "TryHarder"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant stream"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "summary": "Create a stream",
        "operationId": "createStream",
        "description": "Create a new stream.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The name of the new stream",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "streamItem",
            "description": "Stream to create",
            "schema": {
              "$ref": "#/definitions/StreamItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant stream"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "delete": {
        "summary": "Deletes a stream",
        "description": "",
        "operationId": "deleteStream",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream ID to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant subscription"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/streams/{stream}/incoming/{guid}": {
      "post": {
        "summary": "An alternative URL to post events to",
        "operationId": "incomingUrl",
        "description": "A URL generated by Event Store if you don't supply an ID when creating a stream. You then use this URL to post events to.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The name of the stream",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "guid",
            "description": "Autogenerated UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant stream"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/streams/{stream}/{event}": {
      "get": {
        "summary": "Read a stream event",
        "operationId": "readSingleStreamEvent",
        "description": "Reads a single event from a stream.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "event",
            "description": "The event ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "embed",
            "type": "string",
            "enum": [
              "None",
              "Content",
              "Rich",
              "Body",
              "PrettyBody",
              "TryHarder"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant stream"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/streams/{stream}/{event}/{count}": {
      "get": {
        "summary": "Paginate backwards through stream events",
        "operationId": "getSpecifiedStreamEvents",
        "description": "Paginate backwards though stream events by a specified amount.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "event",
            "description": "The event ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "count",
            "type": "integer",
            "format": "int64",
            "required": true,
            "description": "How many events to skip backwards from in the request."
          },
          {
            "in": "query",
            "name": "embed",
            "type": "string",
            "enum": [
              "None",
              "Content",
              "Rich",
              "Body",
              "PrettyBody",
              "TryHarder"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant stream"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/streams/{stream}/{event}/backward/{count}": {
      "get": {
        "summary": "Paginate backwards through stream events",
        "operationId": "pageBackwardsStreamEvents",
        "description": "Paginate backwards though stream events by a specified amount.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "event",
            "description": "The event ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "count",
            "type": "integer",
            "format": "int64",
            "required": true,
            "description": "How many events to skip backwards from in the request."
          },
          {
            "in": "query",
            "name": "embed",
            "type": "string",
            "enum": [
              "None",
              "Content",
              "Rich",
              "Body",
              "PrettyBody",
              "TryHarder"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant stream"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/streams/{stream}/{event}/forward/{count}": {
      "get": {
        "summary": "Paginate forwards through stream events",
        "operationId": "pageForwardsStreamEvents",
        "description": "Paginate forwards though stream events by a specified amount.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "event",
            "description": "The event ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "count",
            "type": "integer",
            "format": "int64",
            "required": true,
            "description": "How many events to skip forwards in the request."
          },
          {
            "in": "query",
            "name": "embed",
            "type": "string",
            "enum": [
              "None",
              "Content",
              "Rich",
              "Body",
              "PrettyBody",
              "TryHarder"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant stream"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/streams/{stream}/metadata": {
      "get": {
        "summary": "Reads the metadata of a stream",
        "operationId": "readStreamMetadata",
        "description": "TBC",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The stream ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "embed",
            "type": "string",
            "enum": [
              "None",
              "Content",
              "Rich",
              "Body",
              "PrettyBody",
              "TryHarder"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant stream"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "summary": "Update stream metadata",
        "operationId": "updateStreamMetadata",
        "description": "Update the metadata of a stream.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stream",
            "description": "The name of the stream",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "streamMetadataItem",
            "description": "Metadata object",
            "schema": {
              "$ref": "#/definitions/StreamMetadataItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant stream"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/streams/$all": {
      "get": {
        "summary": "Returns all events from all streams",
        "operationId": "readAll",
        "description": "TBC",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "embed",
            "type": "string",
            "enum": [
              "None",
              "Content",
              "Rich",
              "Body",
              "PrettyBody",
              "TryHarder"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "New persistant stream"
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    }
  },
  "definitions": {
    "StreamItem": {
      "type": "object",
      "properties": {
        "ResolveLinkTos": {
          "type": "boolean",
          "description": "Whether to resolve link events"
        },
        "startFrom": {
          "type": "integer",
          "format": "int64",
          "description": "Which event position in the stream the subscription should start from"
        },
        "extraStatistics": {
          "type": "boolean",
          "description": "Whether to track latency statistics on this subscription"
        },
        "checkPointAfterMilliseconds": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of time to try to checkpoint after"
        },
        "liveBufferSize": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the buffer (in-memory) listening to live messages as they happen before paging occurs"
        },
        "readBatchSize": {
          "type": "integer",
          "format": "int64",
          "description": "The number of events to read per batch when reading the history"
        },
        "bufferSize": {
          "type": "integer",
          "format": "int64",
          "description": "The number of events to cache when paging through history"
        },
        "maxCheckPointCount": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of messages not checkpointed before forcing a checkpoint"
        },
        "maxRetryCount": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of retries (due to timeout) before a message is considered to be parked"
        },
        "maxSubscriberCount": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of subscribers allowed"
        },
        "messageTimeoutMilliseconds": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of time after which to consider a message as timedout and retried"
        },
        "minCheckPointCount": {
          "type": "integer",
          "format": "int64",
          "description": "The minimum number of messages to write to a checkpoint"
        },
        "namedConsumerStrategy": {
          "type": "string",
          "description": "The strategy to use for distributing events to client consumers",
          "enum": [
            "RoundRobin",
            "DispatchToSingle",
            "Pinned"
          ]
        }
      }
    },
    "StreamMetadataItem": {
      "type": "object",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "Alphanumeric ID"
        },
        "eventType": {
          "type": "string",
          "description": "The type of event"
        },
        "data": {
          "type": "object",
          "properties": {
            "readRole": {
              "type": "string",
              "description": "The roles allowed to read the stream."
            },
            "metaReadRole": {
              "type": "string",
              "description": "The roles allowed to read the stream metadata."
            }
          }
        }
      }
    },
    "SubscriptionItem": {
      "type": "object",
      "properties": {
        "ResolveLinkTos": {
          "type": "boolean",
          "description": "Whether to resolve link events"
        },
        "startFrom": {
          "type": "integer",
          "format": "int64",
          "description": "Which event position in the stream the subscription should start from"
        },
        "extraStatistics": {
          "type": "boolean",
          "description": "Whether to track latency statistics on this subscription"
        },
        "checkPointAfterMilliseconds": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of time to try to checkpoint after"
        },
        "liveBufferSize": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the buffer (in-memory) listening to live messages as they happen before paging occurs"
        },
        "readBatchSize": {
          "type": "integer",
          "format": "int64",
          "description": "The number of events to read per batch when reading the history"
        },
        "bufferSize": {
          "type": "integer",
          "format": "int64",
          "description": "The number of events to cache when paging through history"
        },
        "maxCheckPointCount": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of messages not checkpointed before forcing a checkpoint"
        },
        "maxRetryCount": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of retries (due to timeout) before a message is considered to be parked"
        },
        "maxSubscriberCount": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of subscribers allowed"
        },
        "messageTimeoutMilliseconds": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of time after which to consider a message as timedout and retried"
        },
        "minCheckPointCount": {
          "type": "integer",
          "format": "int64",
          "description": "The minimum number of messages to write to a checkpoint"
        },
        "namedConsumerStrategy": {
          "type": "string",
          "description": "The strategy to use for distributing events to client consumers",
          "enum": [
            "RoundRobin",
            "DispatchToSingle",
            "Pinned"
          ]
        }
      }
    }
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/ChrisChinchilla/EventStore/1.0.0",
  "schemes": [
    "https"
  ]
}